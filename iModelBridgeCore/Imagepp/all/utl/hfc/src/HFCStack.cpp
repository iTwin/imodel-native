//:>--------------------------------------------------------------------------------------+
//:>
//:>     $Source: all/utl/hfc/src/HFCStack.cpp $
//:>
//:>  $Copyright: (c) 2011 Bentley Systems, Incorporated. All rights reserved. $
//:>
//:>+--------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Class HFCStack
//-----------------------------------------------------------------------------

#include <ImagePP/h/hstdcpp.h>
#include <ImagePP/h/HDllSupport.h>
#include <Imagepp/all/h/HFCStack.h>
#include <Imagepp/all/h/HFCStackItem.h>


//-----------------------------------------------------------------------------
// public section
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// public
// Constructor
//-----------------------------------------------------------------------------
HFCStack::HFCStack()
    {
    }

//-----------------------------------------------------------------------------
// public
// Destructor
//-----------------------------------------------------------------------------
HFCStack::~HFCStack()
    {
    }

//-----------------------------------------------------------------------------
// public
// IsEmpty
//-----------------------------------------------------------------------------
bool HFCStack::IsEmpty() const
    {
    return m_Stack.empty();
    }

//-----------------------------------------------------------------------------
// public
// Push
//-----------------------------------------------------------------------------
void HFCStack::Push(const HFCPtr<HFCStackItem>& pi_rpItem)
    {
    HPRECONDITION(pi_rpItem != 0);

    m_Stack.push_back(pi_rpItem);
    }

//-----------------------------------------------------------------------------
// public
// Pop
//-----------------------------------------------------------------------------
HFCPtr<HFCStackItem> HFCStack::Pop()
    {
    HPRECONDITION(!m_Stack.empty());

    HFCPtr<HFCStackItem> pResult(m_Stack.back());
    m_Stack.pop_back();
    return pResult;
    }

//-----------------------------------------------------------------------------
// public
// Top
//-----------------------------------------------------------------------------
const HFCPtr<HFCStackItem>& HFCStack::Top() const
    {
    HPRECONDITION(!m_Stack.empty());

    return m_Stack.back();
    }

//-----------------------------------------------------------------------------
// public
// Size
//-----------------------------------------------------------------------------
size_t HFCStack::Size() const
    {
    return m_Stack.size();
    }




//-----------------------------------------------------------------------------
// protected section
//-----------------------------------------------------------------------------




