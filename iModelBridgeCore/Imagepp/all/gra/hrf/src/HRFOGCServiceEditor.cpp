//:>--------------------------------------------------------------------------------------+
//:>
//:>     $Source: all/gra/hrf/src/HRFOGCServiceEditor.cpp $
//:>
//:>  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
//:>
//:>+--------------------------------------------------------------------------------------
// Class HRFOGCServiceEditor
//----------------------------------------------------------------------------

#include <ImageppInternal.h>


#include "HRFOGCServiceEditor.h"
#include <Imagepp/all/h/HRFOGCService.h>

#include <Imagepp/all/h/HCDCodecImage.h>
#include <Imagepp/all/h/HCDCodecIJG.h>
#include <Imagepp/all/h/HCDPacket.h>
#include <Imagepp/all/h/HRFPngFile.h>
#include <Imagepp/all/h/HRFBmpFile.h>
#include <Imagepp/all/h/HRFGifFile.h>
#include <Imagepp/all/h/HRFJpegFile.h>
#include <Imagepp/all/h/HRFGeoTiffFile.h>
#include <Imagepp/all/h/HFCURLMemFile.h>
#include <Imagepp/all/h/HFCExceptionHandler.h>
#include <Imagepp/all/h/HCDCodecZlib.h>
#include <Imagepp/all/h/HCDCodecIdentity.h>

#include <Imagepp/all/h/HGF2DStretch.h>
#include <Imagepp/all/h/HFCException.h>
#include <Imagepp/all/h/HRFException.h>

#include <Imagepp/all/h/HMDLayerInfoWMS.h>
#include <Imagepp/all/h/HMDVolatileLayers.h>

#include <Imagepp/all/h/HRABlitter.h>
#include <Imagepp/all/h/HRASurface.h>
#include <Imagepp/all/h/HGSMemorySurfaceDescriptor.h>

#include <Imagepp/all/h/HRPPixelTypeV8Gray8.h>
#include <Imagepp/all/h/HRPPixelTypeV16Gray16.h>
#include <Imagepp/all/h/HRPPixelConverter.h>
#include <ImagePPInternal/HttpConnection.h>

#define OGC_RASTERFILE          static_cast<HRFOGCService*>(GetRasterFile().GetPtr())
#define NB_BLOCK_READER_THREAD  4

//-----------------------------------------------------------------------------
// class HRFOGCServiceEditor
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Public
// ReadBlock
// Edition by Block
//-----------------------------------------------------------------------------
HSTATUS HRFOGCServiceEditor::ReadBlock(uint64_t             pi_PosBlockX,
                                       uint64_t             pi_PosBlockY,
                                       Byte*                po_pData)
    {
    HPRECONDITION (m_AccessMode.m_HasReadAccess);
    HPRECONDITION (po_pData != 0);

    HSTATUS Status = H_ERROR;

    uint64_t TileID = m_TileIDDescriptor.ComputeID(pi_PosBlockX, pi_PosBlockY, m_Resolution);

    RefCountedPtr<OGCTile> pTile;
    RefCountedPtr<OGCBlockQuery> pBlockQuery;   // we must hold a ref to the query until it completes.

    // check if the tile is already in the pool
    auto tileQueryItr = m_tileMap.find(TileID);
    if(tileQueryItr == m_tileMap.end())
        {
        pTile = new OGCTile();

        // Lock m_tileMapMutex during insertion. OGCBlockQueries are querying this map.
            { 
            std::unique_lock<std::mutex> lk(m_tileMapMutex);
            m_tileMap.insert({TileID, pTile});
            }   

        // Create a new block request
        HRFOGCServiceEditor::BlocksExtent TileExtent;
        TileExtent.m_MinX = pi_PosBlockX;
        TileExtent.m_MinY = pi_PosBlockY;
        TileExtent.m_MaxX = pi_PosBlockX + m_pResolutionDescriptor->GetBlockWidth();
        TileExtent.m_MaxY = pi_PosBlockY + m_pResolutionDescriptor->GetBlockHeight();
        pBlockQuery = CreateBlockQuery(TileExtent);

        m_pWorkerPool->Enqueue(*pBlockQuery, true/*atFront*/); 
        }
    else
        {
        pTile = tileQueryItr->second;
        }

    pTile->Wait();

    if (pTile->HasData())
        {
        memcpy(po_pData, pTile->m_tileData.data(), pTile->m_tileData.size());
        Status = H_SUCCESS;
        }

    return Status;
    }



//-----------------------------------------------------------------------------
// Public
// WriteBlock
// Edition by Block
//-----------------------------------------------------------------------------
HSTATUS HRFOGCServiceEditor::WriteBlock(uint64_t              pi_PosBlockX,
                                        uint64_t              pi_PosBlockY,
                                        const Byte*           pi_pData)
    {
    HASSERT(0); // not supported

    return H_ERROR;
    }

//-----------------------------------------------------------------------------
// protected
// Construction
//-----------------------------------------------------------------------------
HRFOGCServiceEditor::HRFOGCServiceEditor(HFCPtr<HRFRasterFile> pi_rpRasterFile,
                                         uint32_t              pi_Page,
                                         double               pi_Resolution,
                                         HFCAccessMode         pi_AccessMode)
    : HRFResolutionEditor(pi_rpRasterFile,
                          pi_Page,
                          pi_Resolution,
                          pi_AccessMode)
    {
    m_pWorkerPool.reset(new WorkerPool(NB_BLOCK_READER_THREAD));
    m_threadLocalHttp.reset(new ThreadLocalStorage<HttpSession>());

    HFCPtr<HGF2DTransfoModel> pMainModel = OGC_RASTERFILE->m_pModel;

    HFCPtr<HGF2DStretch> ScaleModel =  new HGF2DStretch(HGF2DDisplacement(),
                                                        1.0 / pi_Resolution,
                                                        1.0 / pi_Resolution);

    m_pTransfoModel =  ScaleModel->ComposeInverseWithDirectOf(*OGC_RASTERFILE->m_pModel);

    if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "image/jpeg") == 0)
        m_ImageType = JPEG;
    else if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "image/png") == 0)
        m_ImageType = PNG;
    else if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "image/bmp") == 0)
        m_ImageType = BMP;
    else if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "image/gif") == 0)
        m_ImageType = GIF;
    else if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "geotiff") == 0)
        m_ImageType = GEOTIFF;
    else if (BeStringUtilities::Stricmp(OGC_RASTERFILE->m_Format.c_str(), "geotiffint16") == 0)
        m_ImageType = GEOTIFF;
    else
        {
        HASSERT(!L"HRFOGCServiceEditor::HRFOGCServiceEditor() : ImageType not supported");
        }

    uint64_t ResWidth;
    uint64_t ResHeight;
    OGC_RASTERFILE->ComputeResolutionSize(pi_Resolution, &ResWidth, &ResHeight);

    HPRECONDITION(pi_rpRasterFile->GetPageDescriptor(pi_Page)->CountResolutions() > 0);
    HFCPtr<HRFResolutionDescriptor> pMainResDesc(pi_rpRasterFile->GetPageDescriptor(pi_Page)->GetResolutionDescriptor(0));
    m_pResolutionDescriptor = new HRFResolutionDescriptor(GetAccessMode(),
                                                          pi_rpRasterFile->GetCapabilities(),
                                                          pi_Resolution,
                                                          pi_Resolution,
                                                          pMainResDesc->GetPixelType(),
                                                          pMainResDesc->GetCodec(),
                                                          pMainResDesc->GetReaderBlockAccess(),
                                                          pMainResDesc->GetWriterBlockAccess(),
                                                          pMainResDesc->GetScanlineOrientation(),
                                                          pMainResDesc->GetInterleaveType(),
                                                          pMainResDesc->IsInterlace(),
                                                          ResWidth,
                                                          ResHeight,
                                                          pMainResDesc->GetBlockWidth(),
                                                          pMainResDesc->GetBlockHeight());

    m_TileIDDescriptor = HGFTileIDDescriptor(ResWidth,
                                             ResHeight,
                                             m_pResolutionDescriptor->GetBlockWidth(),
                                             m_pResolutionDescriptor->GetBlockHeight());


    m_pInvalidTileBitmap = new HCDPacket(new HCDCodecZlib(),
                                         s_CompressedInvalidTileBitmap,
                                         s_CompressedInvalidTileBitmapSize,
                                         s_CompressedInvalidTileBitmapSize);


    // optimization for LookAhead
    m_MaxTilesPerBlockWidth =  (OGC_RASTERFILE->m_MaxBitmapSize.m_Width / m_pResolutionDescriptor->GetBlockWidth());
    m_MaxTilesPerBlockHeight = (OGC_RASTERFILE->m_MaxBitmapSize.m_Height / m_pResolutionDescriptor->GetBlockHeight());
    }

//-----------------------------------------------------------------------------
// public
// Destruction
//-----------------------------------------------------------------------------
HRFOGCServiceEditor::~HRFOGCServiceEditor()
    {
    if(m_pWorkerPool != nullptr)
        m_pWorkerPool.reset(nullptr);   // stop threads and wait for them to exit.    
    }


//-----------------------------------------------------------------------------
// protected
// RequestLookAhead
//-----------------------------------------------------------------------------
void HRFOGCServiceEditor::RequestLookAhead(const HGFTileIDList&    pi_rTileIDList)
    {
    HPRECONDITION(!pi_rTileIDList.empty());

    m_blockQueryList.clear(); // Clear old request.

    // add an entry for each tile
    uint64_t XMin = UINT64_MAX;
    uint64_t YMin = UINT64_MAX;
    uint64_t XMax = 0;
    uint64_t YMax = 0;
    bool   NewTile = false;

    std::map<uint64_t, RefCountedPtr<OGCTile>> newTileMap;

    for(auto tileId : pi_rTileIDList)
        {
        auto tileQueryItr = m_tileMap.find(tileId);
        RefCountedPtr<OGCTile> pOgcTile;
        if(tileQueryItr != m_tileMap.end())
            {
            pOgcTile = tileQueryItr->second;
            }
        else
            {
            pOgcTile = new OGCTile();
            }

        if(!pOgcTile->HasData())
            {
            uint64_t PosX, PosY;
            m_TileIDDescriptor.GetPositionFromID(tileId, &PosX, &PosY);
            XMin = MIN(XMin, PosX);
            YMin = MIN(YMin, PosY);
            XMax = MAX(XMax, PosX + m_pResolutionDescriptor->GetBlockWidth());
            YMax = MAX(YMax, PosY + m_pResolutionDescriptor->GetBlockHeight());
            NewTile = true;
            }

        newTileMap.insert({tileId, pOgcTile});
        }

    // Lock m_tileMapMutex during exchange.  OGCBlockQueries are querying this map.
        {         
        std::unique_lock<std::mutex> lk(m_tileMapMutex);
        m_tileMap = std::move(newTileMap);
        }
    
    if (NewTile)
        {
        uint64_t Width                   = XMax - XMin;
        uint64_t Height                  = YMax - YMin;
        uint64_t NbTileX                 = Width / m_pResolutionDescriptor->GetBlockWidth();
        uint64_t NbTileY                 = Height / m_pResolutionDescriptor->GetBlockHeight();;
        uint64_t LastBlockTilesPerWidth  = 0;
        uint64_t LastBlockTilesPerHeight = 0;
        uint64_t BlockWidthInPixel;
        uint64_t BlockHeightInPixel;

        if (NbTileX > 2 && (NbTileX % m_MaxTilesPerBlockWidth) == 1)
            {
            NbTileX -= 2;
            LastBlockTilesPerWidth = 2; // get, at least, 256 pixels height for the last block
            }

        if (NbTileY > 2 && (NbTileY % m_MaxTilesPerBlockHeight) == 1)
            {
            NbTileY -= 2;
            LastBlockTilesPerHeight = 2; // get, at least, 256 pixels width for the last block
            }

        HRFOGCServiceEditor::BlocksExtent BlockFromServer;

        // initialize the block height at the maximum size
        BlockHeightInPixel = m_MaxTilesPerBlockHeight * m_pResolutionDescriptor->GetBlockHeight();

        for (BlockFromServer.m_MinY = YMin; BlockFromServer.m_MinY < YMax; BlockFromServer.m_MinY += BlockHeightInPixel)
            {
            if (NbTileY == 0 && LastBlockTilesPerHeight != 0)
                {
                BlockHeightInPixel = LastBlockTilesPerHeight * m_pResolutionDescriptor->GetBlockHeight();
                }
            else if (NbTileY < m_MaxTilesPerBlockHeight)
                {
                BlockHeightInPixel = NbTileY * m_pResolutionDescriptor->GetBlockHeight();
                NbTileY = 0;
                }
            else
                NbTileY -= m_MaxTilesPerBlockHeight;

            uint64_t TilesPerWidth = NbTileX;
            // initialize the the block to the maximum size
            BlockWidthInPixel = m_MaxTilesPerBlockWidth * m_pResolutionDescriptor->GetBlockWidth();
            for (BlockFromServer.m_MinX = XMin; BlockFromServer.m_MinX < XMax; BlockFromServer.m_MinX += BlockWidthInPixel)
                {
                if (TilesPerWidth == 0 && LastBlockTilesPerWidth != 0)
                    {
                    BlockWidthInPixel = LastBlockTilesPerWidth * m_pResolutionDescriptor->GetBlockWidth();
                    }
                else if (TilesPerWidth < m_MaxTilesPerBlockWidth)
                    {
                    BlockWidthInPixel = TilesPerWidth * m_pResolutionDescriptor->GetBlockWidth();
                    TilesPerWidth = 0;
                    }
                else
                    TilesPerWidth -= m_MaxTilesPerBlockWidth;

                BlockFromServer.m_MaxX = BlockFromServer.m_MinX + BlockWidthInPixel;
                BlockFromServer.m_MaxY = BlockFromServer.m_MinY + BlockHeightInPixel;

                RefCountedPtr<OGCBlockQuery> pBlockQuery = CreateBlockQuery(BlockFromServer);
                m_blockQueryList.push_back(pBlockQuery);    // we need to hold a ref to the request
                m_pWorkerPool->Enqueue(*pBlockQuery);
                }
            }
        }
    }


//-----------------------------------------------------------------------------
// protected
// CancelLookAhead
//-----------------------------------------------------------------------------
void HRFOGCServiceEditor::CancelLookAhead()
    {
    // invalidate all pending request and all pending tiles
    m_blockQueryList.clear();

    // Lock m_tileMapMutex during exchange.  OGCBlockQueries are querying this map.
    std::unique_lock<std::mutex> lk(m_tileMapMutex);
    m_tileMap.clear();
    }

//-----------------------------------------------------------------------------
// protected
// ContextChanged
//-----------------------------------------------------------------------------
void HRFOGCServiceEditor::ContextChanged()
    {
    // invalidate all pending request and all pending tiles
    m_blockQueryList.clear(); 

    // Lock m_tileMapMutex during exchange.  OGCBlockQueries are querying this map.
    std::unique_lock<std::mutex> lk(m_tileMapMutex);
    m_tileMap.clear();
    }

//----------------------------------------------------------------------------------------
// @bsimethod                                                   Mathieu.Marchand  1/2016
//----------------------------------------------------------------------------------------
RefCountedPtr<OGCTile> HRFOGCServiceEditor::GetTile(uint64_t tileId)
    {
    std::unique_lock<std::mutex> lk(m_tileMapMutex);

    // check if the tile is already in the pool
    auto tileQueryItr = m_tileMap.find(tileId);
    if(tileQueryItr != m_tileMap.end())
        return tileQueryItr->second;

    return nullptr;
    }

//----------------------------------------------------------------------------------------
// @bsimethod                                                   Mathieu.Marchand  1/2016
//----------------------------------------------------------------------------------------
RefCountedPtr<OGCBlockQuery> HRFOGCServiceEditor::CreateBlockQuery(HRFOGCServiceEditor::BlocksExtent const& blockExtent)
    {    
    // convert the tile extent in BBOX coordinate
    CHECK_HUINT64_TO_HDOUBLE_CONV(blockExtent.m_MinX)
    CHECK_HUINT64_TO_HDOUBLE_CONV(blockExtent.m_MinY)
    CHECK_HUINT64_TO_HDOUBLE_CONV(blockExtent.m_MaxX)
    CHECK_HUINT64_TO_HDOUBLE_CONV(blockExtent.m_MaxY)

    HRFOGCServiceEditor::BlocksExtent extent = blockExtent;
    extent.m_MaxX = MIN(blockExtent.m_MaxX, GetResolutionDescriptor()->GetWidth());
    extent.m_MaxY = MIN(blockExtent.m_MaxY, GetResolutionDescriptor()->GetHeight());

    DRange2d bbox;
    m_pTransfoModel->ConvertDirect((double)extent.m_MinX, (double)extent.m_MaxY, &bbox.low.x, &bbox.low.y);
    m_pTransfoModel->ConvertDirect((double)extent.m_MaxX, (double)extent.m_MinY, &bbox.high.x, &bbox.high.y);

    RefCountedPtr<OGCBlockQuery> pBlockQuery(new OGCBlockQuery(extent, bbox, *this));
    return pBlockQuery;
    }


//----------------------------------------------------------------------------------------
// @bsimethod                                                   Mathieu.Marchand  1/2016
//----------------------------------------------------------------------------------------
void OGCBlockQuery::_Run()
    {
    if(!ReadBlocksFromServer(m_blockExtent.m_MinX, m_blockExtent.m_MinY, m_blockExtent.m_MaxX, m_blockExtent.m_MaxY))
        InvalidateTiles(m_blockExtent.m_MinX, m_blockExtent.m_MinY, m_blockExtent.m_MaxX, m_blockExtent.m_MaxY); 
    }

//-----------------------------------------------------------------------------
// private section
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// private
// ReadBlocksFromServer
//-----------------------------------------------------------------------------
bool OGCBlockQuery::ReadBlocksFromServer(uint64_t pi_MinX,
                                         uint64_t pi_MinY,
                                         uint64_t pi_MaxX,
                                         uint64_t pi_MaxY)
    {
    HASSERT((pi_MaxX - pi_MinX) <= ULONG_MAX);
    HASSERT((pi_MaxY - pi_MinY) <= ULONG_MAX);

    uint32_t MapWidth = (uint32_t)(pi_MaxX - pi_MinX);
    uint32_t MapHeight = (uint32_t)(pi_MaxY - pi_MinY);

    HRFOGCService& rasterFile = static_cast<HRFOGCService&>(*m_editor.GetRasterFile());

    // build the request
    ostringstream Request;
    Request.precision(16);
    Request << rasterFile.m_Request.c_str();
    Request << "&width=" << MapWidth << "&height=" << MapHeight;
    Request << "&BBOX=";
    // snap the BBOX on the map BBOX
    Request << MAX(m_bbox.low.x,  rasterFile.m_BBoxMinX) << ",";
    Request << MAX(m_bbox.low.y,  rasterFile.m_BBoxMinY) << ",";
    Request << MIN(m_bbox.high.x, rasterFile.m_BBoxMaxX) << ",";
    Request << MIN(m_bbox.high.y, rasterFile.m_BBoxMaxY);

    HttpSession& session = m_editor.m_threadLocalHttp->GetLocal();
    HttpRequest request(*rasterFile.m_requestTemplate);
    request.SetUrl(rasterFile.m_requestTemplate->GetUrl() + Request.str().c_str());
    
    HttpResponsePtr response;
    HttpRequestStatus ReqStatus = session.Request(response, request);
    if(HttpRequestStatus::Success != ReqStatus || response.IsNull() || response->GetBody().empty())
        return false;

    // OGC server send error into a XML file
    auto contentTypeItr = response->GetHeader().find("Content-Type"); // case insensitive find.
    if(contentTypeItr == response->GetHeader().end() || contentTypeItr->second.ContainsI("xml") || contentTypeItr->second.ContainsI("html"))
        return false;

    // for optimization
    HFCPtr<HRFResolutionDescriptor> pResDesc(m_editor.GetResolutionDescriptor());
    BeAssert((pResDesc->GetBitsPerPixel() % 8) == 0);
    size_t bytesPerPixel = pResDesc->GetBitsPerPixel() / 8;
 
    size_t UncompressedDataSize = MapWidth * MapHeight * bytesPerPixel;

    HArrayAutoPtr<Byte> pUncompressedData(new Byte[UncompressedDataSize]);
    HFCPtr<HFCBuffer> pBuffer = new HFCBuffer(1, 1);
    pBuffer->AddData(response->GetBody().data(), response->GetBody().size());

    if (!UncompressBuffer(pBuffer, MapWidth, MapHeight, pUncompressedData, UncompressedDataSize))
        return false;

    // make tile from the buffer
    // last blocks can be not complete
    uint32_t LastBlockWidth  = MapWidth % pResDesc->GetBlockWidth();
    uint32_t LastBlockHeight = MapHeight % pResDesc->GetBlockHeight();

    uint32_t NbXTile = MapWidth / pResDesc->GetBlockWidth() + (LastBlockWidth == 0 ? 0 : 1);
    uint32_t NbYTile = MapHeight / pResDesc->GetBlockHeight() + (LastBlockHeight == 0 ? 0 : 1);
    uint32_t BytesPerBlockWidth = pResDesc->GetBytesPerBlockWidth();
    size_t SrcWidthBytes = MapWidth * bytesPerPixel;

    Byte*  pSrc;
    Byte*  pDst;
    uint32_t BlockX;
    uint64_t PosX;
    uint32_t BlockY;
    uint64_t PosY;
    uint64_t TileID;
    size_t BytesToCopyPerLine;
    uint64_t LineToCopy;

    for (BlockX = 0, PosX = pi_MinX; BlockX < NbXTile; ++BlockX, PosX += pResDesc->GetBlockWidth())
        {
        for (BlockY = 0, PosY = pi_MinY; BlockY < NbYTile; ++BlockY, PosY += pResDesc->GetBlockHeight())
            {
            TileID = m_editor.m_TileIDDescriptor.ComputeID(PosX, PosY, m_editor.m_Resolution);

            RefCountedPtr<OGCTile> pTile = m_editor.GetTile(TileID);

            if (pTile != nullptr)
                {
                std::vector<Byte> pBlockData(pResDesc->GetBlockSizeInBytes());
                pDst = pBlockData.data();
                pSrc = pUncompressedData + BlockY * pResDesc->GetBlockHeight() * SrcWidthBytes;
                pSrc += BlockX * BytesPerBlockWidth;

                // if the last block is not complete, set the number of bytes to copy
                if (LastBlockWidth != 0 && BlockX == NbXTile - 1)
                    BytesToCopyPerLine = LastBlockWidth * bytesPerPixel;
                else
                    BytesToCopyPerLine = BytesPerBlockWidth;

                // if the last block is not complete, set the number of lines to copy
                if (LastBlockHeight != 0 && BlockY == NbYTile - 1)
                    LineToCopy = LastBlockHeight; // 32 bits
                else
                    LineToCopy = pResDesc->GetBlockHeight();

                // if we have an incomplete block, initialize the buffer to full transparency
                if (BytesToCopyPerLine != BytesPerBlockWidth || LineToCopy != pResDesc->GetBlockHeight())
                    memset(pDst, 255, pResDesc->GetBlockSizeInBytes());    // initialize to full transparency

                for (uint32_t Line = 0; Line < LineToCopy; ++Line)
                    {
                    memcpy(pDst, pSrc, BytesToCopyPerLine);
                    pDst += BytesPerBlockWidth;
                    pSrc += SrcWidthBytes;
                    }
                pTile->SetData(pBlockData);
                pTile->OnFinish();
                rasterFile.NotifyBlockReady (m_editor.GetPage(), TileID);
                }
            }
        }

    return true;
    }

//-----------------------------------------------------------------------------
// private
// InvalideTiles
//-----------------------------------------------------------------------------
void OGCBlockQuery::InvalidateTiles(uint64_t pi_MinX,
                                        uint64_t pi_MinY,
                                        uint64_t pi_MaxX,
                                        uint64_t pi_MaxY)
    {
    HPRECONDITION(HRFOGCServiceEditor::s_UncompressedInvalidTileBitmapSize       == m_editor.m_pResolutionDescriptor->GetBlockSizeInBytes() ||
                  HRFOGCServiceEditor::s_GrayUncompressedInvalidTileBitmapSize   == m_editor.m_pResolutionDescriptor->GetBlockSizeInBytes() ||
                  HRFOGCServiceEditor::s_Gray16UncompressedInvalidTileBitmapSize == m_editor.m_pResolutionDescriptor->GetBlockSizeInBytes());

    size_t BlockSizeInBytes = m_editor.m_pResolutionDescriptor->GetBlockSizeInBytes();
    HFCPtr<HCDPacket> pInvalidBlockData(new HCDPacket(new HCDCodecIdentity(),
                                                      new Byte[BlockSizeInBytes],
                                                      BlockSizeInBytes,
                                                      BlockSizeInBytes));
    pInvalidBlockData->SetBufferOwnership(true);

    if (!m_editor.m_pResolutionDescriptor->GetPixelType()->IsCompatibleWith(HRPPixelTypeV8Gray8::CLASS_ID) &&
        !m_editor.m_pResolutionDescriptor->GetPixelType()->IsCompatibleWith(HRPPixelTypeV16Gray16::CLASS_ID))
        {
        m_editor.m_pInvalidTileBitmap->Decompress(pInvalidBlockData);
        }

    if (m_editor.m_pResolutionDescriptor->GetWidth() < m_editor.m_pResolutionDescriptor->GetBlockWidth() ||
        m_editor.m_pResolutionDescriptor->GetHeight() < m_editor.m_pResolutionDescriptor->GetBlockHeight())
        {
        // we need to stretch the invalid tile bitmap
        double Scale;
        if (m_editor.m_pResolutionDescriptor->GetWidth() < m_editor.m_pResolutionDescriptor->GetHeight())
            Scale = (double)m_editor.m_pResolutionDescriptor->GetBlockWidth() / (double)m_editor.m_pResolutionDescriptor->GetWidth();
        else
            Scale = (double)m_editor.m_pResolutionDescriptor->GetBlockHeight() / (double)m_editor.m_pResolutionDescriptor->GetHeight();

        HFCPtr<HCDPacket> pStretchedInvalidBlockData(new HCDPacket(new HCDCodecIdentity(),
                                                                   new Byte[BlockSizeInBytes],
                                                                   BlockSizeInBytes,
                                                                   BlockSizeInBytes));
        pStretchedInvalidBlockData->SetBufferOwnership(true);

        // Stretch settings
        // Source
        HFCPtr<HGSSurfaceDescriptor> pSrcDescriptor(new HGSMemorySurfaceDescriptor(m_editor.m_pResolutionDescriptor->GetBlockWidth(),
                                                                                   m_editor.m_pResolutionDescriptor->GetBlockHeight(),
                                                                                   m_editor.m_pResolutionDescriptor->GetPixelType(),
                                                                                   pInvalidBlockData,
                                                                                   HGF_UPPER_LEFT_HORIZONTAL,
                                                                                   m_editor.m_pResolutionDescriptor->GetBytesPerBlockWidth()));

        // Destination
        HFCPtr<HGSSurfaceDescriptor> pDstDescriptor(new HGSMemorySurfaceDescriptor(m_editor.m_pResolutionDescriptor->GetBlockWidth(),
                                                                                   m_editor.m_pResolutionDescriptor->GetBlockHeight(),
                                                                                   m_editor.m_pResolutionDescriptor->GetPixelType(),
                                                                                   pStretchedInvalidBlockData,
                                                                                   HGF_UPPER_LEFT_HORIZONTAL,
                                                                                   m_editor.m_pResolutionDescriptor->GetBytesPerBlockWidth()));


        // Init the surface
        HRASurface destSurface(pDstDescriptor);

        HRABlitter blitter(destSurface);

        HRASurface srcSurface(pSrcDescriptor);

        HFCPtr<HGF2DTransfoModel> pBlitModel(new HGF2DStretch(HGF2DDisplacement(), Scale, Scale));

        blitter.BlitFrom(srcSurface, *pBlitModel);

        pInvalidBlockData = pStretchedInvalidBlockData;
        }

    // notify all tiles generated by this request    
    for (uint64_t PosX = pi_MinX; PosX < pi_MaxX; PosX += m_editor.m_pResolutionDescriptor->GetBlockWidth())
        {
        for (uint64_t PosY = pi_MinY; PosY < pi_MaxY; PosY += m_editor.m_pResolutionDescriptor->GetBlockHeight())
            {
            RefCountedPtr<OGCTile> pTile = m_editor.GetTile(m_editor.m_TileIDDescriptor.ComputeID(PosX, PosY, m_editor.m_Resolution));
            if (pTile != nullptr)
                {
                // set data tile with special data
                pTile->SetData(pInvalidBlockData->GetBufferAddress(), pInvalidBlockData->GetDataSize());
                pTile->OnFinish();
                }
            }
        }
    }

//-----------------------------------------------------------------------------
// private
// UncompressBuffer
//-----------------------------------------------------------------------------
bool OGCBlockQuery::UncompressBuffer(HFCPtr<HFCBuffer>&         pi_rpBuffer,
                                     uint32_t                   pi_Width,
                                     uint32_t                   pi_Height,
                                     Byte*                     po_pUncompressedData,
                                     size_t                   pi_UncompressedDataSize) const
    {
    bool RetValue = true;

    HFCPtr<HFCURL> pURL(new HFCURLMemFile(L"memory://mem.file", pi_rpBuffer));

    try
        {
        HFCPtr<HRFRasterFile> pFile;
        if (m_editor.m_ImageType == HRFOGCServiceEditor::JPEG)
            pFile = new HRFJpegFile(pURL, HFC_READ_ONLY);
        else if (m_editor.m_ImageType == HRFOGCServiceEditor::PNG)
            pFile = new HRFPngFile(pURL, HFC_READ_ONLY);
        else if (m_editor.m_ImageType == HRFOGCServiceEditor::BMP)
            pFile = new HRFBmpFile(pURL, HFC_READ_ONLY);
        else if (m_editor.m_ImageType == HRFOGCServiceEditor::GEOTIFF)
            pFile = new HRFGeoTiffFile(pURL, HFC_READ_ONLY);
        else
            pFile = new HRFGifFile(pURL, HFC_READ_ONLY);

        HAutoPtr<HRFResolutionEditor> pEditor(pFile->CreateResolutionEditor(0,
                                                                            (unsigned short)0,
                                                                            HFC_READ_ONLY));
        HFCPtr<HRFResolutionDescriptor> pResDesc(pEditor->GetResolutionDescriptor());

        // tiling is not supported
        HPRECONDITION(pResDesc->GetBlockWidth() == pResDesc->GetWidth());

        BeAssert((m_editor.GetResolutionDescriptor()->GetBitsPerPixel() % 8) == 0);
        size_t bytesPerPixel = m_editor.GetResolutionDescriptor()->GetBitsPerPixel() / 8;

        if (!pResDesc->GetPixelType()->HasSamePixelInterpretation(*m_editor.GetResolutionDescriptor()->GetPixelType()))
            {
            // need to convert the data
            HFCPtr<HRPPixelConverter> pConverter;
            HAutoPtr<Byte> pReadBuffer;
            pConverter = pResDesc->GetPixelType()->GetConverterTo(m_editor.GetResolutionDescriptor()->GetPixelType());
            pReadBuffer = new Byte[pResDesc->GetBlockSizeInBytes()];
            size_t OutputLineSize = pi_Width * bytesPerPixel;

            if (pResDesc->GetBlockHeight() == 1)
                {
                // we have a line editor
                Byte* pOutput = po_pUncompressedData;

                for (uint32_t i = 0; i < pi_Height && RetValue; i++)
                    {
                    if ((RetValue = (pEditor->ReadBlock(0, i, pReadBuffer) == H_SUCCESS)))
                        {
                        pConverter->Convert(pReadBuffer, pOutput, pi_Width);
                        pOutput += OutputLineSize;
                        }
                    }
                }
            else if (pResDesc->GetBlockHeight() == pi_Height)
                {
                // we have one block
                if ((RetValue = (pEditor->ReadBlock((uint64_t)0, (uint64_t)0, pReadBuffer) == H_SUCCESS)))
                    {
                    if (pResDesc->GetPaddingBits() == 0)
                        {
                        // no padding, we can convert the whole buffer
                        pConverter->Convert(pReadBuffer, po_pUncompressedData, pi_Width * pi_Height);
                        }
                    else
                        {
                        // we have padding, copy line by line
                        Byte* pSrc = pReadBuffer;
                        Byte* pDst = po_pUncompressedData;

                        for (size_t i = 0; i < pi_Height; i++)
                            {
                            pConverter->Convert(pSrc, pDst, pi_Width);
                            pSrc += pResDesc->GetBytesPerWidth();
                            pDst += OutputLineSize;
                            }
                        }
                    }
                }
            else
                {
                Byte*  pOutput = po_pUncompressedData;
                uint32_t BlockCount = pi_Height / pResDesc->GetBlockHeight();

                uint32_t Strip = 0;
                while (RetValue && BlockCount != 0)
                    {
                    if ((RetValue = (pEditor->ReadBlock(0, Strip, pReadBuffer) == H_SUCCESS)))
                        {
                        pConverter->Convert(pReadBuffer,
                                            pOutput,
                                            pi_Width);

                        pOutput += OutputLineSize;
                        Strip += pResDesc->GetBlockHeight();
                        --BlockCount;
                        }
                    }

                if (RetValue && Strip < pi_Height)
                    {
                    // the last strip is
                    if ((RetValue = (pEditor->ReadBlock(0, Strip, pReadBuffer) == H_SUCCESS)))
                        {
                        HArrayAutoPtr<Byte> pLastStrip(new Byte[pResDesc->GetBlockSizeInBytes()]);
                        pConverter->Convert(pReadBuffer,
                                            pLastStrip,
                                            pi_Width);

                        memcpy(pOutput, pLastStrip, (pi_Height - Strip) * pResDesc->GetBytesPerBlockWidth());
                        }
                    }
                }
            }
        else
            {
            // can read directly into the output buffer
            if (pEditor->GetResolutionDescriptor()->GetBlockHeight() == 1)
                {
                // copy line by line
                Byte* pOutput = po_pUncompressedData;
                size_t OutputLineSize = pi_Width * bytesPerPixel;

                for (uint32_t i = 0; i < pi_Height && RetValue; i++)
                    {
                    RetValue = (pEditor->ReadBlock(0, i, pOutput) == H_SUCCESS);
                    pOutput += OutputLineSize;
                    }
                }
            else if (pEditor->GetResolutionDescriptor()->GetBlockHeight() == pi_Height)
                {
                RetValue = (pEditor->ReadBlock((uint64_t)0, (uint64_t)0, po_pUncompressedData) == H_SUCCESS);
                }
            else
                {
                Byte* pOutput = po_pUncompressedData;
                uint32_t BlockCount = pi_Height / pResDesc->GetBlockHeight();

                uint32_t Strip = 0;
                while (RetValue && BlockCount != 0)
                    {
                    if ((RetValue = (pEditor->ReadBlock(0, Strip, pOutput) == H_SUCCESS)))
                        {
                        pOutput += pResDesc->GetBlockSizeInBytes();
                        Strip += pResDesc->GetBlockHeight();
                        --BlockCount;
                        }
                    }

                if (RetValue && Strip < pi_Height)
                    {
                    HArrayAutoPtr<Byte> pLastStrip(new Byte[pResDesc->GetBlockSizeInBytes()]);

                    // the last strip is
                    if ((RetValue = (pEditor->ReadBlock(0, Strip, pLastStrip) == H_SUCCESS)))
                        {
                        memcpy(pOutput, pLastStrip, (pi_Height - Strip) * pResDesc->GetBytesPerBlockWidth());
                        }
                    }
                }
            }
        }
    catch(...)
        {
        RetValue = false;
        }


    return RetValue;
    }


size_t HRFOGCServiceEditor::s_UncompressedInvalidTileBitmapSize = 262144;  // 256 * 256 * 4
size_t HRFOGCServiceEditor::s_CompressedInvalidTileBitmapSize = 10850;

size_t HRFOGCServiceEditor::s_GrayUncompressedInvalidTileBitmapSize = 65536; //256 * 256* 1
size_t HRFOGCServiceEditor::s_Gray16UncompressedInvalidTileBitmapSize = 131072; //256*256*2
size_t HRFOGCServiceEditor::s_GrayCompressedInvalidTileBitmapSize = 10850;

// compressed data of the 24 bits bitmap used when the OGC server send an error
Byte HRFOGCServiceEditor::s_CompressedInvalidTileBitmap[] = {
    0x78, 0x5E, 0xED, 0x9D, 0x7B, 0xAC, 0x65, 0x65, 0x79, 0xC6, 0x49, 0x2C, 0xFF, 0xF8, 0x87, 0x88, 0x97, 0x61, 0x04, 0x05,
    0x46, 0x06, 0x46, 0x02, 0x43, 0xE9, 0xCC, 0x20, 0x65, 0x06, 0x66, 0xB8, 0xC8, 0xB5, 0x0C, 0x08, 0x8E, 0x08, 0x8C, 0x32,
    0x22, 0x20, 0xB7, 0x72, 0x29, 0x16, 0xBC, 0x10, 0x06, 0xA9, 0xAD, 0xDC, 0x14, 0xD1, 0x72, 0x93, 0x80, 0x55, 0xE3, 0x0D,
    0x34, 0xC4, 0xB6, 0x12, 0xBC, 0x16, 0x6C, 0x6A, 0x63, 0x9A, 0xDA, 0x4A, 0x89, 0x21, 0xB1, 0xC4, 0x54, 0x6B, 0x93, 0xA6,
    0x98, 0xA6, 0x9A, 0x9A, 0xCA, 0xCC, 0x9C, 0xB3, 0xBA, 0x7F, 0xEF, 0x39, 0xCF, 0x76, 0xB1, 0x67, 0x9D, 0x79, 0xD7, 0x5E,
    0x7B, 0xED, 0x73, 0xCE, 0xDE, 0xFB, 0x79, 0xE0, 0x9D, 0xB5, 0xF6, 0x3E, 0x6B, 0xDF, 0xBE, 0xEF, 0x7B, 0xDE, 0xDB, 0xF7,
    0x7E, 0xDF, 0x2A, 0x0A, 0x63, 0x1C, 0x31, 0x3D, 0xDD, 0xF9, 0x67, 0xAA, 0xF3, 0xFF, 0xF6, 0xA2, 0xD8, 0xF1, 0x42, 0xE7,
    0xD8, 0x91, 0xE9, 0x1D, 0x1D, 0xE1, 0xB9, 0xE9, 0xF8, 0x53, 0x31, 0x5D, 0xCC, 0xFE, 0xD3, 0x95, 0xE9, 0x62, 0x47, 0xE7,
    0xBF, 0xED, 0x1D, 0x79, 0x61, 0x7A, 0x7B, 0x1C, 0x77, 0x74, 0xAE, 0xEC, 0xBC, 0x45, 0x88, 0x61, 0x18, 0x86, 0x61, 0x18,
    0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61,
    0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x93, 0x81, 0xF2, 0xB2, 0xA3, 0xEA, 0x27,
    0x2A, 0x5E, 0x10, 0x87, 0x99, 0xFF, 0x0C, 0xC3, 0x18, 0x1D, 0x4C, 0xCF, 0x2E, 0x38, 0xE4, 0xB8, 0x63, 0x47, 0x51, 0x6C,
    0xEB, 0x1C, 0xB7, 0x4D, 0xCF, 0x1C, 0x63, 0xAD, 0xE2, 0xB6, 0x6D, 0x45, 0xB1, 0x7D, 0xDB, 0xEC, 0x85, 0x73, 0xE9, 0x86,
    0xE9, 0x58, 0x8D, 0xB8, 0xA3, 0xD8, 0x66, 0x1D, 0x60, 0x18, 0xA3, 0x84, 0x0E, 0xE7, 0x8B, 0x6D, 0x33, 0x6B, 0x90, 0x61,
    0xF8, 0x0B, 0x1D, 0xFA, 0xFE, 0xDF, 0xF6, 0xCE, 0x53, 0xDB, 0xA7, 0x8B, 0x1D, 0xDB, 0xA7, 0x8A, 0x69, 0xF8, 0x3F, 0x35,
    0xB3, 0x40, 0x19, 0x6E, 0x73, 0xCD, 0xCE, 0x6B, 0x94, 0x7F, 0xCB, 0xFF, 0xDF, 0xFE, 0xB5, 0x2C, 0xBD, 0xCF, 0x19, 0x86,
    0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18,
    0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61,
    0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86,
    0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x34,
    0xC3, 0xD4, 0xD4, 0x8E, 0x62, 0x9A, 0xFB, 0xAB, 0x71, 0x1F, 0xB5, 0xA9, 0xA9, 0xEC, 0x72, 0x63, 0x9C, 0xB1, 0xDB, 0x6E,
    0x33, 0xA2, 0x73, 0x63, 0xFC, 0xB1, 0x63, 0x5B, 0x31, 0xDD, 0x91, 0x1D, 0xDB, 0x3B, 0xB2, 0x63, 0x2A, 0xC4, 0x18, 0x63,
    0x88, 0xE3, 0x4D, 0xC5, 0x30, 0x8C, 0xC5, 0x8D, 0x8C, 0xC3, 0x6D, 0x8B, 0x31, 0x36, 0x98, 0xF6, 0x2D, 0x92, 0x47, 0x03,
    0x19, 0x27, 0x17, 0x5A, 0x8C, 0x91, 0x84, 0xF9, 0xBF, 0x88, 0x91, 0x71, 0x6E, 0xB1, 0x8B, 0xB1, 0xE8, 0x61, 0xFE, 0x2F,
    0x42, 0x64, 0xBC, 0x1A, 0x55, 0x31, 0x0C, 0x63, 0x6E, 0x64, 0xFC, 0x19, 0x07, 0x31, 0x16, 0x0D, 0x98, 0x03, 0x9C, 0xB6,
    0x03, 0xB0, 0xF0, 0xC8, 0x38, 0x33, 0x8E, 0x62, 0x2C, 0x38, 0xCC, 0xFF, 0x05, 0x46, 0xC6, 0x91, 0x71, 0x17, 0x63, 0xC1,
    0x31, 0x35, 0x65, 0xFE, 0xCF, 0x3B, 0x32, 0x5E, 0xCC, 0x97, 0x2C, 0x96, 0xEF, 0x64, 0x2C, 0x18, 0x5C, 0xFF, 0x33, 0x8F,
    0xC8, 0x78, 0x30, 0x0C, 0x19, 0x04, 0xD9, 0x7B, 0xB7, 0x2D, 0xC6, 0xBC, 0x02, 0xD7, 0xDF, 0xF6, 0x7F, 0x1E, 0x90, 0x8D,
    0xFB, 0x41, 0x65, 0x3E, 0x91, 0x7D, 0x97, 0x36, 0xC4, 0x98, 0x17, 0xC0, 0x7D, 0xF3, 0x7F, 0x88, 0xC8, 0xC6, 0x79, 0xBF,
    0xB2, 0x58, 0x91, 0x7D, 0xEF, 0x26, 0x62, 0x0C, 0x1D, 0xE6, 0xFF, 0x90, 0x90, 0x8D, 0xED, 0x7E, 0x65, 0x14, 0x91, 0xFD,
    0xA6, 0xBA, 0x62, 0x18, 0xA3, 0x82, 0x6C, 0x2C, 0xF7, 0x2B, 0xE3, 0x80, 0xEC, 0x37, 0xD6, 0x15, 0xC3, 0x58, 0xCC, 0xC8,
    0xC6, 0x6F, 0x3F, 0x32, 0x8E, 0xC8, 0x7E, 0x73, 0x1D, 0x31, 0x8C, 0xC5, 0x88, 0x6C, 0xDC, 0xD6, 0x95, 0x71, 0x47, 0xF6,
    0xFB, 0xEB, 0x8A, 0xD1, 0x1A, 0x5C, 0xFF, 0x33, 0x20, 0xB2, 0xB1, 0x5A, 0x47, 0x26, 0x0D, 0x59, 0x7B, 0xD4, 0x11, 0xA3,
    0x15, 0x38, 0xFF, 0x37, 0x00, 0xB2, 0x31, 0x9A, 0xC9, 0xA4, 0x23, 0x6B, 0x9F, 0x3A, 0x62, 0x0C, 0x04, 0x9B, 0xFF, 0x86,
    0xC8, 0xC6, 0xA5, 0xC7, 0x6C, 0x3D, 0x64, 0x6D, 0x55, 0x47, 0x8C, 0xC6, 0x30, 0xFF, 0x1B, 0x20, 0x1B, 0x8F, 0x1E, 0xA7,
    0xFD, 0x23, 0x6B, 0x3B, 0xB7, 0xAB, 0xB1, 0x18, 0x90, 0x8D, 0x45, 0x8F, 0xD1, 0xC1, 0x90, 0xB5, 0xA3, 0xDB, 0xB7, 0x55,
    0xD8, 0xFE, 0xF7, 0x81, 0x6C, 0x0C, 0x7A, 0x5C, 0xB6, 0x83, 0xAC, 0x4D, 0xDD, 0xD6, 0xAD, 0xC1, 0xFC, 0xAF, 0x89, 0x6C,
    0xEC, 0x79, 0x3C, 0xB6, 0x8F, 0xAC, 0x7D, 0xDD, 0xE6, 0x03, 0xC3, 0xFC, 0xAF, 0x81, 0x6C, 0xCC, 0x79, 0x1C, 0x0E, 0x17,
    0x59, 0x5B, 0xBB, 0xED, 0x1B, 0xC3, 0xFC, 0x4F, 0x90, 0x8D, 0x35, 0x8F, 0xBF, 0xF9, 0x41, 0xD6, 0xE6, 0xEE, 0x03, 0xA3,
    0x6D, 0x64, 0x63, 0xCC, 0x63, 0x6F, 0x7E, 0x91, 0xB5, 0xBB, 0xFB, 0xC0, 0x68, 0x0B, 0xD9, 0xF8, 0x4A, 0x64, 0xAA, 0xD8,
    0x61, 0x19, 0x82, 0x64, 0xED, 0x6E, 0x1D, 0x60, 0xB4, 0x82, 0x6C, 0x6C, 0xD5, 0x90, 0x6C, 0x2C, 0x5B, 0xFA, 0x97, 0xAC,
    0xCD, 0xAD, 0x03, 0x8C, 0x81, 0x91, 0x8D, 0xA9, 0x3E, 0x24, 0x1B, 0xCF, 0x96, 0xFE, 0x25, 0x6B, 0x73, 0xEB, 0x00, 0xA3,
    0x31, 0xB2, 0xB1, 0xD4, 0x40, 0xB2, 0xF1, 0x6C, 0xE9, 0x5F, 0xB2, 0x36, 0xDF, 0x49, 0x8C, 0x4A, 0x38, 0xFF, 0x5F, 0x42,
    0x36, 0x86, 0x06, 0x90, 0x6C, 0x3C, 0x2F, 0xA4, 0x5C, 0xB4, 0xE5, 0x92, 0xE2, 0x8C, 0x63, 0x4F, 0x2E, 0x36, 0x1D, 0x7B,
    0x6A, 0x71, 0xF5, 0xE6, 0x8B, 0x66, 0x1E, 0x9F, 0x74, 0x42, 0xF1, 0xC4, 0x13, 0x8F, 0xA7, 0xAF, 0x5D, 0x48, 0xC9, 0xDA,
    0x7C, 0x27, 0x31, 0x8C, 0xB9, 0x90, 0x8D, 0x9D, 0x16, 0x24, 0x1B, 0xCF, 0x0B, 0x21, 0x1F, 0xFB, 0xE8, 0x47, 0x8B, 0xC7,
    0x1E, 0xFB, 0x4A, 0xF1, 0xF4, 0xD3, 0xFF, 0x54, 0xEC, 0xBE, 0xFB, 0x4B, 0x8B, 0x37, 0xFD, 0xEE, 0x11, 0xC5, 0x49, 0x27,
    0x9D, 0x19, 0xCF, 0x3D, 0xF2, 0xD0, 0xA7, 0x8B, 0x73, 0xCF, 0x3A, 0x37, 0x74, 0xC3, 0xDA, 0xD5, 0xEB, 0x8A, 0xFD, 0x5F,
    0xB3, 0xAC, 0x58, 0xB2, 0xC7, 0xCB, 0xE2, 0xBA, 0x90, 0x97, 0xEC, 0x16, 0x72, 0xD8, 0x21, 0x87, 0xC5, 0x6B, 0xCE, 0x39,
    0x67, 0x73, 0xE8, 0x0E, 0xE4, 0xFE, 0x7B, 0xEF, 0x2B, 0x9E, 0x7A, 0xF2, 0xDB, 0xE9, 0xE7, 0x0F, 0x22, 0x8D, 0xFA, 0xCD,
    0x30, 0x7A, 0x91, 0x8D, 0x99, 0xB9, 0xC6, 0x50, 0x76, 0x5D, 0x85, 0x64, 0x63, 0x7A, 0xBE, 0xE5, 0xD0, 0x43, 0x0E, 0xEE,
    0xF2, 0x79, 0x9F, 0x7D, 0x0F, 0x0C, 0x8E, 0x2F, 0x3F, 0x68, 0x4D, 0xB1, 0x64, 0xE9, 0x7E, 0xC5, 0x2B, 0xF6, 0x5C, 0x12,
    0xE7, 0x70, 0xFB, 0xB4, 0x93, 0x4E, 0x0B, 0x5D, 0x00, 0xC7, 0x37, 0x5F, 0x78, 0x49, 0x97, 0xE7, 0x08, 0xCF, 0x9F, 0x79,
    0xE6, 0xA6, 0xE2, 0xF8, 0x0D, 0x27, 0x14, 0x2B, 0x96, 0xAF, 0x28, 0x96, 0x1F, 0x78, 0x68, 0xE8, 0x8B, 0xDF, 0x3F, 0xEA,
    0xD8, 0x78, 0xFE, 0x53, 0x0F, 0x3F, 0x5C, 0xFC, 0xF8, 0xC7, 0xCF, 0xC6, 0x67, 0xAC, 0x5F, 0xB5, 0x3A, 0x7C, 0x0B, 0xC9,
    0x20, 0x3E, 0x46, 0xA3, 0x7E, 0x30, 0x8C, 0x32, 0xB2, 0xF1, 0xB2, 0x8B, 0xF1, 0x13, 0x63, 0x30, 0xBB, 0xBE, 0x42, 0xB2,
    0x71, 0x3D, 0x2C, 0x81, 0x83, 0x9F, 0xFF, 0xC2, 0xE7, 0x8A, 0x1B, 0xFE, 0xF8, 0xFA, 0x19, 0xBE, 0x6E, 0x7A, 0x6B, 0xF0,
    0x99, 0x73, 0x8E, 0x70, 0x1C, 0x81, 0xEF, 0xC8, 0xFA, 0x0D, 0x27, 0x17, 0xC7, 0x6C, 0x38, 0x3D, 0x78, 0xCD, 0x39, 0x47,
    0xB8, 0x8D, 0x9E, 0x40, 0x3F, 0xA0, 0x1B, 0x10, 0x74, 0xC6, 0x21, 0x87, 0xAC, 0xEE, 0x5E, 0x7B, 0xFA, 0xD9, 0xEF, 0x2A,
    0x2E, 0x38, 0xF3, 0xDC, 0xD0, 0x0D, 0xFC, 0x0D, 0x81, 0xFB, 0xBF, 0xFE, 0xD7, 0xE7, 0xE2, 0x78, 0xF0, 0xAB, 0x5E, 0x15,
    0x7F, 0x3F, 0x69, 0xFD, 0xBA, 0x78, 0x9C, 0x7D, 0xEF, 0xB9, 0xA4, 0x8D, 0x3E, 0x34, 0x26, 0x1C, 0xD9, 0x58, 0xD9, 0xC5,
    0xB8, 0xE9, 0x8E, 0xC3, 0xEC, 0x75, 0x15, 0x92, 0x8D, 0xED, 0xB6, 0x05, 0x5B, 0x7B, 0xC1, 0x5B, 0xDF, 0x52, 0xBC, 0xEF,
    0xAA, 0x6B, 0x43, 0x2E, 0xBA, 0x70, 0x4B, 0x71, 0xCE, 0x19, 0xA7, 0x17, 0x67, 0xAF, 0x5F, 0x1F, 0xDC, 0xE7, 0xEF, 0xE1,
    0xEB, 0xCF, 0xDA, 0x65, 0xFE, 0x86, 0x2E, 0x40, 0x37, 0xC0, 0x67, 0xF4, 0x01, 0x7C, 0xBE, 0xF9, 0xE6, 0x0F, 0x15, 0xD7,
    0x5E, 0x7B, 0x53, 0xF8, 0x00, 0x3C, 0x5F, 0x96, 0x35, 0x47, 0x9C, 0xD0, 0xD5, 0x09, 0x47, 0x1D, 0x7A, 0x5C, 0xF0, 0xFE,
    0x35, 0x7B, 0xAF, 0xEC, 0x3E, 0xC7, 0x39, 0xDF, 0x05, 0x9B, 0x7F, 0xF8, 0x41, 0x2B, 0xE2, 0x33, 0x88, 0x3F, 0x78, 0x6F,
    0x3E, 0xA7, 0xEB, 0x53, 0xF0, 0xDD, 0x3A, 0xDF, 0xE9, 0xEA, 0xAB, 0xAE, 0xDA, 0xE5, 0x6F, 0x6A, 0xDC, 0x8F, 0x15, 0x7D,
    0x39, 0xA9, 0x98, 0xE8, 0xFC, 0x5F, 0x36, 0x46, 0x92, 0xF1, 0xF2, 0xA2, 0xB1, 0x98, 0xBD, 0xBE, 0x42, 0x32, 0xCE, 0xB6,
    0x25, 0xD8, 0xFD, 0x55, 0x07, 0x1C, 0x18, 0xB2, 0xDF, 0xBE, 0xAF, 0x0D, 0x9F, 0x7F, 0xD5, 0x8A, 0x65, 0xC5, 0xAD, 0x37,
    0xDD, 0x52, 0x5C, 0xB2, 0xF1, 0xD4, 0xE2, 0xDA, 0x2D, 0xE7, 0x16, 0x97, 0xBE, 0xEB, 0xBC, 0x62, 0xEB, 0x1F, 0x5E, 0x12,
    0xBA, 0x81, 0xE7, 0xAF, 0xBF, 0xE6, 0xDD, 0xE1, 0x27, 0xF0, 0x58, 0x39, 0x41, 0x78, 0x8A, 0xBE, 0x20, 0x1F, 0x80, 0xAE,
    0x90, 0x28, 0x06, 0xD0, 0x75, 0x08, 0xFA, 0x40, 0x3A, 0x42, 0x8F, 0x89, 0x09, 0x14, 0x03, 0x90, 0x1B, 0xC0, 0x1F, 0xE0,
    0x6F, 0xE8, 0x8A, 0xB3, 0x37, 0x9D, 0x51, 0xAC, 0x59, 0x75, 0x44, 0x5C, 0x83, 0xE0, 0x63, 0x64, 0xBE, 0xC1, 0x4E, 0xA8,
    0xD1, 0xE6, 0x59, 0x9F, 0x4E, 0x1A, 0x26, 0x7A, 0xFF, 0xAF, 0x6C, 0x7C, 0x24, 0xE3, 0x64, 0xA7, 0xF1, 0x98, 0xBD, 0x4F,
    0x85, 0x64, 0xDC, 0x6D, 0x43, 0xE0, 0xFF, 0x5E, 0x7B, 0xED, 0x5D, 0xEC, 0x7F, 0x50, 0x87, 0xF7, 0x6B, 0x37, 0x14, 0x4B,
    0xF6, 0xDF, 0x3F, 0xCE, 0xDF, 0x78, 0xC4, 0xEA, 0xD0, 0x05, 0x67, 0x1C, 0xBF, 0x3A, 0x7C, 0xF1, 0x8D, 0xC7, 0x1E, 0x19,
    0xC7, 0x23, 0x8E, 0x38, 0x34, 0xF8, 0x08, 0x4F, 0xF1, 0xFB, 0xAF, 0xD8, 0xB2, 0xA5, 0xAB, 0x17, 0x10, 0xF9, 0x00, 0x08,
    0xCF, 0x73, 0x2C, 0x73, 0x5F, 0x79, 0x02, 0xE5, 0x0C, 0xB0, 0xED, 0xF8, 0xFB, 0xE8, 0x13, 0x5E, 0xCB, 0x6B, 0x78, 0xFF,
    0xA5, 0x4B, 0x5F, 0x1D, 0x36, 0x9E, 0x58, 0x02, 0xEE, 0xF3, 0x9D, 0x56, 0xAC, 0x5C, 0x1D, 0xC2, 0x39, 0xFE, 0xC3, 0xF7,
    0xBF, 0xFF, 0xBD, 0xE2, 0x85, 0xED, 0xBF, 0x09, 0xD9, 0xA9, 0xBD, 0xAB, 0x50, 0xA3, 0xCD, 0xB3, 0x7E, 0x9D, 0x24, 0x98,
    0xFF, 0x35, 0x64, 0x0E, 0x54, 0x71, 0x2D, 0x7D, 0xAF, 0x0A, 0xC9, 0xF8, 0x3B, 0x88, 0xC0, 0x1B, 0x72, 0xFB, 0xFB, 0xEE,
    0xBB, 0x2C, 0xF8, 0x76, 0xC0, 0x21, 0x2B, 0x82, 0xFF, 0x07, 0x2E, 0x7F, 0x7D, 0xB1, 0xE4, 0x75, 0x7B, 0x85, 0x3F, 0x80,
    0xC0, 0x79, 0xF4, 0x01, 0x7E, 0xC0, 0x9B, 0x4E, 0xDC, 0xD0, 0x7D, 0x8C, 0x2D, 0x0E, 0x3D, 0x30, 0x9B, 0xB7, 0x83, 0xCF,
    0x65, 0x5D, 0x20, 0x79, 0xE0, 0xAE, 0x4F, 0x74, 0xCF, 0xE1, 0x34, 0x7A, 0x80, 0x23, 0x73, 0x8A, 0x65, 0x9D, 0x41, 0x7E,
    0x00, 0xBD, 0xC0, 0x3C, 0x02, 0x73, 0x04, 0xCA, 0x25, 0x1C, 0xBA, 0xFA, 0xA8, 0x2E, 0xEF, 0x79, 0x8E, 0x3C, 0x03, 0xCF,
    0x33, 0x07, 0xF1, 0xAB, 0xFF, 0xFD, 0x65, 0x7D, 0xFE, 0x83, 0x1A, 0x6D, 0x9E, 0xF5, 0xED, 0xA4, 0x60, 0x62, 0xFD, 0xFF,
    0x6C, 0x5C, 0xD4, 0x18, 0x1F, 0x73, 0x71, 0x2E, 0x7D, 0xCF, 0x0A, 0xC9, 0x78, 0xDC, 0x44, 0x64, 0x37, 0xE1, 0x3F, 0xB6,
    0x14, 0xCE, 0x8B, 0xFF, 0xE8, 0x02, 0xF2, 0xFB, 0xF0, 0x10, 0xDF, 0x80, 0xE3, 0x9E, 0xAF, 0xDC, 0x23, 0x74, 0x02, 0xE7,
    0x1C, 0x5F, 0xFF, 0x9A, 0xA5, 0xA1, 0x37, 0xF0, 0x11, 0x98, 0xE3, 0x23, 0xB7, 0x8F, 0x7F, 0xC0, 0x91, 0xC7, 0xF2, 0xD5,
    0x35, 0x3F, 0x40, 0x5C, 0x00, 0xEF, 0xC5, 0x77, 0xEC, 0x3D, 0xFC, 0x45, 0xF0, 0x01, 0xC8, 0x11, 0x22, 0xBC, 0x9E, 0x39,
    0x01, 0xCE, 0xE1, 0x38, 0x7C, 0xE7, 0xFA, 0xB2, 0xED, 0xE7, 0x73, 0xF9, 0x8C, 0x87, 0xEF, 0xBC, 0x37, 0xF8, 0x8F, 0xD4,
    0xE6, 0x3F, 0xA8, 0xD1, 0xE6, 0x59, 0xFF, 0x4E, 0x02, 0xCC, 0xFF, 0xE6, 0xE3, 0x63, 0x57, 0xDC, 0x4B, 0xDF, 0xB7, 0x42,
    0x32, 0x3E, 0x37, 0x11, 0xF1, 0x1F, 0x2E, 0xE1, 0x63, 0x63, 0xD3, 0xD1, 0x01, 0xF0, 0x5F, 0xBC, 0x8F, 0xE3, 0xD2, 0xFD,
    0xBA, 0x73, 0x7E, 0x3C, 0xD6, 0x91, 0xEB, 0xB8, 0x46, 0xF9, 0xB9, 0xD0, 0x11, 0xB3, 0xAF, 0xE1, 0x1A, 0xF4, 0x8A, 0xF4,
    0x01, 0xEF, 0x2F, 0x5F, 0x81, 0xC7, 0x47, 0x9F, 0x70, 0x4A, 0xE8, 0x04, 0xF9, 0x03, 0xB2, 0xED, 0x1C, 0xE5, 0x1F, 0xF0,
    0xBE, 0xD8, 0x7E, 0xCE, 0xB1, 0xF9, 0xFC, 0x8D, 0x63, 0xC8, 0x41, 0x6B, 0x42, 0x2F, 0xFC, 0xD7, 0xF3, 0xFF, 0x39, 0x3C,
    0xFE, 0x27, 0x7D, 0x3C, 0xEE, 0x98, 0xC8, 0xFD, 0xFF, 0xB3, 0xF1, 0x50, 0x73, 0x5C, 0x64, 0xDC, 0x4B, 0xDF, 0xBF, 0x42,
    0xB2, 0xF7, 0xEC, 0x57, 0x64, 0x3B, 0xB1, 0xE1, 0x92, 0xE0, 0x74, 0xC7, 0xBE, 0x4B, 0x07, 0xC0, 0xE3, 0xF0, 0x05, 0x96,
    0xEE, 0x17, 0x39, 0x7A, 0xF1, 0x1B, 0xFB, 0x8F, 0xE8, 0x9A, 0xAE, 0x7F, 0x50, 0x12, 0x9E, 0xE3, 0x7D, 0x38, 0xEA, 0xFC,
    0xE5, 0xFB, 0xEC, 0x13, 0xAF, 0x89, 0x3C, 0xE3, 0x01, 0x07, 0x06, 0xB7, 0xD1, 0x3B, 0xB2, 0xEF, 0xD8, 0x76, 0x78, 0x0E,
    0xF7, 0xE5, 0xEB, 0x4B, 0x2F, 0x94, 0xFD, 0x7F, 0xCE, 0xE1, 0xFF, 0x4F, 0x7F, 0xFA, 0x93, 0xCA, 0x18, 0x20, 0x45, 0x8D,
    0xF6, 0xAE, 0xD3, 0xCF, 0xE3, 0x0C, 0xF3, 0xBF, 0xF9, 0xB8, 0xC8, 0xB8, 0xB7, 0x18, 0x74, 0x00, 0xBC, 0xC1, 0xFE, 0x13,
    0xBB, 0x63, 0x93, 0x89, 0x01, 0xE0, 0x66, 0x59, 0xA4, 0x0F, 0x7A, 0xED, 0xBE, 0xEA, 0x81, 0x74, 0x1D, 0xFC, 0xD6, 0xB9,
    0xAE, 0xD3, 0xDF, 0xC9, 0x21, 0x70, 0xAE, 0x7C, 0x02, 0x3A, 0x00, 0x3F, 0x43, 0xF3, 0x7C, 0x7C, 0xB6, 0x6C, 0x3B, 0xEF,
    0x2B, 0x1D, 0x40, 0x0C, 0xD0, 0xB5, 0xF7, 0x25, 0xFB, 0x2F, 0x3D, 0x40, 0xCE, 0xA0, 0x31, 0xFF, 0x41, 0x8D, 0xF6, 0x36,
    0x26, 0x08, 0xD9, 0x58, 0xE8, 0x63, 0x4C, 0x64, 0xDC, 0x5B, 0x0C, 0x3A, 0x00, 0xCE, 0xE0, 0x3F, 0x33, 0xF7, 0xAF, 0x18,
    0x1E, 0xEE, 0xC1, 0x51, 0xD9, 0xEF, 0x2A, 0x3B, 0xBE, 0xE2, 0xE0, 0xFD, 0x83, 0xE3, 0xF8, 0x03, 0xF0, 0x50, 0x82, 0xFE,
    0x10, 0xD7, 0x11, 0xE5, 0x10, 0xE4, 0x43, 0x48, 0x1F, 0xC0, 0x7F, 0x3E, 0x07, 0xFE, 0xE3, 0xEB, 0x2B, 0x87, 0x40, 0x8D,
    0x10, 0x73, 0x10, 0xF8, 0x01, 0xD2, 0x05, 0x7C, 0x27, 0xD9, 0x7E, 0xE9, 0x04, 0x7D, 0x5E, 0x99, 0xFF, 0x3B, 0xB5, 0x6B,
    0x1D, 0xD4, 0x68, 0xEB, 0xBA, 0xFD, 0x6D, 0x8C, 0x01, 0xB2, 0x71, 0xD0, 0xC7, 0x78, 0xC8, 0xB8, 0xF7, 0xA2, 0xB1, 0x9A,
    0x7D, 0x5E, 0x85, 0x64, 0xEF, 0x59, 0x47, 0xE0, 0x3F, 0xDC, 0x61, 0x3E, 0x0E, 0x1F, 0x5C, 0xFC, 0x85, 0x73, 0x65, 0x1F,
    0x00, 0xDF, 0x1F, 0xDE, 0x13, 0xBB, 0x93, 0xE3, 0x43, 0xC2, 0x67, 0xEF, 0x5C, 0x17, 0xF9, 0xC0, 0x8E, 0xC0, 0x69, 0xF9,
    0x00, 0xCA, 0x17, 0x70, 0x0E, 0xCF, 0xB9, 0x4E, 0xBA, 0x85, 0x98, 0x81, 0xB9, 0x7B, 0xFC, 0x7B, 0xCE, 0xA9, 0x03, 0xE0,
    0x73, 0xF9, 0x5B, 0xD4, 0x0B, 0xCE, 0x72, 0x9C, 0x63, 0xE4, 0xFD, 0x67, 0x6B, 0x86, 0xF5, 0xBC, 0x7C, 0x02, 0xE5, 0x09,
    0x98, 0xBF, 0xA4, 0x56, 0xA0, 0x11, 0xFF, 0x41, 0x8D, 0xB6, 0x36, 0x26, 0x04, 0xD9, 0x38, 0xE8, 0x63, 0x2C, 0x64, 0xDC,
    0xDB, 0x69, 0xBC, 0x66, 0x9F, 0x3B, 0x04, 0x1D, 0xA0, 0x39, 0x00, 0x6A, 0xEA, 0xE0, 0x33, 0x9C, 0x92, 0x8F, 0xAE, 0x5C,
    0x5E, 0x70, 0xB9, 0x73, 0x84, 0xAB, 0xF0, 0x9E, 0x35, 0x40, 0x9B, 0xD6, 0x1F, 0x59, 0x9C, 0xB8, 0xFA, 0xB0, 0xA8, 0x0D,
    0x20, 0x76, 0xE0, 0x79, 0x6A, 0x7F, 0xA8, 0x11, 0x60, 0x7E, 0x10, 0x7E, 0xC2, 0x5B, 0x78, 0xCD, 0xEB, 0x64, 0xFF, 0xF1,
    0x21, 0x78, 0xAC, 0x1C, 0x3E, 0xF3, 0x03, 0xE2, 0xBF, 0xF8, 0x2E, 0x7E, 0x2B, 0xCE, 0x2F, 0xC7, 0x00, 0x9A, 0x07, 0x8C,
    0xF7, 0xEF, 0x1C, 0xA9, 0x1B, 0x82, 0xFF, 0x8D, 0xED, 0x3F, 0xA8, 0xD1, 0xCE, 0xFD, 0xF4, 0xBB, 0x31, 0xA2, 0xC8, 0xFA,
    0xBF, 0xCF, 0x71, 0x90, 0x71, 0xAF, 0x4A, 0xD2, 0xCF, 0xAE, 0x90, 0xEC, 0x3D, 0xEB, 0xF0, 0x1F, 0x0E, 0xE2, 0x83, 0xE3,
    0x8F, 0x23, 0xB2, 0xD3, 0xF8, 0xFE, 0xF0, 0xF6, 0xFC, 0x63, 0x56, 0x16, 0x5F, 0xBC, 0xFD, 0xFD, 0xC5, 0x47, 0x2E, 0x7F,
    0x5B, 0x71, 0xC7, 0xB5, 0x9B, 0x8B, 0xAD, 0x9B, 0x4F, 0x29, 0x2E, 0x7C, 0x73, 0xC7, 0x0F, 0x58, 0xF5, 0x8A, 0xF8, 0xDB,
    0x79, 0xEB, 0xD7, 0x14, 0x67, 0x1E, 0xB6, 0x3C, 0x04, 0xDD, 0x80, 0x9C, 0xBF, 0xEE, 0xA8, 0xEE, 0x11, 0xBD, 0xC0, 0x35,
    0xE8, 0x0C, 0x78, 0xCE, 0x1C, 0x23, 0xFC, 0x45, 0xE7, 0x60, 0xC3, 0xE1, 0x7F, 0xD4, 0x01, 0xCF, 0xF2, 0xBD, 0xEC, 0xEB,
    0x2B, 0x2F, 0x88, 0xE8, 0xB1, 0xAE, 0x11, 0xFF, 0x87, 0x6E, 0xFF, 0xFB, 0xE8, 0xF7, 0x71, 0xC2, 0x74, 0x3F, 0xED, 0x38,
    0xEA, 0xC8, 0xFA, 0xBF, 0xCF, 0x31, 0x90, 0x71, 0x6F, 0x2E, 0x49, 0xBF, 0x43, 0x8B, 0x3A, 0x40, 0x39, 0x33, 0xE6, 0xE2,
    0xD7, 0xAF, 0x39, 0x2C, 0xE2, 0x7A, 0xC5, 0x00, 0xF8, 0xF3, 0x70, 0x7F, 0xDD, 0xF2, 0xFD, 0x83, 0xFB, 0x9F, 0x7B, 0xEF,
    0xDB, 0x8B, 0xCF, 0x7C, 0xE0, 0xAC, 0xE2, 0x73, 0xEF, 0xBB, 0xB8, 0xF8, 0xD4, 0x0D, 0x97, 0xC5, 0x73, 0x8F, 0xDC, 0x7A,
    0x6D, 0x1C, 0x1F, 0xDA, 0x7A, 0x55, 0xE8, 0x85, 0x2B, 0x2F, 0x3C, 0xB5, 0xB8, 0x6C, 0xE3, 0xBA, 0x10, 0xF4, 0xC2, 0x89,
    0x87, 0xBF, 0x3E, 0x04, 0xEE, 0x6F, 0x39, 0xEB, 0xF8, 0xA8, 0x27, 0xE6, 0x73, 0x98, 0xFB, 0x83, 0xBF, 0x9C, 0xF3, 0xD9,
    0xE4, 0x02, 0xCB, 0xB9, 0x3D, 0xF1, 0x9B, 0x39, 0x43, 0xF8, 0x2E, 0xBF, 0xA0, 0xAC, 0x0B, 0xD0, 0x17, 0xAD, 0xD8, 0x7F,
    0x50, 0xA3, 0x8D, 0x27, 0x13, 0x53, 0xD9, 0x05, 0xE3, 0x81, 0xAC, 0xEF, 0x1B, 0x8C, 0x81, 0x8C, 0x7B, 0xBB, 0x92, 0xF4,
    0x7B, 0xB4, 0xA4, 0x03, 0x64, 0xFF, 0x6F, 0xB9, 0xF9, 0xA6, 0xE0, 0x3E, 0x3C, 0xE4, 0xA8, 0x79, 0xBA, 0x0D, 0xCB, 0x96,
    0x14, 0x4F, 0x3F, 0x72, 0x5F, 0xF1, 0x8D, 0x3B, 0xAF, 0x09, 0xF9, 0xDA, 0xAD, 0x5B, 0x8A, 0xBF, 0xFA, 0xD3, 0xCB, 0x42,
    0x07, 0x20, 0x0F, 0xDC, 0x70, 0x6E, 0xE8, 0x05, 0x8E, 0xF7, 0xDD, 0xB0, 0x25, 0xF4, 0x02, 0x7F, 0x7F, 0xE4, 0x8E, 0xCB,
    0x43, 0x37, 0xFC, 0xC5, 0xD6, 0x4B, 0x8B, 0xBB, 0x6F, 0xBC, 0xB4, 0x78, 0xDF, 0x35, 0xEF, 0x08, 0xFE, 0xA3, 0x13, 0x88,
    0x19, 0x88, 0x21, 0x98, 0xFB, 0x83, 0xFF, 0xAC, 0x25, 0xC0, 0x0F, 0xD0, 0x9C, 0x7E, 0xD7, 0xC7, 0xEF, 0x9C, 0x8B, 0xFB,
    0xE8, 0x02, 0xD9, 0x7D, 0x1E, 0x47, 0xAE, 0x72, 0xD6, 0xFF, 0x1F, 0x28, 0xFF, 0x27, 0xD4, 0x68, 0xDF, 0x7E, 0xFB, 0x7F,
    0x1C, 0x30, 0x31, 0xF6, 0x3F, 0xEB, 0xF7, 0x06, 0xFD, 0x9F, 0x71, 0x2F, 0x93, 0xF4, 0xBB, 0x54, 0x48, 0xF6, 0x9E, 0x55,
    0x02, 0xFF, 0x99, 0x47, 0xC7, 0xFF, 0x27, 0x66, 0x97, 0x2D, 0x66, 0xEF, 0x0E, 0xFC, 0xFC, 0x67, 0x1F, 0xBD, 0xBD, 0xF8,
    0xBB, 0xFB, 0xDE, 0x5F, 0xFC, 0xC3, 0x3D, 0x33, 0xF2, 0xD5, 0x3F, 0xBB, 0xAE, 0x2B, 0x9F, 0xDD, 0xFA, 0xCE, 0xE0, 0x3F,
    0x02, 0xFF, 0xEF, 0xB9, 0x62, 0x63, 0x57, 0x2F, 0xDC, 0xB6, 0xF5, 0xBC, 0xE2, 0xE1, 0xBB, 0x67, 0x7C, 0x83, 0x0F, 0x5D,
    0xB5, 0x25, 0x6A, 0x87, 0xAF, 0x3A, 0x71, 0x43, 0xF8, 0x08, 0xC1, 0xFD, 0x55, 0xAB, 0x23, 0x2E, 0xD0, 0xFC, 0x7F, 0xE4,
    0xFA, 0x57, 0xF6, 0xD8, 0xF8, 0x8E, 0x4E, 0x58, 0xB5, 0x6A, 0x6D, 0x9C, 0x73, 0x84, 0xFB, 0x1C, 0xE1, 0x3F, 0x7F, 0xC3,
    0x8F, 0x18, 0x68, 0xFE, 0x4F, 0xA8, 0xD1, 0xB6, 0xFD, 0xF6, 0xFF, 0x38, 0x60, 0x6A, 0x7A, 0x7B, 0x76, 0xC9, 0xE8, 0x23,
    0xEB, 0xF3, 0x86, 0x7D, 0x9F, 0xF1, 0xAE, 0x8E, 0xA4, 0xDF, 0xA9, 0x42, 0xB2, 0xF7, 0xEC, 0xE5, 0x3E, 0x47, 0xD6, 0xD9,
    0xC2, 0x29, 0xD6, 0xDA, 0xC5, 0xFE, 0x1E, 0x7B, 0xBC, 0x2C, 0xF8, 0x0C, 0xDF, 0xB1, 0xE7, 0x08, 0x5C, 0xE7, 0xF8, 0xE8,
    0x1D, 0x5B, 0x8A, 0xC7, 0x6E, 0xBB, 0x3C, 0xFC, 0x01, 0x1E, 0xA3, 0x1B, 0x10, 0x1E, 0x4B, 0x2F, 0xA0, 0x0F, 0xBA, 0xBA,
    0xA1, 0xA3, 0x0F, 0xEE, 0x79, 0xEF, 0xA5, 0xC5, 0x96, 0x33, 0x56, 0x86, 0xAD, 0xBF, 0xE0, 0xAC, 0x93, 0xBB, 0xFC, 0x67,
    0x1D, 0x01, 0xCF, 0xF1, 0xD9, 0xF2, 0xF1, 0xD1, 0x3D, 0xE2, 0xBC, 0x62, 0x02, 0xCE, 0x89, 0x05, 0xBA, 0x35, 0xC2, 0xB3,
    0xBA, 0x81, 0xF3, 0x56, 0xF8, 0x0F, 0x6A, 0xB4, 0xED, 0xA4, 0x61, 0xC7, 0xD4, 0xB6, 0xEC, 0x92, 0xD1, 0x47, 0xD6, 0xE7,
    0x0D, 0xFB, 0x3E, 0xE3, 0x5E, 0x5D, 0x49, 0xBF, 0xD7, 0x00, 0x3A, 0x40, 0x9C, 0x61, 0x7D, 0x0E, 0x9C, 0x84, 0xFB, 0xC4,
    0xFC, 0xE4, 0xF9, 0x7E, 0xF2, 0xF9, 0x3B, 0x8A, 0x7F, 0xBC, 0xFF, 0x9A, 0xAE, 0xDD, 0x47, 0xF0, 0xFF, 0x75, 0xFC, 0xDA,
    0x8D, 0x67, 0x77, 0xE3, 0x01, 0xB8, 0x2E, 0x7D, 0xC0, 0xF1, 0x6F, 0x1E, 0xFC, 0x70, 0xF8, 0x00, 0xE4, 0x06, 0x88, 0x01,
    0x1E, 0xFA, 0xD8, 0xAD, 0xC5, 0x59, 0x6F, 0x3A, 0x2C, 0x84, 0xF5, 0xC4, 0xE4, 0x16, 0x99, 0x27, 0x20, 0xD6, 0x80, 0xFF,
    0xD4, 0x01, 0x2B, 0xCF, 0x2F, 0x5B, 0xAF, 0xC7, 0xAC, 0x31, 0xEC, 0x8D, 0x07, 0x14, 0x23, 0x30, 0x6F, 0x39, 0xAF, 0xFC,
    0x6F, 0x30, 0x0E, 0x46, 0x19, 0x3B, 0x76, 0x8C, 0x39, 0xFF, 0xB3, 0xBE, 0x1E, 0xA0, 0xCF, 0x33, 0xEE, 0xF5, 0x23, 0xE9,
    0xF7, 0xAB, 0x90, 0xEC, 0x3D, 0x7B, 0xF9, 0x4F, 0x4E, 0x9E, 0x39, 0x3F, 0xF2, 0xFA, 0xE2, 0x38, 0xF9, 0x3E, 0x6C, 0xFD,
    0x93, 0x9F, 0xFC, 0x40, 0x1C, 0x65, 0xE7, 0x79, 0xAC, 0x98, 0x00, 0xAE, 0x73, 0x2E, 0x3F, 0x41, 0xF2, 0x91, 0x2B, 0x37,
    0x86, 0xE0, 0xFF, 0x93, 0x03, 0x58, 0x75, 0xD0, 0x92, 0xE2, 0xD2, 0x77, 0x9E, 0x59, 0x5C, 0xF7, 0x8E, 0x37, 0x87, 0x7F,
    0x11, 0xF5, 0x03, 0x1D, 0xFE, 0xE3, 0xFF, 0xB3, 0xEE, 0xAF, 0x3C, 0xAF, 0x2F, 0x8E, 0x47, 0x0E, 0xF0, 0x88, 0x13, 0x5E,
    0xE4, 0x03, 0x48, 0x17, 0xF0, 0x77, 0xCD, 0xFF, 0xB7, 0xC2, 0x7F, 0x50, 0xA3, 0x5D, 0x27, 0x09, 0x63, 0xEF, 0xFF, 0x67,
    0x7D, 0x3D, 0x40, 0x9F, 0x67, 0xDC, 0xEB, 0x57, 0xD2, 0xEF, 0xD8, 0x50, 0x07, 0x20, 0xAC, 0xC1, 0x83, 0x9F, 0xF0, 0x94,
    0x78, 0x1F, 0xBB, 0x4F, 0x0E, 0x0F, 0x1E, 0xA3, 0x07, 0xE4, 0xC7, 0x73, 0xE4, 0x39, 0x74, 0x41, 0x6F, 0x1C, 0x80, 0x1E,
    0x20, 0xFE, 0x27, 0x5F, 0xF8, 0xE8, 0x75, 0x9B, 0x23, 0xF6, 0xBF, 0xE9, 0xED, 0x1B, 0x8A, 0x7B, 0xDE, 0x7D, 0x4E, 0x71,
    0xC7, 0x15, 0x17, 0xC6, 0x3C, 0x00, 0xFC, 0xBF, 0xFE, 0x82, 0x53, 0x83, 0xFF, 0x91, 0x6F, 0x98, 0xB5, 0xFF, 0xD4, 0x0F,
    0x50, 0x0B, 0xA0, 0x79, 0x7E, 0xF9, 0xF9, 0x88, 0x7C, 0x81, 0x88, 0xFD, 0xD7, 0x6E, 0x88, 0xC7, 0xC4, 0xFD, 0xE8, 0x02,
    0xF8, 0xDF, 0x9A, 0xFD, 0x07, 0x35, 0xDA, 0xB4, 0xE9, 0x78, 0x18, 0x4D, 0x8C, 0x79, 0xFE, 0x3F, 0xEB, 0xE7, 0x01, 0xFA,
    0x3A, 0xE3, 0x5C, 0x13, 0x49, 0xBF, 0x6B, 0x9F, 0x3A, 0x40, 0xF5, 0x7F, 0xAC, 0xB7, 0xC5, 0x56, 0xFF, 0xC7, 0x37, 0x1F,
    0x2E, 0x9E, 0xFF, 0xFA, 0xC7, 0x43, 0x07, 0x70, 0x7C, 0xEE, 0x8B, 0x1F, 0x8C, 0x73, 0x1D, 0xA5, 0x1B, 0x9E, 0x7A, 0xF0,
    0xCA, 0x19, 0xFF, 0xBF, 0x23, 0x8A, 0xF3, 0xD1, 0x01, 0xF0, 0x1F, 0xAE, 0xF3, 0x1C, 0x31, 0xFF, 0x7B, 0x8E, 0x7B, 0x63,
    0xC4, 0x12, 0xE8, 0x95, 0x95, 0x87, 0xEF, 0x1D, 0x73, 0x00, 0xB2, 0xFF, 0x11, 0xE3, 0x77, 0xF8, 0xAF, 0xFD, 0x06, 0x65,
    0xFF, 0x95, 0xE7, 0x13, 0xFF, 0xCB, 0xFE, 0xBE, 0xF8, 0xCF, 0xB1, 0x5C, 0xFF, 0x67, 0xFE, 0x0F, 0x07, 0xD3, 0xD3, 0x63,
    0xCC, 0xFF, 0xAC, 0x8F, 0x07, 0xEC, 0xEB, 0x8C, 0xCB, 0x4D, 0x25, 0xFD, 0xBE, 0x15, 0x92, 0xF1, 0x9F, 0xFD, 0xBC, 0x35,
    0xBF, 0x87, 0xC0, 0x6F, 0x7C, 0x7A, 0xB8, 0x2E, 0xF9, 0xD1, 0x97, 0x6F, 0x7A, 0x91, 0x1E, 0xE0, 0x1C, 0x7D, 0xC1, 0x3C,
    0x1F, 0xB6, 0x1F, 0x1D, 0x40, 0xEE, 0xEF, 0xFD, 0xE7, 0xBF, 0x25, 0x74, 0x09, 0xF5, 0x00, 0x97, 0x9E, 0x7E, 0x5C, 0xE4,
    0xFE, 0x89, 0x01, 0xE0, 0x3A, 0xF6, 0x9F, 0xC7, 0xF0, 0x3F, 0x7C, 0xF9, 0x59, 0xFE, 0x6B, 0x0D, 0x90, 0xE2, 0x7B, 0xF6,
    0x06, 0x2E, 0xCF, 0xF7, 0x49, 0x1F, 0x94, 0x7D, 0x01, 0x62, 0x00, 0xE2, 0xFF, 0x56, 0xF9, 0x0F, 0x6A, 0xB4, 0xE7, 0xA4,
    0x60, 0xAC, 0xD7, 0xFF, 0x65, 0x7D, 0x3C, 0x60, 0x5F, 0x67, 0x3C, 0x1E, 0x44, 0xD2, 0xEF, 0xDC, 0x87, 0x0E, 0xF8, 0xCB,
    0x87, 0xEF, 0x2D, 0xFE, 0xE7, 0x67, 0xCF, 0x84, 0xBF, 0x0F, 0xCF, 0xE1, 0x3F, 0xBA, 0x40, 0xE7, 0x8A, 0xF9, 0xE5, 0xE7,
    0xF3, 0x1C, 0x7E, 0x3F, 0x7F, 0x47, 0x0F, 0xFC, 0xC9, 0x05, 0xAB, 0x42, 0x07, 0x20, 0xD8, 0x7C, 0xEC, 0x3F, 0x39, 0x3F,
    0xF8, 0xCF, 0x7C, 0x1F, 0x8F, 0xC5, 0x7F, 0xE6, 0xFE, 0x94, 0xFF, 0x93, 0xFD, 0x27, 0xFE, 0x27, 0x17, 0xA8, 0xFC, 0xBE,
    0xEC, 0xBC, 0xE6, 0xFC, 0xCB, 0xF3, 0x7F, 0x08, 0xCF, 0x6B, 0xBD, 0x60, 0x99, 0xFF, 0x3B, 0xB5, 0x51, 0x53, 0xD4, 0x68,
    0xCB, 0x41, 0xC6, 0x85, 0xB1, 0x48, 0x90, 0xF5, 0xEF, 0x80, 0x7D, 0x9C, 0x71, 0x78, 0x50, 0x49, 0xBF, 0x7B, 0x0D, 0x1D,
    0x80, 0xDD, 0x26, 0x5E, 0xFF, 0xD2, 0x67, 0x3F, 0x59, 0x7C, 0xFB, 0xAB, 0x0F, 0x46, 0xCE, 0x5F, 0xF3, 0xFD, 0xF2, 0xF3,
    0xC9, 0xF5, 0xE9, 0x39, 0x84, 0x73, 0x9E, 0x43, 0x0F, 0xC0, 0xF9, 0x88, 0xF1, 0x3B, 0x7E, 0x3F, 0xF9, 0xFE, 0x5B, 0x2E,
    0x7B, 0x4B, 0xF0, 0x9D, 0x73, 0xF1, 0x1F, 0x7B, 0x2F, 0xFF, 0x1F, 0xFE, 0xB3, 0x8F, 0x28, 0xFC, 0x87, 0xEB, 0xD4, 0xFF,
    0x30, 0xF7, 0xD8, 0x5D, 0x7F, 0x38, 0x3B, 0xEF, 0x2F, 0xAE, 0xCB, 0xD7, 0x2F, 0xD7, 0x00, 0xA1, 0x27, 0x34, 0xFF, 0x4F,
    0xDC, 0xD0, 0x6A, 0xFC, 0x0F, 0x6A, 0xB4, 0xE3, 0xA0, 0x63, 0xC3, 0x58, 0x60, 0x64, 0x7D, 0xDB, 0x42, 0x1F, 0x67, 0xFC,
    0x6D, 0x43, 0xD2, 0xEF, 0x5F, 0x21, 0x7A, 0x2D, 0xFE, 0x3A, 0x7C, 0x27, 0x4F, 0x47, 0xFD, 0xFC, 0x15, 0x17, 0x1F, 0x13,
    0xBA, 0x00, 0xBF, 0x5E, 0xB1, 0x3F, 0x3E, 0x3F, 0x82, 0x1E, 0x20, 0xD7, 0x2F, 0xDF, 0x9F, 0x79, 0x01, 0xAE, 0x45, 0x7F,
    0x50, 0x27, 0x20, 0x81, 0xF3, 0xD8, 0x77, 0xC5, 0xFF, 0xD4, 0x01, 0xF3, 0x1C, 0xE7, 0xCC, 0xF5, 0xC3, 0x7F, 0xF9, 0xFF,
    0x65, 0xFB, 0xCF, 0x1A, 0x22, 0xF1, 0x1D, 0xAE, 0x93, 0xF3, 0x97, 0xDD, 0x97, 0x4F, 0xA0, 0xFA, 0x20, 0xAD, 0x03, 0x42,
    0xE0, 0x7F, 0xEB, 0xF6, 0x1F, 0xD4, 0x68, 0x47, 0x63, 0x84, 0x91, 0xF5, 0x6D, 0x0B, 0x7D, 0x9C, 0x71, 0xB7, 0x0D, 0xC1,
    0xE6, 0xA5, 0xBF, 0xA1, 0x42, 0x9E, 0x79, 0xE0, 0xAE, 0x2E, 0xBF, 0xA9, 0xD3, 0xE3, 0xBE, 0x1F, 0xD4, 0xE7, 0xC8, 0xC6,
    0xC3, 0x77, 0xFE, 0x2E, 0x51, 0xDE, 0x0F, 0xBB, 0x0F, 0xEF, 0xAF, 0x3E, 0x63, 0xEF, 0xE2, 0xE3, 0x57, 0x6C, 0x08, 0x3F,
    0x9F, 0x1A, 0x41, 0xB8, 0x0F, 0xE7, 0xE1, 0x3A, 0x3E, 0x80, 0xEC, 0x3F, 0xF1, 0x3F, 0x8F, 0xE1, 0x3F, 0xB6, 0x9E, 0xDC,
    0x1F, 0xB5, 0xC0, 0x91, 0xFF, 0x27, 0xA7, 0xD7, 0xE1, 0x3F, 0xFA, 0x82, 0xF8, 0x5F, 0x7C, 0xC7, 0xBE, 0x4B, 0x17, 0x68,
    0x2E, 0x40, 0x79, 0x81, 0xDE, 0x3A, 0x00, 0xF8, 0xAF, 0xFD, 0xBF, 0x5A, 0xB3, 0xFF, 0xA0, 0x46, 0x1B, 0x0E, 0x3A, 0x3E,
    0x8C, 0x05, 0x44, 0xD6, 0xAF, 0x2D, 0xF4, 0x6D, 0xC6, 0xDD, 0x36, 0x44, 0x63, 0x3E, 0xFD, 0x2D, 0x15, 0x22, 0x5F, 0xFE,
    0xB6, 0x9B, 0x2F, 0x8D, 0xF9, 0x3F, 0xEC, 0xBF, 0xF2, 0x7A, 0xCA, 0xF9, 0xA1, 0x07, 0xF4, 0x1C, 0xD7, 0x93, 0xDF, 0x83,
    0xFF, 0x37, 0x5E, 0x7C, 0x7C, 0xB7, 0xDE, 0x9F, 0xF9, 0x3D, 0xF1, 0x5F, 0x3E, 0x00, 0x7A, 0x01, 0x3B, 0x1F, 0xF6, 0xBF,
    0x13, 0x0F, 0x68, 0xFE, 0x9F, 0xF5, 0x3F, 0xF2, 0xFF, 0x83, 0xE7, 0x2B, 0x96, 0x75, 0xEF, 0x35, 0xA2, 0x9C, 0x9E, 0xE6,
    0xF8, 0x95, 0xEF, 0x23, 0x17, 0x88, 0xE0, 0xF3, 0x47, 0xFE, 0x7F, 0x36, 0x1E, 0x88, 0x3C, 0xE1, 0x29, 0xE7, 0x0E, 0xBE,
    0xFE, 0x6F, 0x2E, 0xD4, 0x68, 0xC3, 0x71, 0xC7, 0xD8, 0x66, 0xFF, 0xB2, 0x7E, 0x6D, 0xA1, 0x6F, 0x33, 0xEE, 0xB6, 0x21,
    0xE2, 0x3F, 0xF1, 0x73, 0xFA, 0x7B, 0x2A, 0x84, 0xFC, 0x3D, 0xDC, 0x24, 0x07, 0x88, 0x6F, 0xAE, 0xF9, 0x3F, 0xF9, 0xFA,
    0xC4, 0xF8, 0x3C, 0xC7, 0xDC, 0x3F, 0xBE, 0xBE, 0xEA, 0xF9, 0xD0, 0x15, 0xC4, 0x0F, 0xE4, 0xF5, 0xB0, 0xFF, 0xBC, 0x07,
    0xFC, 0x67, 0xAE, 0x0F, 0xDD, 0xC0, 0x35, 0xF2, 0xFF, 0xE1, 0x3B, 0x7A, 0x81, 0xF9, 0x7F, 0xF6, 0x08, 0x40, 0x2F, 0xB0,
    0x0F, 0x10, 0xFC, 0xC5, 0x27, 0x90, 0xFF, 0xAF, 0xD8, 0x5F, 0x79, 0xC0, 0x37, 0xAC, 0x3D, 0x29, 0x8E, 0xEC, 0x09, 0xC4,
    0x51, 0xF9, 0x01, 0xF8, 0xAF, 0x6B, 0xC4, 0xFF, 0xD6, 0xFD, 0x7F, 0x50, 0xA3, 0xFD, 0xC6, 0x1D, 0xE6, 0x7F, 0x73, 0x64,
    0xDC, 0x6D, 0x53, 0xA8, 0xA1, 0x61, 0x5F, 0xED, 0xF4, 0x37, 0x55, 0x08, 0x3C, 0x25, 0xFF, 0xC7, 0x7B, 0xE0, 0xDF, 0x6B,
    0x5E, 0xEF, 0xE7, 0x3F, 0x7C, 0xA4, 0x7B, 0x1E, 0xF3, 0xF8, 0x57, 0x6E, 0x0C, 0xFB, 0x0F, 0xD7, 0xE1, 0x38, 0x3A, 0x41,
    0x9C, 0xE7, 0x39, 0x1E, 0x73, 0x8E, 0xBF, 0x8F, 0x5E, 0xE0, 0x7D, 0xC9, 0x0D, 0xF2, 0x18, 0x7D, 0x70, 0xD9, 0x69, 0x2B,
    0x23, 0xCF, 0x8F, 0xFF, 0xCF, 0x3D, 0xFE, 0xE0, 0x3F, 0x39, 0x01, 0xEC, 0x3F, 0xFA, 0xAB, 0xCC, 0x6D, 0xEC, 0x3D, 0x39,
    0x00, 0xF1, 0x5F, 0xF6, 0x9E, 0xBF, 0xE9, 0x88, 0x6F, 0xC0, 0xDE, 0x24, 0xAD, 0xAC, 0xFF, 0xAB, 0x42, 0x8D, 0xB6, 0x1B,
    0x77, 0x4C, 0x8D, 0xEB, 0xFC, 0x5F, 0xD6, 0xAF, 0x2D, 0xF4, 0x6D, 0xC6, 0xD9, 0xB6, 0x84, 0xFD, 0x3B, 0xF1, 0xA7, 0xB9,
    0xEF, 0x06, 0xFB, 0xE1, 0xA7, 0xBF, 0xAB, 0x42, 0xBE, 0xFC, 0xE9, 0x3B, 0x83, 0x97, 0xF0, 0x1F, 0xFB, 0x1F, 0xB9, 0xC1,
    0x6F, 0x3D, 0x1A, 0xFE, 0x3F, 0x76, 0x1F, 0x1B, 0x0F, 0xD7, 0x35, 0xCF, 0x07, 0xCF, 0xA3, 0xEE, 0xA7, 0xC3, 0x79, 0xFE,
    0x86, 0xCF, 0xAF, 0x7D, 0x01, 0x34, 0xDF, 0x8F, 0x4E, 0x80, 0xFF, 0x7A, 0x0C, 0xFF, 0xB1, 0xFF, 0x5B, 0xAF, 0xBC, 0x26,
    0xBE, 0x2F, 0xF5, 0x7E, 0xC4, 0xFF, 0xDC, 0x3F, 0x08, 0xFE, 0xB3, 0xEE, 0x50, 0xB5, 0xBE, 0xD4, 0xFC, 0x6B, 0xAE, 0xBF,
    0xEC, 0xEF, 0x6B, 0xFD, 0x9F, 0xE2, 0x00, 0xF6, 0x1F, 0x6C, 0x7D, 0xFE, 0x5F, 0xA8, 0xD1, 0x6E, 0xE3, 0x8E, 0xB1, 0xBD,
    0xFF, 0x4F, 0xD6, 0xAF, 0x2D, 0xF4, 0x6D, 0xC6, 0xDB, 0x36, 0x44, 0xFB, 0x77, 0xEA, 0x7E, 0x5B, 0xD4, 0xC3, 0x71, 0xEF,
    0xAC, 0xF4, 0xB7, 0x55, 0x08, 0xB5, 0x39, 0xD8, 0x7A, 0x04, 0xFB, 0x8E, 0xDD, 0xA6, 0x26, 0x40, 0x36, 0x9E, 0x73, 0xE2,
    0x02, 0x62, 0x00, 0xE6, 0xFB, 0x7A, 0xF9, 0x2F, 0x9F, 0x9F, 0xFA, 0x5E, 0xF8, 0xCE, 0x63, 0xDE, 0x87, 0x9C, 0x1F, 0xE7,
    0xAC, 0x2B, 0x60, 0xDD, 0x3F, 0xF9, 0x3E, 0xD6, 0x1A, 0xC1, 0x6D, 0x38, 0x8F, 0xDE, 0x2A, 0xF3, 0x5F, 0xF3, 0x7F, 0xE4,
    0x02, 0x54, 0xEB, 0xA3, 0x7C, 0x80, 0xD6, 0x09, 0xE2, 0x1F, 0x30, 0x1F, 0x48, 0x8C, 0xB0, 0xA0, 0xFC, 0x6F, 0x61, 0x9C,
    0x2C, 0x66, 0x98, 0xFF, 0xCD, 0x91, 0x71, 0xB7, 0x0D, 0x51, 0xFD, 0x1E, 0x3E, 0x34, 0x6B, 0xF8, 0xD9, 0xC7, 0x0B, 0x3F,
    0x9E, 0xFB, 0x6A, 0xA5, 0xBF, 0xAF, 0x42, 0xB0, 0xF9, 0xD8, 0x7B, 0xEC, 0x36, 0x1C, 0x66, 0x9E, 0x8F, 0xD8, 0x1D, 0x5D,
    0x00, 0xDF, 0xC9, 0x01, 0x46, 0x9D, 0xCF, 0xBB, 0xCF, 0x89, 0x1C, 0x3F, 0xCF, 0x29, 0xFE, 0x8F, 0xF5, 0xFF, 0x3D, 0xFC,
    0xE7, 0x75, 0x3C, 0xE6, 0xEF, 0xD4, 0xFE, 0x8A, 0xFF, 0xEC, 0x31, 0x26, 0xFB, 0x4F, 0xFD, 0x1F, 0xFC, 0xD7, 0xBC, 0x9F,
    0xF8, 0xAD, 0x39, 0xC0, 0x72, 0xFD, 0x9F, 0xCE, 0xB5, 0x5E, 0x88, 0xD8, 0x60, 0x68, 0xFC, 0x07, 0x35, 0xDA, 0x6C, 0x9C,
    0x61, 0xFE, 0x37, 0x47, 0xC6, 0xDD, 0x36, 0xA4, 0xBC, 0x7F, 0x27, 0x79, 0x34, 0xB8, 0x15, 0x7B, 0x70, 0x9E, 0x70, 0x7E,
    0xDC, 0x1B, 0x33, 0xFD, 0x8D, 0x15, 0x42, 0x8C, 0x8F, 0xDD, 0xD6, 0xFE, 0x1E, 0x70, 0x59, 0xFE, 0x3E, 0xBA, 0x41, 0xFE,
    0x3F, 0xB6, 0x1F, 0x8E, 0xDF, 0x76, 0xCE, 0x69, 0xDD, 0xFC, 0x3F, 0xFE, 0x3F, 0x7C, 0xE7, 0x08, 0xE7, 0xE1, 0x3F, 0xC2,
    0x39, 0xCF, 0x9F, 0x78, 0xE0, 0x81, 0x91, 0x0F, 0xC4, 0xFE, 0xA3, 0x03, 0x88, 0xFF, 0x65, 0xFF, 0x97, 0xAF, 0x3F, 0x3A,
    0x74, 0x02, 0xBC, 0x57, 0xBE, 0x9F, 0x38, 0xA0, 0xCC, 0xFB, 0xF2, 0xDC, 0x20, 0x3E, 0x81, 0xF9, 0x6F, 0x34, 0x42, 0xD6,
    0xA7, 0x2D, 0xF4, 0x6B, 0xC6, 0xDD, 0x36, 0x44, 0xFC, 0xE7, 0xBE, 0x9B, 0xCC, 0xAD, 0x51, 0x7B, 0xCF, 0x1A, 0x7B, 0xF6,
    0xDA, 0xC1, 0x17, 0x20, 0x3F, 0x9E, 0xFE, 0xCE, 0x0A, 0x81, 0xAB, 0xF0, 0xBF, 0xEC, 0xFF, 0xB3, 0xDE, 0x4F, 0xF6, 0x5F,
    0xFA, 0x00, 0xD1, 0xFC, 0x7E, 0xAC, 0xF3, 0x27, 0xCE, 0xDF, 0xB8, 0x2E, 0x74, 0x03, 0x9C, 0x57, 0x3D, 0x10, 0xFA, 0x81,
    0xF9, 0x05, 0xEC, 0xFD, 0x8D, 0x57, 0x9F, 0x13, 0xFB, 0x80, 0xC2, 0x5F, 0xF2, 0xFE, 0x7C, 0x57, 0xF4, 0x17, 0x3C, 0x2F,
    0xF3, 0x1B, 0x51, 0x1E, 0x40, 0xBE, 0x80, 0xE6, 0x05, 0xF4, 0x1C, 0xBF, 0x6F, 0x68, 0xF9, 0x3F, 0x50, 0xA3, 0xAD, 0x8C,
    0x11, 0x44, 0xD6, 0xA7, 0x2D, 0xF4, 0x6B, 0xC6, 0xDD, 0x36, 0x44, 0xFE, 0x3F, 0xDC, 0xD7, 0x5A, 0x5B, 0xFC, 0x71, 0x62,
    0x6E, 0x6C, 0x2D, 0x79, 0x76, 0xE6, 0xF6, 0xD3, 0xDF, 0x5A, 0x21, 0xF0, 0x5C, 0x35, 0xBE, 0xF0, 0x97, 0x9A, 0xFF, 0xD8,
    0xD7, 0xAF, 0x23, 0xF8, 0x07, 0x5A, 0xF7, 0x47, 0x1C, 0xA0, 0xF9, 0x3F, 0xF8, 0x8F, 0xFE, 0xE1, 0x7A, 0xF4, 0x01, 0x7A,
    0x42, 0xF1, 0x00, 0x47, 0x6C, 0x3E, 0xFA, 0x80, 0x3D, 0x00, 0x89, 0xF7, 0x59, 0xF7, 0xFB, 0xE1, 0x0F, 0xBE, 0x37, 0xF8,
    0x4F, 0xDE, 0x8F, 0x3D, 0x01, 0xE0, 0x35, 0x82, 0x2F, 0x10, 0x6B, 0x02, 0x0F, 0x5A, 0x13, 0x76, 0xBE, 0x5C, 0x13, 0x20,
    0x9F, 0x00, 0x3F, 0xA7, 0xF5, 0xFA, 0xDF, 0x32, 0x6A, 0xB4, 0x93, 0x31, 0x82, 0xC8, 0xFA, 0xB4, 0x85, 0x7E, 0xCD, 0xB8,
    0xDB, 0x86, 0xC8, 0xFE, 0xFF, 0xD1, 0xC9, 0x87, 0x84, 0x5D, 0x65, 0x2D, 0x0E, 0x75, 0x7C, 0xD8, 0x5A, 0x7C, 0x6B, 0xF6,
    0xDB, 0x64, 0xEF, 0x1D, 0xE6, 0xF7, 0xD2, 0xDF, 0x5B, 0x21, 0xC4, 0xFF, 0x61, 0xEF, 0xAF, 0x9C, 0xC9, 0xF7, 0xF1, 0xF8,
    0xE1, 0xBB, 0xAE, 0xE8, 0xF2, 0x1F, 0x29, 0xF3, 0x9F, 0x6B, 0xB1, 0xFF, 0x3C, 0x86, 0xF3, 0xC4, 0x01, 0xC4, 0xFD, 0x1C,
    0xF1, 0x13, 0xD8, 0x5F, 0x10, 0xDD, 0x84, 0x8E, 0x60, 0x0E, 0x80, 0x3D, 0x00, 0x88, 0x07, 0xE0, 0x7F, 0xB7, 0xBE, 0x47,
    0xB6, 0xBD, 0x94, 0x03, 0x50, 0x0D, 0x40, 0x59, 0x2F, 0xA8, 0xFE, 0xC7, 0xF6, 0xDF, 0xE8, 0x1B, 0x59, 0x9F, 0xB6, 0xD0,
    0xAF, 0x19, 0x77, 0xDB, 0x10, 0xB8, 0x4F, 0xED, 0x1B, 0xF5, 0xB8, 0x70, 0xF4, 0xAE, 0x1B, 0xAF, 0xEF, 0xC6, 0x00, 0xF0,
    0x0D, 0x9E, 0xC2, 0x43, 0xD6, 0xF6, 0x90, 0xB3, 0x4F, 0x7F, 0x73, 0x85, 0xC0, 0xE9, 0x98, 0xEF, 0xEF, 0xD8, 0xFA, 0xF0,
    0x07, 0x3A, 0xF6, 0x5F, 0x73, 0xFC, 0xDA, 0xF7, 0x93, 0x39, 0x3E, 0xF8, 0x8F, 0x8F, 0x20, 0xFE, 0x6B, 0x3E, 0xA0, 0xCC,
    0x7F, 0xF6, 0x16, 0xC7, 0xFE, 0xF3, 0xFD, 0xB0, 0xF7, 0xE8, 0x00, 0xEC, 0x3F, 0xCF, 0xC9, 0xFF, 0x17, 0xE7, 0xC5, 0x7F,
    0xEE, 0x1F, 0x5E, 0xCE, 0x03, 0x12, 0x13, 0x68, 0x3F, 0xA0, 0x72, 0xFD, 0xBF, 0xED, 0x7F, 0xFB, 0x18, 0xCB, 0xEC, 0x5F,
    0xD6, 0x9F, 0x2D, 0xF5, 0x6B, 0xC6, 0xDD, 0xB6, 0xE4, 0xCF, 0x3F, 0x71, 0x5B, 0xF8, 0xD9, 0xF8, 0xFF, 0x70, 0xFF, 0xC1,
    0x8B, 0xFF, 0x20, 0xF6, 0xE5, 0x98, 0xFE, 0xB7, 0x2F, 0x85, 0xFC, 0xF2, 0x3B, 0xB7, 0xC7, 0x9C, 0xDE, 0x6F, 0xFE, 0xFA,
    0xFE, 0xE2, 0xFE, 0x77, 0x2C, 0xCB, 0x7F, 0x77, 0x85, 0xF0, 0xDE, 0x31, 0xF7, 0x3F, 0xEB, 0xFF, 0xAB, 0xA6, 0x47, 0xF6,
    0x5F, 0x8F, 0xB9, 0x06, 0xBE, 0x2B, 0x1F, 0xA0, 0x35, 0x00, 0xF0, 0x9F, 0x73, 0xEA, 0xFE, 0xAE, 0xDE, 0x7C, 0x51, 0x5C,
    0x13, 0x75, 0xFD, 0x1D, 0x7F, 0x40, 0xFE, 0xBF, 0xFC, 0x7A, 0xE5, 0x00, 0xF0, 0xFB, 0x39, 0x92, 0xD7, 0xD4, 0x9E, 0x60,
    0x70, 0x1F, 0xBD, 0x50, 0x5E, 0xFF, 0x63, 0xFB, 0x3F, 0x3C, 0x8C, 0x65, 0xF9, 0x4F, 0xD6, 0x9F, 0x2D, 0xF5, 0x69, 0xC6,
    0xDB, 0xB6, 0x04, 0xEE, 0xE0, 0x13, 0xB3, 0x17, 0x3E, 0xFB, 0xF7, 0xB2, 0x9E, 0x6F, 0xEA, 0x37, 0xDF, 0x28, 0xA6, 0xBF,
    0x7B, 0x75, 0x31, 0xFD, 0x8B, 0x07, 0xE2, 0x9C, 0x5A, 0xDE, 0x6D, 0x4F, 0x6D, 0x2D, 0xB6, 0xFF, 0xFC, 0xEF, 0x23, 0x37,
    0x97, 0xFE, 0xFE, 0x0A, 0xE9, 0xE5, 0x3F, 0x76, 0x9F, 0x73, 0xF1, 0x5F, 0xFE, 0x3F, 0xF3, 0xFC, 0xE2, 0x3F, 0xD7, 0xF0,
    0x98, 0x35, 0x00, 0x3C, 0x87, 0xBD, 0xC7, 0xD6, 0xC3, 0x7F, 0xB8, 0x4F, 0xBC, 0x0F, 0xFF, 0xE1, 0x78, 0xB9, 0xD6, 0x5F,
    0x39, 0x00, 0x84, 0x9A, 0x06, 0x9E, 0x53, 0xEC, 0x0F, 0xEF, 0x15, 0x0F, 0xB4, 0xBA, 0xFF, 0x67, 0x15, 0x6A, 0xB4, 0xCB,
    0x38, 0xC3, 0xFC, 0x6F, 0x8E, 0x8C, 0xB7, 0x6D, 0xC8, 0xDF, 0x3E, 0xF6, 0x85, 0xC8, 0xA9, 0x11, 0x07, 0x93, 0x0B, 0x3B,
    0x7E, 0xD3, 0x5B, 0xA3, 0xFE, 0xE7, 0xF1, 0xCF, 0xDC, 0x34, 0xA3, 0x03, 0x3A, 0xFC, 0x97, 0x0E, 0xC0, 0xF6, 0x6F, 0x59,
    0xFE, 0x3B, 0x51, 0xBF, 0xC3, 0xEB, 0xD2, 0x36, 0xA8, 0x10, 0xFC, 0x7B, 0x04, 0x7F, 0x43, 0xF6, 0x1F, 0x5F, 0x9F, 0x7C,
    0x83, 0xF2, 0x7F, 0xC4, 0xF7, 0x70, 0x1D, 0x5D, 0xC0, 0x63, 0xF9, 0x03, 0xD8, 0x7F, 0x38, 0x0F, 0xFF, 0xA9, 0x35, 0xE2,
    0x1E, 0x63, 0xEC, 0x01, 0x4E, 0xFC, 0x4F, 0xCD, 0x82, 0xE2, 0x7C, 0x6C, 0xBC, 0x6A, 0x7F, 0x11, 0xFC, 0x7F, 0x72, 0xFE,
    0x9A, 0x1B, 0x2C, 0xE7, 0x08, 0xCA, 0xFC, 0xEF, 0x6D, 0x9B, 0x56, 0x50, 0xA3, 0x4D, 0xC6, 0x19, 0xE3, 0x48, 0xFF, 0xB4,
    0x3F, 0x5B, 0xEA, 0xD3, 0x8C, 0xBB, 0x83, 0x0A, 0x75, 0xBF, 0xCC, 0x9D, 0x53, 0x53, 0x0F, 0x47, 0xA8, 0x85, 0x45, 0x07,
    0xB0, 0x4E, 0xFE, 0x82, 0xA3, 0xD6, 0x86, 0xCF, 0xCF, 0xFA, 0xDE, 0x6F, 0xDE, 0xB8, 0xA6, 0xB8, 0xFD, 0x6D, 0x33, 0x75,
    0xB7, 0xDB, 0x7E, 0xF5, 0x7C, 0xF1, 0x8B, 0x1F, 0x7C, 0x3F, 0xFC, 0x71, 0x7C, 0x81, 0xB4, 0x1D, 0x2A, 0x44, 0xF5, 0x41,
    0x65, 0xFE, 0xCB, 0xFE, 0x23, 0xF0, 0x3F, 0xEA, 0x05, 0x67, 0xF9, 0xCF, 0xBD, 0xBF, 0x54, 0x0F, 0x80, 0x1F, 0xCF, 0xFE,
    0xFF, 0xF0, 0x9F, 0x7B, 0x03, 0xC3, 0x7F, 0xEA, 0x8E, 0xF9, 0x1D, 0xB2, 0xFF, 0xF2, 0xF1, 0xBB, 0x3E, 0xC0, 0xEC, 0x7A,
    0x00, 0xF2, 0x83, 0x3C, 0x0E, 0xFD, 0x30, 0x9B, 0x27, 0x68, 0x7D, 0xFF, 0xBF, 0x5E, 0xD4, 0x68, 0x0F, 0x63, 0xC4, 0x90,
    0xF5, 0x67, 0x4B, 0x7D, 0x9A, 0xF1, 0xB7, 0x0D, 0xC1, 0x6F, 0x86, 0x0F, 0xC4, 0xC1, 0xD8, 0x4E, 0xE6, 0xFC, 0xE1, 0x06,
    0xE7, 0xD8, 0x4B, 0x62, 0x6F, 0xE6, 0x06, 0x98, 0x63, 0xC7, 0xC6, 0xB2, 0xCF, 0x17, 0x35, 0x7E, 0xEC, 0xE5, 0x45, 0x3C,
    0xF0, 0x2F, 0x77, 0x9F, 0x92, 0xB7, 0x45, 0x85, 0xC0, 0x7F, 0xD5, 0xFC, 0xA0, 0x07, 0xC8, 0x3B, 0xC0, 0x75, 0x1E, 0xE3,
    0xEF, 0xC3, 0x77, 0xCE, 0x59, 0x5B, 0x4C, 0xDD, 0x3F, 0xF6, 0x9F, 0xDC, 0x24, 0xF1, 0x3F, 0x73, 0x95, 0xE8, 0x08, 0xF8,
    0x0F, 0xA7, 0xF9, 0x5E, 0x48, 0xD4, 0xF6, 0xCF, 0xD6, 0xF5, 0x77, 0x6B, 0x00, 0x3A, 0xE7, 0xFC, 0x0E, 0xAD, 0x0B, 0xE2,
    0x39, 0xF6, 0xFE, 0xE5, 0x39, 0x74, 0x42, 0x99, 0xFF, 0xBD, 0x6D, 0xD3, 0x0A, 0x6A, 0xB4, 0x85, 0x31, 0x62, 0xC8, 0xFA,
    0xB3, 0xA5, 0x3E, 0xCD, 0xB8, 0x3B, 0x88, 0x68, 0xDE, 0xFF, 0xA9, 0x27, 0xBF, 0x1D, 0x1C, 0x90, 0xB0, 0x06, 0x80, 0xFC,
    0x1A, 0x1C, 0xE1, 0xBE, 0x9D, 0xD8, 0x65, 0xB8, 0x8E, 0xDF, 0x0F, 0x2F, 0xE1, 0xFF, 0x0F, 0x9E, 0xFC, 0x72, 0xAC, 0xF3,
    0x81, 0xFF, 0x08, 0x3C, 0x4E, 0xDB, 0xA3, 0x42, 0xE0, 0x3B, 0xF3, 0x01, 0xDA, 0x03, 0x44, 0xF6, 0x9F, 0x79, 0x48, 0xAD,
    0x17, 0xD0, 0xBA, 0x3F, 0xF8, 0xCF, 0x1C, 0x01, 0xF1, 0x3F, 0x6B, 0xFD, 0x63, 0x0F, 0xE0, 0xA5, 0xFB, 0x45, 0xEC, 0x82,
    0xFD, 0x87, 0xFF, 0xD8, 0x73, 0xF4, 0x56, 0xD9, 0xF6, 0x97, 0x73, 0x7D, 0xF8, 0x38, 0xFC, 0xAE, 0xB2, 0x5E, 0x68, 0x7D,
    0xFF, 0xEF, 0x5E, 0xD4, 0x68, 0x07, 0x63, 0xC4, 0x90, 0xF5, 0x67, 0x4B, 0x7D, 0x9A, 0x71, 0x78, 0x10, 0x11, 0xFF, 0xB9,
    0x6F, 0x07, 0xF7, 0xCE, 0x81, 0x07, 0xC4, 0xC2, 0xF0, 0x9F, 0x5A, 0x40, 0x72, 0x82, 0xD4, 0x01, 0x53, 0x73, 0x03, 0xFF,
    0xF1, 0x01, 0x38, 0xFF, 0xEF, 0x1F, 0x3E, 0x39, 0xB3, 0x67, 0x6F, 0x87, 0x9B, 0xCC, 0x0B, 0xFC, 0xFB, 0x23, 0xD7, 0x46,
    0xCD, 0x00, 0x73, 0x03, 0x69, 0x9B, 0x54, 0x88, 0xEA, 0x83, 0xB0, 0xFF, 0xBA, 0xEF, 0x9F, 0xF6, 0x00, 0xE4, 0x33, 0xD0,
    0x11, 0xE8, 0x1D, 0xB8, 0xAF, 0xBA, 0x5F, 0xEC, 0x3F, 0x39, 0x00, 0xF9, 0xFF, 0x70, 0x9F, 0xBF, 0x89, 0xEF, 0x8A, 0x03,
    0x14, 0xE3, 0x6B, 0x4D, 0x80, 0xFE, 0x7E, 0xDA, 0x49, 0xA7, 0x75, 0xAF, 0x19, 0xCA, 0xFE, 0x9F, 0x65, 0xD4, 0x68, 0x03,
    0x63, 0xC4, 0x90, 0xF5, 0x67, 0x4B, 0x7D, 0x9A, 0x71, 0x78, 0x10, 0x11, 0xFF, 0xC9, 0x01, 0xEC, 0xBE, 0xFB, 0x4B, 0x23,
    0xF7, 0x2F, 0xFE, 0xB3, 0x0E, 0x08, 0x21, 0xB7, 0x1E, 0xFB, 0x6D, 0x76, 0x6C, 0x33, 0x31, 0x38, 0xBC, 0x83, 0xFF, 0xEC,
    0xDF, 0x43, 0x6D, 0xAF, 0xF6, 0xF9, 0xA1, 0x5E, 0x88, 0xF9, 0xC2, 0xBB, 0x3F, 0x70, 0x73, 0xDE, 0x2E, 0x15, 0xA2, 0x35,
    0x40, 0xCA, 0x07, 0xA8, 0x36, 0x80, 0x73, 0x72, 0x8D, 0xD4, 0x03, 0xF0, 0x1C, 0x3A, 0x00, 0xFE, 0xC3, 0x5F, 0xF4, 0x05,
    0x79, 0x0A, 0xEC, 0x3F, 0xDC, 0x17, 0xFF, 0x11, 0xD9, 0x78, 0xCD, 0x05, 0x28, 0xE7, 0xCF, 0x9A, 0x1F, 0xD5, 0xFF, 0x28,
    0x4F, 0x80, 0x4F, 0x60, 0xFB, 0x3F, 0x3C, 0x38, 0xFF, 0xD7, 0x1C, 0x19, 0x87, 0x07, 0x11, 0xF1, 0x9F, 0xDA, 0x1F, 0x78,
    0x8F, 0xFD, 0xA7, 0xCE, 0x97, 0xF8, 0x9F, 0x7B, 0x79, 0xC0, 0x7F, 0x7C, 0x64, 0xF2, 0x6C, 0xD4, 0xEE, 0x90, 0x0F, 0xC4,
    0x26, 0x93, 0xFB, 0x23, 0xFE, 0x67, 0xFF, 0x3F, 0xDD, 0xE3, 0x8B, 0x58, 0x9E, 0xE3, 0x33, 0xDF, 0xFA, 0x66, 0xBC, 0x36,
    0x6D, 0x9B, 0x0A, 0x81, 0xCF, 0xBA, 0xF7, 0x27, 0x3C, 0x57, 0xFE, 0x5F, 0xFE, 0x3F, 0xCF, 0xE1, 0xE7, 0xC3, 0x7F, 0xF6,
    0x00, 0xC0, 0xFE, 0x93, 0xB3, 0xD8, 0x6F, 0xDF, 0xD7, 0x86, 0xFD, 0x27, 0xFF, 0x87, 0xBE, 0xC2, 0xFF, 0x57, 0x0C, 0xA0,
    0x38, 0x00, 0x7D, 0x80, 0xC0, 0x77, 0x04, 0x3D, 0x20, 0x3F, 0x00, 0x5D, 0x60, 0xFE, 0x0F, 0x0F, 0xE6, 0x7F, 0x73, 0x64,
    0x1C, 0x1E, 0x44, 0xC4, 0x7F, 0x04, 0xFF, 0x97, 0x5A, 0x19, 0xE6, 0xFE, 0xE0, 0x3D, 0xFE, 0x7F, 0xDC, 0x37, 0x77, 0xFD,
    0xD1, 0x61, 0xDB, 0xA9, 0x0D, 0x64, 0x5D, 0x00, 0x22, 0xFF, 0x9F, 0x1C, 0x3E, 0x71, 0x01, 0x7B, 0x78, 0x32, 0x2F, 0x47,
    0x5D, 0x2F, 0xBA, 0x84, 0x5A, 0x61, 0x1E, 0xA7, 0xED, 0x53, 0x21, 0xB2, 0xF9, 0x9A, 0xEB, 0xD3, 0x5E, 0x21, 0xC4, 0x1D,
    0xD8, 0xFF, 0xF0, 0xFF, 0x57, 0x2C, 0x8B, 0x35, 0x3F, 0xEC, 0x0B, 0xCE, 0xBE, 0x1F, 0xE4, 0x28, 0xD0, 0x05, 0xAC, 0x01,
    0x46, 0x5F, 0x89, 0xF7, 0xF0, 0x5D, 0xE7, 0xD8, 0x78, 0xF4, 0x00, 0xBC, 0xEF, 0xD5, 0x0F, 0xE4, 0x13, 0xD5, 0x0E, 0xAD,
    0xF3, 0xBF, 0xC6, 0x6F, 0x6E, 0x6B, 0xAC, 0x2C, 0x56, 0x98, 0xFF, 0xCD, 0x91, 0x71, 0x78, 0x50, 0x91, 0x0E, 0xC0, 0xFE,
    0x61, 0x07, 0x99, 0x23, 0x67, 0xFE, 0x0F, 0x4E, 0xB0, 0xBF, 0x2E, 0xB6, 0x1F, 0xFE, 0xC3, 0x71, 0xEC, 0x32, 0xF5, 0xBF,
    0xD8, 0x7E, 0x84, 0xFC, 0x1F, 0xF1, 0xF9, 0x1D, 0x97, 0x2F, 0x89, 0xFC, 0x1F, 0x35, 0x83, 0xF8, 0x06, 0xCC, 0xD1, 0xE1,
    0xCB, 0x93, 0xBF, 0x4F, 0xDB, 0xA8, 0x42, 0xCA, 0xFC, 0x57, 0x3E, 0x10, 0xFE, 0xC3, 0x7D, 0x7C, 0x00, 0xF8, 0x8E, 0xFD,
    0x47, 0xF0, 0x5B, 0xA8, 0xFF, 0x67, 0x6E, 0x02, 0xFB, 0xCF, 0x5A, 0x20, 0xCD, 0xFD, 0xC3, 0x79, 0x71, 0x5C, 0x6B, 0x00,
    0x95, 0xF7, 0x97, 0x9E, 0xE0, 0xBC, 0xBC, 0xFF, 0x4F, 0x6F, 0xFB, 0x0C, 0x8C, 0x1A, 0xBF, 0x77, 0xDC, 0x61, 0xFE, 0x37,
    0x47, 0xC6, 0xDF, 0x41, 0x45, 0xFC, 0x67, 0xFF, 0x1F, 0xEE, 0xDF, 0xC5, 0xFD, 0x7B, 0x11, 0xE6, 0xD4, 0xE0, 0x13, 0x39,
    0x76, 0x7C, 0x6F, 0x72, 0x72, 0xDC, 0xB7, 0x07, 0x5B, 0xFC, 0xDC, 0x33, 0xDF, 0x0B, 0x1F, 0x00, 0x7D, 0x40, 0x1D, 0xCF,
    0x75, 0xC7, 0xEE, 0x19, 0x9C, 0x47, 0x27, 0x50, 0x0F, 0xC0, 0x3E, 0x60, 0xDA, 0xCF, 0x03, 0x9F, 0x20, 0x6D, 0xA7, 0x0A,
    0x21, 0x0F, 0xA8, 0x7A, 0x00, 0xFC, 0x7F, 0xF8, 0x4F, 0x7C, 0x40, 0xFE, 0xE1, 0xD4, 0xDF, 0x5B, 0x19, 0x7B, 0x80, 0xE0,
    0xF3, 0x73, 0x9F, 0x71, 0xF8, 0xCF, 0x77, 0xC5, 0x17, 0x88, 0x39, 0xBE, 0xD9, 0x1C, 0x9F, 0x7C, 0x7D, 0xC5, 0xF8, 0xF2,
    0x09, 0x54, 0x1F, 0x24, 0xDD, 0x00, 0xFF, 0x87, 0xE6, 0xFF, 0xD7, 0xF8, 0xAD, 0xE3, 0x8E, 0x89, 0xE5, 0x7F, 0x0B, 0x7D,
    0x9B, 0xF1, 0xB7, 0x0D, 0x91, 0x0E, 0xC0, 0x06, 0x92, 0xF3, 0x87, 0x47, 0xEC, 0xA9, 0x8B, 0x1F, 0x4F, 0xEE, 0x4F, 0x7E,
    0x38, 0x3E, 0x00, 0x47, 0xB8, 0x0F, 0xCF, 0xB5, 0x6F, 0x2F, 0x79, 0x81, 0xE9, 0xA9, 0xE7, 0x83, 0xF7, 0xCC, 0x0D, 0xB2,
    0x0F, 0xB0, 0xF6, 0xEB, 0x40, 0x6F, 0xA0, 0x23, 0xD2, 0x76, 0xAA, 0x10, 0xAD, 0x0F, 0xD4, 0x3E, 0xE0, 0xF0, 0x9F, 0xBA,
    0x9F, 0x0D, 0x1B, 0x57, 0x05, 0xE7, 0xD9, 0xAB, 0x94, 0xBC, 0x25, 0xBA, 0x8A, 0xEF, 0x4D, 0x0C, 0x10, 0x79, 0xBF, 0x8E,
    0x0E, 0x28, 0xC7, 0xFB, 0xD2, 0x05, 0xF0, 0x5E, 0x7E, 0x81, 0xF4, 0x01, 0xCF, 0xC1, 0x7F, 0x72, 0xA0, 0xE6, 0xFF, 0x70,
    0x60, 0xFE, 0x37, 0x47, 0xC6, 0xDD, 0xB6, 0x84, 0xB1, 0x8F, 0xEF, 0x0E, 0x7F, 0xB5, 0x97, 0x3E, 0x7B, 0xFF, 0xEC, 0xFE,
    0x92, 0xDD, 0xC2, 0xC7, 0x66, 0xDF, 0xED, 0xA8, 0xB9, 0x9B, 0x5D, 0x87, 0x43, 0xEE, 0x8F, 0x3D, 0x7B, 0xF0, 0x0F, 0xF0,
    0x07, 0x8A, 0xE2, 0xD7, 0xC5, 0x73, 0x3F, 0xFA, 0x4E, 0xB1, 0xFD, 0x57, 0x3F, 0x8B, 0x75, 0x82, 0xF0, 0x1F, 0x1B, 0x2E,
    0x1F, 0x81, 0x38, 0x21, 0x6D, 0xAB, 0x0A, 0xD1, 0xDE, 0x00, 0xBC, 0x1F, 0x35, 0xC0, 0xC8, 0x86, 0x35, 0xCB, 0x83, 0xDB,
    0xF8, 0x02, 0xD4, 0x2E, 0x51, 0xD3, 0x73, 0xC1, 0x99, 0x33, 0xF3, 0x95, 0xC4, 0xF7, 0xF0, 0x5F, 0x36, 0x5E, 0xFC, 0x97,
    0x2E, 0xE8, 0x7D, 0x5E, 0xFB, 0x7F, 0xC2, 0x7F, 0xDD, 0x03, 0xC4, 0xFC, 0x37, 0x6A, 0x21, 0xEB, 0xD7, 0x16, 0xFA, 0x36,
    0xE3, 0x6D, 0x5B, 0x82, 0xDD, 0x23, 0x77, 0x0F, 0xFF, 0x79, 0x8C, 0x2D, 0xC5, 0xBE, 0xC2, 0x11, 0xF2, 0x01, 0x5A, 0x17,
    0x40, 0x3D, 0x00, 0x9C, 0xFE, 0xCA, 0x35, 0x17, 0x47, 0x5D, 0x1E, 0x9C, 0xC7, 0xF6, 0x23, 0x53, 0x2F, 0x3C, 0x1B, 0xC7,
    0x58, 0x27, 0xDC, 0x89, 0xDF, 0xD1, 0x13, 0xF0, 0x17, 0x3D, 0xA0, 0xFD, 0x7E, 0xD2, 0xF6, 0xAA, 0x10, 0xE6, 0x1C, 0xA8,
    0x07, 0xBA, 0xFA, 0xB4, 0x75, 0x11, 0xFB, 0xB3, 0xEF, 0x07, 0xF7, 0xFB, 0x43, 0x37, 0x51, 0xBB, 0xC4, 0x7A, 0x60, 0xF6,
    0xFE, 0x22, 0x06, 0x50, 0xCE, 0x0F, 0x9E, 0x97, 0x7D, 0x7D, 0xE5, 0x04, 0xA8, 0x73, 0xC0, 0xF6, 0x2B, 0xFF, 0xC7, 0x35,
    0xCC, 0x21, 0xC2, 0x7F, 0x62, 0x00, 0xDB, 0x7F, 0xA3, 0x36, 0xB2, 0x7E, 0x6D, 0xA1, 0x6F, 0x33, 0xDE, 0xB6, 0x25, 0x8C,
    0x7B, 0xEC, 0x3D, 0x3E, 0x00, 0x8F, 0xE1, 0xB1, 0x7C, 0x01, 0x72, 0xED, 0xE4, 0x02, 0xD9, 0x77, 0x8B, 0x75, 0xC2, 0xB2,
    0xF3, 0xE2, 0x3D, 0xE7, 0x12, 0xF1, 0x1F, 0x7F, 0x9D, 0xFC, 0x3C, 0x31, 0x02, 0x82, 0xFD, 0xBE, 0xEE, 0x94, 0xA3, 0xE3,
    0xF9, 0xB4, 0xCD, 0x2A, 0x04, 0xDF, 0x83, 0xBD, 0x88, 0x58, 0x73, 0xC4, 0xDA, 0x24, 0x6A, 0x7E, 0x98, 0x67, 0x8C, 0x7A,
    0x7E, 0xEC, 0x7F, 0x89, 0xFF, 0xE5, 0xB8, 0x5F, 0xC2, 0xF3, 0xAA, 0xFB, 0x2F, 0xC7, 0x02, 0x1C, 0xE1, 0xFF, 0x50, 0xEA,
    0xFF, 0x6B, 0xFC, 0xAE, 0x36, 0xC6, 0x88, 0xB1, 0x40, 0xC8, 0xFA, 0xB5, 0x85, 0xFE, 0xCD, 0x78, 0xDB, 0x96, 0x68, 0x0E,
    0x80, 0x3D, 0x7E, 0xE0, 0x42, 0xEF, 0xDF, 0xF1, 0xEF, 0x11, 0xCE, 0x59, 0xFF, 0x03, 0x4F, 0xC4, 0x7D, 0x9E, 0xC7, 0x77,
    0xE6, 0x79, 0xCE, 0x79, 0x0F, 0xE6, 0xE8, 0x58, 0x53, 0xC4, 0xFE, 0x41, 0x4B, 0x5E, 0xB7, 0x57, 0xD8, 0x68, 0xF6, 0xDB,
    0x60, 0xAE, 0x1E, 0x5D, 0x92, 0xB6, 0x59, 0x85, 0x30, 0x27, 0xC1, 0x3D, 0x06, 0xB1, 0xFB, 0xD4, 0x19, 0xC1, 0x77, 0xEA,
    0xFF, 0xF0, 0xF9, 0xC5, 0x7F, 0xE6, 0xF3, 0x79, 0x8C, 0x9D, 0xE7, 0x58, 0xD6, 0x07, 0x9A, 0xF7, 0x23, 0xE7, 0x2F, 0xFB,
    0x5F, 0x8E, 0xFF, 0x5B, 0xB7, 0xFF, 0x35, 0x7E, 0x93, 0x31, 0xE2, 0xC8, 0xFA, 0x77, 0xC0, 0x3E, 0xCE, 0x78, 0xDB, 0x96,
    0x30, 0xEE, 0xE1, 0x30, 0x39, 0xBC, 0x2A, 0xFE, 0x4B, 0xE0, 0x09, 0xFC, 0xC6, 0x06, 0x33, 0x37, 0xC8, 0x63, 0xE9, 0x00,
    0xF1, 0xFF, 0xEB, 0x5F, 0xFD, 0x42, 0xE4, 0xE5, 0xE1, 0xBA, 0x78, 0x4F, 0x2D, 0x01, 0x76, 0x96, 0x7A, 0x7D, 0xD6, 0xEC,
    0xC2, 0xDB, 0xB4, 0xDD, 0x2A, 0x84, 0x9C, 0x3F, 0xDF, 0x2F, 0xEE, 0xE3, 0xBD, 0x7C, 0x45, 0xBC, 0x3F, 0x47, 0x72, 0x96,
    0xD4, 0x2F, 0xC9, 0xBF, 0x17, 0xEF, 0x75, 0x2E, 0x81, 0xEF, 0xCA, 0xFD, 0xA9, 0x56, 0x90, 0xEF, 0xC4, 0xEF, 0x68, 0xFD,
    0xFE, 0x7F, 0x35, 0x7E, 0x8F, 0x31, 0xE2, 0xC8, 0xFA, 0x77, 0xC0, 0x3E, 0xCE, 0x78, 0xDB, 0x96, 0x68, 0x0E, 0x10, 0x6E,
    0x73, 0xCC, 0xAE, 0x97, 0x90, 0x0F, 0x60, 0x5E, 0x9E, 0xF3, 0x32, 0xFF, 0xB1, 0xD5, 0xF0, 0x9C, 0xB5, 0x3A, 0xF0, 0x5F,
    0xDC, 0x87, 0xF7, 0xD2, 0x01, 0x3C, 0x97, 0xB6, 0x5D, 0x85, 0x10, 0x83, 0x48, 0xA7, 0x70, 0xC4, 0x9E, 0xAB, 0x7E, 0x51,
    0xB9, 0x7D, 0xB8, 0xAE, 0x73, 0xE9, 0x01, 0xE5, 0x04, 0xCA, 0xB9, 0x40, 0xF8, 0x5F, 0xB6, 0xFF, 0xBD, 0xBF, 0x6F, 0x20,
    0xD4, 0xF8, 0x2D, 0x93, 0x80, 0xE9, 0xB1, 0xDC, 0x00, 0x64, 0x16, 0x59, 0xFF, 0x0E, 0xD8, 0xC7, 0x19, 0xFF, 0xDA, 0x12,
    0xD9, 0x7F, 0xE2, 0xEB, 0xEC, 0xDA, 0xB2, 0xE0, 0x8B, 0x3F, 0xF1, 0xC4, 0xE3, 0x71, 0xCE, 0x1E, 0x3C, 0xC4, 0x04, 0xE4,
    0x05, 0xE1, 0x3F, 0xFC, 0x26, 0x67, 0xC0, 0x11, 0xBE, 0xC3, 0xD7, 0x5E, 0x61, 0xFF, 0xBD, 0xB4, 0xFD, 0x2A, 0x84, 0x5A,
    0x45, 0xF9, 0x11, 0xF0, 0x1F, 0xFF, 0x9F, 0x39, 0x00, 0x71, 0x5E, 0xBC, 0x27, 0x06, 0x28, 0xEB, 0x04, 0x89, 0xE6, 0xFE,
    0x11, 0xDE, 0xCB, 0xF6, 0x7F, 0x78, 0x98, 0x78, 0xFE, 0x0F, 0xD0, 0xCF, 0x19, 0xFF, 0xDA, 0x12, 0xF1, 0x1F, 0xDB, 0x4D,
    0x4E, 0x3D, 0xBB, 0x1E, 0x51, 0x0E, 0x9E, 0x73, 0x5E, 0x7B, 0xCB, 0xCD, 0x37, 0x05, 0xFF, 0xB1, 0xCF, 0xB2, 0xFF, 0xEC,
    0xCF, 0x8D, 0xE0, 0xA3, 0xC7, 0x7D, 0xB7, 0x0E, 0x39, 0xB8, 0x2B, 0x3C, 0xC7, 0x91, 0xEB, 0xD2, 0xF6, 0xAB, 0x90, 0xD0,
    0x29, 0x9D, 0xCF, 0x61, 0xFD, 0x0F, 0xF6, 0x9F, 0x35, 0xCB, 0xF0, 0x5C, 0x9C, 0x87, 0xE7, 0xB1, 0xCE, 0x6F, 0xED, 0x86,
    0x6E, 0x0E, 0xB0, 0x2C, 0x9A, 0x13, 0xB0, 0xFD, 0x37, 0x06, 0x42, 0xD6, 0xC7, 0x03, 0xF4, 0x73, 0xC6, 0xC1, 0xB6, 0x44,
    0x35, 0x40, 0xF8, 0xFF, 0xB2, 0xE7, 0x99, 0xC0, 0x2D, 0x7C, 0x6E, 0xCE, 0xB5, 0x8E, 0x18, 0xFE, 0x53, 0x37, 0x84, 0x8F,
    0x1F, 0xBC, 0xEF, 0xD8, 0x7F, 0x38, 0xAE, 0x7B, 0xF5, 0x10, 0xAF, 0xA3, 0x07, 0xA4, 0x17, 0xF0, 0xDF, 0xA9, 0x37, 0x6C,
    0xAA, 0x03, 0xCA, 0xFC, 0xD7, 0xFA, 0x65, 0xB8, 0x4F, 0x1E, 0xA0, 0x3C, 0xD7, 0x87, 0x8F, 0xD0, 0xCB, 0x7F, 0xE5, 0x07,
    0xC9, 0x55, 0x28, 0xFF, 0xDF, 0xDA, 0xFC, 0x7F, 0x8D, 0xEF, 0x3E, 0xC8, 0xB8, 0x30, 0x16, 0x11, 0xB2, 0x3E, 0x1E, 0xA0,
    0x9F, 0x33, 0x0E, 0xB6, 0x25, 0xF0, 0x1F, 0xBB, 0x4F, 0xED, 0x5E, 0x5D, 0xFE, 0x93, 0xDF, 0xC3, 0x6E, 0xEA, 0xF1, 0xFD,
    0xF7, 0xDE, 0xD7, 0xE5, 0x7F, 0xEC, 0xB9, 0xB7, 0x7E, 0x5D, 0xAC, 0xDB, 0xE7, 0xA8, 0x7A, 0x7D, 0xEA, 0x0A, 0x11, 0xE6,
    0x05, 0x98, 0x23, 0x50, 0x1C, 0x30, 0x48, 0x3E, 0x00, 0x1D, 0x12, 0xFC, 0xBF, 0x70, 0x4B, 0xE8, 0x24, 0xA4, 0x9C, 0x03,
    0x28, 0x73, 0x5D, 0x39, 0xC0, 0x72, 0x0D, 0x30, 0xFC, 0x97, 0xFF, 0xDF, 0x5A, 0xFE, 0xBF, 0xC6, 0xF7, 0x36, 0xC6, 0x04,
    0x59, 0x3F, 0x0F, 0xD0, 0xD7, 0x19, 0x07, 0x77, 0x25, 0xD8, 0x34, 0xE6, 0xC8, 0x91, 0x32, 0x4F, 0xE7, 0x12, 0xD6, 0xCF,
    0xE1, 0xFF, 0x57, 0xAD, 0x83, 0xE9, 0x15, 0xAE, 0x81, 0xD7, 0x8A, 0x15, 0xF8, 0x2C, 0xE6, 0xDF, 0x38, 0x8F, 0xF9, 0xBF,
    0xD9, 0x35, 0xBA, 0xF0, 0x9F, 0x5A, 0xC2, 0x4D, 0xEB, 0x8F, 0x8C, 0x5C, 0x21, 0xF3, 0xF8, 0xD4, 0x13, 0xBC, 0x88, 0xFF,
    0xB3, 0xB9, 0x02, 0xE5, 0xF4, 0xD2, 0xB6, 0xAC, 0x10, 0xF8, 0xCF, 0x1C, 0x00, 0xEB, 0x81, 0xC5, 0x77, 0x9D, 0xC3, 0x71,
    0xF1, 0x1F, 0xDE, 0x6B, 0x7F, 0x30, 0xE9, 0x80, 0xB2, 0xFD, 0x37, 0xFF, 0x8D, 0xBE, 0x91, 0xF5, 0xF3, 0x00, 0xFD, 0x9D,
    0xF1, 0xB0, 0x57, 0xE0, 0x39, 0x6B, 0xF8, 0xB5, 0x8F, 0x17, 0x6B, 0x79, 0xE1, 0x35, 0xB6, 0x19, 0xBB, 0x4C, 0xCC, 0x3E,
    0xD7, 0x6B, 0x89, 0xDB, 0x63, 0xDF, 0xEF, 0x1A, 0x9F, 0x83, 0x90, 0x73, 0xE3, 0x3D, 0x23, 0xF7, 0xD6, 0xE1, 0x35, 0x35,
    0x83, 0x3C, 0xCF, 0xE7, 0x53, 0xAB, 0xC3, 0xFD, 0xF9, 0xA8, 0xD5, 0x0B, 0x9B, 0xBF, 0x6A, 0x75, 0x08, 0xB1, 0x00, 0x73,
    0x02, 0xD4, 0x00, 0x60, 0xF3, 0x65, 0xF7, 0xE1, 0x7D, 0x79, 0x7E, 0x20, 0x6D, 0xCB, 0x0A, 0x51, 0xFE, 0xBF, 0x5C, 0xE7,
    0xCF, 0xB9, 0xEA, 0x17, 0x55, 0xEF, 0x23, 0xDE, 0xEB, 0x1C, 0xBD, 0x60, 0xFE, 0x0F, 0x0F, 0x63, 0x9D, 0xFF, 0x13, 0xB2,
    0xBE, 0x6E, 0xD8, 0xDF, 0x19, 0x07, 0x25, 0xF0, 0x90, 0xB9, 0x71, 0x72, 0xF0, 0xD4, 0xED, 0xC2, 0x77, 0xFC, 0x78, 0xD6,
    0xF4, 0x11, 0x97, 0xA3, 0x03, 0xF0, 0x03, 0xF8, 0x1B, 0x63, 0xBC, 0x3C, 0xCE, 0x75, 0x8E, 0xEF, 0xCF, 0xDA, 0x1A, 0xCE,
    0xC9, 0xE7, 0x55, 0xE5, 0xC3, 0xA8, 0x11, 0x26, 0xCF, 0x4E, 0xDD, 0x3D, 0x76, 0x1D, 0x9B, 0x0E, 0xEF, 0xF9, 0x6C, 0xF6,
    0xE9, 0xE9, 0xF2, 0x7F, 0xF5, 0x0C, 0xE7, 0xD9, 0x8F, 0x03, 0x5B, 0x4F, 0xAE, 0x0F, 0x6E, 0x63, 0xE3, 0x95, 0xB7, 0x57,
    0xDC, 0x8F, 0xC0, 0x79, 0xAE, 0x89, 0xFB, 0x79, 0x77, 0x8E, 0x4D, 0x75, 0x00, 0x7B, 0x18, 0x89, 0xF7, 0x9A, 0xEB, 0x2F,
    0xCF, 0x05, 0xEA, 0x39, 0x3E, 0x87, 0x63, 0xDC, 0x4B, 0xA4, 0xF3, 0x5B, 0x5A, 0x5F, 0xFF, 0x57, 0xE3, 0xBB, 0x1A, 0x63,
    0x84, 0xAC, 0xAF, 0x1B, 0xF6, 0x77, 0xC6, 0x7B, 0x09, 0x7E, 0x3B, 0xEB, 0x70, 0x54, 0xB7, 0xCB, 0x39, 0x7C, 0x66, 0xBF,
    0x5C, 0xB8, 0xC9, 0xBA, 0x1D, 0x04, 0xBB, 0x3C, 0xD7, 0x5E, 0x17, 0xCC, 0xDB, 0xB1, 0xAF, 0x27, 0xAF, 0x65, 0x2E, 0x1F,
    0xAE, 0x73, 0x64, 0x4E, 0x50, 0xF6, 0x1D, 0x61, 0xBE, 0x9F, 0xB5, 0x78, 0xAC, 0xC3, 0xC5, 0xBE, 0xF3, 0xFE, 0xBC, 0x16,
    0xE1, 0x7A, 0x74, 0x90, 0xF2, 0xFB, 0xF0, 0x4B, 0x47, 0xFC, 0x6C, 0x78, 0x8D, 0xBD, 0x47, 0x5E, 0xBE, 0xCF, 0x3E, 0x61,
    0xF7, 0xE1, 0x27, 0x47, 0x74, 0x05, 0x39, 0x85, 0x3D, 0x5F, 0xB9, 0xC7, 0xCC, 0xB5, 0x0D, 0xEB, 0x04, 0xCB, 0x3C, 0xD7,
    0x91, 0x9C, 0x80, 0xEA, 0x00, 0x89, 0x05, 0xF8, 0x7C, 0x9E, 0x43, 0x4F, 0x52, 0xF7, 0xDC, 0xEA, 0xFE, 0xFF, 0x35, 0xBE,
    0x63, 0xD3, 0xF1, 0x60, 0x2C, 0x52, 0x64, 0x7D, 0xDD, 0xB0, 0xCF, 0x33, 0xDE, 0x4B, 0xC4, 0x41, 0xF6, 0xC7, 0x22, 0xFE,
    0x86, 0xA7, 0xEC, 0xD7, 0xC7, 0xBE, 0x79, 0x08, 0xDC, 0x87, 0xB3, 0xF0, 0x1F, 0xDB, 0xDE, 0xBB, 0xD6, 0x8D, 0x38, 0x01,
    0xDE, 0xE3, 0xFF, 0xA3, 0x4B, 0xF0, 0x87, 0xE1, 0x39, 0x5C, 0x46, 0x87, 0x68, 0x7F, 0xBD, 0xB2, 0x60, 0xFB, 0x59, 0x8B,
    0xC7, 0x67, 0xB3, 0x4E, 0x18, 0xE1, 0xBD, 0xB8, 0x2F, 0x1F, 0x3C, 0x16, 0xCF, 0x63, 0x2F, 0x91, 0xA5, 0xFB, 0x75, 0x25,
    0xEA, 0x02, 0x56, 0xCE, 0xDC, 0x83, 0x3B, 0xE6, 0x06, 0x56, 0x2C, 0x8B, 0x79, 0x02, 0x44, 0x35, 0xC3, 0xCA, 0x17, 0xA2,
    0xCB, 0xD2, 0x36, 0xAD, 0x10, 0xF6, 0x2F, 0xD2, 0x5C, 0x00, 0x79, 0x00, 0xF6, 0xFE, 0x40, 0xC7, 0x70, 0xCE, 0x6F, 0xA5,
    0x8E, 0x18, 0xDF, 0x08, 0x1F, 0x49, 0x6B, 0x7F, 0xE7, 0x95, 0xFF, 0xC6, 0xF8, 0x21, 0xEB, 0xF3, 0x06, 0xFD, 0x9E, 0xF1,
    0x5E, 0xBE, 0x3C, 0xBE, 0x38, 0x7E, 0x37, 0x7C, 0x81, 0x7F, 0xE2, 0x3B, 0xDC, 0xD7, 0xDE, 0x39, 0x3C, 0xE6, 0x5E, 0xDE,
    0x70, 0xBB, 0xAA, 0xD6, 0x9D, 0x3A, 0x5E, 0xF6, 0xD1, 0xC1, 0x26, 0x72, 0x4E, 0xAE, 0x80, 0xD8, 0x81, 0xC7, 0x12, 0x1E,
    0xC3, 0x1F, 0x72, 0x7D, 0x7C, 0x66, 0xDC, 0x73, 0xEF, 0x80, 0x03, 0xA3, 0x16, 0x18, 0xBD, 0xC3, 0xFB, 0xB0, 0x26, 0x7F,
    0xE9, 0xD2, 0x57, 0x07, 0xDF, 0x38, 0x22, 0xF8, 0xF8, 0xE4, 0x0B, 0x63, 0x7F, 0x9E, 0xD9, 0x5C, 0x00, 0xF6, 0x1E, 0xFF,
    0x81, 0x58, 0x01, 0x5D, 0x82, 0xBE, 0x52, 0xCE, 0x60, 0xC3, 0xB2, 0x25, 0xC5, 0x3F, 0x7F, 0xF7, 0xF1, 0x90, 0xA6, 0xF7,
    0x1D, 0xC6, 0xCE, 0xA3, 0x7B, 0x58, 0x1F, 0x44, 0xFC, 0x03, 0xE7, 0x89, 0x81, 0xC4, 0x7B, 0xEC, 0xFE, 0x5C, 0xF3, 0x7E,
    0x8D, 0xF9, 0x5F, 0xE3, 0x7B, 0x35, 0x19, 0x07, 0xC6, 0x08, 0x20, 0xEB, 0xF3, 0x06, 0xFD, 0x5E, 0x87, 0xFF, 0x8C, 0x5D,
    0xB8, 0x08, 0x27, 0xE1, 0xB5, 0x7C, 0x74, 0xF8, 0xC4, 0x9A, 0x59, 0x74, 0x01, 0xEB, 0xF4, 0x39, 0x9E, 0x79, 0xD8, 0xF2,
    0x17, 0xF9, 0xBA, 0xE4, 0x0D, 0x88, 0x7F, 0xB9, 0xAF, 0x0F, 0xBE, 0x03, 0xF6, 0x9E, 0x3C, 0x20, 0x79, 0x7D, 0xFE, 0xA6,
    0x7D, 0x80, 0xC9, 0x1B, 0x20, 0xE8, 0x04, 0x04, 0x5D, 0x23, 0x21, 0xEF, 0x0E, 0x47, 0xE1, 0x2A, 0xBC, 0xC2, 0x6F, 0x47,
    0x2F, 0xE0, 0xC7, 0x13, 0x37, 0xB0, 0x66, 0x1F, 0x7E, 0x63, 0xE7, 0xC9, 0x05, 0x72, 0x8E, 0x1E, 0xE0, 0xC8, 0xBC, 0x00,
    0x7B, 0x0B, 0x70, 0x8F, 0x71, 0xBE, 0x1F, 0xFA, 0x6A, 0xD5, 0x41, 0x4B, 0xE2, 0x7B, 0xE2, 0x87, 0x10, 0x4F, 0xF0, 0xB9,
    0xEF, 0x5C, 0xBB, 0x26, 0x6F, 0xDB, 0x0A, 0x81, 0xF3, 0x65, 0x5B, 0x0F, 0xE7, 0xB1, 0xF7, 0xD2, 0x81, 0x73, 0xC5, 0x42,
    0x8D, 0xF8, 0x5F, 0xE3, 0xFB, 0x34, 0x1D, 0x07, 0xC6, 0x08, 0x20, 0xEB, 0xF3, 0x06, 0xFD, 0x5E, 0x97, 0xFF, 0xD8, 0x6D,
    0xF2, 0xF0, 0x8C, 0x69, 0xF1, 0x1D, 0x6E, 0xC1, 0x7F, 0xB8, 0xA5, 0x18, 0x00, 0xAE, 0xC1, 0x75, 0x6A, 0xE5, 0xD8, 0x3F,
    0x03, 0x9E, 0x6B, 0xED, 0x1C, 0x7C, 0x47, 0xD0, 0x1D, 0x70, 0x84, 0x23, 0xDC, 0xC7, 0xE6, 0x23, 0x70, 0xFD, 0xE1, 0x3B,
    0xEF, 0x0D, 0x91, 0x5F, 0xC0, 0x35, 0x9C, 0xF3, 0x3E, 0xF0, 0x1F, 0xDD, 0xB1, 0xF2, 0xF0, 0xBD, 0xC3, 0x8F, 0x47, 0x34,
    0xDF, 0x0F, 0xD7, 0x39, 0x12, 0x2F, 0x60, 0xE3, 0xC5, 0x77, 0x71, 0x5E, 0x82, 0xCE, 0x62, 0x1E, 0x9E, 0xEF, 0xCF, 0xFE,
    0x41, 0x1B, 0x0F, 0xDA, 0x23, 0xD6, 0x11, 0xB3, 0x77, 0x00, 0xC7, 0xB4, 0x7D, 0x2B, 0x64, 0x2E, 0xCE, 0xEF, 0x8A, 0xF7,
    0x43, 0xE5, 0xFF, 0x84, 0x61, 0x12, 0xD2, 0xFF, 0x81, 0xAC, 0xDF, 0x1B, 0xF4, 0x7F, 0x5D, 0xFE, 0xE3, 0xD7, 0x12, 0x87,
    0x63, 0x33, 0xB1, 0xB7, 0xE8, 0x83, 0x88, 0xCD, 0x3B, 0xBE, 0x3F, 0x73, 0xF0, 0x3C, 0x87, 0x2D, 0x66, 0xAF, 0x2E, 0x78,
    0x44, 0x2C, 0xA0, 0xB8, 0x9D, 0x98, 0x80, 0xFD, 0xF4, 0xB8, 0x06, 0x5B, 0x8B, 0x0E, 0xE0, 0xFD, 0xE0, 0x37, 0x9C, 0x17,
    0xD7, 0x65, 0xEF, 0xF5, 0x98, 0xEB, 0xB0, 0xAB, 0xF0, 0x54, 0xFB, 0x86, 0xC0, 0x2F, 0x3E, 0x0F, 0xBE, 0x13, 0xC7, 0xC3,
    0x79, 0xE6, 0xFB, 0xB1, 0xF7, 0xE7, 0xAF, 0x3B, 0x2A, 0x3E, 0x1F, 0x79, 0xCF, 0x71, 0x6F, 0x0C, 0xDD, 0x04, 0xE7, 0xD9,
    0x43, 0x4C, 0x7E, 0x0A, 0xDF, 0x91, 0x35, 0x44, 0xE4, 0x21, 0x74, 0x0F, 0x20, 0xEE, 0x3B, 0xF8, 0x50, 0xE7, 0xBB, 0xB1,
    0x0F, 0xC8, 0xA6, 0x63, 0x4F, 0xCD, 0xDB, 0xB7, 0x42, 0xF8, 0x5E, 0xE2, 0x3E, 0xFA, 0xA5, 0x0E, 0xF7, 0xFB, 0xE2, 0x7F,
    0x8D, 0xEF, 0xD0, 0xA4, 0xFF, 0xC7, 0x01, 0x53, 0x53, 0x93, 0xA2, 0x00, 0x8A, 0xBC, 0xEF, 0xFB, 0xEC, 0xFF, 0x6C, 0x7C,
    0x8A, 0xFF, 0xF8, 0xE4, 0x70, 0x07, 0x9B, 0x0E, 0x4F, 0xB0, 0xCB, 0xF8, 0xCC, 0xE5, 0xFC, 0x1F, 0x8F, 0xB1, 0xAF, 0xD8,
    0x7A, 0x78, 0xAE, 0xFB, 0xE9, 0xA0, 0x07, 0xC8, 0xB5, 0xE9, 0x1E, 0x7A, 0x8A, 0x09, 0x38, 0x52, 0xD3, 0x8F, 0x10, 0x3F,
    0x33, 0xBF, 0x8E, 0x5E, 0xC1, 0xC6, 0x33, 0xB7, 0xC0, 0x7E, 0x9F, 0xBC, 0xC7, 0x15, 0x17, 0x1F, 0x13, 0x7C, 0x25, 0x76,
    0x40, 0x6F, 0x90, 0x63, 0xE4, 0xFD, 0xF4, 0x99, 0xF8, 0x21, 0x7C, 0x2E, 0xFB, 0x7F, 0xC0, 0x7B, 0x8E, 0x7C, 0x4F, 0x04,
    0x9D, 0x83, 0xBE, 0x40, 0xD0, 0x55, 0x70, 0x9D, 0xFD, 0xBE, 0x38, 0xB2, 0x7F, 0x10, 0xEF, 0x4F, 0xFE, 0x91, 0x6B, 0xC9,
    0x17, 0x90, 0x37, 0x6C, 0xBA, 0x66, 0xA8, 0x2E, 0xE7, 0x87, 0xCA, 0xFF, 0x09, 0x84, 0xF9, 0xDF, 0x7C, 0x1C, 0x64, 0xE3,
    0x13, 0x61, 0x5C, 0x6B, 0x9E, 0x1F, 0xBF, 0x59, 0x9C, 0xD6, 0xFD, 0x7A, 0xD0, 0x0B, 0xCA, 0xAB, 0xEB, 0x1E, 0x9E, 0x5C,
    0x87, 0x9E, 0x40, 0xC8, 0x17, 0x70, 0x5D, 0xDC, 0x3F, 0xB7, 0x13, 0xA3, 0x63, 0xBB, 0xC9, 0xE7, 0x71, 0x2D, 0x7B, 0x7E,
    0x71, 0x4E, 0x3C, 0x0F, 0xBF, 0xB1, 0xCD, 0xEC, 0x11, 0x00, 0xDF, 0xD1, 0x01, 0xE8, 0x08, 0x72, 0x0F, 0xBC, 0x8E, 0x9C,
    0x1D, 0x36, 0x1E, 0x1B, 0xCD, 0x11, 0xC1, 0xD7, 0x90, 0xFE, 0xC1, 0xC6, 0xC3, 0x7D, 0x8E, 0xB2, 0xFD, 0x08, 0xF7, 0x0E,
    0x61, 0xEF, 0x70, 0x84, 0xBD, 0xC2, 0xB0, 0xFB, 0x08, 0x3A, 0x84, 0xDA, 0x7E, 0xF2, 0x08, 0xDA, 0xE3, 0xB3, 0x1C, 0xCF,
    0xA7, 0x6D, 0x5C, 0x21, 0x59, 0x5B, 0x36, 0xE2, 0x7F, 0x8D, 0xCF, 0xED, 0xB7, 0xDF, 0xC7, 0x09, 0x13, 0xC5, 0x7F, 0x90,
    0x8D, 0x81, 0x3E, 0xC6, 0x42, 0x36, 0x3E, 0x11, 0xB8, 0x80, 0x8F, 0xAD, 0xFA, 0x1F, 0xE2, 0x6B, 0x62, 0x7A, 0x38, 0x4F,
    0x2C, 0xCE, 0xFE, 0x3B, 0xCC, 0xAD, 0x91, 0x57, 0x43, 0x37, 0x60, 0x57, 0xB1, 0xA9, 0x70, 0x17, 0x5B, 0x0E, 0xAF, 0x24,
    0xD8, 0x79, 0x6C, 0x3F, 0x39, 0x3D, 0xD5, 0xE1, 0xC0, 0x41, 0xDE, 0x0F, 0x7D, 0x00, 0xF7, 0x89, 0x31, 0x98, 0x1F, 0xE0,
    0xBD, 0x59, 0xFF, 0xC7, 0xE7, 0xF0, 0xB9, 0xE4, 0x00, 0xD9, 0xFB, 0x0B, 0xDD, 0x20, 0xBF, 0x1E, 0x81, 0xF3, 0xD8, 0x76,
    0x84, 0x3D, 0x7D, 0x3F, 0x72, 0xE5, 0xC6, 0xE0, 0x3A, 0xF7, 0x12, 0x78, 0xF4, 0xBA, 0xCD, 0x21, 0xEC, 0x11, 0xC6, 0x77,
    0xE2, 0x77, 0x90, 0xB7, 0xE7, 0x33, 0x99, 0x9F, 0x57, 0xDD, 0x52, 0x39, 0x87, 0x47, 0xAE, 0x41, 0xF1, 0x7C, 0xDA, 0xC6,
    0x15, 0x92, 0xB5, 0xE7, 0xD0, 0xF8, 0x3F, 0xA1, 0x98, 0x98, 0xF8, 0x5F, 0xC8, 0xC6, 0x41, 0x1F, 0x63, 0x62, 0xAE, 0x71,
    0x49, 0xAE, 0x0D, 0xCE, 0xC1, 0x67, 0xEA, 0x73, 0xB0, 0xC5, 0x3C, 0x07, 0xA7, 0xC5, 0x79, 0xD6, 0xD7, 0x91, 0x67, 0x23,
    0xD6, 0xE7, 0xBE, 0x3D, 0xEC, 0xD7, 0x2B, 0xDF, 0x00, 0x4E, 0xE1, 0x2F, 0x70, 0xC4, 0xBF, 0x27, 0xCF, 0xA7, 0xFB, 0x7D,
    0x4A, 0x07, 0x10, 0x53, 0xF0, 0x37, 0xF6, 0xFA, 0xE1, 0xFD, 0xE0, 0xBA, 0x8E, 0x7C, 0x46, 0x79, 0xDF, 0x4F, 0x09, 0x8F,
    0xD1, 0x03, 0xDC, 0x33, 0x00, 0xBB, 0x4E, 0xFC, 0xCE, 0x11, 0x3D, 0x80, 0x4F, 0x7F, 0xFF, 0x45, 0x9B, 0x8A, 0xC7, 0xAE,
    0x7E, 0x5B, 0xEC, 0x0B, 0xCA, 0xFD, 0x04, 0xA8, 0x19, 0xE4, 0xFB, 0x61, 0xEB, 0x99, 0xA7, 0x63, 0xEE, 0x90, 0x38, 0x43,
    0x76, 0x1E, 0x81, 0xF3, 0xE5, 0xDC, 0x7D, 0x39, 0x96, 0x47, 0xD2, 0x36, 0xAE, 0x90, 0x8C, 0xF7, 0xB5, 0xF9, 0x5F, 0xE3,
    0xB3, 0xEA, 0xF4, 0xF3, 0x38, 0xC3, 0xFC, 0x6F, 0x3E, 0x2E, 0xAA, 0xC6, 0x24, 0x9C, 0x25, 0x6E, 0x0E, 0x1B, 0x3B, 0x5B,
    0x8B, 0xC3, 0x39, 0xF6, 0x13, 0x2E, 0xE1, 0xDB, 0xB3, 0xDF, 0x26, 0xF6, 0x16, 0xFE, 0xE1, 0xE3, 0xB3, 0x1F, 0x2F, 0x7F,
    0x13, 0xBF, 0xB1, 0xA5, 0x9A, 0xCF, 0x87, 0xE7, 0xBC, 0x27, 0xBA, 0x83, 0xBA, 0x20, 0xF4, 0x0A, 0x35, 0x04, 0xE8, 0x0E,
    0x5E, 0x4F, 0x0C, 0x8E, 0x60, 0xBB, 0x79, 0xDF, 0x19, 0x5E, 0xFC, 0x7A, 0x86, 0xFB, 0x7C, 0xA7, 0x0E, 0xEF, 0xA9, 0x3D,
    0x82, 0xF3, 0xDC, 0x07, 0x98, 0xD7, 0xA0, 0x6B, 0x94, 0xBB, 0xC3, 0xBE, 0x73, 0x1F, 0x10, 0x7C, 0x7B, 0x7C, 0x0F, 0x24,
    0x72, 0x79, 0xEB, 0x8F, 0x9C, 0xD9, 0xAF, 0x7B, 0xD5, 0xDA, 0xF0, 0x21, 0x64, 0xE7, 0xC9, 0x31, 0xF6, 0x72, 0xBE, 0x6A,
    0xBE, 0xAE, 0x1C, 0xCB, 0xA7, 0xED, 0x5C, 0x21, 0x19, 0xF7, 0xCD, 0xFF, 0x76, 0x30, 0x71, 0xFC, 0x07, 0xD9, 0x78, 0xA8,
    0x39, 0x36, 0xAA, 0xC6, 0x24, 0xFE, 0x6F, 0xD4, 0xC8, 0x75, 0xEC, 0x72, 0xD4, 0xF6, 0x76, 0xFC, 0x72, 0xB8, 0x4D, 0xAC,
    0x0D, 0xB7, 0xD8, 0x9F, 0x1B, 0xDE, 0x61, 0x5B, 0x95, 0x93, 0x83, 0xE7, 0xE4, 0xFC, 0xB4, 0x4F, 0x86, 0xE6, 0xF0, 0x38,
    0xC2, 0x37, 0x74, 0x01, 0x79, 0x00, 0xE6, 0xDB, 0xE0, 0x2D, 0xFA, 0x02, 0x9F, 0x41, 0xB6, 0x1A, 0x5F, 0x3D, 0xE2, 0xF3,
    0xCE, 0xF9, 0xED, 0xE7, 0xBC, 0x21, 0xEE, 0xF9, 0xC3, 0x9E, 0xDE, 0xE4, 0xFE, 0x89, 0xED, 0xA3, 0xC6, 0xA8, 0x63, 0xE3,
    0xE3, 0xB5, 0xA5, 0x6B, 0xC9, 0xE5, 0x71, 0x9D, 0x72, 0x79, 0x70, 0x9E, 0x5C, 0x01, 0xFB, 0x00, 0x50, 0xF7, 0xCB, 0x77,
    0x2A, 0xC7, 0xF4, 0xFC, 0xB6, 0xB9, 0xEC, 0x7C, 0x96, 0xBB, 0x4B, 0xDB, 0xB9, 0x42, 0x06, 0xE2, 0x7F, 0x8D, 0xF7, 0xCF,
    0xFA, 0x77, 0x12, 0x30, 0x91, 0xFC, 0x07, 0xD9, 0xB8, 0xA8, 0x31, 0x46, 0x7A, 0xC7, 0x63, 0xB7, 0xDE, 0xA7, 0xC3, 0x63,
    0x7C, 0x65, 0x6C, 0x27, 0x36, 0x94, 0x1C, 0x1C, 0x7A, 0x00, 0x5F, 0x40, 0x79, 0x3D, 0xEC, 0x39, 0x76, 0x93, 0xF8, 0x80,
    0x73, 0xFE, 0xAE, 0x98, 0x01, 0xBE, 0xC3, 0x39, 0x7C, 0x81, 0xA8, 0x0F, 0xE8, 0xD8, 0x6E, 0xE2, 0x72, 0xEE, 0xB7, 0x83,
    0x5F, 0xCE, 0xBD, 0x7C, 0xB1, 0xD9, 0x08, 0xF7, 0xFD, 0x51, 0x4E, 0x1E, 0xC1, 0xCF, 0xE8, 0x5D, 0x3F, 0x84, 0xAE, 0xE1,
    0x3A, 0xDD, 0xAF, 0x0F, 0x5B, 0x1F, 0xF7, 0x07, 0xEA, 0x7C, 0x16, 0xB9, 0x45, 0xEA, 0xFD, 0xE0, 0x3C, 0xF1, 0xBD, 0xEA,
    0x6F, 0xE7, 0xAA, 0xCB, 0x29, 0xCF, 0xCF, 0xD7, 0xE5, 0xFE, 0xB0, 0x74, 0xC0, 0x9C, 0xA8, 0xF1, 0xBE, 0x59, 0xDF, 0x4E,
    0x0A, 0xCC, 0xFF, 0x1A, 0x32, 0x07, 0xAA, 0xF8, 0x8F, 0x8F, 0x0E, 0x4F, 0xE0, 0x0C, 0xFC, 0x21, 0x56, 0x57, 0xAD, 0x3D,
    0x42, 0xFE, 0x0F, 0xAE, 0xE3, 0x23, 0x10, 0x8B, 0x6B, 0x6E, 0x1E, 0xA1, 0xC6, 0x1F, 0x9F, 0x81, 0x1A, 0x5B, 0x38, 0xCF,
    0x7D, 0x3B, 0xB9, 0xBF, 0x16, 0x7C, 0x17, 0xE7, 0x1F, 0xBD, 0x63, 0x4B, 0xF1, 0xD4, 0x83, 0x57, 0xC6, 0xFD, 0x3D, 0xD1,
    0x09, 0xC4, 0xEF, 0xD8, 0xF9, 0xDE, 0xF5, 0x80, 0xAC, 0x15, 0xE2, 0xF5, 0xBC, 0x06, 0x3F, 0x01, 0x41, 0x0F, 0xE0, 0x3B,
    0x10, 0x9F, 0xB0, 0xEE, 0x9E, 0xFC, 0x21, 0x7B, 0x81, 0xA8, 0xFE, 0x56, 0x9C, 0xEF, 0xAD, 0xC1, 0xAD, 0x5B, 0x8F, 0x57,
    0x47, 0xD2, 0xB6, 0xAE, 0x90, 0xA1, 0xF1, 0xDF, 0x98, 0x6C, 0x64, 0xE3, 0x23, 0x19, 0x2B, 0x55, 0xFC, 0x87, 0x1F, 0x70,
    0x05, 0x7B, 0x89, 0xBF, 0x2C, 0x3E, 0x49, 0xD0, 0x07, 0xF8, 0x04, 0xE4, 0xFF, 0x98, 0xBF, 0x63, 0xAF, 0x0B, 0x6C, 0x2F,
    0x79, 0x35, 0x7C, 0x01, 0xFC, 0x7F, 0x6C, 0x38, 0xFE, 0x39, 0xB1, 0x39, 0xF7, 0xF0, 0xC6, 0xE6, 0xCB, 0x6E, 0xA3, 0x0F,
    0xB8, 0xE7, 0x1F, 0x5C, 0xD6, 0x9E, 0xFF, 0x12, 0x74, 0x09, 0xB1, 0x3E, 0xAF, 0xFD, 0xDA, 0x8D, 0x67, 0xC7, 0x91, 0xFB,
    0x7B, 0xE1, 0xDB, 0x93, 0x77, 0x60, 0xCF, 0x2D, 0xE6, 0xE9, 0x59, 0xDF, 0x8B, 0x8F, 0x32, 0x97, 0x9D, 0xDF, 0x55, 0x3D,
    0xDE, 0x20, 0xDC, 0x6F, 0x5B, 0x07, 0x54, 0xA2, 0xC6, 0x7B, 0xED, 0xAA, 0x4F, 0x8D, 0x09, 0x43, 0x36, 0x46, 0x76, 0x31,
    0x5E, 0xAA, 0xC6, 0xA4, 0xB8, 0x22, 0x3F, 0x40, 0xBE, 0x00, 0xBA, 0x40, 0x79, 0x33, 0xF8, 0x06, 0xEF, 0xF0, 0xB5, 0x37,
    0x5F, 0x78, 0x49, 0xC4, 0x07, 0xE4, 0xD8, 0x99, 0x9B, 0x3F, 0xEA, 0xD0, 0xE3, 0x62, 0x0D, 0x3F, 0xF5, 0xFE, 0xC4, 0x09,
    0xE5, 0x9C, 0xA1, 0xF2, 0x85, 0x4F, 0x3F, 0x72, 0x5F, 0x01, 0xF7, 0x83, 0x8B, 0x2F, 0x3C, 0x5B, 0x3C, 0xFE, 0x99, 0x9B,
    0xC2, 0xBF, 0x47, 0xF0, 0x07, 0xD0, 0x0F, 0xF8, 0x11, 0xF8, 0xF6, 0xCB, 0xD7, 0x1F, 0x1D, 0xEB, 0x6C, 0xB1, 0xF3, 0x55,
    0xEB, 0xEB, 0xCA, 0xF3, 0x75, 0xBD, 0x7C, 0x1F, 0xD4, 0xD6, 0x0F, 0x5B, 0x07, 0x54, 0xA2, 0xC6, 0xFB, 0x54, 0xF5, 0xA5,
    0x31, 0xA1, 0xC8, 0xC6, 0xC9, 0x2E, 0xC6, 0x4C, 0xD5, 0xB8, 0x96, 0x0F, 0x20, 0x81, 0x53, 0x65, 0x3D, 0x80, 0x48, 0x07,
    0x48, 0x98, 0xC7, 0x63, 0x0E, 0x9F, 0xF8, 0x9B, 0xBA, 0x1C, 0x78, 0x8B, 0x8F, 0x80, 0x4F, 0x40, 0x8C, 0xAE, 0xDC, 0x01,
    0x79, 0x3C, 0xE2, 0x02, 0x72, 0xFD, 0xCC, 0xE3, 0x23, 0xB7, 0x6D, 0x3D, 0x2F, 0xF2, 0xFA, 0xE4, 0xF4, 0x88, 0xFF, 0xD1,
    0x0F, 0x70, 0x9F, 0xDC, 0x03, 0x7B, 0xEA, 0xB0, 0x7F, 0x36, 0xEB, 0x6C, 0xF1, 0x3B, 0xA4, 0x77, 0x7A, 0xED, 0xFD, 0x7C,
    0xF2, 0xFE, 0x45, 0xFC, 0xCD, 0xDA, 0xBB, 0x42, 0x76, 0xC9, 0xFF, 0x1A, 0xAF, 0x9F, 0xAB, 0x2F, 0x8D, 0x09, 0x46, 0x36,
    0x56, 0xE6, 0x18, 0x37, 0xBB, 0x1A, 0xDB, 0xF2, 0x95, 0x7B, 0x75, 0x81, 0xF4, 0x41, 0xD9, 0x27, 0x90, 0x1E, 0x80, 0x9B,
    0xCC, 0xF7, 0xC1, 0x55, 0xE6, 0x0F, 0xA8, 0xAB, 0x83, 0xBF, 0xC4, 0x08, 0xD8, 0x6E, 0xEA, 0x7E, 0x88, 0xD5, 0x43, 0x1F,
    0x6C, 0x3E, 0x25, 0xF2, 0xF6, 0xD4, 0xEC, 0xB2, 0x66, 0x08, 0xFD, 0xC0, 0xBA, 0x7A, 0xFC, 0x07, 0x6C, 0x3D, 0xFC, 0xE7,
    0x7D, 0xCA, 0x31, 0x7D, 0x39, 0x87, 0xDF, 0x64, 0xBD, 0xCD, 0x30, 0x24, 0x6D, 0xEF, 0x0A, 0xE9, 0xBE, 0xB6, 0x69, 0x3F,
    0x1A, 0x46, 0x2F, 0xB2, 0x31, 0x53, 0x31, 0x7E, 0xB2, 0xB1, 0x2D, 0x91, 0x2E, 0x98, 0xCB, 0x37, 0xC0, 0x06, 0x4B, 0x1F,
    0x94, 0xB9, 0xCA, 0x3C, 0x00, 0xFA, 0x20, 0x6A, 0x7C, 0xF6, 0x78, 0x59, 0xAC, 0x97, 0xD7, 0xBE, 0xD9, 0xD4, 0xDF, 0x91,
    0x2B, 0x20, 0x76, 0xE0, 0x39, 0xF6, 0xCE, 0xE1, 0xEF, 0xCC, 0xD5, 0xF7, 0xC6, 0xF5, 0xE5, 0x79, 0xBB, 0x72, 0x0E, 0x5F,
    0x7B, 0xEA, 0x2E, 0x04, 0xEF, 0xCB, 0x92, 0xB6, 0x77, 0x85, 0xC4, 0xEB, 0x9A, 0xF4, 0x9F, 0x61, 0x54, 0x21, 0x1B, 0x37,
    0x15, 0x63, 0x28, 0x1B, 0xD7, 0x73, 0x49, 0x95, 0x2E, 0x50, 0xBE, 0x40, 0xF9, 0xB7, 0xDE, 0x38, 0x41, 0xBE, 0x41, 0xEC,
    0xE9, 0xD1, 0xB1, 0xED, 0xEC, 0xD5, 0x87, 0x4F, 0xC0, 0x3E, 0x1E, 0xF8, 0x07, 0xCA, 0xE1, 0xF7, 0xE6, 0xEF, 0xAB, 0xFC,
    0xFB, 0xC5, 0xC0, 0xF9, 0x5E, 0x49, 0xDB, 0x7C, 0x57, 0x5C, 0xCE, 0xAE, 0xAB, 0x7A, 0x8D, 0x61, 0xF4, 0x22, 0x1B, 0x3B,
    0x3D, 0xE3, 0x28, 0x1B, 0xD3, 0x75, 0xA4, 0x4A, 0x17, 0xCC, 0xE5, 0x1B, 0xF4, 0xE6, 0x0D, 0xD0, 0x07, 0xE5, 0x98, 0xBE,
    0xB7, 0x3E, 0xA7, 0xF7, 0x3D, 0xB3, 0xEF, 0xB2, 0xD0, 0x92, 0xB6, 0xF9, 0xA0, 0x62, 0x18, 0x19, 0xB2, 0x31, 0x54, 0x92,
    0x6C, 0x3C, 0x37, 0x91, 0xB9, 0x7C, 0x03, 0xCD, 0x29, 0xF6, 0xEA, 0x83, 0xB9, 0x7C, 0xFB, 0x85, 0x8C, 0xE9, 0x07, 0x91,
    0xAC, 0xCD, 0x07, 0x12, 0xC3, 0xA8, 0x83, 0x6C, 0x1C, 0xED, 0x36, 0x3C, 0xFE, 0x4B, 0xE6, 0xCA, 0x19, 0x48, 0x17, 0x94,
    0xA5, 0xCA, 0xCE, 0x8F, 0x1A, 0xEF, 0xCB, 0x92, 0xB5, 0x7B, 0x23, 0x31, 0x8C, 0xBA, 0xC8, 0xC6, 0xD2, 0x3C, 0xE9, 0x80,
    0x5E, 0xA9, 0x8A, 0x13, 0x46, 0xC5, 0xB7, 0xEF, 0x57, 0xB2, 0x76, 0xEF, 0x5B, 0x0C, 0xA3, 0x1F, 0x64, 0xE3, 0x69, 0x81,
    0xF5, 0x40, 0x59, 0xB2, 0xEB, 0x47, 0x55, 0xB2, 0x36, 0xAF, 0x2D, 0x86, 0xD1, 0x04, 0xD9, 0xB8, 0x5A, 0x40, 0x1D, 0x30,
    0x29, 0x92, 0xB5, 0x79, 0x2A, 0x86, 0xD1, 0x14, 0xD9, 0xD8, 0xF2, 0x78, 0x9B, 0x1F, 0x64, 0x6D, 0xEE, 0xBE, 0x30, 0x86,
    0x85, 0x6C, 0x8C, 0x79, 0xEC, 0x0D, 0x17, 0x59, 0x3B, 0xBB, 0xFD, 0x8D, 0x61, 0x23, 0x1B, 0x6B, 0x1E, 0x83, 0xC3, 0x41,
    0xD6, 0xBE, 0x6E, 0x77, 0x63, 0xBE, 0x90, 0x8D, 0x39, 0x8F, 0xC5, 0x76, 0x91, 0xB5, 0xAB, 0xDB, 0xDA, 0x98, 0x6F, 0x64,
    0xE3, 0xCF, 0x63, 0xB3, 0x1D, 0x64, 0x6D, 0xE9, 0xF6, 0x35, 0x16, 0x0A, 0xD9, 0x38, 0xF4, 0x18, 0x1D, 0x0C, 0x59, 0x1B,
    0xBA, 0x5D, 0x8D, 0x85, 0x46, 0x36, 0x1E, 0x33, 0x31, 0x76, 0x46, 0xD6, 0x66, 0x6E, 0x4B, 0x63, 0xB1, 0x21, 0x1B, 0x9B,
    0x1E, 0xB7, 0xF5, 0x90, 0xB5, 0x95, 0xDB, 0xD0, 0x58, 0xAC, 0xC8, 0xC6, 0xA8, 0xC7, 0xEF, 0xDC, 0xC8, 0xDA, 0xC7, 0x6D,
    0x67, 0x8C, 0x02, 0xB2, 0xB1, 0x9A, 0xC9, 0x24, 0x21, 0x6B, 0x8B, 0x3A, 0x62, 0x18, 0x8B, 0x11, 0xD9, 0xB8, 0x9D, 0xE4,
    0x31, 0x9D, 0xFD, 0xFE, 0x3A, 0x62, 0x18, 0x8B, 0x1D, 0xD9, 0x18, 0xAE, 0x2B, 0xE3, 0x80, 0xEC, 0x37, 0xF6, 0x23, 0x86,
    0x31, 0x4A, 0xC8, 0xC6, 0x73, 0x3F, 0x32, 0x6A, 0xC8, 0x7E, 0x4F, 0xBF, 0x62, 0x18, 0xA3, 0x88, 0x6C, 0x5C, 0x37, 0x91,
    0xC5, 0x8A, 0xEC, 0x7B, 0x37, 0x15, 0xC3, 0x18, 0x65, 0x64, 0xE3, 0x7B, 0x50, 0x59, 0x68, 0x64, 0xDF, 0x6F, 0x10, 0x31,
    0x8C, 0x71, 0x41, 0x36, 0xD6, 0xDB, 0x90, 0xF9, 0x42, 0xF6, 0x3D, 0x06, 0x15, 0xC3, 0x18, 0x47, 0x64, 0xE3, 0xBE, 0x4D,
    0x59, 0xE8, 0xCF, 0x6F, 0x22, 0x86, 0x31, 0xEE, 0xC8, 0x38, 0x30, 0x69, 0x62, 0x18, 0x93, 0x8A, 0x8C, 0x1B, 0xE3, 0x2C,
    0x86, 0x61, 0xCC, 0x20, 0xE3, 0xCA, 0xB8, 0x88, 0x61, 0x18, 0xBB, 0x46, 0xC6, 0xA1, 0x51, 0x14, 0xC3, 0x30, 0x9A, 0x21,
    0xE3, 0xD6, 0x62, 0x16, 0xC3, 0x30, 0xDA, 0x43, 0xC6, 0xB7, 0xC5, 0x20, 0x86, 0x61, 0x0C, 0x1F, 0x19, 0x0F, 0xE7, 0x5B,
    0x0C, 0xC3, 0x58, 0x38, 0x64, 0xFC, 0x1C, 0x86, 0x18, 0x86, 0xB1, 0xF8, 0x60, 0xBE, 0x1A, 0x86, 0x61, 0x18, 0x86, 0x61,
    0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86,
    0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18,
    0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61,
    0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86,
    0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18,
    0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61,
    0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86,
    0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18,
    0x8D, 0x30, 0x3D, 0x2B, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x46, 0x1B, 0x98, 0x9E,
    0x43, 0x0C, 0xC3, 0x18, 0x7F, 0xCC, 0xC5, 0x7F, 0xEB, 0x04, 0xC3, 0x18, 0x7F, 0x64, 0x9C, 0x37, 0xFF, 0x0D, 0xC3, 0x30,
    0x0C, 0xC3, 0x58, 0xEC, 0xF8, 0x7F, 0xF6, 0x62, 0x79, 0xCA
    };
