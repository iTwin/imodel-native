/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/ConnectWsgProjectShare/ProjectShareBufferGen.cpp $
|
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyCApiGen tool on May 17, 2017.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
WString ProjectShare_stringToWString(const Utf8String &str)
    {
    Utf16Buffer _16buf;
    BeStringUtilities::Utf8ToUtf16(_16buf, str.c_str());
    WString outStr;
    BeStringUtilities::Utf16ToWChar(outStr, _16buf.data());
    return outStr;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_DataBufferFree
(
LPCWSCC api,
HCWSCCBUFFER buf
)
    {
    for (uint64_t index = 0; index < buf->lItems.size(); index++)
        {
        if (buf->lItems[index] != nullptr)
            {
            switch(buf->lClassType)
                {
                case BUFF_TYPE_FILE:
                    {
                    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
                    delete fileBuf;
                    }
                    break;
                case BUFF_TYPE_FOLDER:
                    {
                    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
                    delete folderBuf;
                    }
                    break;
                case BUFF_TYPE_PUBLISHFILE:
                    {
                    LPCWSCCPUBLISHFILEBUFFER publishfileBuf = (LPCWSCCPUBLISHFILEBUFFER) buf->lItems[index];
                    delete publishfileBuf;
                    }
                    break;
                case BUFF_TYPE_FOLDERHASCONTENT:
                    {
                    LPCWSCCFOLDERHASCONTENTBUFFER folderhascontentBuf = (LPCWSCCFOLDERHASCONTENTBUFFER) buf->lItems[index];
                    delete folderhascontentBuf;
                    }
                    break;
                default:
                    continue;
                }
            }
        }
    free(buf);
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The ConnectWebServicesClientC_DataBufferFree function successfully completed.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_FILE:
            {
            return File_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_FOLDER:
            {
            return Folder_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_PUBLISHFILE:
            {
            return PublishFile_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_FILE:
            {
            return File_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_FOLDER:
            {
            return Folder_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_PUBLISHFILE:
            {
            return PublishFile_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_FILE:
            {
            return File_GetDatetimeProperty(api, buf, bufferProperty, index, strLength, dateTime);
            }
        case BUFF_TYPE_FOLDER:
            {
            return Folder_GetDatetimeProperty(api, buf, bufferProperty, index, strLength, dateTime);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_FILE:
            {
            return File_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        case BUFF_TYPE_FOLDER:
            {
            return Folder_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectShare_GetLongProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int64_t* pLong
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_FILE:
            {
            return File_GetLongProperty(api, buf, bufferProperty, index, pLong);
            }
        case BUFF_TYPE_FOLDER:
            {
            return Folder_GetLongProperty(api, buf, bufferProperty, index, pLong);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus File_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
    if (FILE_BUFF_OBJECTID == bufferProperty)
       {
       BeStringUtilities::Wcsncpy(str, strLength, fileBuf->ObjectId.c_str());
       return SUCCESS;
       }

    if (FILE_BUFF_ALIAS == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Alias", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Alias", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Alias property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->Alias.c_str());
        }
    else if (FILE_BUFF_CONTAINERNAME == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ContainerName", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ContainerName", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContainerName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->ContainerName.c_str());
        }
    else if (FILE_BUFF_ACCESSURL == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("AccessUrl", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("AccessUrl", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AccessUrl property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->AccessUrl.c_str());
        }
    else if (FILE_BUFF_CONTENTTYPE == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ContentType", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ContentType", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContentType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->ContentType.c_str());
        }
    else if (FILE_BUFF_MODIFIEDBY == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ModifiedBy", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ModifiedBy", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->ModifiedBy.c_str());
        }
    else if (FILE_BUFF_CREATEDBY == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("CreatedBy", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("CreatedBy", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->CreatedBy.c_str());
        }
    else if (FILE_BUFF_PATH == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Path", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Path", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Path property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->Path.c_str());
        }
    else if (FILE_BUFF_DESCRIPTION == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Description", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Description", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Description property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->Description.c_str());
        }
    else if (FILE_BUFF_FILENAME == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("FileName", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("FileName", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("FileName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, fileBuf->FileName.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Folder_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
    if (FOLDER_BUFF_OBJECTID == bufferProperty)
       {
       BeStringUtilities::Wcsncpy(str, strLength, folderBuf->ObjectId.c_str());
       return SUCCESS;
       }

    if (FOLDER_BUFF_FOLDERNAME == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("FolderName", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("FolderName", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("FolderName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->FolderName.c_str());
        }
    else if (FOLDER_BUFF_CONTENTTYPE == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("ContentType", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("ContentType", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContentType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->ContentType.c_str());
        }
    else if (FOLDER_BUFF_CREATEDBY == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("CreatedBy", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("CreatedBy", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->CreatedBy.c_str());
        }
    else if (FOLDER_BUFF_PATH == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("Path", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("Path", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Path property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->Path.c_str());
        }
    else if (FOLDER_BUFF_MODIFIEDBY == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("ModifiedBy", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("ModifiedBy", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->ModifiedBy.c_str());
        }
    else if (FOLDER_BUFF_DESCRIPTION == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("Description", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("Description", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Description property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, folderBuf->Description.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus PublishFile_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPUBLISHFILEBUFFER publishfileBuf = (LPCWSCCPUBLISHFILEBUFFER) buf->lItems[index];
    if (PUBLISHFILE_BUFF_OBJECTID == bufferProperty)
       {
       BeStringUtilities::Wcsncpy(str, strLength, publishfileBuf->ObjectId.c_str());
       return SUCCESS;
       }

    if (PUBLISHFILE_BUFF_INPUTFILES == bufferProperty)
        {
        if (publishfileBuf->IsSet.find(WString("InputFiles", true)) == publishfileBuf->IsSet.end() || publishfileBuf->IsSet[WString("InputFiles", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("InputFiles property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, publishfileBuf->InputFiles.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus File_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
    if (FILE_BUFF_ALIAS == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Alias", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Alias", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Alias property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->Alias.length();
        }
    else if (FILE_BUFF_CONTAINERNAME == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ContainerName", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ContainerName", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContainerName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->ContainerName.length();
        }
    else if (FILE_BUFF_ACCESSURL == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("AccessUrl", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("AccessUrl", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AccessUrl property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->AccessUrl.length();
        }
    else if (FILE_BUFF_CONTENTTYPE == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ContentType", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ContentType", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContentType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->ContentType.length();
        }
    else if (FILE_BUFF_MODIFIEDBY == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ModifiedBy", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ModifiedBy", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->ModifiedBy.length();
        }
    else if (FILE_BUFF_CREATEDBY == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("CreatedBy", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("CreatedBy", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->CreatedBy.length();
        }
    else if (FILE_BUFF_PATH == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Path", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Path", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Path property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->Path.length();
        }
    else if (FILE_BUFF_DESCRIPTION == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Description", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Description", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Description property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->Description.length();
        }
    else if (FILE_BUFF_FILENAME == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("FileName", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("FileName", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("FileName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = fileBuf->FileName.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Folder_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
    if (FOLDER_BUFF_FOLDERNAME == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("FolderName", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("FolderName", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("FolderName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->FolderName.length();
        }
    else if (FOLDER_BUFF_CONTENTTYPE == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("ContentType", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("ContentType", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ContentType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->ContentType.length();
        }
    else if (FOLDER_BUFF_CREATEDBY == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("CreatedBy", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("CreatedBy", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->CreatedBy.length();
        }
    else if (FOLDER_BUFF_PATH == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("Path", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("Path", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Path property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->Path.length();
        }
    else if (FOLDER_BUFF_MODIFIEDBY == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("ModifiedBy", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("ModifiedBy", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedBy property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->ModifiedBy.length();
        }
    else if (FOLDER_BUFF_DESCRIPTION == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("Description", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("Description", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Description property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = folderBuf->Description.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus PublishFile_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPUBLISHFILEBUFFER publishfileBuf = (LPCWSCCPUBLISHFILEBUFFER) buf->lItems[index];
    if (PUBLISHFILE_BUFF_INPUTFILES == bufferProperty)
        {
        if (publishfileBuf->IsSet.find(WString("InputFiles", true)) == publishfileBuf->IsSet.end() || publishfileBuf->IsSet[WString("InputFiles", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("InputFiles property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = publishfileBuf->InputFiles.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus File_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    if (buf == nullptr || bufferProperty == 0 || dateTime == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
    if (FILE_BUFF_MODIFIEDTIMESTAMP == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("ModifiedTimeStamp", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("ModifiedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, fileBuf->ModifiedTimeStamp.c_str());
        }
    else if (FILE_BUFF_CREATEDTIMESTAMP == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("CreatedTimeStamp", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("CreatedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, fileBuf->CreatedTimeStamp.c_str());
        }
    else if (FILE_BUFF_DELETEDTIMESTAMP == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("DeletedTimeStamp", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("DeletedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("DeletedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, fileBuf->DeletedTimeStamp.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Folder_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    if (buf == nullptr || bufferProperty == 0 || dateTime == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
    if (FOLDER_BUFF_CREATEDTIMESTAMP == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("CreatedTimeStamp", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("CreatedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("CreatedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, folderBuf->CreatedTimeStamp.c_str());
        }
    else if (FOLDER_BUFF_MODIFIEDTIMESTAMP == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("ModifiedTimeStamp", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("ModifiedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ModifiedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, folderBuf->ModifiedTimeStamp.c_str());
        }
    else if (FOLDER_BUFF_DELETEDTIMESTAMP == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("DeletedTimeStamp", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("DeletedTimeStamp", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("DeletedTimeStamp property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, folderBuf->DeletedTimeStamp.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus File_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
    if (FILE_BUFF_FILEEXISTS == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("FileExists", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("FileExists", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("FileExists property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = fileBuf->FileExists;
        }
    else if (FILE_BUFF_ROOTFILE == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("RootFile", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("RootFile", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("RootFile property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = fileBuf->RootFile;
        }
    else if (FILE_BUFF_DOWNLOADACCESS == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("DownloadAccess", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("DownloadAccess", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("DownloadAccess property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = fileBuf->DownloadAccess;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Folder_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
    if (FOLDER_BUFF_ROOTFOLDER == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("RootFolder", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("RootFolder", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("RootFolder property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = folderBuf->RootFolder;
        }
    else if (FOLDER_BUFF_ISAUTOMATEDPUBLISHINGFOLDER == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("IsAutomatedPublishingFolder", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("IsAutomatedPublishingFolder", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsAutomatedPublishingFolder property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = folderBuf->IsAutomatedPublishingFolder;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus File_GetLongProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int64_t* pLong
)
    {
    if (buf == nullptr || bufferProperty == 0 || pLong == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFILEBUFFER fileBuf = (LPCWSCCFILEBUFFER) buf->lItems[index];
    if (FILE_BUFF_SIZE == bufferProperty)
        {
        if (fileBuf->IsSet.find(WString("Size", true)) == fileBuf->IsSet.end() || fileBuf->IsSet[WString("Size", true)] == false)
            {
            pLong = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Size property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pLong = fileBuf->Size;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Folder_GetLongProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int64_t* pLong
)
    {
    if (buf == nullptr || bufferProperty == 0 || pLong == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERBUFFER folderBuf = (LPCWSCCFOLDERBUFFER) buf->lItems[index];
    if (FOLDER_BUFF_SIZE == bufferProperty)
        {
        if (folderBuf->IsSet.find(WString("Size", true)) == folderBuf->IsSet.end() || folderBuf->IsSet[WString("Size", true)] == false)
            {
            pLong = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Size property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pLong = folderBuf->Size;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }



/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void File_BufferStuffer
(
LPCWSCCFILEBUFFER fileBuf,
ObjectIdCR objectId,
RapidJsonValueCR properties
)
    {
    fileBuf->ObjectId = WString(objectId.GetRemoteId().c_str(), true);
    if(properties.HasMember("Alias") && properties["Alias"].IsString())
        fileBuf->Alias = WString(properties["Alias"].GetString(), true);
    fileBuf->IsSet[WString("Alias", true)] = (properties.HasMember("Alias") && properties["Alias"].IsString());
    if(properties.HasMember("ContainerName") && properties["ContainerName"].IsString())
        fileBuf->ContainerName = WString(properties["ContainerName"].GetString(), true);
    fileBuf->IsSet[WString("ContainerName", true)] = (properties.HasMember("ContainerName") && properties["ContainerName"].IsString());
    if(properties.HasMember("AccessUrl") && properties["AccessUrl"].IsString())
        fileBuf->AccessUrl = WString(properties["AccessUrl"].GetString(), true);
    fileBuf->IsSet[WString("AccessUrl", true)] = (properties.HasMember("AccessUrl") && properties["AccessUrl"].IsString());
    if(properties.HasMember("ContentType") && properties["ContentType"].IsString())
        fileBuf->ContentType = WString(properties["ContentType"].GetString(), true);
    fileBuf->IsSet[WString("ContentType", true)] = (properties.HasMember("ContentType") && properties["ContentType"].IsString());
    if(properties.HasMember("ModifiedBy") && properties["ModifiedBy"].IsString())
        fileBuf->ModifiedBy = WString(properties["ModifiedBy"].GetString(), true);
    fileBuf->IsSet[WString("ModifiedBy", true)] = (properties.HasMember("ModifiedBy") && properties["ModifiedBy"].IsString());
    if(properties.HasMember("CreatedBy") && properties["CreatedBy"].IsString())
        fileBuf->CreatedBy = WString(properties["CreatedBy"].GetString(), true);
    fileBuf->IsSet[WString("CreatedBy", true)] = (properties.HasMember("CreatedBy") && properties["CreatedBy"].IsString());
    if(properties.HasMember("Path") && properties["Path"].IsString())
        fileBuf->Path = WString(properties["Path"].GetString(), true);
    fileBuf->IsSet[WString("Path", true)] = (properties.HasMember("Path") && properties["Path"].IsString());
    if(properties.HasMember("ModifiedTimeStamp") && properties["ModifiedTimeStamp"].IsString())
        fileBuf->ModifiedTimeStamp = WString(properties["ModifiedTimeStamp"].GetString(), true);
    fileBuf->IsSet[WString("ModifiedTimeStamp", true)] = (properties.HasMember("ModifiedTimeStamp") && properties["ModifiedTimeStamp"].IsString());
    if(properties.HasMember("CreatedTimeStamp") && properties["CreatedTimeStamp"].IsString())
        fileBuf->CreatedTimeStamp = WString(properties["CreatedTimeStamp"].GetString(), true);
    fileBuf->IsSet[WString("CreatedTimeStamp", true)] = (properties.HasMember("CreatedTimeStamp") && properties["CreatedTimeStamp"].IsString());
    if(properties.HasMember("FileExists") && properties["FileExists"].IsBool())
        fileBuf->FileExists = properties["FileExists"].GetBool();
    fileBuf->IsSet[WString("FileExists", true)] = (properties.HasMember("FileExists") && properties["FileExists"].IsBool());
    if(properties.HasMember("Size") && properties["Size"].IsInt())
        fileBuf->Size = properties["Size"].GetInt();
    fileBuf->IsSet[WString("Size", true)] = (properties.HasMember("Size") && properties["Size"].IsInt());
    if(properties.HasMember("Description") && properties["Description"].IsString())
        fileBuf->Description = WString(properties["Description"].GetString(), true);
    fileBuf->IsSet[WString("Description", true)] = (properties.HasMember("Description") && properties["Description"].IsString());
    if(properties.HasMember("FileName") && properties["FileName"].IsString())
        fileBuf->FileName = WString(properties["FileName"].GetString(), true);
    fileBuf->IsSet[WString("FileName", true)] = (properties.HasMember("FileName") && properties["FileName"].IsString());
    if(properties.HasMember("RootFile") && properties["RootFile"].IsBool())
        fileBuf->RootFile = properties["RootFile"].GetBool();
    fileBuf->IsSet[WString("RootFile", true)] = (properties.HasMember("RootFile") && properties["RootFile"].IsBool());
    if(properties.HasMember("DeletedTimeStamp") && properties["DeletedTimeStamp"].IsString())
        fileBuf->DeletedTimeStamp = WString(properties["DeletedTimeStamp"].GetString(), true);
    fileBuf->IsSet[WString("DeletedTimeStamp", true)] = (properties.HasMember("DeletedTimeStamp") && properties["DeletedTimeStamp"].IsString());
    if(properties.HasMember("DownloadAccess") && properties["DownloadAccess"].IsBool())
        fileBuf->DownloadAccess = properties["DownloadAccess"].GetBool();
    fileBuf->IsSet[WString("DownloadAccess", true)] = (properties.HasMember("DownloadAccess") && properties["DownloadAccess"].IsBool());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void Folder_BufferStuffer
(
LPCWSCCFOLDERBUFFER folderBuf,
ObjectIdCR objectId,
RapidJsonValueCR properties
)
    {
    folderBuf->ObjectId = WString(objectId.GetRemoteId().c_str(), true);
    if(properties.HasMember("FolderName") && properties["FolderName"].IsString())
        folderBuf->FolderName = WString(properties["FolderName"].GetString(), true);
    folderBuf->IsSet[WString("FolderName", true)] = (properties.HasMember("FolderName") && properties["FolderName"].IsString());
    if(properties.HasMember("ContentType") && properties["ContentType"].IsString())
        folderBuf->ContentType = WString(properties["ContentType"].GetString(), true);
    folderBuf->IsSet[WString("ContentType", true)] = (properties.HasMember("ContentType") && properties["ContentType"].IsString());
    if(properties.HasMember("CreatedBy") && properties["CreatedBy"].IsString())
        folderBuf->CreatedBy = WString(properties["CreatedBy"].GetString(), true);
    folderBuf->IsSet[WString("CreatedBy", true)] = (properties.HasMember("CreatedBy") && properties["CreatedBy"].IsString());
    if(properties.HasMember("Path") && properties["Path"].IsString())
        folderBuf->Path = WString(properties["Path"].GetString(), true);
    folderBuf->IsSet[WString("Path", true)] = (properties.HasMember("Path") && properties["Path"].IsString());
    if(properties.HasMember("CreatedTimeStamp") && properties["CreatedTimeStamp"].IsString())
        folderBuf->CreatedTimeStamp = WString(properties["CreatedTimeStamp"].GetString(), true);
    folderBuf->IsSet[WString("CreatedTimeStamp", true)] = (properties.HasMember("CreatedTimeStamp") && properties["CreatedTimeStamp"].IsString());
    if(properties.HasMember("ModifiedBy") && properties["ModifiedBy"].IsString())
        folderBuf->ModifiedBy = WString(properties["ModifiedBy"].GetString(), true);
    folderBuf->IsSet[WString("ModifiedBy", true)] = (properties.HasMember("ModifiedBy") && properties["ModifiedBy"].IsString());
    if(properties.HasMember("ModifiedTimeStamp") && properties["ModifiedTimeStamp"].IsString())
        folderBuf->ModifiedTimeStamp = WString(properties["ModifiedTimeStamp"].GetString(), true);
    folderBuf->IsSet[WString("ModifiedTimeStamp", true)] = (properties.HasMember("ModifiedTimeStamp") && properties["ModifiedTimeStamp"].IsString());
    if(properties.HasMember("RootFolder") && properties["RootFolder"].IsBool())
        folderBuf->RootFolder = properties["RootFolder"].GetBool();
    folderBuf->IsSet[WString("RootFolder", true)] = (properties.HasMember("RootFolder") && properties["RootFolder"].IsBool());
    if(properties.HasMember("Size") && properties["Size"].IsInt())
        folderBuf->Size = properties["Size"].GetInt();
    folderBuf->IsSet[WString("Size", true)] = (properties.HasMember("Size") && properties["Size"].IsInt());
    if(properties.HasMember("Description") && properties["Description"].IsString())
        folderBuf->Description = WString(properties["Description"].GetString(), true);
    folderBuf->IsSet[WString("Description", true)] = (properties.HasMember("Description") && properties["Description"].IsString());
    if(properties.HasMember("IsAutomatedPublishingFolder") && properties["IsAutomatedPublishingFolder"].IsBool())
        folderBuf->IsAutomatedPublishingFolder = properties["IsAutomatedPublishingFolder"].GetBool();
    folderBuf->IsSet[WString("IsAutomatedPublishingFolder", true)] = (properties.HasMember("IsAutomatedPublishingFolder") && properties["IsAutomatedPublishingFolder"].IsBool());
    if(properties.HasMember("DeletedTimeStamp") && properties["DeletedTimeStamp"].IsString())
        folderBuf->DeletedTimeStamp = WString(properties["DeletedTimeStamp"].GetString(), true);
    folderBuf->IsSet[WString("DeletedTimeStamp", true)] = (properties.HasMember("DeletedTimeStamp") && properties["DeletedTimeStamp"].IsString());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void PublishFile_BufferStuffer
(
LPCWSCCPUBLISHFILEBUFFER publishfileBuf,
ObjectIdCR objectId,
RapidJsonValueCR properties
)
    {
    publishfileBuf->ObjectId = WString(objectId.GetRemoteId().c_str(), true);
    if(properties.HasMember("InputFiles") && properties["InputFiles"].IsString())
        publishfileBuf->InputFiles = WString(properties["InputFiles"].GetString(), true);
    publishfileBuf->IsSet[WString("InputFiles", true)] = (properties.HasMember("InputFiles") && properties["InputFiles"].IsString());
    }
