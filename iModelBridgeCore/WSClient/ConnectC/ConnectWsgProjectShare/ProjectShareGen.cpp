/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/ConnectWsgProjectShare/ProjectShareGen.cpp $
|
|  $Copyright: (c) 2018 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyCApiGen tool on May 17, 2017.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadFileList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* fileBuffer
)
    {
    VERIFY_API

    if (fileBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("fileBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendQueryRequest(WSQuery("ProjectShare", "File"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCFILEBUFFER bufToFill = new CWSCCFILEBUFFER;
        File_BufferStuffer(bufToFill, instance.GetObjectId(), instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_FILE;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    *fileBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadFileList completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateFile
(
CWSCCHANDLE apiHandle,
WCharCP Alias,
WCharCP ContainerName,
WCharCP AccessUrl,
WCharCP ContentType,
WCharCP ModifiedBy,
WCharCP CreatedBy,
WCharCP Path,
WCharCP ModifiedTimeStamp,
WCharCP CreatedTimeStamp,
bool* FileExists,
int64_t* Size,
WCharCP Description,
WCharCP FileName,
bool* RootFile,
WCharCP DeletedTimeStamp,
bool* DownloadAccess,
CWSCCDATABUFHANDLE folderHasContentBuffer
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "ProjectShare";
    instance["className"] = "File";

    Json::Value propertiesJson;
    if (Alias != nullptr) propertiesJson["Alias"] = Utf8String(Alias);
    if (ContainerName != nullptr) propertiesJson["ContainerName"] = Utf8String(ContainerName);
    if (AccessUrl != nullptr) propertiesJson["AccessUrl"] = Utf8String(AccessUrl);
    if (ContentType != nullptr) propertiesJson["ContentType"] = Utf8String(ContentType);
    if (ModifiedBy != nullptr) propertiesJson["ModifiedBy"] = Utf8String(ModifiedBy);
    if (CreatedBy != nullptr) propertiesJson["CreatedBy"] = Utf8String(CreatedBy);
    if (Path != nullptr) propertiesJson["Path"] = Utf8String(Path);
    if (ModifiedTimeStamp != nullptr) propertiesJson["ModifiedTimeStamp"] = Utf8String(ModifiedTimeStamp);
    if (CreatedTimeStamp != nullptr) propertiesJson["CreatedTimeStamp"] = Utf8String(CreatedTimeStamp);
    if (FileExists != nullptr) propertiesJson["FileExists"] = *FileExists;
    if (Size != nullptr) propertiesJson["Size"] = Json::Value(*Size);
    if (Description != nullptr) propertiesJson["Description"] = Utf8String(Description);
    if (FileName != nullptr) propertiesJson["FileName"] = Utf8String(FileName);
    if (RootFile != nullptr) propertiesJson["RootFile"] = *RootFile;
    if (DeletedTimeStamp != nullptr) propertiesJson["DeletedTimeStamp"] = Utf8String(DeletedTimeStamp);
    if (DownloadAccess != nullptr) propertiesJson["DownloadAccess"] = *DownloadAccess;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid File properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    if (folderHasContentBuffer != nullptr)
       {
       Json::Value relationshipInstancesJson;
       LPCWSCCFOLDERHASCONTENTBUFFER buf = (LPCWSCCFOLDERHASCONTENTBUFFER) ((HCWSCCBUFFER) folderHasContentBuffer)->lItems[0];
       relationshipInstancesJson["schemaName"] = "ProjectShare";
       relationshipInstancesJson["className"] = "FolderHasContent";
       relationshipInstancesJson["direction"] = "backward" /*TODO: figure out what direction is used for*/;

       Json::Value relatedInstanceJson;
       relatedInstanceJson["schemaName"] = "ProjectShare";
       relatedInstanceJson["className"] = "Folder";
       relatedInstanceJson["instanceId"] = Utf8String(buf->FolderId);
       relationshipInstancesJson["relatedInstance"] = relatedInstanceJson;
       if (relationshipInstancesJson.size() == 0)
          {
          api->SetStatusMessage("Invalid parameter passed to function");
          api->SetStatusDescription("There were not any valid FolderHasContent properties passed in.");
          return INVALID_PARAMETER;
          }
      instance["relationshipInstances"] = Json::Value(Json::arrayValue);
      instance["relationshipInstances"].append(relationshipInstancesJson);
      }

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadFile
(
CWSCCHANDLE apiHandle,
WCharCP fileId,
CWSCCDATABUFHANDLE* fileBuffer
)
    {
    VERIFY_API

    if (fileBuffer == nullptr || fileId == nullptr || wcslen(fileId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("fileBuffer is a nullptr or fileId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendGetObjectRequest({"ProjectShare", "File", Utf8String(fileId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCFILEBUFFER fileBuf = new CWSCCFILEBUFFER;
    WSObjectsReader::Instance instance = (*result.GetValue().GetInstances().begin());
    File_BufferStuffer(fileBuf, instance.GetObjectId(), instance.GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(fileBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_FILE;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    buf->lItems = {fileBuf};
    *fileBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateFile
(
CWSCCHANDLE apiHandle,
WCharCP fileId,
WCharCP Alias,
WCharCP ContainerName,
WCharCP AccessUrl,
WCharCP ContentType,
WCharCP ModifiedBy,
WCharCP CreatedBy,
WCharCP Path,
WCharCP ModifiedTimeStamp,
WCharCP CreatedTimeStamp,
bool* FileExists,
int64_t* Size,
WCharCP Description,
WCharCP FileName,
bool* RootFile,
WCharCP DeletedTimeStamp,
bool* DownloadAccess
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Alias != nullptr) propertiesJson["Alias"] = Utf8String(Alias);
    if (ContainerName != nullptr) propertiesJson["ContainerName"] = Utf8String(ContainerName);
    if (AccessUrl != nullptr) propertiesJson["AccessUrl"] = Utf8String(AccessUrl);
    if (ContentType != nullptr) propertiesJson["ContentType"] = Utf8String(ContentType);
    if (ModifiedBy != nullptr) propertiesJson["ModifiedBy"] = Utf8String(ModifiedBy);
    if (CreatedBy != nullptr) propertiesJson["CreatedBy"] = Utf8String(CreatedBy);
    if (Path != nullptr) propertiesJson["Path"] = Utf8String(Path);
    if (ModifiedTimeStamp != nullptr) propertiesJson["ModifiedTimeStamp"] = Utf8String(ModifiedTimeStamp);
    if (CreatedTimeStamp != nullptr) propertiesJson["CreatedTimeStamp"] = Utf8String(CreatedTimeStamp);
    if (FileExists != nullptr) propertiesJson["FileExists"] = *FileExists;
    if (Size != nullptr) propertiesJson["Size"] = Json::Value(*Size);
    if (Description != nullptr) propertiesJson["Description"] = Utf8String(Description);
    if (FileName != nullptr) propertiesJson["FileName"] = Utf8String(FileName);
    if (RootFile != nullptr) propertiesJson["RootFile"] = *RootFile;
    if (DeletedTimeStamp != nullptr) propertiesJson["DeletedTimeStamp"] = Utf8String(DeletedTimeStamp);
    if (DownloadAccess != nullptr) propertiesJson["DownloadAccess"] = *DownloadAccess;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid File properties passed in.");
        return INVALID_PARAMETER;
        }
    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendUpdateObjectRequest({"ProjectShare", "File", Utf8String(fileId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteFile
(
CWSCCHANDLE apiHandle,
WCharCP fileId
)
    {
    VERIFY_API

    if (fileId == nullptr || wcslen(fileId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("fileId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendDeleteObjectRequest({"ProjectShare", "File", Utf8String(fileId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadFolderList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* folderBuffer
)
    {
    VERIFY_API

    if (folderBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("folderBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendQueryRequest(WSQuery("ProjectShare", "Folder"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCFOLDERBUFFER bufToFill = new CWSCCFOLDERBUFFER;
        Folder_BufferStuffer(bufToFill, instance.GetObjectId(), instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_FOLDER;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    *folderBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadFolderList completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateFolder
(
CWSCCHANDLE apiHandle,
WCharCP FolderName,
WCharCP ContentType,
WCharCP CreatedBy,
WCharCP Path,
WCharCP CreatedTimeStamp,
WCharCP ModifiedBy,
WCharCP ModifiedTimeStamp,
bool* RootFolder,
int64_t* Size,
WCharCP Description,
bool* IsAutomatedPublishingFolder,
WCharCP DeletedTimeStamp,
CWSCCDATABUFHANDLE folderHasContentBuffer
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "ProjectShare";
    instance["className"] = "Folder";

    Json::Value propertiesJson;
    if (FolderName != nullptr) propertiesJson["FolderName"] = Utf8String(FolderName);
    if (ContentType != nullptr) propertiesJson["ContentType"] = Utf8String(ContentType);
    if (CreatedBy != nullptr) propertiesJson["CreatedBy"] = Utf8String(CreatedBy);
    if (Path != nullptr) propertiesJson["Path"] = Utf8String(Path);
    if (CreatedTimeStamp != nullptr) propertiesJson["CreatedTimeStamp"] = Utf8String(CreatedTimeStamp);
    if (ModifiedBy != nullptr) propertiesJson["ModifiedBy"] = Utf8String(ModifiedBy);
    if (ModifiedTimeStamp != nullptr) propertiesJson["ModifiedTimeStamp"] = Utf8String(ModifiedTimeStamp);
    if (RootFolder != nullptr) propertiesJson["RootFolder"] = *RootFolder;
    if (Size != nullptr) propertiesJson["Size"] = Json::Value(*Size);
    if (Description != nullptr) propertiesJson["Description"] = Utf8String(Description);
    if (IsAutomatedPublishingFolder != nullptr) propertiesJson["IsAutomatedPublishingFolder"] = *IsAutomatedPublishingFolder;
    if (DeletedTimeStamp != nullptr) propertiesJson["DeletedTimeStamp"] = Utf8String(DeletedTimeStamp);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Folder properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    if (folderHasContentBuffer != nullptr)
       {
       Json::Value relationshipInstancesJson;
       LPCWSCCFOLDERHASCONTENTBUFFER buf = (LPCWSCCFOLDERHASCONTENTBUFFER) ((HCWSCCBUFFER) folderHasContentBuffer)->lItems[0];
       relationshipInstancesJson["schemaName"] = "ProjectShare";
       relationshipInstancesJson["className"] = "FolderHasContent";
       relationshipInstancesJson["direction"] = "backward" /*TODO: figure out what direction is used for*/;

       Json::Value relatedInstanceJson;
       relatedInstanceJson["schemaName"] = "ProjectShare";
       relatedInstanceJson["className"] = "Folder";
       relatedInstanceJson["instanceId"] = Utf8String(buf->FolderId);
       relationshipInstancesJson["relatedInstance"] = relatedInstanceJson;
       if (relationshipInstancesJson.size() == 0)
          {
          api->SetStatusMessage("Invalid parameter passed to function");
          api->SetStatusDescription("There were not any valid FolderHasContent properties passed in.");
          return INVALID_PARAMETER;
          }
      instance["relationshipInstances"] = Json::Value(Json::arrayValue);
      instance["relationshipInstances"].append(relationshipInstancesJson);
      }

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateFolder completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadFolder
(
CWSCCHANDLE apiHandle,
WCharCP folderId,
CWSCCDATABUFHANDLE* folderBuffer
)
    {
    VERIFY_API

    if (folderBuffer == nullptr || folderId == nullptr || wcslen(folderId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("folderBuffer is a nullptr or folderId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendGetObjectRequest({"ProjectShare", "Folder", Utf8String(folderId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCFOLDERBUFFER folderBuf = new CWSCCFOLDERBUFFER;
    WSObjectsReader::Instance instance = (*result.GetValue().GetInstances().begin());
    Folder_BufferStuffer(folderBuf, instance.GetObjectId(), instance.GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(folderBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_FOLDER;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    buf->lItems = {folderBuf};
    *folderBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadFolder completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateFolder
(
CWSCCHANDLE apiHandle,
WCharCP folderId,
WCharCP FolderName,
WCharCP ContentType,
WCharCP CreatedBy,
WCharCP Path,
WCharCP CreatedTimeStamp,
WCharCP ModifiedBy,
WCharCP ModifiedTimeStamp,
bool* RootFolder,
int64_t* Size,
WCharCP Description,
bool* IsAutomatedPublishingFolder,
WCharCP DeletedTimeStamp
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (FolderName != nullptr) propertiesJson["FolderName"] = Utf8String(FolderName);
    if (ContentType != nullptr) propertiesJson["ContentType"] = Utf8String(ContentType);
    if (CreatedBy != nullptr) propertiesJson["CreatedBy"] = Utf8String(CreatedBy);
    if (Path != nullptr) propertiesJson["Path"] = Utf8String(Path);
    if (CreatedTimeStamp != nullptr) propertiesJson["CreatedTimeStamp"] = Utf8String(CreatedTimeStamp);
    if (ModifiedBy != nullptr) propertiesJson["ModifiedBy"] = Utf8String(ModifiedBy);
    if (ModifiedTimeStamp != nullptr) propertiesJson["ModifiedTimeStamp"] = Utf8String(ModifiedTimeStamp);
    if (RootFolder != nullptr) propertiesJson["RootFolder"] = *RootFolder;
    if (Size != nullptr) propertiesJson["Size"] = Json::Value(*Size);
    if (Description != nullptr) propertiesJson["Description"] = Utf8String(Description);
    if (IsAutomatedPublishingFolder != nullptr) propertiesJson["IsAutomatedPublishingFolder"] = *IsAutomatedPublishingFolder;
    if (DeletedTimeStamp != nullptr) propertiesJson["DeletedTimeStamp"] = Utf8String(DeletedTimeStamp);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Folder properties passed in.");
        return INVALID_PARAMETER;
        }
    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendUpdateObjectRequest({"ProjectShare", "Folder", Utf8String(folderId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateFolder completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteFolder
(
CWSCCHANDLE apiHandle,
WCharCP folderId
)
    {
    VERIFY_API

    if (folderId == nullptr || wcslen(folderId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("folderId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendDeleteObjectRequest({"ProjectShare", "Folder", Utf8String(folderId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteFolder completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadPublishFileList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* publishfileBuffer
)
    {
    VERIFY_API

    if (publishfileBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("publishfileBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendQueryRequest(WSQuery("ProjectShare", "PublishFile"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPUBLISHFILEBUFFER bufToFill = new CWSCCPUBLISHFILEBUFFER;
        PublishFile_BufferStuffer(bufToFill, instance.GetObjectId(), instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_PUBLISHFILE;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    *publishfileBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadPublishFileList completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreatePublishFile
(
CWSCCHANDLE apiHandle,
WCharCP InputFiles
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "ProjectShare";
    instance["className"] = "PublishFile";

    Json::Value propertiesJson;
    if (InputFiles != nullptr) propertiesJson["InputFiles"] = Utf8String(InputFiles);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid PublishFile properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreatePublishFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadPublishFile
(
CWSCCHANDLE apiHandle,
WCharCP publishfileId,
CWSCCDATABUFHANDLE* publishfileBuffer
)
    {
    VERIFY_API

    if (publishfileBuffer == nullptr || publishfileId == nullptr || wcslen(publishfileId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("publishfileBuffer is a nullptr or publishfileId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendGetObjectRequest({"ProjectShare", "PublishFile", Utf8String(publishfileId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPUBLISHFILEBUFFER publishfileBuf = new CWSCCPUBLISHFILEBUFFER;
    WSObjectsReader::Instance instance = (*result.GetValue().GetInstances().begin());
    PublishFile_BufferStuffer(publishfileBuf, instance.GetObjectId(), instance.GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(publishfileBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_PUBLISHFILE;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    buf->lItems = {publishfileBuf};
    *publishfileBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadPublishFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdatePublishFile
(
CWSCCHANDLE apiHandle,
WCharCP publishfileId,
WCharCP InputFiles
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (InputFiles != nullptr) propertiesJson["InputFiles"] = Utf8String(InputFiles);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid PublishFile properties passed in.");
        return INVALID_PARAMETER;
        }
    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendUpdateObjectRequest({"ProjectShare", "PublishFile", Utf8String(publishfileId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdatePublishFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeletePublishFile
(
CWSCCHANDLE apiHandle,
WCharCP publishfileId
)
    {
    VERIFY_API

    if (publishfileId == nullptr || wcslen(publishfileId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("publishfileId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgprojectshareUrl = UrlProvider::Urls::ConnectWsgProjectShare.Get();
    if (api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgprojectshareUrl,
            "BentleyCONNECT--Main"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgprojectshareUrl + "BentleyCONNECT--Main")->second;
    auto result = client->SendDeleteObjectRequest({"ProjectShare", "PublishFile", Utf8String(publishfileId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeletePublishFile completed successfully.");
    return SUCCESS;
    }

/*--------------------------------------------------------------------------------------+
* @bsimethod                                                                    05/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_InitFolderHasContentBuffer
(
CWSCCDATABUFHANDLE* folderhascontentBuffer,
WCharCP FolderId
)
    {
    if (folderhascontentBuffer == nullptr)
        {
        return INVALID_PARAMETER;
        }

    LPCWSCCFOLDERHASCONTENTBUFFER folderhascontentBuf = new CWSCCFOLDERHASCONTENTBUFFER;
    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        return INTERNAL_MEMORY_ERROR;
        }

    folderhascontentBuf->FolderId = WString(FolderId);
    folderhascontentBuf->IsSet[WString("FolderId", true)] = true;

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_FOLDERHASCONTENT;
    buf->lSchemaType = SCHEMA_TYPE_PROJECTSHARE;
    buf->isWSGBuffer = true;
    buf->lItems = {folderhascontentBuf};
    *folderhascontentBuffer = (CWSCCDATABUFHANDLE) buf;

    return SUCCESS;
    }

