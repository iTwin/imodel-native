/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/CWSCCGen.cpp $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyApiGen tool on May 18, 2016.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_FreeApi(CWSCCHANDLE apiHandle)
    {
    if (nullptr == apiHandle)
        return INVALID_PARAMETER;

    LPCWSCC api = (LPCWSCC) apiHandle;
    delete api;
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganizationList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organizationBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "Organization"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCORGANIZATIONBUFFER bufToFill = new CWSCCORGANIZATIONBUFFER;
        OrganizationBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_ORGANIZATION;
    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganizationList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateOrganization
(
CWSCCHANDLE apiHandle,
WCharCP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Organization";

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Organization properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr || organizationId == nullptr || wcslen(organizationId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organizationBuffer is a nullptr or organizationId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCORGANIZATIONBUFFER organizationBuf = new CWSCCORGANIZATIONBUFFER;
    OrganizationBufferStuffer(organizationBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(organizationBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_ORGANIZATION;
    buf->lItems = {organizationBuf};
    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "Project"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTBUFFER bufToFill = new CWSCCPROJECTBUFFER;
        ProjectBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECT;
    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProject
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Project";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr || projectId == nullptr || wcslen(projectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectBuffer is a nullptr or projectId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTBUFFER projectBuf = new CWSCCPROJECTBUFFER;
    ProjectBufferStuffer(projectBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECT;
    buf->lItems = {projectBuf};
    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project properties passed in.");
        return INVALID_PARAMETER;
        }
    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendUpdateObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId
)
    {
    VERIFY_API

    if (projectId == nullptr || wcslen(projectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendDeleteObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavoriteList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavoriteBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectFavorite"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTFAVORITEBUFFER bufToFill = new CWSCCPROJECTFAVORITEBUFFER;
        ProjectFavoriteBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavoriteList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr || projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavoriteBuffer is a nullptr or projectfavoriteId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = new CWSCCPROJECTFAVORITEBUFFER;
    ProjectFavoriteBufferStuffer(projectfavoriteBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectfavoriteBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    buf->lItems = {projectfavoriteBuf};
    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId
)
    {
    VERIFY_API

    if (projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectfavoriteId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendDeleteObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRU"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUBUFFER bufToFill = new CWSCCPROJECTMRUBUFFER;
        ProjectMRUBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTMRU;
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRU";

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRU properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr || projectmruId == nullptr || wcslen(projectmruId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr or projectmruId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = new CWSCCPROJECTMRUBUFFER;
    ProjectMRUBufferStuffer(projectmruBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmruBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRU;
    buf->lItems = {projectmruBuf};
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetailList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetailBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRUDetail"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUDETAILBUFFER bufToFill = new CWSCCPROJECTMRUDETAILBUFFER;
        ProjectMRUDetailBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetailList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr || projectmrudetailId == nullptr || wcslen(projectmrudetailId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetailBuffer is a nullptr or projectmrudetailId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    if (api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            UrlProvider::Urls::ConnectWsgGlobal.Get(),
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(UrlProvider::Urls::ConnectWsgGlobal.Get() + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = new CWSCCPROJECTMRUDETAILBUFFER;
    ProjectMRUDetailBufferStuffer(projectmrudetailBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmrudetailBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    buf->lItems = {projectmrudetailBuf};
    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetail completed successfully.");
    return SUCCESS;
    }

