/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/CWSCCGen.cpp $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyApiGen tool on May 03, 2016.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus wsresultToConnectWebServicesClientCStatus(LPCWSCC api, WSError::Id errorId, Utf8StringCR errorMessage, Utf8StringCR errorDescription)
    {
    api->SetStatusMessage(errorMessage.c_str());
    api->SetStatusDescription(errorDescription.c_str());
    switch(errorId)
        {
        case WSError::Id::Unknown:
            return ERROR500;
        case WSError::Id::LoginFailed:
            return LOGIN_FAILED;
        case WSError::Id::SslRequired:
            return SSL_REQUIRED;
        case WSError::Id::NotEnoughRights:
            return NOT_ENOUGH_RIGHTS;
        case WSError::Id::RepositoryNotFound:
            return REPOSITORY_NOT_FOUND;
        case WSError::Id::SchemaNotFound:
            return SCHEMA_NOT_FOUND;
        case WSError::Id::ClassNotFound:
            return CLASS_NOT_FOUND;
        case WSError::Id::PropertyNotFound:
            return PROPERTY_NOT_FOUND;
        case WSError::Id::InstanceNotFound:
            return INSTANCE_NOT_FOUND;
        case WSError::Id::FileNotFound:
            return FILE_NOT_FOUND;
        case WSError::Id::NotSupported:
            return NOT_SUPPORTED;
        case WSError::Id::NoServerLicense:
            return NO_SERVER_LICENSE;
        case WSError::Id::NoClientLicense:
            return NO_CLIENT_LICENSE;
        case WSError::Id::TooManyBadLoginAttempts:
            return TO_MANY_BAD_LOGIN_ATTEMPTS;
        case WSError::Id::ServerError:
            return ERROR500;
        case WSError::Id::BadRequest:
            return ERROR400;
        case WSError::Id::Conflict:
            return ERROR409;
        default:
            return ERROR500;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_FreeApi(CWSCCHANDLE apiHandle)
    {
    if (nullptr == apiHandle)
        return INVALID_PARAMETER;

    LPCWSCC api = (LPCWSCC) apiHandle;
    free(api);
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The ConnectWebServicesClientC_FreeApi completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadConnectUserList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* connectuserBuffer
)
    {
    VERIFY_API

    if (connectuserBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("connectuserBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ConnectUser"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCCONNECTUSERBUFFER bufToFill = new CWSCCCONNECTUSERBUFFER;
        ConnectUserBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_CONNECTUSER;
    *connectuserBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadConnectUserList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP UserName,
WCharCP UserEmail,
WCharCP ConnectOrgGuid,
WCharCP UltimateSiteId,
WCharCP OrgName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ConnectUser";

    Json::Value propertiesJson;
    if (UserName != nullptr) propertiesJson["UserName"] = Utf8String(UserName);
    if (UserEmail != nullptr) propertiesJson["UserEmail"] = Utf8String(UserEmail);
    if (ConnectOrgGuid != nullptr) propertiesJson["ConnectOrgGuid"] = Utf8String(ConnectOrgGuid);
    if (UltimateSiteId != nullptr) propertiesJson["UltimateSiteId"] = Utf8String(UltimateSiteId);
    if (OrgName != nullptr) propertiesJson["OrgName"] = Utf8String(OrgName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ConnectUser properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateConnectUser completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId,
CWSCCDATABUFHANDLE* connectuserBuffer
)
    {
    VERIFY_API

    if (connectuserBuffer == nullptr || connectuserId == nullptr || wcslen(connectuserId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("connectuserBuffer is a nullptr or connectuserId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCCONNECTUSERBUFFER connectuserBuf = new CWSCCCONNECTUSERBUFFER;
    ConnectUserBufferStuffer(connectuserBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(connectuserBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_CONNECTUSER;
    buf->lItems = {connectuserBuf};
    *connectuserBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadConnectUser completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId,
WCharCP UserName,
WCharCP UserEmail,
WCharCP ConnectOrgGuid,
WCharCP UltimateSiteId,
WCharCP OrgName
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (UserName != nullptr) propertiesJson["UserName"] = Utf8String(UserName);
    if (UserEmail != nullptr) propertiesJson["UserEmail"] = Utf8String(UserEmail);
    if (ConnectOrgGuid != nullptr) propertiesJson["ConnectOrgGuid"] = Utf8String(ConnectOrgGuid);
    if (UltimateSiteId != nullptr) propertiesJson["UltimateSiteId"] = Utf8String(UltimateSiteId);
    if (OrgName != nullptr) propertiesJson["OrgName"] = Utf8String(OrgName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ConnectUser properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateConnectUser completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId
)
    {
    VERIFY_API

    if (connectuserId == nullptr || wcslen(connectuserId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("connectuserId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteConnectUser completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganizationList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organizationBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "Organization"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCORGANIZATIONBUFFER bufToFill = new CWSCCORGANIZATIONBUFFER;
        OrganizationBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_ORGANIZATION;
    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganizationList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateOrganization
(
CWSCCHANDLE apiHandle,
WCharCP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Organization";

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Organization properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr || organizationId == nullptr || wcslen(organizationId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organizationBuffer is a nullptr or organizationId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCORGANIZATIONBUFFER organizationBuf = new CWSCCORGANIZATIONBUFFER;
    OrganizationBufferStuffer(organizationBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(organizationBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_ORGANIZATION;
    buf->lItems = {organizationBuf};
    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
WCharCP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Organization properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId
)
    {
    VERIFY_API

    if (organizationId == nullptr || wcslen(organizationId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("organizationId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteOrganization completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "Project"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTBUFFER bufToFill = new CWSCCPROJECTBUFFER;
        ProjectBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECT;
    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProject
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Project";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr || projectId == nullptr || wcslen(projectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectBuffer is a nullptr or projectId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTBUFFER projectBuf = new CWSCCPROJECTBUFFER;
    ProjectBufferStuffer(projectBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECT;
    buf->lItems = {projectBuf};
    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId
)
    {
    VERIFY_API

    if (projectId == nullptr || wcslen(projectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavoriteList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavoriteBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectFavorite"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTFAVORITEBUFFER bufToFill = new CWSCCPROJECTFAVORITEBUFFER;
        ProjectFavoriteBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavoriteList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectFavorite";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectFavorite properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr || projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavoriteBuffer is a nullptr or projectfavoriteId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = new CWSCCPROJECTFAVORITEBUFFER;
    ProjectFavoriteBufferStuffer(projectfavoriteBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectfavoriteBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    buf->lItems = {projectfavoriteBuf};
    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectFavorite properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId
)
    {
    VERIFY_API

    if (projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectfavoriteId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectFavorite completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRU"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUBUFFER bufToFill = new CWSCCPROJECTMRUBUFFER;
        ProjectMRUBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTMRU;
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRU";

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRU properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr || projectmruId == nullptr || wcslen(projectmruId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr or projectmruId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = new CWSCCPROJECTMRUBUFFER;
    ProjectMRUBufferStuffer(projectmruBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmruBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRU;
    buf->lItems = {projectmruBuf};
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRU properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId
)
    {
    VERIFY_API

    if (projectmruId == nullptr || wcslen(projectmruId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectmruId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetailList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetailBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRUDetail"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUDETAILBUFFER bufToFill = new CWSCCPROJECTMRUDETAILBUFFER;
        ProjectMRUDetailBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetailList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectMRUDetail
(
CWSCCHANDLE apiHandle,
bool* IsFavorite,
int64_t* LastAccessedByUser,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRUDetail";

    Json::Value propertiesJson;
    if (IsFavorite != nullptr) propertiesJson["IsFavorite"] = *IsFavorite;
    if (LastAccessedByUser != nullptr) propertiesJson["LastAccessedByUser"] = *LastAccessedByUser;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRUDetail properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectMRUDetail completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr || projectmrudetailId == nullptr || wcslen(projectmrudetailId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetailBuffer is a nullptr or projectmrudetailId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = new CWSCCPROJECTMRUDETAILBUFFER;
    ProjectMRUDetailBufferStuffer(projectmrudetailBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmrudetailBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    buf->lItems = {projectmrudetailBuf};
    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetail completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
bool* IsFavorite,
int64_t* LastAccessedByUser,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (IsFavorite != nullptr) propertiesJson["IsFavorite"] = *IsFavorite;
    if (LastAccessedByUser != nullptr) propertiesJson["LastAccessedByUser"] = *LastAccessedByUser;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRUDetail properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProjectMRUDetail completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId
)
    {
    VERIFY_API

    if (projectmrudetailId == nullptr || wcslen(projectmrudetailId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectmrudetailId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectMRUDetail completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectTemplateList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projecttemplateBuffer
)
    {
    VERIFY_API

    if (projecttemplateBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projecttemplateBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectTemplate"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTTEMPLATEBUFFER bufToFill = new CWSCCPROJECTTEMPLATEBUFFER;
        ProjectTemplateBufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lType = BUFF_TYPE_PROJECTTEMPLATE;
    *projecttemplateBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectTemplateList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectTemplate";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectTemplate properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectTemplate completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId,
CWSCCDATABUFHANDLE* projecttemplateBuffer
)
    {
    VERIFY_API

    if (projecttemplateBuffer == nullptr || projecttemplateId == nullptr || wcslen(projecttemplateId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projecttemplateBuffer is a nullptr or projecttemplateId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = new CWSCCPROJECTTEMPLATEBUFFER;
    ProjectTemplateBufferStuffer(projecttemplateBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projecttemplateBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTTEMPLATE;
    buf->lItems = {projecttemplateBuf};
    *projecttemplateBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectTemplate completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectTemplate properties passed in.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProjectTemplate completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    05/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId
)
    {
    VERIFY_API

    if (projecttemplateId == nullptr || wcslen(projecttemplateId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projecttemplateId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
        api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectTemplate completed successfully.");
    return SUCCESS;
    }

