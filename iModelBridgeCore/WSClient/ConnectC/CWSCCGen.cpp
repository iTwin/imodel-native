/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/CWSCCGen.cpp $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyApiGen tool on April 27, 2016.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS wsresultToConnectWebServicesClientCStatus(WSError::Id errorId, Utf8StringCR errorMessage, Utf8StringCR errorDescription)
    {
    switch(errorId)
        {
        case WSError::Id::Unknown:
            return CALLSTATUS {ERROR500, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::RepositoryNotFound:
            return CALLSTATUS {ERROR400, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::SchemaNotFound:
            return CALLSTATUS {ERROR400, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::ClassNotFound:
            return CALLSTATUS {ERROR400, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::PropertyNotFound:
            return CALLSTATUS {ERROR404, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::InstanceNotFound:
            return CALLSTATUS {ERROR404, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::NotSupported:
            return CALLSTATUS {ERROR400, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::ServerError:
            return CALLSTATUS {ERROR500, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::BadRequest:
            return CALLSTATUS {ERROR400, errorMessage.c_str(), errorDescription.c_str()};
        case WSError::Id::Conflict:
            return CALLSTATUS {ERROR409, errorMessage.c_str(), errorDescription.c_str()};
        default:
            return CALLSTATUS {ERROR500, errorMessage.c_str(), errorDescription.c_str()};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS ConnectWebServicesClientC_FreeApi(CWSCCHANDLE apiHandle)
    {
    if (nullptr == apiHandle)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The apiHandle passed into the function is a nullptr."};

    LPCWSCC api = (LPCWSCC) apiHandle;
    free(api);
    return CALLSTATUS {SUCCESS, "Successful operation", "The ConnectWebServicesClientC_FreeApi completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadConnectUserList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* connectuserBuffer
)
    {
    VERIFY_API

    if (connectuserBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "connectuserBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ConnectUser"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCCONNECTUSERBUFFER connectuserBuf = (LPCWSCCCONNECTUSERBUFFER) calloc(instanceCount, sizeof(CWSCCCONNECTUSERBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCCONNECTUSERBUFFER bufToFill = connectuserBuf + instanceCount++;
        ConnectUserBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(connectuserBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_CONNECTUSER;
    buf->lpItems = connectuserBuf;

    *connectuserBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadConnectUserList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP UserName,
WCharCP UserEmail,
WCharP ConnectOrgGuid,
WCharCP UltimateSiteId,
WCharCP OrgName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ConnectUser";

    Json::Value propertiesJson;
    if (UserName != nullptr) propertiesJson["UserName"] = Utf8String(UserName);
    if (UserEmail != nullptr) propertiesJson["UserEmail"] = Utf8String(UserEmail);
    if (ConnectOrgGuid != nullptr) propertiesJson["ConnectOrgGuid"] = Utf8String(ConnectOrgGuid);
    if (UltimateSiteId != nullptr) propertiesJson["UltimateSiteId"] = Utf8String(UltimateSiteId);
    if (OrgName != nullptr) propertiesJson["OrgName"] = Utf8String(OrgName);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ConnectUser properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateConnectUser completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId,
CWSCCDATABUFHANDLE* connectuserBuffer
)
    {
    VERIFY_API

    if (connectuserBuffer == nullptr || connectuserId == nullptr || wcslen(connectuserId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "connectuserBuffer is a nullptr or connectuserId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCCONNECTUSERBUFFER connectuserBuf = (LPCWSCCCONNECTUSERBUFFER) calloc(1, sizeof(CWSCCCONNECTUSERBUFFER));
    ConnectUserBufferStuffer(connectuserBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(connectuserBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_CONNECTUSER;
    buf->lpItems = connectuserBuf;

    *connectuserBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadConnectUser completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId,
WCharCP UserName,
WCharCP UserEmail,
WCharP ConnectOrgGuid,
WCharCP UltimateSiteId,
WCharCP OrgName
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (UserName != nullptr) propertiesJson["UserName"] = Utf8String(UserName);
    if (UserEmail != nullptr) propertiesJson["UserEmail"] = Utf8String(UserEmail);
    if (ConnectOrgGuid != nullptr) propertiesJson["ConnectOrgGuid"] = Utf8String(ConnectOrgGuid);
    if (UltimateSiteId != nullptr) propertiesJson["UltimateSiteId"] = Utf8String(UltimateSiteId);
    if (OrgName != nullptr) propertiesJson["OrgName"] = Utf8String(OrgName);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ConnectUser properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateConnectUser completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteConnectUser
(
CWSCCHANDLE apiHandle,
WCharCP connectuserId
)
    {
    VERIFY_API

    if (connectuserId == nullptr || wcslen(connectuserId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "connectuserId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ConnectUser", Utf8String(connectuserId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteConnectUser completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadOrganizationList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "organizationBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "Organization"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCORGANIZATIONBUFFER organizationBuf = (LPCWSCCORGANIZATIONBUFFER) calloc(instanceCount, sizeof(CWSCCORGANIZATIONBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCORGANIZATIONBUFFER bufToFill = organizationBuf + instanceCount++;
        OrganizationBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(organizationBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_ORGANIZATION;
    buf->lpItems = organizationBuf;

    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadOrganizationList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateOrganization
(
CWSCCHANDLE apiHandle,
WCharP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Organization";

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid Organization properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateOrganization completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
CWSCCDATABUFHANDLE* organizationBuffer
)
    {
    VERIFY_API

    if (organizationBuffer == nullptr || organizationId == nullptr || wcslen(organizationId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "organizationBuffer is a nullptr or organizationId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCORGANIZATIONBUFFER organizationBuf = (LPCWSCCORGANIZATIONBUFFER) calloc(1, sizeof(CWSCCORGANIZATIONBUFFER));
    OrganizationBufferStuffer(organizationBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(organizationBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_ORGANIZATION;
    buf->lpItems = organizationBuf;

    *organizationBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadOrganization completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
WCharP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid Organization properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateOrganization completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId
)
    {
    VERIFY_API

    if (organizationId == nullptr || wcslen(organizationId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "organizationId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "Organization", Utf8String(organizationId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteOrganization completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "Project"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) calloc(instanceCount, sizeof(CWSCCPROJECTBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTBUFFER bufToFill = projectBuf + instanceCount++;
        ProjectBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_PROJECT;
    buf->lpItems = projectBuf;

    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateProject
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Project";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid Project properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateProject completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
CWSCCDATABUFHANDLE* projectBuffer
)
    {
    VERIFY_API

    if (projectBuffer == nullptr || projectId == nullptr || wcslen(projectId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectBuffer is a nullptr or projectId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) calloc(1, sizeof(CWSCCPROJECTBUFFER));
    ProjectBufferStuffer(projectBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECT;
    buf->lpItems = projectBuf;

    *projectBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProject completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid Project properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateProject completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId
)
    {
    VERIFY_API

    if (projectId == nullptr || wcslen(projectId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "Project", Utf8String(projectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteProject completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectFavoriteList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectfavoriteBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectFavorite"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) calloc(instanceCount, sizeof(CWSCCPROJECTFAVORITEBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTFAVORITEBUFFER bufToFill = projectfavoriteBuf + instanceCount++;
        ProjectFavoriteBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectfavoriteBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    buf->lpItems = projectfavoriteBuf;

    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectFavoriteList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectFavorite";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectFavorite properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateProjectFavorite completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
)
    {
    VERIFY_API

    if (projectfavoriteBuffer == nullptr || projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectfavoriteBuffer is a nullptr or projectfavoriteId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) calloc(1, sizeof(CWSCCPROJECTFAVORITEBUFFER));
    ProjectFavoriteBufferStuffer(projectfavoriteBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectfavoriteBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTFAVORITE;
    buf->lpItems = projectfavoriteBuf;

    *projectfavoriteBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectFavorite completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectFavorite properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateProjectFavorite completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId
)
    {
    VERIFY_API

    if (projectfavoriteId == nullptr || wcslen(projectfavoriteId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectfavoriteId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectFavorite", Utf8String(projectfavoriteId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteProjectFavorite completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectMRUList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmruBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRU"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) calloc(instanceCount, sizeof(CWSCCPROJECTMRUBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUBUFFER bufToFill = projectmruBuf + instanceCount++;
        ProjectMRUBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmruBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_PROJECTMRU;
    buf->lpItems = projectmruBuf;

    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectMRUList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRU";

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectMRU properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateProjectMRU completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr || projectmruId == nullptr || wcslen(projectmruId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmruBuffer is a nullptr or projectmruId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) calloc(1, sizeof(CWSCCPROJECTMRUBUFFER));
    ProjectMRUBufferStuffer(projectmruBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmruBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRU;
    buf->lpItems = projectmruBuf;

    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectMRU completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectMRU properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateProjectMRU completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId
)
    {
    VERIFY_API

    if (projectmruId == nullptr || wcslen(projectmruId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmruId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteProjectMRU completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectMRUDetailList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmrudetailBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRUDetail"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) calloc(instanceCount, sizeof(CWSCCPROJECTMRUDETAILBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUDETAILBUFFER bufToFill = projectmrudetailBuf + instanceCount++;
        ProjectMRUDetailBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmrudetailBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    buf->lpItems = projectmrudetailBuf;

    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectMRUDetailList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateProjectMRUDetail
(
CWSCCHANDLE apiHandle,
bool* IsFavorite,
int64_t* LastAccessedByUser,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRUDetail";

    Json::Value propertiesJson;
    if (IsFavorite != nullptr) propertiesJson["IsFavorite"] = *IsFavorite;
    if (LastAccessedByUser != nullptr) propertiesJson["LastAccessedByUser"] = *LastAccessedByUser;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectMRUDetail properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateProjectMRUDetail completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
)
    {
    VERIFY_API

    if (projectmrudetailBuffer == nullptr || projectmrudetailId == nullptr || wcslen(projectmrudetailId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmrudetailBuffer is a nullptr or projectmrudetailId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) calloc(1, sizeof(CWSCCPROJECTMRUDETAILBUFFER));
    ProjectMRUDetailBufferStuffer(projectmrudetailBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmrudetailBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTMRUDETAIL;
    buf->lpItems = projectmrudetailBuf;

    *projectmrudetailBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectMRUDetail completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
bool* IsFavorite,
int64_t* LastAccessedByUser,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP PWDMInvitationId
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (IsFavorite != nullptr) propertiesJson["IsFavorite"] = *IsFavorite;
    if (LastAccessedByUser != nullptr) propertiesJson["LastAccessedByUser"] = *LastAccessedByUser;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (PWDMInvitationId != nullptr) propertiesJson["PWDMInvitationId"] = Utf8String(PWDMInvitationId);
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectMRUDetail properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateProjectMRUDetail completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId
)
    {
    VERIFY_API

    if (projectmrudetailId == nullptr || wcslen(projectmrudetailId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projectmrudetailId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectMRUDetail", Utf8String(projectmrudetailId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteProjectMRUDetail completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectTemplateList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projecttemplateBuffer
)
    {
    VERIFY_API

    if (projecttemplateBuffer == nullptr)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projecttemplateBuffer is a nullptr."};

    auto result = api->m_wsRepositoryClientPtr->SendQueryRequest(WSQuery("GlobalSchema", "ProjectTemplate"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    int instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        instanceCount++;
    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) calloc(instanceCount, sizeof(CWSCCPROJECTTEMPLATEBUFFER));
    instanceCount = 0;
    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTTEMPLATEBUFFER bufToFill = projecttemplateBuf + instanceCount++;
        ProjectTemplateBufferStuffer(bufToFill, instance.GetProperties());
        }

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projecttemplateBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = instanceCount;
    buf->lType = BUFF_TYPE_PROJECTTEMPLATE;
    buf->lpItems = projecttemplateBuf;

    *projecttemplateBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectTemplateList completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_CreateProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectTemplate";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectTemplate properties passed in."};
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    auto result = api->m_wsRepositoryClientPtr->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_CreateProjectTemplate completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_ReadProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId,
CWSCCDATABUFHANDLE* projecttemplateBuffer
)
    {
    VERIFY_API

    if (projecttemplateBuffer == nullptr || projecttemplateId == nullptr || wcslen(projecttemplateId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projecttemplateBuffer is a nullptr or projecttemplateId is nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendGetObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) calloc(1, sizeof(CWSCCPROJECTTEMPLATEBUFFER));
    ProjectTemplateBufferStuffer(projecttemplateBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projecttemplateBuf);
        return CALLSTATUS {INTERNAL_MEMORY_ERROR, "Memory failed to initialize interally.", "Failed to calloc memory for CWSCCBUFFER."};
        }

    buf->lCount = 1;
    buf->lType = BUFF_TYPE_PROJECTTEMPLATE;
    buf->lpItems = projecttemplateBuf;

    *projecttemplateBuffer = (CWSCCDATABUFHANDLE) buf;

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_ReadProjectTemplate completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_UpdateProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (OrganizationId != nullptr) propertiesJson["OrganizationId"] = Utf8String(OrganizationId);
    if (Active != nullptr) propertiesJson["Active"] = *Active;
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (propertiesJson.size() == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "There were not any valid ProjectTemplate properties passed in."};

    auto result = api->m_wsRepositoryClientPtr->SendUpdateObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_UpdateProjectTemplate completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DeleteProjectTemplate
(
CWSCCHANDLE apiHandle,
WCharCP projecttemplateId
)
    {
    VERIFY_API

    if (projecttemplateId == nullptr || wcslen(projecttemplateId) == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "projecttemplateId is a nullptr or empty."};

    auto result = api->m_wsRepositoryClientPtr->SendDeleteObjectRequest({"GlobalSchema", "ProjectTemplate", Utf8String(projecttemplateId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    return CALLSTATUS {SUCCESS, "Successful operation", "ConnectWebServicesClientC_DeleteProjectTemplate completed successfully."};
    }

