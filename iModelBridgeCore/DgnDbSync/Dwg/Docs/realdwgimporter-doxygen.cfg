# Doxyfile 1.8.2

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project.
#
# All text after a hash (#) is considered a comment and will be ignored.
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ").

#---------------------------------------------------------------------------
# Inherit DgnPlatform configuration
#---------------------------------------------------------------------------

@INCLUDE = $(BuildContext)SubParts/BentleyDocConfig/bentley-doxygen.cfg

#---------------------------------------------------------------------------
# Append DwgImporter macro expansions
#---------------------------------------------------------------------------

PREDEFINED += \
	"DWGTOOLKIT_RealDwg=1" \
	\
    "BEGIN_DWG_NAMESPACE=namespace BentleyApi{namespace Dwg{" \
    "END_DWG_NAMESPACE=}}" \
    "USING_NAMESPACE_DWG=using namespace BentleyApi::Dwg;" \
    \
    "BEGIN_DWGDB_NAMESPACE=namespace BentleyApi{namespace DwgDb{" \
    "END_DWGDB_NAMESPACE=}}" \
    "USING_NAMESPACE_DWGDB=using namespace BentleyApi::DwgDb;" \
	\
	"DWGDB_EXTENDCLASS(_name_)=AcDb##_name_# or OdDb##_name_" \
    "DWGRX_EXTENDCLASS(_name_)=AcRx##_name_# or OdRx##_name_" \
    "DWGGI_EXTENDCLASS(_name_)=AcGi##_name_# or OdGi##_name_" \
    "DWGROOTCLASS_EXTEND(_name_)=Ac##_name_# or Od##_name_" \
	\
    "DWG_Type(_name_)=Ac##_name_" \
    "DWGCM_Type(_name_)=AcCm##_name" \
    "DWGDB_Type(_name_)=AcDb##_name_" \
    "DWGGE_Type(_name_)=AcGe##_name_" \
    "DWGGI_Type(_name_)=AcGi##_name_" \
	\
    "DWGRX_DECLARE_RX_MEMBERS(_name_)=/*! The RX class of the _name_ object. */ DWGDB_EXPORT static AcRxClass* Desc(); /*! The toolkit's RX class from which DwgDb##_name_ class extends. */ DWGDB_EXPORT static AcRxClass* SuperDesc(); /*! Create a new RX object for a protocal extension class of DwgDb##_name_*/ DWGDB_EXPORT static AcRxObject* CreateObject(); DWGDB_EXPORT static DwgDb##_name_##P Cast(AcRxObject const* rxObj); DWGDB_EXPORT AcRxObject* QueryX(AcRxClass const* c) const; DWGDB_EXPORT AcRxObject* GetX (AcRxClass const* c) const; DWGDB_EXPORT AcRxClass* IsA () const;" \
    "DWGDB_OBJECT_DECLARE_MEMBERS(_name_)=DWGRX_DECLARE_RX_MEMBERS(##_name_##) \
	/*! Get the object ID of this _name_. If the _name_ is not a database resident, the returned ID is invalid. */ \
    DWGDB_EXPORT DwgDbObjectId GetObjectId() const; \
	/*! Get the parent object ID of this _name_. If the parent object is not a database resident, the returned ID is invalid. */ \
    DWGDB_EXPORT DwgDbObjectId GetOwnerId() const; \
	/*! Get the database in which this _name_ object is a resident */ \
    DWGDB_EXPORT DwgDbDatabasePtr GetDatabase() const; \
	/*! Upgrade the _name_ open mode from current open mode */ \
    DWGDB_EXPORT DwgDbStatus UpgradeOpen(); \
	/*! Downgrade the _name_ open mode from current open mode */ \
    DWGDB_EXPORT DwgDbStatus DowngradeOpen(); \
    /*! Explicitly close the _name_. This is usually unnecessary as a smart pointer automatically closes this _name_ when it goes out of scope. */ \
    DWGDB_EXPORT DwgDbStatus Close(); \
	/*! Get the DXF name of the class that defines this _name_ */ \
    DWGDB_EXPORT DwgString GetDxfName() const; \
	/*! Get the name of the class that defines _name_ */ \
    DWGDB_EXPORT DwgString GetDwgClassName() const; \
    /*! Extract XDATA from the _name_ by regApp name. An empty regApp name extracts all XDATA. */ \
    DWGDB_EXPORT DwgResBufIterator GetXData (DwgStringCR name=DwgString()) const; \
    /*! A callback method for DxfOut */ \
    DWGDB_EXPORT DwgDbStatus DxfOutFields (IDxfFilerR filer) const; \
    /*! A DXF output filer method, which calls DxfOutFields for each & every DXF group code */ \
    DWGDB_EXPORT DwgDbStatus DxfOut (IDxfFilerR filer) const; \
    /*! Create an extended dictionary for this _name_ object */ \
    DWGDB_EXPORT DwgDbStatus CreateExtensionDictionary (); \
    /*! Remove the extension dictionary from this _name_ object */ \
    DWGDB_EXPORT DwgDbStatus ReleaseExtensionDictionary (); \
    /*! Get the object ID of the extended dictionary on this _name_ */ \
    DWGDB_EXPORT DwgDbObjectId GetExtensionDictionary () const; \
    /*! Create an xRecord from the input binary data and set it as an extended dictionary with the input key to this _name_ object */ \
    /*! key => Input key of the extension dictionary on which a binary xRecord will be either created or updated from the input data \
    /*! size => Input number of bytes of the binary data */ \
    /*! data => Input binary data to be set on the _name_ object */ \
    DWGDB_EXPORT DwgDbStatus SetBinaryData (DwgStringCR key, size_t size, const char* data); \
    /*! Extract binary data from an xRecord of the extended dictionary that matches the input key.  Caller responsible to free the returned data memory. */ \
    /*! key => Input key of the extension dictionary */ \
    /*! size <= Output number of bytes extracted and stored in the output binary data */ \
    /*! data <= Newly allocated memory filled with extracted binary data */ \
    DWGDB_EXPORT DwgDbStatus GetBinaryData (DwgStringCR key, size_t& size, char*& data) const;" \
	\
	"DWGDB_DECLARE_BASECLASS_MEMBERS(_name_)=DWGDB_OBJECT_DECLARE_MEMBERS(##_name_##);" \
	"DWGDB_DECLARE_COMMON_MEMBERS(_name_)=DWGDB_DECLARE_BASECLASS_MEMBERS(##_name_##) /*! Create a new object intended to be saved to DWG file, e.g. DwgDb##_name_##Ptr ent = DwgDb##_name_##::Create(); */ DWGDB_EXPORT static DwgDb##_name_##* Create();" \
	"DWGDB_OVERRIDE_SMARTPTR_INTERFACE(_name_)=virtual bool _IsNull() const override; virtual Dwg##_name_##CP _Get() const override; virtual Dwg##_name_##P _Get() override; virtual DwgDbStatus _OpenObject(DwgDbObjectId id,DwgDbOpenMode mode,bool openErased=false, bool openLocked=false) override; virtual DwgDbStatus _AcquireObject(Dwg##_name_##P& obj) override; virtual DwgDbStatus _CreateObject() override; virtual DwgDbStatus _CloseObject() override;" \
	"DWGDB_PUBLIC_SMARTPTR_METHODS(_name_)=DWGDB_EXPORT bool IsNull() const; DWGDB_EXPORT Dwg##_name_##CP get() const; DWGDB_EXPORT Dwg##_name_##P get(); DWGDB_EXPORT DwgDbStatus OpenObject(DwgDbObjectId id,DwgDbOpenMode mode,bool openErased=false, bool openLocked=false); DWGDB_EXPORT DwgDbStatus AcquireObject(Dwg##_name_##P& obj); DWGDB_EXPORT DwgDbStatus CloseObject();" \
	"DWGDB_DEFINE_OBJECTPTR(_name_)=class DwgDb##_name_##Ptr : public AcDbSmartObjectPointer<AcDb##_name_##>, public IDwgDbSmartPtr<DwgDb##_name_##> { protected: DWGDB_OVERRIDE_SMARTPTR_INTERFACE(Db##_name_##); public: DWGDB_ADD_SMARTPTR_CONSTRUCTORS(Db##_name_##); DWGDB_EXPORT DwgDb##_name_##Ptr(DwgDbObjectId id, DwgDbOpenMode mode = DwgDbOpenMode::ForRead, bool openErased = false, bool openLocked = false); DWGDB_EXPORT DwgDb##_name_##Ptr(DwgDb##_name_##P obj); DWGDB_EXPORT DwgDb##_name_##Ptr& operator = (DwgDb##_name_##P obj); DWGDB_PUBLIC_SMARTPTR_METHODS(Db##_name_##) };"
