/*--------------------------------------------------------------------------------------+
|
|  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
|
+--------------------------------------------------------------------------------------*/
#if defined(_WIN32)
#define UNICODE
#include <Windows.h>
#endif
#include <iModelBridge/iModelBridgeBimHost.h>
#include <Bentley/BeDirectoryIterator.h>
#include <Bentley/Desktop/FileSystem.h>

USING_NAMESPACE_BENTLEY_DGN
USING_NAMESPACE_BENTLEY_LOGGING

#undef min
#undef max

#undef LOG
#define LOG (*LoggingManager::GetLogger(L"iModelBridge"))

BeFileName  iModelBridgeKnownLocationsAdmin::s_tempDirectory;

//---------------------------------------------------------------------------------------
// @bsimethod                                                   Jeff.Marker     09/2015
//---------------------------------------------------------------------------------------
DgnFontCR iModelBridgeFontAdmin::_ResolveFont(DgnFontCP font)
    {
    // Don't override a functional scenario.
    if ((nullptr != font) && (font->IsResolved()))
        return *font;
    
    // If a converter was registered, allow it to attempt to look up a workspace font.
    if (nullptr != m_bridge)
        {
        DgnFontCP workspaceFont = m_bridge->_TryResolveFont(font);
        if ((nullptr != workspaceFont) && (workspaceFont->IsResolved()))
            return *workspaceFont;
        }

    // Otherwise use fallback behavior (e.g. will look up a last resort font for us).
    return T_Super::_ResolveFont(font);
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                    Paul.Connelly   03/18
+---------------+---------------+---------------+---------------+---------------+------*/
bool iModelBridgeViewManager::_ForceSoftwareRendering()
    {
    // In the common case, we're running on a server, probably inside a VM...no guaranteed access to a usable GPU.
    // Possible future optimization: determine if we're running on local machine (inside MicroStation?) and use GPU if possible.
    return true;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                    Keith.Bentley                   02/16
+---------------+---------------+---------------+---------------+---------------+------*/
Display::SystemContext* iModelBridgeViewManager::_GetSystemContext() 
    {
#if defined(_WIN32)
    // We don't want to render to a window, and we may not be able to depending upon the context in which we're executing.
    // Returning nullptr tells DgnView to render to an in-memory, offscreen buffer instead. (aka a 'p-buffer')
    return nullptr;
#else
    return m_systemContext;
#endif
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                    Sam.Wilson                      04/17
+---------------+---------------+---------------+---------------+---------------+------*/
BeFileNameCR iModelBridgeKnownLocationsAdmin::_GetLocalTempDirectoryBaseName()
    {
    static std::once_flag s_setTempDir;
    std::call_once(s_setTempDir, []()
        {
        Desktop::FileSystem::BeGetTempPath(s_tempDirectory);
        });
    return s_tempDirectory;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                    Sam.Wilson                      04/17
+---------------+---------------+---------------+---------------+---------------+------*/
BeSQLite::L10N::SqlangFiles iModelBridgeBimHost::_SupplySqlangFiles() 
    {
    return BeSQLite::L10N::SqlangFiles(m_fwkSqlangPath);
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                    Paul.Connelly   03/18
+---------------+---------------+---------------+---------------+---------------+------*/
bool iModelBridgeBimHost::_IsFeatureEnabled(Utf8CP featureName)
    {
    // Ensure view attachments included in thumbnails generated by bridge.
    return 0 == strcmp(featureName, "Platform.RenderViewAttachments");
    }

