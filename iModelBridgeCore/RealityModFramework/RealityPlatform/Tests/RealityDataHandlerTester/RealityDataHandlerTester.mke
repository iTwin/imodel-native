#--------------------------------------------------------------------------------------
#
#     $Source: RealityPlatform/Tests/RealityDataHandlerTester/RealityDataHandlerTester.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
%include mdl.mki

appName     = RealityDataHandlerTester
%include $(SrcRoot)RealityModFramework/mki/RealityModFrameworkCommon.mki

RealityDataHandlerTesterDir = $(_MakeFilePath)

#----------------------------------------------------------------------
#       Create output directories
#----------------------------------------------------------------------
always:
    !~@mkdir $(o)
    
#----------------------------------------------------------------------
#       Build source files
#----------------------------------------------------------------------
# Create PCH
CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110
$(o)StdAfx$(oext) $(o)$(appName).pch : $(RealityDataHandlerTesterDir)StdAfx.cpp $(RealityDataHandlerTesterDir)StdAfx.h

# Use PCH
CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110

MultiCompileDepends=$(_MakeFileSpec) $(RealityDataHandlerTesterDir)StdAfx.h
%include MultiCppCompileRule.mki

%include compileForCLRStart.mki

$(o)RealityDataHandlerTester$(oext) : $(RealityDataHandlerTesterDir)RealityDataHandlerTester.cpp ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki

%include compileForCLRStop.mki

# Is this required? Build goes well without it...
#ProductRcIncludes + -i${RealityDataHandlerTesterDir}


#----------------------------------------------------------------------
#       DLL creation
#----------------------------------------------------------------------
EXE_DEST = $(OutputRootDir)Product/RealityModFramework/
EXE_NAME = $(appName)
EXE_OBJS = $(o)StdAfx$(oext) $(MultiCompileObjectList)

LINKER_LIBRARIES = $(ContextSubpartsLibs)Bentley.lib \
                   $(ContextSubpartsLibs)BentleyAllocator.lib  \
                   $(ContextSubpartsLibs)BentleyGeom.lib \
                   $(ContextSubpartsLibs)BeCurl.lib \
				   $(ContextDeliveryDir)RealityPlatform.lib \
				   Gdi32.lib


# remove console options; let the system determine the entry point
# NOTE: Consequently prevents linking errors when using \entry linker
# option with managed c++ code.
%undef consoleOpts

%include $(SharedMki)linktool.mki

    
