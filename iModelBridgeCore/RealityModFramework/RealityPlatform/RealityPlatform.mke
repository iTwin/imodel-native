#--------------------------------------------------------------------------------------
#
#     $Source: RealityPlatform/RealityPlatform.mke $
#    $RCSfile: imagepp.mke,v $
#   $Revision: 1.50 $
#       $Date: 2007/03/07 13:34:13 $
#     $Author: Bern.McCarty $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
appName = RealityPlatform
baseDir	= $(_MakeFilePath)

policyFile = $(_MakeFilePath)../mki/AssertRealityModFrameworkPolicy.mki
%include mdl.mki

PublicApiDir    = $(OutBuildContexts)RealityModFramework/PublicAPI/RealityPlatform/


#----------------------------------------------------------------------
#       Create output directories
#----------------------------------------------------------------------
always:
    !~@mkdir $(o)

CCompPDBName = $(appName)

#----------------------------------------------------------------------
#   Define __REALITYPLATFORM_BUILD__ symbol, so that class declarations and function decls will
#   know to specify dllexport, rather than dllimport (the default)
#   !No other makefile should define this symbol!
#----------------------------------------------------------------------
nameToDefine=__REALITYPLATFORM_BUILD__
%include cdefapnd.mki


#----------------------------------------------------------------------
#       Build source files
#----------------------------------------------------------------------
# Create PCH
CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110
$(o)StdAfx$(oext) $(o)$(appName).pch : $(baseDir)StdAfx.cpp $(baseDir)StdAfx.h $(PublicApiDir)RealityDataProvider.h

# Use PCH
CCPchOpts = -Yu"StdAfx.h" -Fp$(o)$(appName).pch -Zm110

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(o)RealityPlatformAdmins$(oext) : $(baseDir)RealityPlatformAdmins.cpp ${MultiCompileDepends}

$(o)RealityDataProvider$(oext) : $(baseDir)RealityDataProvider.cpp $(PublicApiDir)RealityDataProvider.h ${MultiCompileDepends}

$(o)PointCloudVortex$(oext) : $(baseDir)PointCloudVortex.cpp $(baseDir)PointCloudVortex.h ${MultiCompileDepends}

$(o)RealityPlatformUtil$(oext) : $(baseDir)RealityPlatformUtil.cpp $(baseDir)RealityPlatformUtil.h ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki

#----------------------------------------------------------------------
#       Lib creation
#----------------------------------------------------------------------
DLM_NAME            = $(appName)
DLM_OBJECT_FILES    = $(MultiCompileObjectList)
DLM_NO_SIGN	    = 1


LINKER_LIBRARIES    =  $(ContextSubpartsLibs)$(libprefix)Bentley.lib \
                       $(ContextSubpartsLibs)$(libprefix)BentleyAllocator.lib \
					   $(ContextSubpartsLibs)IppGraLibs.lib \
					   $(ContextSubpartsLibs)IppUtlLibs.lib \
                       $(ContextSubpartsLibs)BentleyGeom.lib \
                       $(ContextSubpartsLibs)BaseGeoCoord.lib
                       

%include dlmlink.mki


