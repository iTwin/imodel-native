#--------------------------------------------------------------------------------------
#
#     $Source: RealityAdmin/RealityAdmin.mke $
#
#  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
%include mdl.mki

appName         = RealityAdmin
baseDir         = $(_MakeFilePath)

%include $(SrcRoot)RealityModFramework/mki/RealityModFrameworkCommon.mki

PublicApiDir    = $(OutBuildContexts)RealityModFramework/PublicAPI/RealityPlatform/


#----------------------------------------------------------------------
#       Create output directories
#----------------------------------------------------------------------
always:
    !~@mkdir $(o)

CCompPDBName = $(appName)

#----------------------------------------------------------------------
#   Define __REALITYPLATFORM_BUILD__ symbol, so that class declarations and function decls will
#   know to specify dllexport, rather than dllimport (the default)
#   !No other makefile should define this symbol!
#----------------------------------------------------------------------
nameToDefine=__REALITYPLATFORM_BUILD__
%include cdefapnd.mki

nameToDefine=__WMSPARSER_BUILD__
%include cdefapnd.mki

#----------------------------------------------------------------------
#       Build source files
#----------------------------------------------------------------------
# Create PCH
#CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110
#$(o)StdAfx$(oext) $(o)$(appName).pch : $(baseDir)StdAfx.cpp $(baseDir)StdAfx.h  $(PublicApiDir)RealityDataProvider.h

# Use PCH
#CCPchOpts = -Yu"StdAfx.h" -Fp$(o)$(appName).pch -Zm110

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(o)RealityPlatformUtil$(oext) : $(baseDir)RealityPlatformUtil.cpp $(baseDir)RealityPlatformUtil.h ${MultiCompileDepends}

$(o)RealityDataHandler$(oext) : $(baseDir)RealityDataHandler.cpp $(baseDir)RealityDataHandler.h ${MultiCompileDepends}

$(o)RasterDataHandler$(oext) : $(baseDir)RasterDataHandler.cpp ${MultiCompileDepends}

$(o)PointCloudDataHandler$(oext) : $(baseDir)PointCloudDataHandler.cpp ${MultiCompileDepends}

$(o)RealityPlatformAdmins$(oext) : $(baseDir)RealityPlatformAdmins.cpp $(baseDir)RealityPlatformAdmins.h $(PublicApiDir)RealityPlatformAPI.h ${MultiCompileDepends}

$(o)PointCloudVortex$(oext) : $(baseDir)PointCloudVortex.cpp $(baseDir)PointCloudVortex.h ${MultiCompileDepends}

$(o)WMSDataHandler$(oext) : $(baseDir)WMSDataHandler.cpp ${MultiCompileDepends}

$(o)WMSCapabilities$(oext) : $(baseDir)WMSCapabilities.cpp $(baseDir)WMSCapabilities.h $(baseDir)WMSTag.h ${MultiCompileDepends}

$(o)FtpTraversalEngine$(oext) : $(baseDir)FtpTraversalEngine.cpp $(baseDir)FtpTraversalEngine.h ${MultiCompileDepends}

$(o)HttpTraversalEngine$(oext) : $(baseDir)HttpTraversalEngine.cpp $(baseDir)HttpTraversalEngine.h ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki

#----------------------------------------------------------------------
#       Lib creation
#----------------------------------------------------------------------
DLM_NAME            = $(appName)
DLM_OBJECT_FILES    = $(MultiCompileObjectList)
DLM_NO_SIGN         = 1


LINKER_LIBRARIES    =  $(ContextSubpartsLibs)$(libprefix)Bentley$(libext) \
                       $(ContextSubpartsLibs)ImagePP$(libext) \
                       $(ContextSubpartsLibs)BentleyGeom$(libext) \
                       $(ContextSubpartsLibs)BaseGeoCoord$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)BeCurl$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)BeZLib$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)BeXml$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)BeJsonCpp$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)PointoolsVortexAPI$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)RealityPackage$(libext) \
                       $(ContextSubpartsLibs)$(libprefix)RealityPlatform$(libext)

# windows specific for Unzipfile
LINKER_LIBRARIES   +  $(ntPlatformLib)OleAut32.lib                       

%include dlmlink.mki


