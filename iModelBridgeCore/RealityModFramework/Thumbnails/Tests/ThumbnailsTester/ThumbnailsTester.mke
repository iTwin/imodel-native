#--------------------------------------------------------------------------------------
#
#     $Source: Thumbnails/Tests/ThumbnailsTester/ThumbnailsTester.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

appName = ThumbnailsTester

policyFile = $(SrcRoot)RealityModFramework/mki/AssertRealityModFrameworkPolicy.mki
%include mdl.mki

ThumbnailsTesterDir = $(_MakeFilePath)

#----------------------------------------------------------------------
#       Create output directories
#----------------------------------------------------------------------
always:
    !~@mkdir $(o)
    
#----------------------------------------------------------------------
#       Build source files
#----------------------------------------------------------------------
# Create PCH
CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110
$(o)StdAfx$(oext) $(o)$(appName).pch : $(ThumbnailsTesterDir)StdAfx.cpp $(ThumbnailsTesterDir)StdAfx.h

# Use PCH
CCPchOpts = -Yc"StdAfx.h" -Fp$(o)$(appName).pch -Zm110

MultiCompileDepends=$(_MakeFileSpec) $(ThumbnailsTesterDir)StdAfx.h
%include MultiCppCompileRule.mki

%include compileForCLRStart.mki

$(o)ThumbnailsTester$(oext) : $(ThumbnailsTesterDir)ThumbnailsTester.cpp ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki

%include compileForCLRStop.mki

# Is this required? Build goes well without it...
#ProductRcIncludes + -i${ThumbnailsTesterDir}


#----------------------------------------------------------------------
#       DLL creation
#----------------------------------------------------------------------
EXE_DEST = $(OutputRootDir)Product/RealityModFramework/
EXE_NAME = $(appName)
EXE_OBJS = $(o)StdAfx$(oext) $(MultiCompileObjectList)

#LINKER_LIBRARIES_DELAYLOADED  =  $(ntPlatformLib)Vfw32.lib

#$(ContextSubpartsLibs)IppGraLibs.lib \
#                   $(ContextSubpartsLibs)IppUtlLibs.lib \
#                   $(ContextSubpartsLibs)IppImaging.lib \

LINKER_LIBRARIES = $(ContextSubpartsLibs)Bentley.lib \
                   $(ContextSubpartsLibs)BentleyAllocator.lib  \
				   $(ContextDeliveryDir)Thumbnails.lib \
				   Gdi32.lib

# remove console options; let the system determine the entry point
# NOTE: Consequently prevents linking errors when using \entry linker
# option with managed c++ code.
%undef consoleOpts

%include $(SharedMki)linktool.mki

    
