#---------------------------------------------------------------------------------------+
#
#     $Source: structural.mke $
#
#  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
#
#---------------------------------------------------------------------------------------+
%include mdl.mki

CompileOptionsMki   = $(SrcRoot)DgnDomains/Structural/StructuralCompileOptions.mki
%include $(CompileOptionsMki)

StructPhysical          = $(_MakeFilePath)StructuralPhysical/
StructPhysicalPublicAPI = $(StructPhysical)PublicAPI/

#--------------------------------------------------------------------------------------
#   Macros
#--------------------------------------------------------------------------------------
appSrc              = $(_MakeFilePath)
appPublicApi        = $(appSrc)PublicAPI/$(appName)/
MultiCompileDepends = $(_MakeFileSpec) \

always:
    !~@mkdir $(o)

#----------------------------------------------------------------------
#   Pre-compiled header
#----------------------------------------------------------------------
# PchCompiland        = $(appSrc)___.cpp
# PchOutputDir        = $(o)
# PchExtraOptions     = -Zm160
# PchExplicitDepends  = $(MultiCompileDepends)

%if defined (winNT) && $(BUILD_TOOLSET) == "LINUX_GCC"
    # Avoid internal compiler error in GCC using windows ndk toolchain
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif

# %include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)


StructCommon            = $(_MakeFilePath)StructuralCommon/
StructCommonPublicAPI   = $(StructCommon)PublicAPI/StructuralCommon/

StructPhys            = $(_MakeFilePath)StructuralPhysical/
StructPhysPublicAPI   = $(StructPhys)PublicAPI/StructuralPhysical/


#--------------------------------------------------------------------------------------
#   Compile source
#--------------------------------------------------------------------------------------

%include MultiCppCompileRule.mki

$(o)StructuralCommonDomain$(oext) : $(StructCommon)StructuralCommonDomain.cpp ${MultiCompileDepends} $(StructCommonPublicAPI)StructuralCommonDomain.h

$(o)StructuralPhysicalModel$(oext) : $(StructCommon)StructuralPhysicalModel.cpp ${MultiCompileDepends} $(StructCommonPublicAPI)StructuralPhysicalModel.h

$(o)StructuralTypeDefinitionModel$(oext) : $(StructCommon)StructuralTypeDefinitionModel.cpp ${MultiCompileDepends} $(StructCommonPublicAPI)StructuralTypeDefinitionModel.h

$(o)StructuralPhysicalDomain$(oext) : $(StructPhys)StructuralPhysicalDomain.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)StructuralPhysicalDomain.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)StructuralElement$(oext) : $(StructPhys)StructuralElement.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)StructuralElement.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)StructuralMember$(oext) : $(StructPhys)StructuralMember.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)StructuralMember.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)SurfaceMember$(oext) : $(StructPhys)SurfaceMember.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)SurfaceMember.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)Slab$(oext) : $(StructPhys)Slab.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)Slab.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)Wall$(oext) : $(StructPhys)Wall.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)Wall.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)CurveMember$(oext) : $(StructPhys)CurveMember.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)CurveMember.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)Beam$(oext) : $(StructPhys)Beam.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)Beam.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)Column$(oext) : $(StructPhys)Column.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)Column.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)Brace$(oext) : $(StructPhys)Brace.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)Brace.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)FoundationMember$(oext) : $(StructPhys)FoundationMember.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)FoundationMember.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)StripFooting$(oext) : $(StructPhys)StripFooting.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)StripFooting.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

$(o)SpreadFooting$(oext) : $(StructPhys)SpreadFooting.cpp ${MultiCompileDepends} $(StructPhysPublicAPI)SpreadFooting.h $(StructCommonPublicAPI)StructuralCommonDefinitions.h

%include MultiCppCompileGo.mki

#--------------------------------------------------------------------------------------
#   Create the library
#--------------------------------------------------------------------------------------
DLM_NAME                    = $(appName)
DLM_OBJECT_FILES            = $(MultiCompileObjectList)
DLM_OBJECT_DEST             = $(o)
# DLM_OBJECT_PCH              = $(o)____$(oext) 
DLM_DEST                    = $(o)
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1
DLM_NO_DLS                  = 1
DLM_NO_DEF                  = 1
DLM_CONTEXT_LOCATION        = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION    = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

LINKER_LIBRARIES            = $(BuildContext)SubParts/Libs/$(libprefix)BeSQLite$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BeSQLiteEC$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BentleyGeom$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BentleyGeomSerialization$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)ECObjects$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)DgnPlatform$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BeXml$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BeLibxml2$(libext)
LINKER_LIBRARIES            + $(BuildContext)SubParts/Libs/$(libprefix)BeJsonCpp$(libext)

%include $(sharedMki)linkLibrary.mki

