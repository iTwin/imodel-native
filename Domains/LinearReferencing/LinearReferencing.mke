#---------------------------------------------------------------------------------------+
#
#  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
#
#---------------------------------------------------------------------------------------+
%include LinearReferencing.Analyzer.mki
%include mdl.mki
%include $(SrcRoot)imodel02/Domains/LinearReferencing/LinearReferencing.mki

#--------------------------------------------------------------------------------------
#   Macros
#--------------------------------------------------------------------------------------
appSrc              = $(_MakeFilePath)
appPublicApi        = $(appSrc)PublicAPI/$(appName)/
MultiCompileDepends = $(_MakeFileSpec) $(appSrc)LinearReferencingInternal.h $(appPublicApi)LinearReferencingApi.h

always:
    !~@mkdir $(o)

#----------------------------------------------------------------------
#   Pre-compiled header
#----------------------------------------------------------------------
PchCompiland        = $(appSrc)LinearReferencingInternal.cpp
PchOutputDir        = $(o)
PchExtraOptions     = -Zm160
PchExplicitDepends  = $(MultiCompileDepends)

%if defined (winNT) && $(BUILD_TOOLSET) == "LINUX_GCC"
    # Avoid internal compiler error in GCC using windows ndk toolchain
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif

CompileOptionsMki =$(SrcRoot)imodel02/Domains/LinearReferencing/LinearReferencing.mki
%include $(CompileOptionsMki)
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

#--------------------------------------------------------------------------------------
#   Compile source
#--------------------------------------------------------------------------------------
%include MultiCppCompileRule.mki

$(o)DistanceExpression$(oext) : $(_MakeFilePath)DistanceExpression.cpp ${MultiCompileDepends} $(appPublicApi)DistanceExpression.h

$(o)ILinearElement$(oext) : $(_MakeFilePath)ILinearElement.cpp ${MultiCompileDepends} $(appPublicApi)ILinearElement.h

$(o)LinearlyLocated$(oext) : $(_MakeFilePath)LinearlyLocated.cpp ${MultiCompileDepends} $(appPublicApi)LinearlyLocated.h

$(o)LinearlyReferencedLocation$(oext) : $(_MakeFilePath)LinearlyReferencedLocation.cpp ${MultiCompileDepends} $(appPublicApi)LinearlyReferencedLocation.h

$(o)LinearReferencingDomain$(oext) : $(_MakeFilePath)LinearReferencingDomain.cpp ${MultiCompileDepends} $(appPublicApi)LinearReferencingDomain.h

$(o)Segmentation$(oext) : $(_MakeFilePath)Segmentation.cpp ${MultiCompileDepends} $(appPublicApi)Segmentation.h

%include MultiCppCompileGo.mki

#--------------------------------------------------------------------------------------
#   Create the library
#--------------------------------------------------------------------------------------
DLM_NAME                    = $(appName)
DLM_OBJECT_FILES            = $(MultiCompileObjectList)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_PCH              = $(o)LinearReferencingInternal$(oext) 
DLM_DEST                    = $(o)
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1
DLM_CONTEXT_LOCATION        = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION    = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

LINKER_LIBRARIES            = $(ContextSubpartsLibs)$(libprefix)BeSQLite$(libext)
LINKER_LIBRARIES            + $(ContextSubpartsLibs)$(libprefix)BeSQLiteEC$(libext)
LINKER_LIBRARIES            + $(ContextSubpartsLibs)$(libprefix)BentleyGeom$(libext)
LINKER_LIBRARIES            + $(ContextSubpartsLibs)$(libprefix)BentleyGeomSerialization$(libext)
LINKER_LIBRARIES            + $(ContextSubpartsLibs)$(libprefix)ECObjects$(libext)
LINKER_LIBRARIES            + $(ContextSubpartsLibs)$(libprefix)DgnPlatform$(libext)

%include $(sharedMki)linkLibrary.mki

