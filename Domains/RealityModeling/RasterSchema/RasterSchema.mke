#--------------------------------------------------------------------------------------
#
#     $Source: RasterSchema/RasterSchema.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

PolicyFile=$(SrcRoot)RealityModFramework/RasterSchema/RasterSchemaPolicy.mki
SolutionPolicyMki=$(PolicyFile)

%include mdl.mki
%include $(SrcRoot)BentleyApi/PublicMki/BentleyApi.mki 

baseDir                         = $(_MakeFilePath)
rasterSchemaPublicApiSrc        = $(repositoryRoot)PublicAPI/RasterSchema/
rasterSchemaSrc                 = $(baseDir)
buildContextVendorAPI           = $(BuildContext)VendorAPI/

always:
    !~@mkdir $(o)

$(OutBuildContexts)RealityModFramework/PublicAPI/RasterSchema : $(repositoryRoot)PublicAPI/RasterSchema
    $(LinkFirstDepToFirstTargetAsDirectory)

#--------------------------------------------------------------------------------------
#   BENTLEY_LIBRARIES
#--------------------------------------------------------------------------------------
ContextSubpartsLibs = $(BuildContext)SubParts/Libs/

BENTLEY_LIBRARIES = $(ContextSubpartsLibs)$(libprefix)DgnPlatform$(libext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)BentleyGeom$(libext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)ECObjects$(libext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)BeSQLiteEC$(libext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(stlibprefix)BeJsonCpp$(stlibext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)BaseGeoCoord$(libext)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)IppGraLibs$(libprefix)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)IppUtlLibs$(libprefix)
BENTLEY_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)BeSQLite$(libext)

#--------------------------------------------------------------------------------------
#   Set up build dependencies
#--------------------------------------------------------------------------------------
rasterSchemaDepends             = $(rasterSchemaPublicApiSrc)RasterDomain.h                 \
                                  $(rasterSchemaPublicApiSrc)RasterSchemaApi.h              \
                                  $(rasterSchemaPublicApiSrc)RasterSchemaCommon.h           \
                                  $(rasterSchemaPublicApiSrc)RasterSchemaTypes.h            \
                                  $(rasterSchemaPublicApiSrc)RasterHandler.h                \
                                  $(rasterSchemaPublicApiSrc)RasterDomain.h                 \
                                  $(rasterSchemaPublicApiSrc)RasterFileHandler.h            \
                                  $(rasterSchemaPublicApiSrc)WmsHandler.h

rasterDisplayDepends =  $(rasterSchemaSrc)RasterSource.h \
                        $(rasterSchemaSrc)RasterQuadTree.h \
                        $(rasterSchemaSrc)WmsSource.h
                        
rasterFileDepends    =  $(rasterSchemaSrc)RasterFile.h \
                        $(rasterSchemaSrc)RasterFileProgressiveDisplay.h \
                        $(rasterSchemaSrc)RasterFileSource.h \
                        $(rasterSchemaSrc)ImagePPAdmin.h

%include MultiCppCompileRule.mki

#----------------------------------------------------------------------
#   Make sure that RasterSchemaInternal.pch is up-to-date.
#----------------------------------------------------------------------
PchCompiland        = $(rasterSchemaSrc)RasterSchemaInternal.cpp
PchOutputDir        = $(o)
PchExtraOptions     = -Zm160
PchExplicitDepends  = $(rasterSchemaDepends)

# Keep this even if GCC_NO_PRE_COMPILED_HEADER is defined. When GCC_NO_PRE_COMPILED_HEADER
# is defined this step alters the command line to make the line including <RasterSchemaInternal.h>
# work properly.
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

#--------------------------------------------------------------------------------------
#   Compile portable source
#--------------------------------------------------------------------------------------
$(o)RasterHandler$(oext)    : $(rasterSchemaSrc)RasterHandler.cpp   $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterFileHandler$(oext)            : $(rasterSchemaSrc)RasterFileHandler.cpp                   $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterDomain$(oext)                 : $(rasterSchemaSrc)RasterDomain.cpp                        $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterQuadTree$(oext)   : $(rasterSchemaSrc)RasterQuadTree.cpp  $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

$(o)RasterSource$(oext)     : $(rasterSchemaSrc)RasterSource.cpp    $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

$(o)WmsHandler$(oext)       : $(rasterSchemaSrc)WmsHandler.cpp      $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

$(o)WmsSource$(oext)        : $(rasterSchemaSrc)WmsSource.cpp       $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

$(o)RasterFile$(oext)                   : $(rasterSchemaSrc)RasterFile.cpp                          $(rasterSchemaDepends) $(rasterFileDepends) ${MultiCompileDepends}

$(o)ImagePPAdmin$(oext)                 : $(rasterSchemaSrc)ImagePPAdmin.cpp                        $(rasterSchemaDepends) $(rasterFileDepends) ${MultiCompileDepends}

$(o)RasterFileProgressiveDisplay$(oext) : $(rasterSchemaSrc)RasterFileProgressiveDisplay.cpp        $(rasterSchemaDepends) $(rasterFileDepends) ${MultiCompileDepends}

$(o)RasterFileSource$(oext)             : $(rasterSchemaSrc)RasterFileSource.cpp                    $(rasterSchemaDepends) $(rasterFileDepends) ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki
objs =% $(MultiCompileObjectList)

CCPchOpts =
CPchOpts =

#--------------------------------------------------------------------------------------
#   Build the library
#--------------------------------------------------------------------------------------
DLM_NAME                    = $(appName)
DLM_OBJECT_FILES            = $(objs)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_PCH              = $(o)RasterSchemaInternal$(oext) 
DLM_DEST                    = $(o)
DLM_NOMSBUILTINS            = 1
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1
DLM_NO_DLS                  = 1
DLM_NO_DEF                  = 1

DLM_CONTEXT_LOCATION        = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION    = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

LINKER_LIBRARIES            = $(BENTLEY_LIBRARIES) $(SYSTEM_LIBRARIES)

%include $(sharedMki)LinkLibrary.mki

