#--------------------------------------------------------------------------------------
#
#     $Source: RasterSchema/RasterSchema.mke $
#
#  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

%include mdl.mki

#-----------------------------------------------------------
# Root directory
#-----------------------------------------------------------
SrcRasterSchema                 = $(_MakeFilePath)

#------------------------------------------------------
# Header file locations in source tree
#------------------------------------------------------
RasterSchemaPublicApiSrc        = $(SrcRasterSchema)../PublicAPI/RasterSchema/

#----------------------------------------------------------
# Set and then include the CompileOptionsMki file.
# It is needed and also %included by PreCompileHeader.mki
#----------------------------------------------------------
CompileOptionsMki               = $(SrcRasterSchema)RasterSchema.mki
%include $(CompileOptionsMki)

#--------------------------------------------------------------------------------------
#   Set up build dependencies
#--------------------------------------------------------------------------------------
rasterSchemaDepends             = $(BuildContext)PublicAPI/DgnPlatform/DgnModel.h \
                                  $(RasterSchemaPublicApiSrc)RasterDomain.h                 \
                                  $(RasterSchemaPublicApiSrc)RasterSchemaApi.h              \
                                  $(RasterSchemaPublicApiSrc)RasterSchemaCommon.h           \
                                  $(RasterSchemaPublicApiSrc)RasterSchemaTypes.h            \
                                  $(RasterSchemaPublicApiSrc)RasterHandler.h                \
                                  $(RasterSchemaPublicApiSrc)RasterDomain.h                 \
                                  $(RasterSchemaPublicApiSrc)RasterFileHandler.h            \
                                  $(RasterSchemaPublicApiSrc)WmsHandler.h

rasterDisplayDepends =  $(SrcRasterSchema)RasterSource.h \
                        $(SrcRasterSchema)RasterQuadTree.h

wmsDepends    = $(rasterSchemaDepends) \
                $(rasterDisplayDepends) \
                $(SrcRasterSchema)WmsSource.h
                        
rasterFileDepends    =  $(rasterSchemaDepends) \
                        $(rasterDisplayDepends) \
                        $(SrcRasterSchema)RasterFile.h \
                        $(SrcRasterSchema)RasterFileSource.h \
                        $(SrcRasterSchema)ImagePPAdmin.h

always:
    !~@mkdir $(o)

#----------------------------------------------------------------------
#   Make sure that RasterSchemaInternal.pch is up-to-date.
#----------------------------------------------------------------------
PchCompiland        = $(SrcRasterSchema)RasterSchemaInternal.cpp
PchOutputDir        = $(o)
PchExtraOptions     = -Zm160
PchExplicitDepends  = $(rasterSchemaDepends)

%if defined (winNT) && $(BUILD_TOOLSET) == "GCC"
    # Using pch generate a crash in cc1plus.exe. Apparently this is caused by a too large pch. Should be fixed in future android NDK release.
    # http://stackoverflow.com/questions/10841306/cc1plus-exe-crash-when-using-large-precompiled-header-file
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif

# Keep this even if GCC_NO_PRE_COMPILED_HEADER is defined. When GCC_NO_PRE_COMPILED_HEADER
# is defined this step alters the command line to make the line including <RasterSchemaInternal.h>
# work properly.
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

#--------------------------------------------------------------------------------------
#   Compile portable source
#--------------------------------------------------------------------------------------
$(o)RasterHandler$(oext)        : $(SrcRasterSchema)RasterHandler.cpp       $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterFileHandler$(oext)    : $(SrcRasterSchema)RasterFileHandler.cpp   $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterDomain$(oext)         : $(SrcRasterSchema)RasterDomain.cpp        $(rasterSchemaDepends) ${MultiCompileDepends}

$(o)RasterQuadTree$(oext)       : $(SrcRasterSchema)RasterQuadTree.cpp      $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

$(o)RasterSource$(oext)         : $(SrcRasterSchema)RasterSource.cpp        $(rasterSchemaDepends) $(rasterDisplayDepends) ${MultiCompileDepends}

# Wms source support
$(o)WmsHandler$(oext)           : $(SrcRasterSchema)WmsHandler.cpp          $(wmsDepends) ${MultiCompileDepends}

$(o)WmsSource$(oext)            : $(SrcRasterSchema)WmsSource.cpp           $(wmsDepends) ${MultiCompileDepends}

# Local raster files support
$(o)RasterFile$(oext)           : $(SrcRasterSchema)RasterFile.cpp          $(rasterFileDepends) ${MultiCompileDepends}

$(o)ImagePPAdmin$(oext)         : $(SrcRasterSchema)ImagePPAdmin.cpp        $(rasterFileDepends) ${MultiCompileDepends}

$(o)RasterFileSource$(oext)     : $(SrcRasterSchema)RasterFileSource.cpp    $(rasterFileDepends) ${MultiCompileDepends}

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki
objs =% $(MultiCompileObjectList)

CCPchOpts =
CPchOpts =

#--------------------------------------------------------------------------------------
#   Build the library
#--------------------------------------------------------------------------------------
DLM_OBJECT_FILES            = $(objs)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_PCH              = $(o)RasterSchemaInternal$(oext) 
DLM_DEST                    = $(o)
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1

LINKER_LIBRARIES            =   $(ContextSubpartsLibs)$(libprefix)DgnPlatform$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BentleyGeom$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)ECObjects$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)Units$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BeSQLiteEC$(libext) \
                                $(ContextSubpartsLibs)$(stlibprefix)BeJsonCpp$(stlibext) \
                                $(ContextSubpartsLibs)$(libprefix)BaseGeoCoord$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)ImagePP$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BeSQLite$(libext)


#$(SYSTEM_LIBRARIES)


%include $(sharedMki)LinkLibrary.mki

