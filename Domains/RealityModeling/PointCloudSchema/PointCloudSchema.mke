#--------------------------------------------------------------------------------------
#
#     $Source: PointCloudSchema/PointCloudSchema.mke $
#
#  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

%include mdl.mki

#-----------------------------------------------------------
# Root directory
#-----------------------------------------------------------
SrcPointCloudSchema                 = $(_MakeFilePath)

#------------------------------------------------------
# Header file locations in source tree
#------------------------------------------------------
PointCloudSchemaPublicApiSrc        = $(SrcPointCloudSchema)../PublicAPI/PointCloudSchema/

#----------------------------------------------------------
# Set and then include the CompileOptionsMki file.
# It is needed and also %included by PreCompileHeader.mki
#----------------------------------------------------------
CompileOptionsMki               = $(SrcPointCloudSchema)PointCloudSchema.mki
%include $(CompileOptionsMki)

#--------------------------------------------------------------------------------------
#   Set up build dependencies
#--------------------------------------------------------------------------------------
pointCloudSchemaDepends         = $(_MakeFileSpec)                                                  \
                                  $(SrcPointCloudSchema)VisualizationManager.h                     \
                                  $(SrcPointCloudSchema)PointCloudGcsFacility.h                    \
                                  $(SrcPointCloudSchema)PointCloudViewport.h                       \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudViewSettings.h          \
                                  $(SrcPointCloudSchema)PointCloudRamps.h                          \
                                  $(SrcPointCloudSchema)PointCloudRenderer.h                       \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudSchemaCommon.h          \
                                  $(PointCloudSchemaPublicApiSrc)IPointCloudViewSettings.h         \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudSchemaTypes.h           \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudDrawBuffer.h            \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudHandler.h               \
                                  $(SrcPointCloudSchema)PointCloudProgressiveDisplay.h              \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudDomain.h                \
                                  $(PointCloudSchemaPublicApiSrc)PointCloudSchemaApi.h             \
                                  

always:
    !~@mkdir $(o)

#----------------------------------------------------------------------
#   Make sure that PointCloudSchemaInternal.pch is up-to-date.
#----------------------------------------------------------------------
PchCompiland        = $(SrcPointCloudSchema)PointCloudSchemaInternal.cpp
PchOutputDir        = $(o)
PchExtraOptions     = -Zm160
PchExplicitDepends  = $(pointCloudSchemaDepends)

%if defined (winNT) && $(BUILD_TOOLSET) == "GCC"
    # Using pch generate a crash in cc1plus.exe. Apparently this is caused by a too large pch. Should be fixed in future android NDK release.
    # http://stackoverflow.com/questions/10841306/cc1plus-exe-crash-when-using-large-precompiled-header-file
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif

# Keep this even if GCC_NO_PRE_COMPILED_HEADER is defined. When GCC_NO_PRE_COMPILED_HEADER
# is defined this step alters the command line to make the line including <PointCloudSchemaInternal.h>
# work properly.
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

#--------------------------------------------------------------------------------------
#   Compile portable source
#--------------------------------------------------------------------------------------
$(o)VisualizationManager$(oext)         : $(SrcPointCloudSchema)VisualizationManager.cpp           $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudViewport$(oext)           : $(SrcPointCloudSchema)PointCloudViewport.cpp             $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudViewSettings$(oext)       : $(SrcPointCloudSchema)PointCloudViewSettings.cpp         $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudRamps$(oext)              : $(SrcPointCloudSchema)PointCloudRamps.cpp                $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudRenderer$(oext)           : $(SrcPointCloudSchema)PointCloudRenderer.cpp             $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudDrawBuffer$(oext)         : $(SrcPointCloudSchema)PointCloudDrawBuffer.cpp           $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudGcsFacility$(oext)        : $(SrcPointCloudSchema)PointCloudGcsFacility.cpp          $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudHandler$(oext)            : $(SrcPointCloudSchema)PointCloudHandler.cpp              $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudProgressiveDisplay$(oext) : $(SrcPointCloudSchema)PointCloudProgressiveDisplay.cpp   $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudDomain$(oext)             : $(SrcPointCloudSchema)PointCloudDomain.cpp               $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki
objs =% $(MultiCompileObjectList)

CCPchOpts =
CPchOpts =

#--------------------------------------------------------------------------------------
#   Build the library
#--------------------------------------------------------------------------------------
DLM_NAME                    = $(appName)
DLM_OBJECT_FILES            = $(objs)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_PCH              = $(o)PointCloudSchemaInternal$(oext) 
DLM_DEST                    = $(o)
DLM_NOMSBUILTINS            = 1
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1
DLM_NO_DLS                  = 1
DLM_NO_DEF                  = 1

LINKER_LIBRARIES            =   $(ContextSubpartsLibs)$(libprefix)DgnPlatform$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BentleyGeom$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BePointCloud$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BaseGeoCoord$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)ECObjects$(libext) \
                                $(ContextSubpartsLibs)$(libprefix)BeSQLiteEC$(libext) \
                                $(ContextSubpartsLibs)$(stlibprefix)BeJsonCpp$(stlibext)


%include $(sharedMki)LinkLibrary.mki

