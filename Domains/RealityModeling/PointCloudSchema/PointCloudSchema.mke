#--------------------------------------------------------------------------------------
#
#     $Source: PointCloudSchema/PointCloudSchema.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

PolicyFile=$(SrcRoot)RealityModFramework/PointCloudSchema/PointCloudSchemaPolicy.mki
SolutionPolicyMki=$(PolicyFile)

%include mdl.mki
%include $(SrcRoot)BentleyApi/PublicMki/BentleyApi.mki 

baseDir                         = $(_MakeFilePath)
pointCloudSchemaPublicApiSrc    = $(repositoryRoot)PublicAPI/PointCloudSchema/
pointCloudSchemaSrc             = $(baseDir)
buildContextVendorAPI           = $(BuildContext)VendorAPI/

always:
    !~@mkdir $(o)

$(OutBuildContexts)RealityModFramework/PublicAPI/PointCloudSchema : $(repositoryRoot)PublicAPI/PointCloudSchema
    $(LinkFirstDepToFirstTargetAsDirectory)

#--------------------------------------------------------------------------------------
#   BENTLEY_LIBRARIES
#--------------------------------------------------------------------------------------
ContextLibPrefix = $(BuildContext)SubParts/Libs/$(libprefix)

BENTLEY_LIBRARIES = $(ContextLibPrefix)DgnPlatform$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)BentleyGeom$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)BePointCloud$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)BaseGeoCoord$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)DgnGeoCoord$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)ECObjects$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)BeSQLiteEC$(stlibext)
BENTLEY_LIBRARIES + $(ContextLibPrefix)BeJsonCpp$(stlibext)

#--------------------------------------------------------------------------------------
#   Set up build dependencies
#--------------------------------------------------------------------------------------
pointCloudSchemaDepends         = $(_MakeFileSpec)                                                  \
                                  $(pointCloudSchemaSrc)VisualizationManager.h                     \
                                  $(pointCloudSchemaSrc)PointCloudGcsFacility.h                    \
                                  $(pointCloudSchemaSrc)PointCloudViewport.h                       \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudViewSettings.h          \
                                  $(pointCloudSchemaSrc)PointCloudRamps.h                          \
                                  $(pointCloudSchemaSrc)PointCloudRenderer.h                       \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudSchemaCommon.h          \
                                  $(pointCloudSchemaPublicApiSrc)IPointCloudViewSettings.h         \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudSchemaTypes.h           \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudDrawBuffer.h            \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudHandler.h               \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudProgressiveDisplay.h    \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudDomain.h                \
                                  $(pointCloudSchemaPublicApiSrc)PointCloudSchemaApi.h             \
                                  
%include MultiCppCompileRule.mki

#----------------------------------------------------------------------
#   Make sure that PointCloudSchemaInternal.pch is up-to-date.
#----------------------------------------------------------------------
PchCompiland        = $(pointCloudSchemaSrc)PointCloudSchemaInternal.cpp
PchOutputDir        = $(o)
PchExtraOptions     = -Zm160
PchExplicitDepends  = $(pointCloudSchemaDepends)

# Keep this even if GCC_NO_PRE_COMPILED_HEADER is defined. When GCC_NO_PRE_COMPILED_HEADER
# is defined this step alters the command line to make the line including <PointCloudSchemaInternal.h>
# work properly.
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

#--------------------------------------------------------------------------------------
#   Compile portable source
#--------------------------------------------------------------------------------------
$(o)VisualizationManager$(oext)         : $(pointCloudSchemaSrc)VisualizationManager.cpp           $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudViewport$(oext)           : $(pointCloudSchemaSrc)PointCloudViewport.cpp             $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudViewSettings$(oext)       : $(pointCloudSchemaSrc)PointCloudViewSettings.cpp         $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudRamps$(oext)              : $(pointCloudSchemaSrc)PointCloudRamps.cpp                $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudRenderer$(oext)           : $(pointCloudSchemaSrc)PointCloudRenderer.cpp             $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudDrawBuffer$(oext)         : $(pointCloudSchemaSrc)PointCloudDrawBuffer.cpp           $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudGcsFacility$(oext)        : $(pointCloudSchemaSrc)PointCloudGcsFacility.cpp          $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudHandler$(oext)            : $(pointCloudSchemaSrc)PointCloudHandler.cpp              $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudProgressiveDisplay$(oext) : $(pointCloudSchemaSrc)PointCloudProgressiveDisplay.cpp   $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

$(o)PointCloudDomain$(oext)             : $(pointCloudSchemaSrc)PointCloudDomain.cpp               $(pointCloudSchemaDepends)  ${MultiCompileDepends} 

#
# Compile the above uniform set of dependency blocks in a single invocation of the Visual C compiler.
# After the below include of MultiCppCompileGo.mki $(MultiCompileObjectList) will represent the
# list of uniform object files created. You may present $(MultiCompileObjectList) to the linker.
#
%include MultiCppCompileGo.mki
objs =% $(MultiCompileObjectList)

CCPchOpts =
CPchOpts =

#--------------------------------------------------------------------------------------
#   Build the library
#--------------------------------------------------------------------------------------
DLM_NAME                    = $(appName)
DLM_OBJECT_FILES            = $(objs)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_PCH              = $(o)PointCloudSchemaInternal$(oext) 
DLM_DEST                    = $(o)
DLM_NOMSBUILTINS            = 1
DLM_EXPORT_DEST             = $(o)
DLM_NOENTRY                 = 1
DLM_NO_DLS                  = 1
DLM_NO_DEF                  = 1

DLM_CONTEXT_LOCATION        = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION    = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

LINKER_LIBRARIES            = $(BENTLEY_LIBRARIES) $(SYSTEM_LIBRARIES)

%include $(sharedMki)LinkLibrary.mki

