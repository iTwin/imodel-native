/*--------------------------------------------------------------------------------------+
|
|  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
|
+--------------------------------------------------------------------------------------*/

   *** THIS FILE IS NOT TO BE COMPILED ***
   *** COPY CODE FROM HERE INTO jsc/node_api.cc ***

BEGIN_BENTLEY_NAMESPACE

struct BeJsEnvironment;
typedef BeJsEnvironment& BeJsEnvironmentR;
typedef BeJsEnvironment const& BeJsEnvironmentCR;
typedef BeJsEnvironment const* BeJsEnvironmentCP;

struct BeJsContext;
typedef BeJsContext& BeJsContextR;
typedef BeJsContext const& BeJsContextCR;

struct BeJsValue;
typedef BeJsValue& BeJsValueR;
typedef BeJsValue const& BeJsValueCR;

struct BeJsObject;
typedef BeJsObject* BeJsObjectP;
typedef BeJsObject& BeJsObjectR;
typedef BeJsObject const& BeJsObjectCR;

struct BeJsNativePointer;
typedef BeJsNativePointer& BeJsNativePointerR;
typedef BeJsNativePointer const& BeJsNativePointerCR;

struct BeJsArray;
typedef BeJsArray& BeJsArrayR;
typedef BeJsArray const& BeJsArrayCR;

struct BeJsFunction;
typedef BeJsFunction& BeJsFunctionR;
typedef BeJsFunction const& BeJsFunctionCR;

struct BeJsNativeFunction;
typedef BeJsNativeFunction& BeJsNativeFunctionR;
typedef BeJsNativeFunction const& BeJsNativeFunctionCR;

struct BeJsNativeObject;
typedef BeJsNativeObject& BeJsNativeObjectR;
typedef BeJsNativeObject const& BeJsNativeObjectCR;

//=======================================================================================
// A JavaScript engine instance.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsEnvironment
    {
private:
    JSContextGroupRef m_jscContextGroup;

    bool m_destroying;
    bool m_ownsSystemEnvironment;

public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    JSContextGroupRef GetJscContextGroup() const { return m_jscContextGroup; }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsEnvironment();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/17
    //---------------------------------------------------------------------------------------
    BeJsEnvironment (JSContextGroupRef systemEnvironment);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    ~BeJsEnvironment();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    bool IsDestroying() const { return m_destroying; }

    //! Performs any necessary once-per-process initialization that a JS engine may require.
    static void InitializeEngine();
    };

//=======================================================================================
// A JavaScript execution context.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsContext
    {
    friend struct BeJsNativePointer;
    friend struct BeJsValue;
    friend struct BeJsNativeFunction;

public:
    enum class EvaluateStatus
        {
        Success,
        ParseError,
        RuntimeError
        };

    struct EvaluateException
        {
        Utf8String message;
        Utf8String trace;
        };

private:
    JSGlobalContextRef m_jscContext;
    BeJsValue* m_Function_prototype;
    void FindLanguageObjects();

    BeJsEnvironment const* m_environment;

    typedef void(*DisposeFunctionCallback) (void* object);

public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    JSGlobalContextRef GetJscContext() const { return m_jscContext; }
    
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsContext (BeJsEnvironmentCR environment, Utf8CP identifier = nullptr, Utf8CP initializationScript = nullptr);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsContext (BeJsEnvironmentCR environment, JSGlobalContextRef systemContext);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    virtual ~BeJsContext();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsEnvironmentCR GetEnvironment() const { return *m_environment; }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsValue EvaluateScript (Utf8CP script, Utf8CP identifier = nullptr, EvaluateStatus* status = nullptr, EvaluateException* exception = nullptr) const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsObject GetGlobalObject() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    2/15
    //---------------------------------------------------------------------------------------
    BeJsContextR GetJsContext();
    };

//=======================================================================================
// A handle to a JavaScript value.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsValue
    {
    friend struct BeJsContext;
    friend struct BeJsObject;
    friend struct BeJsArray;

private:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    7/15
    //---------------------------------------------------------------------------------------
    BeJsValue();

protected:
    BeJsContext const* m_context;

    JSValueRef m_jscValue;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    void SetJscValue (JSValueRef value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsValue (BeJsContextCR context);

public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsValue (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    JSValueRef GetJscValue() const { return m_jscValue; }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsContextCR GetContext() const { return *m_context; }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsValue (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsValueR operator= (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsValue (BeJsValue&& other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    virtual ~BeJsValue();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void Reset();

bool IsValid() const;
static BeJsValue InvalidHandle();
void Invalidate();
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsEmpty() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    void NotifyEngineValueReleased();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsNull() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsUndefined() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsNumber() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsBoolean() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsString() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsObject() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsFunction() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsEqual (BeJsValueCR value) const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool IsEqualStrict (BeJsValueCR value) const;
    };

//=======================================================================================
// A handle to a JavaScript primitive.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsPrimitive : public BeJsValue
    {
protected:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsPrimitive (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsPrimitive (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsPrimitive (BeJsContextCR context);
    };

//=======================================================================================
// A handle to a JavaScript boolean.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsBoolean : public BeJsPrimitive
    {
public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsBoolean (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsBoolean (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsBoolean (BeJsContextCR context, bool value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool GetValue() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetValue (bool value);
    };

//=======================================================================================
// A handle to a JavaScript number.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsNumber : public BeJsPrimitive
    {
public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsNumber (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNumber (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNumber (BeJsContextCR context, double value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNumber (BeJsContextCR context, int32_t value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNumber (BeJsContextCR context, uint32_t value) : BeJsNumber (context, static_cast<double>(value)) {}

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    double GetValue() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    int32_t GetIntegerValue() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    uint32_t GetUnsignedIntegerValue() const { return static_cast<uint32_t>(GetValue()); }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetValue (double value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetValue (int32_t value);
    };

//=======================================================================================
// A handle to a JavaScript string.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsString : public BeJsPrimitive
    {
public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsString (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    static Utf8String GetUtf8String (JSStringRef jsString);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsString (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsString (BeJsContextCR context, Utf8CP value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsString (BeJsContextCR context, Utf8StringCR value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    Utf8String GetValue() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetValue (Utf8CP value);
    };

//=======================================================================================
// A handle to a JavaScript object.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsObject : public BeJsValue
    {
    friend struct BeJsContext;

protected:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsObject (BeJsContextCR context);
public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsObject (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // Creates an invalid BeJsObject handle.
    // @bsimethod                                                   Steve.Wilson    7/15
    //---------------------------------------------------------------------------------------
    BeJsObject();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsObject (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsObjectR GetValue();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsValue GetProperty (Utf8CP name) const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    template <typename... Arguments>
    BeJsValue CallMemberFunction (Utf8CP name, Arguments&&... arguments);
        
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetProperty (Utf8CP name, BeJsValueCR value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetBooleanProperty (Utf8CP name, bool value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetNumberProperty (Utf8CP name, double value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetNumberProperty (Utf8CP name, int32_t value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetStringProperty (Utf8CP name, Utf8CP value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void DeleteProperty (Utf8CP name);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool DoesPropertyExist (Utf8CP name);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetPrototype (BeJsValueCR prototype);

    //---------------------------------------------------------------------------------------
    // Creates a new empty object.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    static BeJsObject New (BeJsContextCR context);

    //---------------------------------------------------------------------------------------
    // Creates an empty object handle.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    static BeJsObject CreateHandle (BeJsContextCR context);
    };

//=======================================================================================
// A handle to a JavaScript object that wraps a native void*.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsNativePointer : public BeJsObject
    {
private:
    BeJsEnvironmentCP m_environment;

public:
    //---------------------------------------------------------------------------------------
    // Native callback that is invoked when the JavaScript object is disposed or garbage collected.
    //---------------------------------------------------------------------------------------
    typedef void (*DisposeCallback) (void* object, BeJsObject* jsObject);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsNativePointer (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // Creates an invalid BeJsNativePointer handle.
    // @bsimethod                                                   Steve.Wilson    7/15
    //---------------------------------------------------------------------------------------
    BeJsNativePointer();

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNativePointer (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNativePointer (BeJsContextCR context, void* object, DisposeCallback disposeCallback, BeJsObject const* prototype = nullptr);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void* GetValue() const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetValue (void* object);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void Dispose();
    };

//=======================================================================================
// A handle to a JavaScript array.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsArray : public BeJsObject
    {
private:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsArray (BeJsContextCR context);

public:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsArray (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsArray (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsValue GetProperty (uint32_t index) const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetProperty (uint32_t index, BeJsValueCR value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetBooleanProperty (uint32_t index, bool value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetNumberProperty (uint32_t index, double value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetNumberProperty (uint32_t index, int32_t value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void SetStringProperty (uint32_t index, Utf8CP value);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    void DeleteProperty (uint32_t index);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    bool DoesPropertyExist (uint32_t index);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    uint32_t GetLength() const;

    //---------------------------------------------------------------------------------------
    // Creates a new empty array.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    static BeJsArray New (BeJsContextCR context);
    };

//=======================================================================================
// A handle to a JavaScript function.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsFunction : public BeJsObject
    {
private:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsValue Call (BeJsValue** args,
                    JSValueRef* engineArgs,
                    size_t argumentCount,
                    BeJsObject* callScope,
                    bool callAsConstructor) const;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    template <typename... Arguments>
    BeJsValue _Call (BeJsObject* callScope, bool callAsConstructor, Arguments&&... arguments) const
        {
        const size_t argumentCount = sizeof...(Arguments);
        BeJsValue* values [argumentCount == 0 ? 1 : argumentCount] = { &arguments... };
        JSValueRef engineValues [argumentCount == 0 ? 1 : (argumentCount + 1)];
        return Call (values, engineValues, argumentCount, callScope, callAsConstructor);
        }

protected:
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsFunction (BeJsContextCR context);

public:

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Sam.Wilson                      8/16
    //---------------------------------------------------------------------------------------
    BeJsValue CallWithList(BeJsObject* callScope, bool callAsConstructor, BeJsValue* valuesIn, size_t argumentCount) const
        {
        JSValueRef engineValues[32];
        BeJsValue* values[32];
        if (argumentCount >= 32)
            {
            BeAssert(false && "exceeded maximum number of arguments");
            return BeJsValue::InvalidHandle();
            }
        for (size_t i=0; i<argumentCount; ++i)
            values[i] = &valuesIn[i];
        return Call(values, engineValues, argumentCount, callScope, callAsConstructor);
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsFunction (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsFunction (BeJsValueCR other);

    //---------------------------------------------------------------------------------------
    // Calls the function with a scope object (can be null) and zero or more BeJsValue arguments.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    template <typename... Arguments>
    BeJsValue Call (BeJsObject* callScope, Arguments&&... arguments) const
        {
        return _Call (callScope, false, arguments...);
        }

    //---------------------------------------------------------------------------------------
    // Calls the function as a constructor with zero or more BeJsValue arguments.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    template <typename... Arguments>
    BeJsValue CallAsConstructor (Arguments&&... arguments) const
        {
        return _Call (nullptr, true, arguments...);
        }

    //---------------------------------------------------------------------------------------
    // Calls the function with zero or more BeJsValue arguments.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    template <typename... Arguments>
    BeJsValue operator() (Arguments&&... arguments) const
        {
        return _Call (nullptr, false, arguments...);
        }

    //---------------------------------------------------------------------------------------
    // Creates an empty object handle.
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    static BeJsFunction CreateHandle (BeJsContextCR context);
    };

//=======================================================================================
// A handle to a JavaScript function that invokes a native function.
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsNativeFunction : public BeJsFunction
    {
private:
    std::function<void(void)> m_removeCallbackFunction = nullptr;

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    template <typename T> static JSValueRef InvokeJscCallback (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    template <typename T> static JSObjectRef InvokeJscCallbackConstructor (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);

    template <typename T> void Init(BeJsContextCR context, T callback);
public:
    ~BeJsNativeFunction()
        {
        m_removeCallbackFunction = nullptr;
        }
    //=======================================================================================
    // Describes a BeJsNativeFunction function call.
    // @bsiclass                                                    Steve.Wilson    2/15
    //=======================================================================================
    struct CallbackInfo
        {
        friend struct BeJsNativeFunction;

//    private:
        BeJsContext const* m_context;

        bool m_isConstructCall;
        JSObjectRef m_function;
        JSObjectRef m_thisObject;
        size_t m_argumentCount;
        JSValueRef const* m_arguments;

        //---------------------------------------------------------------------------------------
        // @bsimethod                                   Steve.Wilson                    4/15
        //---------------------------------------------------------------------------------------
        CallbackInfo (BeJsContextCR context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[]);
        };

    typedef CallbackInfo& CallbackInfoR;
    
    //---------------------------------------------------------------------------------------
    // @bsimethod                                   Steve.Wilson                    4/15
    //---------------------------------------------------------------------------------------
    BeJsNativeFunction (BeJsContextCR context, JSValueRef jscValue);

    //---------------------------------------------------------------------------------------
    // Native callback for a BeJsNativeFunction.
    //---------------------------------------------------------------------------------------
    typedef BeJsValue (*Callback) (CallbackInfoR info);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNativeFunction (BeJsContextCR context, Callback callback);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Mykolas.Simutis    7/17
    //---------------------------------------------------------------------------------------
    BeJsNativeFunction (BeJsContextCR context, std::function<BeJsValue(CallbackInfoR info)> callback);

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Mykolas.Simutis    7/17
    // used when BeJsNativeFunction was created with std::function<BeJsValue(CallbackInfoR info) constructor.
    // std::function is a heavyweight object,
    // that we might want to manually delete before Javascript GC kicks in and calls Dispose function.
    // m_removeCallbackFunction is created on constructor, capturing object that actually holds the function.
    // Calling this method essentially makes BeJsNativeFunction invalid,
    // thus should be used only when we're sure that underlying javascript object is not going to be used anymore.
    // This will always work, since to remove the native callback one needs to keep BeJsNativeFunction alive.
    // As long as BeJsNativeFunction is alive, Dispose function will not be called.
    //---------------------------------------------------------------------------------------
    void RemoveNativeCallback()
        {
        if (m_removeCallbackFunction != nullptr)
            {
            m_removeCallbackFunction();
            m_removeCallbackFunction = nullptr;
            }
        }
    };

//=======================================================================================
// A handle to a JavaScript object that invokes native callbacks for property access requests.
// (Not available cross-platform yet due to lack of JsRT support before Windows 10)
// @bsiclass                                                    Steve.Wilson    2/15
//=======================================================================================
struct BeJsNativeObject : public BeJsObject
    {
public:
    //=======================================================================================
    // Stores callbacks for a BeJsNativeObject.
    // @bsiclass                                                    Steve.Wilson    2/15
    //=======================================================================================
    struct Callbacks
        {
    public:
        //---------------------------------------------------------------------------------------
        // Native callback for getting a BeJsNativeObject property.
        //---------------------------------------------------------------------------------------
        typedef BeJsValue (*GetProperty) (BeJsNativePointerR object, Utf8CP name);

        //---------------------------------------------------------------------------------------
        // Native callback for setting a BeJsNativeObject property.
        //---------------------------------------------------------------------------------------
        typedef void (*SetProperty) (BeJsNativePointerR object, Utf8CP name, BeJsValueCR value);

        //---------------------------------------------------------------------------------------
        // Native callback for deleting a BeJsNativeObject property.
        //---------------------------------------------------------------------------------------
        typedef void (*DeleteProperty) (BeJsNativePointerR object, Utf8CP name);

        //---------------------------------------------------------------------------------------
        // Native callback for enumerating the properties of a BeJsNativeObject.
        //---------------------------------------------------------------------------------------
        typedef BeJsArray (*EnumerateProperties) (BeJsNativePointerR object);

        //---------------------------------------------------------------------------------------
        // Native callback for checking the existence of a BeJsNativeObject property.
        //---------------------------------------------------------------------------------------
        typedef bool (*DoesPropertyExist) (BeJsNativePointerR object, Utf8CP name);

        //---------------------------------------------------------------------------------------
        // Getter callback.
        //---------------------------------------------------------------------------------------
        GetProperty getProperty;

        //---------------------------------------------------------------------------------------
        // Setter callback.
        //---------------------------------------------------------------------------------------
        SetProperty setProperty;

        //---------------------------------------------------------------------------------------
        // Deleter callback.
        //---------------------------------------------------------------------------------------
        DeleteProperty deleteProperty;

        //---------------------------------------------------------------------------------------
        // Enumerator callback.
        //---------------------------------------------------------------------------------------
        EnumerateProperties enumerateProperties;

        //---------------------------------------------------------------------------------------
        // Query callback.
        //---------------------------------------------------------------------------------------
        DoesPropertyExist doesPropertyExist;

        //---------------------------------------------------------------------------------------
        // Disposer callback.
        //---------------------------------------------------------------------------------------
        BeJsNativePointer::DisposeCallback dispose;

        //---------------------------------------------------------------------------------------
        // @bsimethod                                                   Steve.Wilson    2/15
        //---------------------------------------------------------------------------------------
        Callbacks (GetProperty getter,
                   SetProperty setter = nullptr,
                   DeleteProperty deleter = nullptr,
                   EnumerateProperties enumerator = nullptr,
                   DoesPropertyExist query = nullptr,
                   BeJsNativePointer::DisposeCallback disposer = nullptr);
        };

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Steve.Wilson    2/15
    //---------------------------------------------------------------------------------------
    BeJsNativeObject (BeJsContextCR context, Callbacks const& callbacks, void* object = nullptr);
    };


END_BENTLEY_NAMESPACE

//__PUBLISH_SECTION_END__
