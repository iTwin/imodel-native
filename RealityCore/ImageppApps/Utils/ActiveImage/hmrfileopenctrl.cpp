/*--------------------------------------------------------------------------------------+
|
|     $Source: Utils/ActiveImage/hmrfileopenctrl.cpp $
|
|  $Copyright: (c) 2013 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "hmrfileopenctrl.h"

// Dispatch interfaces referenced by this interface
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CHMRFileOpenCtrl

IMPLEMENT_DYNCREATE(CHMRFileOpenCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CHMRFileOpenCtrl properties

short CHMRFileOpenCtrl::GetProtocol()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetProtocol(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

CString CHMRFileOpenCtrl::GetServerIP()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetServerIP(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

short CHMRFileOpenCtrl::GetServerPort()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetServerPort(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

COleFont CHMRFileOpenCtrl::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CHMRFileOpenCtrl::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CHMRFileOpenCtrl::GetShowFileName()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetShowFileName(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CHMRFileOpenCtrl::GetShowFileType()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetShowFileType(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CHMRFileOpenCtrl::GetOpenCancelButtons()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetOpenCancelButtons(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

OLE_COLOR CHMRFileOpenCtrl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

CString CHMRFileOpenCtrl::GetHTTPExtension()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetHTTPExtension(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

BOOL CHMRFileOpenCtrl::GetAutoConnect()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetAutoConnect(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

CString CHMRFileOpenCtrl::GetDrive()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetDrive(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

BOOL CHMRFileOpenCtrl::GetAPIMode()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetAPIMode(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

CString CHMRFileOpenCtrl::GetAPIPattern()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetAPIPattern(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

BOOL CHMRFileOpenCtrl::GetMultiSel()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetMultiSel(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CHMRFileOpenCtrl::GetMultiLineCtrl()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetMultiLineCtrl(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CHMRFileOpenCtrl::GetShowLabel()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetShowLabel(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

short CHMRFileOpenCtrl::GetViewMode()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetViewMode(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

BOOL CHMRFileOpenCtrl::GetCanEditDriveCombo()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetCanEditDriveCombo(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CHMRFileOpenCtrl::GetAllowLocalDrives()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CHMRFileOpenCtrl::SetAllowLocalDrives(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CHMRFileOpenCtrl operations

CString CHMRFileOpenCtrl::GetPath()
{
	CString result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CHMRFileOpenCtrl::ReConnect()
{
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CHMRFileOpenCtrl::APINext()
{
	BOOL result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CHMRFileOpenCtrl::APIFirst()
{
	BOOL result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CHMRFileOpenCtrl::APIGetAttrib()
{
	long result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CHMRFileOpenCtrl::APIGetName()
{
	CString result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CHMRFileOpenCtrl::APIChangeDir(LPCTSTR pi_pNewPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pi_pNewPath);
	return result;
}

BOOL CHMRFileOpenCtrl::APIFirstExtention()
{
	BOOL result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CHMRFileOpenCtrl::APINextExtention()
{
	BOOL result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CHMRFileOpenCtrl::APIDefaultExtention()
{
	CString result;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CHMRFileOpenCtrl::APIExtentionDescription()
{
	CString result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CHMRFileOpenCtrl::APISetCurrentServer(long pi_Server)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pi_Server);
}

long CHMRFileOpenCtrl::APIAddServer(LPCTSTR pi_Name, LPCTSTR pi_PathExtention, LPCTSTR pi_Address, short pi_Port, short pi_Type)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pi_Name, pi_PathExtention, pi_Address, pi_Port, pi_Type);
	return result;
}

long CHMRFileOpenCtrl::GetSelCount()
{
	long result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CHMRFileOpenCtrl::GetFirstSel()
{
	CString result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CHMRFileOpenCtrl::GetNextSel()
{
	CString result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CHMRFileOpenCtrl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
