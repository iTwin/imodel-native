/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_OWN           0x1
#define SWIG_POINTER_DISOWN        0x2
#define SWIG_TRACK_OBJECTS	        0x4

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 ************************************************************************/

/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. */
static VALUE swig_ruby_trackings;

/* Setup a Ruby hash table to store Trackings */
static void SWIG_RubyInitializeTrackings() {
	/* Create a ruby hash table to store Trackings from C++ 
	objects to Ruby objects.  Also make sure to tell
	the garabage collector about the hash table. */
	swig_ruby_trackings = rb_hash_new();
	rb_gc_register_address(&swig_ruby_trackings);
}

/* Get a Ruby number to reference a pointer */
static VALUE SWIG_RubyPtrToReference(void* ptr) {
	/* We cast the pointer to an unsigned long
	 and then store a reference to it using
	 a Ruby number object. */

	/* Convert the pointer to a Ruby number */
	unsigned long value = (unsigned long) ptr;
	return LONG2NUM(value);
}

/* Get a Ruby number to reference an object */
static VALUE SWIG_RubyObjectToReference(VALUE object) {
	/* We cast the object to an unsigned long
	 and then store a reference to it using
	 a Ruby number object. */

	/* Convert the Object to a Ruby number */
	unsigned long value = (unsigned long) object;
	return LONG2NUM(value);
}

/* Get a Ruby object from a previously stored reference */
static VALUE SWIG_RubyReferenceToObject(VALUE reference) {
	/* The provided Ruby number object is a reference
	to the Ruby object we want.*/

	/* First convert the Ruby number to a C number */
	unsigned long value = NUM2LONG(reference);
	return (VALUE) value;
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
static void SWIG_RubyAddTracking(void* ptr, VALUE object) {
	/* In a Ruby hash table we store the pointer and
	the associated Ruby object.  The trick here is
	that we cannot store the Ruby object directly - if
	we do then it cannot be garbage collected.  So
	instead we typecast it as a unsigned long and
	convert it to a Ruby number object.*/

	/* Get a reference to the pointer as a Ruby number */
	VALUE key = SWIG_RubyPtrToReference(ptr);

	/* Get a reference to the Ruby object as a Ruby number */
	VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
	rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
static VALUE SWIG_RubyInstanceFor(void* ptr) {
	/* Get a reference to the pointer as a Ruby number */
	VALUE key = SWIG_RubyPtrToReference(ptr);

	/* Now lookup the value stored in the global hash table */
	VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
	if (value == Qnil) {
	  /* No object exists - return nil. */
		return Qnil;
	}
	else {
		/* Convert this value to Ruby object */
		return SWIG_RubyReferenceToObject(value);
	}
}

/* Remove a Tracking from a C/C++ struct to a Ruby object */
static void SWIG_RubyRemoveTracking(void* ptr) {
	/* Get a reference to the pointer as a Ruby number */
	VALUE key = SWIG_RubyPtrToReference(ptr);

	/* Define delete method - in C++ this could be marked as
	   static but unfortunately not in C. */
	VALUE delete_function = rb_intern("delete");

	/* Delete the object from the hash table by calling Ruby's
	   do this we need to call the Hash.delete method.*/
	rb_funcall(swig_ruby_trackings, delete_function, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
static void SWIG_RubyUnlinkObjects(void* ptr) {
	VALUE object = SWIG_RubyInstanceFor(ptr);

	if (object != Qnil) {
		DATA_PTR(object) = 0;
	}
}

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)
#define SWIG_GetModule(clientdata) \
  SWIG_Ruby_GetModule()
#define SWIG_SetModule(clientdata, pointer) \
  SWIG_Ruby_SetModule(pointer)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Initialize Ruby runtime support */
static void
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
static void
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
static VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
	 int own = flags & SWIG_POINTER_OWN;
	 int track = flags & SWIG_TRACK_OBJECTS;
	 
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
      return Qnil;
    
    /* Have we already wrapped this pointer? */
    if (track) {
	    obj = SWIG_RubyInstanceFor(ptr);
   	 if (obj != Qnil) {
      	return obj;
    	}
    }
		
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    
    /* Keep track of this object if necessary */
    if (track) {
	   SWIG_RubyAddTracking(ptr, obj);
    }
   
    return obj;
}

/* Create a new class instance (always owned) */
static VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
static SWIGINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
static int
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_cast_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
	 if (flags & SWIG_TRACK_OBJECTS) {
      /* We are tracking objects.  Thus we change the destructor
		 * to SWIG_RubyRemoveTracking.  This allows us to
		 * remove the mapping from the C++ to Ruby object
		 * when the Ruby object is garbage collected.  If we don't
		 * do this, then it is possible we will return a reference 
		 * to a Ruby object that no longer exists thereby crashing Ruby. */
		RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
  	 } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static SWIGINLINE void *
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
static SWIGINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

static VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
static void
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

static swig_module_info *SWIG_Ruby_GetModule() {
    VALUE pointer;
    swig_module_info *ret = 0;

   /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil) {
      Data_Get_Struct(pointer, swig_module_info, ret);
    }
    return ret;
}

static void SWIG_Ruby_SetModule(swig_module_info *pointer) {
      /* register a new class */
      VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
      /* create and store the structure pointer to a global variable */
      swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
      rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_unsigned_long swig_types[0]
static swig_type_info *swig_types[2];
static swig_module_info swig_module = {swig_types, 1, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_PointoolsAPI
#define SWIG_name    "PointoolsAPI"

static VALUE mPointoolsAPI;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#include "PointoolsAPI.h"

static VALUE
_wrap_ptInitialize(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptInitialize();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptOpenPOD(int argc, VALUE *argv, VALUE self) {
    char *arg1 = (char *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = StringValuePtr(argv[0]);
    result = (int)ptOpenPOD((char const *)arg1);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptBrowseAndOpenPOD(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptBrowseAndOpenPOD();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptClearAll(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptClearAll();
    
    return Qnil;
}


static VALUE
_wrap_ptDrawGL(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDrawGL();
    
    return Qnil;
}


static VALUE
_wrap_ptCaptureView(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptCaptureView();
    
    return Qnil;
}


static VALUE
_wrap_ptGetLXBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetLXBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetLYBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetLYBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetLZBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetLZBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetUXBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetUXBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetUYBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetUYBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetUZBound(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetUZBound();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptEnableLighting(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableLighting();
    
    return Qnil;
}


static VALUE
_wrap_ptDisableLighting(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableLighting();
    
    return Qnil;
}


static VALUE
_wrap_ptIsLightingEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsLightingEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptEnableIntensity(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableIntensity();
    
    return Qnil;
}


static VALUE
_wrap_ptDisableIntensity(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableIntensity();
    
    return Qnil;
}


static VALUE
_wrap_ptIsIntensityEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsIntensityEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptEnableRGB(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableRGB();
    
    return Qnil;
}


static VALUE
_wrap_ptDisableRGB(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableRGB();
    
    return Qnil;
}


static VALUE
_wrap_ptIsRGBEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsRGBEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptEnablePlaneShader(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnablePlaneShader();
    
    return Qnil;
}


static VALUE
_wrap_ptDisablePlaneShader(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisablePlaneShader();
    
    return Qnil;
}


static VALUE
_wrap_ptIsPlaneShaderEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsPlaneShaderEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptSetPlaneShaderOffset(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetPlaneShaderOffset(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetPlaneShaderDistance(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetPlaneShaderDistance(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetPlaneShaderVector(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    float arg2 ;
    float arg3 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    arg2 = (float) NUM2DBL(argv[1]);
    arg3 = (float) NUM2DBL(argv[2]);
    ptSetPlaneShaderVector(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_ptGetPlaneShaderOffset(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPlaneShaderOffset();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetPlaneShaderDistance(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPlaneShaderDistance();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetPlaneShaderVectorX(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPlaneShaderVectorX();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetPlaneShaderVectorY(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPlaneShaderVectorY();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetPlaneShaderVectorZ(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPlaneShaderVectorZ();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptSetDynamicFrameRate(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetDynamicFrameRate(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptGetDynamicFrameRate(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetDynamicFrameRate();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptSetStaticOptimizer(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetStaticOptimizer(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptGetStaticOptimizer(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetStaticOptimizer();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptSetPointSize(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetPointSize(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptGetPointSize(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetPointSize();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptEnableBlending(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableBlending();
    
    return Qnil;
}


static VALUE
_wrap_ptDisableBlending(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableBlending();
    
    return Qnil;
}


static VALUE
_wrap_ptIsBlendingEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsBlendingEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptEnableClipBox(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableClipBox();
    
    return Qnil;
}


static VALUE
_wrap_ptDisableClipBox(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableClipBox();
    
    return Qnil;
}


static VALUE
_wrap_ptIsClipBoxEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsClipBoxEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptSetClipBox(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    
    if ((argc < 6) || (argc > 6))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    arg2 = (float) NUM2DBL(argv[1]);
    arg3 = (float) NUM2DBL(argv[2]);
    arg4 = (float) NUM2DBL(argv[3]);
    arg5 = (float) NUM2DBL(argv[4]);
    arg6 = (float) NUM2DBL(argv[5]);
    ptSetClipBox(arg1,arg2,arg3,arg4,arg5,arg6);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxLX(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxLX(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxLY(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxLY(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxLZ(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxLZ(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxUX(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxUX(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxUY(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxUY(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipBoxUZ(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipBoxUZ(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipSectionThickness(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipSectionThickness(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipSectionInX(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipSectionInX(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipSectionInY(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipSectionInY(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipSectionInZ(int argc, VALUE *argv, VALUE self) {
    float arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = (float) NUM2DBL(argv[0]);
    ptSetClipSectionInZ(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptNudgeClipSectionPos(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptNudgeClipSectionPos();
    
    return Qnil;
}


static VALUE
_wrap_ptNudgeClipSectionNeg(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptNudgeClipSectionNeg();
    
    return Qnil;
}


static VALUE
_wrap_ptSetClipToBounds(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptSetClipToBounds();
    
    return Qnil;
}


static VALUE
_wrap_ptGetClipBoxLX(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxLX();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetClipBoxLY(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxLY();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetClipBoxLZ(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxLZ();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetClipBoxUX(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxUX();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetClipBoxUY(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxUY();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptGetClipBoxUZ(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptGetClipBoxUZ();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptSetVisible(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2INT(argv[0]);
    ptSetVisible(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptSetHidden(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2INT(argv[0]);
    ptSetHidden(arg1);
    
    return Qnil;
}


static VALUE
_wrap_ptGetVisible(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2INT(argv[0]);
    result = (int)ptGetVisible(arg1);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptDisableDraw(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDisableDraw();
    
    return Qnil;
}


static VALUE
_wrap_ptEnableDraw(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEnableDraw();
    
    return Qnil;
}


static VALUE
_wrap_ptIsDrawEnabled(int argc, VALUE *argv, VALUE self) {
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (int)ptIsDrawEnabled();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptShowInterface(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptShowInterface();
    
    return Qnil;
}


static VALUE
_wrap_ptFlipMouseYCoords(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptFlipMouseYCoords();
    
    return Qnil;
}


static VALUE
_wrap_ptDontFlipMouseYCoords(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDontFlipMouseYCoords();
    
    return Qnil;
}


static VALUE
_wrap_ptMouseMove(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptMouseMove(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptLButtonUp(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptLButtonUp(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptLButtonDown(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptLButtonDown(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptRButtonUp(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptRButtonUp(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptRButtonDown(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptRButtonDown(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptMButtonUp(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptMButtonUp(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptMButtonDown(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptMButtonDown(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptKeyDown(int argc, VALUE *argv, VALUE self) {
    char arg1 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2CHR(argv[0]);
    result = (int)ptKeyDown(arg1);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptDrawEvent(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptDrawEvent();
    
    return Qnil;
}


static VALUE
_wrap_ptFindNearestPoint(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (int)ptFindNearestPoint(arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_ptNearestPointX(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptNearestPointX();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptNearestPointY(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptNearestPointY();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptNearestPointZ(int argc, VALUE *argv, VALUE self) {
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (float)ptNearestPointZ();
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_ptStartClipBoxEdit(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptStartClipBoxEdit();
    
    return Qnil;
}


static VALUE
_wrap_ptEndClipBoxEdit(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    ptEndClipBoxEdit();
    
    return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|VALUE *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  swig_type_info *type, *ret;
  swig_cast_info *cast;
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
  for (i = 0; i < swig_module.size; ++i) {
    type = 0;

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
      if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
      }
      if (ret && type == swig_module.type_initial[i]) {
        cast->type = ret;
        ret = 0;
      }
      
      if (!ret) {
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }

      cast++;
    }

    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_PointoolsAPI(void) {
    size_t i;
    
    SWIG_InitRuntime();
    mPointoolsAPI = rb_define_module("PointoolsAPI");
    
    SWIG_InitializeModule(0);
    for (i = 0; i < swig_module.size; i++) {
        SWIG_define_class(swig_module.types[i]);
    }
    
    SWIG_RubyInitializeTrackings();
    rb_define_module_function(mPointoolsAPI, "ptInitialize", VALUEFUNC(_wrap_ptInitialize), -1);
    rb_define_module_function(mPointoolsAPI, "ptOpenPOD", VALUEFUNC(_wrap_ptOpenPOD), -1);
    rb_define_module_function(mPointoolsAPI, "ptBrowseAndOpenPOD", VALUEFUNC(_wrap_ptBrowseAndOpenPOD), -1);
    rb_define_module_function(mPointoolsAPI, "ptClearAll", VALUEFUNC(_wrap_ptClearAll), -1);
    rb_define_module_function(mPointoolsAPI, "ptDrawGL", VALUEFUNC(_wrap_ptDrawGL), -1);
    rb_define_module_function(mPointoolsAPI, "ptCaptureView", VALUEFUNC(_wrap_ptCaptureView), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetLXBound", VALUEFUNC(_wrap_ptGetLXBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetLYBound", VALUEFUNC(_wrap_ptGetLYBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetLZBound", VALUEFUNC(_wrap_ptGetLZBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetUXBound", VALUEFUNC(_wrap_ptGetUXBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetUYBound", VALUEFUNC(_wrap_ptGetUYBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetUZBound", VALUEFUNC(_wrap_ptGetUZBound), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableLighting", VALUEFUNC(_wrap_ptEnableLighting), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableLighting", VALUEFUNC(_wrap_ptDisableLighting), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsLightingEnabled", VALUEFUNC(_wrap_ptIsLightingEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableIntensity", VALUEFUNC(_wrap_ptEnableIntensity), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableIntensity", VALUEFUNC(_wrap_ptDisableIntensity), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsIntensityEnabled", VALUEFUNC(_wrap_ptIsIntensityEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableRGB", VALUEFUNC(_wrap_ptEnableRGB), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableRGB", VALUEFUNC(_wrap_ptDisableRGB), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsRGBEnabled", VALUEFUNC(_wrap_ptIsRGBEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnablePlaneShader", VALUEFUNC(_wrap_ptEnablePlaneShader), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisablePlaneShader", VALUEFUNC(_wrap_ptDisablePlaneShader), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsPlaneShaderEnabled", VALUEFUNC(_wrap_ptIsPlaneShaderEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetPlaneShaderOffset", VALUEFUNC(_wrap_ptSetPlaneShaderOffset), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetPlaneShaderDistance", VALUEFUNC(_wrap_ptSetPlaneShaderDistance), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetPlaneShaderVector", VALUEFUNC(_wrap_ptSetPlaneShaderVector), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPlaneShaderOffset", VALUEFUNC(_wrap_ptGetPlaneShaderOffset), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPlaneShaderDistance", VALUEFUNC(_wrap_ptGetPlaneShaderDistance), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPlaneShaderVectorX", VALUEFUNC(_wrap_ptGetPlaneShaderVectorX), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPlaneShaderVectorY", VALUEFUNC(_wrap_ptGetPlaneShaderVectorY), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPlaneShaderVectorZ", VALUEFUNC(_wrap_ptGetPlaneShaderVectorZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetDynamicFrameRate", VALUEFUNC(_wrap_ptSetDynamicFrameRate), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetDynamicFrameRate", VALUEFUNC(_wrap_ptGetDynamicFrameRate), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetStaticOptimizer", VALUEFUNC(_wrap_ptSetStaticOptimizer), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetStaticOptimizer", VALUEFUNC(_wrap_ptGetStaticOptimizer), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetPointSize", VALUEFUNC(_wrap_ptSetPointSize), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetPointSize", VALUEFUNC(_wrap_ptGetPointSize), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableBlending", VALUEFUNC(_wrap_ptEnableBlending), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableBlending", VALUEFUNC(_wrap_ptDisableBlending), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsBlendingEnabled", VALUEFUNC(_wrap_ptIsBlendingEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableClipBox", VALUEFUNC(_wrap_ptEnableClipBox), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableClipBox", VALUEFUNC(_wrap_ptDisableClipBox), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsClipBoxEnabled", VALUEFUNC(_wrap_ptIsClipBoxEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBox", VALUEFUNC(_wrap_ptSetClipBox), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxLX", VALUEFUNC(_wrap_ptSetClipBoxLX), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxLY", VALUEFUNC(_wrap_ptSetClipBoxLY), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxLZ", VALUEFUNC(_wrap_ptSetClipBoxLZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxUX", VALUEFUNC(_wrap_ptSetClipBoxUX), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxUY", VALUEFUNC(_wrap_ptSetClipBoxUY), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipBoxUZ", VALUEFUNC(_wrap_ptSetClipBoxUZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipSectionThickness", VALUEFUNC(_wrap_ptSetClipSectionThickness), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipSectionInX", VALUEFUNC(_wrap_ptSetClipSectionInX), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipSectionInY", VALUEFUNC(_wrap_ptSetClipSectionInY), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipSectionInZ", VALUEFUNC(_wrap_ptSetClipSectionInZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptNudgeClipSectionPos", VALUEFUNC(_wrap_ptNudgeClipSectionPos), -1);
    rb_define_module_function(mPointoolsAPI, "ptNudgeClipSectionNeg", VALUEFUNC(_wrap_ptNudgeClipSectionNeg), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetClipToBounds", VALUEFUNC(_wrap_ptSetClipToBounds), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxLX", VALUEFUNC(_wrap_ptGetClipBoxLX), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxLY", VALUEFUNC(_wrap_ptGetClipBoxLY), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxLZ", VALUEFUNC(_wrap_ptGetClipBoxLZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxUX", VALUEFUNC(_wrap_ptGetClipBoxUX), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxUY", VALUEFUNC(_wrap_ptGetClipBoxUY), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetClipBoxUZ", VALUEFUNC(_wrap_ptGetClipBoxUZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetVisible", VALUEFUNC(_wrap_ptSetVisible), -1);
    rb_define_module_function(mPointoolsAPI, "ptSetHidden", VALUEFUNC(_wrap_ptSetHidden), -1);
    rb_define_module_function(mPointoolsAPI, "ptGetVisible", VALUEFUNC(_wrap_ptGetVisible), -1);
    rb_define_module_function(mPointoolsAPI, "ptDisableDraw", VALUEFUNC(_wrap_ptDisableDraw), -1);
    rb_define_module_function(mPointoolsAPI, "ptEnableDraw", VALUEFUNC(_wrap_ptEnableDraw), -1);
    rb_define_module_function(mPointoolsAPI, "ptIsDrawEnabled", VALUEFUNC(_wrap_ptIsDrawEnabled), -1);
    rb_define_module_function(mPointoolsAPI, "ptShowInterface", VALUEFUNC(_wrap_ptShowInterface), -1);
    rb_define_module_function(mPointoolsAPI, "ptFlipMouseYCoords", VALUEFUNC(_wrap_ptFlipMouseYCoords), -1);
    rb_define_module_function(mPointoolsAPI, "ptDontFlipMouseYCoords", VALUEFUNC(_wrap_ptDontFlipMouseYCoords), -1);
    rb_define_module_function(mPointoolsAPI, "ptMouseMove", VALUEFUNC(_wrap_ptMouseMove), -1);
    rb_define_module_function(mPointoolsAPI, "ptLButtonUp", VALUEFUNC(_wrap_ptLButtonUp), -1);
    rb_define_module_function(mPointoolsAPI, "ptLButtonDown", VALUEFUNC(_wrap_ptLButtonDown), -1);
    rb_define_module_function(mPointoolsAPI, "ptRButtonUp", VALUEFUNC(_wrap_ptRButtonUp), -1);
    rb_define_module_function(mPointoolsAPI, "ptRButtonDown", VALUEFUNC(_wrap_ptRButtonDown), -1);
    rb_define_module_function(mPointoolsAPI, "ptMButtonUp", VALUEFUNC(_wrap_ptMButtonUp), -1);
    rb_define_module_function(mPointoolsAPI, "ptMButtonDown", VALUEFUNC(_wrap_ptMButtonDown), -1);
    rb_define_module_function(mPointoolsAPI, "ptKeyDown", VALUEFUNC(_wrap_ptKeyDown), -1);
    rb_define_module_function(mPointoolsAPI, "ptDrawEvent", VALUEFUNC(_wrap_ptDrawEvent), -1);
    rb_define_module_function(mPointoolsAPI, "ptFindNearestPoint", VALUEFUNC(_wrap_ptFindNearestPoint), -1);
    rb_define_module_function(mPointoolsAPI, "ptNearestPointX", VALUEFUNC(_wrap_ptNearestPointX), -1);
    rb_define_module_function(mPointoolsAPI, "ptNearestPointY", VALUEFUNC(_wrap_ptNearestPointY), -1);
    rb_define_module_function(mPointoolsAPI, "ptNearestPointZ", VALUEFUNC(_wrap_ptNearestPointZ), -1);
    rb_define_module_function(mPointoolsAPI, "ptStartClipBoxEdit", VALUEFUNC(_wrap_ptStartClipBoxEdit), -1);
    rb_define_module_function(mPointoolsAPI, "ptEndClipBoxEdit", VALUEFUNC(_wrap_ptEndClipBoxEdit), -1);
}

