/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See COPYRIGHT.md in the repository root for full copyright notice.
*--------------------------------------------------------------------------------------------*/
#pragma once
#ifdef XM
#include <TerrainModel/TerrainModel.h>

////// bcdtm3DModel//////
//BENTLEYDTM_Public        int bcdtm3DModel_assignTinIndexesToIntersectPolygons(DTM_TIN_OBJLIST *DesignTins,long NumDesignTins,TAG_POLYGON *IntPolys,long NumIntPolys) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_calculateDesignSurfaceVolumes(DTM_TIN_OBJLIST *DesignTinObjects,long NumDesignTinObjects,long LoadFlag,TAG_POLYGON *IntPolys,long NumIntPolys,MODEL_VOLUME **DesignVolumes,long *NumDesignVolumes) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_calculateGroundSurfaceVolumes(DTM_TIN_OBJLIST *GroundTinObjects,long NumGroundTinObjects,DTM_TIN_OBJLIST *DesignTinObjects,long NumDesignTinObjects,long LoadFlag,TAG_POLYGON *IntPolys,long NumIntPolys,MODEL_VOLUME **GroundVolumes,long *NumGroundVolumes) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_determineInternalIntersectedTinHullPolygons(DTM_TIN_OBJ *Tin,TAG_POLYGON *IntPolys,long NumIntPolys) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_extractIntersectedTinHullPolygons(DTM_TIN_OBJ *Tin,TAG_POLYGON **IntPolys,long *NumIntPolys) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_getBreakLineUserTagsForTinLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,DTMUserTag **UserTags,long *NumOfTags) ; 
//BENTLEYDTM_EXPORT        int bcdtm3DModel_insertMissingHullBreakLinesTinObject(DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_Public        int bcdtm3DModel_intersectDesignTinHulls(DTM_TIN_OBJLIST *DesignTins,long NumDesignTins,TAG_POLYGON **IntPolys,long *NumIntPolys) ; 
//BENTLEYDTM_EXPORT        int bcdtm3DModel_volumes(DTM_TIN_OBJLIST *DesignTinObjects,long NumDesignTinObjects,DTM_TIN_OBJLIST *GroundTinObjects,long NumGroundTinObjects,long LoadFlag,MODEL_VOLUME **DesignVolumes,long *NumDesignVolumes,MODEL_VOLUME **GroundVolumes,long *NumGroundVolumes) ; 

////// bcdtmAbl//////
//BENTLEYDTM_Private       int bcdtmAbl_calculateZForArtificialPointTinObject(DTM_TIN_OBJ *Tin,long Rp,long Sp,long Lp,double x,double y,double *z ) ; 
//BENTLEYDTM_Private       int bcdtmAbl_insertArtificialBreakPointsInTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_EXPORT        int bcdtmAbl_insertArtificialBreakPointsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmAbl_insertArtificialPointInToTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *InsertFlag ) ; 
//BENTLEYDTM_Private       int bcdtmAbl_insertArtificialPointsBetweenContourLinesTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *InsertFlag ) ; 
//BENTLEYDTM_Private       int bcdtmAbl_insertArtificialPointsTinObject(DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_Private       int bcdtmAbl_joinContourLinesFromNodeTableTinObject(DTM_TIN_OBJ *tinP,DTMContourNodeTable *nodeTableP,long numNodeTable) ; 
//BENTLEYDTM_Public        int bcdtmAbl_joinContourLinesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmAbl_joinContourLinesWithCoincidentEndPointsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmAbl_joinContourLinesWithGapsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_EXPORT        int bcdtmAbl_joinTinContourLinesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmAbl_removeZeroSlopeTrianglesBySwappingTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *RemoveFlag ) ; 
//BENTLEYDTM_Private       int bcdtmAbl_reverseTptrListTinObject(DTM_TIN_OBJ *Tin,long *Spnt ) ; 

////// bcdtmBuild//////
//BENTLEYDTM_EXPORT        int bcdtmBuild_checkTinStructureTinObject(DTM_TIN_OBJ *TinObj) ; 
//BENTLEYDTM_Public        int bcdtmBuild_checkTrianglesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmBuild_getDtmFeatureStatisticsDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Private       int bcdtmBuild_removeDuplicatePointsTinObject(DTM_TIN_OBJ *tinP,long *numDuplicatesP) ; 
//BENTLEYDTM_Public        int bcdtmBuild_triangles(DTM_DAT_OBJ **Data,DTM_TIN_OBJ **Tin,long DeleteFlag,WCharCP tinFileP,long SaveFlag,long EdgeFlag,double MaxSide) ; 
//BENTLEYDTM_EXPORT        int bcdtmBuild_trianglesFromClusteredPointArrayTinObject(DTM_TIN_OBJ **tinPP,DPoint3d **ptsPP,long numPts,double pptol,double pltol,double mpptol,long edgeOption,double maxSide) ; 
//BENTLEYDTM_EXPORT        int bcdtmBuild_trianglesFromDataFile(WCharCP DataFile,DTM_TIN_OBJ **TinObj,long DeleteFlag,WCharCP tinFileP,long SaveFlag,double Upptol,double Upltol,long EdgeFlag,double MaxSide) ; 
//BENTLEYDTM_EXPORT        int bcdtmBuild_trianglesFromDataObject(DTM_DAT_OBJ **Data,DTM_TIN_OBJ **Tin,long DeleteFlag,WCharCP tinFileP,long SaveFlag,double Upptol,double Upltol,long EdgeFlag,double MaxSide) ; 
//BENTLEYDTM_EXPORT        int bcdtmBuild_trianglesFromDemDataObject( DTM_DAT_OBJ **dataP, DTM_TIN_OBJ **tinP, long numRows, long numCols, double nullValue) ; 
//BENTLEYDTM_EXPORT        int bcdtmBuild_trianglesFromPointArrayTinObject( DTM_TIN_OBJ **tinPP, DPoint3d **ptsPP, long numPts, long pntMemOption, double pptol, double pltol, long edgeOption, double maxSide ) ; 

////// bcdtmCheck//////
BENTLEYDTM_Public        int bcdtmCheck_dtmFeatureEndPointsTinObject(DTM_TIN_OBJ *tinP,long reportErrors) ; 
BENTLEYDTM_Public        int bcdtmCheck_dtmFeatureListTinObject(DTM_TIN_OBJ *tinP,long reportErrors) ; 
BENTLEYDTM_Public        int bcdtmCheck_forClosePointsTinObject(DTM_TIN_OBJ *Tin,double Pptol,long MessageFlag,long *NoClosePoints) ; 
BENTLEYDTM_Public        int bcdtmCheck_forIntersectingTinHullLinesTinObject(DTM_TIN_OBJ *Tin,long MessageFlag) ; 
BENTLEYDTM_Public        int bcdtmCheck_forKnotInDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature ) ; 
BENTLEYDTM_Public        int bcdtmCheck_forSliverTrianglesTinObject(DTM_TIN_OBJ *Tin,double Pltol,long MessageFlag,long *NoSliverTriangles) ; 
BENTLEYDTM_EXPORT        int bcdtmCheck_integrityTinObject(DTM_TIN_OBJ *Tin) ; 
BENTLEYDTM_Public        int bcdtmCheck_pointPrecisionTinObject(DTM_TIN_OBJ *Tin,long Point,long MessageFlag) ; 
BENTLEYDTM_Public        int bcdtmCheck_precisionTinObject(DTM_TIN_OBJ *Tin,long MessageFlag) ; 
BENTLEYDTM_Public        int bcdtmCheck_sortOrderDataObject(DTM_DAT_OBJ *Data ) ; 
BENTLEYDTM_Public        int bcdtmCheck_sortOrderTinObject(DTM_TIN_OBJ *Tin ) ; 
BENTLEYDTM_Public        int bcdtmCheck_topologyDtmFeaturesTinObject(DTM_TIN_OBJ *tinP,long messageFlag) ; 
BENTLEYDTM_Public        int bcdtmCheck_topologyTinObject(DTM_TIN_OBJ *Tin,long MessageFlag,long WarnFlag) ; 

////// bcdtmClean//////
//BENTLEYDTM_Public        int bcdtmClean_applyIntersectionsToDataObject(DTM_DAT_OBJ *Data,LATAB *Ltable,long Ltne,TRTAB *Ttable,long Ttne) ; 
//BENTLEYDTM_EXPORT        int bcdtmClean_breakTopologyTinObject(DTM_TIN_OBJ *tinP,double snapTolerance) ; 
//BENTLEYDTM_Public        int bcdtmClean_buildIntersectionTablesDataObject(DTM_DAT_OBJ *Data,long Feature[],LATAB **Ltable, long *Ltne,long *Ltme,LPTAB **Ptable, long *Ptne,long *Ptme ) ; 
//BENTLEYDTM_Public        int bcdtmClean_checkForAndCleanKnotsFromDtmFeaturesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClean_closePolygonalDtmFeaturesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClean_contourLineZCoordinatesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Private       int bcdtmClean_countNumberOfDtmFeatureTypeForTinPointTinObject(DTM_TIN_OBJ *tinP,long tinPnt,DTMFeatureType dtmFeatureType,long *numFeaturesP) ; 
//BENTLEYDTM_Public        int bcdtmClean_determineActiveLineIntersections(DTM_DAT_OBJ *Data,LATAB *Ltable,LPTAB *All,long Alne,TRTAB **Ttable,long *Ttne,long *Ttme,double IntAutoTol,long *Nint,long *Nauto ) ; 
//BENTLEYDTM_Public        int bcdtmClean_determineImpliedIslandsBetweenVoidsDataObject(DTM_DAT_OBJ *Data,DTM_DAT_OBJ **impliedIslands) ; 
//BENTLEYDTM_Public        int bcdtmClean_determineImpliedVoidsBetweenIslandsDataObject(DTM_DAT_OBJ *Data,DTM_DAT_OBJ **impliedVoids) ; 
//BENTLEYDTM_Public        int bcdtmClean_dtmFeatureCodeSequencesDataObject(DTM_DAT_OBJ *Data ) ; 
//BENTLEYDTM_Public        int bcdtmClean_dtmFeaturesDataObject(DTM_DAT_OBJ *Data ) ; 
//BENTLEYDTM_Public        int bcdtmClean_extractImpliedIslandsBetweenVoidsDataObject(DTM_DAT_OBJ **Data,DTM_DAT_OBJ **impliedIslands) ; 
//BENTLEYDTM_Private       int bcdtmClean_extractImpliedVoidsBetweenIslandsDataObject(DTM_DAT_OBJ **Data,DTM_DAT_OBJ **impliedVoids) ; 
//BENTLEYDTM_Public        int bcdtmClean_getNextPointForHullVoidScanTinObject(DTM_TIN_OBJ *Tin,long Vp,long *Np) ; 
//BENTLEYDTM_Public        int bcdtmClean_getNextPointForVoidScanTinObject(DTM_TIN_OBJ *Tin,unsigned char *ScanStart,long Vp,long *Np) ; 
//BENTLEYDTM_Public        int bcdtmClean_intersectDtmFeaturesDataObject(DTM_DAT_OBJ *Data,long IntersectFlag,double IntersectTolerance,long *NumIntPts) ; 
//BENTLEYDTM_Public        int bcdtmClean_intersectFeaturesDataObject(DTM_DAT_OBJ *Data,long Features[],double IntersectTolerance ) ; 
//BENTLEYDTM_Public        int bcdtmClean_normaliseCoordinatesDataObject(DTM_DAT_OBJ* Data) ; 
//BENTLEYDTM_Public        int bcdtmClean_polygoniseTinLinesTinObject(DTM_TIN_OBJ *Tin,long *tinLines) ; 
//BENTLEYDTM_Private       int bcdtmClean_removeBreakLineSegmentAtTinPointTinObject(DTM_TIN_OBJ *tinP,long tinPnt) ; 
//BENTLEYDTM_Private       int bcdtmClean_removeDanglingBreaksTinObject(DTM_TIN_OBJ *tinP,double snapTolerance,long *numRemovedP) ; 
//BENTLEYDTM_Public        int bcdtmClean_removeDuplicatePointsForDtmFeatureTypeDataObject(DTM_DAT_OBJ *Data,long DtmFeatureType,double Pptol) ; 
//BENTLEYDTM_Public        int bcdtmClean_removeDuplicateXYFeaturePointsDataObject(DTM_DAT_OBJ *Data,double xyTolerance ) ; 
//BENTLEYDTM_Private       int bcdtmClean_removeSliverBreaksTinObject(DTM_TIN_OBJ *tinP,double snapTolerance,long *numRemovedP) ; 
//BENTLEYDTM_Private       int bcdtmClean_resolveOverlappingDtmFeaturesDataObject(DTM_DAT_OBJ **dtmFeatures,DTM_DAT_OBJ **resolvedDtmFeatures) ; 
//BENTLEYDTM_Public        int bcdtmClean_resolveOverlappingPolygonalDtmFeaturesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClean_resolveOverlappingPolygonalDtmFeaturesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmClean_resolveVoidsDataObject(DTM_DAT_OBJ *Voids) ; 
//BENTLEYDTM_Private       int bcdtmClean_retriangualteAlongBreakLineTinObject(DTM_TIN_OBJ *tinP,long startPnt,long *numSwappedP) ; 
//BENTLEYDTM_Public        int bcdtmClean_retriangualteBreakLinesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmClean_scanForFeatureIntersections(DTM_DAT_OBJ *Data,LATAB *Ltable,LPTAB *Ptable,long Ptne,TRTAB **Ttable,long *Ttne,long *Ttme,double IntersectTolerance,long *Nint,long *Nauto) ; 
//BENTLEYDTM_Public        int bcdtmClean_setDtmPolygonalFeatureTypeAntiClockwiseDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmClean_setPolygonalDtmFeaturesAntiClockwiseDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClean_testForTwoPointsOnSameFeatureTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long *Feature) ; 
//BENTLEYDTM_EXPORT        int bcdtmClean_validateDtmLinearFeatureTypeDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode,double Pptol) ; 
//BENTLEYDTM_Public        int bcdtmClean_validateDtmPolygonalFeatureTypeDataObject(DTM_DAT_OBJ *Data,long ForceClose,long Fscode,long Fncode,double Pptol) ; 

////// bcdtmClip//////
//BENTLEYDTM_Public        int bcdtmClip_buildClippingTinFromFencePointsTinObject(DTM_TIN_OBJ **clipTinPP,DPoint3d *fencePtsP,long numFencePts) ; 
//BENTLEYDTM_Public        int bcdtmClip_checkForInsertedVoidInternalToVoidTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmClip_checkForInsertedVoidInternalToVoidTinObjectOld(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmClip_copyTptrListToPointArrayTinObject(DTM_TIN_OBJ *Tin,long Spnt,DPoint3d **TptrPts,long *NumTptrPts) ; 
//BENTLEYDTM_Public        int bcdtmClip_copyUnmarkedFeaturesToDataObject(DTM_TIN_OBJ *Tin,long NumFeat,long Mark,DTM_DAT_OBJ **Features,long *numFeatureTableCopied) ; 
//BENTLEYDTM_Public        int bcdtmClip_createClipTinFromMultiplePolygonsTinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **ClipTin,DTM_DAT_OBJ *Data,long ClipType,double HorizontalOffset) ; 
//BENTLEYDTM_Public        int bcdtmClip_deleteMarkedPointsAndRetriangulateTinObject(DTM_TIN_OBJ *Tin,long NumFeat,long Mark) ; 
//BENTLEYDTM_Public        int bcdtmClip_determineFeatureExtentWithFenceTinObject( DTM_TIN_OBJ *tinP, DPoint3d *featurePtsP, long numFeaturePts, long *featureExtentP ) ; 
//BENTLEYDTM_Public        int bcdtmClip_dtmFeaturesExternalToTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,long mark) ; 
//BENTLEYDTM_Public        int bcdtmClip_dtmFeaturesInternalToTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,long mark) ; 
//BENTLEYDTM_Public        int bcdtmClip_externalCleanPolygonalFeaturesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmClip_externalPolygonalDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature,DPoint3d *ClipolyPtsP,long numClipPts) ; 
//BENTLEYDTM_Public        int bcdtmClip_externalToTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt) ; 
//BENTLEYDTM_Public        int bcdtmClip_findAndMergeAdjoiningVoidsTinObject(DTM_TIN_OBJ *tinP,long dtmFeature) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_fromFileTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ **Tin2,WCharCP clipTinFileP,WCharCP clipFileP,long ClipFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_fromPolygonTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ **Tin2,WCharCP clipTinFileP,DPoint3d *ClipolyPtsP,long numClipPts,long ClipFlag) ; 
//BENTLEYDTM_Public        int bcdtmClip_fromPolygonTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DPoint3d *UsrClipolyPtsP,long NumUsrClipolyPtsP,DTM_TIN_OBJ **Tin3,DTM_TIN_OBJ **Tin4) ; 
//BENTLEYDTM_Private       int bcdtmClip_getExclusiveIntersectPolygonsTinObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ *Poly) ; 
//BENTLEYDTM_Private       int bcdtmClip_groupSpotDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long mark) ; 
//BENTLEYDTM_Public        int bcdtmClip_horizontalOffsetDtmPolygonalFeatureDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode,double HorizontalOffset) ; 
//BENTLEYDTM_Private       int bcdtmClip_initialiseMarkScanTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long mark ) ; 
//BENTLEYDTM_Private       int bcdtmClip_internalPolygonalDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,DPoint3d *clipPtsP,long numClipPts) ; 
//BENTLEYDTM_Public        int bcdtmClip_internalToTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,long fillOption) ; 
//BENTLEYDTM_Private       int bcdtmClip_linearDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long mark) ; 
//BENTLEYDTM_Public        int bcdtmClip_mergePointsOntoPolygonHulls(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClip_modifyIslandHullsForExternalVoidsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmClip_placeLinearDtmFeatureSectionIntoTptrListTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long startPnt,long endPnt) ; 
//BENTLEYDTM_Public        int bcdtmClip_pointArrayToTinHullTinObject(DTM_TIN_OBJ *clipTinP,long clipOption,DPoint3d *featPtsP,long numFeatPts,DTM_POINT_ARRAY ***pointArraysPPP,long *numPointArraysP) ; 
//BENTLEYDTM_Public        int bcdtmClip_polygonsToTinHullTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClip_resolveAdjoiningPolygonalFeaturesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmClip_scanFeatureListAndDetectAndFixConcaveSpansTinObject(DTM_TIN_OBJ *tinP,long Mark) ; 
//BENTLEYDTM_Private       int bcdtmClip_scanToMarkedPointDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long startPnt,long mark,long *markPoint,long *priorPoint) ; 
//BENTLEYDTM_Public        int bcdtmClip_storeUnmarkedFeaturesInTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmClip_testForIslandHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long *Feature) ; 
//BENTLEYDTM_Public        int bcdtmClip_testForPointOnVoidHull(DTM_TIN_OBJ *Tin,long P1) ; 
//BENTLEYDTM_Public        int bcdtmClip_testForStartOfAdjoingFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature,long Pp,long Cp,long Np,long DtmFeature,long *AdjFeat) ; 
//BENTLEYDTM_Public        int bcdtmClip_testForVoidOrHoleHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long *Feature) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_tinToPointArrayPolygonTinObject(DTM_TIN_OBJ *tin1P,DTM_TIN_OBJ **tin2PP,DPoint3d *ptsP,long numPts,long clipOption ) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_tinToPolygonTinObject(DTM_TIN_OBJ *tinP,DPoint3d *ptsP,long numPts,long clipOption ) ;
//BENTLEYDTM_Public        int bcdtmClip_tinToTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,long clipOption) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_usingOffsetsTinObject( DTM_TIN_OBJ *tinObj, DTM_TIN_OBJ **clipTinObj, DPoint3d *userClipolyPtsP, long numUserClipolyPtsP, long clipOption, long isHorOffset, double horOffset, long isVertOffset, double vertOffset ) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_withMultiplePolygonsTinFile(WCharCP tinFileP,WCharCP clipTinFileP,DTM_DAT_OBJ *Data,long ClipType,double HorizontalOffset,double VerticalOffset) ; 
//BENTLEYDTM_EXPORT        int bcdtmClip_withMultiplePolygonsTinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **ClipTin,DTM_DAT_OBJ *UserData,long ClipType,double HorizontalOffset,double VerticalOffset) ; 
//BENTLEYDTM_Public        int bcdtmClip_zClipExternalDataObject(DTM_DAT_OBJ *Data,double Zmin,double Zmax) ; 
//BENTLEYDTM_Public        int bcdtmClip_zClipInternalDataObject(DTM_DAT_OBJ *Data,double Zmin,double Zmax) ; 

////// bcdtmConnect//////
//BENTLEYDTM_Public        int bcdtmConnect_buildConnectTablesFromTinLinesTinObject( DTM_TIN_OBJ *tinP, DTM_POINT_ARRAY **lineStringsPP, long numLineStrings, DTM_CONNECT_LINE **connectLinesPP, long *numConnectLinesP, DTM_CONNECT_POINT **connectPointsPP, long *numConnectPointsP ) ; 
//BENTLEYDTM_Public        int bcdtmConnect_buildConnectTinObject( DTM_TIN_OBJ **tinPP, DTM_POINT_ARRAY **pointArrayPP, long numPointArray ) ; 
//BENTLEYDTM_EXPORT        int bcdtmConnect_dtmFeatureTypeOccurrencesInDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, DTM_CONNECT_LINE **connectLinesPP, long *numConnectLinesP, DTM_CONNECT_POINT **connectPointsPP, long *numConnectPointsP, long *numLineConnectionsP ) ; 
//BENTLEYDTM_Private       int bcdtmConnect_getNumberOfDrapeBreakBetweenPointsTinObject( DTM_TIN_OBJ *tinP, long startPnt, long endPnt, long *numBreaksP ) ; 
//BENTLEYDTM_Private       int bcdtmConnect_storeConnectionLine( DTM_TIN_OBJ *tinP , DTM_CONNECTION_LINE **conLinesPP, long fromPoint, long toPoint, long *numConLinesP, long *memConLinesP, long memConLinesInc ) ; 
//BENTLEYDTM_Private       int bcdtmConnect_testForConnectedStringClosureTinObject( DTM_TIN_OBJ *tinP, DTM_POINT_ARRAY **lineStringsPP, DTM_CONNECTED_STRING *connectedStringP, long numConnectedStrings, int *stringCloseP ) ; 

////// bcdtmConvert//////
//BENTLEYDTM_EXPORT        int bcdtmConvert_coordinatesTinObject(DTM_TIN_OBJ *Tin,double ConversionFactor) ; 
//BENTLEYDTM_Private       int bcdtmConvert_copyXYZPointsToGeopakDataObject(DPoint3d *xyzPtsP,long numXyzPts,DTM_DAT_OBJ **dataObjectPP) ; 
//BENTLEYDTM_EXPORT        int bcdtmConvert_oldTinObjectTo98TinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **Tin98,double Pptol,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmConvert_removeSliversTinObject(DTM_TIN_OBJ *Tin,long MessageFlag,double Pltol) ; 
//BENTLEYDTM_EXPORT        int bcdtmConvert_rotateCoordinatesTinObject(DTM_TIN_OBJ *Tin,double Xorg,double Yorg,double Angle) ; 
//BENTLEYDTM_Public        int bcdtmConvert_tinObjectToTinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **Tinn,double Pptol,double Pltol) ; 
//BENTLEYDTM_EXPORT        int bcdtmConvert_translateCoordinatesTinObject(DTM_TIN_OBJ *Tin,double Xinc,double Yinc,double Zinc) ; 
//BENTLEYDTM_Public        int bcdtmConvert_writeTinFeaturesToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 

////// bcdtmData//////
//BENTLEYDTM_Public        int bcdtmData_appendDataObjectsIfAdjacentDataObject(DTM_DAT_OBJ *Data1,DTM_DAT_OBJ *Data2,double XYTolerance,double ZTolerance,long *AppendFlag) ; 
//BENTLEYDTM_Public        int bcdtmData_applyIntersectEditTransactionsToDataObject(DTM_DAT_OBJ *Data,LATAB *Ltab,long Ltne,TRTAB *Ttab,long Ttne) ; 
//BENTLEYDTM_Public        int bcdtmData_applyIntersectionsToDataObject(DTM_DAT_OBJ *Data,LATAB *Ltable,long Ltne,TRTAB *Ttable,long Ttne) ; 
//BENTLEYDTM_Public        int bcdtmData_buildIntersectionTablesDataObject(DTM_DAT_OBJ *Data,long Feature[],LATAB **Ltable, long *Ltne,long *Ltme,LPTAB **Ptable, long *Ptne,long *Ptme ) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_changeAllOccurrencesOfDtmFeatureTypeDataObject(DTM_DAT_OBJ *Data,long DtmFeatureType1,long DtmFeatureType2) ; 
//BENTLEYDTM_Public        int bcdtmData_checkAndRemoveKnotsInDtmFeature(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmData_checkForDuplicatePointErrorsInDataObject(DTM_DAT_OBJ *Data,long *DupErrors) ; 
//BENTLEYDTM_Public        int bcdtmData_cleanDtmFeatureInDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmData_cleanDtmFeaturesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_copyDtmFeatureTypeFromDataObjectToDataObject(DTM_DAT_OBJ *dataObjP1 ,DTMFeatureType dtmFeatureType, DTM_DAT_OBJ *dataObjP2) ; 
//BENTLEYDTM_Public        int bcdtmData_copyNonBreakDataToDataObject(DTM_DAT_OBJ *Data,DTM_DAT_OBJ **Save) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_copyTaggedDtmFeatureTypeOccurrencesToDataObject(DTM_DAT_OBJ *dataObject1P,DTM_DAT_OBJ *dataObject2P,DTMFeatureType dtmFeatureType,DTMUserTag userTagValue) ; 
//BENTLEYDTM_Public        int bcdtmData_countNumberOfContinuingDtmFeaturesForPointTinObject(DTM_TIN_OBJ *tinP,long point,long *numFeatureTable) ; 
//BENTLEYDTM_Public        int bcdtmData_countNumberOfDtmFeaturesForPointTinObject(DTM_TIN_OBJ *Tin,long Point,long *numFeatureTable) ; 
//BENTLEYDTM_Public        int bcdtmData_createIntersectionTablesDataObject(DTM_DAT_OBJ *Data, LATAB **Ltab, long *Ltne,long *Ltme, LPTAB **Ptab, long *Ptne,long *Ptme ) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_deleteAllOccurrencesOfDtmFeatureTypeFromDataObject(DTM_DAT_OBJ *Data,long DtmFeatureType) ; 
//BENTLEYDTM_Public        int bcdtmData_detectActiveLineIntersections(DTM_DAT_OBJ *Data,LATAB *Ltab,LPTAB *All,long Alne,double IntAutoTol) ; 
//BENTLEYDTM_Public        int bcdtmData_detectIntersectingFeaturesDataObject(DTM_DAT_OBJ *Data,double IntAutoTol,long IgnoreDupErrors ) ; 
//BENTLEYDTM_Public        int bcdtmData_determineActiveLineIntersections(DTM_DAT_OBJ *Data,LATAB *Ltable,LPTAB *All,long Alne,TRTAB **Ttable,long *Ttne,long *Ttme,double IntAutoTol,long *Nint,long *Nauto ) ; 
//BENTLEYDTM_Public        int bcdtmData_getHullsForIntersectingVoidsDataObject(DTM_DAT_OBJ *Voids,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmData_getInternalPolygonalFeaturesTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data,long DtmFeatureType) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_intersectDtmFeaturesDataObject(DTM_DAT_OBJ *Data,double IntersectTolerance) ; 
//BENTLEYDTM_Public        int bcdtmData_intersectFeaturesDataObject(DTM_DAT_OBJ *Data,long Features[],double IntersectTolerance ) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_joinAdjacentDataObjects(DTM_DAT_OBJLIST *JoinObjects,long NumJoinObjects,double XYTolerance,double ZTolerance) ; 
BENTLEYDTM_EXPORT        int bcdtmData_joinAdjacentDtmObjects(DTM_DAT_OBJLIST *joinObjectsP,long numJoinObjects,double xyTolerance,double zTolerance) ;
//BENTLEYDTM_Public        int bcdtmData_mergePointsWithinPointToPointToleranceDataObject(DTM_DAT_OBJ *dataP) ;
//BENTLEYDTM_EXPORT        int bcdtmData_moveTaggedDtmFeatureTypeOccurrencesToDataObject(DTM_DAT_OBJ *dataObject1P,DTM_DAT_OBJ *dataObject2P,DTMFeatureType dtmFeatureType,DTMUserTag userTagValue) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_moveToP3DArrayDtmFeatureDataObject(DTM_DAT_OBJ *Data,long DtmFeature,DTMUserTag *UserTag,DPoint3d **FeaturePts,long *NumFeaturePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_removeAllOccurrencesOfDtmFeatureTypeFromDataObject(DTM_DAT_OBJ *Data,long DtmFeatureType) ; 
//BENTLEYDTM_Public        int bcdtmData_removeFeaturePointsWithinPointToleranceDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmData_resolveIntersectingVoidsDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmData_scanForFeatureIntersections(DTM_DAT_OBJ *Data,LATAB *Ltable,LPTAB *Ptable,long Ptne,TRTAB **Ttable,long *Ttne,long *Ttme,double IntersectTolerance,long *Nint,long *Nauto) ; 
//BENTLEYDTM_Public        int bcdtmData_scanForIntersections(DTM_DAT_OBJ *Data,LATAB *Ltab,LPTAB *Ptab,long Ptne,double IntAutoTol) ; 
//BENTLEYDTM_Public        int bcdtmData_setVoidsAntiClockwiseDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmData_testForAdjacenyOfDataObjectsDataObject(DTM_DAT_OBJ *Data1,DTM_DAT_OBJ *Data2,double Xmin,double Ymin,double Zmin,double Xmax,double Ymax,double Zmax,double XYTolerance,double ZTolerance,long *AdjacencyFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_validateDtmPolygonalFeatureDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmData_validateMnDotVoidsDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmData_validatePolygonalDtmFeaturesObject(DTM_DAT_OBJ *Data) ; 

////// bcdtmDelta//////
//BENTLEYDTM_Public        int bcdtmDelta_calculateDeltaTinToTinTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2) ; 
//BENTLEYDTM_Public        int bcdtmDelta_copyTinLinesToPointLinesTinObject(DTM_TIN_OBJ *Tin,PNTLINE **TinLines,long *NumTinLines) ; 
//BENTLEYDTM_Public        int bcdtmDelta_copyTinPointsToP3DTinObject(DTM_TIN_OBJ *Tin,DPoint3d **TinPoints,long *NumTinPoints) ; 
//BENTLEYDTM_Public        int bcdtmDelta_copyVoidsAndIslandsToPolygonObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_POLYGON_OBJ **Poly) ; 
//BENTLEYDTM_EXPORT        int bcdtmDelta_createDeltaLatticeToPlaneTinObject(DTM_TIN_OBJ *Tin1,DTM_LAT_OBJ **Lattice,DPoint3d *DeltaPts,long NumDeltaPts,double Elevation,long NoLatPts ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDelta_createDeltaLatticeToSurfaceTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_LAT_OBJ **Lattice,DPoint3d *DeltaPts,long NumDeltaPts,long NoLatPts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDelta_createDeltaTinToPlaneTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ **Tin2,DPoint3d *DeltaPts,long NumDeltaPts,double Elevation ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDelta_createDeltaTinToSurfaceTinObject(DTM_TIN_OBJ **tin1ObjPP,DTM_TIN_OBJ **tin2ObjPP,DTM_TIN_OBJ **deltaTinPP,DPoint3d *deltaPtsP,long numDeltaPts) ; 
//BENTLEYDTM_Public        int bcdtmDelta_drapeTin1PointsOnTin2(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2) ; 
//BENTLEYDTM_Public        int bcdtmDelta_insertTinIntoTinTinObject(DTM_TIN_OBJ *Tin,DPoint3d **TinPoints,long NumTinPoints,PNTLINE **TinLines,long NumTinLines) ; 

////// bcdtmDraiange//////
//BENTLEYDTM_Private       int bcdtmDraiange_traceMaximumAscentFromTriangleEdgeTinObject(DTM_TIN_OBJ *tinP,long useTables,long traceOverZeroSlopeTriangles,double lastAngle,long pnt1,long pnt2,long pnt3,double startX,double startY,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P,double *nextXP,double *nextYP,double *nextZP,long *processP ) ; 
//BENTLEYDTM_Private       int bcdtmDraiange_traceMaximumAscentFromTrianglePointTinObject(DTM_TIN_OBJ *tinP,long useTables,long traceOverZeroSlopeTriangles,double falseHighElevation,double lastAngle,long lastPoint,long pnt,double startX,double startY,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P, double *nextXP,double *nextYP,double *nextZP,long *processP ) ; 

////// bcdtmDrain//////
//BENTLEYDTM_Private       int bcdtmDrain_buildTriangleHydrologyTableTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_HYD_TABLE **trgHydTabPP,DTM_TRG_INDEX_TABLE *trgIdxTabP ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_buildTriangleIndexTableTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE **trgIdxTabPP,long *numTrianglesP) ; 
//BENTLEYDTM_Public        int bcdtmDrain_checkForLineOnHullLineTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long *hullLineP) ; 
//BENTLEYDTM_Public        int bcdtmDrain_checkForPointOnHullLineTinObject(DTM_TIN_OBJ *tinP,long Point,long *HullLine) ; 
//BENTLEYDTM_Private       int bcdtmDrain_fixDrainagePrecisonTinObject(DTM_TIN_OBJ *tinP,double insertAngle,long trgPnt1,long trgPnt2,long trgPnt3,long trgPnt4,double pointX,double pointY,long *nextPntP,double *nextXP,double *nextYP,long *fixTypeP,long *processP ) ; 
//BENTLEYDTM_Public        int bcdtmDrain_getFirstTracePointTinObject(DTM_TIN_OBJ *tinP,long DescentFlag,long P1,long P2,long P3,double Sx,double Sy,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny, double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrain_getNextMaximumAscentLineTinObject(DTM_TIN_OBJ *tinP,long lastPoint,long point,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P,double *nextXP,double *nextYP, double *nextZP ,long *processP ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_getNextPointOutFromHighPointTinObject(DTM_TIN_OBJ *tinP,long UseTable,long HighPoint,double falseHighDepth,long *Np) ; 
//BENTLEYDTM_Private       int bcdtmDrain_getNextPointOutFromLowPointTinObject(DTM_TIN_OBJ *tinP,long LowPoint,long Mark,double falseLowDepth,long *Np) ; 
//BENTLEYDTM_Public        int bcdtmDrain_getTriangleDescentAndAscentAnglesTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double *descentAngle,double *ascentAngle,double *Slope) ; 
//BENTLEYDTM_Public        int bcdtmDrain_getTriangleFlowDirectionTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3 ) ; 
//BENTLEYDTM_Public        int bcdtmDrain_getTriangleNumberTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE *trgIdxTabP,long P1,long P2,long P3, long *trgNumP ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_insertMaximumAscentLineBetweenPointsTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep) ; 
//BENTLEYDTM_Private       int bcdtmDrain_insertMaximumAscentLinesFromDtmFeaturesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmDrain_insertMaximumAscentLinesFromDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long DtmFeature) ; 
//BENTLEYDTM_Private       int bcdtmDrain_insertMaximumAscentLinesFromRidgePointsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmDrain_insertMaximumAscentLineTinObject(DTM_TIN_OBJ *tinP,long ridgePnt1,long ridgePnt2,long ridgePnt3 ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_interpolateZ(DTM_TIN_OBJ *tinP,long P1,long P2,long P3, double *z ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_polygoniseAndLoadTinCatchmentsTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE *trgIdxTabP,long numTriangles) ; 
//BENTLEYDTM_Private       int bcdtmDrain_polygoniseAndRefineTinCatchmentsTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE *trgIdxTabP,long numTriangles) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_refineTinCatchmentsTinObject(DTM_TIN_OBJ *tinP,double falseLowDepth,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_Private       int bcdtmDrain_returnFalseLowPointsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double falseLowDepth,double Xmin,double Ymin,double Xmax,double Ymax,long *NumLow ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_returnHighPointsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumHigh) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_returnLowPointsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumLow ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_returnNoneFalseLowPointsTinObject(DTM_TIN_OBJ *tinP,double falseLowDepth,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumLow ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_returnRidgeLinesTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long *NumRidge,double Xmin,double Ymin,double Xmax,double Ymax ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_returnSumpLinesTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long *NumSump,double Xmin,double Ymin,double Xmax,double Ymax ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_returnZeroSlopeRidgeLinesTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumZeroSlopeRidge ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_returnZeroSlopeSumpLinesTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumZeroSlopeSump) ; 
//BENTLEYDTM_Private       int bcdtmDrain_returnZeroSlopeTrianglesTinObject(DTM_TIN_OBJ *tinP,long loadFlag,double Xmin,double Ymin,double Xmax,double Ymax,long *NumZeroSlopeTriangles ) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanBetweenPointsForMaximumAscentTriangleTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *TBP1,long *TBP2,double *TriangleascentAngle,double *TriangleSlope) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanBetweenPointsForMaximumDescentTriangleTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *TBP1,long *TBP2,double *TriangledescentAngle,double *TriangleSlope) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanBetweenPointsForRidgeLineTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *RidgePoint) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanBetweenPointsForSumpLineTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *SumpPoint) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanCatchmentPolygonForRidgeStartPointsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmDrain_scanPointForMaximumAscentTriangleTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long excludePoint,long *trgPoint1P,long *trgPoint2P,double *trgAscentAngleP,double *trgSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanPointForMaximumDescentTriangleTinObject(DTM_TIN_OBJ *tinP,long useTable,long point,long excludePoint,long *trgBasePnt1P,long *trgBasePnt2P,double *trgDescentAngleP,double *trgSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanPointForRidgeLineTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long excludePoint,long *ridgePointP,double *ridgeSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrain_scanPointForSumpLineTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long excludePoint,long *sumpPointP,double *sumpSlopeP) ; 
//BENTLEYDTM_Public        int bcdtmDrain_testForLowerConnectedPointToPointTinObject(DTM_TIN_OBJ *tinP,long Point,long *Np) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_traceCatchmentAreaTinObject(DTM_TIN_OBJ *tinP,double x, double y) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_traceCatchmentPatternsTinObject(DTM_TIN_OBJ *tinP,double falseHighDepth,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_traceDrainagePatternsTinObject(DTM_TIN_OBJ *tinP,double falseLowDepth,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_traceMaximumAscentTinObject(DTM_TIN_OBJ *tinP,double falseHighDepth,double x, double y) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrain_traceTinCatchmentsTinObject(DTM_TIN_OBJ *tinP,double falseLowDepth,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_Private       int bcdtmDrain_traceToHighPointTinObject(DTM_TIN_OBJ *tinP,double falseHighDepth,long useTables,long traceOverZeroSlopeTriangles,long loadFlag,long pnt1,long pnt2,long pnt3,double x,double y,double z,long *highPoint1P,long *highPoint2P) ; 
//BENTLEYDTM_Private       int bcdtmDrain_traceToSumpTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,long pnt3,double *xP,double *yP,double *zP,long *sumpPnt1P,long *sumpPnt2P) ; 
//BENTLEYDTM_Private       int bcdtmDrain_unMarkPointsConnectedToLowPointTinObject(DTM_TIN_OBJ *tinP,long Mark ,long LowPoint) ; 

////// bcdtmDrainage//////
//BENTLEYDTM_Private       int bcdtmDrainage_appendBermToPond( DTM_DAT_OBJ *pondSideSlopesP, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance ) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_calculateGradeSlopeAngleAcrossTriangleFaceTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,long *GradePointFound,double *GradeSlopeAngle) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_calculateGradeSlopeAnglesForTriangleTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double GradeSlope,long *GradeSlopeAngleFound,double *GradeSlopeAngleOne,double *GradeSlopeAngleTwo) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_calculateVolumeSurfaceToPlaneTinObject(DTM_TIN_OBJ *tinObjectP,double elevation,double *cutP,double *fillP,double *balanceP,double *areaP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_checkForFlowOutFromSumpLinePointsTinObject(DTM_TIN_OBJ *tinP,DTM_SUMP_LINES *sumpLinesP,long numSumpLines,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_concatenateZeroSlopeSumpLinesTinObject(DTM_TIN_OBJ *tinP,long sP1,long sP2,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesTableP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_designPondToATargetElevation( DPoint3d *pondPtsP, long numPondPts, long outsideInsideOpt, double elevation, double pondSlope, double freeBoard, long isBerm, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, DTM_DAT_OBJ **designedPond, long *designedPondFlag, double *designedPondElevation, double *designedPondVolume ) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_designPondToATargetVolume( DPoint3d *pondPtsP, long numPondPts, long outsideInsideOpt, double designVolume, double pondSlope, double freeBoard, long isBerm, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, DTM_DAT_OBJ **designedPond, long *designedPondFlag, double *designedPondElevation, double *designedPondVolume ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainage_designPondToATargetVolumeOrElevation( DTM_DAT_OBJ *pondObjectP, long *pondFlag, double *pondElevation, double *pondVolume, DPoint3d *pondPts, long numPondPts, long outsideInsideOpt, long volElevOpt, double volume, double elevation, double pondSlope, double freeBoard, long isBerm, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double fillSlope ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainage_determineLowPointPondAboutPointTinObject( DTM_TIN_OBJ *tinP, double x, double y, long drawPond, long *pondDeterminedP, double *pondElevationP, double *pondDepthP, double *pondAreaP, double *pondVolumeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determineLowPointPondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determinePondAboutLowPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determinePondAboutZeroSlopeSumpLineTinObject(DTM_TIN_OBJ *tinP,long sP1,long sP2,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesP,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determinePondAboutZeroSlopeTriangleTinObject(DTM_TIN_OBJ *tinP,long tinPnt1,long tinPnt2,long tinPnt3,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainage_determinePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determineZeroSlopeSumpLinePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_determineZeroSlopeTrianglePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_expandPondAboutPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long priorPoint,long nextPoint,double lastArea,long *startPointP,double *areaP) ; 
//BENTLEYDTM_Public        int bcdtmDrainage_expandPondToExitPointTinObject(DTM_TIN_OBJ *tinP,long startPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_extractPondBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_findLowPointEntryInLowPointPondTable(DTM_TIN_OBJ *tinP,long lowPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_findLowPointEntryInSumpLinePondTable(DTM_TIN_OBJ *tinP,long lowPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_findSumpLineEntryInSumpLinePondTable(DTM_TIN_OBJ *tinP,long sP1,long sP2,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_getFirstGradeTracePointTinObject(DTM_TIN_OBJ *tinP,double Sx,double Sy,double Sz,double Slope,long P1,long P2,long P3,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_getSumpLineOffsetTinObject(DTM_TIN_OBJ *tinP,long sumpPoint1,long sumpPoint2,long *sumpLineOffsetP) ; 
//BENTLEYDTM_Public        int bcdtmDrainage_getZeroSlopeTriangleToTraceOver(DTM_TIN_OBJ *tinP,long pnt,double lastAngle,long *trgPnt1P,long *trgPnt2P) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_markZeroSlopeSumpLinesWithinTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPoint,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesTableP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_placePolygonAroundSumpLinesTinObject(DTM_TIN_OBJ *tinP,DTM_SUMP_LINES *sumpLinesP,long numSumpLines,long *startPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_placePolygonAroundZeroSlopeTriangleTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,long *startPointP) ; 
//BENTLEYDTM_Public        int bcdtmDrainage_polygoniseZeroSlopeTrianglesTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_rangeScanPointForMaximumDescentTinObject(DTM_TIN_OBJ *tinP,long UseTable,long ExitPoint,long PriorPoint,long NextPoint,long *TP1,long *TP2,long *TP3,double *Angle,double *Slope,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_rangeScanPointForMaximumDescentTriangleTinObject(DTM_TIN_OBJ *tinP,long UseTable,long P1,long P2,long P3,long *Tp1,long *Tp2,long *Tp3,double *TriangledescentAngle,double *TriangleSlope,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_rangeScanPointForSumpLineTinObject(DTM_TIN_OBJ *tinP,long UseTable,long P1,long P2,long P3,long *SumpPoint,double *SumpAngle,double *SumpSlope) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_scanSumpPointForMaximumDescentTriangleTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long *trgPnt1P,long *trgPnt2P,double *trgSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_scanSumpPointForSumpLineTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long *sumpPointP,double *slopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_testForPondExitPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long *priorPointP,long *nextPointP,long *exitFromPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceFromPondLowPointToLowPointTinObject(DTM_TIN_OBJ *tinP,long UseTable,long loadFlag,long P1,long P2,long P3,long *Lp1,long *Lp2,double *Lpx,double *Lpy,double *Lpz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceGradedSlopeFromTriangleEdgeTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceGradedSlopeFromTrianglePointTinObject(DTM_TIN_OBJ *tinP,long P1,double Sx,double Sy,double GradeSlope,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceGradedSlopeTinObject(DTM_TIN_OBJ *tinP,double x,double y,double Slope,long loadFlag,long *GradeTraced) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceGradeTinObject(DTM_TIN_OBJ *tinP,double Sx,double Sy,double Sz,long loadFlag,long P1,long P2,long P3,double GradeSlope,long *LP1,long *LP2) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceIslandBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long mark,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ *polygonP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceMaximumDescentFromTriangleEdgeTinObject(DTM_TIN_OBJ *tinP,long useTables,long falseLowProcessing,double lastAngle,long startPnt1,long startPnt2,long startPnt3,double startX,double startY,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P,double *nextXP,double *nextYP,double *nextZP,long *processP,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_traceMaximumDescentFromTrianglePointTinObject( DTM_TIN_OBJ *tinP, long useTables, double falseLowDepth, double lastAngle, long lastPnt, long startPnt, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP, long *exitPointP, long *priorPointP, long *nextPointP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainage_traceMaximumDescentTinObject(DTM_TIN_OBJ *tinP,double falseLowDepth,double x, double y) ; 
//BENTLEYDTM_Private       int bcdtmDrainage_tracePondBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ *polygonP,DPoint3d **pondPtsPP,long *numPondPtsP) ; 
//BENTLEYDTM_Public        int bcdtmDrainage_traceToLowPointTinObject( DTM_TIN_OBJ *tinP, double falseLowDepth, long useTable, long loadFlag, long pnt1, long pnt2, long pnt3, double x, double y, double z, long *lowPoint1P, long *lowPoint2P) ; 

////// bcdtmDrainageNgp//////
//BENTLEYDTM_Private       int bcdtmDrainageNgp_appendBermToPond( DTM_DAT_OBJ *pondSideSlopesP, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_ascentStackLoadFunction( DTMFeatureType dtmFeatureType, DTMUserTag userTag, DTM_GUID userFeatureId, DPoint3d *featurePtsP, long numFeaturePts, void *userP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_buildTriangleHydrologyTableTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_HYD_TABLE **trgHydTabPP,DTM_TRG_INDEX_TABLE *trgIdxTabP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_buildTriangleIndexTableTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE **trgIdxTabPP,long *numTrianglesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_calculateGradeSlopeAngleAcrossTriangleFaceTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,long *GradePointFound,double *GradeSlopeAngle) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_calculateGradeSlopeAnglesForTriangleTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double GradeSlope,long *GradeSlopeAngleFound,double *GradeSlopeAngleOne,double *GradeSlopeAngleTwo) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_calculateIntersectOfApexRadialWithTriangleBaseTinObject( DTM_TIN_OBJ *tinP, long apexPnt, long basePnt1, long basePnt2, double angle, double *xP, double *yP, double *zP, long *intPntP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_calculateIntersectOfRadialWithTinLineTinObject( DTM_TIN_OBJ *tinP, double sRadX, double sRadY, double eRadX, double eRadY, long tinPnt1, long tinPnt2, double *xP, double *yP, double *zP, long *intPntP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_calculateRadialIntersectionPointOnTriangleBaseTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,long pnt3,double angle,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P,double *nextXP,double *nextYP,double *nextZP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_calculateVolumeSurfaceToPlaneTinObject(DTM_TIN_OBJ *tinObjectP,double elevation,double *cutP,double *fillP,double *balanceP,double *areaP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_catchmentLoadFunction( DTMFeatureType dtmFeatureType, DTMUserTag userTag, DTM_GUID userFeatureId, DPoint3d *featurePtsP, long numFeaturePts, void *userP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_checkForFalseLowPointTinObject( DTM_TIN_OBJ *tinP, double falseLowDepth, long lowPoint, long *falseLowPointP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_checkForFlowOutFromSumpLinePointsTinObject(DTM_TIN_OBJ *tinP,DTM_SUMP_LINES *sumpLinesP,long numSumpLines,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_checkForSumpOrRidgeLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long linePoint1, long linePoint2, long antPoint, long clkPoint, long *lineTypeP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_concatenateZeroSlopeSumpLinesTinObject(DTM_TIN_OBJ *tinP,long sP1,long sP2,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesTableP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_designPondToATargetElevation( DPoint3d *pondPtsP, long numPondPts, long outsideInsideOpt, double elevation, double pondSlope, double freeBoard, long isBerm, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, DTM_DAT_OBJ **designedPond, long *designedPondFlag, double *designedPondElevation, double *designedPondVolume ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_designPondToATargetVolume( DPoint3d *pondPtsP, long numPondPts, long outsideInsideOpt, double designVolume, double pondSlope, double freeBoard, long isBerm, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, DTM_DAT_OBJ **designedPond, long *designedPondFlag, double *designedPondElevation, double *designedPondVolume ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_designPondToATargetVolumeOrElevation( DTM_DAT_OBJ *pondObjectP, long *pondFlag, double *pondElevation, double *pondVolume, DPoint3d *pondPts, long numPondPts, long outsideInsideOpt, long volElevOpt, double volume, double elevation, double pondSlope, double freeBoard, long isBerm, double bermSlope, double bermWidth, long isCrown, double crownWidth, double cornerStrokeTolerance, long isBermFillOnly, DTM_TIN_OBJ *fillTinP, double fillSlope ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_determineCatchmentForPointTinObject( DTM_TIN_OBJ *tinP, double x, double y, long *catchmentDeterminedP, long *catchmentClosureP, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_determineCatchmentsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numCatchmentsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_determineLowPointPondAboutPointTinObject( DTM_TIN_OBJ *tinP, double x, double y, long drawPond, long *pondDeterminedP, double *pondElevationP, double *pondDepthP, double *pondAreaP, double *pondVolumeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determineLowPointPondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determinePondAboutLowPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determinePondAboutZeroSlopeSumpLineTinObject(DTM_TIN_OBJ *tinP,long sP1,long sP2,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesP,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determinePondAboutZeroSlopeTriangleTinObject(DTM_TIN_OBJ *tinP,long tinPnt1,long tinPnt2,long tinPnt3,long loadFlag,long boundaryFlag,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_determinePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determineZeroSlopeSumpLinePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_determineZeroSlopeTrianglePondsTinObject(DTM_TIN_OBJ *tinP,long loadFlag,long buildTable) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_expandPondAboutPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long priorPoint,long nextPoint,double lastArea,long *startPointP,double *areaP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_expandPondToExitPointTinObject(DTM_TIN_OBJ *tinP,long startPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_extractClosingAscentTracesTinObject( DTM_TIN_OBJ *tinP, long startPnt, long nextPnt, DTMDirection direction, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_extractClosingCatchmentBoundaryTinObject( DTM_TIN_OBJ *tinP, long startPnt, long nextPnt, DTMDirection direction, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_extractNoneClosingCatchmentBoundaryTinObject( DTM_TIN_OBJ *tinP, long startPnt, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_extractPointCatchmentFromAscentTracesTinObject( DTM_TIN_OBJ *tinP, double sumpX, double sumpY, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_extractPointCatchmentFromTinObject( DTM_TIN_OBJ *tinP, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_extractPondBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ **polygonPP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_findLowPointEntryInLowPointPondTable(DTM_TIN_OBJ *tinP,long lowPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_findLowPointEntryInSumpLinePondTable(DTM_TIN_OBJ *tinP,long lowPoint,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_findSumpLineEntryInSumpLinePondTable(DTM_TIN_OBJ *tinP,long sP1,long sP2,long *exitPointP,long *priorPointP,long *nextPointP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_getAscentZeroSlopeTriangleToTraceOverTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, double lastAngle, long *trgPnt1P, long *trgPnt2P ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_getDescentZeroSlopeTriangleToTraceOverTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, double lastAngle, long *trgPnt1P, long *trgPnt2P ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_getDrainageFlowLinesForPointTinObject(DTM_TIN_OBJ *tinP,long useTables,long sortOrder,long point,DTM_DRAINAGE_FLOW_LINE **flowLinesPP,long *numFlowLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_getFirstGradeTracePointTinObject(DTM_TIN_OBJ *tinP,double Sx,double Sy,double Sz,double Slope,long P1,long P2,long P3,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_getFirstTrianglePointFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, long traceDirection, long pnt1, long pnt2, long *nxtPntP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_getMaximumAscentForLineTinObject( DTM_TIN_OBJ *tinP, long tinPnt1, long tinPnt2, long *ascentTypeP, double *ascentSlopeP, double *ascentAngleP, long *ascentPnt1P, long *ascentPnt2P, long *ascentPnt3P) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_getPriorAscentPointTinObject(DTM_TIN_OBJ *tinP,long point,DTMDirection direction,double lastAngle,long *lastPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_getSumpLineOffsetTinObject(DTM_TIN_OBJ *tinP,long sumpPoint1,long sumpPoint2,long *sumpLineOffsetP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_getTriangleDescentAndAscentAnglesTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double *descentAngleP,double *ascentAngleP,double *trgSlopeP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_getTriangleNumberTinObject(DTM_TIN_OBJ *tinP,DTM_TRG_INDEX_TABLE *trgIdxTabP,long trgPnt1,long trgPnt2,long trgPnt3, long *trgNumP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_insertMaximumAscentLineBetweenPointsTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_insertMaximumAscentLinesFromDtmFeaturesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_insertMaximumAscentLinesFromDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long DtmFeature) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_markZeroSlopeSumpLinesWithinTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPoint,DTM_SUMP_LINES **sumpLinesPP,long *numSumpLinesTableP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_placePolygonAroundSumpLinesTinObject(DTM_TIN_OBJ *tinP,DTM_SUMP_LINES *sumpLinesP,long numSumpLines,long *startPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_placePolygonAroundZeroSlopeTriangleTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,long *startPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_polygoniseAndLoadCatchmentsFromTriangleIndexValuesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, DTM_TRG_INDEX_TABLE *trgIdxTabP, long numTriangles, void *userP, long *numPolygonsP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_polygoniseZeroSlopeTrianglesTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_processAscentStackFiFo( DTM_TIN_OBJ *tinP, DTM_POINT_ARRAY ***pointArraysPPP, long *numPointArraysP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_processAscentStackFIFO( DTM_TIN_OBJ *tinP, DTM_POINT_ARRAY ***pointArraysPPP, long *numPointArraysP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_rangeScanPointForMaximumDescentSumpLineTinObject(DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *sumpPointP, double *sumpSlopeP) ;
//BENTLEYDTM_Public        int bcdtmDrainageNgp_rangeScanPointForMaximumDescentTinObject(DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *descentTypeP, long *descentPnt1P, long *descentPnt2P, double *descentSlopeP, double *descentAngle) ;
//BENTLEYDTM_Private       int  bcdtmDrainageNgp_rangeScanPointForMaximumDescentTriangleTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *trgBasePnt1P, long *trgBasePnt2P, double *trgDescentAngleP, double *trgSlopeP) ;
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_refineCatchmentsTinObject( DTM_TIN_OBJ *tinP,double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numCatchmentsP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_removeLineFromDtmFeatureTinObject( DTM_TIN_OBJ *tinP, long dtmFeature, long pnt1, long pnt2) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_removeRedundantAscentLinesTinObject( DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnFalseLowPointOffsetsTinObject( DTM_TIN_OBJ *tinP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **lowPtsPP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnFalseLowPointsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnHighPointOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **highPtsPP, long *numHighPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnHighPointsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numHighPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnLowPointOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **lowPtsPP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnLowPointsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnNoneFalseLowPointOffsetsTinObject( DTM_TIN_OBJ *tinP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **lowPtsPP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnNoneFalseLowPointsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numLowPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnRidgeLineOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **ridgePtsPP, long *numRidgeLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnRidgeLinesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numRidgeLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnSumpLineOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **sumpPtsPP, long *numSumpLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnSumpLinesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numSumpLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeRidgeLineOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **ridgePtsPP, long *numRidgeLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeRidgeLinesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numRidgeLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeSumpLineOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **sumpPtsPP, long *numSumpLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeSumpLinesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numSumpLinesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeTriangleOffsetsTinObject( DTM_TIN_OBJ *tinP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DPoint3d **tinPtsPP, long **trianglePtsPP, long *numZeroSlopeTrianglesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_returnZeroSlopeTrianglesTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP, long *numZeroSlopeTrianglesP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanAscentTracesForClosureTinObject( DTM_TIN_OBJ *tinP, long startPnt, long nextPnt, long scanDirection, long *lastPntP, long *closureP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumAscentRidgeLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *ridgePointP, double *ridgeSlopeP, double *ridgeAngleP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumAscentTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *ascentTypeP, long *ascentPnt1P, long *ascentPnt2P, double *ascentSlopeP, double *ascentAngleP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumAscentTriangleTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *trgPnt1P, long *trgPnt2P, double *trgAscentAngleP, double *trgSlopeP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumDescentSumpLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *sumpPointP, double *sumpSlopeP, double *sumpAngleP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumDescentTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *descentTypeP, long *descentPnt1P, long *descentPnt2P, double *descentSlopeP, double *descentAngleP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanBetweenPointsForMaximumDescentTriangleTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, long *trgPnt1P, long *trgPnt2P, double *trgDescentAngleP, double *trgSlopeP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanCatchmentBoundaryForClosureTinObject( DTM_TIN_OBJ *tinP, long startPnt, long nextPnt, long scanDirection, long *lastPntP, long *closureP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanLineEndPointsForAscentLinesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point1, long point2, DTM_ASCENT_LINE **ascentLinesPP, long *numAscentLinesP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointBetweenPointsForAscentLinesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, DTM_ASCENT_LINE **ascentLinesPP, long *numAscentLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointBetweenPointsForAscentTrianglesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, DTM_ASCENT_LINE **ascentTrianglesPP, long *numAscentTrianglesP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointBetweenPointsForRidgeLinesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long startPoint, long endPoint, DTM_ASCENT_LINE **ridgeLinesPP, long *numRidgeLinesP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForAscentLinesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, DTM_ASCENT_LINE **ascentLinesPP, long *numAscentLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForAscentRidgeLinesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_ASCENT_LINE **ridgeLinesPP,long *numRidgeLinesP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForAscentSumpLinesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_ASCENT_LINE **ascentSumpLinesPP,long *numAscentSumpLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForAscentTrianglesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, DTM_ASCENT_LINE **ascentTrianglesPP, long *numAscentTrianglesP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForDescentLinesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, DTM_DESCENT_LINE **descentLinesPP, long *numDescentLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForDescentSumpLinesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_DESCENT_LINE **sumpLinesPP,long *numSumpLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForDescentTrianglesTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, DTM_DESCENT_LINE **descentTrianglesPP, long *numDescentTrianglesP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForFlowTrianglesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_DRAINAGE_FLOW_LINE **flowTrianglesPP,long *numFlowTrianglesP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForMaximumAscentRidgeLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *ridgePointP, double *ridgeSlopeP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForMaximumAscentSumpLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *sumpPointP, double *sumpSlopeP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForMaximumAscentTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *ascentTypeP, long *ascentPnt1P, long *ascentPnt2P, double *ascentSlopeP, double *ascentAngleP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForMaximumAscentTriangleTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *trgBasePnt1P, long *trgBasePnt2P, double *trgAscentAngleP, double *trgSlopeP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForMaximumDescentSumpLineTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *sumpPointP, double *sumpAngleP, double *sumpSlopeP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_scanPointForMaximumDescentTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *descentTypeP, long *descentPnt1P, long *descentPnt2P, double *descentSlopeP, double *descentAngleP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForMaximumDescentTriangleTinObject( DTM_TIN_OBJ *tinP, long useTables, long point, long excludePoint, long *trgBasePnt1P, long *trgBasePnt2P, double *trgDescentAngleP, double *trgSlopeP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForRidgeLinesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_DRAINAGE_FLOW_LINE **ridgeLinesPP,long *numRidgeLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanPointForSumpLinesTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,DTM_DRAINAGE_FLOW_LINE **sumpLinesPP,long *numSumpLinesP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanSumpPointForMaximumDescentTriangleTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long *trgPnt1P,long *trgPnt2P,double *trgSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanSumpPointForSumpLineTinObject(DTM_TIN_OBJ *tinP,long useTables,long point,long *sumpPointP,double *slopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanZeroSlopePolygonForMaximumAscentTinObject( DTM_TIN_OBJ *tinP, long startPnt, long dtmFeature, long flowSide, long *maxAscentTypeP, long *maxAscentPnt1P, long *maxAscentPnt2P, long *maxAscentPnt3P, double *maxAscentSlopeP, double *maxAscentAngleP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_scanZeroSlopePolygonForMinimumDescentRidgeTinObject( DTM_TIN_OBJ *tinP, long startPnt, long dtmFeature, long flowSide, long *minDescentTypeP, long *minDescentPnt1P, long *minDescentPnt2P, long *minDescentPnt3P, double *minDescentSlopeP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_selectNextRidgePointForFlowDirectionTinObject(DTM_TIN_OBJ *tinP,long flowSide,double lastAngle,double ridgeX,double ridgeY,long ridgePnt1,long ridgePnt2,long *nextRidgePntP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_stackTraceAscentsFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, unsigned char *ridgeLineP, long useTables, long traceOverZeroSlopeTriangles, double lastAngle, long flowSide, long pnt1, long pnt2, long pnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_stackTraceAscentsFromTrianglePointTinObject( DTM_TIN_OBJ *tinP, unsigned char *ridgeLineP, long useTables, long traceOverZeroSlope, double falseHighElevation, double lastAngle, long lastPoint, long flowSide, long pnt, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_testForAndMarkInternallyClosingBreakLinesTinObject( DTM_TIN_OBJ *tinP, long pnt1, long pnt2, unsigned char *markBreakP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_testForPondExitPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long *priorPointP,long *nextPointP,long *exitFromPointP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceCatchmentForSumpLineTinObject( DTM_TIN_OBJ *tinP, double x, double y, double z, long sumpPnt1, long sumpPnt2, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceCatchmentFromInternalSumpPointTinObject( DTM_TIN_OBJ *tinP, double x, double y, double z, long sumpPnt, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceCatchmentFromPointOnInternalSumpLineTinObject( DTM_TIN_OBJ *tinP, double x, double y, double z, long sumpPnt1, long sumpPnt2, DPoint3d **catchmentPtsPP, long *numCatchmentPtsP) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_traceCatchmentPatternsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseHighElevation, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_traceDownMinimumDescentRidgeUntilAscentTinObject( DTM_TIN_OBJ *tinP, long useTables, long loadFlag, long flowSide, long ridgePnt, long priorPnt, DTM_ASCENT_LINE *ascentLineP) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_traceDrainagePatternsTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceGradedSlopeFromTriangleEdgeTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceGradedSlopeFromTrianglePointTinObject(DTM_TIN_OBJ *tinP,long P1,double Sx,double Sy,double GradeSlope,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceGradedSlopeTinObject(DTM_TIN_OBJ *tinP,double x,double y,double Slope,long loadFlag,long *GradeTraced) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceGradeTinObject(DTM_TIN_OBJ *tinP,double Sx,double Sy,double Sz,long loadFlag,long P1,long P2,long P3,double GradeSlope,long *LP1,long *LP2) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceIslandBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long mark,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ *polygonP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceMaximumAscentFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, long useTables, long isFalseHigh, long traceOverZeroSlope, double lastAngle, long pnt1, long pnt2, long pnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *tracePointFoundP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceMaximumAscentFromTrianglePointTinObject( DTM_TIN_OBJ *tinP, long useTables, long isFalseHigh, long traceOverZeroSlope, double lastAngle, long lastPnt, long startPnt, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *tracePointFoundP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_traceMaximumAscentTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseHighElevation, double startX, double startY, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceMaximumDescentFromPondExitPointTinObject(DTM_TIN_OBJ *tinP, long useTables, long   priorPnt, long   exitPnt, long   nextPnt,  double startX, double startY, long   *nextPnt1P, long   *nextPnt2P, long   *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long   *processP) ;
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceMaximumDescentFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, long useTables, long isFalseLow,long traceOverZeroSlope, double lastAngle, long startPnt1, long startPnt2, long startPnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *tracePointFoundP, long *exitPointP, long *priorPointP, long *nextPointP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceMaximumDescentFromTrianglePointTinObject( DTM_TIN_OBJ *tinP, long useTables, long isFalseLow,long traceOverZeroSlope, double lastAngle, long lastPnt, long startPnt, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP, long *exitPointP, long *priorPointP, long *nextPointP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainageNgp_traceMaximumDescentTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth, double startX, double startY, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_tracePondBoundaryTinObject(DTM_TIN_OBJ *tinP,double pondElevation,long startPoint,long nextPoint,long loadFlag,long boundaryFlag,DTM_POLYGON_OBJ *polygonP,DPoint3d **pondPtsPP,long *numPondPtsP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_traceToHighPointTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseHighElevation, long useTables, long traceOverZeroSlope, long loadFlag, long trgStartType, long pnt1, long pnt2, long pnt3, double x, double y, double z, void *userP, long *highPnt1P, long *highPnt2P, double *highXP, double *highYP, double *highZP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_traceToLowPointTinObject( DTM_TIN_OBJ *tinP, DTMFeatureCallback loadFunctionP, double falseLowDepth,long traceOverZeroSlope, long useTables, long loadFlag, long pnt1, long pnt2, long pnt3, double x, double y, double z, void *userP, long *lowPoint1P, long *lowPoint2P ) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_traceToLowPointWithStartDescentTinObject( DTM_TIN_OBJ *tinP, long startType, double falseLowDepth, long useTables, long traceOverZeroSlope, long loadFlag, long pnt1, long pnt2, long pnt3, double x, double y, double z, long *lowPnt1P, long *lowPnt2P, double *lowXP, double *lowYP, double *lowZP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceToSumpLineFromTrianglePointTinObject( DTM_TIN_OBJ *tinP, double lastAngle, long lastPnt, long startPnt, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP) ; 
//BENTLEYDTM_Private       int bcdtmDrainageNgp_traceToSumpLinetFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, double lastAngle, long startPnt1, long startPnt2, long startPnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP, long *processP) ; 
//BENTLEYDTM_Public        int bcdtmDrainageNgp_traceToSumpLineTinObject( DTM_TIN_OBJ *tinP, long startType, long pnt1, long pnt2, long pnt3, double x, double y, double z, long *sumpPnt1P, long *sumpPnt2P, double *sumpXP, double *sumpYP, double *sumpZP) ; 

////// bcdtmDrainNgp//////
//BENTLEYDTM_Public        int bcdtmDrainNgp_checkForLineOnHullLineTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long *hullLineP) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_checkForPointOnHullLineTinObject(DTM_TIN_OBJ *tinP,long Point,long *HullLine) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_fixDrainagePrecisonTinObject(DTM_TIN_OBJ *tinP,double insertAngle,long trgPnt1,long trgPnt2,long trgPnt3,long trgPnt4,double pointX,double pointY,long *nextPntP,double *nextXP,double *nextYP,long *fixTypeP,long *processP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_getFirstTracePointFromTriangleEdgeTinObject( DTM_TIN_OBJ *tinP, long flowDirection, long pnt1, long pnt2, long pnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_getFirstTracePointTinObject( DTM_TIN_OBJ *tinP, long flowDirection, long pnt1, long pnt2, long pnt3, double startX, double startY, long *nextPnt1P, long *nextPnt2P, long *nextPnt3P, double *nextXP, double *nextYP, double *nextZP) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_getNextMaximumAscentLineTinObject(DTM_TIN_OBJ *tinP,long lastPoint,long point,long *nextPnt1P,long *nextPnt2P,long *nextPnt3P,double *nextXP,double *nextYP, double *nextZP ,long *processP ) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_getNextPointOutFromHighPointTinObject(DTM_TIN_OBJ *tinP,long UseTable,long HighPoint,double falseHighElevation,long *Np) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_getNextPointOutFromLowPointTinObject(DTM_TIN_OBJ *tinP,long lowPoint,long mark,double falseLowDepth,long *nextPointOutP) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_getTriangleFlowDirectionTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3 ) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_insertMaximumAscentLineTinObject(DTM_TIN_OBJ *tinP,long ridgePnt1,long ridgePnt2,long ridgePnt3 ) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_interpolateZ(DTM_TIN_OBJ *tinP,long P1,long P2,long P3, double *z ) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_scanBetweenPointsForMaximumAscentTriangleTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *TBP1,long *TBP2,double *TriangleascentAngle,double *TriangleSlope) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_scanBetweenPointsForRidgeLineTinObject(DTM_TIN_OBJ *tinP,long Point,long Sp,long Ep,long *RidgePoint) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_stackTraceToHighPointWithStartAscentTinObject( DTM_TIN_OBJ *tinP, unsigned char *ridgeLineP, long startType, double falseHighElevation, long useTables, long traceOverZeroSlopeTriangles, long loadFlag, long flowSide, long pnt1, long pnt2, long pnt3, double x, double y, double z, long *lastPntP, long *highPnt1P, long *highPnt2P, double *highXP, double *highYP, double *highZP ) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_testForLowerConnectedPointToPointTinObject(DTM_TIN_OBJ *tinP,long Point,long *Np) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrainNgp_traceCatchmentAreaTinObject(DTM_TIN_OBJ *tinP,double x, double y) ; 
//BENTLEYDTM_Private       int bcdtmDrainNgp_traceToSumpTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,long pnt3,double *xP,double *yP,double *zP,long *sumpPnt1P,long *sumpPnt2P) ; 
//BENTLEYDTM_Public        int bcdtmDrainNgp_unMarkPointsConnectedToLowPointTinObject(DTM_TIN_OBJ *tinP,long mark,long lowPoint) ; 

////// bcdtmDrape//////
//BENTLEYDTM_Public        int bcdtmDrape_arcOnTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Ex,double Ey,double Cx,double Cy,double A1,double A2,double Ap,double As,double Ra,long **ArcPointType,DPoint3d **ArcPoints,long *NumArcPoints) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_arcReturnTagsTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Ex,double Ey,double Cx,double Cy,double A1,double A2,double Ap,double As,double Ra,long **ArcPointType,DTMUserTag **ArcPointTag,DPoint3d **ArcPoints,long *NumArcPoints) ; 
//BENTLEYDTM_Private       int bcdtmDrape_checkForValidDrapeLineTinObject(DTM_TIN_OBJ *tinP,double x1,double y1,double x2,double y2,long *validDrapeLineP) ; 
//BENTLEYDTM_Public        int bcdtmDrape_findClosestLineInterceptWithHullTinObject(DTM_TIN_OBJ *tinP,double startX,double startY,double endX,double endY,long *pntTypeP,long *pnt1P,long *pnt2P,double *xIntP,double *yIntP,double *zIntP) ; 
//BENTLEYDTM_Public        int bcdtmDrape_findClosestLineInterceptWithVoidHullTinObject(DTM_TIN_OBJ *tinP,double startX,double startY,double endX,double endY,long *findType,long *pnt1,long *pnt2,double *intX,double *intY,double *intZ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_freeDrapePointData(DTM_DRAPE_DATA_XM **DrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_freeDrapePointMemoryXM( DTM_DRAPE_POINT_XM **drapePtsPP, long *numDrapePtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_fromPointAcrossBreakLinesTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, DPoint3d **drapePtsPP, long *numDrapePtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_fromPointInAllDirectionsAcrossBreakLinesTinObject( DTM_TIN_OBJ *tinP, double xP, double yP, DTM_POINT_ARRAY ***drapeArraysPPP, long *numDrapeArraysP ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getDtmFeaturesAtDrapePointTinObject(DTM_TIN_OBJ *tinP,long drapeType,long pointType,long point1,long point2,DTM_DRAPE_FEATURE_XM **drapeFeaturesPP,long *numDrapeFeaturesP) ; 
//BENTLEYDTM_Private       int bcdtmDrape_getNextDrapePointFromLineTinObject(DTM_TIN_OBJ *tinP,double x1,double Ys,double x2,double y2,long *Type,long pnt1, long pnt2, long pnt3,long *nxtPnt1P,long *nxtPnt2P,long *nxtPnt3P,double *xdP,double *ydP,double *zdP) ; 
//BENTLEYDTM_Private       int bcdtmDrape_getNextDrapePointFromPointTinObject( DTM_TIN_OBJ *tinP, double x1,double y1,double x2,double y2, long *drapeTypeP, long pnt1, long *nxtPnt1P,long *nxtPnt2P,long *nxtPnt3P, double *xdP,double *ydP,double *zdP ) ; 
//BENTLEYDTM_Private       int bcdtmDrape_getNextDrapePointFromTriangleTinObject(DTM_TIN_OBJ *tinP,double x1,double y1,double x2,double y2,long *drapeTypeP,long pnt1, long pnt2, long pnt3,long *nxtPnt1P,long *nxtPnt2P,long *nxtPnt3P,double *xdP,double *ydP,double *zdP ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getNextDrapePointTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type, long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getNextPointForDrapeTinObject(DTM_TIN_OBJ *tinP,double x1,double y1,double x2,double y2,long *drapeTypeP, long pnt1, long pnt2, long pnt3,long *nxtPnt1P,long *nxtPnt2P,long *nxtPnt3P,double *xdP,double *ydP,double *zdP ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getNextPointFromEdgeTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getNextPointFromPointTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getNextPointFromTriangleTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getPointTypeTinObject(DTM_TIN_OBJ *Tin,long Type,long *Ptype,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmDrape_getTypeOfPointTinObject(DTM_TIN_OBJ *Tin,long Type,long *Ptype,DTMUserTag *Utag,DTM_GUID *Guid,double x, double y,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmDrape_lineReturnTagsTinObject(DTM_TIN_OBJ *Tin,long FirstCall,double Xs,double Ys,double Xe,double Ye,long **UserDrapeType,DTMUserTag **UserDrapeTag,DPoint3d **UserDrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_lineStringReturnFeaturesTinObject(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,DTM_DRAPE_DATA_XM **DrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_lineStringReturnTagsTinObject(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,long **UserDrapeLine,long **UserDrapeType,DTMUserTag **UserDrapeTag,DPoint3d **UserDrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_lineStringTinObject(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,long **UserDrapeLine,long **UserDrapeType,DPoint3d **UserDrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_Public        int bcdtmDrape_lineTinObject(DTM_TIN_OBJ *Tin,long FirstCall,double Xs,double Ys,double Xe,double Ye,long **UserDrapeType,DPoint3d **UserDrapePts,long *NumDrapePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_pointCopyParallelTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *DrapeFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_pointReturnAttributesTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *DrapeFlag,DPoint3d TinPoints[],double *SlopeDegrees,double *SlopePercent,double *Aspect,double *Height) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_pointTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *DrapeFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_pointWithOffHullToleranceTinObject(DTM_TIN_OBJ *Tin,double x,double y,double OffHullTolerance,double *z,long *DrapeFlag) ; 
//BENTLEYDTM_Public        int bcdtmDrape_spiralOnTinObject(DTM_TIN_OBJ *Tin,double R1,double R2,double SpiralLength,double Offset,double Xs,double Ys,double Xe,double Ye,double Xi,double Yi,long **SpiralPointType,DPoint3d **SpiralPoints,long *NumSpiralPoints) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_spiralReturnTagsTinObject(DTM_TIN_OBJ *Tin,double R1,double R2,double SpiralLength,double Offset,double Xs,double Ys,double Xe,double Ye,double Xi,double Yi,long **SpiralPointType,DTMUserTag **SpiralPointTag,DPoint3d **SpiralPoints,long *NumSpiralPoints) ; 
//BENTLEYDTM_Public        int bcdtmDrape_storeDrapePoint(long Lno,long Ptype,DTMUserTag Utag,DTM_GUID userFeatureId, double x,double y,double z) ; 
//BENTLEYDTM_Public        int bcdtmDrape_storeDrapePointFeatures(DTM_DRAPE_DATA_XM **DrapePts,long *NumDrapePts,long *MemDrapePts,long MemDrapePtsInc,long Line,long Type,double x,double y,double z,DTM_DRAPE_FEATURE_XM *DrapeFeatures,long NumDrapeFeatures) ; 
//BENTLEYDTM_Private       int bcdtmDrape_storeDrapePointWithDtmFeatures( DTM_TIN_OBJ *tinP, long lineNum, long drapeType, double x, double y, double z, long pnt1, long pnt2, long pnt3, long dtmFeatureOption, DTM_DRAPE_POINT_XM **drapePtsPP, long *numDrapePtsP, long *memDrapePtsP, long memDrapePtsInc) ; 
//BENTLEYDTM_EXPORT        int bcdtmDrape_stringTinObject( DTM_TIN_OBJ *tinP, DPoint3d *stringPtsP, long numStringPts, long dtmFeatureOption, DTM_DRAPE_POINT_XM **drapePtsPP, long *numDrapePtsP ) ; 

////// bcdtmEdit//////
//BENTLEYDTM_Public        int bcdtmEdit_addPointToTinObject(DTM_TIN_OBJ *Tin,double x,double y,double z,long *Point ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_assignTinLinesToDrapePointsTinObject(DTM_TIN_OBJ *Tin,DPoint3d *drapePts,long numDrapePts,DTM_TRG_INDEX_TABLE **drapeTinLines,long *numDrapeTinLines) ; 
//BENTLEYDTM_Public        int bcdtmEdit_breakDtmFeatureAtLineTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,long LP1,long LP2) ; 
//BENTLEYDTM_Public        int bcdtmEdit_breakDtmFeatureAtPointTinObject(DTM_TIN_OBJ *Tin,long dtmFeature,long breakPoint ) ; 
//BENTLEYDTM_Public        int bcdtmEdit_checkForIslandCreationTinObject(DTM_TIN_OBJ *Tin,long VoidFeatures[],long NumVoidPts,long *IslandFlag) ; 
//BENTLEYDTM_Private       int bcdtmEdit_checkForOneCoincidentTptrVoidPolygonSectionWithTinHullTinObject(DTM_TIN_OBJ *Tin,long spnt,long *fsp,long *lsp,long *coincidentFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkForVoidsAlongTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *VoidsFound ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkLineCanBeDeletedTinObject(DTM_TIN_OBJ *Tin,long *Flag,long UpdateFlag,long P1,long P2) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkPointCanBeDeletedTinObject(DTM_TIN_OBJ *Tin,long Point,long UpdateFlag,long *Flag) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkPointXYCanBeMovedTinObject(DTM_TIN_OBJ *Tin,long Point,long *MoveFlag,long *VoidPtr,double x,double y) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkTinStructureTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_checkTriangleCanBeDeletedTinObject(DTM_TIN_OBJ *Tin,long *DeleteFlag,long P1,long P2,long P3) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_cleanVoidTinObject(DTM_TIN_OBJ *Tin,long VoidFeature) ; 
//BENTLEYDTM_Public        int bcdtmEdit_clearVoidBitOfInternalVoidPoints(DTM_TIN_OBJ *Tin,long VoidFeature,long *Islands, long NumIslands) ; 
//BENTLEYDTM_Public        int bcdtmEdit_clipBreakAndContourFeaturesToVoidTinObject(DTM_TIN_OBJ *Tin,long voidFeature ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_clipDtmFeaturesCoincidentWithTinLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2 ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_clipDtmFeaturesToVoidFeatureTinObject(DTM_TIN_OBJ *Tin,long voidFeature) ; 
//BENTLEYDTM_Public        int bcdtmEdit_clipDtmFeatureToVoidTinObjectOld(DTM_TIN_OBJ *Tin,long DtmFeature ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_clipLastDtmFeatureToVoidTinObject(DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_clipNonPolygonalDtmFeaturesCoincidentWithTinLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2 ) ; 
//BENTLEYDTM_Public        int bcdtmEdit_clipVoidLinesFromDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long dtmFeature ) ; 
//BENTLEYDTM_Public        int bcdtmEdit_copyFeatureListToTptrListTinObject(DTM_TIN_OBJ *Tin,long Feature,long VoidPts[],long NumVoidPts,long *Spnt) ; 
//BENTLEYDTM_Private       int bcdtmEdit_createVoidAndIslandPolygonsForDeletedTriangles(DTM_TIN_OBJ *Tin,DTM_TRG_INDEX_TABLE *delPoints,long numDelPoints,DTM_DAT_OBJ **voidPolygons) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_dataPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *Ptype,long *Feature,long *P1,long *P2,long *P3 ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_deleteAllPointsAndLinesInternalToTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long spnt ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_deleteExternalTptrIslandpolyListPointsAndLinesTinObject(DTM_TIN_OBJ *Tin,long sPnt) ; 
//BENTLEYDTM_Private       int bcdtmEdit_deleteInternalTptrVoidpolyListPointsAndLinesTinObject(DTM_TIN_OBJ *Tin,long sPnt) ; 
//BENTLEYDTM_Private       int bcdtmEdit_deleteInternalVoidPointsAndLinesAndRetriangulateVoidTinObject(DTM_TIN_OBJ *Tin,long voidFeature) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_deleteLineTinObject(DTM_TIN_OBJ *Tin,long deleteFlag,long tinPnt1,long tinPnt2,long *tinPnt3,long *tinPnt4) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_deletePointTinObject( DTM_TIN_OBJ *Tin, long tinPoint, long deleteFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_deleteTrianglesOnDeleteLineTinObject(DTM_TIN_OBJ *Tin,DPoint3d *deleteLinePts,long numDeleteLinePts) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_deleteTriangleTinObject(DTM_TIN_OBJ *Tin,long tinPnt1,long tinPnt2,long tinPnt3) ; 
//BENTLEYDTM_Private       int bcdtmEdit_drapeDeleteLineOnEditTinObject(DTM_TIN_OBJ *Tin,DPoint3d *deleteLinePts,long numDeleteLinePts,DPoint3d **drapePoints,long *numDrapePoints) ; 
//BENTLEYDTM_Public        int bcdtmEdit_drawContoursForTriangleTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2,long P3,double Cint) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawDeletedFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long *DeleteFeatures,long NumDeleteFeatures,double Cint) ; 
//BENTLEYDTM_Private       int bcdtmEdit_drawDtmFeaturesForLineTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2 ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Feature) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawInternalTptrFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Spnt,double Cint) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawLineFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2,double Cint) ; 
//BENTLEYDTM_Public        int bcdtmEdit_drawLineTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2 ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawOutsideTptrFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Spnt,long UpdateFlag,double Cint) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawPointFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,double Cint ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawPointPerimeterTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Point ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawPolygonFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,DPoint3d *PolyPts,long NumPolyPts,double Cint) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawTptrFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Spnt,long UpdateFlag,double Cint) ; 
//BENTLEYDTM_Public        int bcdtmEdit_drawTptrLineFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawTriangleBaseLinesForPointTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawTriangleFeaturesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2,long P3,double Cint ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawTriangleLinesTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2,long P3) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_drawTriangleTinObject(DTM_TIN_OBJ *Tin,long DrawMode,long P1,long P2,long P3) ; 
//BENTLEYDTM_Private       int bcdtmEdit_extractVoidAndIslandPolygonsFromDeletedTrianglesTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ **voidPolygons) ; 
//BENTLEYDTM_Public        int bcdtmEdit_fillTptrPolygonWithTrianglesTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmEdit_findClosestDtmFeatureHullLine(DTM_TIN_OBJ *Tin,double x,double y,long Feature,long *P1,long *P2) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_findClosestHullLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *P1,long *P2) ; 
//BENTLEYDTM_Public        int bcdtmEdit_findClosestNonVoidPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *Point) ; 
//BENTLEYDTM_Public        int bcdtmEdit_findClosestVoidLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *P1,long *P2,long *Feature) ; 
//BENTLEYDTM_Public        int bcdtmEdit_findDtmFeatureEnclosingPointTinObject(DTM_TIN_OBJ *Tin,long P1,long DtmFeature,long *Feature) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_getDeleteFeaturesTinObject(DTM_TIN_OBJ *Tin,long Feature,long **DeleteDtmFeatures,long *NumDeleteDtmFeatures) ; 
//BENTLEYDTM_Private       int bcdtmEdit_getInternalTptrPolygonDtmFeaturesTinObject(DTM_TIN_OBJ *Tin,long sPnt,DTMTinPointFeatures_XM **dtmFeatures,long *numDtmFeatures) ; 
//BENTLEYDTM_Private       int bcdtmEdit_getIslandFeaturesInternalToVoidTinObject(DTM_TIN_OBJ *Tin,long voidFeature,DTMTinPointFeatures_XM **islands,long *numIslands) ; 
//BENTLEYDTM_Public        int bcdtmEdit_getIslandsInternalToVoidTinObject(DTM_TIN_OBJ *Tin,long voidFeature,long **islandsPP, long *numIslandsP) ; 
//BENTLEYDTM_Private       int bcdtmEdit_getListOfIntersectedIslandVoidHoleFeaturesTinObject(DTM_TIN_OBJ *Tin,long numStartFeatures,DTMTinPointFeatures_XM **intersectedFeatures,long *numIntersectedFeatures) ; 
//BENTLEYDTM_Public        int bcdtmEdit_getVoidExternalToIslandTinObject(DTM_TIN_OBJ *Tin,long IslandFeature,long *VoidFeature) ; 
//BENTLEYDTM_Public        int bcdtmEdit_insertDtmFeatureIntoTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,DTMUserTag UserTag,DPoint3d *StringPts,long NumStringPts,long *Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_insertIslandIntoTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,DPoint3d *IslandPts,long NumIslandPts) ; 
//BENTLEYDTM_Public        int bcdtmEdit_insertLineIntoTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,DTMUserTag UserTag,DPoint3d *StringPts,long NumStringPts,long *Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_insertPointTinObject(DTM_TIN_OBJ *Tin,long Ptype,long Feature,long UpdateFlag,long P1,long P2,long P3,double x,double y, double z, long *Np) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_insertStringIntoTinObject(DTM_TIN_OBJ *Tin,long DrapeFlag,WCharCP StrFile,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmEdit_insertTptrPolygonAroundPointTinObject(DTM_TIN_OBJ *Tin,long Point,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmEdit_insertVoidFromDeletedFeatureIntoTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *Vspnt,long *Ispnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_insertVoidIntoTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,DPoint3d *VoidPts,long NumVoidPts) ; 
//BENTLEYDTM_Private       int bcdtmEdit_insertVoidsAndIslandsIntoEditTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Private       int bcdtmEdit_markVoidPointsInternalToVoidFeatureTinObject(DTM_TIN_OBJ *Tin,long voidFeature) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_moveVertexXYZTinObject(DTM_TIN_OBJ *Tin,long ResetFlag,long Point,double x,double y,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_moveVertexZTinObject(DTM_TIN_OBJ *Tin,long Point,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_nullTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_polygonMoveZTinObject(DTM_TIN_OBJ *Tin,DPoint3d *PolyPts,long NumPolyPts,long MoveFlag,double Elevation) ; 
//BENTLEYDTM_Public        int bcdtmEdit_removeInsertedVoidsOnTinHullTinObject(DTM_TIN_OBJ *Tin,long numStartFeatures ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_removeInternalTptrPointsAndRetriangulateTinObject(DTM_TIN_OBJ *Tin,long Spnt,long FillFlag) ; 
//BENTLEYDTM_Public        int bcdtmEdit_removeInternalVoidPointsAndLinesTinObject(DTM_TIN_OBJ *Tin,long VoidFeature,long *Islands, long NumIslands) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_removePointTinObject(DTM_TIN_OBJ *Tin,long Point,long Ptype,long Feature,long P1,long P2,long P3) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_removeVoidsAlongTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt,double Cint ) ; 
//BENTLEYDTM_Private       int bcdtmEdit_resolveIslandsVoidsHolesDataObject(DTM_DAT_OBJ **dtmFeatures,DTM_DAT_OBJ **resolvedDtmFeatures) ; 
//BENTLEYDTM_Private       int bcdtmEdit_resolveOverlappingIslandsVoidsAndHolesTinObject(DTM_TIN_OBJ *Tin,long numStartFeatures,DTMTinPointFeatures_XM *intersectedFeatures,long numIntersectedFeatures) ; 
//BENTLEYDTM_Public        int bcdtmEdit_retriangualteAlongTptrListTinObject(DTM_TIN_OBJ *Tin,long LeftFlag,long RightFlag,long Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_snapToLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *P1,long *P2,double *Sx,double *Sy,double *Sz) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_snapToPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *Point,double *PX,double *PY,double *PZ) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_snapToTriangleTinObject(DTM_TIN_OBJ *Tin,double x,double y, double *z,long *P1,long *P2,long *P3) ; 
//BENTLEYDTM_Private       int bcdtmEdit_storeFeatureInDtmFeatureList(DTMTinPointFeatures_XM **bcdtmList,long *numDtmList,long *memDtmList,long memDtmListInc,long dtmFeature,DTMFeatureType dtmFeatureType,DTMUserTag userTag,long priorPoint,long nextPoint) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_tempMoveVertexXYZTinObject(DTM_TIN_OBJ *Tin,long Point,double x,double y,double z) ; 
//BENTLEYDTM_Public        int bcdtmEdit_testForDtmFeatureHullLineTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,long P1,long P2,long *HullLine,long *Feature,DTMDirection* direction) ; 
//BENTLEYDTM_Public        int bcdtmEdit_testForPointOnDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,long Point,long *Feature,long *numFeatureTable) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_tptrMoveZTinObject(DTM_TIN_OBJ *Tin,long Spnt,long MoveFlag,double Elevation) ; 
//BENTLEYDTM_EXPORT        int bcdtmEdit_tptrPolygonMoveZTinObject(DTM_TIN_OBJ *Tin,long Spnt,long MoveFlag,double Elevation) ; 
//BENTLEYDTM_Public        int bcdtmEdit_triangulateVoidTinObject(DTM_TIN_OBJ *Tin,long VoidFeature,long *Islands, long NumIslands,long InternalPoint) ; 
//BENTLEYDTM_Public        int bcdtmEdit_validateStringTinObject(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long *NumStringPts) ; 
//BENTLEYDTM_Public        int bcdtmEdit_validateVoidTinObject(DTM_TIN_OBJ *Tin,DPoint3d *VoidPts,long *NumVoidPts) ; 

////// bcdtmExport//////
//BENTLEYDTM_EXPORT        int bcdtmExport_tinObjectToDataObject(DTM_TIN_OBJ *tinP,DTM_DAT_OBJ **dataPP) ; 
//BENTLEYDTM_EXPORT        int bcdtmExport_tinObjectToTinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **Tinn,double Pptol,double Pltol) ; 

////// bcdtmExtract//////
//BENTLEYDTM_Public        int bcdtmExtract_buildBreakTable(DTM_DAT_OBJ *Data,long *NoBreaks) ; 
//BENTLEYDTM_Public        int bcdtmExtract_calculateArcDistances(DTM_DAT_OBJ *Data,long Ps, long Pe, DTMDirection direction,double Ra, double Tx, double Ty,double Paxis, double Saxis,double Cx,double Cy ) ; 
//BENTLEYDTM_Public        int bcdtmExtract_interpolateArcReference(DTM_DAT_OBJ *Data,DTM_DAT_OBJ *Spot,DPoint2d *Points,double SnapTolerance ) ; 
//BENTLEYDTM_Public        int bcdtmExtract_interpolateArcVertice(DTM_DAT_OBJ *Data,long Ps,long Pe,double Tx,double Ty,double Ra,double StartAngle, double SweepAngle ) ; 
//BENTLEYDTM_Public        int bcdtmExtract_interpolateBetweenBreaks(DTM_DAT_OBJ *Data,long DtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmExtract_interpolateLinearReference(DTM_DAT_OBJ *Data,DTM_DAT_OBJ *Spot,DPoint2d *Points,long NumPoints,double SnapTolerance) ; 
//BENTLEYDTM_Public        int bcdtmExtract_interpolateLinearVertice(DTM_DAT_OBJ *Data,long Ps,long Pe ) ; 
//BENTLEYDTM_Public        int bcdtmExtract_joinBreakLines(DTM_DAT_OBJ *Data, double Tolerance,long *NoBreaksStart,long *NoBreaksEnd) ; 
//BENTLEYDTM_Public        int bcdtmExtract_reArrangeClosedBreak(DTM_DAT_OBJ *Data,long Bs,long Be) ; 
//BENTLEYDTM_Public        int bcdtmExtract_reorderDataPoints(DTM_DAT_OBJ *Data,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmExtract_setFeatureCodes(DTM_DAT_OBJ *Data,long DtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmExtract_writeAsciiDataFileFromDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile,long OpenFlag,long NoDecPts) ; 
//BENTLEYDTM_Public        int bcdtmExtract_writeBinaryDataFileFromDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile,long OpenFlag) ; 

////// bcdtmFilter//////
//BENTLEYDTM_Public        int bcdtmFilter_andMergeLinearFeaturesDataObject(DTM_DAT_OBJ *Data,DTM_DAT_OBJ *Filter,long Fs,long Fn,double XYTolerance,double ZTolerance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_andMergePointsWithinToleranceDataObject(DTM_DAT_OBJ *dataP,DTM_DAT_OBJ *filterP,double xyTolerance,double zTolerance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_compareDifferencesBetweenDataObjects(DTM_DAT_OBJ *Data,DTM_DAT_OBJ *Filter,double XYTolerance,double ZTolerance,long NoStart,long NoDup) ; 
//BENTLEYDTM_Public        int bcdtmFilter_dtmFeatureTypeDataObject(DTM_DAT_OBJ *dataObjP,DTMFeatureType dtmFeatureType,double xyTolerance,double zTolerance,long *numFeaturesFiltered,long *numVerticesBeforeFilter,long *numVerticesAfterFilter) ; 
//BENTLEYDTM_Private       int bcdtmFilter_featureDataObject(DTM_DAT_OBJ *dataObjP,long ofs1,long ofs2,double xyTolerance,double zTolerance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_findClosestPairDataObject(DTM_DAT_OBJ *Data,long *P1,long *P2,double *Distance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_findClosestPairPointsDataObject(DTM_DAT_OBJ *Data,long Ns, long Ofs ) ; 
//BENTLEYDTM_Public        int bcdtmFilter_findClosestPointsTinObject(DTM_TIN_OBJ *Tin,long *P1,long *P2,double *Distance ) ; 
//BENTLEYDTM_Public        int bcdtmFilter_linearFeatureDataObject(DTM_DAT_OBJ *Data,long Ofs1,long Ofs2,double XYTolerance,double ZTolerance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_markTinPointsWithinToleranceTinObject(DTM_TIN_OBJ *Tin,double XYTolerance,double ZTolerance,long *NumberMarked ) ; 
//BENTLEYDTM_Private       int bcdtmFilter_mergePointsDataObject(DTM_DAT_OBJ *dataP,double xyTolerance );
//BENTLEYDTM_Public        int bcdtmFilter_mergePointsWithinToleranceDataObject(DTM_DAT_OBJ *dataP,DTM_DAT_OBJ *filterP,double xyTolerance) ;
//BENTLEYDTM_Public        int bcdtmFilter_pointsWithinToleranceDataObject(DTM_DAT_OBJ **Filter,DTM_DAT_OBJ *Save,double XYTolerance,double ZTolerance) ; 
//BENTLEYDTM_Public        int bcdtmFilter_reinsertFilteredPointsDataObjects(DTM_DAT_OBJ *Data,DTM_DAT_OBJ *Filter,double ZTolerance,long *NumInserted) ; 
//BENTLEYDTM_Private       int bcdtmFilter_removeDuplicatePointsDataObject(DTM_DAT_OBJ *dataP) ; 
//BENTLEYDTM_Public        int bcdtmFilter_rotateDataObject(DTM_DAT_OBJ *Data,double RotationAngle) ; 

////// bcdtmFind//////
//BENTLEYDTM_EXPORT        int bcdtmFind_binaryScanTinObject(DTM_TIN_OBJ *Tin,double x,long *Point) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_closestPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *Point) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_closestPointTinObjectNew(DTM_TIN_OBJ *Tin,double x,double y,long *Point) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_findClosestHullLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *Ptype,long *P1,long *P2) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_hullIntersectionTinObject(DTM_TIN_OBJ *Tin,long *Fnd,long Cp,double x,double y,long *P1,long *P2,long *P3 ) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_triangleForPointFromPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,long P0,long *Ptype,long *P1,long *P2,long *P3) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_triangleForPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long *Ptype,long *P1,long *P2,long *P3 ) ; 
//BENTLEYDTM_EXPORT        int bcdtmFind_triangleTinObject(DTM_TIN_OBJ *Tin,double x,double y,long *P1,long *P2,long *P3) ; 

////// bcdtmGeopak//////
BENTLEYDTM_Public        int bcdtmGeopak_copyDataObjectToDtmObject(DTM_DAT_OBJ *dataP,BC_DTM_OBJ *dtmP) ;
BENTLEYDTM_EXPORT         int bcdtmGeopak_copyDtmObjectToTinObject(BC_DTM_OBJ *dtmP,DTM_TIN_OBJ **tinPP );
BENTLEYDTM_EXPORT         int bcdtmGeopak_copyTinObjectToDtmObject(DTM_TIN_OBJ *tinP,BC_DTM_OBJ *dtmP) ;

////// bcdtmGrade//////
//BENTLEYDTM_Public        int bcdtmGrade_calculateGradeSlopeAngleAcrossTriangleFaceTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,double LastAngle,long *GradePointFound,double *GradeSlopeAngle) ; 
//BENTLEYDTM_Public        int bcdtmGrade_calculateGradeSlopeAnglesForTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double GradeSlope,long *GradeSlopeAngleFound,double *GradeSlopeAngleOne,double *GradeSlopeAngleTwo) ; 
//BENTLEYDTM_Public        int bcdtmGrade_calculateGradeSlopeStartDirectionsForTriangleTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Sz,double Slope,long Ptype,long P1,long P2,long P3,double *TriangleSlope,double StartDirections[],long *NumStartDirections) ; 
//BENTLEYDTM_Public        int bcdtmGrade_calculateMacaoGradeSlopeStartDirectionsForPointTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Sz,double Slope,double Distance,double **StartDirections,long *NumStartDirections) ; 
//BENTLEYDTM_Public        int bcdtmGrade_getFirstGradeTracePointTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Sz,long P1,long P2,long P3,double GradeAngle,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_EXPORT        int bcdtmGrade_getGradeSlopeStartDirectionsTinObject(DTM_TIN_OBJ *Tin,double x,double y,double Slope,double *Zs,long *Tp1,long *Tp2,long *Tp3,double *TriangleSlope,double StartDirections[],long *NumStartDirections) ; 
//BENTLEYDTM_EXPORT        int bcdtmGrade_getMacaoGradeSlopeStartDirectionsTinObject(DTM_TIN_OBJ *Tin,double x,double y,double Slope,double Distance,double **StartDirections,long *NumStartDirections) ; 
//BENTLEYDTM_Public        int bcdtmGrade_traceGradedSlopeFromTriangleEdgeTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double Sx,double Sy,double Sz,double GradeSlope,double LastAngle,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_Public        int bcdtmGrade_traceGradedSlopeFromTrianglePointTinObject(DTM_TIN_OBJ *Tin,long P1,double Sx,double Sy,double GradeSlope,long *TracePointFound,long *Np1,long *Np2,long *Np3,double *Nx,double *Ny,double *Nz) ; 
//BENTLEYDTM_EXPORT        int bcdtmGrade_traceGradeTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Sz,long LoadFlag,long P1,long P2,long P3,double GradeSlope,double GradeAngle,double Distance) ; 

////// bcdtmImport//////
//BENTLEYDTM_Public        int bcdtmImport_insertMacaoVoidIntoTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmImport_macaoTinInsertBreakLinesIntoTin(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmImport_macaoTinJoinBreakLines(DTM_DAT_OBJ **Data,DPoint3d *Points,DTM_MACAO_BRKS *Breaks,long NumBrks,long *NumBrksAfter) ; 
//BENTLEYDTM_Public        int bcdtmImport_macaoTinToGeopakTinObject(DTM_TIN_OBJ **Tin,long numPts,long NumTrgs,long NumBrks,DPoint3d *Points,DTM_MACAO_TRGS *Triangles,DTM_MACAO_BRKS *Breaks,double Pptol,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmImport_polygoniseMacaoInactiveInternalTrianglesAsVoidsTinObject(DTM_TIN_OBJ *Tin,DTM_MACAO_TRGS *Triangles,long NumTrgs) ; 

////// bcdtmInsert//////
BENTLEYDTM_Public        int bcdtmInsert_addDtmFeatureToTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,long startPoint,long clearFlag) ; 
//BENTLEYDTM_Public        int bcdtmInsert_addPointToTinObject(DTM_TIN_OBJ *Tin,double Xp,double Yp,double Zp,long *Pnum) ; 
BENTLEYDTM_Private       int bcdtmInsert_addToFeatureListTinObject(DTM_TIN_OBJ *tinP,long tableEntry,long startPoint,long clearFlag) ; 
BENTLEYDTM_Public        int bcdtmInsert_addToFeatureTableTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,long startPoint,long *tableEntryP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_buildStringHullIntersectionTable(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,DTM_STR_INT_TAB **IntTable,long *IntTableNe) ; 
//BENTLEYDTM_Private       int bcdtmInsert_buildStringHullLinesIntersectionTable(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,DTM_STR_INT_TAB **IntTable,long *IntTableNe) ; 
//BENTLEYDTM_Private       int bcdtmInsert_buildStringHullPointsIntersectionTable(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,DTM_STR_INT_TAB **IntTable,long *IntTableNe) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkAndFixInsertLinesTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3) ; 
BENTLEYDTM_Public        int bcdtmInsert_checkAndFixLastPointOfDtmFeaturesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkForCreationOfKnotInExistingFeature(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,long *CreateKnot) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkForCreationOfKnotInExistingFeatureTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,long *createKnotP) ;
//BENTLEYDTM_Private       int bcdtmInsert_checkForPointLinePrecisionErrorTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,double x,double y,long *precisionError,long *antPt,long *clockPt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkPointCanBeMovedOnToLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double x,double y) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkPointCanBeMovedTinObject(DTM_TIN_OBJ *Tin,long P,double x,double y,long *MoveFlag) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkPointHullTrianglePrecisionTinObject(DTM_TIN_OBJ *tinP,long P1,long P2,long P3,double x,double y,long *precisionErrorP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkPointQuadrilateralPrecisionTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,long P4,double x,double y,long *precisionError) ; 
//BENTLEYDTM_Private       int bcdtmInsert_checkPointTriangleLinePrecisionTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double x,double y,long *precisionError) ; 
//BENTLEYDTM_Public        int bcdtmInsert_checkPointXYCanBeMovedTinObject(DTM_TIN_OBJ *Tin,long Point,long *MoveFlag,double x,double y) ; 
//BENTLEYDTM_Public        int bcdtmInsert_colinearStringTinObject(DTM_TIN_OBJ *Tin,DPoint3d *HullPts,long NumHullPts,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_findClosestLineInterceptWithHullTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long *P1,long *P2) ; 
//BENTLEYDTM_Public        int bcdtmInsert_fixPointQuadrilateralPrecisionTinObject(DTM_TIN_OBJ *tinP,long trgPnt1,long trgPnt2,long trgPnt3,long trgPnt4,double pointX,double pointY,double *fixedXP,double *fixedYP,long *fixTypeP ) ;
//BENTLEYDTM_Public        int bcdtmInsert_getIntersectPointTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long Ip,long *InsertLine,long *P1,long *P2,long *P3,double *Xi,double *Yi) ; 
//BENTLEYDTM_Public        int bcdtmInsert_getIntersectPointTinObjectNew( DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long indexPnt,long *insertLineP,long *pnt1P,long *pnt2P,long *pnt3P,double *intPntXP,double *intPntYP) ;
//BENTLEYDTM_Public        int bcdtmInsert_getNextFeatureListOffsetTinObject(DTM_TIN_OBJ *tinP,long *listOffset) ; 
//BENTLEYDTM_Private       int bcdtmInsert_getNextLineIntersectPointTinObject(DTM_TIN_OBJ *tinP,long firstPt,long lastPt,long indexPt,long *pointTypeP,long *insertLineP,long *p1P,long *p2P,long *p3P,double *xP,double *yP) ; 
//BENTLEYDTM_Private       int bcdtmInsert_getRigidIntersectPointTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long indexPnt,long *dtmFeatureLineP,long *tinPnt1P,long *tinPnt2P,long *tinPnt3P,double *intXP,double *intYP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_getZvalueTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,double x,double y,double *z) ; 
//BENTLEYDTM_EXPORT        int bcdtmInsert_internalLineStringIntoTinObject( DTM_TIN_OBJ *tinP, long drapeOpt, long insertOpt, DPoint3d *stringPtsP, long numStringPts, long *startPtP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmInsert_internalStringIntoTinObject(DTM_TIN_OBJ *Tin,long DrapeFlag,long InsertFlag,DPoint3d *StringPts,long NumStringPts,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_intersectStringWithTinHullTinObject(DTM_TIN_OBJ *Tin,DPoint3d **StringPts,long *NumStringPts,double Mpptol) ; 
//BENTLEYDTM_Public        int bcdtmInsert_lineBetweenPointsTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long DrapeFlag,long InsertFlag ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_lineBetweenPointsTinObjectNew(DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long drapeOption,long insertOption) ;
//BENTLEYDTM_Private       int bcdtmInsert_lineBetweenTinPointsTinObject(DTM_TIN_OBJ *tinP,long firstPt,long lastPt,long drapeOpt,long insertOpt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_normalIntersectInsertLineTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long P1,long P2,double *Xi,double *Yi) ; 
//BENTLEYDTM_Public        int bcdtmInsert_pointIntoAllDtmFeaturesTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmInsert_pointIntoDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removeAllDtmFeaturesTinObject(DTM_TIN_OBJ *tinP ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removeAllOccurrencesOfDtmFeatureTypeTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removeDtmFeatureFromTinObject(DTM_TIN_OBJ *tinP,long dtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removePointFromAllDtmFeaturesTinObject(DTM_TIN_OBJ *Tin,long Point) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removePointFromDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long point,long dtmFeature) ; 
//BENTLEYDTM_Private       int bcdtmInsert_removeSliverTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3 ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removeZeroSlopeTrianglesAlongContourLinesTinObject(DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_removeZeroSlopeTrianglesAlongTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_retriangualteAlongBreakLinesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmInsert_retriangualteAlongBreakLineTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_retriangualteAlongTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_rigidExternalStringIntoTinObject(DTM_TIN_OBJ *Tin,long DrapeFlag,long InsertFlag,DPoint3d *UserStringPts,long NumUserStringPts,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_rigidInternalStringIntoTinObject(DTM_TIN_OBJ *tinP,long drapeFlag,long insertFlag,DPoint3d *stringPtsP,long numStringPts,long *startPntP) ; 
//BENTLEYDTM_Private       int bcdtmInsert_rigidLineBetweenPointsTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long drapeFlag,long insertFlag) ; 
//BENTLEYDTM_Private       int bcdtmInsert_rubberBandHullLinesOnToInsertString(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,long *NumMoved) ; 
//BENTLEYDTM_Private       int bcdtmInsert_rubberBandHullPointsOnToInsertString(DTM_TIN_OBJ *Tin,DPoint3d **StringPts,long *NumStringPts,long *NumMoved) ; 
//BENTLEYDTM_Private       int bcdtmInsert_rubberBandTinPointsOnToInsertStringLines(DTM_TIN_OBJ *tinP,DPoint3d *stringPtsP,long numStringPts,long *numMovedP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_rubberBandTinPointsOnToInsertStringPoints(DTM_TIN_OBJ *Tin,DPoint3d *StringPts,long NumStringPts,long *NumMoved) ; 
//BENTLEYDTM_Public        int bcdtmInsert_scanAndInsertBrokenTptrLinksTinObject(DTM_TIN_OBJ *Tin,long Spnt,long DrapeFlag,long InsertFlag) ; 
//BENTLEYDTM_Private       int bcdtmInsert_scanPointForPointAngleIntersectionWithTriangleBaseTinObject(DTM_TIN_OBJ *tinP,long pnt,long anglePnt,long *basePnt1P,long *basePnt2P ) ; 
//BENTLEYDTM_Public        int bcdtmInsert_storeFeatureListEntryTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long Feature,long Lofs) ; 
//BENTLEYDTM_Private       int bcdtmInsert_storeInternalPointInTinObject(DTM_TIN_OBJ *tinP,long drapeOpt,double x,double y,double z,long *newPointP) ; 
//BENTLEYDTM_EXPORT        int bcdtmInsert_storePointInTinObject(DTM_TIN_OBJ *Tin,long DrapeFlag,long InternalFlag,double x,double y,double z,long *Ptno) ; 
//BENTLEYDTM_Public        int bcdtmInsert_storeRigidPointInTinObject(DTM_TIN_OBJ *tinP,long drapeFlag,long insertFlag,double x,double y,double z,long *tinPntNumP) ; 
//BENTLEYDTM_Public        int bcdtmInsert_swapTinLinesThatIntersectInsertLineTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp) ; 
//BENTLEYDTM_Public        int bcdtmInsert_triangulateAboutPointTinObject(DTM_TIN_OBJ *tinP,long point) ; 
//BENTLEYDTM_Public        int bcdtmInsert_validateInsertIslandTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmInsert_validateInsertVoidTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 

////// bcdtmInterpolate//////
//BENTLEYDTM_EXPORT        int bcdtmInterpolate_arcReference(DTM_DAT_OBJ *Spots,double SnapTolerance,DTM_DAT_OBJ *Arc,DTMUserTag Utag,DTM_DAT_OBJ *bcdtmData) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_betweenPointsLinearReference(DTM_DAT_OBJ *Data,double NullZVal) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_binaryFindPointDataObject(DTM_DAT_OBJ *Data,double x,long *Pt) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_findClosestPointDataObject(DTM_DAT_OBJ *Data,double x,double y,long *P) ; 
//BENTLEYDTM_Public     double bcdtmInterpolate_getDistanceFromPointDataObject(DTM_DAT_OBJ *Data,long P,double x,double y) ; 
//BENTLEYDTM_EXPORT        int bcdtmInterpolate_linearReference(DTM_DAT_OBJ *Spots,double SnapTolerance,DTM_DAT_OBJ *Linear,DTMUserTag Utag,DTM_DAT_OBJ *bcdtmData) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_pointsOnArcReference(DTM_DAT_OBJ *Spots,double SnapTolerance,double NullZVal,DTM_DAT_OBJ *Arc,DTMUserTag Utag,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_pointsOnLinearReference(DTM_DAT_OBJ *Spots,double SnapTolerance,double NullZVal,DTM_DAT_OBJ *Linear,DTMUserTag Utag,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmInterpolate_strokeArcIntoDataObject(DTM_DAT_OBJ **ArcPts,double Sx,double Sy,double Ex,double Ey,double Cx,double Cy,double A1,double A2,double Ap,double As,double Ra,double Rs) ; 

////// bcdtmJoin//////
//BENTLEYDTM_Private       int bcdtmJoin_appendJoinedLineStringsToDataObject(DTM_DAT_OBJ *dataP,DTM_DAT_OBJ *joinP,DTMFeatureType dtmFeatureType,double tolerance,DTM_JOIN_FEATURE_TABLE *featureTableP,long numFeatureTable,DTM_JOIN_LINE_TABLE *lineTableP,long numLineTable) ; 
//BENTLEYDTM_Private        int bcdtmJoin_appendJoinedLineStringsWithUserTagsToDataObject(DTM_DAT_OBJ *dataP,DTM_DAT_OBJ *joinP,DTMFeatureType dtmFeatureType,double tolerance,DTM_JOIN_FEATURE_TABLE *featureTableP,long numFeatureTable,DTM_JOIN_LINE_TABLE *lineTableP,long numLineTable,DTM_JOIN_USER_TAGS **joinUserTagsPP,long *numJoinUserTagsP) ;
//BENTLEYDTM_Private       int bcdtmJoin_buildJoinFeatureTable(DTM_DAT_OBJ *Data,DTMFeatureType dtmFeatureType,DTM_JOIN_FEATURE_TABLE **featureTablePP,long *numFeatureTableP) ; 
//BENTLEYDTM_Private       int bcdtmJoin_cleanFeatureCodeSequencesDataObject(DTM_DAT_OBJ *Data,long Fs,long Fn) ; 
//BENTLEYDTM_EXPORT        int bcdtmJoin_dtmFeatureTypeAndUserTagSequenceDataObject(DTM_DAT_OBJ *dataP,double tolerance,DTMFeatureType dtmFeatureType,long joinDtmFeatureType,long *numBeforeJoinP,long *numAfterJoinP,DTM_JOIN_USER_TAGS **joinUserTagsPP,long *numJoinUserTagsP) ;
//BENTLEYDTM_EXPORT        int bcdtmJoin_dtmFeatureTypeDataObject( DTM_DAT_OBJ *dataP, double tolerance, DTMFeatureType dtmFeatureType, long joinedFeatureType, long *numBeforeJoinP, long *numAfterJoinP ) ; 

////// bcdtmLattice//////
//BENTLEYDTM_Public        int bcdtmLattice_buildIsopachLatticeFromTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_LAT_OBJ **Lattice, DTM_LAT_OBJ **PriLat,long PriFlag,long LatFlag,long NoLatPts, double Xinc,double Xreg,double Xmin,double Xmax, double Yinc,double Yreg,double Ymin,double Ymax ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_buildLatticeFromTinObject(DTM_TIN_OBJ *Tin,DTM_LAT_OBJ **Lattice,WCharCP LatticeFile, long polyOption,long latticeOption,long numLatPts, double Xinc,double Xreg,double Xmin,double Xmax, double Yinc,double Yreg,double Ymin,double Ymax ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_buildThemeLatticeFromTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long ThemeType,DTM_LAT_OBJ **Lattice,long LatFlag,long NoLatPts,double Xinc,double Xreg,double Xmin,double Xmax,double Yinc,double Yreg,double Ymin,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_buildTrianglesFromDemDataObject(DTM_DAT_OBJ **Data,DTM_TIN_OBJ **Tin,long Nrows,long Ncols,double NullVal) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_calculateVolumeSurfaceToPlaneTinObject(DTM_TIN_OBJ *Tin,long NumLatPts,DTM_POLYGON_OBJ *Poly,long IntersectFlag,VOLRANGETAB *RangeTable,long NumRanges,double Elevation,double *Cut,double *Fill,double *Balance,double *Area,long *NoCells,double *CellArea) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_calculateVolumeSurfaceToSurfaceTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_POLYGON_OBJ *Poly,long IntersectFlag,long NumLatPts,VOLRANGETAB *RangeTable,long NumRanges,double *Cut,double *Fill,double *Balance,double *Area,long *NoCells, double *CellArea) ; 
//BENTLEYDTM_Public        int bcdtmLattice_createIsopachLatticeFromTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_LAT_OBJ *Lattice,DTM_LAT_OBJ **PriLat,long PriFlag) ; 
//BENTLEYDTM_Public        int bcdtmLattice_createLattice(DTM_TIN_OBJ *Tin,DTM_LAT_OBJ *Lattice,long PolyFlag,double *Pdv) ; 
//BENTLEYDTM_Public        int bcdtmLattice_createThemeLatticeFromTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long themeType,DTM_LAT_OBJ *Lattice) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_createTinObjectFromLatticeObject(DTM_LAT_OBJ *lattice,DTM_TIN_OBJ **tin) ; 
//BENTLEYDTM_Private       int bcdtmLattice_insertVoidsAndIslandsIntoTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ;
//BENTLEYDTM_Private       int bcdtmLattice_removeNullPointsOnTinHullTinObject(DTM_TIN_OBJ *Tin ,double NullVal ) ; 
//BENTLEYDTM_Private       int bcdtmLattice_resolveVoidsFromBreakLinesTinObject(DTM_DAT_OBJ **voidData) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_surfaceToPlaneTinObject(DTM_TIN_OBJ *Tin,long NumLatPts,VOLRANGETAB *RangeTable,long NumRanges,DPoint3d *PadPts,long NumPadPts,double Elevation,double *Cut,double *Fill,double *Balance,double *Area,long *NoCells,double *CellArea ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLattice_surfaceToSurfaceTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long NumLatPts,VOLRANGETAB *RangeTable,long NumRanges,DPoint3d *PadPts,long NumPadPts,double *Cut,double *Fill,double *Balance,double *Area,long *NoCells,double *CellArea) ; 
//BENTLEYDTM_Private       int bcdtmLattice_triangulateDemTinObject(DTM_TIN_OBJ *Tin,long Nrows,long Ncols,double NullVal ) ; 
//BENTLEYDTM_Private       int bcdtmLattice_triangulateGridTinObject(DTM_TIN_OBJ *Tin,long Nrows,long Ncols,double NullVal ) ; 
//BENTLEYDTM_Private       int bcdtmLattice_voidInternalNullPointsTinObject(DTM_TIN_OBJ *Tin ,double NullVal ) ; 

////// bcdtmList//////
BENTLEYDTM_Private       int bcdtmList_addDtmFeatureToTptrListTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *firstPntP,long *lastPntP,long *numAddedP) ; 
//BENTLEYDTM_Public        int bcdtmList_addLineTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmList_checkConnectivityListObjectTinObject(DTM_TIN_OBJ *Tin,LSTOBJ *List) ; 
BENTLEYDTM_Public        int bcdtmList_checkConnectivityOfDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long dtmFeature,long MessageFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_checkConnectivitySptrListTinObject(DTM_TIN_OBJ *Tin,long Point,long MessageFlag) ; 
BENTLEYDTM_Public        int bcdtmList_checkConnectivityTptrListTinObject(DTM_TIN_OBJ *tinP,long startPnt,long messageFlag) ; 
BENTLEYDTM_Public        int bcdtmList_checkConnectivityTptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,long messageFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_checkFeatureCanBeTraversedFromPointToPointTinObject(DTM_TIN_OBJ *Tin,long Feature,long Sp,long Lp) ; 
//BENTLEYDTM_Public        int bcdtmList_checkForNoneNullSptrValuesTinObject(DTM_TIN_OBJ *tinP,long *noneNullSptrP) ; 
//BENTLEYDTM_Public        int bcdtmList_checkForNoneNullTptrValuesTinObject(DTM_TIN_OBJ *tinP,long *noneNullTptrP) ; 
//BENTLEYDTM_Public        int bcdtmList_checkPointIsOnFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature,long Point,long *OnFeature) ; 
//BENTLEYDTM_Public        int bcdtmList_cleanDtmFeatureListsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_cleanTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmList_cleanTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
BENTLEYDTM_EXPORT        int bcdtmList_copyDtmFeaturePointsToPointArrayTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,DPoint3d **featurePtsPP,long *numFeaturePtsP) ; 
//BENTLEYDTM_Public        int bcdtmList_copyDtmFeatureToSptrListTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *startPnt) ; 
BENTLEYDTM_Public        int bcdtmList_copyDtmFeatureToTptrListTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *startPnt) ; 
//BENTLEYDTM_Public        int bcdtmList_copyFptrListToTptrListTinObject(DTM_TIN_OBJ *Tin, long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmList_copyListObjectToTptrListTinObject(DTM_TIN_OBJ *Tin,LSTOBJ *List,long *Spnt) ; 
//BENTLEYDTM_Public        int bcdtmList_copyPointListToTptrListTinObject(DTM_TIN_OBJ *Tin,long *PntLst) ; 
//BENTLEYDTM_Public        int bcdtmList_copySptrListToTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmList_copyTptrListToFptrListTinObject(DTM_TIN_OBJ *Tin, long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmList_copyTptrListToListObjectTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Utag,LSTOBJ **List) ; 
//BENTLEYDTM_Public        int bcdtmList_copyTptrListToP3DArrayTinObject(DTM_TIN_OBJ *Tin,long Spnt,DPoint3d **TptrPts,long *NumTptrPts) ; 
//BENTLEYDTM_Public        int bcdtmList_copyTptrListToPointListTinObject(DTM_TIN_OBJ *Tin,long **PntLst) ; 
//BENTLEYDTM_Public        int bcdtmList_copyTptrListToSptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_Public        int bcdtmList_countNumberOfDtmFeaturePointsTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *numPts) ; 
//BENTLEYDTM_Public        int bcdtmList_countPointsInCircularListForPointTinObject(DTM_TIN_OBJ *Tin,long Point,long *NumPoints) ; 
//BENTLEYDTM_Public        int bcdtmList_countPointsInTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *numPts) ; 
//BENTLEYDTM_Public        int bcdtmList_countTrianglesAndLinesTinObject(DTM_TIN_OBJ *Tin,long *NumberTriangles, long *NumberLines) ; 
//BENTLEYDTM_Public        int bcdtmList_deleteLineTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmList_deletePointTinObject(DTM_TIN_OBJ *Tin,long P) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_extractDtmFeatureForUserTagDataObject(DTM_DAT_OBJ *Data,DTMUserTag UserTag,long *numFeatureTable,long *FeatureType,DPoint3d **FeaturePts,long *NumFeatPts) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_extractDtmFeatureForUserTagTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,long *FeatureType,DPoint3d **FeaturePts,long *NumFeatPts) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_extractHullTinObject(DTM_TIN_OBJ *Tin, DPoint3d **HullPts, long *NumHullPts ) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_extractHullWithConnectingUserTagsTinObject(DTM_TIN_OBJ *Tin,P3DTAG **HullPts,long *NumHullPts) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_extractHullWithDtmFeaturesAndUserTagsTinObject(DTM_TIN_OBJ *Tin,P3DTAG **HullPts,long *NumHullPts) ; 
//BENTLEYDTM_Public        int bcdtmList_fillTptrPolygonWithTrianglesTinObject(DTM_TIN_OBJ *Tin,long Point) ; 
//BENTLEYDTM_Public        int bcdtmList_findClosestPairPointsTinObject(DTM_TIN_OBJ *Tin,long Ns, long Ofs ) ; 
//BENTLEYDTM_Public        int bcdtmList_findClosestPairTinObject(DTM_TIN_OBJ *Tin,long *P1,long *P2,double *Distance,long *ConnectFlag ) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getBreakLineUserTagsAtPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,DTMUserTag **UserTags,long *NumberOfUserTags) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getBreakLineUserTagsAtTinPointTinObject(DTM_TIN_OBJ *Tin,long TinPoint,DTMUserTag **UserTags,long *NumberOfUserTags) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getConnectedBreakLineUserTagsAtPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,DTMUserTag **UserTags,long *NumberOfUserTags) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getConnectedUserTagsTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,DTMUserTag **ListOfUserTags,long *NumberOfUserTags) ; 
//BENTLEYDTM_Public        int bcdtmList_getDirectionAndFeatureForInsertLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long *Feature,DTMDirection* direction) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeaturesAndUserTagsForTinLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long **Features, DTMUserTag **UserTags,long *NumberOfFeatures) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeaturesAndUserTagsForTinPointTinObject(DTM_TIN_OBJ *Tin,long TinPoint,long **Features, DTMUserTag **UserTags,long *NumberOfFeatures) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeaturesForLineTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,DTMTinPointFeatures_XM **lineFeaturesPP,long *numLineFeaturesP) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeaturesForPointTinObject(DTM_TIN_OBJ *tinP,long point,DTMTinPointFeatures_XM **pointFeaturesPP,long *numPointFeaturesP) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeatureTypeOccurrencesForLineTinObject(DTM_TIN_OBJ *Tin,DTMFeatureType dtmFeatureType,long P1,long P2,DTMTinPointFeatures_XM **lineFeatures,long *numLineFeatures) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeatureTypeOccurrencesForPointTinObject(DTM_TIN_OBJ *Tin,DTMFeatureType dtmFeatureType,long Point,DTMTinPointFeatures_XM **pointFeatures,long *numPointFeatures) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeatureTypeUserTagForLineTinObject(DTM_TIN_OBJ *Tin,long DtmFeatureType,long P1,long P2,DTMUserTag *UserTag ) ; 
//BENTLEYDTM_Public        int bcdtmList_getDtmFeatureTypeUserTagForPointTinObject(DTM_TIN_OBJ *Tin,long DtmFeatureType,long Point,DTMUserTag *UserTag) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getFeaturesAtPointDataObject(DTM_DAT_OBJ *Data,double x,double y,DTMUserTag Feature[] ,long MaxFeatures ,long *NoFeatures) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getFeaturesAtPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,DTMUserTag Feature[] ,long MaxFeatures ,long *NoFeatures) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_getFirstAndLastCoordiantesForUserTagTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,DPoint3d Coordinates[]) ; 
//BENTLEYDTM_Public        int bcdtmList_getFirstAndLastPointForDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *firstPnt,long *lastPnt) ; 
//BENTLEYDTM_Public        int bcdtmList_getHullFeaturesForPointTinObject(DTM_TIN_OBJ *Tin,long Point,DTMTinPointFeatures_XM **pointFeatures,long *numPointFeatures) ; 
//BENTLEYDTM_Public        int bcdtmList_getLastPointInTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *Lpnt,long *Lppnt) ; 
//BENTLEYDTM_Public        int bcdtmList_getNextAndPriorPointForFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature,long Cp,long *Np,long *Pp) ; 
BENTLEYDTM_Public        int bcdtmList_getNextPointForDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long currentPnt ,long *nextPnt) ; 
BENTLEYDTM_Public        int bcdtmList_getPriorPointForDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long currentPnt,long *priorPnt) ; 
//BENTLEYDTM_Public        int bcdtmList_getRealtedPointNumberDataObject(DTM_DAT_OBJ *Data,double x,double y,long *Rp) ; 
//BENTLEYDTM_Public        int bcdtmList_getTinLineOffsetInCircularListTinObject(DTM_TIN_OBJ *Tin,long *Offset,long P1,long P2 ) ; 
//BENTLEYDTM_Public        int bcdtmList_getTptrListPriorAndNextPointersTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Fp,long *Pp,long *Np ) ; 
//BENTLEYDTM_Public        int bcdtmList_getTptrPriorAndNextPointersTinObject(DTM_TIN_OBJ *Tin,long Fp,long *Pp,long *Np ) ; 
BENTLEYDTM_Public        int bcdtmList_getVoidExternalToIslandTinObject(DTM_TIN_OBJ *tinP,long islandFeature,long *voidFeatureP) ; 
BENTLEYDTM_Private       int bcdtmList_getVoidFeatureExternalToIslandFeatureTinObject(DTM_TIN_OBJ *tinP,long islandFeature,long *voidFeatureP) ; 
//BENTLEYDTM_Public        int bcdtmList_insertLineAfterPointTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long Ap) ; 
//BENTLEYDTM_Public        int bcdtmList_insertLineBeforePointTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long Bp) ; 
//BENTLEYDTM_Public        int bcdtmList_insertLineTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmList_insertTptrPolygonAroundPointTinObject(DTM_TIN_OBJ *Tin,long Point,long *Spnt) ; 
BENTLEYDTM_EXPORT       long bcdtmList_nextAntTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
BENTLEYDTM_Public       long bcdtmList_nextClockTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmList_nullOutFptrListTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmList_nullOutSptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
BENTLEYDTM_Public        int bcdtmList_nullOutTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmList_projectPointOnToP3DArrayAndReturnDtmFeaturesAndUserTagsForAssociatedTinLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,DPoint3d *P3dPts,long NumP3dPts,double *Px,double *Py,double *TangentAngle,DTMDirection* direction,FEATTAG **FeatureTags,long *NumberFeatureTags) ; 
//BENTLEYDTM_Public        int bcdtmList_qsortTinObject(DTM_TIN_OBJ *Tin,long ns,long ofs,long *sortP,long *tempSortP ) ; 
//BENTLEYDTM_Private       int bcdtmList_removeLastPointInFeatureListTinObject(DTM_TIN_OBJ *Tin,long Feature) ; 
//BENTLEYDTM_Public        int bcdtmList_removeLineTinObject(DTM_TIN_OBJ *Tin ,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmList_reportAndSetToNullNoneNullSptrValuesTinObject(DTM_TIN_OBJ *Tin,long reportFlag) ; 
BENTLEYDTM_Public        int bcdtmList_reportAndSetToNullNoneNullTptrValuesTinObject(DTM_TIN_OBJ *Tin,long reportFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_resortTinStructureTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmList_reverseDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmList_reverseFptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt ) ; 
//BENTLEYDTM_Public        int bcdtmList_reverseSptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt ) ; 
//BENTLEYDTM_Public        int bcdtmList_reverseTptrListTinObject(DTM_TIN_OBJ *Tin,long *Spnt ) ; 
BENTLEYDTM_Public        int bcdtmList_reverseTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt ) ; 
//BENTLEYDTM_Public        int bcdtmList_setConvexHullTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmList_terminateTptrListAtKnotTinObject(DTM_TIN_OBJ *Tin,long Point,long MessageFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_testForBoundaryLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForBreakLineDirectionTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForBreakLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForBreakPointTinObject(DTM_TIN_OBJ *tinP,long point) ; 
//BENTLEYDTM_Public        int bcdtmList_testForDtmFeatureLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForFptrLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForHullPointTinObject(DTM_TIN_OBJ *tinP,long point) ; 
BENTLEYDTM_Public        int bcdtmList_testForIslandHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForIslandVoidOrHoleHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForLineOnDtmFeatureTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForLineOnDtmFeatureTypeTinObject(DTM_TIN_OBJ *Tin,DTMFeatureType dtmFeatureType,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForMultipleLineConnectionsTinObject(DTM_TIN_OBJ *Tin,long *MultiFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_testForNonDirectionalIslandVoidOrHoleHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForPointInFeatureListTinObject(DTM_TIN_OBJ *Tin,long Feature,long Point,long *InListFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_testForPointOnDtmFeatureTypeTinObject(DTM_TIN_OBJ *Tin,long DtmFeatureType,long Point) ; 
BENTLEYDTM_Private       int bcdtmList_testForSurroundingDtmFeatureTypeTinObject(DTM_TIN_OBJ *tinP,long featurePnt,long featureNextPnt,long featurePriorPnt,DTMFeatureType dtmFeatureType,long *surroundFeatureP) ; 
//BENTLEYDTM_Public        int bcdtmList_testForValidTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmList_testForVoidHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForVoidLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long *VoidLine) ; 
BENTLEYDTM_Public        int bcdtmList_testForVoidOrHoleHullLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmList_testForVoidTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,long *VoidFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfDirectionalLineOnDtmFeatureTypeTinObject(DTM_TIN_OBJ *Tin,long DtmFeatureType,long P1,long P2) ; 
BENTLEYDTM_Public        int bcdtmList_testIfPointOnDtmFeatureTinObject(DTM_TIN_OBJ *Tin,DTMFeatureType DtmFeature,long P,long *Feature) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfPointOnFeatureTinObject(DTM_TIN_OBJ *Tin,long P,long Feature) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfPointOnIslandHullTinObject(DTM_TIN_OBJ *Tin,long P1) ; 
BENTLEYDTM_Public        int bcdtmList_testIfPointOnIslandVoidOrHoleHullTinObject(DTM_TIN_OBJ *Tin,long P1) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfPointOnTinOrDtmFeatureHullTinObject(DTM_TIN_OBJ *Tin,long P,long *HullFlag) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfPointOnUserFeatureTinObject(DTM_TIN_OBJ *Tin,long P,DTMUserTag UserTag) ; 
//BENTLEYDTM_Public        int bcdtmList_testIfPointOnVoidOrHoleHullTinObject(DTM_TIN_OBJ *Tin,long P1) ; 
BENTLEYDTM_Public        int bcdtmList_testLineTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
BENTLEYDTM_Public        int bcdtmList_writeCircularListForPointTinObject(DTM_TIN_OBJ *Tin,long P) ; 
BENTLEYDTM_Public        int bcdtmList_writeDtmFeaturesForPointTinObject(DTM_TIN_OBJ *tinP,long point) ; 
//BENTLEYDTM_Public        int bcdtmList_writeFeatureListTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmList_writeFeatureTableTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmList_writeFptrListTinObject(DTM_TIN_OBJ *Tin,long Point) ; 
//BENTLEYDTM_Public        int bcdtmList_writeListObjectTinObject(DTM_TIN_OBJ *Tin,LSTOBJ *List) ; 
BENTLEYDTM_Public        int bcdtmList_writePointsForDtmFeatureTinObject(DTM_TIN_OBJ *tinP,long dtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmList_writeSptrListTinObject(DTM_TIN_OBJ *Tin,long Point) ; 
BENTLEYDTM_Public        int bcdtmList_writeTptrListTinObject(DTM_TIN_OBJ *Tin,long Point) ; 

////// bcdtmLoad//////
//BENTLEYDTM_Public        int bcdtmLoad_buildContourIndexTinObject(DTM_TIN_OBJ *tinP,long startPnt,long lastPnt,double cMinZ,double cMaxZ,double cInt,double cReg,unsigned char **tinLinePP,DTMContourIndex **contourIndexPP,long *numContourIndexP) ;
//BENTLEYDTM_Public        int bcdtmLoad_getFirstTinLineForContourFromIndexTinObject(DTM_TIN_OBJ *tinP,DTMContourIndex *contourIndexP,long numContourIndex,double contourValue,long *contourLineP) ;
//BENTLEYDTM_Public        int bcdtmLoad_setLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,unsigned char *Flag) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoad_slopeLinesBetweenTinObjects(DTM_TIN_OBJ *tin1P,DTM_TIN_OBJ *tin2P,double majorInterval,double minorInterval) ; 
//BENTLEYDTM_Public        int bcdtmLoad_testLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,unsigned char *Flag) ; 
//BENTLEYDTM_Public        int bcdtmLoad_truncateRadialAtTinHullTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Ex,double Ey,double *Hx,double *Hy,double *Hz) ; 

////// bcdtmLoadNgp//////
//BENTLEYDTM_Public        int bcdtmLoadNgp_clearLoadPoints(void) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_clipAndWriteDtmFeature(DTMFeatureCallback loadFunctionP,DTM_TIN_OBJ *clipTinP,DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,void *userP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_contoursFromLatticeFile( WCharCP latticeFile, double conInt, double conReg, long loadRange, double conMin, double conMax, long loadValues, double *conValuesP, long numConValues, long smoothOption, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_contoursFromLatticeObject( DTM_LAT_OBJ *latticeP, double conInt, double conReg, long loadRange, double conMin, double conMax, long loadValues, double *conValuesP, long numConValues, long smoothOption, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_contoursFromTinFile( WCharCP tinFileP, double conInt, double conReg, long loadRange, double conMin, double conMax, long loadValues, double *conValuesP, long numConValues, long smoothOption, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_contoursFromTinObject( DTM_TIN_OBJ *tinP, double conInt, double conReg, long loadRange, double conMin, double conMax, long loadValues, double *conValuesP, long numConValues, long smoothOption, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_copyLoadPointsToPointArray(DPoint3d **pointsPP,long *numPointsP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_createDtmScanContextForDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, long maxSpots, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DTM_SCAN_CONTEXT **dtmScanContextPP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_createDtmScanContextForTinObject( DTM_TIN_OBJ *tinP, DTMFeatureType dtmFeatureType, long maxSpots, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, DTM_SCAN_CONTEXT **dtmScanContextPP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_deleteDtmScanContext( DTM_SCAN_CONTEXT **dtmScanContextPP ) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_dllLoadFunction(DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,void *userP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dllLoadFunctionTest(DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,DPoint3d *featurePtsP,long numFeaturePts,void *userP) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_dtmFeatureOccurrencesForUsertagFromDataObject(DTM_DAT_OBJ *dataP,DTMUserTag userTag,DTMFeatureCallback loadFunctionP,long useFence,long fenceOption,DPoint3d *fencePtsP,long numFencePts,void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_dtmFeatureOccurrencesForUsertagFromTinObject(DTM_TIN_OBJ *tinP,DTMUserTag userTag,DTMFeatureCallback loadFunctionP,long useFence,long fenceOption,DPoint3d *fencePtsP,long numFencePts,void *userP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeaturesForUsertagDataObject( DTM_DAT_OBJ *dataP, DTMUserTag userTag, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeaturesForUsertagFromTinObject( DTM_TIN_OBJ *tinP, DTMUserTag userTag, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromDataFile( WCharCP dataFileP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromLatticeFile( WCharCP latticeFileP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromLatticeObject( DTM_LAT_OBJ *latticeP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromTinFile( WCharCP tinFileP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_dtmFeatureTypeFromTinObject( DTM_TIN_OBJ *tinP, DTMFeatureType dtmFeatureType, DTMFeatureCallback loadFunctionP, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_dtmFeatureTypeOccurrencesFromDataObject(DTM_DAT_OBJ *dataP,DTMFeatureType dtmFeatureType,long fsCode,long fnCode,DTMFeatureCallback loadFunctionP,long useFence,DPoint3d *fencePtsP,long numFencePts,void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_dtmFeatureTypeOccurrencesFromLatticeObject(DTM_LAT_OBJ *latticeP,DTMFeatureType dtmFeatureType,DTMFeatureCallback loadFunctionP,long useFence,long fenceOption,DPoint3d *fencePtsP,long numFencePts,void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_dtmFeatureTypeOccurrencesTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType,DTMFeatureCallback loadFunctionP,long useFence,long fenceOption,DPoint3d *fencePtsP,long numFencePts,void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_filterWeightedPointArray( DPoint3d *pointsP, long *numPtsP, long *wghtPtsP, double tolerance ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_freeContourMemory(void) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_freeLoadMemory(void) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_freeMemory(void) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureOccurrenceForGuidFromDataObject( DTM_DAT_OBJ *dataP, DTM_GUID userFeatureId, long firstCall, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureOccurrenceForGuidFromTinObject( DTM_TIN_OBJ *tinP, DTM_GUID userFeatureId, long firstCall, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureOccurrenceForUsertagFromDataObject( DTM_DAT_OBJ *dataP, DTMUserTag userTag, long firstCall, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureOccurrenceForUserTagFromTinObject( DTM_TIN_OBJ *tinP, DTMUserTag userTag, long firstCall, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureTypeOccurrenceFromDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, long firstCall, long maxSpots, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_getNextDtmFeatureTypeOccurrenceFromTinObject( DTM_TIN_OBJ *tinP, DTMFeatureType dtmFeatureType, long firstCall, long maxSpots, long useFence, long fenceOption, DPoint3d *fencePtsP, long numFencePts, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DPoint3d **featPtsPP, long *numFeatPtsP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_latticeMeshFromLatticeObject( DTM_LAT_OBJ *latticeP, long firstCall, long maxMeshSize, long useFence, DPoint3d *fencePtsP, long numFencePts, DPoint3d **meshPtsPP, long *numMeshPtsP, long **meshFacesPP, long *numMeshFacesP ) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_loadDtmFeature(DTM_TIN_OBJ *clipTinP,long useFence,long fenceOption,DTMFeatureCallback loadFunctionP,DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,void *userP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_mdlLoadFunction( DTMFeatureType dtmFeatureType, DTMUserTag userTag, DTM_GUID userFeatureId, void *userP) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_plotContourLatticeObject( DTM_LAT_OBJ *latticeP, unsigned char *markLatP, float contourValue, long smoothOption, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_plotContourTinObject( DTM_TIN_OBJ *tinP, double conInt, double contourValue, long smoothOption, unsigned char *tinLineP, long voidFlag, DTMContourIndex *contourIndexP, long numContourIndex, long *contourStartLineP, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_pullSmoothPointsBack( DTM_TIN_OBJ *tinP, double conInt, double *xKnotP, double *yKnotP, long *knotWghtP, long numKnots, long pointDensity, double contourValue, DPoint3d *conPtsP, long numConPts ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_pullSmoothPointsBackOnToBreakLines(double x[],double y[],long conWght[],long numPts,long pointDensity,DPoint3d *conPtsP,long numConPts) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_removeDuplicateContourPoints(void) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_removeDuplicateLoadPoints(void) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_scanForDtmFeatureTypeOccurrenceDataObject( DTM_SCAN_CONTEXT *dtmScanContextP, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DTM_POINT_ARRAY ***pointArraysPPP, long *numPointArraysP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_scanForDtmFeatureTypeOccurrenceTinObject( DTM_SCAN_CONTEXT *dtmScanContextP, long *featureFoundP, DTMFeatureType* dtmFeatureTypeP, DTMUserTag *userTagP, DTM_GUID *userFeatureIdP, DTM_POINT_ARRAY ***pointArraysPPP, long *numPointArraysP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_smoothContour( DTM_TIN_OBJ *tinP, double conInt, long smoothOption ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_splineSmoothContour( DTM_TIN_OBJ *tinP, double conInt, DPoint3d **conPtsPP, long *numconPtsP, long **conWghtPP, double smoothFactor, long pointDensity ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_storeContourPoint( DTM_TIN_OBJ *tinP, double conInt, long storeFlag, long smoothOption, long weight, double x, double y, double z, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_storeFeaturePoint(double x,double y,double z) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_testForOverlapWithFence(DTM_TIN_OBJ *clipTinP,DPoint3d *featurePtsP,long numFeaturePts,long *overlapP) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_tinEdgesFromTinObject( DTM_TIN_OBJ *tinP, long useFence, DPoint3d *fencePtsP, long numFencePts, long *numEdgesP, long **edgesPP, DPoint3d **tinPtsPP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_tinMeshFromTinObject( DTM_TIN_OBJ *tinP, long firstCall, long maxMeshSize, long useFence, DPoint3d *fencePtsP, long numFencePts, DPoint3d **meshPtsPP, long *numMeshPtsP, long **meshFacesPP, long *numMeshFacesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLoadNgp_tinTrianglesFromTinObject( DTM_TIN_OBJ *tinP, long useFence, DPoint3d *fencePtsP, long numFencePts, long *numTrianglesP, long **trianglesPP, DPoint3d **tinPtsPP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_traceContourLatticeObject( DTM_LAT_OBJ *latticeP, unsigned char *markLatP, float contourValue, long i1, long j1, long i2, long j2, long smoothOption, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_traceContourTinObject( DTM_TIN_OBJ *tinP, double conInt, double contourValue, long smoothOption, long p1, long p2, DTMDirection direction, unsigned char *tinLineP, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Private       int bcdtmLoadNgp_traceZeroSlopeContourTinObject( DTM_TIN_OBJ *tinP, double conInt, long p1, long p2, DTMDirection direction, double contourDirection, double contourValue, long smoothOption, unsigned char *tinLineP, DTM_TIN_OBJ *clipTinP, long useFence, long fenceOption, DTMFeatureCallback loadFunctionP, void *userP ) ; 
//BENTLEYDTM_Public        int bcdtmLoadNgp_writeLoadFunction(DTMFeatureCallback loadFunctionP,DTMFeatureType dtmFeatureType,DTMUserTag userTag, DTM_GUID userFeatureId, void *userP) ; 

////// bcdtmLos//////
//BENTLEYDTM_Public        int bcdtmLos_buildHorizonTableFromDataObject(DTM_DAT_OBJ *Data,double Xe,double Ye,DTM_HORIZON_LINE **Htable,long *Htne,long *Htme) ; 
//BENTLEYDTM_Public        int bcdtmLos_buildVisibilityTablesForTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze ) ; 
//BENTLEYDTM_Public        int bcdtmLos_calculateHorizonLineTriangleEdgeIntersection(DTM_TIN_OBJ *Tin,DTMDirection direction,long P1,long P2,long P3,double X1,double Y1,double X2,double Y2,double *X3,double *Y3) ; 
//BENTLEYDTM_Public        int bcdtmLos_calculateRegionVisibilityBreakLinesTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data,long P1,long P2,long P3,long Nhline,DTM_HORIZON_LINE_INDEX *Hzlidx,long Hzlidxne,long *Hidxlist) ; 
//BENTLEYDTM_Public        int bcdtmLos_checkHorizonLineIntersectsTriangle(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double X1,double Y1,double X2,double Y2) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineLineVisibilityTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,double X1,double Y1,double Z1,double X2,double Y2,double Z2,long *IsVisible,long **Visibility,DPoint3d **VisibilityPoints,long *NumVisibilityPoints) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determinePointVisibilityTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,double Xp,double Yp,double Zp,long *IsVisible) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineRadialVisibilityTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,double Xp,double Yp,double Zp ) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineViewShedsTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,long ViewShedFlag,long NumberRadials,double RadialIncrement) ; 
//BENTLEYDTM_Public        int bcdtmLos_determineVisibilityDirectionOfTriangleTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,long P1,long P2,long P3,long *VisibilityDirection) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineVisibilityTinLinesTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineVisibilityTinPointsTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze) ; 
//BENTLEYDTM_EXPORT        int bcdtmLos_determineVisibilityTinRegionsTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze) ; 
//BENTLEYDTM_Public        int bcdtmLos_getLastVisibleSectionOfSurfaceLineBetweenEyeAndHorizonLineTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,double Xh,double Yh,double Zh,double *Xp,double *Yp,double *Zp) ; 
//BENTLEYDTM_Public        int bcdtmLos_getNextLosPointTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type, long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmLos_getNextPointFromEdgeTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi) ; 
//BENTLEYDTM_Public        int bcdtmLos_getNextPointFromPointTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmLos_getNextPointFromTriangleTinObject(DTM_TIN_OBJ *Tin,double Xs,double Ys,double Xe,double Ye,long *Type,long P1, long P2, long P3,long *Np1,long *Np2,long *Np3,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmLos_polygoniseAndLoadRegionVisibilityFromTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,DTM_HORIZON_LINE_INDEX *Hzlidx,long Hzlidxne,long *Hidxlist) ; 
//BENTLEYDTM_Public        int bcdtmLos_refineTinForRegionVisibilityTinObject(DTM_TIN_OBJ *Tin,double Xe,double Ye,double Ze,DTM_HORIZON_LINE_INDEX *Hzlidx,long Hzlidxne,long *Hidxlist) ; 

////// bcdtmMark//////
//BENTLEYDTM_Public        int bcdtmMark_createSptrListOfInternalAndTptrPolygonPointsTinObject(DTM_TIN_OBJ *tinP,long startPnt,long *firstPntP ) ; 
//BENTLEYDTM_Public        int bcdtmMark_directionalTinLinesInternalToTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long sPnt,long *tinLines,long mark,long *numMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_directionalVoidLinesExternalToTptrIslandPolygonTinObject(DTM_TIN_OBJ *Tin,long sPnt,long *tinLines,long mark,long *numMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_directionalVoidLinesInternalToTptrVoidPolygonTinObject(DTM_TIN_OBJ *Tin,long sPnt,long *tinLines,long mark,long *numMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_externalTptrIslandpolyListPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_externalTptrPolygonPointsAsVoidPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_externalTptrPolygonPointsAsVoidPointsTinObjectNew(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_externalTptrPolygonPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_internalFeaturepolyListPointsTinObject(DTM_TIN_OBJ *Tin,long Feature,long Mark,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_internalTptrPolygonPointsAsIslandPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_internalTptrPolygonPointsAsVoidPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_internalTptrPolygonPointsAsVoidPointsTinObjectNew(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_internalTptrPolygonPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumMarked ) ; 
BENTLEYDTM_Public        int bcdtmMark_pointsExternalToIslandTinObject(DTM_TIN_OBJ *Tin,long islandFeature ) ; 
//BENTLEYDTM_Public        int bcdtmMark_pointsInternalToIslandTinObject(DTM_TIN_OBJ *Tin,long IslandFeature ) ; 
BENTLEYDTM_Public        int bcdtmMark_pointsInternalToVoidTinObject(DTM_TIN_OBJ *Tin,long VoidFeature ) ; 
//BENTLEYDTM_Public        int bcdtmMark_prgnControlWordForFeatureTinObject(DTM_TIN_OBJ *Tin,long Feature,long Mark,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmMark_setLineTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,unsigned char *lineFlagP) ; 
//BENTLEYDTM_Public        int bcdtmMark_setVoidPointsTinObject( DTM_TIN_OBJ *tinP, long   initOption, long   startFeature, long   *numVoidPtsP ) ;
//BENTLEYDTM_Public        int bcdtmMark_testForDtmFeatureTypeLineEqualOrAboveStartFeatureTinObject( DTM_TIN_OBJ *tinP, DTMFeatureType dtmFeatureType, long startFeature, long point1, long point2) ;
//BENTLEYDTM_Public        int bcdtmMark_testForPointOnDtmFeatureTypeEqualOrAboveStartFeatureTinObject( DTM_TIN_OBJ *tinP, DTMFeatureType dtmFeatureType, long startFeature, long point) ;
//BENTLEYDTM_Public        int bcdtmMark_testLineTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,unsigned char *lineFlagP) ; 
BENTLEYDTM_Public        int bcdtmMark_voidPointsExternalToTptrIslandPolygonTinObject(DTM_TIN_OBJ *Tin,long sPnt,long *numMarked ) ; 
BENTLEYDTM_Public        int bcdtmMark_voidPointsInternalToTptrVoidPolygonTinObject(DTM_TIN_OBJ *Tin,long sPnt,long *numMarked ) ; 
BENTLEYDTM_Public        int bcdtmMark_voidPointsTinObject(DTM_TIN_OBJ *Tin) ; 

////// bcdtmMath//////
BENTLEYDTM_Public        int bcdtmMath_allPointSideOfTinObject(DTM_TIN_OBJ *Tin,long p1,long p2,long p3) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculateAreaAndDirectionFptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt,double *Area,DTMDirection* direction) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculateAreaAndDirectionHptrPolygonTinObject(DTM_TIN_OBJ *tinP,long startPnt,double *areaP,long *directionP) ;
BENTLEYDTM_Public        int bcdtmMath_calculateAreaAndDirectionSptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt,double *Area,DTMDirection* direction) ; 
BENTLEYDTM_Public        int bcdtmMath_calculateAreaAndDirectionTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt,double *Area,DTMDirection* direction) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculateAreaAndPerimeterFptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt,double *Area,double *Perimeter) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculateBoundingCubeDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmMath_calculateBoundingCubeTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculateDirectionAreaAndPerimeterTptrPolygonTinObject(DTM_TIN_OBJ *Tin,long Spnt,DTMDirection* direction,double *Area,double *Perimeter) ; 
//BENTLEYDTM_Public     double bcdtmMath_calculateIncludedPointAngleTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,long pnt3) ; 
//BENTLEYDTM_Public        int bcdtmMath_calculatePartialDerivativesTinObject(DTM_TIN_OBJ *Tin,double **Pdv ) ; 
//BENTLEYDTM_Public     double bcdtmMath_calculateRadiusCircumscribedCirclePoint(DTM_TIN_OBJ *Tin,long P1,long P2,long P3) ; 
//BENTLEYDTM_EXPORT        int bcdtmMath_calculateSlopeAtGivenAngleFromPointTinObject(DTM_TIN_OBJ *Tin,double x,double y,double Angle,double *Elevation,long *DrapeFlag,double *Slope) ; 
//BENTLEYDTM_Public     double bcdtmMath_calculateTriangleAreaToPerimeterRatioTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3) ; 
//BENTLEYDTM_EXPORT     double bcdtmMath_getPointAngleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmMath_getTriangleAttributesTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double *SlopeDegrees,double *SlopePercent,double *Aspect,double *Height) ; 
//BENTLEYDTM_EXPORT        int bcdtmMath_interpolatePointOnLineTinObject(DTM_TIN_OBJ *Tin,double x,double y,double *z,long P1,long P2 ) ; 
//BENTLEYDTM_Public        int bcdtmMath_interpolatePointOnPointLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,double x,double y,double *Xi,double *Yi,double *Zi ) ; 
//BENTLEYDTM_Public        int bcdtmMath_interpolatePointOnTriangleTinObject(DTM_TIN_OBJ *tinP,double x,double y,double *ZP,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmMath_linePointSideOfTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,double x,double y) ; 
//BENTLEYDTM_Public     double bcdtmMath_normalDistanceToLineTinObject(DTM_TIN_OBJ *Tin,long P1,long P2, double x, double y ) ; 
//BENTLEYDTM_Public        int bcdtmMath_normalIntersectLinesTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long P1,long P2,double *Xi,double *Yi) ; 
//BENTLEYDTM_Public        int bcdtmMath_pointAngleSlopeDistanceTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,double *Angle,double *Slope,double *Distance) ; 
//BENTLEYDTM_Public     double bcdtmMath_pointDistanceDataObject(DTM_DAT_OBJ *Data,long p1,long p2) ; 
BENTLEYDTM_Public     double bcdtmMath_pointDistanceTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmMath_pointInsideTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double Xp,double Yp) ; 
//BENTLEYDTM_Public        int bcdtmMath_pointInTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double Xp,double Yp) ; 
//BENTLEYDTM_Public        int bcdtmMath_pointSideOfDataObject(DTM_DAT_OBJ *Data,long p1,long p2,long p3) ; 
//BENTLEYDTM_Public        int bcdtmMath_pointSideOfTinObject(DTM_TIN_OBJ *Tin,long p1,long p2,long p3) ; 
//BENTLEYDTM_Public     double bcdtmMath_pointSlopeTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 

////// bcdtmMem//////
//BENTLEYDTM_Public        int bcdtmMem_dumpAndReadTinObject(DTM_TIN_OBJ *tinP) ; 

////// bcdtmMerge//////
//BENTLEYDTM_Public        int bcdtmMerge_checkAndFixPrecisionForTrianglesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmMerge_checkPointCanBeMergedTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2,long *mergeFlagP) ; 
//BENTLEYDTM_EXPORT        int bcdtmMerge_checkTinsIntersectTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long *InternalFlag) ; 
//BENTLEYDTM_Public        int bcdtmMerge_connectedPointsTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Private       int bcdtmMerge_copyDtmFeaturesToTinObject(DTM_TIN_OBJ *tin1P,DTM_TIN_OBJ *tin2P) ; 
//BENTLEYDTM_Public        int bcdtmMerge_copyFeatureListFromPointToPointTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2) ; 
//BENTLEYDTM_Public        int bcdtmMerge_detectAndInsertImpliedVoidsTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2) ; 
//BENTLEYDTM_Public        int bcdtmMerge_extractAndInsertHoleTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DPoint3d *HolePts,long NumHolePts) ; 
//BENTLEYDTM_Public        int bcdtmMerge_fixFeatureListForLastPointTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2) ; 
//BENTLEYDTM_Public        int bcdtmMerge_getRealtedPointNumberDataObject(DTM_DAT_OBJ *Data,double x,double y,long *Rp) ; 
//BENTLEYDTM_Public        int bcdtmMerge_insertHolesIntoTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long InternalFlag) ; 
//BENTLEYDTM_Public        int bcdtmMerge_insertImpliedVoidTinObject(DTM_TIN_OBJ *Tin,long Point,long NumPoints) ; 
//BENTLEYDTM_Public        int bcdtmMerge_insertMergeTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,long MergeFlag,long Fpnt) ; 
//BENTLEYDTM_Private       int bcdtmMerge_internallyClipTinObject( DTM_TIN_OBJ *tinP, long internalFlag, DPoint3d *clipPtsP, long numClipPts, long *firstPntP ) ; 
//BENTLEYDTM_Private       int bcdtmMerge_mergeClosePointsOnInsertBoundary(DTM_TIN_OBJ *tinP,long internalFlag,long startPnt,DPoint3d *hullPtsP,long numHullPts ) ; 
//BENTLEYDTM_Private       int bcdtmMerge_removeTrianglesOnInsertHull( DTM_TIN_OBJ *tinP, long startPnt ) ; 
//BENTLEYDTM_EXPORT        int bcdtmMerge_tinObjects( DTM_TIN_OBJ *tin1P, DTM_TIN_OBJ *tin2P, long internalFlag ) ; 
//BENTLEYDTM_Public        int bcdtmMerge_writeTinLinesTinObject(DTM_TIN_OBJ *Tin,WCharCP DataFile) ; 

////// bcdtmNormal//////
//BENTLEYDTM_Public        int bcdtmNormal_adjustPointToLineToleranceTinObjectOld(DTM_TIN_OBJ *Tin,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmNormal_calculateMachinePrecisionForDataObject(DTM_DAT_OBJ *Data,double *Mpptol) ; 
BENTLEYDTM_Public        int bcdtmNormal_calculateMachinePrecisionForTinObject(DTM_TIN_OBJ *Tin,double *Mpptol) ; 
//BENTLEYDTM_Public        int bcdtmNormal_checkAndFixPrecisionForTrianglesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmNormal_checkSortOrderTinObject(DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_Public        int bcdtmNormal_fixPrecisionForTriangleTinObject(DTM_TIN_OBJ *Tin,double Pptol,long P1,long P2,long P3) ; 
//BENTLEYDTM_Public        int bcdtmNormal_fixSliverTriangleTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double X1,double Y1,double Pptol,long *FixFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmNormal_generaliseTinObject(DTM_TIN_OBJ *Tin,double Pptol,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmNormal_insertDtmFeaturesTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmNormal_insertFeaturesFromDataObjectIntoTinObject(DTM_DAT_OBJ *Data, DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmNormal_mergeCircularListPointsTinObject(DTM_TIN_OBJ *Tin,double Pptol,long *NumMerged) ; 
//BENTLEYDTM_Public        int bcdtmNormal_mergeClosestPointsTinObject(DTM_TIN_OBJ *Tin,double Pptol) ; 
//BENTLEYDTM_Public        int bcdtmNormal_mergeConnectedPointsTinObject(DTM_TIN_OBJ *Tin,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmNormal_mergeSliverPointsTinObject(DTM_TIN_OBJ *Tin,double Pltol,long *NumSlivers) ; 
//BENTLEYDTM_Public        int bcdtmNormal_removeSliversTinObject(DTM_TIN_OBJ *Tin,double Pltol,long *NumSlivers) ; 
//BENTLEYDTM_Public        int bcdtmNormal_removeSliverTrianglesTinObject(DTM_TIN_OBJ *Tin,double Pltol,long *NumSliversRemoved) ; 
//BENTLEYDTM_Public        int bcdtmNormal_reorderPointInTinObject(DTM_TIN_OBJ *Tin,long P ) ; 
//BENTLEYDTM_Public        int bcdtmNormal_writeTinFeaturesToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ **Data) ; 

////// bcdtmObject//////
//BENTLEYDTM_Public        int bcdtmObject_allocateInitialCircularListMemoryTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmObject_allocateInitialNodesMemoryTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmObject_allocateInitialPointsMemoryTinObject(DTM_TIN_OBJ *tinP) ; 
BENTLEYDTM_Public        int bcdtmObject_allocateMemoryDataObject(DTM_DAT_OBJ *dataP) ; 
BENTLEYDTM_Public        int bcdtmObject_allocateMemoryFeatureListTinObject(DTM_TIN_OBJ *tinP) ; 
BENTLEYDTM_Public        int bcdtmObject_allocateMemoryFeatureTableTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmObject_allocateMemoryTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_appendDataObjectToDataObject(DTM_DAT_OBJ *data1P,DTM_DAT_OBJ *data2P) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_copyDataObjectToDataObject(DTM_DAT_OBJ *Data1,DTM_DAT_OBJ *Data2) ; 
BENTLEYDTM_EXPORT         int bcdtmObject_copyDataObjectToDtmObject(DTM_DAT_OBJ *dataP,BC_DTM_OBJ **dtmPP) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_copyTinObjectToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
BENTLEYDTM_EXPORT         int bcdtmObject_copyTinObjectToDtmObject(DTM_TIN_OBJ *tinP,BC_DTM_OBJ **dtmPP) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_copyTinObjectToTinObject(DTM_TIN_OBJ *Tin1, DTM_TIN_OBJ *Tin2) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_createDataObject(DTM_DAT_OBJ **dataPP ) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_createTinObject(DTM_TIN_OBJ **Tin) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_deleteDataObject(DTM_DAT_OBJ **Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_deleteDtmFeatureUsingGuidFromDataObject(DTM_DAT_OBJ *dataP,DTM_GUID userFeatureId) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_deleteDtmFeatureUsingTagFromDataObject(DTM_DAT_OBJ *dataP,DTMUserTag userTag) ; 
//BENTLEYDTM_Public        int bcdtmObject_deleteDuplicatesDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_deleteHullFromDataObject(DTM_DAT_OBJ *Data) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_deleteTinObject(DTM_TIN_OBJ **Tin) ; 
BENTLEYDTM_Public        int bcdtmObject_deSortDataObject(DTM_DAT_OBJ *dataP) ; 
BENTLEYDTM_Public        int bcdtmObject_freeMemoryDataObject(DTM_DAT_OBJ *DataObj) ; 
BENTLEYDTM_Public        int bcdtmObject_freeMemoryTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmObject_incrementCircularListMemoryTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmObject_incrementMemoryTinObject(DTM_TIN_OBJ *Tin) ; 
BENTLEYDTM_Public        int bcdtmObject_initialiseDataObject(DTM_DAT_OBJ *dataP) ; 
BENTLEYDTM_Public        int bcdtmObject_initialiseTinObject(DTM_TIN_OBJ *tinP ) ; 
//BENTLEYDTM_Public        int bcdtmObject_monitorDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_moveXYZDataObject(DTM_DAT_OBJ *Data,double x,double y,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_moveXYZUsingTagDataObject(DTM_DAT_OBJ *Data,DTMUserTag Utag,double x,double y,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_moveZDataObject(DTM_DAT_OBJ *Data,long MoveFlag,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_moveZTinObject(DTM_TIN_OBJ *Tin,long MoveFlag,double z) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_moveZUsingTagDataObject(DTM_DAT_OBJ *Data,DTMUserTag Utag,long MoveFlag,double z) ; 
//BENTLEYDTM_Public        int bcdtmObject_processDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmObject_qsortDataObject(DTM_DAT_OBJ *Data,long Ns,long Iofs,long *Isp,long *Ist ) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_resizeMemoryDataObject(DTM_DAT_OBJ *dataP) ; 
//BENTLEYDTM_Public        int bcdtmObject_resizeMemoryTinObject(DTM_TIN_OBJ *Tin) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_setMemoryAllocationParametersDataObject(DTM_DAT_OBJ *dataP,long inimemPolyPts,long incmemPolyPts) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_setTolerancesDataObject(DTM_DAT_OBJ *Data,long Ndd, double Pptol,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmObject_sortDataObject(DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_storeDemPointInDataObject(DTM_DAT_OBJ *Data,long Fa,DTMUserTag Utag, double x,double y,double z ) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_storeDtmFeatureInDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, DTMUserTag userTag, DTM_GUID userFeatureId, DPoint3d *featurePtsP, long numFeaturePts ) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_storePointInDataObject( DTM_DAT_OBJ *dataP, long featureCode, DTMUserTag userTag, DTM_GUID userFeatureId, double x, double y, double z ) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_testForPointInDataObject(DTM_DAT_OBJ *Data,double x,double y,long *InFlag,double *z ) ; 
BENTLEYDTM_Public        int bcdtmObject_testForValidDataObject( DTM_DAT_OBJ *Data ) ; 
BENTLEYDTM_EXPORT        int bcdtmObject_testForValidTinObject( DTM_TIN_OBJ *Tin ) ; 
//BENTLEYDTM_EXPORT        int bcdtmObject_updateFeatureTypeUsingTagDataObject(DTM_DAT_OBJ *dataP,DTMUserTag userTag,DPoint3d *featurePtsP,long numFeaturePts) ; 
//BENTLEYDTM_Public        int bcdtmObject_writeDataObject(DTM_DAT_OBJ *Data) ; 

////// bcdtmPatch//////
//BENTLEYDTM_EXPORT        int bcdtmPatch_surfaceToPlaneIsoPatchTinObject(DTM_TIN_OBJ *Tin1,DTM_LAT_OBJ **Lattice,DPoint3d *PadPts,long NumPadPts,double Elevation,long LoadFlag,long PatchFlag,long NoLatPts,double Xinc,double Yinc,double Xreg,double Yreg) ; 
//BENTLEYDTM_EXPORT        int bcdtmPatch_surfaceToSurfaceIsoPatchTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DTM_LAT_OBJ **Lattice,DTM_LAT_OBJ **PriLat,DPoint3d *PadPts,long NumPadPts,long LoadFlag,long PatchFlag,long NoLatPts,double Xinc,double Yinc,double Xreg,double Yreg) ; 

////// bcdtmPolygon//////
//BENTLEYDTM_Public        int bcdtmPolygon_copyAllPolygonObjectPolygonsToDataObject(DTM_POLYGON_OBJ *Poly,DTM_DAT_OBJ *Data,long DtmFeatureType) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_copyPolygonObjectPolygonToDataObject(DTM_POLYGON_OBJ *Poly,long Ofs,DTM_DAT_OBJ *Data,long DtmFeatureType,long UserTag) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_countNumberOfNonDtmPolygonFeaturesForPointTinObject(DTM_TIN_OBJ *Tin,long Point,long *numFeatureTable) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_extractPolygonsTinObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ **Poly,TAGOBJ **Tag) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_getIntersectPolygonsTinObject(DTM_TIN_OBJ *tinP,DTM_POLYGON_OBJ *polyP) ; 
//BENTLEYDTM_Private       int bcdtmPolygon_getNextPointForUserTagTinObject(DTM_TIN_OBJ *tinP,DTMUserTag UTAG,long point,long *nextPoint) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_intersectVolumePolygonAndTinHullsTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DPoint3d *VolPoly,long NumVolPolyPts,DTM_POLYGON_OBJ **Poly,long *IntersectFlag ) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_intersectVolumePolygonAndTinHullTinObject(DTM_TIN_OBJ *Tin,DPoint3d *VolPoly,long NumVolPolyPts,DTM_POLYGON_OBJ **Poly,long *IntersectFlag ) ; 
//BENTLEYDTM_Public        int bcdtmPolygon_storeTptrPolygonInPolygonObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ *Poly,long Spnt,long UserTag) ; 

////// bcdtmPrismoidal//////
//BENTLEYDTM_Private       int bcdtmPrismoidal_calculatePrismoidalVolumesForTriangleTinObject(DTM_TIN_OBJ *tinP,VOLRANGETAB *volRangeTabP,long numRanges,long startPnt,DPoint3d *trgPtsP,double *cutP,double *fillP,double *areaP,double *voidAreaP) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateSurfaceToSurfaceVolumeForTriangleTinObject(DTM_TIN_OBJ *Tin,long Ndp,VOLRANGETAB *RangeTable,long NumRanges,long Spnt,DPoint3d *TrgPts,double *Cut,double *Fill,double *Area) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateSurfaceToSurfaceVolumeForTriangleTinObjectNew(DTM_TIN_OBJ *Tin,VOLRANGETAB *RangeTable,long NumRanges,long Spnt,DPoint3d *TrgPts,double *Cut,double *Fill,double *Area) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateVolumesForMarkedInternalTptrPolygonPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumUnMarked,VOLRANGETAB *RangeTable,long NumRanges,double Xmin,double Ymin,double Zmin,double *Cut,double *Fill,double *Area ) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateVolumesForPointTinObject(DTM_TIN_OBJ *Tin,long P1,VOLRANGETAB *RangeTable,long NumRanges,double Xmin,double Ymin,double Zmin,double *Cut,double *Fill,double *Area) ; 
//BENTLEYDTM_EXPORT        int bcdtmPrismoidal_calculateVolumeSurfaceToPlaneTinObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ *Poly,long IntersectFlag,VOLRANGETAB *RangeTable,long NumRanges,double Elevation,double *Cut,double *Fill,double *Balance,double *Area) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateVolumeSurfaceToPlaneTinObjectOld(DTM_TIN_OBJ *Tin,VOLRANGETAB *RangeTable,long NumRanges,double Elevation,double *Cut,double *Fill,double *Balance,double *Area) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_calculateVolumeSurfaceToSurfaceTinObjects(DTM_TIN_OBJ *tin1P,DTM_TIN_OBJ *tin2P,DTM_POLYGON_OBJ *polygonP,VOLRANGETAB *rangeTableP,long numRanges,double *cutVolumeP,double *fillVolumeP,double *balanceVolumeP,double *areaVolumeP) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_clipFromPolygonTinObject(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ **Tin2,WCharCP clipTinFileP,DPoint3d *ClipolyPtsP,long NoClipolyPtsP,long ClipFlag) ; 
//BENTLEYDTM_EXPORT        int bcdtmPrismoidal_clipFromPolygonTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DPoint3d *ClpolyPtsP,long NumClpolyPtsP,DTM_TIN_OBJ **Tin3) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_createSptrListOfInternalAndTptrPolygonPointsTinObject(DTM_TIN_OBJ *tinP,long startPnt,long *firstPntP ) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_fixPointHullTrianglePrecisionTinObject(DTM_TIN_OBJ *tinP,long trgPnt1,long trgPnt2,long trgPnt3,double pointX,double pointY,double *fixedXP,double *fixedYP,long *fixTypeP ) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_fixPointQuadrilateralPrecisionTinObject(DTM_TIN_OBJ *tinP,double insertAngle,long trgPnt1,long trgPnt2,long trgPnt3,long trgPnt4,double pointX,double pointY,double *fixedXP,double *fixedYP,long *fixTypeP ) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_getIntersectPointTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long indexPnt,long *dtmFeatureLineP,long *pnt1P,long *pnt2P,long *pnt3P,double *xP,double *yP) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_insertInternalTriangleIntoTinObject(DTM_TIN_OBJ *tinP,long drapeFlag,DPoint3d *trgPtsP,long numTrgPts,long *startPntP) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_insertLineBetweenPointsTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long lastPnt,long drapeFlag ) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_markInternalTptrPolygonPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_prismToFlatPlaneTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,double Elevation,double *Cut,double *Fill,double *Area) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_storePointInTinObject(DTM_TIN_OBJ *tinP,long drapeFlag,double x,double y,double z,long *pntNumP) ; 
//BENTLEYDTM_EXPORT        int bcdtmPrismoidal_surfaceBalanceTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,DPoint3d *PadPts,long NumPadPts,double *Area1,double *Area2,double *Balance ) ; 
//BENTLEYDTM_EXPORT        int bcdtmPrismoidal_surfaceToPlaneTinObject(DTM_TIN_OBJ *Tin,VOLRANGETAB *RangeTable,long NumRanges,DPoint3d *PadPts,long NumPadPts,double Elevation,double *Cut,double *Fill,double *Balance,double *Area) ; 
//BENTLEYDTM_EXPORT        int bcdtmPrismoidal_surfaceToSurfaceTinObjects(DTM_TIN_OBJ *Tin1,DTM_TIN_OBJ *Tin2,VOLRANGETAB *RangeTable,long NumRanges,DPoint3d *PadPts,long NumPadPts,double *Cut,double *Fill,double *Balance,double *Area ) ; 
//BENTLEYDTM_Private       int bcdtmPrismoidal_surfaceToSurfaceVolumeForTriangleTinObject(DTM_TIN_OBJ *tinP,long trgNum,VOLRANGETAB *volRangeTableP,long numRanges,DPoint3d *trgPtsP,long numTrgPts,double *cutVolumeP,double *fillVolumeP,double *areaVolumeP,double *voidAreaP) ; 
//BENTLEYDTM_Public        int bcdtmPrismoidal_unmarkInternalTptrPolygonPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long Mark,long *NumUnMarked ) ; 

////// bcdtmRead//////
BENTLEYDTM_EXPORT        int bcdtmRead_atFilePositionDataObject(DTM_DAT_OBJ **dataPP,FILE *fpDATA,long filePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_atFilePositionTinObject(DTM_TIN_OBJ **tinPP,FILE *tinFP,long filePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_atFilePositionTinObject_custom(DTM_TIN_OBJ **Tin,WCharCP fileNameP,double FilePosition) ; 
//BENTLEYDTM_Public        int bcdtmRead_cleanOldTinFileObject(DTM_TIN_OBJ *Tin) ; 
BENTLEYDTM_Public        int bcdtmRead_dataFileASCIIToDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile) ; 
BENTLEYDTM_Public        int bcdtmRead_dataFileBinaryToDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_dataFileToDataObject(DTM_DAT_OBJ *Data,WCharCP DataFileName) ; 
BENTLEYDTM_Public        int bcdtmRead_dataObjectFileVer400(DTM_DAT_OBJ *dataP,WCharCP dataFileName) ; 
BENTLEYDTM_Public        int bcdtmRead_dataObjectFileVer500(DTM_DAT_OBJ *dataP,WCharCP dataFileName) ; 
BENTLEYDTM_Public        int bcdtmRead_dataObjectFileVer501(DTM_DAT_OBJ *dataP,WCharCP dataFileName) ; 
BENTLEYDTM_Public        int bcdtmRead_dataObjectFileVer502(DTM_DAT_OBJ *dataP,WCharCP dataObjectFileName) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_fromFileDataObject(DTM_DAT_OBJ **dataPP,WCharCP dataObjectFileName) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_fromFileTinObject(DTM_TIN_OBJ **tinPP,WCharCP tinFileName) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer10(DTM_TIN_OBJ *Tin,WCharCP TinFileName) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer10CircularList(DTM_TIN_OBJ *Tin,FILE *fpTIN,long OfsLhp,long OfsClc) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer10Header(DTM_TIN_OBJ *Tin,FILE *fpTIN,long *OfsPnt,long *OfsLhp,long *OfsClc,long *OfsVoid) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer10Points(DTM_TIN_OBJ *Tin,FILE *fpTIN,long OfsPnt) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer10Voids(DTM_TIN_OBJ *Tin,FILE *fpTIN,long OfsVoid,long nullPnt) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer30(DTM_TIN_OBJ *Tin,WCharCP TinFileName) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer30CircularList(DTM_TIN_OBJ *Tin,FILE *fpTIN,long OfsLhp,long OfsClc) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer30Header(DTM_TIN_OBJ *Tin,FILE *fpTIN,long *Nvoid,long *OfsPnt,long *OfsLhp,long *OfsClc,long *OfsVoid) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer30Points(DTM_TIN_OBJ *Tin,FILE *fpTIN,long OfsPnt) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer30Voids(DTM_TIN_OBJ *Tin,FILE *fpTIN,long Nvoid,long OfsVoid) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer400(DTM_TIN_OBJ *Tin,WCharCP TinFileName) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer500(DTM_TIN_OBJ *tinP,WCharCP tinFileName) ; 
//BENTLEYDTM_Public        int bcdtmRead_tinFileVer501(DTM_TIN_OBJ *tinP,WCharCP tinFileName) ; 
BENTLEYDTM_Private       int bcdtmRead_xyzASCIIFileToTinObject(DTM_TIN_OBJ *tinP,WCharCP xyzFile) ; 
BENTLEYDTM_Private       int bcdtmRead_xyzBinaryFileToTinObject(DTM_TIN_OBJ *tinP,WCharCP xyzFile) ; 
BENTLEYDTM_EXPORT        int bcdtmRead_xyzFileToTinObject(DTM_TIN_OBJ **tinPP,WCharCP xyzFileName) ; 

////// bcdtmReadStream//////
BENTLEYDTM_EXPORT        int bcdtmReadStream_atFilePositionDataObject(DTM_DAT_OBJ **dataPP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long filePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmReadStream_atFilePositionTinObject(DTM_TIN_OBJ **tinPP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long filePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer3TinObject( DTM_TIN_OBJ *tinP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long filePosition) ;
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer400DataObject(DTM_DAT_OBJ *dataP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long FilePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer400TinObject(DTM_TIN_OBJ *Tin,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long FilePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer500DataObject(DTM_DAT_OBJ *dataP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long FilePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer500TinObject(DTM_TIN_OBJ *tinP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long FilePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer501DataObject(DTM_DAT_OBJ *dataP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long FilePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer501TinObject(DTM_TIN_OBJ *tinP, BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long filePosition) ; 
BENTLEYDTM_Public        int bcdtmReadStream_atFilePositionVer502DataObject(DTM_DAT_OBJ *dataP,BENTLEY_NAMESPACE_NAME::TerrainModel::IBcDtmStream* dtmStreamP,long filePosition) ; 

////// bcdtmReport//////
//BENTLEYDTM_Public        int bcdtmReport_countNoOfLinearFeaturesDataObject(DTM_DAT_OBJ *Data,long *NoFeatures,long Fs,long Fn ) ; 
//BENTLEYDTM_Public        int bcdtmReport_detectCrossingFeaturesDataObject(DTM_DAT_OBJ *Data,FILE *fpRPT,long LoadFlag) ; 
//BENTLEYDTM_Public        int bcdtmReport_errorsInLinearFeaturesDataObject(DTM_DAT_OBJ *Data,FILE *fpRPT,long Fs,long Fn ) ; 

////// bcdtmSContour//////
//BENTLEYDTM_Private       int bcdtmSContour_clipFromPolygonTinObject(DTM_TIN_OBJ *tin1P,DTM_TIN_OBJ **tin2PP,DPoint3d *clipPtsP,long numClipPts,long clipOption) ; 
//BENTLEYDTM_EXPORT        int bcdtmSContour_contoursFromTinObject( DTM_TIN_OBJ *tinP, double conInterval, double conReg, double conMinZ, double conMaxZ, long numConValues, double *conValuesP, DPoint3d *fencePtsP, long numFencePts ) ; 
//BENTLEYDTM_Private       int bcdtmSContour_contoursTinObject(DTM_TIN_OBJ *tinP,double cv,double conInterval,unsigned char *markLinesP ,long voidFlag,long contourFlag,long smoothOption,double smoothFactor,long filterOption,double filterTolerance,long smoothDensity,DTMContourIndex* contourIndexP,long numContourIndex,long *contourStartLineP ) ; 
//BENTLEYDTM_Private       int bcdtmSContour_extractedContourTinObject(DTM_TIN_OBJ *tinP,long dtmContourFeature,double conInterval,long smoothOption,double smoothFactor,long filterOption,double filterTolerance,long smoothDensity,unsigned char *markLinesP) ; 
//BENTLEYDTM_Private       int bcdtmSContour_pullSmoothPointsBackWithinContourInterval( double x[], double y[], long weightP[], long numSplinePts, DTM_TIN_OBJ *tinP, double conInterval, long smoothDensity, double contourValue, DPoint3d *conPtsP, long numConPts) ; 
//BENTLEYDTM_Private       int bcdtmSContour_smoothContour(DPoint3d **conPtsPP,long *numConPtsP,long **weightPP,DTM_TIN_OBJ *tinP,double conInterval,long smoothOption,double smoothFactor,long smoothDensity,long filterOption,double filterTolerance) ; 
//BENTLEYDTM_Private       int bcdtmSContour_splineSmoothContour(DPoint3d **conPtsPP,long *numConPtsP,long **conWghtPP,DTM_TIN_OBJ *tinP,double conInterval,double smoothFactor,long smoothDensity) ; 
//BENTLEYDTM_Private       int bcdtmSContour_traceContoursTinObject(DTM_TIN_OBJ *tinP,double cv,double conInterval,long smoothFlag,double smoothFactor,long filterOption,double filterTolerance,long density,long p1,long p2,DTMDirection direction,long test,unsigned char *markLinesP) ; 
//BENTLEYDTM_Private       int bcdtmSContour_traceZeroSlopeContourTinObject(DTM_TIN_OBJ *tinP,long p1,long p2,long dir,double contourDirection,double cv,double conInterval,long smoothOption,double smoothFactor,long filterOption,double filterTolerance,long smoothDensity,unsigned char *markLinesP ) ; 

////// bcdtmSideSlope//////
//BENTLEYDTM_Private       int bcdtmSideSlope_copyParallelSideSlopeElement( DTM_SIDE_SLOPE_TABLEXM *sideSlopeTableP, long sideSlopeTableSize, long sideSlopeDirection, long cornerOption, double cornerStrokeTolerance, DTM_DAT_OBJ* **dataObjectsPPP, long *numberOfDataObjectsP ) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_countNumberOfDtmFeaturesAtPointTinObject(DTM_TIN_OBJ *Tin,long P,long *Count) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_countNumberOfDtmFeatureTypeForTinPointTinObject(DTM_TIN_OBJ *Tin,long TinPoint,long DtmFeatureType,long *NumberOfFeatures) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_createSideSlopesForActiveRadials(DTM_SIDE_SLOPE_TABLEXM *SideSlopeTable,long SideSlopeTableSize,long SideSlopeDirection,DTM_SLOPE_TABLE *SlopeTable,long SlopeTableSize,long CornerOption,long StrokeCorners,double CornerStrokeTolerance,double Pptol,DPoint3d *ParallelEdgePts,long NumParallelEdgePts,DTMUserTag UserRadialTag,DTMUserTag UserElementTag,DTM_DAT_OBJ* **DataObjects,long *NumberOfDataObjects) ; 
//BENTLEYDTM_EXPORT        int bcdtmSideSlope_createSideSlopesForSideSlopeTableTinObject( DTM_SIDE_SLOPE_TABLEXM **SideSlopeTable, long *SideSlopeTableSize, long SideSlopeDirection, DTM_SLOPE_TABLE *SlopeTable, long SlopeTableSize, long CornerOption, long StrokeCorners, double CornerStrokeTolerance, double Pptol, DPoint3d *ParallelEdgePts, long NumParallelEdgePts, DTMUserTag UserRadialTag, DTMUserTag UserElementTag, DTM_DAT_OBJ* **DataObjects, long *NumberOfDataObjects ) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_detectAndFixBreaksInSlopeToes(DTM_TIN_OBJ *tinP) ;
//BENTLEYDTM_Public        int bcdtmSideSlope_extractBenchesFromSlopeToesAndStoreInSeparateDataObjects(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *SideSlopes,DTM_DAT_OBJ* **DataObjects,long *NumberOfDataObjects) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_getBoundaryPolygonAndSlopeToesForClosedSideSlopeElementDataObject( DTM_DAT_OBJ *sideSlopesP, long sideSlopeElementType, long sideSlopeDirection, DTM_OVERLAP_RADIAL_TABLE *rightRadialsP, long numRightRadials, DTM_OVERLAP_RADIAL_TABLE *leftRadialsP, long numLeftRadials ) ;
//BENTLEYDTM_Private       int bcdtmSideSlope_getBoundaryPolygonAndSlopeToesForOpenSideSlopeElementDataObject( DTM_DAT_OBJ *sideSlopesP, long sideSlopeElementType, long sideSlopeDirection, DTM_OVERLAP_RADIAL_TABLE *rightRadialsP, long numRightRadials, DTM_OVERLAP_RADIAL_TABLE *leftRadialsP, long numLeftRadials) ;
//BENTLEYDTM_Private       int bcdtmSideSlope_getExternalSlopeToesForClosedSideSlopeElementDataObject( DTM_DAT_OBJ *sideSlopesP, long sideSlopeElementType, long sideSlopeDirection, DTM_OVERLAP_RADIAL_TABLE *rightRadialsP, long numRightRadials, DTM_OVERLAP_RADIAL_TABLE *leftRadialsP, long numLeftRadials) ;
//BENTLEYDTM_Private       int bcdtmSideSlope_getInternalSlopeToesForClosedSideSlopeElementDataObject( DTM_DAT_OBJ *sideSlopesP, long sideSlopeElementType, long sideSlopeDirection, DTM_OVERLAP_RADIAL_TABLE *leftRadialsP, long numLeftRadials ) ;
//BENTLEYDTM_Public        int bcdtmSideSlope_getNextInterceptTinObject(DTM_TIN_OBJ *Tin,double Px,double Py,long *Ptype,double Ex,double Ey,long *P1,long *P2,long *P3,double *Nx,double *Ny, double *Nz ) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_getPolygonFromOpenSideSlopeElementToes(long sideSlopeDirection,DTM_OVERLAP_RADIAL_TABLE *rightRadialsP,long numRightRadials,DTM_OVERLAP_RADIAL_TABLE *leftRadialsP,long numLeftRadials,DPoint3d **hullPtsPP,long *numHullPtsP,DTM_TIN_OBJ **tinPP) ;
//BENTLEYDTM_EXPORT        int bcdtmSideSlope_intersectSurfaceTinObject(DTM_TIN_OBJ *Tin,double Sx,double Sy,double Sz,double Angle,double Slope,long SideSlopeFlag,double EndValue,double *Lx, double *Ly,double *Lz,long *StartFlag,long *EndFlag) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_projectVectorStartToHullTinObject(DTM_TIN_OBJ *tinP,double Sx,double Sy,double Sz,double xyAngle,double slope,double *Hx, double *Hy,double *Hz) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_removeBreakLineSegmentAtTinPointTinObject(DTM_TIN_OBJ *Tin,long P) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_removeBreakLineSegmentTinObject(DTM_TIN_OBJ *tinP,long pnt1,long pnt2) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_removeDanglingBreaksTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_removeLimitDanglingBreaksTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_resolveOverlappingSideSlopeRadials(DTM_SIDE_SLOPE_TABLEXM *RightSideSlopeTable,long RightSideSlopeTableSize,DTM_SIDE_SLOPE_TABLEXM *LeftSideSlopeTable,long LeftSideSlopeTableSize,DPoint3d *ParallelEdgePts,long NumParallelEdgePts,long SideDirection,double CornerTolerance,double RadialExtension,DTMUserTag RadialTag,DTMUserTag ElementTag,double Pptol,double Pltol,DTM_DAT_OBJ *SideSlopes) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeClosedSideSlopeElementBoundaryPolygonToDataObject(DTM_OVERLAP_RADIAL_TABLE *RghtRadials,long NumRghtRadials,DTM_OVERLAP_RADIAL_TABLE *LeftRadials,long NumLeftRadials,long SideDirection,DTM_DAT_OBJ *SideSlopes,double Pptol,double Pltol) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeInternalPadHolesToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data,long HoleDirection) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeLimitInternalPadHolesToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data,long HoleDirection) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeLimitSlopeToesToDataObject(long sideSlopeType,DTM_DAT_OBJ *dataP,DTM_OVERLAP_RADIAL_TABLE *ovlPtsP,long numOvlPts) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeOpenSideSlopeElementBoundaryPolygonToDataObject(DTM_OVERLAP_RADIAL_TABLE *RghtRadials,long NumRghtRadials,DTM_OVERLAP_RADIAL_TABLE *LeftRadials,long NumLeftRadials,long SideDirection,DTM_DAT_OBJ *SideSlopes,double Pptol,double Pltol) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeOpenSideSlopeElementNoneTruncatedSlopeToesToDataObject( DTM_DAT_OBJ *sideSlopesP, long sideSlopeDirection, DTM_OVERLAP_RADIAL_TABLE *rightRadialsP, long numRightRadials, DTM_OVERLAP_RADIAL_TABLE *leftRadialsP, long numLeftRadials) ;
//BENTLEYDTM_Public        int bcdtmSideSlope_writePadSideSlopeHolesToDataObject(DTM_OVERLAP_RADIAL_TABLE *LeftRadials,long NumLeftRadials,DTM_DAT_OBJ *SideSlopes,double Pptol,double Pltol) ; 
//BENTLEYDTM_Public        int bcdtmSideSlope_writeSideSlopeRadialsToDataObject(long SideSlopeElementType,long SideDirection,DTM_OVERLAP_RADIAL_TABLE *RghtRadials,long NumRghtRadials,DTM_OVERLAP_RADIAL_TABLE *LeftRadials,long NumLeftRadials,DTMUserTag UserRadialTag,DTMUserTag UserElementTag,DTM_DAT_OBJ *SideSlopes) ; 
//BENTLEYDTM_Private       int bcdtmSideSlope_writeSlopeToesToDataObject(long sideSlopeElementType,DTM_DAT_OBJ *Data,DTM_OVERLAP_RADIAL_TABLE *OvlPts,long NumOvlPts) ; 

////// bcdtmSite//////
//BENTLEYDTM_EXPORT        int bcdtmSite_calculateRangeAnglesForOrthogonalToTinObject( DTM_TIN_OBJ *tinP, double lastX, double lastY, double pntX, double pntY, long tinPnt1, long tinPnt2, double *rangeStartAngleP, double *rangeEndAngleP) ; 
//BENTLEYDTM_Private       int bcdtmSite_checkForValidOrthogonalProjectionTinObject( DTM_TIN_OBJ *tinP, long startPnt1, long startPnt2, double startX, double startY, long testPnt1, long testPnt2, double testX, double testY, long *validProjectionP) ; 
//BENTLEYDTM_Private       int bcdtmSite_checkForValidOrthogonalToDrapeLineTinObject(DTM_TIN_OBJ *tinP,long lastPnt1,long lastPnt2,double lastX,double lastY,long testPnt1,long testPnt2,double testX,double testY,long *validDrapeLineP) ; 
//BENTLEYDTM_Private       int bcdtmSite_checkIfDrapeLineIntersectsTinHullTinObject( DTM_TIN_OBJ *tinP, long sBrkPnt1, long sBrkPnt2, double startX, double startY, double endX, double endY, long *intersectHullP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_cleanBreakTopologyDataObject(DTM_DAT_OBJ *dataP,double snapTolerance,DTM_FEATURE_XM **featurePP,long *numFeatureP) ; 
//BENTLEYDTM_Public        int bcdtmSite_cleanTptrListTinObject(DTM_TIN_OBJ *Tin,long Spnt) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_connectLineStringsDataObject ( DTM_DAT_OBJ *dataObjectP, long *resultsFlag, long *closeFlag ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_createDisplayTinObject(DTM_TIN_OBJ *Tin,DTM_TIN_OBJ **DisplayTin,DTM_DAT_OBJ *Data,long DisplayTinType) ; 
//BENTLEYDTM_Private       int bcdtmSite_createStringSlopesDataObject( DTM_DAT_OBJ **data1PP, DTM_DAT_OBJ **data2PP, DPoint3d *string1PtsP, long numString1Pts, double *string1SlopesP, DPoint3d *string2PtsP, long numString2Pts, double *string2SlopesP ) ; 
//BENTLEYDTM_Private       int bcdtmSite_drapeAngleScanForOrthogonalBreakLineIntersectionTinObject( DTM_TIN_OBJ *tinP, double startX, double startY, double rangeAngleStart, double rangeAngleEnd, double deviationAngle, long sBrkPnt1, long sBrkPnt2, long *brkFndP, long *brkTypeP, long *brkPnt1P, long *brkPnt2P, double *brkPntXP, double *brkPntYP, double *brkPntZP, double *brkDistanceP) ; 
//BENTLEYDTM_Private       int bcdtmSite_drapeProjectAtAngleToNextBreakLineTinObject( DTM_TIN_OBJ *tinP, double startX, double startY, double projectAngle, double deviationAngle, long sBrkPnt1, long sBrkPnt2, long *brkFndP, long *brkTypeP, long *brkPnt1P, long *brkPnt2P, double *brkPntXP, double *brkPntYP, double *brkPntZP, double *brkDistanceP) ; 
//BENTLEYDTM_Private       int bcdtmSite_findClosestBreakLineEndPointWithinDeviationAngleTinObject( DTM_TIN_OBJ *tinP, double startX, double startY, double projectAngle, double deviationAngle, long sBrkPnt1, long sBrkPnt2, long *brkFndP, long *brkTypeP, long *brkPnt1P, long *brkPnt2P, double *brkPntXP, double *brkPntYP, double *brkPntZP, double *brkDistanceP) ; 
//BENTLEYDTM_Private       int bcdtmSite_findClosestBreakLineIntersectionForProjectAngleTinObject( DTM_TIN_OBJ *tinP, double startX, double startY, double projectAngle, double deviationAngle, long sBrkPnt1, long sBrkPnt2, long *brkFndP, long *brkTypeP, long *brkPnt1P, long *brkPnt2P, double *brkPntXP, double *brkPntYP, double *brkPntZP, double *brkDistanceP) ; 
//BENTLEYDTM_Private       int bcdtmSite_findClosestBreakLineIntersectionTinObject(DTM_TIN_OBJ *tinP,double startX,double startY,double endX,double endY,long startPnt,long endPnt,long *findTypeP,long *dtmFeatureP,long *brkPnt1P,long *brkPnt2P,double *brkPntXP,double *brkPntYP,double *brkPntZP,double *brkDistanceP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_findClosestOrthogonalBreakLineForUserTagsTinObject(DTM_TIN_OBJ *tinP,double pointX,double pointY,DTMUserTag *userTagsP,long numUserTags,long *findTypeP,long *brkPnt1P,long *brkPnt2P,double *brkPntXP,double *brkPntYP,double *brkPntZP,double *brkDistanceP,DTMTinPointFeatures_XM **brkFeaturesPP,long *numBrkFeaturesP) ;
//BENTLEYDTM_Private       int bcdtmSite_findClosestOrthogonalBreakLineIntersectionTinObject( DTM_TIN_OBJ *tinP, double startX, double startY, double rangeAngleStart, double rangeAngleEnd, double deviationAngle, long sBrkPnt1, long sBrkPnt2, long *brkFndP, long *brkTypeP, long *brkPnt1P, long *brkPnt2P, double *brkPntXP, double *brkPntYP, double *brkPntZP, double *brkDistanceP) ; 
//BENTLEYDTM_Public        int bcdtmSite_findClosestOrthogonalBreakLineTinObject(DTM_TIN_OBJ *tinP,double pointX,double pointY,long scanOption,long *findTypeP,long *brkPnt1P,long *brkPnt2P,double *brkPntXP,double *brkPntYP,double *brkPntZP,double *brkDistanceP) ; 
//BENTLEYDTM_Public        int bcdtmSite_findClosestOrthogonalBreakLineWithPositiveUserTagTinObject(DTM_TIN_OBJ *tinP,double pointX,double pointY,long *findTypeP,long *brkPnt1P,long *brkPnt2P,double *brkPntXP,double *brkPntYP,double *brkPntZP,double *brkDistanceP) ;
//BENTLEYDTM_Private       int bcdtmSite_findNextClosestOrthogonalBreakLineTinObject(DTM_TIN_OBJ *tinP,unsigned char *linesP,long brkPnt1,long brkPnt2,double brkPntX,double brkPntY,long checkReflection,double lastBrkPntX,double lastBrkPntY,long *findTypeP,long *dtmFeatureP,long *nextBrkPnt1P,long *nextBrkPnt2P,double *nextBrkPntXP,double *nextBrkPntYP,double *nextBrkPntZP,double *brkDistanceP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_getHullSurroundingBreakLinesDataObject( DTM_DAT_OBJ *dataP, DPoint3d **hullPtsPP, long *numHullPtsP ) ; 
//BENTLEYDTM_Public        int bcdtmSite_internalStringIntoTinObject(DTM_TIN_OBJ *Tin,long DrapeFlag,DPoint3d *StringPts,long NumStringPts,long *Spnt,long *KnotDetected) ; 
//BENTLEYDTM_Public        int bcdtmSite_lineBetweenPointsTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long DrapeFlag,long *KnotPoint ) ; 
//BENTLEYDTM_Private      int bcdtmSite_markInternalFeatureLinesTinObject(DTM_TIN_OBJ *tinP,unsigned char **featureLinePP) ;
//BENTLEYDTM_Public        int bcdtmSite_markInternalTptrPolygonPointsAsIslandPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmSite_markInternalTptrPolygonPointsAsVoidPointsTinObject(DTM_TIN_OBJ *Tin,long Spnt,long *NumMarked ) ; 
//BENTLEYDTM_Public        int bcdtmSite_markPointsInternalToIslandTinObject(DTM_TIN_OBJ *Tin,long IslandFeature ) ; 
//BENTLEYDTM_Public        int bcdtmSite_markPointsInternalToVoidTinObject(DTM_TIN_OBJ *Tin,long VoidFeature ) ; 
//BENTLEYDTM_Private       int bcdtmSite_modifyTinHullToBreakLinesTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_projectAtAngleFromPointToBreakLineTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, long brkPnt1, long brkPnt2, double projectAngle, double deviationAngle, long *breakFoundP, long *breakTypeP, double *xBreakP, double *yBreakP, double *zBreakP, double *dBreakP, long *tinPnt1P, long *tinPnt2P, DTMTinPointFeatures_XM **breakFeaturesPP, long *numBreakFeaturesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_projectOrthogonalToBreakLineFromPointTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, long brkPnt1, long brkPnt2, double rangeAngleStart, double rangeAngleEnd, double deviationAngle, long *breakFoundP, long *breakTypeP, double *xBreakP, double *yBreakP, double *zBreakP, double *dBreakP, long *tinPnt1P, long *tinPnt2P, DTMTinPointFeatures_XM **breakFeaturesPP, long *numBreakFeaturesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_removeAllOccurrencesOfDtmFeatureTypeFromDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode) ; 
//BENTLEYDTM_Public        int bcdtmSite_resolveVoidsDataObject(DTM_DAT_OBJ *voidsP) ;
//BENTLEYDTM_Public        int bcdtmSite_resolveVoidsWithinIslandsDataObject(DTM_DAT_OBJ *Data,long Lndp,DTM_DAT_OBJ *Voids) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_snapToClosestBreakLine( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, long *snapFoundP, long *snapTypeP, double *xSnapP, double *ySnapP, double *zSnapP, double *dSnapP, long *tinPnt1P, long *tinPnt2P, DTMTinPointFeatures_XM **snapFeaturesPP, long *numSnapFeaturesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_snapToClosestBreakLineWithPositiveUserTagTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, long *snapFoundP, long *snapTypeP, double *xSnapP, double *ySnapP, double *zSnapP, double *dSnapP, long *tinPnt1P, long *tinPnt2P, DTMTinPointFeatures_XM **snapFeaturesPP, long *numSnapFeaturesP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_snapToThenOrthogonalFromBreakLineTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, DTM_POINT_ARRAY ***drapeArraysPPP, long *numDrapeArraysP ) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_snapToThenOrthogonalToBreakLineTinObject( DTM_TIN_OBJ *tinP, double xPnt, double yPnt, DTM_POINT_ARRAY ***drapeArraysPPP, long *numDrapeArraysP ) ; 
//BENTLEYDTM_Private       int bcdtmSite_storeIntersectLines(DTMFeatureType dtmFeatureType,DTMUserTag userTag,DTM_GUID userFeatureId,DPoint3d *contourPtsP,long numContourPts,void *userP) ; 
//BENTLEYDTM_Private       int bcdtmSite_testForAnAngleProjectionExternalToTinHull( DTM_TIN_OBJ *tinP, long tinPnt1, long tinPnt2, double projectAngle, long *internalFlagP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_testForDtmFeaturesInternalToTinHullTinObject( DTM_TIN_OBJ *tinObjectP, long *isInternalFeatures ) ; 
//BENTLEYDTM_Private       int bcdtmSite_testForOrthogonalToProjectionExternalToTinHull( DTM_TIN_OBJ *tinP, long tinPnt1, long tinPnt2, double rangeAngleStart, double rangeAngleEnd, long *internalFlagP) ; 
//BENTLEYDTM_EXPORT        int bcdtmSite_writeAllDtmFeatureTypeToDtmFeatureArrayTinObject(DTM_TIN_OBJ *tinP,DTMFeatureType dtmFeatureType,DTM_FEATURE_XM **featurePP,long *numFeatureP) ; 

////// bcdtmSlope//////
//BENTLEYDTM_EXPORT        int bcdtmSlope_calculateSlopeAreaTinObject( DTM_TIN_OBJ *tin1P, DPoint3d *slopePtsP, long numSlopePts, long loadOption, double *flatAreaP , double *slopeAreaP ) ; 

////// bcdtmSort//////
//BENTLEYDTM_Public        int bcdtmSort_checkSortOrderDataObject(DTM_DAT_OBJ *dataObjP,long sortAxis) ; 
//BENTLEYDTM_Public        int bcdtmSort_checkSortOrderTinObject(DTM_TIN_OBJ *tinObjP,long startPnt,long numPnts,long sortAxis) ; 
//BENTLEYDTM_Public       void bcdtmSort_clustersTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private      void bcdtmSort_sortMergePointsTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long numPnts,long sortAxis) ; 
//BENTLEYDTM_Public        int bcdtmSort_sortPointsTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long numPnts,long sortAxis) ; 

////// bcdtmSortDouble//////
//BENTLEYDTM_Public       void bcdtmSortDouble_clustersTinObject(DTM_TIN_OBJ *tinP) ; 

////// bcdtmSortPointer//////
//BENTLEYDTM_Public        int bcdtmSortPointer_clustersTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private      void bcdtmSortPointer_medianDataObject(DTM_DAT_OBJ *dataP,long firstPnt,long numPts,long median,long axis,long *sortP) ; 
//BENTLEYDTM_Private      void bcdtmSortPointer_medianTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long numPts,long median,long axis,long *sortP) ; 
//BENTLEYDTM_Private      void bcdtmSortPointer_mergeSortClustersDataObject(DTM_DAT_OBJ *dataP,long firstPnt,long numPts,int axis,long *sortP) ; 
//BENTLEYDTM_Private      void bcdtmSortPointer_mergeSortClustersTinObject(DTM_TIN_OBJ *tinP,long firstPnt,long numPts,int axis,long *sortP) ; 
//BENTLEYDTM_Private       int bcdtmSortPointer_mergeSortTinObject(DTM_TIN_OBJ *tinP,long startPt,long numPts,long *sortP, long *tempP ) ; 
//BENTLEYDTM_Public        int bcdtmSortPointer_pointsTinObject(DTM_TIN_OBJ *tinP) ; 

////// bcdtmString//////
BENTLEYDTM_Public        int bcdtmString_extractDtmFeatureTypeStringsFromDataObject( DTM_DAT_OBJ *dataP, DTMFeatureType dtmFeatureType, DTM_POINT_ARRAY ***featureArrayPPP, long *numFeatureArrayP ) ; 

////// bcdtmTheme//////
//BENTLEYDTM_Public        int bcdtmTheme_getTinLineOffset(DTM_TIN_OBJ *Tin,long *Offset,long P1,long P2 ) ; 
//BENTLEYDTM_EXPORT        int bcdtmTheme_loadFromTinObject(DTM_TIN_OBJ *Tin,long PolyFlag,long ThemeFlag,DRange1d *ThemeTable,long NumThemes,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmTheme_loadPolygonsFromTinObject(DTM_TIN_OBJ *Tin,long ThemeFlag,DRange1d *ThemeTable,long NumThemes,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmTheme_loadTriangleAttributesTinObject(DTM_TIN_OBJ *Tin,double Xmin,double Ymin,double Xmax,double Ymax) ; 
//BENTLEYDTM_EXPORT        int bcdtmTheme_loadTrianglesFromTinObject(DTM_TIN_OBJ *Tin,long ThemeFlag,DRange1d *ThemeTable,long NumThemes,double Xmin,double Ymin,double Xmax,double Ymax) ; 

////// bcdtmTin//////
//BENTLEYDTM_Public        int bcdtmTin_addLinearFeatureToTinObject(DTM_TIN_OBJ *Tin,long DtmFeature,DTMUserTag UserTag,DTM_GUID userFeatureId,long Spnt,long ClearListFlag) ; 
//BENTLEYDTM_Private       int bcdtmTin_assignDirectionToBoundaryLinesFromHullPointTinObject(DTM_TIN_OBJ *tinP,long numTinFeatures,long *numAssignedP) ; 
//BENTLEYDTM_Private       int bcdtmTin_assignDirectionToBoundaryLinesFromTwoHullPointsTinObject(DTM_TIN_OBJ *tinP,long numTinFeatures,long *numAssignedP) ; 
//BENTLEYDTM_Private      long bcdtmTin_bottomMostPointTinObject(DTM_TIN_OBJ *tinP,long P1,long P2) ; 
//BENTLEYDTM_Private    double bcdtmTin_circleRadiusTinObject(DTM_TIN_OBJ *tinP,long Pa,long Pb,long Pc,long axis) ; 
//BENTLEYDTM_Private       int bcdtmTin_circleTestTinObject(DTM_TIN_OBJ *Tin,long P1,long P2,long P3,long P4) ; 
//BENTLEYDTM_Public        int bcdtmTin_clipDtmFeaturesToVoidsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmTin_clipHullToBoundaryLinesTinObject(DTM_TIN_OBJ *tinP, long numTinFeatures) ; 
//BENTLEYDTM_Private       int bcdtmTin_clipTinToBoundaryLinesTinObject(DTM_TIN_OBJ *tinP,double maxSide) ; 
//BENTLEYDTM_Public        int bcdtmTin_clipTinToBoundaryPolygonTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_clusterDelaunayTriangulateTinObject(DTM_TIN_OBJ *Tin,long iofs,long ns,long axis,long *lpnt,long *rpnt,long *bpnt,long *tpnt,long *icol) ; 
//BENTLEYDTM_Private       int bcdtmTin_clusterGetLcTangentTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long p2l,long p2r,long colinear1, long colinear2, long *left,long *right) ; 
//BENTLEYDTM_Private       int bcdtmTin_clusterGetUcTangentTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long p2l,long p2r,long col1, long col2, long *l,long *r) ; 
//BENTLEYDTM_Private       int bcdtmTin_clusterInCircleTestTinObject(DTM_TIN_OBJ *Tin,long maxMinTest,long P1,long P2,long P3,long P4) ; 
//BENTLEYDTM_Private       int bcdtmTin_clusterMergeTrianglesTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long colinear1,long p2l,long p2r,long colinear2,long axis,long *colinearP) ; 
//BENTLEYDTM_Private      void bcdtmTin_clusterSortTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_clusterTriangulateTinObject(DTM_TIN_OBJ *tinP,long *colinearPtsP ) ; 
//BENTLEYDTM_Public        int bcdtmTin_compactCircularListTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_compactDataTableTinObject(DTM_TIN_OBJ *tinP) ; 
BENTLEYDTM_Public        int bcdtmTin_compactFeatureListTinObject(DTM_TIN_OBJ *Tin) ; 
BENTLEYDTM_Public        int bcdtmTin_compactFeatureTableTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_delaunayTriangulateTinObject(DTM_TIN_OBJ *Tin,long ns,long iofs,long *lpnt,long *rpnt,long *icol) ; 
//BENTLEYDTM_Public        int bcdtmTin_determineDirectionAndEliminateExternalTrianglesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmTin_getLcTangentTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long p2l,long p2r,long col1, long col2, long *l,long *r) ; 
//BENTLEYDTM_Public        int bcdtmTin_getSwfeatureCodePiangleTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,long *P1,long *P2,long *P3) ; 
//BENTLEYDTM_Private       int bcdtmTin_getUcTangentTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long p2l,long p2r,long col1, long col2, long *l,long *r) ; 
//BENTLEYDTM_Private       int bcdtmTin_inCircleTestTinObject(DTM_TIN_OBJ *Tin,long maxMinTest,long P1,long P2,long P3,long P4) ; 
//BENTLEYDTM_Private       int bcdtmTin_insertBoundaryLinesTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data) ; 
//BENTLEYDTM_Public        int bcdtmTin_insertDrapeVoidIntoTinObject(DTM_TIN_OBJ *Tin,DTMUserTag UserTag,DTM_GUID userFeatureId,DPoint3d *VoidPts,long NumVoidPts) ; 
//BENTLEYDTM_Private      long bcdtmTin_leftMostPointTinObject(DTM_TIN_OBJ *tinP,long P1,long P2) ; 
BENTLEYDTM_EXPORT        int bcdtmTin_markInternalVoidPointsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_maxMinTestTinObject(DTM_TIN_OBJ *Tin,long p1,long p2,long p3,long p4) ; 
//BENTLEYDTM_Private       int bcdtmTin_mergeTrianglesTinObject(DTM_TIN_OBJ *Tin,long p1l,long p1r,long p2l,long p2r,long icol1,long icol2,long *icol) ; 
//BENTLEYDTM_Public        int bcdtmTin_precisionRemoveEdgeSliversTinObject(DTM_TIN_OBJ *Tin,long MessageFlag,double Pltol) ; 
//BENTLEYDTM_Private       int bcdtmTin_processBreakLinesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_processBreakVoidsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_processConnectedLinesTinObject(DTM_TIN_OBJ *Tin,long GraphicBreak,long Contour,long Break) ; 
//BENTLEYDTM_Private       int bcdtmTin_processContourLinesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_processDrapeVoidsTinObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *DrapeVoid) ; 
//BENTLEYDTM_Public        int bcdtmTin_processHolesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_processIslandsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_processPolygonsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmTin_processSpotGroupsTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_processVoidsTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Public        int bcdtmTin_qsortTinObject(DTM_TIN_OBJ *Tin,long ns, long iofs, long *Isp, long *Ist ) ; 
//BENTLEYDTM_Private       int bcdtmTin_reconstructSortOrderTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Public        int bcdtmTin_removeExternalMaxSideTrianglesTinObject(DTM_TIN_OBJ *Tin,double MaxSide) ; 
//BENTLEYDTM_Public        int bcdtmTin_removeExternalSliverTrianglesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmTin_removeHullLinesWithBoundaryVextexTinObject(DTM_TIN_OBJ *tinP,long numTinFeatures,long *numRemovedP) ; 
//BENTLEYDTM_EXPORT        int bcdtmTin_removeNoneFeatureHullLinesTinObject(DTM_TIN_OBJ *Tin) ; 
//BENTLEYDTM_Private       int bcdtmTin_removeSliversPriorToBoundaryLineClipTinObject(DTM_TIN_OBJ *Tin,long *NumRemoved) ; 
//BENTLEYDTM_Private       int bcdtmTin_removeTrianglesExternalToBoundaryLineTinObject(DTM_TIN_OBJ *tinP,long dtmFeature,long *numRemovedP) ; 
//BENTLEYDTM_Public        int bcdtmTin_resortTinStructureTinObject(DTM_TIN_OBJ *tinP) ; 
//BENTLEYDTM_Private       int bcdtmTin_retriangualteAlongBreakLinesTinObject(DTM_TIN_OBJ *Tin) ;
//BENTLEYDTM_Private       int bcdtmTin_retriangualteAlongBreakLineTinObject(DTM_TIN_OBJ *Tin,long Spnt) ;
//BENTLEYDTM_Private      long bcdtmTin_rightMostPointTinObject(DTM_TIN_OBJ *tinP,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmTin_setConvexHullTinObject(DTM_TIN_OBJ *Tin,long p1,long p2) ; 
//BENTLEYDTM_Public        int bcdtmTin_swapTinLinesThatIntersectConnectedLinesTinObject(DTM_TIN_OBJ *Tin,long Fp,long Lp,unsigned char *lineFlagP,long *lineConnected) ; 
//BENTLEYDTM_Public        int bcdtmTin_testIfHullLineCanBeRemoved(DTM_TIN_OBJ *Tin,long Feature,long Sp,long Np,long *RemoveFlag) ; 
//BENTLEYDTM_Private      long bcdtmTin_topMostPointTinObject(DTM_TIN_OBJ *tinP,long P1,long P2) ; 
//BENTLEYDTM_Public        int bcdtmTin_triangulateDemTinObject(DTM_TIN_OBJ *Tin,long Nrows,long Ncols,double NullVal ) ; 
//BENTLEYDTM_Public        int bcdtmTin_triangulateGridTinObject(DTM_TIN_OBJ *Tin,long Nrows,long Ncols,double NullVal ) ; 
//BENTLEYDTM_Public        int bcdtmTin_triangulateTinObject(DTM_TIN_OBJ *Tin,long DtmFeature[100],DTM_DAT_OBJ *DrapeVoid,long EdgeFlag,double MaxSide) ; 

////// bcdtmUtility//////
BENTLEYDTM_EXPORT         int bcdtmUtility_setCurrentDataObject(DTM_DAT_OBJ *dtmP,WCharCP dtmFileP) ;
BENTLEYDTM_EXPORT         int bcdtmUtility_setCurrentTinObject(DTM_TIN_OBJ *dtmP,WCharCP dtmFileP) ;
BENTLEYDTM_Public        int bcdtmUtility_setNullValuesForBackwardsCompatibilityTinObject(DTM_TIN_OBJ *tinP) ;
BENTLEYDTM_Public        int bcdtmUtility_setNullValuesForForwardsCompatibilityTinObject(DTM_TIN_OBJ *tinP) ;

////// bcdtmUtl//////
//BENTLEYDTM_Public        int bcdtmUtl_copy3DFeatureToDataObject(DTM_DAT_OBJ *Data,long Fscode,long Fncode,long Ftag,DPoint3d *Points,long NumPoints) ; 
//BENTLEYDTM_Public        int bcdtmUtl_copy3DToDataObject(DTM_DAT_OBJ *Data,long DtmFeatureType,DTMUserTag UserTag,DPoint3d *Points3D,long NumPoints) ; 
//BENTLEYDTM_Public        int bcdtmUtl_copyTinDtmFeatureToPolygonObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ *Poly,long DtmFeature,DTMUserTag UserTag) ; 
//BENTLEYDTM_Public        int bcdtmUtl_copyTinDtmFeatureTypeToPolygonObject(DTM_TIN_OBJ *Tin,DTM_POLYGON_OBJ *Poly,long DtmFeatureType,DTMUserTag UserTag) ; 
//BENTLEYDTM_Public        int bcdtmUtl_copyTinFeatureToDataObject(DTM_TIN_OBJ *tinP,DTM_DAT_OBJ *dataP,long dtmFeature) ; 
//BENTLEYDTM_Public        int bcdtmUtl_copyTptrListToDataObject(DTM_TIN_OBJ *Tin,DTM_DAT_OBJ *Data,long Spnt,long DtmFeatureType,DTMUserTag UserTag) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_getCurrentDataObject(DTM_DAT_OBJ **dataPP,WCharCP dataFileP);
//BENTLEYDTM_EXPORT        int bcdtmUtl_getCurrentTinObject(DTM_TIN_OBJ **Tin,WCharCP TinFile) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_getDataRangesTinObject(DTM_TIN_OBJ *Tin,double *Xmin,double *Ymin,double *Zmin,double *Xmax,double *Ymax,double *Zmax,double *Xdif,double *Ydif,double *Zdif) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_getStatisticsTinObject(DTM_TIN_OBJ *Tin,long *Ndp,long *Nl,long *Nt,long *Clnp,long *Nfeat,long *Nlist,long *Nbrk,long *Ncln,long *Nvoid,long *Nisl,long *Nhol,long *numSpot,long *Msize) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_getTinPointCoordinatesTinObject(DTM_TIN_OBJ *tinP, long tinPoint,DPoint3d *pointCoordiantesP ) ;
//BENTLEYDTM_EXPORT        int bcdtmUtl_setCurrentDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_setCurrentTinObject(DTM_TIN_OBJ *Tin,WCharCP TinFile) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_testForAndSetCurrentDataObject(DTM_DAT_OBJ **Data,WCharCP DataFile) ; 
//BENTLEYDTM_Public        int bcdtmUtl_testForAndSetCurrentTinFileName(DTM_TIN_OBJ **Tin,WCharCP TinFile) ; 
//BENTLEYDTM_EXPORT        int bcdtmUtl_testForAndSetCurrentTinObject(DTM_TIN_OBJ **Tin,WCharCP TinFile) ; 
//BENTLEYDTM_Public        int bcdtmUtl_writeStatisticsTinObject(DTM_TIN_OBJ *Tin) ; 

////// bcdtmWrite//////
BENTLEYDTM_Public        int bcdtmWrite_asciiDataFileFromDataObject(DTM_DAT_OBJ *Data,WCharCP FileName) ; 
BENTLEYDTM_Public        int bcdtmWrite_asFileSequenceDataObject(DTM_DAT_OBJ *Data,WCharCP FileSaveName) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_atFilePositionDataObject(DTM_DAT_OBJ *dataP,FILE *fpDATA,long filePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_atFilePositionTinObject(DTM_TIN_OBJ *tinP,FILE *tinFP,long filePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_atFilePositionV8asV7DataObject(DTM_DAT_OBJ *Data,FILE *FilePointer,long FilePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_atFilePositionV8asV7TinObject(DTM_TIN_OBJ *Tin,FILE *FilePointer,long FilePosition) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_dataFileFromDataObject(DTM_DAT_OBJ *Data,WCharCP DataFile) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_dataObject(DTM_DAT_OBJ *Data) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_tinObject(DTM_TIN_OBJ *tinP,WCharCP tinFilename) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_toFileDataObject(DTM_DAT_OBJ *Data,WCharCP DataFileName) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_toFileTinObject(DTM_TIN_OBJ *Tin,WCharCP TinFileName) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_toFileV8asV7DataObject(DTM_DAT_OBJ *Data,WCharCP DataFileName) ; 
BENTLEYDTM_EXPORT        int bcdtmWrite_toFileV8asV7TinObject(DTM_TIN_OBJ *Tin,WCharCP TinFileName) ; 
#endif
