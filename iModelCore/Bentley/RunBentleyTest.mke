#----------------------------------------------------------------------------------------
#
#  $Source: RunBentleyTest.mke $
#
#  $Copyright: (c) 2013 Bentley Systems, Incorporated. All rights reserved. $
#
#----------------------------------------------------------------------------------------
PolicyFile=$(SrcRoot)Bentley/AssertCompilePublishedBentleyUnitTestsPolicy.mki
%include mdl.mki

SrcGtest=$(SrcRoot)util/gtest/

ARCH =--x86
%if "x64" == $(TARGET_PROCESSOR_ARCHITECTURE)
    ARCH =--x64
%endif

%if defined(COMPILE_PUBLISHED_TESTS)
    dllPath = $(OutputRootDir)Build/Bentley/test/Published/BentleyLibTest_Published.dll
%else
%error Please define which type of tests to compile in your environment (e.g. define COMPILE_PUBLISHED_TESTS)
%endif 

# Default to run dev tests (pub, nonpub).
WHICH_TESTS =--run_dev_tests

%if defined (FIREBUG)
    # firebug run dev tests + regression + performance
    WHICH_TESTS =--run_firebug_tests
%endif # if def firebug

%if defined (RUN_ALL_DEV_TESTS) 
    # same as firebug - so devs don't have to set Firebug in shell
    WHICH_TESTS =--run_all_dev_tests
%endif # RUN_ALL_DEV_TESTS

%if defined (RUN_SPECIFIC_TESTSET)
    WHICH_TESTS =--$(RUN_SPECIFIC_TESTSET)
%endif # RUN_SPECIFIC_TESTSET

%if !defined (DO_NOT_RUN_BENTLEYTEST)
    %if !defined (DO_SUM)
        %if defined (OutputRootDir)

        CoverageDir=$(OutputRootDir)Build/Bentley/test/run/coverage/
        FilterFile=$(_MakeFilePath)coverage/DgnPlatformFilter.ini

        always:
            !~@mkdir $(OutputRootDir)Build/Bentley/test/run/
            !~@mkdir $(OutputRootDir)Build/Bentley/test/run/logs/

            %if defined (DO_COVERAGE)
                always:
                    %if !defined (CODEWATCH)
                        %error CODEWATCH must be set in your shell to do coverage.
                    %endif
                    %if "x64" == $(TARGET_PROCESSOR_ARCHITECTURE)
                        %error Cannot run coverage in x64.
                    %endif
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --just_cover --output_dir=$(CoverageDir)pub/ --filter_file=$(FilterFile) --codewatch=$(CODEWATCH)
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --run_non_published --just_cover --output_dir=$(CoverageDir)npub/ --filter_file=$(FilterFile) --codewatch=$(CODEWATCH)
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --run_scenario --just_cover --output_dir=$(CoverageDir)scen/ --filter_file=$(FilterFile) --codewatch=$(CODEWATCH)
            %elif defined (DO_COVERAGE_REPORT)
                always:
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --just_report --doxygen_xml_dir=$(OutputRootDir)BuildContexts\Bentley\SubParts\PublishedApi_Scope1_XML\ --output_dir=$(CoverageDir)pub/ --filter_file=$(FilterFile)
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --run_non_published --just_report --doxygen_xml_dir=$(OutputRootDir)BuildContexts\Bentley\SubParts\PublishedApi_Scope1_XML\ --output_dir=$(CoverageDir)npub/ --filter_file=$(FilterFile)
                    $(SrcGtest)BentleyTest/runtests.py $(ARCH) --run_scenario --just_report --doxygen_xml_dir=$(OutputRootDir)BuildContexts\Bentley\SubParts\PublishedApi_Scope1_XML\ --output_dir=$(CoverageDir)scen/ --filter_file=$(FilterFile)
                    !~@mkdir $(OutputRootDir)Build/Bentley/CoverageResults/
                    ~@mkdir $(OutputRootDir)Build/Bentley/CoverageResults/img/
                    -robocopy $(_MakeFilePath)coverage $(OutputRootDir)Build/Bentley/CoverageResults MethodCoverage.js
                    -xcopy \/y $(SrcDgnPlatformTest)data/misc/coverage/img/*.png $(OutputRootDir)Build/Bentley/CoverageResults/img/
                    -xcopy \/y $(CoverageDir)pub/run/logs/*.html  $(OutputRootDir)Build/Bentley/CoverageResults/
                    -xcopy \/y $(CoverageDir)npub/run/logs/*.html  $(OutputRootDir)Build/Bentley/CoverageResults/
                    -xcopy \/y $(CoverageDir)scen/run/logs/*.html  $(OutputRootDir)Build/Bentley/CoverageResults/
                    |********************************************************************************
                    |* Check $(OutputRootDir)Build/Bentley/CoverageResults/ for coverage results.
                    |********************************************************************************
            %else
                # NOTE:
                # This is sloppy but it works.  There were 2 requirements.
                # 1. show progress.
                # 2. don't have too much noise
                # Without knowing progress we wouldn't know it the tests would hang or how much longer they would take. 
                # Handling pipes can be finicky when dealing with bentleybuild, this method although messy works for bentleybuild and bmake.
                #
                # Tried to use subprocess.Popen() to create new windows and control the stdin/stdout of each. This was not working.
                # This launches a new window and runs the tests and gets the information that is important for bmake/bentleybuild. The info is logged somewhere
                # so the second script can pull it back, determine the return status that should have been run and prints the CommitInfo back out for bmake/bentleybuild.
                always:
                    start \/WAIT $(SrcGtest)BentleyTest/runtests.py  $(ARCH) --run_bentley_published --truncate_output --output_dir=$(OutputRootDir)Build/Bentley/test/ --log_file=$(OutputRootDir)Build/Bentley/test/run/logs/BentleyTeststdout.log  --show_stack_usage

                %if !defined (NO_BREAK)
                    always:
                        $(SrcGtest)BentleyTest/PrintLogAndReturnResult.py $(OutputRootDir)Build/Bentley/test/run/logs/BentleyTeststdout.log

                %else
                    always:
                        -$(SrcGtest)BentleyTest/PrintLogAndReturnResult.py $(OutputRootDir)Build/Bentley/test/run/logs/BentleyTeststdout.log

                %endif # !defined (NO_BREAK)


            %endif # DO_COVERAGE

        %endif # defined (OutputRootDir)


    %else
        always:
            PrintLogAndReturnResult.py $(OutputRootDir)Build/DgnPlatformTest/run/logs/DgnPlatformTeststdout.log $(OutputRootDir)Build/DgnPlatformTest/run/logs/DgnViewstdout.log
    %endif # !defined (DO_SUM)

%endif # !defined (DO_NOT_RUN_DGNPLATFORMTEST)
