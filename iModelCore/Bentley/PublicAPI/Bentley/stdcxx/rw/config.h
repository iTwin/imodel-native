/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/Bentley/stdcxx/rw/config.h $
|
|  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__
/// @cond BENTLEY_SDK_None

#ifndef BEGIN_BENTLEY_NAMESPACE
    #error "you must include Bentley.h before including anything in stdcxx"
#endif

// This is the "config" file that is supposed to be generated by the config tool. It is supposed to be platform- and compiler-specific.
// We set it up for all platforms.
#define _RWSTD_CHAR_BIT     8
#define _RWSTD_SIZE_MAX     SIZE_MAX
#define _RWSTD_SIZE_T       size_t

#define _RWSTD_USE_STRING_ATOMIC_OPS

// don't declare templates to be exported/visible. We control export/visibility explictly at the point of use.
#define _RWSTD_NO_EXPORT

// define this to ensure that there is only 1 definition -- in the Bentley library -- of static globals such as unsigned long __nullref (which is the singleton empty string)
// This is crucial to how the empty string optimization works.
#define _RWSTD_NO_COLLAPSE_TEMPLATE_STATICS

// Make sure that operations such as __string_ref::_C_inc_ref use atomic operations. This is required in order to make it safe 
// to copy from a shared Bstdcxx::basic_string in multiple threads, since the copy constructor increments a ref count on a shared __string_ref.
#ifndef _REENTRANT
#define _REENTRANT
#endif

/// @endcond
