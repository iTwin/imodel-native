//--------------------------------------------------------------------------------------
//     $Source: PrivateApi/DgnPlatformInternal/DgnCore/Annotations/Annotations.fb.h $
//  $Copyright: (c) 2014 Bentley Systems, Incorporated. All rights reserved. $
//--------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYG06_DGNPLATFORM_FB_H_
#define FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYG06_DGNPLATFORM_FB_H_

#include "flatbuffers/flatbuffers.h"


namespace BentleyG06 {
namespace DgnPlatform {
namespace FB {

struct AnnotationTextStyleSetter;
struct AnnotationTextStyle;
struct AnnotationTextBlockSetter;
struct AnnotationTextBlockRun;
struct AnnotationTextBlockParagraph;
struct AnnotationTextBlock;
struct AnnotationFrameStyleSetter;
struct AnnotationFrameStyle;
struct AnnotationFrame;
struct AnnotationLeaderStyleSetter;
struct AnnotationLeaderStyle;
struct AnnotationLeaderDPoint3d;
struct AnnotationLeader;
struct TextAnnotationSeedSetter;
struct TextAnnotationSeed;
struct TextAnnotation;
struct TextAnnotationElementTransform;
struct TextAnnotationElement;

enum {
  AnnotationTextStyleProperty_ColorId = 1,
  AnnotationTextStyleProperty_FontId = 2,
  AnnotationTextStyleProperty_Height = 3,
  AnnotationTextStyleProperty_LineSpacingFactor = 4,
  AnnotationTextStyleProperty_IsBold = 5,
  AnnotationTextStyleProperty_IsItalic = 6,
  AnnotationTextStyleProperty_IsSubScript = 7,
  AnnotationTextStyleProperty_IsSuperScript = 8,
  AnnotationTextStyleProperty_IsUnderlined = 9,
  AnnotationTextStyleProperty_StackedFractionScale = 10,
  AnnotationTextStyleProperty_StackedFractionType = 11,
  AnnotationTextStyleProperty_SubScriptOffsetFactor = 12,
  AnnotationTextStyleProperty_SubScriptScale = 13,
  AnnotationTextStyleProperty_SuperScriptOffsetFactor = 14,
  AnnotationTextStyleProperty_SuperScriptScale = 15,
  AnnotationTextStyleProperty_WidthFactor = 16
};

inline const char **EnumNamesAnnotationTextStyleProperty() {
  static const char *names[] = { "ColorId", "FontId", "Height", "LineSpacingFactor", "IsBold", "IsItalic", "IsSubScript", "IsSuperScript", "IsUnderlined", "StackedFractionScale", "StackedFractionType", "SubScriptOffsetFactor", "SubScriptScale", "SuperScriptOffsetFactor", "SuperScriptScale", "WidthFactor", nullptr };
  return names;
}

inline const char *EnumNameAnnotationTextStyleProperty(int e) { return EnumNamesAnnotationTextStyleProperty()[e - AnnotationTextStyleProperty_ColorId]; }

enum {
  AnnotationTextBlockProperty_DocumentWidth = 1,
  AnnotationTextBlockProperty_Justification = 2
};

inline const char **EnumNamesAnnotationTextBlockProperty() {
  static const char *names[] = { "DocumentWidth", "Justification", nullptr };
  return names;
}

inline const char *EnumNameAnnotationTextBlockProperty(int e) { return EnumNamesAnnotationTextBlockProperty()[e - AnnotationTextBlockProperty_DocumentWidth]; }

enum {
  AnnotationTextBlockRunType_Text = 1,
  AnnotationTextBlockRunType_Fraction = 2,
  AnnotationTextBlockRunType_LineBreak = 3
};

inline const char **EnumNamesAnnotationTextBlockRunType() {
  static const char *names[] = { "Text", "Fraction", "LineBreak", nullptr };
  return names;
}

inline const char *EnumNameAnnotationTextBlockRunType(int e) { return EnumNamesAnnotationTextBlockRunType()[e - AnnotationTextBlockRunType_Text]; }

enum {
  AnnotationFrameStyleProperty_CloudBulgeFactor = 1,
  AnnotationFrameStyleProperty_CloudDiameterFactor = 2,
  AnnotationFrameStyleProperty_FillColorId = 3,
  AnnotationFrameStyleProperty_FillTransparency = 4,
  AnnotationFrameStyleProperty_HorizontalPadding = 5,
  AnnotationFrameStyleProperty_IsFillEnabled = 6,
  AnnotationFrameStyleProperty_IsStrokeCloud = 7,
  AnnotationFrameStyleProperty_IsStrokeEnabled = 8,
  AnnotationFrameStyleProperty_StrokeColorId = 9,
  AnnotationFrameStyleProperty_StrokeStyle = 10,
  AnnotationFrameStyleProperty_StrokeWeight = 11,
  AnnotationFrameStyleProperty_Type = 12,
  AnnotationFrameStyleProperty_VerticalPadding = 13
};

inline const char **EnumNamesAnnotationFrameStyleProperty() {
  static const char *names[] = { "CloudBulgeFactor", "CloudDiameterFactor", "FillColorId", "FillTransparency", "HorizontalPadding", "IsFillEnabled", "IsStrokeCloud", "IsStrokeEnabled", "StrokeColorId", "StrokeStyle", "StrokeWeight", "Type", "VerticalPadding", nullptr };
  return names;
}

inline const char *EnumNameAnnotationFrameStyleProperty(int e) { return EnumNamesAnnotationFrameStyleProperty()[e - AnnotationFrameStyleProperty_CloudBulgeFactor]; }

enum {
  AnnotationLeaderStyleProperty_LineColorId = 1,
  AnnotationLeaderStyleProperty_LineStyle = 2,
  AnnotationLeaderStyleProperty_LineType = 3,
  AnnotationLeaderStyleProperty_LineWeight = 4,
  AnnotationLeaderStyleProperty_TerminatorColorId = 5,
  AnnotationLeaderStyleProperty_TerminatorScaleFactor = 6,
  AnnotationLeaderStyleProperty_TerminatorStyle = 7,
  AnnotationLeaderStyleProperty_TerminatorType = 8,
  AnnotationLeaderStyleProperty_TerminatorWeight = 9
};

inline const char **EnumNamesAnnotationLeaderStyleProperty() {
  static const char *names[] = { "LineColorId", "LineStyle", "LineType", "LineWeight", "TerminatorColorId", "TerminatorScaleFactor", "TerminatorStyle", "TerminatorType", "TerminatorWeight", nullptr };
  return names;
}

inline const char *EnumNameAnnotationLeaderStyleProperty(int e) { return EnumNamesAnnotationLeaderStyleProperty()[e - AnnotationLeaderStyleProperty_LineColorId]; }

enum {
  AnnotationLeaderSourceAttachmentType_ById = 1
};

inline const char **EnumNamesAnnotationLeaderSourceAttachmentType() {
  static const char *names[] = { "ById", nullptr };
  return names;
}

inline const char *EnumNameAnnotationLeaderSourceAttachmentType(int e) { return EnumNamesAnnotationLeaderSourceAttachmentType()[e - AnnotationLeaderSourceAttachmentType_ById]; }

enum {
  AnnotationLeaderTargetAttachmentType_ByPhysicalPoint = 1
};

inline const char **EnumNamesAnnotationLeaderTargetAttachmentType() {
  static const char *names[] = { "ByPhysicalPoint", nullptr };
  return names;
}

inline const char *EnumNameAnnotationLeaderTargetAttachmentType(int e) { return EnumNamesAnnotationLeaderTargetAttachmentType()[e - AnnotationLeaderTargetAttachmentType_ByPhysicalPoint]; }

enum {
  TextAnnotationSeedProperty_FrameStyleId = 1,
  TextAnnotationSeedProperty_LeaderStyleId = 2,
  TextAnnotationSeedProperty_TextStyleId = 3
};

inline const char **EnumNamesTextAnnotationSeedProperty() {
  static const char *names[] = { "FrameStyleId", "LeaderStyleId", "TextStyleId", nullptr };
  return names;
}

inline const char *EnumNameTextAnnotationSeedProperty(int e) { return EnumNamesTextAnnotationSeedProperty()[e - TextAnnotationSeedProperty_FrameStyleId]; }

MANUALLY_ALIGNED_STRUCT(8) AnnotationTextStyleSetter {
 private:
  int32_t key_;
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
  int32_t __padding0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationTextStyleSetter(int32_t key, int64_t integerValue, double realValue)
    : key_(flatbuffers::EndianScalar(key)), __padding0(0), integerValue_(flatbuffers::EndianScalar(integerValue)), realValue_(flatbuffers::EndianScalar(realValue)) { (void)__padding0; }

  int32_t key() const { return flatbuffers::EndianScalar(key_); }
  int64_t integerValue() const { return flatbuffers::EndianScalar(integerValue_); }
  double realValue() const { return flatbuffers::EndianScalar(realValue_); }
};
STRUCT_END(AnnotationTextStyleSetter, 24);

typedef bvector<AnnotationTextStyleSetter> AnnotationTextStyleSetters;
typedef flatbuffers::Vector<AnnotationTextStyleSetter const*> AnnotationTextStyleSetterVector;
typedef flatbuffers::Offset<AnnotationTextStyleSetterVector> AnnotationTextStyleSetterVectorOffset;

MANUALLY_ALIGNED_STRUCT(8) AnnotationTextBlockSetter {
 private:
  int32_t key_;
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
  int32_t __padding0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationTextBlockSetter(int32_t key, int64_t integerValue, double realValue)
    : key_(flatbuffers::EndianScalar(key)), __padding0(0), integerValue_(flatbuffers::EndianScalar(integerValue)), realValue_(flatbuffers::EndianScalar(realValue)) { (void)__padding0; }

  int32_t key() const { return flatbuffers::EndianScalar(key_); }
  int64_t integerValue() const { return flatbuffers::EndianScalar(integerValue_); }
  double realValue() const { return flatbuffers::EndianScalar(realValue_); }
};
STRUCT_END(AnnotationTextBlockSetter, 24);

typedef bvector<AnnotationTextBlockSetter> AnnotationTextBlockSetters;
typedef flatbuffers::Vector<AnnotationTextBlockSetter const*> AnnotationTextBlockSetterVector;
typedef flatbuffers::Offset<AnnotationTextBlockSetterVector> AnnotationTextBlockSetterVectorOffset;

MANUALLY_ALIGNED_STRUCT(8) AnnotationFrameStyleSetter {
 private:
  int32_t key_;
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
  int32_t __padding0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationFrameStyleSetter(int32_t key, int64_t integerValue, double realValue)
    : key_(flatbuffers::EndianScalar(key)), __padding0(0), integerValue_(flatbuffers::EndianScalar(integerValue)), realValue_(flatbuffers::EndianScalar(realValue)) { (void)__padding0; }

  int32_t key() const { return flatbuffers::EndianScalar(key_); }
  int64_t integerValue() const { return flatbuffers::EndianScalar(integerValue_); }
  double realValue() const { return flatbuffers::EndianScalar(realValue_); }
};
STRUCT_END(AnnotationFrameStyleSetter, 24);

typedef bvector<AnnotationFrameStyleSetter> AnnotationFrameStyleSetters;
typedef flatbuffers::Vector<AnnotationFrameStyleSetter const*> AnnotationFrameStyleSetterVector;
typedef flatbuffers::Offset<AnnotationFrameStyleSetterVector> AnnotationFrameStyleSetterVectorOffset;

MANUALLY_ALIGNED_STRUCT(8) AnnotationLeaderStyleSetter {
 private:
  int32_t key_;
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
  int32_t __padding0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationLeaderStyleSetter(int32_t key, int64_t integerValue, double realValue)
    : key_(flatbuffers::EndianScalar(key)), __padding0(0), integerValue_(flatbuffers::EndianScalar(integerValue)), realValue_(flatbuffers::EndianScalar(realValue)) { (void)__padding0; }

  int32_t key() const { return flatbuffers::EndianScalar(key_); }
  int64_t integerValue() const { return flatbuffers::EndianScalar(integerValue_); }
  double realValue() const { return flatbuffers::EndianScalar(realValue_); }
};
STRUCT_END(AnnotationLeaderStyleSetter, 24);

typedef bvector<AnnotationLeaderStyleSetter> AnnotationLeaderStyleSetters;
typedef flatbuffers::Vector<AnnotationLeaderStyleSetter const*> AnnotationLeaderStyleSetterVector;
typedef flatbuffers::Offset<AnnotationLeaderStyleSetterVector> AnnotationLeaderStyleSetterVectorOffset;

MANUALLY_ALIGNED_STRUCT(8) AnnotationLeaderDPoint3d {
 private:
  double x_;
  double y_;
  double z_;

 public:
  AnnotationLeaderDPoint3d(double x, double y, double z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  double x() const { return flatbuffers::EndianScalar(x_); }
  double y() const { return flatbuffers::EndianScalar(y_); }
  double z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(AnnotationLeaderDPoint3d, 24);

MANUALLY_ALIGNED_STRUCT(8) TextAnnotationSeedSetter {
 private:
  int32_t key_;
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
  int32_t __padding0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif
  int64_t integerValue_;
  double realValue_;

 public:
  TextAnnotationSeedSetter(int32_t key, int64_t integerValue, double realValue)
    : key_(flatbuffers::EndianScalar(key)), __padding0(0), integerValue_(flatbuffers::EndianScalar(integerValue)), realValue_(flatbuffers::EndianScalar(realValue)) { (void)__padding0; }

  int32_t key() const { return flatbuffers::EndianScalar(key_); }
  int64_t integerValue() const { return flatbuffers::EndianScalar(integerValue_); }
  double realValue() const { return flatbuffers::EndianScalar(realValue_); }
};
STRUCT_END(TextAnnotationSeedSetter, 24);

typedef bvector<TextAnnotationSeedSetter> TextAnnotationSeedSetters;
typedef flatbuffers::Vector<TextAnnotationSeedSetter const*> TextAnnotationSeedSetterVector;
typedef flatbuffers::Offset<TextAnnotationSeedSetterVector> TextAnnotationSeedSetterVectorOffset;

MANUALLY_ALIGNED_STRUCT(8) TextAnnotationElementTransform {
 private:
  double form3d00_;
  double form3d01_;
  double form3d02_;
  double form3d03_;
  double form3d10_;
  double form3d11_;
  double form3d12_;
  double form3d13_;
  double form3d20_;
  double form3d21_;
  double form3d22_;
  double form3d23_;

 public:
  TextAnnotationElementTransform(double form3d00, double form3d01, double form3d02, double form3d03, double form3d10, double form3d11, double form3d12, double form3d13, double form3d20, double form3d21, double form3d22, double form3d23)
    : form3d00_(flatbuffers::EndianScalar(form3d00)), form3d01_(flatbuffers::EndianScalar(form3d01)), form3d02_(flatbuffers::EndianScalar(form3d02)), form3d03_(flatbuffers::EndianScalar(form3d03)), form3d10_(flatbuffers::EndianScalar(form3d10)), form3d11_(flatbuffers::EndianScalar(form3d11)), form3d12_(flatbuffers::EndianScalar(form3d12)), form3d13_(flatbuffers::EndianScalar(form3d13)), form3d20_(flatbuffers::EndianScalar(form3d20)), form3d21_(flatbuffers::EndianScalar(form3d21)), form3d22_(flatbuffers::EndianScalar(form3d22)), form3d23_(flatbuffers::EndianScalar(form3d23)) { }

  double form3d00() const { return flatbuffers::EndianScalar(form3d00_); }
  double form3d01() const { return flatbuffers::EndianScalar(form3d01_); }
  double form3d02() const { return flatbuffers::EndianScalar(form3d02_); }
  double form3d03() const { return flatbuffers::EndianScalar(form3d03_); }
  double form3d10() const { return flatbuffers::EndianScalar(form3d10_); }
  double form3d11() const { return flatbuffers::EndianScalar(form3d11_); }
  double form3d12() const { return flatbuffers::EndianScalar(form3d12_); }
  double form3d13() const { return flatbuffers::EndianScalar(form3d13_); }
  double form3d20() const { return flatbuffers::EndianScalar(form3d20_); }
  double form3d21() const { return flatbuffers::EndianScalar(form3d21_); }
  double form3d22() const { return flatbuffers::EndianScalar(form3d22_); }
  double form3d23() const { return flatbuffers::EndianScalar(form3d23_); }
};
STRUCT_END(TextAnnotationElementTransform, 96);

struct AnnotationTextStyle : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t id() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::Vector<const AnnotationTextStyleSetter *> *setters() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextStyleSetter *> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* description */) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* setters */) &&
           verifier.Verify(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_id() const { return CheckField(8); }
  bool has_name() const { return CheckField(10); }
  bool has_description() const { return CheckField(12); }
  bool has_setters() const { return CheckField(14); }
};

struct AnnotationTextStyleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(8, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(10, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(12, description); }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> setters) { fbb_.AddOffset(14, setters); }
  AnnotationTextStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationTextStyleBuilder &operator=(const AnnotationTextStyleBuilder &);
  flatbuffers::Offset<AnnotationTextStyle> Finish() { return flatbuffers::Offset<AnnotationTextStyle>(fbb_.EndTable(start_, 6)); }
};

inline flatbuffers::Offset<AnnotationTextStyle> CreateAnnotationTextStyle(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> description = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> setters = 0) {
  AnnotationTextStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct AnnotationTextBlockRun : private flatbuffers::Table {
  int32_t type() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::Vector<const AnnotationTextBlockSetter *> *properties() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextBlockSetter *> *>(6); }
  uint32_t styleId() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::Vector<const AnnotationTextStyleSetter *> *styleOverrides() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextStyleSetter *> *>(10); }
  const flatbuffers::String *text_content() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *fraction_numeratorContent() const { return GetPointer<const flatbuffers::String *>(14); }
  const flatbuffers::String *fraction_denominatorContent() const { return GetPointer<const flatbuffers::String *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* properties */) &&
           verifier.Verify(properties()) &&
           VerifyField<uint32_t>(verifier, 8 /* styleId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* styleOverrides */) &&
           verifier.Verify(styleOverrides()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* text_content */) &&
           verifier.Verify(text_content()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* fraction_numeratorContent */) &&
           verifier.Verify(fraction_numeratorContent()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* fraction_denominatorContent */) &&
           verifier.Verify(fraction_denominatorContent()) &&
           verifier.EndTable();
  }
  bool has_type() const { return CheckField(4); }
  bool has_properties() const { return CheckField(6); }
  bool has_styleId() const { return CheckField(8); }
  bool has_styleOverrides() const { return CheckField(10); }
  bool has_text_content() const { return CheckField(12); }
  bool has_fraction_numeratorContent() const { return CheckField(14); }
  bool has_fraction_denominatorContent() const { return CheckField(16); }
};

typedef flatbuffers::Offset<AnnotationTextBlockRun> AnnotationTextBlockRunOffset;
typedef bvector<AnnotationTextBlockRunOffset> AnnotationTextBlockRunOffsets;

typedef flatbuffers::Vector<AnnotationTextBlockRunOffset> AnnotationTextBlockRunOffsetVector;
typedef flatbuffers::Offset<AnnotationTextBlockRunOffsetVector> AnnotationTextBlockRunOffsetVectorOffset;

struct AnnotationTextBlockRunBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) { fbb_.AddElement<int32_t>(4, type, 0); }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties) { fbb_.AddOffset(6, properties); }
  void add_styleId(uint32_t styleId) { fbb_.AddElement<uint32_t>(8, styleId, 0); }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides) { fbb_.AddOffset(10, styleOverrides); }
  void add_text_content(flatbuffers::Offset<flatbuffers::String> text_content) { fbb_.AddOffset(12, text_content); }
  void add_fraction_numeratorContent(flatbuffers::Offset<flatbuffers::String> fraction_numeratorContent) { fbb_.AddOffset(14, fraction_numeratorContent); }
  void add_fraction_denominatorContent(flatbuffers::Offset<flatbuffers::String> fraction_denominatorContent) { fbb_.AddOffset(16, fraction_denominatorContent); }
  AnnotationTextBlockRunBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationTextBlockRunBuilder &operator=(const AnnotationTextBlockRunBuilder &);
  flatbuffers::Offset<AnnotationTextBlockRun> Finish() { return flatbuffers::Offset<AnnotationTextBlockRun>(fbb_.EndTable(start_, 7)); }
};

inline flatbuffers::Offset<AnnotationTextBlockRun> CreateAnnotationTextBlockRun(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t type = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties = 0,
   uint32_t styleId = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides = 0,
   flatbuffers::Offset<flatbuffers::String> text_content = 0,
   flatbuffers::Offset<flatbuffers::String> fraction_numeratorContent = 0,
   flatbuffers::Offset<flatbuffers::String> fraction_denominatorContent = 0) {
  AnnotationTextBlockRunBuilder builder_(_fbb);
  builder_.add_fraction_denominatorContent(fraction_denominatorContent);
  builder_.add_fraction_numeratorContent(fraction_numeratorContent);
  builder_.add_text_content(text_content);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_styleId(styleId);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

struct AnnotationTextBlockParagraph : private flatbuffers::Table {
  const flatbuffers::Vector<const AnnotationTextBlockSetter *> *properties() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextBlockSetter *> *>(4); }
  uint32_t styleId() const { return GetField<uint32_t>(6, 0); }
  const flatbuffers::Vector<const AnnotationTextStyleSetter *> *styleOverrides() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextStyleSetter *> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockRun>> *runs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockRun>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* properties */) &&
           verifier.Verify(properties()) &&
           VerifyField<uint32_t>(verifier, 6 /* styleId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* styleOverrides */) &&
           verifier.Verify(styleOverrides()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* runs */) &&
           verifier.Verify(runs()) &&
           verifier.VerifyVectorOfTables(runs()) &&
           verifier.EndTable();
  }
  bool has_properties() const { return CheckField(4); }
  bool has_styleId() const { return CheckField(6); }
  bool has_styleOverrides() const { return CheckField(8); }
  bool has_runs() const { return CheckField(10); }
};

typedef flatbuffers::Offset<AnnotationTextBlockParagraph> AnnotationTextBlockParagraphOffset;
typedef bvector<AnnotationTextBlockParagraphOffset> AnnotationTextBlockParagraphOffsets;

typedef flatbuffers::Vector<AnnotationTextBlockParagraphOffset> AnnotationTextBlockParagraphOffsetVector;
typedef flatbuffers::Offset<AnnotationTextBlockParagraphOffsetVector> AnnotationTextBlockParagraphOffsetVectorOffset;

struct AnnotationTextBlockParagraphBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties) { fbb_.AddOffset(4, properties); }
  void add_styleId(uint32_t styleId) { fbb_.AddElement<uint32_t>(6, styleId, 0); }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides) { fbb_.AddOffset(8, styleOverrides); }
  void add_runs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockRun>>> runs) { fbb_.AddOffset(10, runs); }
  AnnotationTextBlockParagraphBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationTextBlockParagraphBuilder &operator=(const AnnotationTextBlockParagraphBuilder &);
  flatbuffers::Offset<AnnotationTextBlockParagraph> Finish() { return flatbuffers::Offset<AnnotationTextBlockParagraph>(fbb_.EndTable(start_, 4)); }
};

inline flatbuffers::Offset<AnnotationTextBlockParagraph> CreateAnnotationTextBlockParagraph(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties = 0,
   uint32_t styleId = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockRun>>> runs = 0) {
  AnnotationTextBlockParagraphBuilder builder_(_fbb);
  builder_.add_runs(runs);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_styleId(styleId);
  builder_.add_properties(properties);
  return builder_.Finish();
}

struct AnnotationTextBlock : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<const AnnotationTextBlockSetter *> *properties() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextBlockSetter *> *>(8); }
  uint32_t styleId() const { return GetField<uint32_t>(10, 0); }
  const flatbuffers::Vector<const AnnotationTextStyleSetter *> *styleOverrides() const { return GetPointer<const flatbuffers::Vector<const AnnotationTextStyleSetter *> *>(12); }
  const flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockParagraph>> *paragraphs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockParagraph>> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* properties */) &&
           verifier.Verify(properties()) &&
           VerifyField<uint32_t>(verifier, 10 /* styleId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* styleOverrides */) &&
           verifier.Verify(styleOverrides()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* paragraphs */) &&
           verifier.Verify(paragraphs()) &&
           verifier.VerifyVectorOfTables(paragraphs()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_properties() const { return CheckField(8); }
  bool has_styleId() const { return CheckField(10); }
  bool has_styleOverrides() const { return CheckField(12); }
  bool has_paragraphs() const { return CheckField(14); }
};

struct AnnotationTextBlockBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties) { fbb_.AddOffset(8, properties); }
  void add_styleId(uint32_t styleId) { fbb_.AddElement<uint32_t>(10, styleId, 0); }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides) { fbb_.AddOffset(12, styleOverrides); }
  void add_paragraphs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockParagraph>>> paragraphs) { fbb_.AddOffset(14, paragraphs); }
  AnnotationTextBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationTextBlockBuilder &operator=(const AnnotationTextBlockBuilder &);
  flatbuffers::Offset<AnnotationTextBlock> Finish() { return flatbuffers::Offset<AnnotationTextBlock>(fbb_.EndTable(start_, 6)); }
};

inline flatbuffers::Offset<AnnotationTextBlock> CreateAnnotationTextBlock(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextBlockSetter *>> properties = 0,
   uint32_t styleId = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationTextStyleSetter *>> styleOverrides = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationTextBlockParagraph>>> paragraphs = 0) {
  AnnotationTextBlockBuilder builder_(_fbb);
  builder_.add_paragraphs(paragraphs);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_styleId(styleId);
  builder_.add_properties(properties);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct AnnotationFrameStyle : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t id() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::Vector<const AnnotationFrameStyleSetter *> *setters() const { return GetPointer<const flatbuffers::Vector<const AnnotationFrameStyleSetter *> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* description */) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* setters */) &&
           verifier.Verify(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_id() const { return CheckField(8); }
  bool has_name() const { return CheckField(10); }
  bool has_description() const { return CheckField(12); }
  bool has_setters() const { return CheckField(14); }
};

struct AnnotationFrameStyleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(8, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(10, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(12, description); }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const AnnotationFrameStyleSetter *>> setters) { fbb_.AddOffset(14, setters); }
  AnnotationFrameStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationFrameStyleBuilder &operator=(const AnnotationFrameStyleBuilder &);
  flatbuffers::Offset<AnnotationFrameStyle> Finish() { return flatbuffers::Offset<AnnotationFrameStyle>(fbb_.EndTable(start_, 6)); }
};

inline flatbuffers::Offset<AnnotationFrameStyle> CreateAnnotationFrameStyle(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> description = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationFrameStyleSetter *>> setters = 0) {
  AnnotationFrameStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct AnnotationFrame : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t styleId() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::Vector<const AnnotationFrameStyleSetter *> *styleOverrides() const { return GetPointer<const flatbuffers::Vector<const AnnotationFrameStyleSetter *> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* styleId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* styleOverrides */) &&
           verifier.Verify(styleOverrides()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_styleId() const { return CheckField(8); }
  bool has_styleOverrides() const { return CheckField(10); }
};

struct AnnotationFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_styleId(uint32_t styleId) { fbb_.AddElement<uint32_t>(8, styleId, 0); }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const AnnotationFrameStyleSetter *>> styleOverrides) { fbb_.AddOffset(10, styleOverrides); }
  AnnotationFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationFrameBuilder &operator=(const AnnotationFrameBuilder &);
  flatbuffers::Offset<AnnotationFrame> Finish() { return flatbuffers::Offset<AnnotationFrame>(fbb_.EndTable(start_, 4)); }
};

inline flatbuffers::Offset<AnnotationFrame> CreateAnnotationFrame(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t styleId = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationFrameStyleSetter *>> styleOverrides = 0) {
  AnnotationFrameBuilder builder_(_fbb);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_styleId(styleId);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct AnnotationLeaderStyle : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t id() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::Vector<const AnnotationLeaderStyleSetter *> *setters() const { return GetPointer<const flatbuffers::Vector<const AnnotationLeaderStyleSetter *> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* description */) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* setters */) &&
           verifier.Verify(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_id() const { return CheckField(8); }
  bool has_name() const { return CheckField(10); }
  bool has_description() const { return CheckField(12); }
  bool has_setters() const { return CheckField(14); }
};

struct AnnotationLeaderStyleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(8, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(10, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(12, description); }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const AnnotationLeaderStyleSetter *>> setters) { fbb_.AddOffset(14, setters); }
  AnnotationLeaderStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationLeaderStyleBuilder &operator=(const AnnotationLeaderStyleBuilder &);
  flatbuffers::Offset<AnnotationLeaderStyle> Finish() { return flatbuffers::Offset<AnnotationLeaderStyle>(fbb_.EndTable(start_, 6)); }
};

inline flatbuffers::Offset<AnnotationLeaderStyle> CreateAnnotationLeaderStyle(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> description = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationLeaderStyleSetter *>> setters = 0) {
  AnnotationLeaderStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct AnnotationLeader : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t styleId() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::Vector<const AnnotationLeaderStyleSetter *> *styleOverrides() const { return GetPointer<const flatbuffers::Vector<const AnnotationLeaderStyleSetter *> *>(10); }
  int32_t sourceAttachmentType() const { return GetField<int32_t>(12, 0); }
  uint32_t sourceAttachmentId() const { return GetField<uint32_t>(14, 0); }
  int32_t targetAttachmentType() const { return GetField<int32_t>(16, 0); }
  const AnnotationLeaderDPoint3d *targetAttachmentPt() const { return GetStruct<const AnnotationLeaderDPoint3d *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* styleId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* styleOverrides */) &&
           verifier.Verify(styleOverrides()) &&
           VerifyField<int32_t>(verifier, 12 /* sourceAttachmentType */) &&
           VerifyField<uint32_t>(verifier, 14 /* sourceAttachmentId */) &&
           VerifyField<int32_t>(verifier, 16 /* targetAttachmentType */) &&
           VerifyField<AnnotationLeaderDPoint3d>(verifier, 18 /* targetAttachmentPt */) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_styleId() const { return CheckField(8); }
  bool has_styleOverrides() const { return CheckField(10); }
  bool has_sourceAttachmentType() const { return CheckField(12); }
  bool has_sourceAttachmentId() const { return CheckField(14); }
  bool has_targetAttachmentType() const { return CheckField(16); }
  bool has_targetAttachmentPt() const { return CheckField(18); }
};

typedef flatbuffers::Offset<AnnotationLeader> AnnotationLeaderOffset;
typedef bvector<AnnotationLeaderOffset> AnnotationLeaderOffsets;

typedef flatbuffers::Vector<AnnotationLeaderOffset> AnnotationLeaderOffsetVector;
typedef flatbuffers::Offset<AnnotationLeaderOffsetVector> AnnotationLeaderOffsetVectorOffset;

struct AnnotationLeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_styleId(uint32_t styleId) { fbb_.AddElement<uint32_t>(8, styleId, 0); }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const AnnotationLeaderStyleSetter *>> styleOverrides) { fbb_.AddOffset(10, styleOverrides); }
  void add_sourceAttachmentType(int32_t sourceAttachmentType) { fbb_.AddElement<int32_t>(12, sourceAttachmentType, 0); }
  void add_sourceAttachmentId(uint32_t sourceAttachmentId) { fbb_.AddElement<uint32_t>(14, sourceAttachmentId, 0); }
  void add_targetAttachmentType(int32_t targetAttachmentType) { fbb_.AddElement<int32_t>(16, targetAttachmentType, 0); }
  void add_targetAttachmentPt(const AnnotationLeaderDPoint3d *targetAttachmentPt) { fbb_.AddStruct(18, targetAttachmentPt); }
  AnnotationLeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnnotationLeaderBuilder &operator=(const AnnotationLeaderBuilder &);
  flatbuffers::Offset<AnnotationLeader> Finish() { return flatbuffers::Offset<AnnotationLeader>(fbb_.EndTable(start_, 8)); }
};

inline flatbuffers::Offset<AnnotationLeader> CreateAnnotationLeader(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t styleId = 0,
   flatbuffers::Offset<flatbuffers::Vector<const AnnotationLeaderStyleSetter *>> styleOverrides = 0,
   int32_t sourceAttachmentType = 0,
   uint32_t sourceAttachmentId = 0,
   int32_t targetAttachmentType = 0,
   const AnnotationLeaderDPoint3d *targetAttachmentPt = 0) {
  AnnotationLeaderBuilder builder_(_fbb);
  builder_.add_targetAttachmentPt(targetAttachmentPt);
  builder_.add_targetAttachmentType(targetAttachmentType);
  builder_.add_sourceAttachmentId(sourceAttachmentId);
  builder_.add_sourceAttachmentType(sourceAttachmentType);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_styleId(styleId);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct TextAnnotationSeed : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t id() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::Vector<const TextAnnotationSeedSetter *> *setters() const { return GetPointer<const flatbuffers::Vector<const TextAnnotationSeedSetter *> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* description */) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* setters */) &&
           verifier.Verify(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_id() const { return CheckField(8); }
  bool has_name() const { return CheckField(10); }
  bool has_description() const { return CheckField(12); }
  bool has_setters() const { return CheckField(14); }
};

struct TextAnnotationSeedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(8, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(10, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(12, description); }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const TextAnnotationSeedSetter *>> setters) { fbb_.AddOffset(14, setters); }
  TextAnnotationSeedBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextAnnotationSeedBuilder &operator=(const TextAnnotationSeedBuilder &);
  flatbuffers::Offset<TextAnnotationSeed> Finish() { return flatbuffers::Offset<TextAnnotationSeed>(fbb_.EndTable(start_, 6)); }
};

inline flatbuffers::Offset<TextAnnotationSeed> CreateTextAnnotationSeed(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> description = 0,
   flatbuffers::Offset<flatbuffers::Vector<const TextAnnotationSeedSetter *>> setters = 0) {
  TextAnnotationSeedBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct TextAnnotation : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  const AnnotationTextBlock *document() const { return GetPointer<const AnnotationTextBlock *>(8); }
  const AnnotationFrame *frame() const { return GetPointer<const AnnotationFrame *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<AnnotationLeader>> *leaders() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AnnotationLeader>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* document */) &&
           verifier.VerifyTable(document()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* frame */) &&
           verifier.VerifyTable(frame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* leaders */) &&
           verifier.Verify(leaders()) &&
           verifier.VerifyVectorOfTables(leaders()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_document() const { return CheckField(8); }
  bool has_frame() const { return CheckField(10); }
  bool has_leaders() const { return CheckField(12); }
};

struct TextAnnotationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_document(flatbuffers::Offset<AnnotationTextBlock> document) { fbb_.AddOffset(8, document); }
  void add_frame(flatbuffers::Offset<AnnotationFrame> frame) { fbb_.AddOffset(10, frame); }
  void add_leaders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationLeader>>> leaders) { fbb_.AddOffset(12, leaders); }
  TextAnnotationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextAnnotationBuilder &operator=(const TextAnnotationBuilder &);
  flatbuffers::Offset<TextAnnotation> Finish() { return flatbuffers::Offset<TextAnnotation>(fbb_.EndTable(start_, 5)); }
};

inline flatbuffers::Offset<TextAnnotation> CreateTextAnnotation(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   flatbuffers::Offset<AnnotationTextBlock> document = 0,
   flatbuffers::Offset<AnnotationFrame> frame = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnnotationLeader>>> leaders = 0) {
  TextAnnotationBuilder builder_(_fbb);
  builder_.add_leaders(leaders);
  builder_.add_frame(frame);
  builder_.add_document(document);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct TextAnnotationElement : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t seedId() const { return GetField<uint32_t>(8, 0); }
  const TextAnnotationElementTransform *transform() const { return GetStruct<const TextAnnotationElementTransform *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* seedId */) &&
           VerifyField<TextAnnotationElementTransform>(verifier, 10 /* transform */) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_seedId() const { return CheckField(8); }
  bool has_transform() const { return CheckField(10); }
};

struct TextAnnotationElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_seedId(uint32_t seedId) { fbb_.AddElement<uint32_t>(8, seedId, 0); }
  void add_transform(const TextAnnotationElementTransform *transform) { fbb_.AddStruct(10, transform); }
  TextAnnotationElementBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextAnnotationElementBuilder &operator=(const TextAnnotationElementBuilder &);
  flatbuffers::Offset<TextAnnotationElement> Finish() { return flatbuffers::Offset<TextAnnotationElement>(fbb_.EndTable(start_, 4)); }
};

inline flatbuffers::Offset<TextAnnotationElement> CreateTextAnnotationElement(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t seedId = 0,
   const TextAnnotationElementTransform *transform = 0) {
  TextAnnotationElementBuilder builder_(_fbb);
  builder_.add_transform(transform);
  builder_.add_seedId(seedId);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace DgnPlatform
}  // namespace BentleyG06

#endif  // FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYG06_DGNPLATFORM_FB_H_
