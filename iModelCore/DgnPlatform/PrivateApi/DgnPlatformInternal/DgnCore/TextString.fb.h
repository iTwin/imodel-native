//--------------------------------------------------------------------------------------
//     $Source: PrivateApi/DgnPlatformInternal/DgnCore/TextString.fb.h $
//  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
//--------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEXTSTRING_BENTLEYG06_DGNPLATFORM_FB_H_
#define FLATBUFFERS_GENERATED_TEXTSTRING_BENTLEYG06_DGNPLATFORM_FB_H_

#include "flatbuffers/flatbuffers.h"


namespace BentleyG06 {
namespace Dgn {
namespace FB {

struct TextStringTransform;
struct TextStringRange;
struct TextStringGlyphOrigin;
struct TextStringStyle;
struct TextString;

MANUALLY_ALIGNED_STRUCT(8) TextStringTransform {
 private:
  double form3d00_;
  double form3d01_;
  double form3d02_;
  double form3d03_;
  double form3d10_;
  double form3d11_;
  double form3d12_;
  double form3d13_;
  double form3d20_;
  double form3d21_;
  double form3d22_;
  double form3d23_;

 public:
  TextStringTransform(double form3d00, double form3d01, double form3d02, double form3d03, double form3d10, double form3d11, double form3d12, double form3d13, double form3d20, double form3d21, double form3d22, double form3d23)
    : form3d00_(flatbuffers::EndianScalar(form3d00)), form3d01_(flatbuffers::EndianScalar(form3d01)), form3d02_(flatbuffers::EndianScalar(form3d02)), form3d03_(flatbuffers::EndianScalar(form3d03)), form3d10_(flatbuffers::EndianScalar(form3d10)), form3d11_(flatbuffers::EndianScalar(form3d11)), form3d12_(flatbuffers::EndianScalar(form3d12)), form3d13_(flatbuffers::EndianScalar(form3d13)), form3d20_(flatbuffers::EndianScalar(form3d20)), form3d21_(flatbuffers::EndianScalar(form3d21)), form3d22_(flatbuffers::EndianScalar(form3d22)), form3d23_(flatbuffers::EndianScalar(form3d23)) { }

  double form3d00() const { return flatbuffers::EndianScalar(form3d00_); }
  double form3d01() const { return flatbuffers::EndianScalar(form3d01_); }
  double form3d02() const { return flatbuffers::EndianScalar(form3d02_); }
  double form3d03() const { return flatbuffers::EndianScalar(form3d03_); }
  double form3d10() const { return flatbuffers::EndianScalar(form3d10_); }
  double form3d11() const { return flatbuffers::EndianScalar(form3d11_); }
  double form3d12() const { return flatbuffers::EndianScalar(form3d12_); }
  double form3d13() const { return flatbuffers::EndianScalar(form3d13_); }
  double form3d20() const { return flatbuffers::EndianScalar(form3d20_); }
  double form3d21() const { return flatbuffers::EndianScalar(form3d21_); }
  double form3d22() const { return flatbuffers::EndianScalar(form3d22_); }
  double form3d23() const { return flatbuffers::EndianScalar(form3d23_); }
};
STRUCT_END(TextStringTransform, 96);

MANUALLY_ALIGNED_STRUCT(8) TextStringRange {
 private:
  double lowx_;
  double lowy_;
  double highx_;
  double highy_;

 public:
  TextStringRange(double lowx, double lowy, double highx, double highy)
    : lowx_(flatbuffers::EndianScalar(lowx)), lowy_(flatbuffers::EndianScalar(lowy)), highx_(flatbuffers::EndianScalar(highx)), highy_(flatbuffers::EndianScalar(highy)) { }

  double lowx() const { return flatbuffers::EndianScalar(lowx_); }
  double lowy() const { return flatbuffers::EndianScalar(lowy_); }
  double highx() const { return flatbuffers::EndianScalar(highx_); }
  double highy() const { return flatbuffers::EndianScalar(highy_); }
};
STRUCT_END(TextStringRange, 32);

MANUALLY_ALIGNED_STRUCT(8) TextStringGlyphOrigin {
 private:
  double x_;
  double y_;

 public:
  TextStringGlyphOrigin(double x, double y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  double x() const { return flatbuffers::EndianScalar(x_); }
  double y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(TextStringGlyphOrigin, 16);

struct TextStringStyle : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  uint32_t fontId() const { return GetField<uint32_t>(8, 0); }
  uint8_t isBold() const { return GetField<uint8_t>(10, 0); }
  uint8_t isItalic() const { return GetField<uint8_t>(12, 0); }
  uint8_t isUnderlined() const { return GetField<uint8_t>(14, 0); }
  double height() const { return GetField<double>(16, 0); }
  double widthFactor() const { return GetField<double>(18, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<uint32_t>(verifier, 8 /* fontId */) &&
           VerifyField<uint8_t>(verifier, 10 /* isBold */) &&
           VerifyField<uint8_t>(verifier, 12 /* isItalic */) &&
           VerifyField<uint8_t>(verifier, 14 /* isUnderlined */) &&
           VerifyField<double>(verifier, 16 /* height */) &&
           VerifyField<double>(verifier, 18 /* widthFactor */) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_fontId() const { return CheckField(8); }
  bool has_isBold() const { return CheckField(10); }
  bool has_isItalic() const { return CheckField(12); }
  bool has_isUnderlined() const { return CheckField(14); }
  bool has_height() const { return CheckField(16); }
  bool has_widthFactor() const { return CheckField(18); }
};

struct TextStringStyleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_fontId(uint32_t fontId) { fbb_.AddElement<uint32_t>(8, fontId, 0); }
  void add_isBold(uint8_t isBold) { fbb_.AddElement<uint8_t>(10, isBold, 0); }
  void add_isItalic(uint8_t isItalic) { fbb_.AddElement<uint8_t>(12, isItalic, 0); }
  void add_isUnderlined(uint8_t isUnderlined) { fbb_.AddElement<uint8_t>(14, isUnderlined, 0); }
  void add_height(double height) { fbb_.AddElement<double>(16, height, 0); }
  void add_widthFactor(double widthFactor) { fbb_.AddElement<double>(18, widthFactor, 0); }
  TextStringStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextStringStyleBuilder &operator=(const TextStringStyleBuilder &);
  flatbuffers::Offset<TextStringStyle> Finish() {
    auto o = flatbuffers::Offset<TextStringStyle>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<TextStringStyle> CreateTextStringStyle(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   uint32_t fontId = 0,
   uint8_t isBold = 0,
   uint8_t isItalic = 0,
   uint8_t isUnderlined = 0,
   double height = 0,
   double widthFactor = 0) {
  TextStringStyleBuilder builder_(_fbb);
  builder_.add_widthFactor(widthFactor);
  builder_.add_height(height);
  builder_.add_fontId(fontId);
  builder_.add_isUnderlined(isUnderlined);
  builder_.add_isItalic(isItalic);
  builder_.add_isBold(isBold);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

struct TextString : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(8); }
  const TextStringStyle *style() const { return GetPointer<const TextStringStyle *>(10); }
  const TextStringTransform *transform() const { return GetStruct<const TextStringTransform *>(12); }
  const TextStringRange *range() const { return GetStruct<const TextStringRange *>(14); }
  const flatbuffers::Vector<uint32_t> *glyphIds() const { return GetPointer<const flatbuffers::Vector<uint32_t> *>(16); }
  const flatbuffers::Vector<const TextStringGlyphOrigin *> *glyphOrigins() const { return GetPointer<const flatbuffers::Vector<const TextStringGlyphOrigin *> *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* text */) &&
           verifier.Verify(text()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* style */) &&
           verifier.VerifyTable(style()) &&
           VerifyField<TextStringTransform>(verifier, 12 /* transform */) &&
           VerifyField<TextStringRange>(verifier, 14 /* range */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* glyphIds */) &&
           verifier.Verify(glyphIds()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* glyphOrigins */) &&
           verifier.Verify(glyphOrigins()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_text() const { return CheckField(8); }
  bool has_style() const { return CheckField(10); }
  bool has_transform() const { return CheckField(12); }
  bool has_range() const { return CheckField(14); }
  bool has_glyphIds() const { return CheckField(16); }
  bool has_glyphOrigins() const { return CheckField(18); }
};

struct TextStringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(8, text); }
  void add_style(flatbuffers::Offset<TextStringStyle> style) { fbb_.AddOffset(10, style); }
  void add_transform(const TextStringTransform *transform) { fbb_.AddStruct(12, transform); }
  void add_range(const TextStringRange *range) { fbb_.AddStruct(14, range); }
  void add_glyphIds(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> glyphIds) { fbb_.AddOffset(16, glyphIds); }
  void add_glyphOrigins(flatbuffers::Offset<flatbuffers::Vector<const TextStringGlyphOrigin *>> glyphOrigins) { fbb_.AddOffset(18, glyphOrigins); }
  TextStringBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextStringBuilder &operator=(const TextStringBuilder &);
  flatbuffers::Offset<TextString> Finish() {
    auto o = flatbuffers::Offset<TextString>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<TextString> CreateTextString(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0,
   flatbuffers::Offset<TextStringStyle> style = 0,
   const TextStringTransform *transform = 0,
   const TextStringRange *range = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint32_t>> glyphIds = 0,
   flatbuffers::Offset<flatbuffers::Vector<const TextStringGlyphOrigin *>> glyphOrigins = 0) {
  TextStringBuilder builder_(_fbb);
  builder_.add_glyphOrigins(glyphOrigins);
  builder_.add_glyphIds(glyphIds);
  builder_.add_range(range);
  builder_.add_transform(transform);
  builder_.add_style(style);
  builder_.add_text(text);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace DgnPlatform
}  // namespace BentleyG06

#endif  // FLATBUFFERS_GENERATED_TEXTSTRING_BENTLEYG06_DGNPLATFORM_FB_H_
