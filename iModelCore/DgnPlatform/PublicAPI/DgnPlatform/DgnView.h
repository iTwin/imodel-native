/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/DgnPlatform/DgnView.h $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

#include "DgnDb.h"
#include "DgnCategory.h"
#include "DgnElement.h"
#include "ElementHandler.h"
#include "ECSqlStatementIterator.h"

#define BIS_CLASS_ViewDefinition "ViewDefinition"
#define BIS_CLASS_ViewDefinition3d "ViewDefinition3d"
#define BIS_CLASS_SpatialViewDefinition "SpatialViewDefinition"
#define BIS_CLASS_OrthographicViewDefinition "OrthographicViewDefinition"
#define BIS_CLASS_CameraViewDefinition "CameraViewDefinition"
#define BIS_CLASS_DrawingViewDefinition "DrawingViewDefinition"
#define BIS_CLASS_SheetViewDefinition "SheetViewDefinition"
#define BIS_CLASS_ModelSelector "ModelSelector"
#define BIS_CLASS_CategorySelector "CategorySelector"
#define BIS_CLASS_DisplayStyle "DisplayStyle"
#define BIS_CLASS_ClipVolume "ClipVolume"

BEGIN_BENTLEY_DGN_NAMESPACE

namespace dgn_ElementHandler {
    struct CameraViewDef; struct OrthographicViewDef; struct DrawingViewDef; struct SheetViewDef; 
    struct ModelSelectorDef; struct CategorySelectorDef; struct DisplayStyleDef;
}

//=======================================================================================
//! The source for the creation a ViewDefinition.
//! @ingroup GROUP_DgnView
//=======================================================================================
enum class DgnViewSource
{
    User      = 1<<0,      //!< created by a user
    Generated = 1<<1,      //!< automatically generated by a program, may be relevant to user
    Private   = 1<<2,      //!< used internally and should not be presented to user
};

//=======================================================================================
//! A persistable display style
// @bsiclass                                                      Sam.Wilson    08/16
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE DisplayStyle : DefinitionElement
    {
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_DisplayStyle, DefinitionElement);
    friend struct dgn_ElementHandler::DisplayStyleDef;
protected:
    explicit DisplayStyle(CreateParams const& params) : T_Super(params) {}
public:
    //! Construct a new modelselector. You should then call SetModelIds.
    DisplayStyle(DgnDbR db, Utf8StringCR name) : T_Super(CreateParams(db, DgnModel::DictionaryId(), QueryClassId(db), CreateCode(name))) {}

    Utf8String GetName() const { return GetCode().GetValue(); } //!< The name of the view definition

    DGNPLATFORM_EXPORT DgnDbStatus SetViewFlags(Render::ViewFlags const&); //!< Set the ViewFlags
    DGNPLATFORM_EXPORT Render::ViewFlags GetViewFlags() const; //!< Get the ViewFlags

    ColorDef GetBackgroundColor() const {return ColorDef((uint32_t)GetPropertyValueInt32("BackgroundColor"));} //!< Get background color
    DgnDbStatus SetBackgroundColor(ColorDef const& cdef) {return SetPropertyValue("BackgroundColor", (int32_t)cdef.GetValue());} //!< Set background color

    Utf8String GetEnvironment() const { return GetPropertyValueString("Environment"); } //!< Get Environment
    DgnDbStatus SetEnvironment(Utf8StringCR value) { return SetPropertyValue("Environment", value.c_str()); } //!< Set Environment

    static DgnCode CreateCode(Utf8StringCR name) { return ResourceAuthority::CreateResourceCode(name, BIS_CLASS_DisplayStyle); }
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_DisplayStyle)); }
};

//=======================================================================================
//! A persistable list of DgnModelIds
// @bsiclass                                                      Sam.Wilson    08/16
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ModelSelector : DefinitionElement
    {
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_ModelSelector, DefinitionElement);
    friend struct dgn_ElementHandler::ModelSelectorDef;
protected:
    DGNPLATFORM_EXPORT DgnDbStatus _OnDelete() const override;
    explicit ModelSelector(CreateParams const& params) : T_Super(params) {}
public:
    //! Construct a new modelselector. You should then call SetModelIds.
    ModelSelector(DgnDbR db, Utf8StringCR name) : T_Super(CreateParams(db, DgnModel::DictionaryId(), QueryClassId(db), CreateCode(name))) {}

    Utf8String GetName() const { return GetCode().GetValue(); } //!< The name of the view definition

    //! Define the selector to contain a single DgnModelId. @note this must be persistent. @note This writes to the bim directly.
    DGNPLATFORM_EXPORT DgnDbStatus SetModelId(DgnModelId mid);
    //! Define the selector to contain the specified DgnModelIds. @note this must be persistent. @note This writes to the bim directly.
    DGNPLATFORM_EXPORT DgnDbStatus SetModelIds(DgnModelIdSet const& models); //!< Define the selector to contain the specified DgnModelIds. @note this must be persistent.
    //! Query the DgnModelIds that are in this selector
    DGNPLATFORM_EXPORT DgnModelIdSet GetModelIds() const;
    //! Query if the specified DgnModelId is in this selector
    DGNPLATFORM_EXPORT bool ContainsModelId(DgnModelId mid) const;

    static DgnDbStatus OnModelDelete(DgnDbR, DgnModelId);

    static DgnCode CreateCode(Utf8StringCR name) { return ResourceAuthority::CreateResourceCode(name, BIS_CLASS_ModelSelector); }
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_ModelSelector)); }
    };

//=======================================================================================
//! A persistable list of DgnElementIds. Actually, the "list" is a 1:N ECRelationship 
//! with this element at one end.
// @bsiclass                                                      Sam.Wilson    08/16
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE CategorySelector : DefinitionElement
    {
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_CategorySelector, DefinitionElement);
    friend struct dgn_ElementHandler::CategorySelectorDef;
protected:
    explicit CategorySelector(CreateParams const& params) : T_Super(params) {}
public:
    //! Construct a new CategorySelector prior to inserting it.
    CategorySelector(DgnDbR db, Utf8CP name) : T_Super(CreateParams(db, DgnModel::DictionaryId(), QueryClassId(db), CreateCode(name))) {}

    Utf8String GetName() const { return GetCode().GetValue(); } //!< The name of the view definition

    //! Set the list of categories. @note that this element must be persisent in order for this function to succeed. @note This writes to the bim directly.
    DGNPLATFORM_EXPORT DgnDbStatus SetCategoryIds(DgnCategoryIdSet const&);
    //! Get the list of categories.
    DGNPLATFORM_EXPORT DgnCategoryIdSet GetCategoryIds() const;
    //! Query if the selector includes the specified category
    DGNPLATFORM_EXPORT bool ContainsCategoryId(DgnCategoryId cid) const;
    //! Get the SubCategoryOverrides
    DGNPLATFORM_EXPORT void GetSubCategoryOverrides(bmap<DgnSubCategoryId, DgnSubCategory::Override>& overrides) const;
    //! Set the SubCategoryOverrides
    DGNPLATFORM_EXPORT DgnDbStatus SetSubCategoryOverrides(bmap<DgnSubCategoryId, DgnSubCategory::Override> const& overrides);
    
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_CategorySelector)); }
    static DgnCode CreateCode(Utf8StringCR name) { return ResourceAuthority::CreateResourceCode(name, BIS_CLASS_CategorySelector); }
    };

//=======================================================================================
//! Holds the definition of a view.
//! @ingroup GROUP_DgnView
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewDefinition : DefinitionElement
{
    DEFINE_T_SUPER(DefinitionElement);
public:

    //! Parameters used to construct a ViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(ViewDefinition::T_Super::CreateParams);
    public:
        CreateParams(DgnDbR db, DgnClassId classId, DgnCode const& code, Utf8CP label=nullptr, DgnElementId parentId=DgnElementId())
            : T_Super(db, DgnModel::DictionaryId(), classId, code, label, parentId) {}

        DGNPLATFORM_EXPORT CreateParams(DgnDbR db, DgnCode const& code, DgnClassId classId);

        //! Constructor from base CreateParams. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params) : T_Super(params) { }
    };
private:
    DgnDbStatus DeleteReferences() const;
    static bool IsValidCode(DgnCode const& code);
protected:
    explicit ViewDefinition(CreateParams const& params) : T_Super(params) { }

    virtual DgnCode _GenerateDefaultCode() const override { return DgnCode(); }
    virtual bool _SupportsCodeAuthority(DgnAuthorityCR auth) const override { return ResourceAuthority::IsResourceAuthority(auth); }

    DGNPLATFORM_EXPORT virtual DgnDbStatus _OnDelete() const override;

    virtual DgnDbStatus _SetParentId(DgnElementId) override { return DgnDbStatus::InvalidParent; }
    virtual DgnDbStatus _OnChildInsert(DgnElementCR) const override { return DgnDbStatus::InvalidParent; }
    virtual DgnDbStatus _OnChildUpdate(DgnElementCR, DgnElementCR) const override { return DgnDbStatus::InvalidParent; }

    virtual ViewControllerPtr _SupplyController() const = 0;
    virtual bool _IsValidBaseModel(DgnModelCR model) const { return true; }

    virtual OrthographicViewDefinitionCP _ToOrthographicView() const { return nullptr; }
    virtual CameraViewDefinitionCP _ToCameraView() const { return nullptr; }
    virtual SpatialViewDefinitionCP _ToSpatialView() const { return nullptr; }
    virtual DrawingViewDefinitionCP _ToDrawingView() const { return nullptr; }
    virtual SheetViewDefinitionCP _ToSheetView() const { return nullptr; }
    virtual bool _ViewsModel(DgnModelId mid) const = 0;

public:
    DgnViewId GetViewId() const { return DgnViewId(GetElementId().GetValue()); } //!< This view definition's ID
    Utf8String GetName() const { return GetCode().GetValue(); } //!< The name of the view definition
    DgnDbStatus SetName(Utf8StringCR name) { return SetCode(CreateCode(name)); } //!< Change this view definition's name

    //! Inserts into the database and returns the new persistent copy.
    ViewDefinitionCPtr Insert(DgnDbStatus* status=nullptr) { return GetDgnDb().Elements().Insert<ViewDefinition>(*this, status); }
    //! Updates in the database and returns the updated persistent copy.
    ViewDefinitionCPtr Update(DgnDbStatus* status=nullptr) { return GetDgnDb().Elements().Update<ViewDefinition>(*this, status); }

    //! Specifies whether or not models associated with a ViewDefinition should be filled when loading a ViewController
    enum class FillModels
    {
    No=0, //!< Don't fill models
    Yes=1 //!< Fill models
    };

    //! Instantiate a ViewController for this ViewDefinition in order to render the view
    DGNPLATFORM_EXPORT ViewControllerPtr LoadViewController(FillModels fillModels=FillModels::No) const;
    //! Instantiate a ViewController for the ViewDefinition with the specified ID in order to render the view
    DGNPLATFORM_EXPORT static ViewControllerPtr LoadViewController(DgnViewId viewId, DgnDbR db, FillModels fillModels=FillModels::No);

    //! Create a DgnCode for a view with the specified name
    static DgnCode CreateCode(Utf8StringCR name) { return ResourceAuthority::CreateResourceCode(name, BIS_CLASS_ViewDefinition); }

    //! Look up the ID of the view with the specified DgnCode
    DGNPLATFORM_EXPORT static DgnViewId QueryViewId(DgnCode const& code, DgnDbR db);

    //! Look up the ID of the view with the specified name
    static DgnViewId QueryViewId(Utf8StringCR name, DgnDbR db) { return QueryViewId(CreateCode(name), db); }

    //! Look up a view by ID
    static ViewDefinitionCPtr QueryView(DgnViewId viewId, DgnDbR db) { return db.Elements().Get<ViewDefinition>(viewId); }

    //! Look up a view by name
    static ViewDefinitionCPtr QueryView(Utf8StringCR name, DgnDbR db) { return QueryView(QueryViewId(name, db), db); }

    DGNVIEW_EXPORT BeSQLite::DbResult RenderAndSaveThumbnail(int resolution, Render::RenderMode renderModeOverride) const;

    //! An entry in an iterator over the views in a DgnDb
    struct Entry : ECSqlStatementEntry
    {
        friend struct ECSqlStatementIterator<Entry>;
        friend struct DgnView;
    private:
        Entry(BeSQLite::EC::ECSqlStatement* stmt=nullptr) : ECSqlStatementEntry(stmt) { }
    public:
        DgnViewId GetId() const { return m_statement->GetValueId<DgnViewId>(0); } //!< The view ID
        Utf8CP GetName() const { return m_statement->GetValueText(1); } //!< The name of the view
        DgnViewSource GetSource() const { return static_cast<DgnViewSource>(m_statement->GetValueInt(2)); } //!< The view source
        Utf8CP GetDescr() const { return m_statement->GetValueText(3); } //!< The view's description
        DgnClassId GetClassId() const { return m_statement->GetValueId<DgnClassId>(4); } //!< The view's ECClass ID

        DGNPLATFORM_EXPORT bool IsOrthographicView() const;
        DGNPLATFORM_EXPORT bool IsCameraView() const;
        DGNPLATFORM_EXPORT bool IsSpatialView() const;
        DGNPLATFORM_EXPORT bool IsDrawingView() const;
        DGNPLATFORM_EXPORT bool IsSheetView() const;
    };

    //! An iterator over the view definitions stored in a DgnDb
    struct Iterator : ECSqlStatementIterator<Entry>
    {
        // Options controlling ViewDefinition iteration
        struct Options
        {
            //! Defines the order in which results should be returned
            enum class Order : uint8_t
            {
                Unordered, //!< No meaningful order
                Ascending, //!< Order by name ascending
            };

            //! Defines the view source(s) to include in the query
            enum class Source : uint8_t
            {
                User = (uint8_t)DgnViewSource::User, //!< Include user-defined views
                Generated = (uint8_t)DgnViewSource::Generated, //!< Include program-generated views
                Private = (uint8_t)DgnViewSource::Private, //!< Include internally-defined views
                All = User | Generated | Private, //!< Include views from all sources
            };
        private:
            Utf8String m_customECSql;
            Order m_order;
            Source m_source;

            Options(Order order, Source source, Utf8StringCR ecsql)
                : m_customECSql(ecsql), m_order(order), m_source(source) { }
        public:
            //! Constructor
            //! @param[in]      order       Optional order in which to return results
            //! @param[in]      source      Optional view source(s) to include
            explicit Options(Order order=Order::Unordered, Source source=Source::All) : Options(order, source, Utf8String()) { }

            //! Constructor
            //! @param[in]      source      View source by which to filter
            //! @param[in]      order       Optional order in which to return results
            explicit Options(Source source, Order order=Order::Unordered) : Options(order, source, Utf8String()) { }

            //! Constructor
            //! @param[in]      ecsql Custom ECSql which is to be appended to the SELECT statement
            explicit Options(Utf8StringCR ecsql) : Options(Order::Unordered, Source::All, ecsql) { }

            //! Returns true if these options do not restrict the results
            bool IsEmpty() const { return m_customECSql.empty() && Order::Unordered == m_order && Source::All == m_source; }

            //! Convert these options to an ECSql string
            Utf8String ToString() const;
        };

        //! Construct an iterator over the view definitions within the specified DgnDb
        DGNPLATFORM_EXPORT Iterator(DgnDbR db, Options const& options);
    };

    //! Create an iterator over the view definitions within the specified DgnDb
    static Iterator MakeIterator(DgnDbR db, Iterator::Options const& options=Iterator::Options()) { return Iterator(db, options); }

    //! Return the number of view definitions in the specific DgnDb
    DGNPLATFORM_EXPORT static size_t QueryCount(DgnDbR db, Iterator::Options const& options=Iterator::Options());

    bool IsCameraView() const { return nullptr != _ToCameraView(); }
    bool IsOrthographicView() const { return nullptr != _ToOrthographicView(); }
    bool IsSpatialView() const { return nullptr != _ToSpatialView(); }
    bool IsDrawingView() const { return nullptr != _ToDrawingView(); }
    bool IsSheetView() const { return nullptr != _ToSheetView(); }
    CameraViewDefinitionCP ToCameraView() const { return _ToCameraView(); }
    OrthographicViewDefinitionCP ToOrthographicView() const { return _ToOrthographicView(); }
    SpatialViewDefinitionCP ToSpatialView() const { return _ToSpatialView(); }
    DrawingViewDefinitionCP ToDrawingView() const { return _ToDrawingView(); }
    SheetViewDefinitionCP ToSheetView() const { return _ToSheetView(); }
    SpatialViewDefinitionP ToSpatialViewP() { return const_cast<SpatialViewDefinitionP>(ToSpatialView()); }
    DrawingViewDefinitionP ToDrawingViewP() { return const_cast<DrawingViewDefinitionP>(ToDrawingView()); }
    SheetViewDefinitionP ToSheetViewP() { return const_cast<SheetViewDefinitionP>(ToSheetView()); }

    ViewControllerPtr LoadViewController(bool allowOverrides, FillModels fillModels) const; //!< @private

    Utf8String GetDescr() const { return GetPropertyValueString("Descr"); } //!< Get description
    DgnDbStatus SetDescr(Utf8StringCR value) { return SetPropertyValue("Descr", value.c_str()); } //!< Set description
    DgnViewSource GetSource() const { return (DgnViewSource)GetPropertyValueInt32("Source"); } //!< Get source
    DgnDbStatus SetSource(DgnViewSource value) { return SetPropertyValue("Source", (int32_t)value); } //!< Set source
    DgnElementId GetCategorySelectorId() const {return GetPropertyValueId<DgnElementId>("CategorySelector");} //!< Get the ID of the element that holds the list of Categories displayed in a view
    DgnDbStatus SetCategorySelectorId(DgnElementId id) {return SetPropertyValue("CategorySelector", id);} //!< Set the ID of the element that holds the list of Categories displayed in a view. Note that the category selector must be persistent
    DgnDbStatus SetCategorySelector(CategorySelectorCR catSel) {return SetCategorySelectorId(catSel.GetElementId());} //!< Set the list of Categories displayed in a view. Note that the category selector must be persistent
    DgnElementId GetDisplayStyleId() const {return GetPropertyValueId<DgnElementId>("DisplayStyle");} //!< Get the ID of the display style for a view
    DgnDbStatus SetDisplayStyleId(DgnElementId value) {return SetPropertyValue("DisplayStyle", value);} //!< Set the ID of the display style for a view

    //! Query if the specified model is displayed in this view 
    bool ViewsModel(DgnModelId mid) const {return _ViewsModel(mid);}
    
    //! Query if the specified Category is displayed in this view
    DGNPLATFORM_EXPORT bool ViewsCategory(DgnCategoryId cid) const;
    };

//=======================================================================================
//! Defines a view of a 3d model.
// @bsiclass                                                      Shaun.Sewall    02/16
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewDefinition3d : ViewDefinition
{
    DEFINE_T_SUPER(ViewDefinition);
protected:
    DGNPLATFORM_EXPORT bool _ViewsModel(DgnModelId mid) const override;

    explicit ViewDefinition3d(CreateParams const& params) : T_Super(params) {}
public:
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_ViewDefinition3d)); }
    DgnModelId GetTargetModelId() const { return GetPropertyValueId<DgnModelId>("TargetModel"); } //!< Get the ID of the target model
    DgnElementId GetModelSelectorId() const {return GetPropertyValueId<DgnElementId>("ModelSelector");} //!< Get the ID of the element that holds th ModelSelector used by this view
    DgnElementId GetClipVolumeId() const {return GetPropertyValueId<DgnElementId>("ClipVolume");} //!< Get the ID of the element that holds the ClipVolume used by this view
    DgnDbStatus SetTargetModelId(DgnModelId id) { return SetPropertyValue("TargetModel", id); } //!< Set the ID of the target model
    DgnDbStatus SetModelSelectorId(DgnElementId id) {return SetPropertyValue("ModelSelector", id);} //!< Set the ID of the element that holds the ModelSelector used by this view.
    DgnDbStatus SetModelSelector(ModelSelectorCR modSel) {return SetModelSelectorId(modSel.GetElementId());} //!< Set the ModelSelector used by this view. Note that the modelselector must be persistent.
    DgnDbStatus SetClipVolumeId(DgnElementId id) {return SetPropertyValue("ClipVolume", id);} //!< Set the ID of the element that holds the ClipVolume used by this view
    };

//=======================================================================================
//! Defines a view of one or more SpatialModels.
//! The list of viewed models is stored in the view's settings in the DgnDb's settings
//! table.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE SpatialViewDefinition : ViewDefinition3d
{
    DEFINE_T_SUPER(ViewDefinition3d);
protected:
    virtual SpatialViewDefinitionCP _ToSpatialView() const override { return this; }
    explicit SpatialViewDefinition(CreateParams const& params) : T_Super(params) { }
};

//=======================================================================================
//! Defines a view of one or more SpatialModels that displays
//! world-coordinate geometry on the image plane using a parallel orthographic projection.
// @bsiclass                                                      Sam.Wilson    08/16
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE OrthographicViewDefinition : SpatialViewDefinition
    {
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_OrthographicViewDefinition, SpatialViewDefinition);    
    friend struct dgn_ElementHandler::OrthographicViewDef;
protected:
    //! Construct a new OrthographicViewDefinition prior to loading it
    explicit OrthographicViewDefinition(CreateParams const& params) : T_Super(params) {}
    OrthographicViewDefinitionCP _ToOrthographicView() const {return this;}
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;

public:
    //! Construct a new CameraViewDefinition prior to inserting it 
    //! @param db   The DgnDb where the caller plans to insert this view definition
    //! @param name A unique name for this view definition
    OrthographicViewDefinition(DgnDbR db, Utf8StringCR name) : T_Super(CreateParams(db, CreateCode(name), QueryClassId(db))) {}

    //! Look up the ECClass ID used for OrthographicViewDefinitions within the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_OrthographicViewDefinition)); }

    DGNPLATFORM_EXPORT DPoint3d GetOrigin() const {return GetPropertyValueDPoint3d("Origin");} //!< Get the origin of the viewed volume on the lower, back, rear
    DGNPLATFORM_EXPORT DVec3d GetExtents() const {return (DVec3d const&)GetPropertyValueDPoint3d("Extents");} //!< Get the size of the view diagonal
    DGNPLATFORM_EXPORT YawPitchRollAngles GetViewDirection() const {return GetPropertyValueYpr("DirectionYaw", "DirectionPitch", "DirectionRoll");} //!< Get the view direction

    DGNPLATFORM_EXPORT DgnDbStatus SetOrigin(DPoint3dCR pt) {return SetPropertyValue("Origin", pt);} //!< Set the origin of the viewed volume on the lower, back, rear
    DGNPLATFORM_EXPORT DgnDbStatus SetExtents(DVec3dCR vec) {return SetPropertyValue("Extents", (DPoint3dCR)vec);} //!< Set the size of the view diagonal
    DGNPLATFORM_EXPORT DgnDbStatus SetViewDirection(YawPitchRollAnglesCR angles) {return SetPropertyValueYpr(angles, "DirectionYaw", "DirectionPitch", "DirectionRoll");} //!< Set the view direction

    //! Set the view direction to one of the standard rotations
    DGNPLATFORM_EXPORT DgnDbStatus SetStandardViewDirection(StandardView standardView);
};

//=======================================================================================
//! Defines a view of one or more SpatialModels, which supports a camera that displays
//! world-coordinate geometry onto the image plane through a perspective projection.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE CameraViewDefinition : SpatialViewDefinition
{
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_CameraViewDefinition, SpatialViewDefinition);
    friend struct dgn_ElementHandler::CameraViewDef;
	
protected:
    explicit CameraViewDefinition(CreateParams const& params) : T_Super(params) { }
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;
    CameraViewDefinitionCP _ToCameraView() const {return this;}

public:
    //! Construct a new CameraViewDefinition prior to inserting it 
    //! @param db   The DgnDb where the caller plans to insert this view definition
    //! @param name A unique name for this view definition
    CameraViewDefinition(DgnDbR db, Utf8StringCR name) : T_Super(CreateParams(db, CreateCode(name), QueryClassId(db))) {}

    //! Look up the ECClass ID used for CameraViewDefinitions within the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) {return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_CameraViewDefinition));}

    DGNPLATFORM_EXPORT DPoint3d GetBackOrigin() const {return GetPropertyValueDPoint3d("BackOrigin");} //!< Get the origin of the focus plane projected to the back plane
    DGNPLATFORM_EXPORT double GetWidth() const {return GetPropertyValueDouble("Width");} //!< Get the extent in x on the focus plane in meters
    DGNPLATFORM_EXPORT double GetHeight() const {return GetPropertyValueDouble("Height");} //!< Get the extent in y on the focus plane in meters
    DGNPLATFORM_EXPORT double GetDepth() const {return GetPropertyValueDouble("Depth");} //!< Get the distance between front and back planes in meters
    DGNPLATFORM_EXPORT DPoint3d GetEyePoint() const {return GetPropertyValueDPoint3d("EyePoint");}  //!< Get the camera eye point
    DGNPLATFORM_EXPORT double GetLensAngle() const {return GetPropertyValueDouble("LensAngle");} //!< Get the camera lens angle in degrees
    DGNPLATFORM_EXPORT double GetFocusDistance() const {return GetPropertyValueDouble("FocusDistance");} //!< Get the camera focus distance in meters
    DGNPLATFORM_EXPORT YawPitchRollAngles GetViewDirection() const {return GetPropertyValueYpr("DirectionYaw", "DirectionPitch", "DirectionRoll");} //!< Get the view direction

    DGNPLATFORM_EXPORT DgnDbStatus SetBackOrigin(DPoint3dCR pt) {return SetPropertyValue("BackOrigin", pt);} //!< Set the origin of the focus plane projected to the back plane
    DGNPLATFORM_EXPORT DgnDbStatus SetWidth(double v) {return SetPropertyValue("Width", v);} //!< Set the extent in x on the focus plane in meters
    DGNPLATFORM_EXPORT DgnDbStatus SetHeight(double v) {return SetPropertyValue("Height", v);} //!< Set the extent in y on the focus plane in meters
    DGNPLATFORM_EXPORT DgnDbStatus SetDepth(double v) {return SetPropertyValue("Depth", v);} //!< Set the distance between front and back planes in meters
    DGNPLATFORM_EXPORT DgnDbStatus SetEyePoint(DPoint3dCR pt) {return SetPropertyValue("EyePoint", pt);} //!< Set the camera eye point
    DGNPLATFORM_EXPORT DgnDbStatus SetLensAngle(double v) {return SetPropertyValue("LensAngle", v);} //!< Set the camera lens angle in degrees
    DGNPLATFORM_EXPORT DgnDbStatus SetFocusDistance(double v) {return SetPropertyValue("FocusDistance", v);} //!< Set the camera focus distance in meters
    DGNPLATFORM_EXPORT DgnDbStatus SetViewDirection(YawPitchRollAnglesCR angles) {return SetPropertyValueYpr(angles, "DirectionYaw", "DirectionPitch", "DirectionRoll");} //!< Set the view direction

                                                                                                                                                                          //! Set the view direction to one of the standard rotations
    DGNPLATFORM_EXPORT DgnDbStatus SetStandardViewDirection(StandardView standardView);
};

//=======================================================================================
//! Defines a view of a 2d model.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewDefinition2d : ViewDefinition
{
    DEFINE_T_SUPER(ViewDefinition);
protected:
    DGNPLATFORM_EXPORT virtual void _RemapIds(DgnImportContext& importer) override;
protected:
    bool _ViewsModel(DgnModelId mid) const override {return mid == GetBaseModelId();}

    explicit ViewDefinition2d(CreateParams const& params) : T_Super(params) {}
public:
    ViewDefinition2d(DgnDbR db, Utf8StringCR name, DgnClassId classId, DgnModelId baseModelId) 
        : T_Super(CreateParams(db, ViewDefinition::CreateCode(name), classId)) 
        {
        SetBaseModelId(baseModelId);
        }
    DGNPLATFORM_EXPORT bool IsBaseModelValid() const;
    DgnModelId GetBaseModelId() const { return GetPropertyValueId<DgnModelId>("BaseModel"); } //!< Get ID of base model
    DgnDbStatus SetBaseModelId(DgnModelId value) { return SetPropertyValue("BaseModel", value); } //!< Set ID of base model
    DPoint2d GetOrigin() const { return GetPropertyValueDPoint2d("Origin"); } //!< Get lower left corner of the viewed area.
    DgnDbStatus SetOrigin(DPoint2dCR value) { return SetPropertyValue("Origin", value); } //!< Set lower left corner of the viewed area.
    DVec2d GetExtents() const { return DVec2d::From(GetPropertyValueDPoint2d("Extents")); } //!< Get size of the view diagonal
    DgnDbStatus SetExtents(DVec2dCR value) { return SetPropertyValue("Extents", DPoint2d::From(value.x,value.y)); } //!< Set size of the view diagonal
    AngleInDegrees GetRotationAngle() const { return AngleInDegrees::FromDegrees(GetPropertyValueDouble("RotationAngle")); } //!< Get rotation angle in degrees of the viewed area.
    DgnDbStatus SetRotationAngle(AngleInDegrees const& value) { return SetPropertyValue("RotationAngle", value.Degrees()); } //!< Set rotation angle in degrees of the viewed area.

    static DgnDbStatus OnModelDelete(DgnDbR, DgnModelId);
    };

//=======================================================================================
//! Defines a view of a DrawingModel.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE DrawingViewDefinition : ViewDefinition2d
{
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_DrawingViewDefinition, ViewDefinition2d);
    friend struct dgn_ElementHandler::DrawingViewDef;

protected:
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;

    virtual DrawingViewDefinitionCP _ToDrawingView() const override { return this; }

    //! Construct a DrawingViewDefinition from the supplied params prior to loading
    explicit DrawingViewDefinition(CreateParams const& params) : T_Super(params) {}
    
public:
    //! Construct a DrawingViewDefinition subclass prior to inserting it
    DrawingViewDefinition(DgnDbR db, Utf8StringCR name, DgnClassId classId, DgnModelId baseModelId) : T_Super(db, name, classId, baseModelId) { ; }

    //! Construct a DrawingViewDefinition prior to inserting it
    DrawingViewDefinition(DgnDbR db, Utf8StringCR name, DgnModelId baseModelId) : T_Super(db, name, QueryClassId(db), baseModelId) {;}

    //! Look up the ECClass ID used for DrawingViewDefinitions in the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_DrawingViewDefinition)); }
};

//=======================================================================================
//! Defines a view of a SheetModel
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE SheetViewDefinition : ViewDefinition2d
{
    DGNELEMENT_DECLARE_MEMBERS(BIS_CLASS_SheetViewDefinition, ViewDefinition2d);
    friend struct dgn_ElementHandler::SheetViewDef;

protected:
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;

    virtual SheetViewDefinitionCP _ToSheetView() const { return this; }
    
    //! Construct a SheetViewDefinition from the supplied params prior to loading it
    explicit SheetViewDefinition(CreateParams const& params) : T_Super(params) {}

public:
    //! Construct a new SheetViewDefinition subclass prior to inserting it
    SheetViewDefinition(DgnDbR db, Utf8StringCR name, DgnClassId classId, DgnModelId baseModelId) : T_Super(db, name, classId, baseModelId) { ; }

    //! Construct a new SheetViewDefinition prior to inserting it
    SheetViewDefinition(DgnDbR db, Utf8StringCR name, DgnModelId baseModelId) : T_Super(db, name, QueryClassId(db), baseModelId) {;}

    //! Look up the ECClass ID used for SheetViewDefinitions in the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_SheetViewDefinition)); }
};

namespace dgn_ElementHandler
{
    struct OrthographicViewDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_OrthographicViewDefinition, OrthographicViewDefinition, OrthographicViewDef, Definition, DGNPLATFORM_EXPORT);
    };

    struct CameraViewDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_CameraViewDefinition, CameraViewDefinition, CameraViewDef, Definition, DGNPLATFORM_EXPORT);
    };

    struct DrawingViewDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_DrawingViewDefinition, DrawingViewDefinition, DrawingViewDef, Definition, DGNPLATFORM_EXPORT);
    };

    struct SheetViewDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_SheetViewDefinition, SheetViewDefinition, SheetViewDef, Definition, DGNPLATFORM_EXPORT);
    };

    struct ModelSelectorDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_ModelSelector, ModelSelector, ModelSelectorDef, Definition, DGNPLATFORM_EXPORT);
    };

    struct CategorySelectorDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_CategorySelector, CategorySelector, CategorySelectorDef, Definition, DGNPLATFORM_EXPORT);
    };
    struct DisplayStyleDef : Definition
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(BIS_CLASS_DisplayStyle, DisplayStyle, DisplayStyleDef, Definition, DGNPLATFORM_EXPORT);
    };
};

typedef dgn_ElementHandler::CameraViewDef CameraViewHandler;
typedef dgn_ElementHandler::DrawingViewDef DrawingViewHandler;
typedef dgn_ElementHandler::SheetViewDef SheetViewHandler;

//=======================================================================================
//! Handler extension applied to a ViewDefinition handler to override the type of
//! ViewController supplied for ViewDefinitions of that handler's type.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewControllerOverride : DgnDomain::Handler::Extension
{
    HANDLER_EXTENSION_DECLARE_MEMBERS(ViewControllerOverride, DGNPLATFORM_EXPORT);
public:
    //! @param[in] view The ViewDefinition
    //! @return an instance of a ViewController for the supplied ViewDefinition, or nullptr if the ViewDefinition is not of interest.
    virtual ViewControllerPtr _SupplyController(ViewDefinitionCR view) = 0;
};

ENUM_IS_FLAGS(ViewDefinition::Iterator::Options::Source);

END_BENTLEY_DGN_NAMESPACE

