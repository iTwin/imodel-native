/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/DgnPlatform/DgnView.h $
|
|  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

#include "DgnDb.h"
#include "DgnElement.h"
#include "ElementHandler.h"
#include "ECSqlStatementIterator.h"

#define DGN_CLASSNAME_ViewDefinition "ViewDefinition"
#define DGN_CLASSNAME_SpatialViewDefinition "SpatialViewDefinition"
#define DGN_CLASSNAME_CameraViewDefinition "CameraViewDefinition"
#define DGN_CLASSNAME_DrawingViewDefinition "DrawingViewDefinition"
#define DGN_CLASSNAME_SheetViewDefinition "SheetViewDefinition"
#define DGN_CLASSNAME_RedlineViewDefinition "RedlineViewDefinition"

BEGIN_BENTLEY_DGNPLATFORM_NAMESPACE

//=======================================================================================
//! The source for the creation a ViewDefinition.
//! @ingroup DgnViewGroup
//=======================================================================================
enum class DgnViewSource
{
    User      = 1<<0,      //!< created by a user
    Generated = 1<<1,      //!< automatically generated by a program, may be relevant to user
    Private   = 1<<2,      //!< used internally and should not be presented to user
};

//=======================================================================================
//! Holds the definition of a view.
//! @ingroup DgnViewGroup
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewDefinition : DictionaryElement
{
    DEFINE_T_SUPER(DictionaryElement);
public:
    //! Holds the data which describes a view definition
    struct Data
    {
    public:
        DgnModelId      m_baseModelId;
        Utf8String      m_descr;
        DgnViewSource   m_source;

        //! Constructor
        explicit Data(DgnModelId baseModelId=DgnModelId(), DgnViewSource source=DgnViewSource::User, Utf8StringCR descr="")
            {
            Init(baseModelId, source, descr);
            }

        //! Initializer
        void Init(DgnModelId baseModelId=DgnModelId(), DgnViewSource source=DgnViewSource::User, Utf8StringCR descr="")
            {
            m_baseModelId = baseModelId;
            m_descr = descr;
            m_source = source;
            }

        //! Calculate the number of bytes allocated to an instance of this class
        uint32_t GetMemSize() const { return static_cast<uint32_t>(sizeof(*this) + m_descr.length()); }
    };

    //! Parameters used to construct a ViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
    protected:
        CreateParams(DgnDbR db, DgnClassId classId, Code const& code, Data const& data, Utf8CP label=nullptr, DgnElementId parentId=DgnElementId())
            : T_Super(db, DgnModel::DictionaryId(), classId, code, label, parentId), m_data(data) {}

        DGNPLATFORM_EXPORT CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data);
    public:
        DEFINE_T_SUPER(ViewDefinition::T_Super::CreateParams);

        Data m_data; //!< The view-specific data

        //! Constructor from base CreateParams. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params), m_data(data) { }
    };
private:
    Data m_data;

    DgnDbStatus BindParams(BeSQLite::EC::ECSqlStatement& stmt);
    DgnDbStatus DeleteReferences() const;
    static bool IsValidCode(Code const& code);
protected:
    explicit ViewDefinition(CreateParams const& params) : T_Super(params), m_data(params.m_data) { }

    DGNPLATFORM_EXPORT virtual DgnDbStatus _ReadSelectParams(BeSQLite::EC::ECSqlStatement& statement, ECSqlClassParams const& selectParams) override;
    DGNPLATFORM_EXPORT virtual DgnDbStatus _BindInsertParams(BeSQLite::EC::ECSqlStatement& stmt) override;
    DGNPLATFORM_EXPORT virtual DgnDbStatus _BindUpdateParams(BeSQLite::EC::ECSqlStatement& stmt) override;
    DGNPLATFORM_EXPORT virtual void _CopyFrom(DgnElementCR source) override;
    DGNPLATFORM_EXPORT virtual DgnDbStatus _SetCode(Code const& code) override;

    virtual uint32_t _GetMemSize() const override { return T_Super::_GetMemSize() + m_data.GetMemSize(); }
    virtual Code _GenerateDefaultCode() override { return Code(); }

    DGNPLATFORM_EXPORT virtual DgnDbStatus _OnInsert() override;
    DGNPLATFORM_EXPORT virtual DgnDbStatus _OnUpdate(DgnElementCR) override;
    DGNPLATFORM_EXPORT virtual DgnDbStatus _OnDelete() const override;

    virtual DgnDbStatus _SetParentId(DgnElementId) override { return DgnDbStatus::InvalidParent; }
    virtual DgnDbStatus _OnChildInsert(DgnElementCR) const override { return DgnDbStatus::InvalidParent; }
    virtual DgnDbStatus _OnChildUpdate(DgnElementCR, DgnElementCR) const override { return DgnDbStatus::InvalidParent; }

    DGNPLATFORM_EXPORT virtual void _RemapIds(DgnImportContext& importer) override;

    virtual ViewControllerPtr _SupplyController() const = 0;
    virtual bool _IsValidBaseModel(DgnModelCR model) const { return true; }

    virtual SpatialViewDefinitionCP _ToSpatialView() const { return nullptr; }
    virtual DrawingViewDefinitionCP _ToDrawingView() const { return nullptr; }
    virtual SheetViewDefinitionCP _ToSheetView() const { return nullptr; }

    bool IsBaseModelValid() const;
public:
    DgnViewId GetViewId() const { return DgnViewId(GetElementId().GetValue()); } //!< This view definition's ID
    Utf8String GetName() const { return GetCode().GetValue(); } //!< The name of the view definition
    Utf8StringCR GetDescr() const { return m_data.m_descr; } //!< This view definition's description
    DgnViewSource GetSource() const { return m_data.m_source; } //!< This view definition's source
    DgnModelId GetBaseModelId() const { return m_data.m_baseModelId; } //!< This view definition's base model ID

    DgnDbStatus SetName(Utf8StringCR name) { return SetCode(CreateCode(name)); } //!< Change this view definition's name
    void SetDescr(Utf8StringCR descr) { m_data.m_descr = descr; } //!< Change this view definition's description
    void SetSource(DgnViewSource source) { m_data.m_source = source; } //!< Change this view definition's source
    void SetBaseModelId(DgnModelId modelId) { m_data.m_baseModelId = modelId; } //!< Change the base model ID

    //! Inserts into the database and returns the new persistent copy.
    ViewDefinitionCPtr Insert(DgnDbStatus* status=nullptr) { return GetDgnDb().Elements().Insert<ViewDefinition>(*this, status); }
    //! Updates in the database and returns the updated persistent copy.
    ViewDefinitionCPtr Update(DgnDbStatus* status=nullptr) { return GetDgnDb().Elements().Update<ViewDefinition>(*this, status); }

    //! Specifies whether or not models associated with a ViewDefinition should be filled when loading a ViewController
    enum class FillModels
    {
    No=0, //!< Don't fill models
    Yes=1 //!< Fill models
    };

    //! Instantiate a ViewController for this ViewDefinition in order to render the view
    DGNPLATFORM_EXPORT ViewControllerPtr LoadViewController(FillModels fillModels=FillModels::No) const;
    //! Instantiate a ViewController for the ViewDefinition with the specified ID in order to render the view
    DGNPLATFORM_EXPORT static ViewControllerPtr LoadViewController(DgnViewId viewId, DgnDbR db, FillModels fillModels=FillModels::No);

    //! Create a Code for a view with the specified name
    DGNPLATFORM_EXPORT static Code CreateCode(Utf8StringCR name);

    //! Look up the ID of the view with the specified Code
    DGNPLATFORM_EXPORT static DgnViewId QueryViewId(Code const& code, DgnDbR db);

    //! Look up the ID of the view with the specified name
    static DgnViewId QueryViewId(Utf8StringCR name, DgnDbR db) { return QueryViewId(CreateCode(name), db); }

    //! Look up a view by ID
    static ViewDefinitionCPtr QueryView(DgnViewId viewId, DgnDbR db) { return db.Elements().Get<ViewDefinition>(viewId); }

    //! Look up a view by name
    static ViewDefinitionCPtr QueryView(Utf8StringCR name, DgnDbR db) { return QueryView(QueryViewId(name, db), db); }

    static void AddClassParams(ECSqlClassParams& params); //!< @private

    //! Query the settings associated with the specified view as a JSON string
    DGNPLATFORM_EXPORT static BeSQLite::DbResult QuerySettings(Utf8StringR settings, DgnViewId viewId, DgnDbR db);
    //! Save the settings associated with the specified view as a JSON string
    DGNPLATFORM_EXPORT static BeSQLite::DbResult SaveSettings(Utf8StringCR settings, DgnViewId viewId, DgnDbR db);
    //! Delete the settings associated with the specified view
    DGNPLATFORM_EXPORT static BeSQLite::DbResult DeleteSettings(DgnViewId viewId, DgnDbR db);

    //! Query this view's settings as a JSON string
    BeSQLite::DbResult QuerySettings(Utf8StringR settings) const { return QuerySettings(settings, GetViewId(), GetDgnDb()); }
    //! Save this view's settings as a JSON string
    BeSQLite::DbResult SaveSettings(Utf8StringCR settings) const { return SaveSettings(settings, GetViewId(), GetDgnDb()); }
    //! Delete this view's settings
    BeSQLite::DbResult DeleteSettings() const { return DeleteSettings(GetViewId(), GetDgnDb()); }

    DGNVIEW_EXPORT BeSQLite::DbResult RenderAndSaveThumbnail(int resolution, Render::RenderMode renderModeOverride) const;

    //! An entry in an iterator over the views in a DgnDb
    struct Entry : ECSqlStatementEntry
    {
        friend struct ECSqlStatementIterator<Entry>;
        friend struct DgnView;
    private:
        Entry(BeSQLite::EC::ECSqlStatement* stmt=nullptr) : ECSqlStatementEntry(stmt) { }
    public:
        DgnViewId GetId() const { return m_statement->GetValueId<DgnViewId>(0); } //!< The view ID
        Utf8CP GetName() const { return m_statement->GetValueText(1); } //!< The name of the view
        DgnViewSource GetSource() const { return static_cast<DgnViewSource>(m_statement->GetValueInt(2)); } //!< The view source
        DgnModelId GetBaseModelId() const { return m_statement->GetValueId<DgnModelId>(3); } //!< The view's base model
        Utf8CP GetDescr() const { return m_statement->GetValueText(4); } //!< The view's description
        DgnClassId GetClassId() const { return m_statement->GetValueId<DgnClassId>(5); } //!< The view's ECClass ID

        DGNPLATFORM_EXPORT bool IsSpatialView() const;
        DGNPLATFORM_EXPORT bool IsDrawingView() const;
        DGNPLATFORM_EXPORT bool IsSheetView() const;
    };

    //! An iterator over the view definitions stored in a DgnDb
    struct Iterator : ECSqlStatementIterator<Entry>
    {
        // Options controlling ViewDefinition iteration
        struct Options
        {
            //! Defines the order in which results should be returned
            enum class Order : uint8_t
            {
                Unordered, //!< No meaningful order
                Ascending, //!< Order by name ascending
            };

            //! Defines the view source(s) to include in the query
            enum class Source : uint8_t
            {
                User = (uint8_t)DgnViewSource::User, //!< Include user-defined views
                Generated = (uint8_t)DgnViewSource::Generated, //!< Include program-generated views
                Private = (uint8_t)DgnViewSource::Private, //!< Include internally-defined views
                All = User | Generated | Private, //!< Include views from all sources
            };
        private:
            Utf8String m_customECSql;
            DgnModelId m_baseModelId;
            Order m_order;
            Source m_source;

            Options(DgnModelId baseModelId, Order order, Source source, Utf8StringCR ecsql)
                : m_customECSql(ecsql), m_baseModelId(baseModelId), m_order(order), m_source(source) { }
        public:
            //! Constructor
            //! @param[in]      baseModelId Optional base model ID by which to filter
            //! @param[in]      order       Optional order in which to return results
            //! @param[in]      source      Optional view source(s) to include
            explicit Options(DgnModelId baseModelId=DgnModelId(), Order order=Order::Unordered, Source source=Source::All) : Options(baseModelId, order, source, Utf8String()) { }

            //! Constructor
            //! @param[in]      source      View source by which to filter
            //! @param[in]      order       Optional order in which to return results
            //! @param[in]      baseModelId Optional base model ID by which to filter
            explicit Options(Source source, Order order=Order::Unordered, DgnModelId baseModelId=DgnModelId()) : Options(baseModelId, order, source, Utf8String()) { }

            //! Constructor
            //! @param[in]      ecsql Custom ECSql which is to be appended to the SELECT statement
            explicit Options(Utf8StringCR ecsql) : Options(DgnModelId(), Order::Unordered, Source::All, ecsql) { }

            //! Returns true if these options do not restrict the results
            bool IsEmpty() const { return m_customECSql.empty() && !m_baseModelId.IsValid() && Order::Unordered == m_order && Source::All == m_source; }

            //! Convert these options to an ECSql string
            Utf8String ToString() const;
        };

        //! Construct an iterator over the view definitions within the specified DgnDb
        DGNPLATFORM_EXPORT Iterator(DgnDbR db, Options const& options);
    };

    //! Create an iterator over the view definitions within the specified DgnDb
    static Iterator MakeIterator(DgnDbR db, Iterator::Options const& options=Iterator::Options()) { return Iterator(db, options); }

    //! Return the number of view definitions in the specific DgnDb
    DGNPLATFORM_EXPORT static size_t QueryCount(DgnDbR db, Iterator::Options const& options=Iterator::Options());

    bool IsSpatialView() const { return nullptr != _ToSpatialView(); }
    bool IsDrawingView() const { return nullptr != _ToDrawingView(); }
    bool IsSheetView() const { return nullptr != _ToSheetView(); }
    SpatialViewDefinitionCP ToSpatialView() const { return _ToSpatialView(); }
    DrawingViewDefinitionCP ToDrawingView() const { return _ToDrawingView(); }
    SheetViewDefinitionCP ToSheetView() const { return _ToSheetView(); }
    SpatialViewDefinitionP ToSpatialViewP() { return const_cast<SpatialViewDefinitionP>(ToSpatialView()); }
    DrawingViewDefinitionP ToDrawingViewP() { return const_cast<DrawingViewDefinitionP>(ToDrawingView()); }
    SheetViewDefinitionP ToSheetViewP() { return const_cast<SheetViewDefinitionP>(ToSheetView()); }

    ViewControllerPtr LoadViewController(bool allowOverrides, FillModels fillModels) const; //!< @private
};

//=======================================================================================
//! Defines a view of one or more SpatialModels.
//! The list of viewed models is stored in the view's settings in the DgnDb's settings
//! table.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE SpatialViewDefinition : ViewDefinition
{
    DGNELEMENT_DECLARE_MEMBERS(DGN_CLASSNAME_SpatialViewDefinition, ViewDefinition);
public:
    //! Parameters for initializing a SpatialViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(SpatialViewDefinition::T_Super::CreateParams);
    protected:
        CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data) : T_Super(db, code, classId, data) { }
    public:
        //! Constructor from base CreateParams. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params, data) { }
        //! Constructor
        CreateParams(DgnDbR db, Utf8StringCR name, Data const& data) : CreateParams(db, ViewDefinition::CreateCode(name), SpatialViewDefinition::QueryClassId(db), data) { }
    };
protected:
    virtual SpatialViewDefinitionCP _ToSpatialView() const override { return this; }
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;
public:
    //! Construct a SpatialViewDefinition from the supplied params
    explicit SpatialViewDefinition(CreateParams const& params) : T_Super(params) { }

    //! Look up the ECClass ID used for SpatialViewDefinitions within the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(DGN_ECSCHEMA_NAME, DGN_CLASSNAME_SpatialViewDefinition)); }
};

//=======================================================================================
//! Defines a view of one or more SpatialModels, which supports a camera that displays
//! world-coordinate geometry onto the image plane through a perspective projection.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE CameraViewDefinition : SpatialViewDefinition
{
    DGNELEMENT_DECLARE_MEMBERS(DGN_CLASSNAME_CameraViewDefinition, SpatialViewDefinition);
public:
    //! Parameters for initializing a CameraViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(CameraViewDefinition::T_Super::CreateParams);
    protected:
        CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data) : T_Super(db, code, classId, data) { }
    public:
        //! Constructor from base CreateParams. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params, data) { }
        //! Constructor
        CreateParams(DgnDbR db, Utf8StringCR name, Data const& data) : CreateParams(db, ViewDefinition::CreateCode(name), CameraViewDefinition::QueryClassId(db), data) { }
    };
public:
    //! Construct a CameraViewDefinition from the supplied params
    explicit CameraViewDefinition(CreateParams const& params) : T_Super(params) { }

    //! Look up the ECClass ID used for CameraViewDefinitions within the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(DGN_ECSCHEMA_NAME, DGN_CLASSNAME_CameraViewDefinition)); }
};

//=======================================================================================
//! Defines a view of a 2d model.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewDefinition2d : ViewDefinition
{
    DEFINE_T_SUPER(ViewDefinition);
protected:
    explicit ViewDefinition2d(CreateParams const& params) : T_Super(params) { }
};

//=======================================================================================
//! Defines a view of a DrawingModel.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE DrawingViewDefinition : ViewDefinition2d
{
    DGNELEMENT_DECLARE_MEMBERS(DGN_CLASSNAME_DrawingViewDefinition, ViewDefinition2d);
public:
    //! Parameters used to construct a DrawingViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(DrawingViewDefinition::T_Super::CreateParams);
    protected:
        CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data) : T_Super(db, code, classId, data) { }
    public:
        //! Constructor from base params. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params, data) { }
        //! Constructor
        CreateParams(DgnDbR db, Utf8StringCR name, Data const& data) : CreateParams(db, ViewDefinition::CreateCode(name), DrawingViewDefinition::QueryClassId(db), data) { }
    };
protected:
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;

    virtual DrawingViewDefinitionCP _ToDrawingView() const override { return this; }
public:
    //! Construct a DrawingViewDefinition from the supplied params
    explicit DrawingViewDefinition(CreateParams const& params) : T_Super(params) { }

    //! Look up the ECClass ID used for DrawingViewDefinitions in the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(DGN_ECSCHEMA_NAME, DGN_CLASSNAME_DrawingViewDefinition)); }
};

//=======================================================================================
//! Defines a view of a SheetModel
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE SheetViewDefinition : ViewDefinition2d
{
    DGNELEMENT_DECLARE_MEMBERS(DGN_CLASSNAME_SheetViewDefinition, ViewDefinition2d);
public:
    //! Parameters used to construct a SheetViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(SheetViewDefinition::T_Super::CreateParams);
    protected:
        CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data) : T_Super(db, code, classId, data) { }
    public:
        //! Constructor from base params. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params, data) { }
        //! Constructor
        CreateParams(DgnDbR db, Utf8StringCR name, Data const& data) : CreateParams(db, ViewDefinition::CreateCode(name), SheetViewDefinition::QueryClassId(db), data) { }
    };
protected:
    DGNPLATFORM_EXPORT ViewControllerPtr _SupplyController() const override;

    virtual SheetViewDefinitionCP _ToSheetView() const { return this; }
public:
    //! Construct a SheetViewDefinition from the supplied params
    explicit SheetViewDefinition(CreateParams const& params) : T_Super(params) {}

    //! Look up the ECClass ID used for SheetViewDefinitions in the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(DGN_ECSCHEMA_NAME, DGN_CLASSNAME_SheetViewDefinition)); }
};

//=======================================================================================
//! Defines a view of a RedlineModel
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE RedlineViewDefinition : SheetViewDefinition
{
    DGNELEMENT_DECLARE_MEMBERS(DGN_CLASSNAME_RedlineViewDefinition, SheetViewDefinition);
public:
    //! Parameters used to construct a RedlineViewDefinition
    struct CreateParams : T_Super::CreateParams
    {
        DEFINE_T_SUPER(RedlineViewDefinition::T_Super::CreateParams);
    protected:
        CreateParams(DgnDbR db, Code const& code, DgnClassId classId, Data const& data) : T_Super(db, code, classId, data) { }
    public:
        //! Constructor from base params. Chiefly for internal use.
        explicit CreateParams(DgnElement::CreateParams const& params, Data const& data=Data()) : T_Super(params, data) { }
        //! Constructor
        CreateParams(DgnDbR db, Utf8StringCR name, Data const& data) : CreateParams(db, ViewDefinition::CreateCode(name), RedlineViewDefinition::QueryClassId(db), data) { }
    };

    //! Construct a RedlineViewDefinition from the supplied params
    explicit RedlineViewDefinition(CreateParams const& params) : T_Super(params) { }

    //! Look up the ECClass ID used for RedlineViewDefinitions in the specified DgnDb
    static DgnClassId QueryClassId(DgnDbR db) { return DgnClassId(db.Schemas().GetECClassId(DGN_ECSCHEMA_NAME, DGN_CLASSNAME_RedlineViewDefinition)); }
};

namespace dgn_ElementHandler
{
    //=======================================================================================
    //! The handler for SpatialViewDefinition elements
    // @bsiclass                                                      Paul.Connelly   10/15
    //=======================================================================================
    struct SpatialViewDef : Element
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(DGN_CLASSNAME_SpatialViewDefinition, SpatialViewDefinition, SpatialViewDef, Element, DGNPLATFORM_EXPORT);
    protected:
        DGNPLATFORM_EXPORT virtual void _GetClassParams(ECSqlClassParams& params) override;
    };

    //=======================================================================================
    //! The handler for CameraViewDefinition elements
    // @bsiclass                                                      Paul.Connelly   10/15
    //=======================================================================================
    struct CameraViewDef : SpatialViewDef
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(DGN_CLASSNAME_CameraViewDefinition, CameraViewDefinition, CameraViewDef, SpatialViewDef, DGNPLATFORM_EXPORT);
    };

    //=======================================================================================
    //! The handler for DrawingViewDefinition elements
    // @bsiclass                                                      Paul.Connelly   10/15
    //=======================================================================================
    struct DrawingViewDef : Element
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(DGN_CLASSNAME_DrawingViewDefinition, DrawingViewDefinition, DrawingViewDef, Element, DGNPLATFORM_EXPORT);
    protected:
        DGNPLATFORM_EXPORT virtual void _GetClassParams(ECSqlClassParams& params) override;
    };

    //=======================================================================================
    //! The handler for SheetViewDefinition elements
    // @bsiclass                                                      Paul.Connelly   10/15
    //=======================================================================================
    struct SheetViewDef : Element
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(DGN_CLASSNAME_SheetViewDefinition, SheetViewDefinition, SheetViewDef, Element, DGNPLATFORM_EXPORT);
    protected:
        DGNPLATFORM_EXPORT virtual void _GetClassParams(ECSqlClassParams& params) override;
    };

    //=======================================================================================
    //! The handler for RedlineViewDefinition elements
    // @bsiclass                                                      Paul.Connelly   10/15
    //=======================================================================================
    struct RedlineViewDef : SheetViewDef
    {
        ELEMENTHANDLER_DECLARE_MEMBERS(DGN_CLASSNAME_RedlineViewDefinition, RedlineViewDefinition, RedlineViewDef, SheetViewDef, DGNPLATFORM_EXPORT);
    };
};

typedef dgn_ElementHandler::SpatialViewDef SpatialViewHandler;
typedef dgn_ElementHandler::DrawingViewDef DrawingViewHandler;
typedef dgn_ElementHandler::SheetViewDef SheetViewHandler;

//=======================================================================================
//! Handler extension applied to a ViewDefinition handler to override the type of
//! ViewController supplied for ViewDefinitions of that handler's type.
// @bsiclass                                                      Paul.Connelly   10/15
//=======================================================================================
struct EXPORT_VTABLE_ATTRIBUTE ViewControllerOverride : DgnDomain::Handler::Extension
{
    HANDLER_EXTENSION_DECLARE_MEMBERS(ViewControllerOverride, DGNPLATFORM_EXPORT);
public:
    //! @param[in] view The ViewDefinition
    //! @return an instance of a ViewController for the supplied ViewDefinition, or nullptr if the ViewDefinition is not of interest.
    virtual ViewControllerPtr _SupplyController(ViewDefinitionCR view) = 0;
};

ENUM_IS_FLAGS(ViewDefinition::Iterator::Options::Source);

END_BENTLEY_DGNPLATFORM_NAMESPACE

