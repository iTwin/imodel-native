/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/DgnPlatform/DesktopTools/pagalloc.fdf $
|
|  $Copyright: (c) 2014 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/

#pragma once
/*__BENTLEY_INTERNAL_ONLY__*/
#include <Bentley/Bentley.r.h>

#if !defined (mdl)
#   include <RmgrTools/Tools/pagstruc.h>
#   ifndef PAGALLOC_API
#       define PAGALLOC_API     __declspec(dllimport)
#   endif
#   define PAGALLOC_CDECL   __cdecl
#else
#   define PAGALLOC_CDECL
#   define PAGALLOC_API
    typedef unsigned long DWORD;
    typedef void *CallStackFrame;
#endif

typedef enum
    {
    PAGALLOC_SortBySize = 0,
    PAGALLOC_SortByCount
    } PagallocSortType;


#if defined (__cplusplus)
extern "C" {
#endif
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_dump (void *badPtr);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_dumpSince(uint32_t count);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_dumpModules(void);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_showFullCallStack  ();
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_dumpModuleHeader (void *allocationBase, size_t regionSize);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_dumpSinceAsync (uint32_t count);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_detectLeaks       (void);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_resetLeakDetect   (void);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_setSinceBase      (uint32_t const beginningMallocCount);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_displayStatistics (void);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_showCallStack     (void const * const rawAddressOfAllocation);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_showCallStackSince(void const * const rawAddressOfAllocation, uint32_t const showCallStartSerialNumber);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_setLeakDetectDisplayLimit (uint32_t const  maxLeakersToDisplay, uint32_t const  maxLeakersToDetail);
PAGALLOC_API int32_t         PAGALLOC_CDECL pagalloc_isInitialized     (void);
PAGALLOC_API int32_t         PAGALLOC_CDECL pagalloc_addFunctionByDllAndNameToExclusionList  (WCharCP dllName, WCharCP funcName);
PAGALLOC_API int32_t         PAGALLOC_CDECL pagalloc_addFunctionByAddressToExclusionList (size_t const funcAddress);
PAGALLOC_API uint32_t        PAGALLOC_CDECL pagalloc_setUserAuxiliaryValue (uint32_t const newUserAuxiliaryValue,  void const * const notYet);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_showFullCallStack2 (CallStackFrame  *pFrame);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_setSortType (PagallocSortType  sortType);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_initializeGDIMonitor (void); // Only works on debug build.
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_showGDILeaks (void);
PAGALLOC_API void            PAGALLOC_CDECL pagalloc_setGDISinceBase (uint32_t beginningGDICount);


typedef void  ( *PagallocOutputFunction) (char const * const outputBuffer);          // WIP_CHAR_OK Doesn't seem worth it to update all the debugging IO in pagalloc.
PAGALLOC_API PagallocOutputFunction const  PAGALLOC_CDECL pagalloc_setOutputFunction (PagallocOutputFunction  const  pof);
PAGALLOC_API PagallocOutputFunction const  PAGALLOC_CDECL pagalloc_setNativeOutputFunction (PagallocOutputFunction  const  pof);


#if _MSC_VER <= 1400
/*-----------------------------------------------------------------------
 Critical Section tracking.
-----------------------------------------------------------------------*/
PAGALLOC_API  int32_t pagalloc_trackCriticalSections
(
int32_t const enableTracking                                                          // TRUE to enable tracking
);

PAGALLOC_API  void  pagalloc_symbolizeAllCriticalSections   (void);
#endif

#if defined (__cplusplus)
}
#endif
