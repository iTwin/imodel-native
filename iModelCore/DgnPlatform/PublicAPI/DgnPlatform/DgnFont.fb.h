//__BENTLEY_INTERNAL_ONLY__  
//--------------------------------------------------------------------------------------
//     $Source: PublicAPI/DgnPlatform/DgnFont.fb.h $
//  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
//--------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DGNFONT_BENTLEYG06_DGNPLATFORM_FB_H_
#define FLATBUFFERS_GENERATED_DGNFONT_BENTLEYG06_DGNPLATFORM_FB_H_

#include "flatbuffers/flatbuffers.h"


namespace BentleyG06 {
namespace Dgn {
namespace FB {

struct DgnRscFont;

struct DgnRscFont : private flatbuffers::Table {
  uint8_t majorVersion() const { return GetField<uint8_t>(4, 0); }
  uint8_t minorVersion() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<uint8_t> *header() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(8); }
  const flatbuffers::Vector<uint8_t> *fractionMap() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(10); }
  const flatbuffers::Vector<uint8_t> *glyphData() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(12); }
  const flatbuffers::Vector<uint8_t> *glyphDataOffsets() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(14); }
  const flatbuffers::Vector<uint8_t> *glyphHeaders() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* majorVersion */) &&
           VerifyField<uint8_t>(verifier, 6 /* minorVersion */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* header */) &&
           verifier.Verify(header()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* fractionMap */) &&
           verifier.Verify(fractionMap()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* glyphData */) &&
           verifier.Verify(glyphData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* glyphDataOffsets */) &&
           verifier.Verify(glyphDataOffsets()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* glyphHeaders */) &&
           verifier.Verify(glyphHeaders()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(4); }
  bool has_minorVersion() const { return CheckField(6); }
  bool has_header() const { return CheckField(8); }
  bool has_fractionMap() const { return CheckField(10); }
  bool has_glyphData() const { return CheckField(12); }
  bool has_glyphDataOffsets() const { return CheckField(14); }
  bool has_glyphHeaders() const { return CheckField(16); }
};

struct DgnRscFontBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) { fbb_.AddElement<uint8_t>(4, majorVersion, 0); }
  void add_minorVersion(uint8_t minorVersion) { fbb_.AddElement<uint8_t>(6, minorVersion, 0); }
  void add_header(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> header) { fbb_.AddOffset(8, header); }
  void add_fractionMap(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fractionMap) { fbb_.AddOffset(10, fractionMap); }
  void add_glyphData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphData) { fbb_.AddOffset(12, glyphData); }
  void add_glyphDataOffsets(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphDataOffsets) { fbb_.AddOffset(14, glyphDataOffsets); }
  void add_glyphHeaders(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphHeaders) { fbb_.AddOffset(16, glyphHeaders); }
  DgnRscFontBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DgnRscFontBuilder &operator=(const DgnRscFontBuilder &);
  flatbuffers::Offset<DgnRscFont> Finish() {
    auto o = flatbuffers::Offset<DgnRscFont>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<DgnRscFont> CreateDgnRscFont(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t majorVersion = 0,
   uint8_t minorVersion = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> header = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fractionMap = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphData = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphDataOffsets = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphHeaders = 0) {
  DgnRscFontBuilder builder_(_fbb);
  builder_.add_glyphHeaders(glyphHeaders);
  builder_.add_glyphDataOffsets(glyphDataOffsets);
  builder_.add_glyphData(glyphData);
  builder_.add_fractionMap(fractionMap);
  builder_.add_header(header);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace DgnPlatform
}  // namespace BentleyG06

#endif  // FLATBUFFERS_GENERATED_DGNFONT_BENTLEYG06_DGNPLATFORM_FB_H_
