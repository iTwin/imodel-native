#----------------------------------------------------------------------
#
#     $Source: DgnPlatform.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#----------------------------------------------------------------------
baseDir         = $(_MakeFilePath)
PolicyFile      = $(SrcRoot)DgnPlatform/privmki/AssertDgnPlatformPolicy.mki

SolutionPolicyMki=$(baseDir)DgnPlatform.mki

%include  mdl.mki

# DLM_NAME set in DgnPlatform.mki
DLM_OBJECT_DEST       = $(dgnPlatformObj)
ASSEMBLY_STRONGNAME   = 1

DgnCoreDir      = $(baseDir)DgnCore/
DgnHandlersDir  = $(baseDir)DgnHandlers/
PrivateAPIDir   = $(baseDir)PrivateApi/

fontMgrDir       = $(DgnCoreDir)DgnFontManager/
dependencyDir    = $(DgnCoreDir)dependency/
lineStyleDir     = $(DgnCoreDir)linestyle/

DgnPlatformInternalDir = $(DgnCoreDir)../PrivateApi/DgnPlatformInternal/

dimensionDir    = $(DgnHandlersDir)Dimension/
markupDir       = $(DgnHandlersDir)Markup/

contextDepends  =   $(DgnCoreAPISrc)ElementAgenda.h         \
                    $(DgnCoreAPISrc)ViewContext.h           \
                    $(DgnCoreAPISrc)IViewOutput.h           \
                    $(DgnCoreAPISrc)IViewDraw.h             \
                    $(DgnCoreAPISrc)DgnViewport.h

VewControllerDepends = $(DgnCoreAPISrc)ViewController.h $(DgnCoreAPISrc)ViewContext.h

HandlerDepends  =   $(DgnCoreAPISrc)ElementHandler.h \
                    $(contextDepends)

RealityDataHandlerDepends = $(DgnCoreAPISrc)DgnViewport.h $(DgnCoreAPISrc)RealityDataCache.h

WebMercatorDepends = $(DgnCoreAPISrc)WebMercator.h $(DgnCoreAPISrc)DgnDbTables.h


txnManagerDepends = $(DgnCoreAPISrc)ITxnManager.h
RmgrToolsPublicApi=$(BuildContext)PublicAPI/RmgrTools/
toolsHeaders   = $(DgnPlatformToolsPublicApiSrc)KeyTree.h
dgnfileioBaseH = $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnModel.h $(DgnCoreAPISrc)DgnElement.h
DgnFileIOH     = $(DgnCoreAPISrc)ScanCriteria.h $(dgnfileioBaseH) $(toolsHeaders)
LsLocalDepends = $(DgnCoreAPISrc)LsLocal.h $(DgnCoreAPISrc)LineStyle.h $(contextDepends)

EnablerDepends =    $(HandlerDepends) \
                    $(DgnPlatformAPISrc)DgnHandlers/IManipulator.h \
                    $(DgnPlatformAPISrc)DgnHandlers/IModifyElement.h

HandlerImplDepends = $(EnablerDepends)                          \
                    $(DgnPlatformAPISrc)DgnCore/ElementHandle.h \

#---------------------------------------------------------
#  Set up for signing
#---------------------------------------------------------
RIGHTSCOMPLIANT = true
%include $(SrcDgnPlatform)privmki/DgnPlatformSignatureDefaults.mki

#----------------------------------------------------------------------
#       Location for objects
#----------------------------------------------------------------------
coreObjs =% $(dgnPlatformBuildDir_)DgnCore/
handlerObjs =% $(dgnPlatformBuildDir_)DgnHandlers/
o = $(dgnPlatformObj)

always:
    !~@mkdir $(o)
     ~@mkdir $(coreObjs)
     ~@mkdir $(handlerObjs)
     ~@mkdir $(handlerObjs)GeneratedSource/

#----------------------------------------------------------------------
#       Inform user of compile options
#----------------------------------------------------------------------
always:
        |  Compiler options: $(cDefs)$(cDefsPost) $(copt)
        |  -------- --------

%if $(TARGET_PLATFORM) != "Windows" && $(TARGET_PLATFORM) != "WinRT"

    # It is important to compile this outside of the scope of the PCH on LLVM because of the trick it plays. Should also be fine on GCC.
    $(coreObjs)LinuxGlobals$(oext) : $(DgnCoreDir)LinuxGlobals.cpp

    coreObjects + $(coreObjs)LinuxGlobals$(oext)

%endif

# Need to change o around because that's what multicompile uses
o = $(coreObjs)

#----------------------------------------------------------------------
#   Make sure that DgnPlatformInternal.pch is up-to-date.
#----------------------------------------------------------------------
PchCompiland        = $(baseDir)DgnPlatformInternal.cpp
PchOutputDir        = $(dgnPlatformObj)
PchExtraOptions    = -Zm170
%if defined (winNT) && $(BUILD_TOOLSET) == "GCC"
    # Compiling using DgnHandlerInternal.h.gch causes internal compiler error in GCC using windows ndk toolchain
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts = $(UsePrecompiledHeaderOptions)
CPchOpts  = $(UsePrecompiledHeaderOptions)

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(coreObjs)DgnElement$(oext)      : $(DgnCoreDir)DgnElement.cpp ${MultiCompileDepends} $(DgnFileIOPubH)  $(toolsHeaders) 

$(coreObjs)DgnModel$(oext)        : $(DgnCoreDir)DgnModel.cpp ${MultiCompileDepends} $(DgnFileIOPubH) $(DgnCoreAPISrc)ScanCriteria.h 

$(coreObjs)UnitDefinition$(oext): $(DgnCoreDir)UnitDefinition.cpp ${MultiCompileDepends} $(DgnFileIOPubH)

$(coreObjs)ElementAgenda$(oext): $(DgnCoreDir)ElementAgenda.cpp $(DgnCoreAPISrc)ElementAgenda.h ${MultiCompileDepends}

$(coreObjs)ITxn$(oext): $(DgnCoreDir)ITxn.cpp  $(HandlerDepends) $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)TxnManager$(oext): $(DgnCoreDir)TxnManager.cpp $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)EntityDependencyGraph$(oext): $(DgnCoreDir)EntityDependencyGraph.cpp $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)LsName$(oext): $(lineStyleDir)LsName.cpp $(LsLocalDepends) $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)LsLocation$(oext): $(lineStyleDir)LsLocation.cpp $(LsLocalDepends) ${MultiCompileDepends}

$(coreObjs)LsSymbology$(oext): $(lineStyleDir)LsSymbology.cpp $(LsLocalDepends)  ${MultiCompileDepends}

$(coreObjs)LsCache$(oext): $(lineStyleDir)LsCache.cpp $(LsLocalDepends) ${MultiCompileDepends}

$(coreObjs)LineStyleManager$(oext):   $(lineStyleDir)LineStyleManager.cpp $(LsLocalDepends)  ${MultiCompileDepends}

$(coreObjs)LineStyleApi$(oext):   $(lineStyleDir)LineStyleApi.cpp $(LsLocalDepends)  ${MultiCompileDepends}

$(coreObjs)LsDb$(oext):   $(lineStyleDir)LsDb.cpp $(LsLocalDepends)  $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)LsElem$(oext):   $(lineStyleDir)LsElem.cpp $(LsLocalDepends)  $(txnManagerDepends) ${MultiCompileDepends}

$(coreObjs)StrokeSymbol$(oext):    $(lineStyleDir)StrokeSymbol.cpp $(LsLocalDepends) $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)LsPointComponent$(oext):    $(lineStyleDir)LsPointComponent.cpp $(LsLocalDepends) $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)StrokePattern$(oext):   $(lineStyleDir)StrokePattern.cpp $(LsLocalDepends) ${MultiCompileDepends}

$(coreObjs)Scanner$(oext):     $(DgnCoreDir)Scanner.cpp $(DgnCoreAPISrc)ScanCriteria.h $(DgnFileIOPubH) $(contextDepends) $(DgnCoreAPISrc)NullContext.h ${MultiCompileDepends}

$(coreObjs)DgnScan$(oext):     $(DgnCoreDir)DgnScan.cpp $(DgnCoreAPISrc)ScanCriteria.h $(DgnFileIOPubH) $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)DgnRangeTree$(oext): $(DgnCoreDir)DgnRangeTree.cpp $(DgnCoreAPISrc)DgnRangeTree.h ${MultiCompileDepends}

$(coreObjs)VecMathDGNTolerances$(oext):     $(DgnCoreDir)VecMathDGNTolerances.cpp $(DgnPlatformAPISrc)VecMath.h ${MultiCompileDepends}

$(coreObjs)DgnColors$(oext):   $(DgnCoreDir)DgnColors.cpp $(DgnCoreAPISrc)ColorUtil.h ${MultiCompileDepends}

$(coreObjs)ElemHandle$(oext): $(DgnCoreDir)ElemHandle.cpp $(HandlerDepends) $(txnManagerDepends) $(DgnCoreAPISrc)/DgnElement.h  ${MultiCompileDepends}

$(coreObjs)ViewController$(oext):    $(DgnCoreDir)ViewController.cpp $(ViewControllerDepends) ${MultiCompileDepends} $(contextDepends)

$(coreObjs)HypermodelingViewController$(oext): $(DgnCoreDir)HypermodelingViewController.cpp $(ViewControllerDepends) ${MultiCompileDepends} $(contextDepends)

$(coreObjs)SectioningPhysicalViewController$(oext): $(DgnCoreDir)SectioningPhysicalViewController.cpp $(ViewControllerDepends) ${MultiCompileDepends} $(contextDepends)

$(coreObjs)DgnElements$(oext): $(DgnCoreDir)DgnElements.cpp $(DgnCoreAPISrc)DgnDb.h ${MultiCompileDepends}

$(coreObjs)DgnViewport$(oext):    $(DgnCoreDir)DgnViewport.cpp $(contextDepends) ${MultiCompileDepends}

$(coreObjs)RealityDataHandlers$(oext):    $(DgnCoreDir)RealityDataHandlers.cpp $(RealityDataHandlerDepends) $(contextDepends) ${MultiCompileDepends}

$(coreObjs)RealityDataCache$(oext) : $(DgnCoreDir)RealityDataCache.cpp $(RealityDataHandlerDepends) ${MultiCompileDepends}

$(coreObjs)WebMercator$(oext):    $(DgnCoreDir)WebMercator.cpp $(contextDepends) $(WebMercatorDepends) $(RealityDataHandlerDepends) ${MultiCompileDepends}

$(coreObjs)TextString$(oext):    $(DgnCoreDir)TextString.cpp $(contextDepends) $(DgnCoreAPISrc)TextString.h $(DgnCoreAPISrc)DgnFontManager.h $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)TextStyleInterop$(oext): $(DgnCoreDir)TextStyleInterop.cpp $(DgnCoreAPISrc)TextString.h $(DgnCoreAPISrc)Annotations/AnnotationTextStyle.h ${MultiCompileDepends}

$(coreObjs)DgnPropertyJson$(oext): $(DgnCoreDir)DgnPropertyJson.cpp ${MultiCompileDepends}

$(coreObjs)ElementUtil$(oext): $(DgnCoreDir)ElementUtil.cpp ${MultiCompileDepends}

$(coreObjs)ElementGeometry$(oext): $(DgnCoreDir)ElementGeometry.cpp ${MultiCompileDepends}

$(coreObjs)ElementGraphics$(oext): $(DgnCoreDir)ElementGraphics.cpp $(DgnCoreAPISrc)ElementGraphics.h ${MultiCompileDepends}

$(coreObjs)MeasureGeom$(oext): $(DgnCoreDir)MeasureGeom.cpp $(DgnCoreAPISrc)MeasureGeom.h ${MultiCompileDepends}

$(coreObjs)DgnCore$(oext): $(DgnCoreDir)DgnCore.cpp $(DgnCoreDir)DgnCoreDLLInlines.h $(DgnPlatformPublicAPISrc)DgnPlatform/DgnPlatformLib.h  ${MultiCompileDepends}

$(coreObjs)HandlerTypeInfo$(oext): $(DgnCoreDir)HandlerTypeInfo.cpp $(contextDepends) $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)ViewHandler$(oext): $(DgnCoreDir)ViewHandler.cpp $(contextDepends) ${MultiCompileDepends} $(DgnCoreAPISrc)SimplifyViewDrawGeom.h

$(coreObjs)ViewContext$(oext): $(DgnCoreDir)ViewContext.cpp   $(DgnCoreAPISrc)DisplayPath.h $(contextDepends) $(HandlerDepends) $(DgnCoreAPISrc)DgnModel.h $(DgnCoreAPISrc)ScanCriteria.h $(DgnCoreDir)UpdateLogging.h ${MultiCompileDepends}

$(coreObjs)SymbolContext$(oext): $(DgnCoreDir)SymbolContext.cpp   $(contextDepends) $(HandlerDepends) $(DgnCoreAPISrc)DgnModel.h  $(LevelApiDepends) ${MultiCompileDepends}

$(coreObjs)NullContext$(oext): $(DgnCoreDir)NullContext.cpp   $(contextDepends) $(DgnCoreAPISrc)NullContext.h ${MultiCompileDepends}

$(coreObjs)RangeContext$(oext): $(DgnCoreDir)RangeContext.cpp $(DgnCoreAPISrc)NullContext.h $(DgnCoreAPISrc)SimplifyViewDrawGeom.h $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)SnapContext$(oext): $(DgnCoreDir)SnapContext.cpp $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)SimplifyViewDrawGeom$(oext): $(DgnCoreDir)SimplifyViewDrawGeom.cpp $(contextDepends) $(DgnCoreAPISrc)SimplifyViewDrawGeom.h ${MultiCompileDepends}

$(coreObjs)IFacetTopologyTable$(oext): $(DgnCoreDir)IFacetTopologyTable.cpp $(contextDepends) ${MultiCompileDepends}

$(coreObjs)DrawAreaPattern$(oext): $(DgnCoreDir)DrawAreaPattern.cpp   $(contextDepends) $(HandlerDepends) $(DgnCoreAPISrc)SimplifyViewDrawGeom.h ${MultiCompileDepends}

$(coreObjs)ClipUtil$(oext):        $(DgnCoreDir)ClipUtil.cpp $(DgnCoreAPISrc)ClipUtil.h ${MultiCompileDepends}

$(coreObjs)ClipPrimitive$(oext):  $(DgnCoreDir)ClipPrimitive.cpp $(DgnCoreAPISrc)ClipPrimitive.h ${MultiCompileDepends}

$(coreObjs)ClipVector$(oext):  $(DgnCoreDir)ClipVector.cpp $(DgnCoreAPISrc)ClipPrimitive.h $(DgnCoreAPISrc)ClipVector.h ${MultiCompileDepends}

$(coreObjs)SectionClip$(oext):  $(DgnCoreDir)SectionClip.cpp $(DgnCoreAPISrc)SectionClip.h ${MultiCompileDepends}

$(coreObjs)TransformClipStack$(oext): $(DgnCoreDir)TransformClipStack.cpp $(DgnCoreAPISrc)TransformClipStack.h ${MultiCompileDepends}

$(coreObjs)DgnCorePolyfaceClip$(oext): $(DgnCoreDir)DgnCorePolyfaceClip.cpp $(DgnCoreAPISrc)ClipUtil.h ${MultiCompileDepends}

$(coreObjs)FenceParams$(oext): $(DgnCoreDir)FenceParams.cpp $(DgnCoreAPISrc)FenceParams.h $(contextDepends) ${MultiCompileDepends}

$(coreObjs)DisplayPath$(oext):  $(DgnCoreDir)DisplayPath.cpp $(DgnCoreAPISrc)DisplayPath.h $(contextDepends) ${MultiCompileDepends}

$(coreObjs)GParray$(oext):      $(DgnCoreDir)GParray.cpp $(DgnCoreAPISrc)GPArray.h ${MultiCompileDepends}

$(coreObjs)IAuxSystem$(oext):    $(DgnCoreDir)IAuxSystem.cpp $(contextDepends) ${MultiCompileDepends}

$(coreObjs)BSISerializable$(oext): $(DgnCoreDir)BSISerializable.cpp $(DgnCoreAPISrc)BSISerializable.h ${MultiCompileDepends}

$(coreObjs)GradientSettings$(oext): $(DgnCoreDir)GradientSettings.cpp $(DgnCoreAPISrc)GradientSettings.h ${MultiCompileDepends}

$(coreObjs)UnitManager$(oext): $(DgnCoreDir)UnitManager.cpp $(DgnCoreAPISrc)UnitDefinition.h ${MultiCompileDepends}

$(coreObjs)ScaleDefinition$(oext): $(DgnCoreDir)ScaleDefinition.cpp $(DgnCoreAPISrc)ScaleDefinition.h ${MultiCompileDepends}

$(coreObjs)DgnCoreValueFormat$(oext): $(DgnCoreDir)DgnCoreValueFormat.cpp $(DgnCoreAPISrc)ValueFormat.h ${MultiCompileDepends}

$(coreObjs)ValueParse$(oext): $(DgnCoreDir)ValueParse.cpp $(DgnCoreAPISrc)ValueParse.h ${MultiCompileDepends}

$(coreObjs)ACSManager$(oext): $(DgnCoreDir)ACSManager.cpp $(DgnCoreAPISrc)IAuxCoordSys.h $(DgnCoreAPISrc)ElementHandle.h ${MultiCompileDepends}

$(coreObjs)DgnFontManager$(oext):  $(fontMgrDir)DgnFontManager.cpp $(DgnCoreAPISrc)DgnFontManager.h $(DgnCoreAPISrc)DgnShxFont.h $(DgnCoreAPISrc)DgnTrueTypeFont.h $(DgnCoreAPISrc)DgnRscFont.h $(contextDepends) ${MultiCompileDepends}

$(coreObjs)DgnShxFont$(oext):      $(fontMgrDir)DgnShxFont.cpp $(DgnCoreAPISrc)DgnShxFont.h $(DgnCoreAPISrc)DgnFontManager.h ${MultiCompileDepends}

$(coreObjs)MaterialSettings$(oext): $(DgnCoreDir)MaterialSettings.cpp $(DgnCoreAPISrc)Material.h $(DgnCoreAPISrc)MaterialSettings.h ${MultiCompileDepends}

$(coreObjs)MaterialTokens$(oext): $(DgnCoreDir)MaterialTokens.cpp $(DgnPlatformInternalApiSrc)DgnCore/MaterialTokens.h ${MultiCompileDepends}

$(coreObjs)Sprites$(oext): $(DgnCoreDir)Sprites.cpp ${MultiCompileDepends}

$(coreObjs)ImageUtilities$(oext): $(DgnCoreDir)ImageUtilities.cpp $(DgnCoreAPISrc)ImageUtilities.h ${MultiCompileDepends}

$(coreObjs)GeomPart$(oext) : $(DgnCoreDir)GeomPart.cpp $(DgnCoreAPISrc)GeomPart.h ${MultiCompileDepends}

$(coreObjs)DgnEntity$(oext) : $(DgnCoreDir)DgnEntity.cpp $(DgnCoreAPISrc)DgnEntity.h ${MultiCompileDepends}

$(coreObjs)DgnItem$(oext) : $(DgnCoreDir)DgnItem.cpp $(DgnCoreAPISrc)DgnItem.h ${MultiCompileDepends}

tools      = $(SrcRoot)DgnPlatform/Tools/ToolSubs/

$(coreObjs)stringop$(oext)        : $(tools)charutil/stringop.cpp ${MultiCompileDepends} 

$(coreObjs)DgnDb$(oext): $(DgnCoreDir)DgnDb.cpp $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)DgnDbSchema$(oext): $(DgnCoreDir)DgnDbSchema.cpp $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)DgnSqlFuncs$(oext): $(DgnCoreDir)DgnSqlFuncs.cpp ${MultiCompileDepends}

$(coreObjs)DgnIModel$(oext) : $(DgnCoreDir)DgnIModel.cpp $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)DgnUnits$(oext) : $(DgnCoreDir)DgnUnits.cpp $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)DgnCategories$(oext) : $(DgnCoreDir)DgnCategories.cpp $(DgnCoreAPISrc)DgnDb.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)SatelliteChangeSets$(oext) : $(DgnCoreDir)SatelliteChangeSets.cpp $(DgnCoreAPISrc)SatelliteChangeSets.h ${MultiCompileDepends}

$(coreObjs)DgnMarkupProject$(oext): $(DgnCoreDir)DgnMarkupProject.cpp $(DgnCoreAPISrc)DgnMarkupProject.h $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)DgnDomain$(oext): $(DgnCoreDir)DgnDomain.cpp $(DgnCoreAPISrc)DgnDomain.h ${MultiCompileDepends} ${MultiCompileDepends} 

$(coreObjs)QueryModel$(oext): $(DgnCoreDir)QueryModel.cpp $(DgnCoreAPISrc)QueryModel.h $(DgnCoreAPISrc)DgnRangeTree.h  $(DgnCoreDir)UpdateLogging.h ${MultiCompileDepends} 

$(coreObjs)QueryView$(oext): $(DgnCoreDir)QueryView.cpp $(DgnCoreAPISrc)QueryModel.h $(DgnCoreAPISrc)QueryView.h $(ViewControllerDepends) $(DgnCoreDir)UpdateLogging.h ${MultiCompileDepends}

$(coreObjs)UpdateLogging$(oext): $(DgnCoreDir)UpdateLogging.cpp $(DgnCoreDir)UpdateLogging.h ${MultiCompileDepends}

$(coreObjs)DgnViewDb$(oext): $(DgnCoreDir)DgnViewDb.cpp $(DgnCoreAPISrc)DgnDbTables.h ${MultiCompileDepends}

$(coreObjs)RasterDb$(oext): $(DgnCoreDir)RasterDb.cpp $(DgnPlatformInternalDir)DgnCore/RasterDb.h ${MultiCompileDepends}

$(coreObjs)DgnLink$(oext): $(DgnCoreDir)DgnLink.cpp $(DgnCoreAPISrc)DgnDbTables.h $(DgnCoreAPISrc)DgnLink.h ${MultiCompileDepends}

$(coreObjs)DgnSchemaDomain$(oext): $(DgnCoreDir)DgnSchemaDomain.cpp ${MultiCompileDepends}

#----------------------------------------------------------------------
#   Annotations
#----------------------------------------------------------------------
AnnotationsSrc = $(DgnCoreDir)Annotations/
AnnotationsPrivateApi = $(PrivateAPIDir)DgnPlatformInternal/DgnCore/Annotations/
AnnotationsApi = $(DgnPlatformAPISrc)DgnCore/Annotations/

AnnotationsHeaders = \
    $(AnnotationsApi)AnnotationFrame.h \
    $(AnnotationsApi)AnnotationFrameDraw.h \
    $(AnnotationsApi)AnnotationFrameLayout.h \
    $(AnnotationsApi)AnnotationFrameStyle.h \
    $(AnnotationsApi)AnnotationLeader.h \
    $(AnnotationsApi)AnnotationLeaderDraw.h \
    $(AnnotationsApi)AnnotationLeaderStyle.h \
    $(AnnotationsApi)AnnotationPropertyBag.h \
    $(AnnotationsApi)Annotations.h \
    $(AnnotationsApi)AnnotationTextBlock.h \
    $(AnnotationsApi)AnnotationTextBlockDraw.h \
    $(AnnotationsApi)AnnotationTextBlockLayout.h \
    $(AnnotationsApi)AnnotationTextStyle.h \
    $(AnnotationsApi)TextAnnotation.h \
    $(AnnotationsApi)TextAnnotationDraw.h \
    $(AnnotationsApi)TextAnnotationSeed.h \
    $(AnnotationsPrivateApi)AnnotationFramePersistence.h \
    $(AnnotationsPrivateApi)AnnotationFrameStylePersistence.h \
    $(AnnotationsPrivateApi)Annotations.fb.h \
    $(AnnotationsPrivateApi)AnnotationTextBlockPersistence.h \
    $(AnnotationsPrivateApi)AnnotationTextStylePersistence.h \
    $(AnnotationsPrivateApi)TextAnnotationPersistence.h \
    $(AnnotationsPrivateApi)TextAnnotationSeedPersistence.h

$(coreObjs)AnnotationFrame$(oext) : $(AnnotationsSrc)AnnotationFrame.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationFrameDraw$(oext) : $(AnnotationsSrc)AnnotationFrameDraw.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationFrameLayout$(oext) : $(AnnotationsSrc)AnnotationFrameLayout.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationFrameStyle$(oext) : $(AnnotationsSrc)AnnotationFrameStyle.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationLeader$(oext) : $(AnnotationsSrc)AnnotationLeader.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationLeaderDraw$(oext) : $(AnnotationsSrc)AnnotationLeaderDraw.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationLeaderLayout$(oext) : $(AnnotationsSrc)AnnotationLeaderLayout.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationLeaderStyle$(oext) : $(AnnotationsSrc)AnnotationLeaderStyle.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationParagraph$(oext) : $(AnnotationsSrc)AnnotationParagraph.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationPropertyBag$(oext) : $(AnnotationsSrc)AnnotationPropertyBag.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationRuns$(oext) : $(AnnotationsSrc)AnnotationRuns.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationTextBlock$(oext) : $(AnnotationsSrc)AnnotationTextBlock.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationTextBlockDraw$(oext) : $(AnnotationsSrc)AnnotationTextBlockDraw.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationTextBlockLayout$(oext) : $(AnnotationsSrc)AnnotationTextBlockLayout.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)AnnotationTextStyle$(oext) : $(AnnotationsSrc)AnnotationTextStyle.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)TextAnnotation$(oext) : $(AnnotationsSrc)TextAnnotation.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)TextAnnotationDraw$(oext) : $(AnnotationsSrc)TextAnnotationDraw.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)TextAnnotationSeed$(oext) : $(AnnotationsSrc)TextAnnotationSeed.cpp $(AnnotationsHeaders) ${MultiCompileDepends}

$(coreObjs)DgnHandlers$(oext): $(DgnHandlersDir)DgnHandlers.cpp $(DgnPlatformPublicAPISrc)DgnPlatform/DgnPlatformLib.h ${MultiCompileDepends}

$(coreObjs)HitPath$(oext): $(DgnHandlersDir)HitPath.cpp $(DgnCoreAPISrc)DisplayPath.h $(HandlerDepends) ${MultiCompileDepends}

$(coreObjs)PickContext$(oext): $(DgnHandlersDir)PickContext.cpp  $(DgnCoreAPISrc)HitPath.h $(DgnCoreAPISrc)DisplayPath.h $(contextDepends) $(DgnCoreAPISrc)SimplifyViewDrawGeom.h ${MultiCompileDepends}

$(coreObjs)IEcPropertyHandler$(oext) : $(DgnHandlersDir)IEcPropertyHandler.cpp $(DgnHandlersAPISrc)IEcPropertyHandler.h ${MultiCompileDepends}

$(coreObjs)RegionUtil$(oext): $(DgnHandlersDir)RegionUtil.cpp $(contextDepends) ${MultiCompileDepends}

$(coreObjs)ScopedDgnHost$(oext)          : $(DgnHandlersDir)ScopedDgnHost.cpp  ${MultiCompileDepends}

$(coreObjs)NamedVolume$(oext) : $(DgnHandlersDir)NamedVolume.cpp $(DgnHandlersAPISrc)NamedVolume.h ${MultiCompileDepends}

$(coreObjs)DgnECSymbolProvider$(oext) : $(DgnHandlersDir)DgnECSymbolProvider.cpp $(DgnHandlersAPISrc)DgnECSymbolProvider.h ${MultiCompileDepends}

%include MultiCppCompileGo.mki

coreObjects =% $(MultiCompileObjectList)

#----------------------------------------------------------------------
# Generate word break data structures
#----------------------------------------------------------------------
always:
    !~@mkdir $(handlerObjs)GeneratedSource/GeneratedHeaders

$(handlerObjs)GeneratedSource/GeneratedHeaders/WordBreakData.h : $(DgnHandlersDir)WordBreakProperty.txt $(DgnHandlersDir)WordBreakDataGenerator.py
    |[== Building "$@", ($=) ==]
    $(DgnHandlersDir)WordBreakDataGenerator.py -i$< -o$@

dirToSearch = $(handlerObjs)GeneratedSource/
%include cincapnd.mki

FileTypeControl =
CCPchOpts =
CPchOpts =

# -----------------------------------------------------------------------------------------------
#   Non-port section -- these files cannot or need not be ported to Linux
# -----------------------------------------------------------------------------------------------
MultiCompileDepends=$(_MakeFileSpec)
o = $(coreObjs)

%include MultiCppCompileRule.mki

$(coreObjs)nonport_utilities$(oext):      $(DgnCoreDir)nonport_utilities.cpp ${MultiCompileDepends}

$(coreObjs)DgnRscFont$(oext):      $(fontMgrDir)DgnRscFont.cpp $(DgnCoreAPISrc)DgnRscFont.h $(DgnCoreAPISrc)DgnFontManager.h $(DgnCoreAPISrc)GPArray.h ${MultiCompileDepends}

$(coreObjs)DgnTrueTypeFont$(oext): $(fontMgrDir)DgnTrueTypeFont.cpp $(DgnCoreAPISrc)DgnTrueTypeFont.h $(DgnCoreAPISrc)DgnFontManager.h ${MultiCompileDepends}

$(coreObjs)PlatformTextServices$(oext) : $(DgnHandlersDir)PlatformTextServices.cpp $(DgnPlatformInternalDir)DgnCore/PlatformTextServices.h ${MultiCompileDepends}

%include MultiCppCompileGo.mki

coreObjects +% $(MultiCompileObjectList)

CCPchOpts =
CPchOpts =

cppObjects = $(coreObjects)

# -----------------------------------------------------------------------------------------------
#   Portable inline handling (make sure that there is a non-inlined implementation when required)
# -----------------------------------------------------------------------------------------------

$(handlerObjs)DgnPlatformDLLInlines$(oext) : $(baseDir)DgnPlatformDLLInlines.cpp $(baseDir)DgnCore/DgnCoreDLLInlines.h $(baseDir)DgnHandlers/DgnHandlersDLLInlines.h ${MultiCompileDepends}

cppObjects +% $(handlerObjs)DgnPlatformDLLInlines$(oext)

#----------------------------------------------------------------------
#   Resources
#----------------------------------------------------------------------
%if $(TARGET_PLATFORM)=="Windows"  # *** WIP_NONPORT

$(handlerObjs)Icons.res : $(DgnHandlersDir)Icons.rc

dgnHandlers_binaryResources = $(handlerObjs)Icons.res

%endif

#----------------------------------------------------------------------
#   dependencies of the subsystem.
#----------------------------------------------------------------------
o = $(dgnPlatformObj)

DLM_DEST                = $(o)
DLM_OBJECT_FILES        = $(cppObjects) $(dgnHandlers_binaryResources)
DLM_OBJECT_PCH          = $(dgnPlatformObj)DgnPlatformInternal$(oext) 
DLM_EXPORT_OBJS         = $(cppObjects)
DLM_EXPORT_DEST         = $(o)
DLM_NOINITFUNC          = 1
DLM_NOMSBUILTINS        = 1
DLM_NO_DEF              = 1
DLM_NO_DLS              = 1
DLM_NOENTRY             = 1
LINKER_LIBRARIES        =   $(ContextSubpartsLibs)$(ToolsubsLib)                        \
                            $(ContextSubpartsLibs)$(libprefix)BeSQLiteEC$(libext)       \
                            $(ContextSubpartsLibs)$(libprefix)BeSQLite$(libext)         \
                            $(ContextSubpartsLibs)$(libprefix)BeZlib$(stlibext)         \
                            $(ContextSubpartsLibs)$(libprefix)BePng$(stlibext)          \
                            $(ContextSubpartsLibs)$(libprefix)BeLibJpegTurbo$(stlibext) \
                            $(ContextSubpartsLibs)$(libprefix)BeJsonCpp$(stlibext)      \
                            $(ContextSubpartsLibs)$(ECNativeObjectsLib)                 \
                            $(ContextSubpartsLibs)$(BentleyGeomLib)                     \
                            $(ContextSubpartsLibs)$(libprefix)BentleyGeomSerialization$(libext) \
                            $(ContextSubpartsLibs)$(libprefix)BeXml$(libext)

%if $(TARGET_PLATFORM)!="WinRT"
    # The "Casablanca" library is used on WinRT instead
    LINKER_LIBRARIES + $(ContextSubpartsLibs)$(libprefix)BeCurl$(libext)
%endif

%ifndef CREATE_STATIC_LIBRARIES
    %if $(TARGET_PLATFORM)=="Windows"  # *** WIP_NONPORT
        #for uniscribeservices, used by nonport_DgnRscFont.cpp, DgnTrueTypeFont.cpp
        LINKER_LIBRARIES + usp10.lib
        
        LINKER_LIBRARIES + $(ContextSubpartsLibs)BeLibXml2.lib 
        
        #For CoCreateInstance, RegOpenKey, SHGetPathFromIDListA - used (in Windows build) by DgnTrueTypeFont.obj and IntegrationManager.obj
        LINKER_LIBRARIES + $(oleLibs) $(guiLibs) kernel32.lib
        LINKER_LIBRARIES + wininet.lib
        
        #for Xmlite, used by numerous files
        LINKER_LIBRARIES + xmllite.lib
        
        # used by pagalloc
        LINKER_LIBRARIES + dbghelp.lib

        # Add this to use the VTune API. It is a static library that finds the DLL's if they are on the system.
        # LINKER_LIBRARIES       + "C:\Program Files (x86)\Intel\VTune Amplifier XE\lib64\libittnotify.lib"
    %endif
%endif

%if $(TARGET_PLATFORM)!="Windows" && !defined(CREATE_STATIC_LIBRARIES)  # *** WIP_NONPORT
DLM_OBJECT_FILES + $(ContextSubpartsLibs)$(libprefix)freetype2$(stlibext)
%endif

%include $(sharedMki)linkLibrary.mki

SQLANG_CHeader      = $(DgnPlatformInternalDir)DgnCore/DgnCoreL10N.h
SQLANG_Xliff        = $(o)xliffs/DgnCoreMessages_en.xliff

%include $(sharedMki)CHeaderToXliff.mki

SQLANG_CHeader      = $(DgnPlatformInternalDir)DgnHandlers/DgnHandlersMessage.h
SQLANG_Xliff        = $(o)xliffs/DgnHandlersMessages_en.xliff

%include $(sharedMki)CHeaderToXliff.mki

$(BuildContext)Delivery/icons : $(DgnCoreDir)/icons
    $(LinkFirstDepToFirstTargetAsDirectory)

