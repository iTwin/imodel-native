//-------------------------------------------------------------------------------------- 
//     $Source: Tests/DgnProject/Published/TextAnnotation_Test.cpp $
//  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
//-------------------------------------------------------------------------------------- 

#include "DgnHandlersTests.h"
#include <DgnPlatform/DgnCore/Annotations/Annotations.h>
#include <DgnPlatform/DgnHandlers/Annotations/TextAnnotationHandler.h>

USING_NAMESPACE_BENTLEY_SQLITE
USING_NAMESPACE_BENTLEY_DGNPLATFORM

//=======================================================================================
// @bsiclass                                                    Jeff.Marker     07/2014
//=======================================================================================
struct TextAnnotationTest : public GenericDgnModelTestFixture
{
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    TextAnnotationTest() : GenericDgnModelTestFixture (__FILE__, true /*3D*/) { }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    DgnDbR GetProjectR()
        {
        BeAssert(NULL != m_testDgnManager.GetDgnProjectP());
        return *m_testDgnManager.GetDgnProjectP();
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    DgnModelR GetModelR()
        {
        BeAssert(NULL != GetDgnModelP());
        return *GetDgnModelP();
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void GetOrCreateAnnotationTextStyleA(DgnStyleId& styleID)
        {
        static const Utf8CP STYLE_NAME = "TextStyleA";

        DgnDbR project = GetProjectR();

        AnnotationTextStylePtr existingStyle = project.Styles().AnnotationTextStyles().QueryByName(STYLE_NAME);
        if (existingStyle.IsValid())
            {
            styleID = existingStyle->GetId();
            return;
            }

        //.............................................................................................
        DgnFontCR ttFont = DgnFontManager::GetLastResortTrueTypeFont();
        ASSERT_TRUE(ttFont.IsResolved());

        DgnFontId ttFontId = project.Fonts().AcquireId(ttFont);
        ASSERT_TRUE(ttFontId.IsValid());

        //.............................................................................................
        AnnotationTextStylePtr style = AnnotationTextStyle::Create(project);
        ASSERT_TRUE(style.IsValid());

        style->SetName(STYLE_NAME);
        style->SetDescription("Generated by GetOrCreateAnnotationTextStyleA");
        style->SetFontId(ttFontId);
        style->SetHeight(1000.0);

        project.Styles().AnnotationTextStyles().Insert(*style);
        ASSERT_TRUE(style->GetId().IsValid());

        styleID = style->GetId();
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void GetOrCreateAnnotationFrameStyleA(DgnStyleId& styleID)
        {
        static const Utf8CP STYLE_NAME = "FrameStyleA";

        DgnDbR project = GetProjectR();

        AnnotationFrameStylePtr existingStyle = project.Styles().AnnotationFrameStyles().QueryByName(STYLE_NAME);
        if (existingStyle.IsValid())
            {
            styleID = existingStyle->GetId();
            return;
            }

        //.............................................................................................
        AnnotationFrameStylePtr style = AnnotationFrameStyle::Create(project);
        ASSERT_TRUE(style.IsValid());

        style->SetName(STYLE_NAME);
        style->SetDescription("Generated by GetOrCreateAnnotationFrameStyleA");
        style->SetIsStrokeEnabled(true);

        project.Styles().AnnotationFrameStyles().Insert(*style);
        ASSERT_TRUE(style->GetId().IsValid());

        styleID = style->GetId();
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void GetOrCreateAnnotationLeaderStyleA(DgnStyleId& styleID)
        {
        static const Utf8CP STYLE_NAME = "LeaderStyleA";

        DgnDbR project = GetProjectR();

        AnnotationLeaderStylePtr existingStyle = project.Styles().AnnotationLeaderStyles().QueryByName(STYLE_NAME);
        if (existingStyle.IsValid())
            {
            styleID = existingStyle->GetId();
            return;
            }

        //.............................................................................................
        AnnotationLeaderStylePtr style = AnnotationLeaderStyle::Create(project);
        ASSERT_TRUE(style.IsValid());

        style->SetName(STYLE_NAME);
        style->SetDescription("Generated by GetOrCreateAnnotationLeaderStyleA");
        style->SetLineType(AnnotationLeaderLineType::Straight);
        style->SetTerminatorType(AnnotationLeaderTerminatorType::ClosedArrow);

        project.Styles().AnnotationLeaderStyles().Insert(*style);
        ASSERT_TRUE(style->GetId().IsValid());

        styleID = style->GetId();
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void GetOrCreateTextAnnotationSeedA(DgnStyleId& styleID)
        {
        static const Utf8CP STYLE_NAME = "TextAnnotationSeedA";
        
        DgnDbR project = GetProjectR();

        TextAnnotationSeedPtr existingStyle = project.Styles().TextAnnotationSeeds().QueryByName(STYLE_NAME);
        if (existingStyle.IsValid())
            {
            styleID = existingStyle->GetId();
            return;
            }

        //.............................................................................................
        DgnStyleId textStyleID;     GetOrCreateAnnotationTextStyleA(textStyleID);
        DgnStyleId frameStyleID;    GetOrCreateAnnotationFrameStyleA(frameStyleID);
        DgnStyleId leaderStyleID;   GetOrCreateAnnotationLeaderStyleA(leaderStyleID);

        //.............................................................................................
        TextAnnotationSeedPtr seed = TextAnnotationSeed::Create(project);
        ASSERT_TRUE(seed.IsValid());

        seed->SetName(STYLE_NAME);
        seed->SetDescription("Generated by GetOrCreateTextAnnotationSeedA");
        seed->SetTextStyleId(textStyleID);
        seed->SetFrameStyleId(frameStyleID);
        seed->SetLeaderStyleId(leaderStyleID);

        project.Styles().TextAnnotationSeeds().Insert(*seed);
        ASSERT_TRUE(seed->GetId().IsValid());

        styleID = seed->GetId();
        }

    static const Utf8CP DOCUMENT_A_Content;
    
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void CreateDocumentA(AnnotationTextBlockPtr& document, DgnStyleId textStyleID)
        {
        DgnDbR project = GetProjectR();
        
        document = AnnotationTextBlock::Create(project, textStyleID, DOCUMENT_A_Content);
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void VerifyDocumentA(AnnotationTextBlockCR document)
        {
        DgnStyleId textStyleID;
        GetOrCreateAnnotationTextStyleA(textStyleID);
        ASSERT_TRUE(textStyleID == document.GetStyleId());
        
        ASSERT_TRUE(1 == document.GetParagraphs().size());
        ASSERT_TRUE(1 == document.GetParagraphs()[0]->GetRuns().size());
        ASSERT_TRUE(AnnotationRunType::Text == document.GetParagraphs()[0]->GetRuns()[0]->GetType());
        
        ASSERT_TRUE(0 == strcmp(DOCUMENT_A_Content, ((AnnotationTextRunCR)*document.GetParagraphs()[0]->GetRuns()[0]).GetContent().c_str()));
        }

    static const AnnotationFrameStylePropertyBag::T_Integer FRAME_A_StrokeColorID;
    
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void CreateFrameA(AnnotationFramePtr& frame, DgnStyleId frameStyleID)
        {
        DgnDbR project = GetProjectR();
        
        frame = AnnotationFrame::Create(project, frameStyleID);
        frame->GetStyleOverridesR().SetIntegerProperty(AnnotationFrameStyleProperty::StrokeColorId, FRAME_A_StrokeColorID);
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void VerifyFrameA(AnnotationFrameCR frame)
        {
        DgnStyleId frameStyleID;
        GetOrCreateAnnotationFrameStyleA(frameStyleID);
        ASSERT_TRUE(frameStyleID == frame.GetStyleId());

        ASSERT_TRUE(1 == frame.GetStyleOverrides().ComputePropertyCount());
        ASSERT_TRUE(frame.GetStyleOverrides().HasProperty(AnnotationFrameStyleProperty::StrokeColorId));
        ASSERT_TRUE(FRAME_A_StrokeColorID == frame.GetStyleOverrides().GetIntegerProperty(AnnotationFrameStyleProperty::StrokeColorId));
        }
    
    static const AnnotationLeaderStylePropertyBag::T_Integer LEADER_A_LineColorID;
    static const AnnotationLeaderSourceAttachmentType LEADER_A_SourceAttachmentType;
    static const uint32_t LEADER_A_SourceAttachmentID;
    static const AnnotationLeaderTargetAttachmentType LEADER_A_TargetAttachmentType;
    static const DPoint3d LEADER_A_TargetAttachmentPt;
    
    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void CreateLeaderA1(AnnotationLeaderPtr& leader, DgnStyleId leaderStyleID)
        {
        DgnDbR project = GetProjectR();
        
        leader = AnnotationLeader::Create(project, leaderStyleID);
        leader->GetStyleOverridesR().SetIntegerProperty(AnnotationLeaderStyleProperty::LineColorId, LEADER_A_LineColorID);
        leader->SetSourceAttachmentType(LEADER_A_SourceAttachmentType);
        leader->SetSourceAttachmentDataForId(&LEADER_A_SourceAttachmentID);
        leader->SetTargetAttachmentType(LEADER_A_TargetAttachmentType);
        leader->SetTargetAttachmentDataForPhysicalPoint(&LEADER_A_TargetAttachmentPt);
        }

    //---------------------------------------------------------------------------------------
    // @bsimethod                                                   Jeff.Marker     07/2014
    //---------------------------------------------------------------------------------------
    void VerifyLeaderA(AnnotationLeaderCR leader)
        {
        DgnStyleId leaderStyleID;
        GetOrCreateAnnotationFrameStyleA(leaderStyleID);
        ASSERT_TRUE(leaderStyleID == leader.GetStyleId());

        ASSERT_TRUE(1 == leader.GetStyleOverrides().ComputePropertyCount());
        ASSERT_TRUE(leader.GetStyleOverrides().HasProperty(AnnotationLeaderStyleProperty::LineColorId));
        ASSERT_TRUE(LEADER_A_LineColorID == leader.GetStyleOverrides().GetIntegerProperty(AnnotationLeaderStyleProperty::LineColorId));
        ASSERT_TRUE(LEADER_A_SourceAttachmentType == leader.GetSourceAttachmentType());
        ASSERT_TRUE(LEADER_A_SourceAttachmentID == *leader.GetSourceAttachmentDataForId());
        ASSERT_TRUE(LEADER_A_TargetAttachmentType == leader.GetTargetAttachmentType());
        ASSERT_TRUE(LEADER_A_TargetAttachmentPt.IsEqual(*leader.GetTargetAttachmentDataForPhysicalPoint()));
        }

}; // TextAnnotationTest

const Utf8CP                                        TextAnnotationTest::DOCUMENT_A_Content              = "Hello world.";
const AnnotationFrameStylePropertyBag::T_Integer    TextAnnotationTest::FRAME_A_StrokeColorID           = 1;
const AnnotationLeaderStylePropertyBag::T_Integer   TextAnnotationTest::LEADER_A_LineColorID            = 1;
const AnnotationLeaderSourceAttachmentType          TextAnnotationTest::LEADER_A_SourceAttachmentType   = AnnotationLeaderSourceAttachmentType::Id;
const uint32_t                                      TextAnnotationTest::LEADER_A_SourceAttachmentID     = 0;
const AnnotationLeaderTargetAttachmentType          TextAnnotationTest::LEADER_A_TargetAttachmentType   = AnnotationLeaderTargetAttachmentType::PhysicalPoint;
const DPoint3d                                      TextAnnotationTest::LEADER_A_TargetAttachmentPt     = DPoint3d::From(0.0, 0.0, 0.0);

//---------------------------------------------------------------------------------------
// @bsimethod                                                   Jeff.Marker     07/2014
//---------------------------------------------------------------------------------------
TEST_F(TextAnnotationTest, SanityCreateCheck)
    {
    DgnDbR project = GetProjectR();

    //.............................................................................................
    DgnStyleId seedID;
    GetOrCreateTextAnnotationSeedA(seedID);
    TextAnnotationSeedPtr seed = project.Styles().TextAnnotationSeeds().QueryById(seedID);

    //.............................................................................................
    AnnotationTextBlockPtr document;    CreateDocumentA(document, seed->GetTextStyleId());
    AnnotationFramePtr frame;           CreateFrameA(frame, seed->GetFrameStyleId());
    AnnotationLeaderPtr leader1;        CreateLeaderA1(leader1, seed->GetLeaderStyleId());

    TextAnnotationPtr annotation = TextAnnotation::Create(project, seedID);
    annotation->SetText(document.get());
    annotation->SetFrame(frame.get());
    annotation->GetLeadersR().push_back(leader1);
    }

//---------------------------------------------------------------------------------------
// @bsimethod                                                   Jeff.Marker     07/2014
//---------------------------------------------------------------------------------------
TEST_F(TextAnnotationTest, RoundtripA)
    {
#if defined (V10_WIP_ELEMENTHANDLER)
    DgnDbR project = GetProjectR();
    DgnModelR model = GetModelR();
    ElementId elementID;

    {
    //.............................................................................................
    DgnStyleId seedID;
    GetOrCreateTextAnnotationSeedA(seedID);
    TextAnnotationSeedPtr seed = project.Styles().TextAnnotationSeeds().QueryById(seedID);

    //.............................................................................................
    AnnotationTextBlockPtr document;    CreateDocumentA(document, seed->GetTextStyleId());
    AnnotationFramePtr frame;           CreateFrameA(frame, seed->GetFrameStyleId());
    AnnotationLeaderPtr leader1;        CreateLeaderA1(leader1, seed->GetLeaderStyleId());

    TextAnnotationPtr annotation = TextAnnotation::Create(project, seedID);
    annotation->SetText(document.get());
    annotation->SetFrame(frame.get());
    annotation->GetLeadersR().push_back(leader1);

    //.............................................................................................
    Transform xform;
    xform.InitIdentity();
    
    EditElementHandle eeh;
    ASSERT_TRUE(SUCCESS == TextAnnotationHandler::CreateElement(eeh, NULL, *annotation, model, xform, seedID));
    ASSERT_TRUE(SUCCESS == eeh.AddToModel());
    
    elementID = eeh.GetElementId();
    ASSERT_TRUE(elementID.IsValid());

    ASSERT_TRUE(BE_SQLITE_OK == project.SaveChanges());
    }
    
    {
    //.............................................................................................
    ElementHandle eh(elementID, model);
    ASSERT_TRUE(eh.IsValid());
    
    TextAnnotationPtr annotation2 = TextAnnotation::Create(project);
    Transform xform;
    DgnStyleId seedID;
    ASSERT_TRUE(SUCCESS == TextAnnotationHandler::FromElement(annotation2.get(), &xform, &seedID, eh));

    //.............................................................................................
    ASSERT_TRUE(NULL != annotation2->GetTextCP());
    ASSERT_TRUE(NULL != annotation2->GetFrameCP());
    ASSERT_TRUE(1 == annotation2->GetLeaders().size());
    
    ASSERT_TRUE(xform.IsIdentity());
    
    DgnStyleId expectedSeedID;
    GetOrCreateTextAnnotationSeedA(expectedSeedID);
    ASSERT_TRUE(expectedSeedID == seedID);

    VerifyDocumentA(*annotation2->GetTextCP());
    VerifyFrameA(*annotation2->GetFrameCP());
    VerifyLeaderA(*annotation2->GetLeaders()[0]);
    }
#endif
    }
