/*--------------------------------------------------------------------------------------+
|
|     $Source: docs/overview/ElementOverview.doxpage $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//__PUBLISH_SECTION_START__

BEGIN_BENTLEY_DGN_NAMESPACE

/** @page PAGE_ElementOverview DgnElement Basics

@tableofcontents

<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementLifecyle Element Lifecycle

An element first exists only in memory.  If available, a static @c Create method on the desired DgnElement subclass should be used.
The convention is for the @c Create method to return a reference-counted pointer to an element.  
If no static @c Create method is available, @c new should be used with the result captured in a reference-counted pointer.

@note It is not valid to construct a %DgnElement on the stack.

To persist a newly created element, it must be inserted into the DgnDb. The in-memory DgnElements cache is also updated.  
An element is assigned a DgnElementId as part of the insert process.

- DgnElement::Insert
- DgnElements::Insert

An element can then be retrieved by DgnElementId from the DgnElements cache (and, if necessary, loaded into memory from the %DgnDb).  
You can get a const (read-only) reference-counted pointer to the current state on an element

- DgnElements::Get

If your intention is to edit the element, you can get a writeable reference-counted pointer to the element.
You must call @c Update for the changes to be persisted.

- DgnElements::GetForEdit
- DgnElements::Update
- DgnElement::Update

An element can also be deleted.

- DgnElements::Delete
- DgnElement::Delete

And copied or imported.

- DgnElement::Clone
- DgnElement::Import

Don't forget to call DgnElement::Insert on the copy, in order to write it to the destination.

To access an element's properties you may use ECSQL to query property values. You may also read and write individual property values on an element using
 
- DgnElement::_GetProperty
- DgnElement::_SetProperty
- DgnElement::GetUserProperty

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementClasses Element Classes

It is expected that domain developers will subclass from the appropriate %DgnElement class.
Application developers will use the domain classes or base classes.
Some of the most common element classes are described below:

<p>
<table>
    <tr>
        <td>DgnElement</td>
        <td>The base class for all elements.</td>
    </tr>
    <tr>
        <td>PhysicalElement</td>
        <td>A SpatialElement that has mass and can be "touched".  For example: a pump, a door, or a telephone pole.</td>
    </tr>
    <tr>
        <td>SpatialLocationElement</td>
        <td>A SpatialElement that identifies a "tracked" real world location but has no mass and cannot be "touched".  For example: a parcel boundary or a construction work area.</td>
    </tr>
    <tr>
        <td>DrawingGraphic</a></td>
        <td>2D drawing elements.</td>
    </tr>
    <tr>
        <td>DefinitionElement</a></td>
        <td>An information element that stores project styles or templates.</td>
    </tr>
</table>
<p>

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementAssemblies Element Assemblies

Elements can have a parent/child relationship with each other.
This is an @b owning relationship, so if a parent element is deleted, its children are also deleted.
An element can only have one parent.

@see DgnElement::GetParentId
@see DgnElement::SetParentId
@see DgnElement::QueryChildren

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementGrouping Element Grouping

Elements can also be members of multiple ElementGroups through a @b referencing relationship.
Delete is not propagated in this case.

@see IElementGroupOf
@see IElementGroup::QueryMembers

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementCode Element Code

An element's code can be used to provide an <i>official</i> name for an element, to encode <i>business meaning</i>, or to link to a record in an external system.
All elements have a unique 3-part code as described in the following link:

- DgnCode

There are also methods to get and set the element code:

- DgnElement::GetCode
- DgnElement::SetCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementLabel Element Label

Optionally, an element can have a <i>friendly</i> name.

- DgnElement::GetLabel
- DgnElement::SetLabel

An element's display label is for use in the GUI.  
By default, an element's display label is the label if set or the code value if not set.

- DgnElement::GetDisplayLabel

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_ElementOverviewSeeAlso See Also

@see GROUP_DgnElement
@see @ref PAGE_CustomElement
*/

END_BENTLEY_DGN_NAMESPACE
