/*--------------------------------------------------------------------------------------+
|
|  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
|
+--------------------------------------------------------------------------------------*/
//__PUBLISH_SECTION_START__

BEGIN_BENTLEY_DGN_NAMESPACE

/** @page PAGE_CustomModel Custom Model

@tableofcontents

If custom <i>container</i> behavior is desired, it is also possible to subclass one of the base model classes.
Some of the most common model classes are described below:

<p>
<table>
    <tr>
        <td>DgnModel</td>
        <td>The base class for all models.</td>
    </tr>
    <tr>
        <td>SpatialModel</td>
        <td>The base class for models that contain elements in 3-dimensional space.</td>
    </tr>
    <tr>
        <td>DefinitionModel</td>
        <td>The base class for models that contain project styles and templates.</td>
    </tr>
</table>
<p>

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel1 Create ECEntityClass

If custom <i>container</i> behavior is desired, it is also possible to subclass one of the base model classes.
To accomplish this, the first step is to create an ECEntityClass in the ecschema.xml file (data model) that subclasses the appropriate DgnPlatform ECEntityClass:

__PUBLISH_INSERT_FILE__ ToyTileECSchema_ToyTileGroupModel.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel2 Declare C++ class

The next step is to create a C++ class that subclasses the appropriate DgnModel C++ class:

__PUBLISH_INSERT_FILE__ ToyTileGroupModel_Declare.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel3 Implement Create method

It is a best practice to have a static @c Create method that constructs a new instance and returns a reference-counted pointer.  For example:

__PUBLISH_INSERT_FILE__ ToyTileGroupModel_Create.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel4 Override virtual methods

This subclass wants custom behavior that ensures that only particular types of elements are inserted in the model.
This is accomplished by overriding the appropriate virtual method:

__PUBLISH_INSERT_FILE__ ToyTileGroupModel_OnInsertElement.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel5 Declare handler

It is also required to declare a C++ handler class that serves as a <i>factory</i> to create new instances of the C++ class:

__PUBLISH_INSERT_FILE__ ToyTileGroupModelHandler_Declare.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel6 Define handler members

A macro is provided to auto-generate the required factory methods within the handler class.
See the @c ToyTileGroupModelHandler line in the sample code below:

__PUBLISH_INSERT_FILE__ ToyTileDomain_DefineMembers.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel7 Register handlers

The handlers must also be registered.
See the @c ToyTileGroupModelHandler line in the sample code below:

__PUBLISH_INSERT_FILE__ ToyTileDomain_RegisterHandlers.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModel8 Create model

Finally, once everything is configured, here is an example of how to use the handler to create an instance of a custom model subclass and insert it into the %DgnDb:

__PUBLISH_INSERT_FILE__ ToyTileBridge_CreateModel.sampleCode

<hr>
<!-- ---------------------------------------------------------------------------------- -->
@section SECTION_CustomModelSeeAlso See Also

@see GROUP_DgnModel
@see @ref PAGE_ModelOverview
*/

END_BENTLEY_DGN_NAMESPACE
