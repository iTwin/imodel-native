#--------------------------------------------------------------------------------------
#
#     $Source: docs/DgnPlatformOverviewDocs.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------

#---------------------------------------------------------------
# Environment
#---------------------------------------------------------------
baseDir           = $(_MakeFilePath)

%include mdl.mki

buildDir = $(OutputRootDir)build/DgnPlatform/
docsBuildDir = $(buildDir)docs/
docsPublishingInputDir = $(docsBuildDir)publishingInputDir/

#Sample code extraction was already done previously
extractionInputDir = $(docsBuildDir)extractionInputDir/
extractionOutputDir = $(docsBuildDir)extractedsamplecode/

#Output folder for doc files that are ready for Doxygen
readyForDoxygen = $(docsBuildDir)publisherOutput/

always:
    !~@mkdir ${docsPublishingInputDir}
    !~@mkdir ${extractionInputDir}
    !~@mkdir ${extractionOutputDir}
    !~@mkdir ${readyForDoxygen}

%if defined (BMAKE_DELETE_ALL_TARGETS)
    cleanopt = --clean
%else
    cleanopt =
%endif

%if defined (VERBOSE)
    PUBLISH_VERBOSE = -v6
%else
    PUBLISH_VERBOSE = -v3   # INFO_LEVEL_VeryInteresting
%endif

extractionsStampFileName = $(readyForDoxygen)extractionsStampFileName.stamp

overviewStampFileName = $(readyForDoxygen)dgnPlatform.stamp

$(overviewStampFileName) : $(_MakeFileSpec)
    >$@
    dummy
    <

##----------------------------------------------------------------------
# Extract code samples from .h and .cpp files
##----------------------------------------------------------------------
# Gather files that contain code samples into extractionInputDir
$(extractionInputDir)DgnModel.cpp : $(baseDir)../DgnCore/DgnModel.cpp
    $(LinkFirstDepToFirstTarget)
    ~time

$(extractionInputDir)DgnSqlTest.cpp : $(baseDir)../Tests/DgnProject/NonPublished/DgnSqlTest.cpp
    $(LinkFirstDepToFirstTarget)
    ~time

# Extract the samples into extractionOutputDir
always:
    PublishExtract.py -d${extractionInputDir} $(PUBLISH_VERBOSE) $(cleanopt) -o${extractionOutputDir} -s$(extractionsStampFileName) --noProvenance

##----------------------------------------------------------------------
# "Publish" some .cpp files that contain doc
##----------------------------------------------------------------------

# Gather .cpp files into docsPublishingInputDir
$(docsPublishingInputDir)DgnSqlFuncs.overviewPage $(overviewStampFileName) : $(baseDir)../DgnCore/DgnSqlFuncs.cpp
    $(LinkFirstDepToFirstTarget)
    ~time

#TODO: These macros are not used by the DgnPlatform docs. 
#Might be able to remove this once issue in PublishAPI.py was resolved that requires a macro file to be specified
$(docsBuildDir)macros.txt : $(_MakeFileSpec)
    $(msg)
    >$@
    APICBA=ApiRef/Java/reference/com/bentley/android/dgn/;APIJAVA=ApiRef/Java/
    <
    ~time

# Extract docs and insert code samples
# Inserts extracted code samples into the doc files
always:
    PublishAPI.py $(PUBLISH_VERBOSE) -o${readyForDoxygen} -d${docsPublishingInputDir} $(cleanopt) -x$(TARGET_PLATFORM) --insertFileDir=${extractionOutputDir} --insertFileMacros=@$(docsBuildDir)macros.txt

##----------------------------------------------------------------------
# Link in .overviewPages and other files that do not need publishing
##----------------------------------------------------------------------
$(readyForDoxygen)overview : $(baseDir)overview
    $(LinkFirstDepToFirstTargetAsDirectory)

##----------------------------------------------------------------------
#Link doc resources to build context so that consuming SDKs can use it to generate the final
##----------------------------------------------------------------------
#documentation (Note folders in build context are pascal cased)
bcDocsDir = $(BuildContext)Docs/
linkdocstobuildcontext:
    @CreateSymLinks.py -d"$(bcDocsDir)Source/DgnPlatform=${readyForDoxygen}"


%ifdef TBD_doc_images_and_files
    @CreateSymLinks.py -d"$(bcDocsDir)Images/DgnPlatform=$(baseDir)images"
    @CreateSymLinks.py -m"$(bcDocsDir)Files/DgnPlatform=$(baseDir)files"
%endif
