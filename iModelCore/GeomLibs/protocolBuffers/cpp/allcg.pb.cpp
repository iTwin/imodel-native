// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: allcg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "allcg.pb.h"

#include <algorithm>

#include <BeProtobuf/common.h>
#include <BeProtobuf/once.h>
#include <BeProtobuf/coded_stream.h>
#include <BeProtobuf/wire_format_lite_inl.h>
#include <BeProtobuf/descriptor.h>
#include <BeProtobuf/generated_message_reflection.h>
#include <BeProtobuf/reflection_ops.h>
#include <BeProtobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Bentley {
namespace Geometry {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* DPoint3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DPoint3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* DPoint2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DPoint2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* DVector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DVector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPlacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPlacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Angle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Angle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DEllipse3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DEllipse3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* DTransform3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DTransform3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoopType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoopType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoopType_LoopTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ISinglePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ISinglePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPrimitiveCurve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPrimitiveCurve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ICurve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICurve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ICurveChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICurveChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* ISolid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ISolid_reflection_ = NULL;
const ::google::protobuf::Descriptor* IAnalyticSolid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAnalyticSolid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ISurface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ISurface_reflection_ = NULL;
const ::google::protobuf::Descriptor* ISurfacePatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ISurfacePatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* IParametricSurface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IParametricSurface_reflection_ = NULL;
const ::google::protobuf::Descriptor* IGeometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IGeometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* BsplineCurve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BsplineCurve_reflection_ = NULL;
const ::google::protobuf::Descriptor* BsplineSurface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BsplineSurface_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircularArc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircularArc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircularCone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircularCone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircularCylinder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircularCylinder_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircularDisk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircularDisk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* EllipticArc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EllipticArc_reflection_ = NULL;
const ::google::protobuf::Descriptor* EllipticDisk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EllipticDisk_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexedMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexedMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterpolatingCurve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterpolatingCurve_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineString_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrimitiveCurveReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimitiveCurveReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedGroupInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedGroupInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShelledSolid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShelledSolid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleLineText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleLineText_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkewedCone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkewedCone_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolidBySweptSurface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolidBySweptSurface_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spiral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spiral_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfaceBySweptCurve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceBySweptCurve_reflection_ = NULL;
const ::google::protobuf::Descriptor* TorusPipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TorusPipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformedGeometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformedGeometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransitionSpiral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransitionSpiral_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdjacentSurfacePatches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjacentSurfacePatches_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParametricSurfacePatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParametricSurfacePatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedGroupDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedGroupDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolidGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolidGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfaceGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfacePatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfacePatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_allcg_2eproto() {
  protobuf_AddDesc_allcg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "allcg.proto");
  GOOGLE_CHECK(file != NULL);
  DPoint3d_descriptor_ = file->message_type(0);
  static const int DPoint3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint3d, z_),
  };
  DPoint3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DPoint3d_descriptor_,
      DPoint3d::default_instance_,
      DPoint3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DPoint3d));
  DPoint2d_descriptor_ = file->message_type(1);
  static const int DPoint2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint2d, y_),
  };
  DPoint2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DPoint2d_descriptor_,
      DPoint2d::default_instance_,
      DPoint2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPoint2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DPoint2d));
  DVector3d_descriptor_ = file->message_type(2);
  static const int DVector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVector3d, z_),
  };
  DVector3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DVector3d_descriptor_,
      DVector3d::default_instance_,
      DVector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVector3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVector3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DVector3d));
  IPlacement_descriptor_ = file->message_type(3);
  static const int IPlacement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPlacement, orgin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPlacement, vectorZ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPlacement, vectorX_),
  };
  IPlacement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPlacement_descriptor_,
      IPlacement::default_instance_,
      IPlacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPlacement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPlacement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPlacement));
  Angle_descriptor_ = file->message_type(4);
  static const int Angle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Angle, degrees_),
  };
  Angle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Angle_descriptor_,
      Angle::default_instance_,
      Angle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Angle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Angle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Angle));
  DEllipse3d_descriptor_ = file->message_type(5);
  static const int DEllipse3d_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, centerX_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, centerY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, centerZ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector0X_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector0Y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector0Z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector90X_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector90Y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, vector90Z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, startRadians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, sweepRadians_),
  };
  DEllipse3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DEllipse3d_descriptor_,
      DEllipse3d::default_instance_,
      DEllipse3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEllipse3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DEllipse3d));
  DTransform3d_descriptor_ = file->message_type(6);
  static const int DTransform3d_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, axx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, axy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, axz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, axw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, ayx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, ayy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, ayz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, ayw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, azx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, azy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, azz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, azw_),
  };
  DTransform3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DTransform3d_descriptor_,
      DTransform3d::default_instance_,
      DTransform3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTransform3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DTransform3d));
  LoopType_descriptor_ = file->message_type(7);
  static const int LoopType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopType, loopType_),
  };
  LoopType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoopType_descriptor_,
      LoopType::default_instance_,
      LoopType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoopType));
  LoopType_LoopTypeEnum_descriptor_ = LoopType_descriptor_->enum_type(0);
  ISinglePoint_descriptor_ = file->message_type(8);
  static const int ISinglePoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, sharedGruopInstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, singleLineText_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, transformedGeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, vector_),
  };
  ISinglePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ISinglePoint_descriptor_,
      ISinglePoint::default_instance_,
      ISinglePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISinglePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ISinglePoint));
  IPoint_descriptor_ = file->message_type(9);
  static const int IPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPoint, singlePoint_),
  };
  IPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPoint_descriptor_,
      IPoint::default_instance_,
      IPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPoint));
  IPrimitiveCurve_descriptor_ = file->message_type(10);
  static const int IPrimitiveCurve_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, lineSegment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, lineString_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, circularArc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, ellipticArc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, bsplineCurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, transitionSpiral_),
  };
  IPrimitiveCurve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPrimitiveCurve_descriptor_,
      IPrimitiveCurve::default_instance_,
      IPrimitiveCurve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPrimitiveCurve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPrimitiveCurve));
  ICurve_descriptor_ = file->message_type(11);
  static const int ICurve_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurve, primtiveCurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurve, curveChain_),
  };
  ICurve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ICurve_descriptor_,
      ICurve::default_instance_,
      ICurve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ICurve));
  ICurveChain_descriptor_ = file->message_type(12);
  static const int ICurveChain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurveChain, curveChain_),
  };
  ICurveChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ICurveChain_descriptor_,
      ICurveChain::default_instance_,
      ICurveChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurveChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICurveChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ICurveChain));
  ISolid_descriptor_ = file->message_type(13);
  static const int ISolid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISolid, analyticSolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISolid, solidBySweptSurface_),
  };
  ISolid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ISolid_descriptor_,
      ISolid::default_instance_,
      ISolid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISolid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISolid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ISolid));
  IAnalyticSolid_descriptor_ = file->message_type(14);
  static const int IAnalyticSolid_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, circularCone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, skewedCone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, sphere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, torusPipe_),
  };
  IAnalyticSolid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IAnalyticSolid_descriptor_,
      IAnalyticSolid::default_instance_,
      IAnalyticSolid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAnalyticSolid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IAnalyticSolid));
  ISurface_descriptor_ = file->message_type(15);
  static const int ISurface_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, circularDisk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, ellipticDisk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, bsplineSuface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, indexedMesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, parametricSurfacePatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, surfaceBySweptCurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, surfaceGroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, surfacePatch_),
  };
  ISurface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ISurface_descriptor_,
      ISurface::default_instance_,
      ISurface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ISurface));
  ISurfacePatch_descriptor_ = file->message_type(16);
  static const int ISurfacePatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurfacePatch, parametricSurfacePatch_),
  };
  ISurfacePatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ISurfacePatch_descriptor_,
      ISurfacePatch::default_instance_,
      ISurfacePatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurfacePatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISurfacePatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ISurfacePatch));
  IParametricSurface_descriptor_ = file->message_type(17);
  static const int IParametricSurface_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IParametricSurface, bsplineSuface_),
  };
  IParametricSurface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IParametricSurface_descriptor_,
      IParametricSurface::default_instance_,
      IParametricSurface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IParametricSurface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IParametricSurface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IParametricSurface));
  IGeometry_descriptor_ = file->message_type(18);
  static const int IGeometry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, curve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, solid_),
  };
  IGeometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IGeometry_descriptor_,
      IGeometry::default_instance_,
      IGeometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IGeometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IGeometry));
  Block_descriptor_ = file->message_type(19);
  static const int Block_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, cornerA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, cornerB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, bSolidFlag_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  BsplineCurve_descriptor_ = file->message_type(20);
  static const int BsplineCurve_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, Order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, Closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, ControlPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, Weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, Knot_),
  };
  BsplineCurve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BsplineCurve_descriptor_,
      BsplineCurve::default_instance_,
      BsplineCurve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineCurve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BsplineCurve));
  BsplineSurface_descriptor_ = file->message_type(21);
  static const int BsplineSurface_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, OrderU_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, ClosedU_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, NumUControlPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, OrderV_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, ClosedV_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, NumVControlPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, ControlPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, Weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, KnotU_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, KnotV_),
  };
  BsplineSurface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BsplineSurface_descriptor_,
      BsplineSurface::default_instance_,
      BsplineSurface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsplineSurface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BsplineSurface));
  CircularArc_descriptor_ = file->message_type(22);
  static const int CircularArc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, startAngle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, sweepAngle_),
  };
  CircularArc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircularArc_descriptor_,
      CircularArc::default_instance_,
      CircularArc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularArc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircularArc));
  CircularCone_descriptor_ = file->message_type(23);
  static const int CircularCone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, radiusA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, radiusB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, bSolidFlag_),
  };
  CircularCone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircularCone_descriptor_,
      CircularCone::default_instance_,
      CircularCone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircularCone));
  CircularCylinder_descriptor_ = file->message_type(24);
  static const int CircularCylinder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, bSolidFlag_),
  };
  CircularCylinder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircularCylinder_descriptor_,
      CircularCylinder::default_instance_,
      CircularCylinder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularCylinder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircularCylinder));
  CircularDisk_descriptor_ = file->message_type(25);
  static const int CircularDisk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularDisk, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularDisk, radius_),
  };
  CircularDisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircularDisk_descriptor_,
      CircularDisk::default_instance_,
      CircularDisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularDisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircularDisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircularDisk));
  Coordinate_descriptor_ = file->message_type(26);
  static const int Coordinate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, xyz_),
  };
  Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::default_instance_,
      Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coordinate));
  CurveReference_descriptor_ = file->message_type(27);
  static const int CurveReference_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveReference, ParentCurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveReference, Reversed_),
  };
  CurveReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurveReference_descriptor_,
      CurveReference::default_instance_,
      CurveReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurveReference));
  EllipticArc_descriptor_ = file->message_type(28);
  static const int EllipticArc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, radiusA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, radiusB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, startAngle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, sweepAngle_),
  };
  EllipticArc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EllipticArc_descriptor_,
      EllipticArc::default_instance_,
      EllipticArc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticArc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EllipticArc));
  EllipticDisk_descriptor_ = file->message_type(29);
  static const int EllipticDisk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticDisk, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticDisk, radiusA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticDisk, radiusB_),
  };
  EllipticDisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EllipticDisk_descriptor_,
      EllipticDisk::default_instance_,
      EllipticDisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticDisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipticDisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EllipticDisk));
  IndexedMesh_descriptor_ = file->message_type(30);
  static const int IndexedMesh_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, Coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, CoordIndex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, Param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, ParamIndex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, Normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, NormalIndex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, Color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, ColorIndex_),
  };
  IndexedMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexedMesh_descriptor_,
      IndexedMesh::default_instance_,
      IndexedMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexedMesh));
  InterpolatingCurve_descriptor_ = file->message_type(31);
  static const int InterpolatingCurve_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, EndConditionCode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, KnotCode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, StartVector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, EndVector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, Point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, Knot_),
  };
  InterpolatingCurve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterpolatingCurve_descriptor_,
      InterpolatingCurve::default_instance_,
      InterpolatingCurve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpolatingCurve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterpolatingCurve));
  LineSegment_descriptor_ = file->message_type(32);
  static const int LineSegment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, startPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, endPoint_),
  };
  LineSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineSegment_descriptor_,
      LineSegment::default_instance_,
      LineSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineSegment));
  LineString_descriptor_ = file->message_type(33);
  static const int LineString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, Point_),
  };
  LineString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineString_descriptor_,
      LineString::default_instance_,
      LineString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineString));
  Polygon_descriptor_ = file->message_type(34);
  static const int Polygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, Point_),
  };
  Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Polygon));
  PrimitiveCurveReference_descriptor_ = file->message_type(35);
  static const int PrimitiveCurveReference_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveCurveReference, ParentCurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveCurveReference, Reversed_),
  };
  PrimitiveCurveReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimitiveCurveReference_descriptor_,
      PrimitiveCurveReference::default_instance_,
      PrimitiveCurveReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveCurveReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveCurveReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimitiveCurveReference));
  SharedGroupInstance_descriptor_ = file->message_type(36);
  static const int SharedGroupInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupInstance, SharedGroupName_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupInstance, Transform_),
  };
  SharedGroupInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedGroupInstance_descriptor_,
      SharedGroupInstance::default_instance_,
      SharedGroupInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedGroupInstance));
  ShelledSolid_descriptor_ = file->message_type(37);
  static const int ShelledSolid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShelledSolid, BoundingSurface_),
  };
  ShelledSolid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShelledSolid_descriptor_,
      ShelledSolid::default_instance_,
      ShelledSolid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShelledSolid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShelledSolid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShelledSolid));
  SingleLineText_descriptor_ = file->message_type(38);
  static const int SingleLineText_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, textString_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, fontName_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, characterXSize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, characterYSize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, justification_),
  };
  SingleLineText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleLineText_descriptor_,
      SingleLineText::default_instance_,
      SingleLineText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLineText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleLineText));
  SkewedCone_descriptor_ = file->message_type(39);
  static const int SkewedCone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, centerB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, radiusA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, radiusB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, bSolidFlag_),
  };
  SkewedCone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkewedCone_descriptor_,
      SkewedCone::default_instance_,
      SkewedCone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkewedCone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkewedCone));
  SolidBySweptSurface_descriptor_ = file->message_type(40);
  static const int SolidBySweptSurface_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidBySweptSurface, BaseGeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidBySweptSurface, RailCurve_),
  };
  SolidBySweptSurface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolidBySweptSurface_descriptor_,
      SolidBySweptSurface::default_instance_,
      SolidBySweptSurface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidBySweptSurface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidBySweptSurface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolidBySweptSurface));
  Sphere_descriptor_ = file->message_type(41);
  static const int Sphere_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, radius_),
  };
  Sphere_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sphere_descriptor_,
      Sphere::default_instance_,
      Sphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sphere));
  Spiral_descriptor_ = file->message_type(42);
  static const int Spiral_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, SpiralType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, StartPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, StartBearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, StartCurvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, EndPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, EndBearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, EndCurvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, Geometry_),
  };
  Spiral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spiral_descriptor_,
      Spiral::default_instance_,
      Spiral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spiral));
  SurfaceBySweptCurve_descriptor_ = file->message_type(43);
  static const int SurfaceBySweptCurve_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceBySweptCurve, BaseGeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceBySweptCurve, RailCurve_),
  };
  SurfaceBySweptCurve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceBySweptCurve_descriptor_,
      SurfaceBySweptCurve::default_instance_,
      SurfaceBySweptCurve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceBySweptCurve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceBySweptCurve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceBySweptCurve));
  TorusPipe_descriptor_ = file->message_type(44);
  static const int TorusPipe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, radiusA_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, radiusB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, startAngle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, sweepAngle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, bSolidFlag_),
  };
  TorusPipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TorusPipe_descriptor_,
      TorusPipe::default_instance_,
      TorusPipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorusPipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TorusPipe));
  TransformedGeometry_descriptor_ = file->message_type(45);
  static const int TransformedGeometry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformedGeometry, Transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformedGeometry, Geometry_),
  };
  TransformedGeometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformedGeometry_descriptor_,
      TransformedGeometry::default_instance_,
      TransformedGeometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformedGeometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformedGeometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformedGeometry));
  TransitionSpiral_descriptor_ = file->message_type(46);
  static const int TransitionSpiral_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, SpiralType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, Placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, StartBearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, StartRadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, EndBearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, EndRadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, ActiveStartFraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, ActiveEndFraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, Geometry_),
  };
  TransitionSpiral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransitionSpiral_descriptor_,
      TransitionSpiral::default_instance_,
      TransitionSpiral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionSpiral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransitionSpiral));
  Vector_descriptor_ = file->message_type(47);
  static const int Vector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, xyz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, vector_),
  };
  Vector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector));
  AdjacentSurfacePatches_descriptor_ = file->message_type(48);
  static const int AdjacentSurfacePatches_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjacentSurfacePatches, Patch_),
  };
  AdjacentSurfacePatches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdjacentSurfacePatches_descriptor_,
      AdjacentSurfacePatches::default_instance_,
      AdjacentSurfacePatches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjacentSurfacePatches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjacentSurfacePatches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdjacentSurfacePatches));
  Group_descriptor_ = file->message_type(49);
  static const int Group_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, Member_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  CurveChain_descriptor_ = file->message_type(50);
  static const int CurveChain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveChain, Curve_),
  };
  CurveChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurveChain_descriptor_,
      CurveChain::default_instance_,
      CurveChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurveChain));
  CurveGroup_descriptor_ = file->message_type(51);
  static const int CurveGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveGroup, Curve_),
  };
  CurveGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurveGroup_descriptor_,
      CurveGroup::default_instance_,
      CurveGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurveGroup));
  Operation_descriptor_ = file->message_type(52);
  static const int Operation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, Name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, Member_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  ParametricSurfacePatch_descriptor_ = file->message_type(53);
  static const int ParametricSurfacePatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricSurfacePatch, Surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricSurfacePatch, CurveChain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricSurfacePatch, LoopType_),
  };
  ParametricSurfacePatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParametricSurfacePatch_descriptor_,
      ParametricSurfacePatch::default_instance_,
      ParametricSurfacePatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricSurfacePatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricSurfacePatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParametricSurfacePatch));
  PointChain_descriptor_ = file->message_type(54);
  static const int PointChain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointChain, Point_),
  };
  PointChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointChain_descriptor_,
      PointChain::default_instance_,
      PointChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointChain));
  PointGroup_descriptor_ = file->message_type(55);
  static const int PointGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointGroup, Member_),
  };
  PointGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointGroup_descriptor_,
      PointGroup::default_instance_,
      PointGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointGroup));
  SharedGroupDef_descriptor_ = file->message_type(56);
  static const int SharedGroupDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupDef, Name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupDef, Geometry_),
  };
  SharedGroupDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedGroupDef_descriptor_,
      SharedGroupDef::default_instance_,
      SharedGroupDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedGroupDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedGroupDef));
  SolidGroup_descriptor_ = file->message_type(57);
  static const int SolidGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidGroup, Solid_),
  };
  SolidGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolidGroup_descriptor_,
      SolidGroup::default_instance_,
      SolidGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolidGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolidGroup));
  SurfaceGroup_descriptor_ = file->message_type(58);
  static const int SurfaceGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceGroup, Surface_),
  };
  SurfaceGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceGroup_descriptor_,
      SurfaceGroup::default_instance_,
      SurfaceGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceGroup));
  SurfacePatch_descriptor_ = file->message_type(59);
  static const int SurfacePatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfacePatch, ExteriorLoop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfacePatch, HoleLoop_),
  };
  SurfacePatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfacePatch_descriptor_,
      SurfacePatch::default_instance_,
      SurfacePatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfacePatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfacePatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfacePatch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_allcg_2eproto);
}

void protobuf_RegisterTypes(const ::Bentley::Utf8String&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DPoint3d_descriptor_, &DPoint3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DPoint2d_descriptor_, &DPoint2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DVector3d_descriptor_, &DVector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPlacement_descriptor_, &IPlacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Angle_descriptor_, &Angle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DEllipse3d_descriptor_, &DEllipse3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DTransform3d_descriptor_, &DTransform3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoopType_descriptor_, &LoopType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ISinglePoint_descriptor_, &ISinglePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPoint_descriptor_, &IPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPrimitiveCurve_descriptor_, &IPrimitiveCurve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ICurve_descriptor_, &ICurve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ICurveChain_descriptor_, &ICurveChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ISolid_descriptor_, &ISolid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IAnalyticSolid_descriptor_, &IAnalyticSolid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ISurface_descriptor_, &ISurface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ISurfacePatch_descriptor_, &ISurfacePatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IParametricSurface_descriptor_, &IParametricSurface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IGeometry_descriptor_, &IGeometry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BsplineCurve_descriptor_, &BsplineCurve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BsplineSurface_descriptor_, &BsplineSurface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircularArc_descriptor_, &CircularArc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircularCone_descriptor_, &CircularCone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircularCylinder_descriptor_, &CircularCylinder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircularDisk_descriptor_, &CircularDisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coordinate_descriptor_, &Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurveReference_descriptor_, &CurveReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EllipticArc_descriptor_, &EllipticArc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EllipticDisk_descriptor_, &EllipticDisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexedMesh_descriptor_, &IndexedMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterpolatingCurve_descriptor_, &InterpolatingCurve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineSegment_descriptor_, &LineSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineString_descriptor_, &LineString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimitiveCurveReference_descriptor_, &PrimitiveCurveReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedGroupInstance_descriptor_, &SharedGroupInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShelledSolid_descriptor_, &ShelledSolid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleLineText_descriptor_, &SingleLineText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkewedCone_descriptor_, &SkewedCone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolidBySweptSurface_descriptor_, &SolidBySweptSurface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sphere_descriptor_, &Sphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spiral_descriptor_, &Spiral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceBySweptCurve_descriptor_, &SurfaceBySweptCurve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TorusPipe_descriptor_, &TorusPipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformedGeometry_descriptor_, &TransformedGeometry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransitionSpiral_descriptor_, &TransitionSpiral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdjacentSurfacePatches_descriptor_, &AdjacentSurfacePatches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurveChain_descriptor_, &CurveChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurveGroup_descriptor_, &CurveGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParametricSurfacePatch_descriptor_, &ParametricSurfacePatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointChain_descriptor_, &PointChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointGroup_descriptor_, &PointGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedGroupDef_descriptor_, &SharedGroupDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolidGroup_descriptor_, &SolidGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceGroup_descriptor_, &SurfaceGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfacePatch_descriptor_, &SurfacePatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_allcg_2eproto() {
  delete DPoint3d::default_instance_;
  delete DPoint3d_reflection_;
  delete DPoint2d::default_instance_;
  delete DPoint2d_reflection_;
  delete DVector3d::default_instance_;
  delete DVector3d_reflection_;
  delete IPlacement::default_instance_;
  delete IPlacement_reflection_;
  delete Angle::default_instance_;
  delete Angle_reflection_;
  delete DEllipse3d::default_instance_;
  delete DEllipse3d_reflection_;
  delete DTransform3d::default_instance_;
  delete DTransform3d_reflection_;
  delete LoopType::default_instance_;
  delete LoopType_reflection_;
  delete ISinglePoint::default_instance_;
  delete ISinglePoint_reflection_;
  delete IPoint::default_instance_;
  delete IPoint_reflection_;
  delete IPrimitiveCurve::default_instance_;
  delete IPrimitiveCurve_reflection_;
  delete ICurve::default_instance_;
  delete ICurve_reflection_;
  delete ICurveChain::default_instance_;
  delete ICurveChain_reflection_;
  delete ISolid::default_instance_;
  delete ISolid_reflection_;
  delete IAnalyticSolid::default_instance_;
  delete IAnalyticSolid_reflection_;
  delete ISurface::default_instance_;
  delete ISurface_reflection_;
  delete ISurfacePatch::default_instance_;
  delete ISurfacePatch_reflection_;
  delete IParametricSurface::default_instance_;
  delete IParametricSurface_reflection_;
  delete IGeometry::default_instance_;
  delete IGeometry_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete BsplineCurve::default_instance_;
  delete BsplineCurve_reflection_;
  delete BsplineSurface::default_instance_;
  delete BsplineSurface_reflection_;
  delete CircularArc::default_instance_;
  delete CircularArc_reflection_;
  delete CircularCone::default_instance_;
  delete CircularCone_reflection_;
  delete CircularCylinder::default_instance_;
  delete CircularCylinder_reflection_;
  delete CircularDisk::default_instance_;
  delete CircularDisk_reflection_;
  delete Coordinate::default_instance_;
  delete Coordinate_reflection_;
  delete CurveReference::default_instance_;
  delete CurveReference_reflection_;
  delete EllipticArc::default_instance_;
  delete EllipticArc_reflection_;
  delete EllipticDisk::default_instance_;
  delete EllipticDisk_reflection_;
  delete IndexedMesh::default_instance_;
  delete IndexedMesh_reflection_;
  delete InterpolatingCurve::default_instance_;
  delete InterpolatingCurve_reflection_;
  delete LineSegment::default_instance_;
  delete LineSegment_reflection_;
  delete LineString::default_instance_;
  delete LineString_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete PrimitiveCurveReference::default_instance_;
  delete PrimitiveCurveReference_reflection_;
  delete SharedGroupInstance::default_instance_;
  delete SharedGroupInstance_reflection_;
  delete ShelledSolid::default_instance_;
  delete ShelledSolid_reflection_;
  delete SingleLineText::default_instance_;
  delete SingleLineText_reflection_;
  delete SkewedCone::default_instance_;
  delete SkewedCone_reflection_;
  delete SolidBySweptSurface::default_instance_;
  delete SolidBySweptSurface_reflection_;
  delete Sphere::default_instance_;
  delete Sphere_reflection_;
  delete Spiral::default_instance_;
  delete Spiral_reflection_;
  delete SurfaceBySweptCurve::default_instance_;
  delete SurfaceBySweptCurve_reflection_;
  delete TorusPipe::default_instance_;
  delete TorusPipe_reflection_;
  delete TransformedGeometry::default_instance_;
  delete TransformedGeometry_reflection_;
  delete TransitionSpiral::default_instance_;
  delete TransitionSpiral_reflection_;
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete AdjacentSurfacePatches::default_instance_;
  delete AdjacentSurfacePatches_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete CurveChain::default_instance_;
  delete CurveChain_reflection_;
  delete CurveGroup::default_instance_;
  delete CurveGroup_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete ParametricSurfacePatch::default_instance_;
  delete ParametricSurfacePatch_reflection_;
  delete PointChain::default_instance_;
  delete PointChain_reflection_;
  delete PointGroup::default_instance_;
  delete PointGroup_reflection_;
  delete SharedGroupDef::default_instance_;
  delete SharedGroupDef_reflection_;
  delete SolidGroup::default_instance_;
  delete SolidGroup_reflection_;
  delete SurfaceGroup::default_instance_;
  delete SurfaceGroup_reflection_;
  delete SurfacePatch::default_instance_;
  delete SurfacePatch_reflection_;
}

void protobuf_AddDesc_allcg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013allcg.proto\022\026Bentley.Geometry.Proto\"+\n"
    "\010DPoint3d\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002"
    "(\001\" \n\010DPoint2d\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\",\n\t"
    "DVector3d\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002"
    "(\001\"\245\001\n\nIPlacement\022/\n\005orgin\030\001 \002(\0132 .Bentl"
    "ey.Geometry.Proto.DPoint3d\0222\n\007vectorZ\030\002 "
    "\002(\0132!.Bentley.Geometry.Proto.DVector3d\0222"
    "\n\007vectorX\030\003 \002(\0132!.Bentley.Geometry.Proto"
    ".DVector3d\"\030\n\005Angle\022\017\n\007degrees\030\001 \002(\001\"\332\001\n"
    "\nDEllipse3d\022\017\n\007centerX\030\001 \002(\001\022\017\n\007centerY\030"
    "\002 \002(\001\022\017\n\007centerZ\030\003 \002(\001\022\020\n\010vector0X\030\004 \002(\001"
    "\022\020\n\010vector0Y\030\005 \002(\001\022\020\n\010vector0Z\030\006 \002(\001\022\021\n\t"
    "vector90X\030\007 \002(\001\022\021\n\tvector90Y\030\010 \002(\001\022\021\n\tve"
    "ctor90Z\030\t \002(\001\022\024\n\014startRadians\030\n \002(\001\022\024\n\014s"
    "weepRadians\030\013 \002(\001\"\252\001\n\014DTransform3d\022\013\n\003ax"
    "x\030\001 \002(\001\022\013\n\003axy\030\002 \002(\001\022\013\n\003axz\030\003 \002(\001\022\013\n\003axw"
    "\030\004 \002(\001\022\013\n\003ayx\030\005 \002(\001\022\013\n\003ayy\030\006 \002(\001\022\013\n\003ayz\030"
    "\007 \002(\001\022\013\n\003ayw\030\010 \002(\001\022\013\n\003azx\030\t \002(\001\022\013\n\003azy\030\n"
    " \002(\001\022\013\n\003azz\030\013 \002(\001\022\013\n\003azw\030\014 \002(\001\"{\n\010LoopTy"
    "pe\022\?\n\010loopType\030\001 \002(\0162-.Bentley.Geometry."
    "Proto.LoopType.LoopTypeEnum\".\n\014LoopTypeE"
    "num\022\n\n\006Parity\020\001\022\022\n\016InteriorToLeft\020\002\"\312\002\n\014"
    "ISinglePoint\0226\n\ncoordinate\030\001 \001(\0132\".Bentl"
    "ey.Geometry.Proto.Coordinate\022H\n\023sharedGr"
    "uopInstance\030\002 \001(\0132+.Bentley.Geometry.Pro"
    "to.SharedGroupInstance\022>\n\016singleLineText"
    "\030\003 \001(\0132&.Bentley.Geometry.Proto.SingleLi"
    "neText\022H\n\023transformedGeometry\030\004 \001(\0132+.Be"
    "ntley.Geometry.Proto.TransformedGeometry"
    "\022.\n\006vector\030\005 \001(\0132\036.Bentley.Geometry.Prot"
    "o.Vector\"C\n\006IPoint\0229\n\013singlePoint\030\001 \001(\0132"
    "$.Bentley.Geometry.Proto.ISinglePoint\"\367\002"
    "\n\017IPrimitiveCurve\0228\n\013lineSegment\030\001 \001(\0132#"
    ".Bentley.Geometry.Proto.LineSegment\0226\n\nl"
    "ineString\030\002 \001(\0132\".Bentley.Geometry.Proto"
    ".LineString\0228\n\013circularArc\030\003 \001(\0132#.Bentl"
    "ey.Geometry.Proto.CircularArc\0228\n\013ellipti"
    "cArc\030\004 \001(\0132#.Bentley.Geometry.Proto.Elli"
    "pticArc\022:\n\014bsplineCurve\030\005 \001(\0132$.Bentley."
    "Geometry.Proto.BsplineCurve\022B\n\020transitio"
    "nSpiral\030\006 \001(\0132(.Bentley.Geometry.Proto.T"
    "ransitionSpiral\"\200\001\n\006ICurve\022>\n\rprimtiveCu"
    "rve\030\001 \001(\0132\'.Bentley.Geometry.Proto.IPrim"
    "itiveCurve\0226\n\ncurveChain\030\002 \001(\0132\".Bentley"
    ".Geometry.Proto.CurveChain\"E\n\013ICurveChai"
    "n\0226\n\ncurveChain\030\001 \001(\0132\".Bentley.Geometry"
    ".Proto.CurveChain\"\221\001\n\006ISolid\022=\n\ranalytic"
    "Solid\030\001 \001(\0132&.Bentley.Geometry.Proto.IAn"
    "alyticSolid\022H\n\023solidBySweptSurface\030f \001(\013"
    "2+.Bentley.Geometry.Proto.SolidBySweptSu"
    "rface\"\230\002\n\016IAnalyticSolid\022,\n\005block\030\001 \001(\0132"
    "\035.Bentley.Geometry.Proto.Block\022:\n\014circul"
    "arCone\030\002 \001(\0132$.Bentley.Geometry.Proto.Ci"
    "rcularCone\0226\n\nskewedCone\030\003 \001(\0132\".Bentley"
    ".Geometry.Proto.SkewedCone\022.\n\006sphere\030\004 \001"
    "(\0132\036.Bentley.Geometry.Proto.Sphere\0224\n\tto"
    "rusPipe\030\005 \001(\0132!.Bentley.Geometry.Proto.T"
    "orusPipe\"\277\004\n\010ISurface\0220\n\007polygon\030\001 \001(\0132\037"
    ".Bentley.Geometry.Proto.Polygon\022:\n\014circu"
    "larDisk\030\002 \001(\0132$.Bentley.Geometry.Proto.C"
    "ircularDisk\022:\n\014ellipticDisk\030\003 \001(\0132$.Bent"
    "ley.Geometry.Proto.EllipticDisk\022=\n\rbspli"
    "neSuface\030d \001(\0132&.Bentley.Geometry.Proto."
    "BsplineSurface\0228\n\013indexedMesh\030e \001(\0132#.Be"
    "ntley.Geometry.Proto.IndexedMesh\022N\n\026para"
    "metricSurfacePatch\030f \001(\0132..Bentley.Geome"
    "try.Proto.ParametricSurfacePatch\022H\n\023surf"
    "aceBySweptCurve\030g \001(\0132+.Bentley.Geometry"
    ".Proto.SurfaceBySweptCurve\022:\n\014surfaceGro"
    "up\030h \001(\0132$.Bentley.Geometry.Proto.Surfac"
    "eGroup\022:\n\014surfacePatch\030i \001(\0132$.Bentley.G"
    "eometry.Proto.SurfacePatch\"_\n\rISurfacePa"
    "tch\022N\n\026parametricSurfacePatch\030\001 \001(\0132..Be"
    "ntley.Geometry.Proto.ParametricSurfacePa"
    "tch\"S\n\022IParametricSurface\022=\n\rbsplineSufa"
    "ce\030\001 \001(\0132&.Bentley.Geometry.Proto.Bsplin"
    "eSurface\"\313\001\n\tIGeometry\022-\n\005point\030\001 \001(\0132\036."
    "Bentley.Geometry.Proto.IPoint\022-\n\005curve\030\002"
    " \001(\0132\036.Bentley.Geometry.Proto.ICurve\0221\n\007"
    "surface\030\003 \001(\0132 .Bentley.Geometry.Proto.I"
    "Surface\022-\n\005solid\030\004 \001(\0132\036.Bentley.Geometr"
    "y.Proto.ISolid\"\270\001\n\005Block\0225\n\tplacement\030\001 "
    "\002(\0132\".Bentley.Geometry.Proto.IPlacement\022"
    "1\n\007cornerA\030\002 \002(\0132 .Bentley.Geometry.Prot"
    "o.DPoint3d\0221\n\007cornerB\030\003 \002(\0132 .Bentley.Ge"
    "ometry.Proto.DPoint3d\022\022\n\nbSolidFlag\030\004 \002("
    "\010\"\203\001\n\014BsplineCurve\022\r\n\005Order\030\001 \002(\005\022\016\n\006Clo"
    "sed\030\002 \002(\010\0226\n\014ControlPoint\030\003 \003(\0132 .Bentle"
    "y.Geometry.Proto.DPoint3d\022\016\n\006Weight\030\004 \003("
    "\001\022\014\n\004Knot\030\005 \003(\001\"\354\001\n\016BsplineSurface\022\016\n\006Or"
    "derU\030\001 \002(\005\022\017\n\007ClosedU\030\002 \002(\010\022\030\n\020NumUContr"
    "olPoint\030\003 \002(\005\022\016\n\006OrderV\030\004 \002(\005\022\017\n\007ClosedV"
    "\030\005 \002(\010\022\030\n\020NumVControlPoint\030\006 \002(\005\0226\n\014Cont"
    "rolPoint\030\007 \003(\0132 .Bentley.Geometry.Proto."
    "DPoint3d\022\016\n\006Weight\030\010 \003(\001\022\r\n\005KnotU\030\t \003(\001\022"
    "\r\n\005KnotV\030\n \003(\001\"\272\001\n\013CircularArc\0225\n\tplacem"
    "ent\030\001 \002(\0132\".Bentley.Geometry.Proto.IPlac"
    "ement\022\016\n\006radius\030\002 \002(\001\0221\n\nstartAngle\030\003 \002("
    "\0132\035.Bentley.Geometry.Proto.Angle\0221\n\nswee"
    "pAngle\030\004 \002(\0132\035.Bentley.Geometry.Proto.An"
    "gle\"\213\001\n\014CircularCone\0225\n\tplacement\030\001 \002(\0132"
    "\".Bentley.Geometry.Proto.IPlacement\022\016\n\006h"
    "eight\030\002 \002(\001\022\017\n\007radiusA\030\003 \002(\001\022\017\n\007radiusB\030"
    "\004 \002(\001\022\022\n\nbSolidFlag\030\005 \002(\010\"}\n\020CircularCyl"
    "inder\0225\n\tplacement\030\001 \002(\0132\".Bentley.Geome"
    "try.Proto.IPlacement\022\016\n\006height\030\002 \002(\001\022\016\n\006"
    "radius\030\003 \002(\001\022\022\n\nbSolidFlag\030\004 \002(\010\"U\n\014Circ"
    "ularDisk\0225\n\tplacement\030\001 \002(\0132\".Bentley.Ge"
    "ometry.Proto.IPlacement\022\016\n\006radius\030\002 \002(\001\""
    ";\n\nCoordinate\022-\n\003xyz\030\001 \002(\0132 .Bentley.Geo"
    "metry.Proto.DPoint3d\"W\n\016CurveReference\0223"
    "\n\013ParentCurve\030\001 \002(\0132\036.Bentley.Geometry.P"
    "roto.ICurve\022\020\n\010Reversed\030\002 \002(\010\"\314\001\n\013Ellipt"
    "icArc\0225\n\tplacement\030\001 \002(\0132\".Bentley.Geome"
    "try.Proto.IPlacement\022\017\n\007radiusA\030\002 \002(\001\022\017\n"
    "\007radiusB\030\003 \002(\001\0221\n\nstartAngle\030\004 \002(\0132\035.Ben"
    "tley.Geometry.Proto.Angle\0221\n\nsweepAngle\030"
    "\005 \002(\0132\035.Bentley.Geometry.Proto.Angle\"g\n\014"
    "EllipticDisk\0225\n\tplacement\030\001 \002(\0132\".Bentle"
    "y.Geometry.Proto.IPlacement\022\017\n\007radiusA\030\002"
    " \002(\001\022\017\n\007radiusB\030\003 \002(\001\"\245\002\n\013IndexedMesh\022/\n"
    "\005Coord\030\001 \003(\0132 .Bentley.Geometry.Proto.DP"
    "oint3d\022\022\n\nCoordIndex\030\002 \003(\005\022/\n\005Param\030\003 \003("
    "\0132 .Bentley.Geometry.Proto.DPoint2d\022\022\n\nP"
    "aramIndex\030\004 \003(\005\0221\n\006Normal\030\005 \003(\0132!.Bentle"
    "y.Geometry.Proto.DVector3d\022\023\n\013NormalInde"
    "x\030\006 \003(\005\0220\n\005Color\030\007 \003(\0132!.Bentley.Geometr"
    "y.Proto.DVector3d\022\022\n\nColorIndex\030\010 \003(\005\"\355\001"
    "\n\022InterpolatingCurve\022\030\n\020EndConditionCode"
    "\030\001 \002(\005\022\020\n\010KnotCode\030\002 \002(\005\0226\n\013StartVector\030"
    "\003 \002(\0132!.Bentley.Geometry.Proto.DVector3d"
    "\0224\n\tEndVector\030\004 \002(\0132!.Bentley.Geometry.P"
    "roto.DVector3d\022/\n\005Point\030\005 \003(\0132 .Bentley."
    "Geometry.Proto.DPoint3d\022\014\n\004Knot\030\006 \003(\001\"w\n"
    "\013LineSegment\0224\n\nstartPoint\030\001 \002(\0132 .Bentl"
    "ey.Geometry.Proto.DPoint3d\0222\n\010endPoint\030\002"
    " \002(\0132 .Bentley.Geometry.Proto.DPoint3d\"="
    "\n\nLineString\022/\n\005Point\030\001 \003(\0132 .Bentley.Ge"
    "ometry.Proto.DPoint3d\":\n\007Polygon\022/\n\005Poin"
    "t\030\001 \003(\0132 .Bentley.Geometry.Proto.DPoint3"
    "d\"i\n\027PrimitiveCurveReference\022<\n\013ParentCu"
    "rve\030\001 \002(\0132\'.Bentley.Geometry.Proto.IPrim"
    "itiveCurve\022\020\n\010Reversed\030\002 \002(\010\"g\n\023SharedGr"
    "oupInstance\022\027\n\017SharedGroupName\030\001 \002(\t\0227\n\t"
    "Transform\030\002 \002(\0132$.Bentley.Geometry.Proto"
    ".DTransform3d\"I\n\014ShelledSolid\0229\n\017Boundin"
    "gSurface\030\001 \002(\0132 .Bentley.Geometry.Proto."
    "ISurface\"\264\001\n\016SingleLineText\0225\n\tplacement"
    "\030\001 \002(\0132\".Bentley.Geometry.Proto.IPlaceme"
    "nt\022\022\n\ntextString\030\002 \002(\t\022\020\n\010fontName\030\003 \002(\t"
    "\022\026\n\016characterXSize\030\004 \002(\001\022\026\n\016characterYSi"
    "ze\030\005 \002(\001\022\025\n\rjustification\030\006 \002(\005\"\254\001\n\nSkew"
    "edCone\0225\n\tplacement\030\001 \002(\0132\".Bentley.Geom"
    "etry.Proto.IPlacement\0221\n\007centerB\030\002 \002(\0132 "
    ".Bentley.Geometry.Proto.DPoint3d\022\017\n\007radi"
    "usA\030\003 \002(\001\022\017\n\007radiusB\030\004 \002(\001\022\022\n\nbSolidFlag"
    "\030\005 \002(\010\"\200\001\n\023SolidBySweptSurface\0226\n\014BaseGe"
    "ometry\030\001 \002(\0132 .Bentley.Geometry.Proto.IS"
    "urface\0221\n\tRailCurve\030\002 \002(\0132\036.Bentley.Geom"
    "etry.Proto.ICurve\"O\n\006Sphere\0225\n\tplacement"
    "\030\001 \002(\0132\".Bentley.Geometry.Proto.IPlaceme"
    "nt\022\016\n\006radius\030\002 \002(\001\"\321\002\n\006Spiral\022\022\n\nSpiralT"
    "ype\030\001 \002(\t\0224\n\nStartPoint\030\002 \002(\0132 .Bentley."
    "Geometry.Proto.DPoint3d\0223\n\014StartBearing\030"
    "\003 \002(\0132\035.Bentley.Geometry.Proto.Angle\022\026\n\016"
    "StartCurvature\030\004 \002(\001\0222\n\010EndPoint\030\005 \002(\0132 "
    ".Bentley.Geometry.Proto.DPoint3d\0221\n\nEndB"
    "earing\030\006 \002(\0132\035.Bentley.Geometry.Proto.An"
    "gle\022\024\n\014EndCurvature\030\007 \002(\001\0223\n\010Geometry\030\010 "
    "\002(\0132!.Bentley.Geometry.Proto.IGeometry\"~"
    "\n\023SurfaceBySweptCurve\0224\n\014BaseGeometry\030\001 "
    "\002(\0132\036.Bentley.Geometry.Proto.ICurve\0221\n\tR"
    "ailCurve\030\002 \002(\0132\036.Bentley.Geometry.Proto."
    "ICurve\"\336\001\n\tTorusPipe\0225\n\tplacement\030\001 \002(\0132"
    "\".Bentley.Geometry.Proto.IPlacement\022\017\n\007r"
    "adiusA\030\002 \002(\001\022\017\n\007radiusB\030\003 \002(\001\0221\n\nstartAn"
    "gle\030\004 \002(\0132\035.Bentley.Geometry.Proto.Angle"
    "\0221\n\nsweepAngle\030\005 \002(\0132\035.Bentley.Geometry."
    "Proto.Angle\022\022\n\nbSolidFlag\030\006 \002(\010\"\203\001\n\023Tran"
    "sformedGeometry\0227\n\tTransform\030\001 \002(\0132$.Ben"
    "tley.Geometry.Proto.DTransform3d\0223\n\010Geom"
    "etry\030\002 \002(\0132!.Bentley.Geometry.Proto.IGeo"
    "metry\"\332\002\n\020TransitionSpiral\022\022\n\nSpiralType"
    "\030\001 \002(\t\0225\n\tPlacement\030\002 \002(\0132\".Bentley.Geom"
    "etry.Proto.IPlacement\0223\n\014StartBearing\030\003 "
    "\002(\0132\035.Bentley.Geometry.Proto.Angle\022\023\n\013St"
    "artRadius\030\004 \002(\001\0221\n\nEndBearing\030\005 \002(\0132\035.Be"
    "ntley.Geometry.Proto.Angle\022\021\n\tEndRadius\030"
    "\006 \002(\001\022\033\n\023ActiveStartFraction\030\007 \002(\001\022\031\n\021Ac"
    "tiveEndFraction\030\010 \002(\001\0223\n\010Geometry\030\t \002(\0132"
    "!.Bentley.Geometry.Proto.IGeometry\"j\n\006Ve"
    "ctor\022-\n\003xyz\030\001 \002(\0132 .Bentley.Geometry.Pro"
    "to.DPoint3d\0221\n\006vector\030\002 \002(\0132!.Bentley.Ge"
    "ometry.Proto.DVector3d\"N\n\026AdjacentSurfac"
    "ePatches\0224\n\005Patch\030\001 \003(\0132%.Bentley.Geomet"
    "ry.Proto.ISurfacePatch\":\n\005Group\0221\n\006Membe"
    "r\030\001 \003(\0132!.Bentley.Geometry.Proto.IGeomet"
    "ry\"D\n\nCurveChain\0226\n\005Curve\030\001 \003(\0132\'.Bentle"
    "y.Geometry.Proto.IPrimitiveCurve\";\n\nCurv"
    "eGroup\022-\n\005Curve\030\001 \003(\0132\036.Bentley.Geometry"
    ".Proto.ICurve\"L\n\tOperation\022\014\n\004Name\030\001 \002(\t"
    "\0221\n\006Member\030\002 \003(\0132!.Bentley.Geometry.Prot"
    "o.IGeometry\"\302\001\n\026ParametricSurfacePatch\022;"
    "\n\007Surface\030\001 \002(\0132*.Bentley.Geometry.Proto"
    ".IParametricSurface\0227\n\nCurveChain\030\002 \003(\0132"
    "#.Bentley.Geometry.Proto.ICurveChain\0222\n\010"
    "LoopType\030\003 \002(\0132 .Bentley.Geometry.Proto."
    "LoopType\"A\n\nPointChain\0223\n\005Point\030\001 \003(\0132$."
    "Bentley.Geometry.Proto.ISinglePoint\"<\n\nP"
    "ointGroup\022.\n\006Member\030\001 \003(\0132\036.Bentley.Geom"
    "etry.Proto.IPoint\"S\n\016SharedGroupDef\022\014\n\004N"
    "ame\030\001 \002(\t\0223\n\010Geometry\030\002 \002(\0132!.Bentley.Ge"
    "ometry.Proto.IGeometry\";\n\nSolidGroup\022-\n\005"
    "Solid\030\001 \003(\0132\036.Bentley.Geometry.Proto.ISo"
    "lid\"A\n\014SurfaceGroup\0221\n\007Surface\030\001 \003(\0132 .B"
    "entley.Geometry.Proto.ISurface\"\200\001\n\014Surfa"
    "cePatch\0229\n\014ExteriorLoop\030\001 \002(\0132#.Bentley."
    "Geometry.Proto.ICurveChain\0225\n\010HoleLoop\030\002"
    " \003(\0132#.Bentley.Geometry.Proto.ICurveChai"
    "n", 8761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "allcg.proto", &protobuf_RegisterTypes);
  DPoint3d::default_instance_ = new DPoint3d();
  DPoint2d::default_instance_ = new DPoint2d();
  DVector3d::default_instance_ = new DVector3d();
  IPlacement::default_instance_ = new IPlacement();
  Angle::default_instance_ = new Angle();
  DEllipse3d::default_instance_ = new DEllipse3d();
  DTransform3d::default_instance_ = new DTransform3d();
  LoopType::default_instance_ = new LoopType();
  ISinglePoint::default_instance_ = new ISinglePoint();
  IPoint::default_instance_ = new IPoint();
  IPrimitiveCurve::default_instance_ = new IPrimitiveCurve();
  ICurve::default_instance_ = new ICurve();
  ICurveChain::default_instance_ = new ICurveChain();
  ISolid::default_instance_ = new ISolid();
  IAnalyticSolid::default_instance_ = new IAnalyticSolid();
  ISurface::default_instance_ = new ISurface();
  ISurfacePatch::default_instance_ = new ISurfacePatch();
  IParametricSurface::default_instance_ = new IParametricSurface();
  IGeometry::default_instance_ = new IGeometry();
  Block::default_instance_ = new Block();
  BsplineCurve::default_instance_ = new BsplineCurve();
  BsplineSurface::default_instance_ = new BsplineSurface();
  CircularArc::default_instance_ = new CircularArc();
  CircularCone::default_instance_ = new CircularCone();
  CircularCylinder::default_instance_ = new CircularCylinder();
  CircularDisk::default_instance_ = new CircularDisk();
  Coordinate::default_instance_ = new Coordinate();
  CurveReference::default_instance_ = new CurveReference();
  EllipticArc::default_instance_ = new EllipticArc();
  EllipticDisk::default_instance_ = new EllipticDisk();
  IndexedMesh::default_instance_ = new IndexedMesh();
  InterpolatingCurve::default_instance_ = new InterpolatingCurve();
  LineSegment::default_instance_ = new LineSegment();
  LineString::default_instance_ = new LineString();
  Polygon::default_instance_ = new Polygon();
  PrimitiveCurveReference::default_instance_ = new PrimitiveCurveReference();
  SharedGroupInstance::default_instance_ = new SharedGroupInstance();
  ShelledSolid::default_instance_ = new ShelledSolid();
  SingleLineText::default_instance_ = new SingleLineText();
  SkewedCone::default_instance_ = new SkewedCone();
  SolidBySweptSurface::default_instance_ = new SolidBySweptSurface();
  Sphere::default_instance_ = new Sphere();
  Spiral::default_instance_ = new Spiral();
  SurfaceBySweptCurve::default_instance_ = new SurfaceBySweptCurve();
  TorusPipe::default_instance_ = new TorusPipe();
  TransformedGeometry::default_instance_ = new TransformedGeometry();
  TransitionSpiral::default_instance_ = new TransitionSpiral();
  Vector::default_instance_ = new Vector();
  AdjacentSurfacePatches::default_instance_ = new AdjacentSurfacePatches();
  Group::default_instance_ = new Group();
  CurveChain::default_instance_ = new CurveChain();
  CurveGroup::default_instance_ = new CurveGroup();
  Operation::default_instance_ = new Operation();
  ParametricSurfacePatch::default_instance_ = new ParametricSurfacePatch();
  PointChain::default_instance_ = new PointChain();
  PointGroup::default_instance_ = new PointGroup();
  SharedGroupDef::default_instance_ = new SharedGroupDef();
  SolidGroup::default_instance_ = new SolidGroup();
  SurfaceGroup::default_instance_ = new SurfaceGroup();
  SurfacePatch::default_instance_ = new SurfacePatch();
  DPoint3d::default_instance_->InitAsDefaultInstance();
  DPoint2d::default_instance_->InitAsDefaultInstance();
  DVector3d::default_instance_->InitAsDefaultInstance();
  IPlacement::default_instance_->InitAsDefaultInstance();
  Angle::default_instance_->InitAsDefaultInstance();
  DEllipse3d::default_instance_->InitAsDefaultInstance();
  DTransform3d::default_instance_->InitAsDefaultInstance();
  LoopType::default_instance_->InitAsDefaultInstance();
  ISinglePoint::default_instance_->InitAsDefaultInstance();
  IPoint::default_instance_->InitAsDefaultInstance();
  IPrimitiveCurve::default_instance_->InitAsDefaultInstance();
  ICurve::default_instance_->InitAsDefaultInstance();
  ICurveChain::default_instance_->InitAsDefaultInstance();
  ISolid::default_instance_->InitAsDefaultInstance();
  IAnalyticSolid::default_instance_->InitAsDefaultInstance();
  ISurface::default_instance_->InitAsDefaultInstance();
  ISurfacePatch::default_instance_->InitAsDefaultInstance();
  IParametricSurface::default_instance_->InitAsDefaultInstance();
  IGeometry::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  BsplineCurve::default_instance_->InitAsDefaultInstance();
  BsplineSurface::default_instance_->InitAsDefaultInstance();
  CircularArc::default_instance_->InitAsDefaultInstance();
  CircularCone::default_instance_->InitAsDefaultInstance();
  CircularCylinder::default_instance_->InitAsDefaultInstance();
  CircularDisk::default_instance_->InitAsDefaultInstance();
  Coordinate::default_instance_->InitAsDefaultInstance();
  CurveReference::default_instance_->InitAsDefaultInstance();
  EllipticArc::default_instance_->InitAsDefaultInstance();
  EllipticDisk::default_instance_->InitAsDefaultInstance();
  IndexedMesh::default_instance_->InitAsDefaultInstance();
  InterpolatingCurve::default_instance_->InitAsDefaultInstance();
  LineSegment::default_instance_->InitAsDefaultInstance();
  LineString::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  PrimitiveCurveReference::default_instance_->InitAsDefaultInstance();
  SharedGroupInstance::default_instance_->InitAsDefaultInstance();
  ShelledSolid::default_instance_->InitAsDefaultInstance();
  SingleLineText::default_instance_->InitAsDefaultInstance();
  SkewedCone::default_instance_->InitAsDefaultInstance();
  SolidBySweptSurface::default_instance_->InitAsDefaultInstance();
  Sphere::default_instance_->InitAsDefaultInstance();
  Spiral::default_instance_->InitAsDefaultInstance();
  SurfaceBySweptCurve::default_instance_->InitAsDefaultInstance();
  TorusPipe::default_instance_->InitAsDefaultInstance();
  TransformedGeometry::default_instance_->InitAsDefaultInstance();
  TransitionSpiral::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  AdjacentSurfacePatches::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  CurveChain::default_instance_->InitAsDefaultInstance();
  CurveGroup::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  ParametricSurfacePatch::default_instance_->InitAsDefaultInstance();
  PointChain::default_instance_->InitAsDefaultInstance();
  PointGroup::default_instance_->InitAsDefaultInstance();
  SharedGroupDef::default_instance_->InitAsDefaultInstance();
  SolidGroup::default_instance_->InitAsDefaultInstance();
  SurfaceGroup::default_instance_->InitAsDefaultInstance();
  SurfacePatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_allcg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_allcg_2eproto {
  StaticDescriptorInitializer_allcg_2eproto() {
    protobuf_AddDesc_allcg_2eproto();
  }
} static_descriptor_initializer_allcg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DPoint3d::kXFieldNumber;
const int DPoint3d::kYFieldNumber;
const int DPoint3d::kZFieldNumber;
#endif  // !_MSC_VER

DPoint3d::DPoint3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DPoint3d::InitAsDefaultInstance() {
}

DPoint3d::DPoint3d(const DPoint3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DPoint3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DPoint3d::~DPoint3d() {
  SharedDtor();
}

void DPoint3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DPoint3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DPoint3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DPoint3d_descriptor_;
}

const DPoint3d& DPoint3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

DPoint3d* DPoint3d::default_instance_ = NULL;

DPoint3d* DPoint3d::New() const {
  return new DPoint3d;
}

void DPoint3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DPoint3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DPoint3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DPoint3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DPoint3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DPoint3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DPoint3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DPoint3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DPoint3d::MergeFrom(const DPoint3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DPoint3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPoint3d::CopyFrom(const DPoint3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPoint3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DPoint3d::Swap(DPoint3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DPoint3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DPoint3d_descriptor_;
  metadata.reflection = DPoint3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DPoint2d::kXFieldNumber;
const int DPoint2d::kYFieldNumber;
#endif  // !_MSC_VER

DPoint2d::DPoint2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DPoint2d::InitAsDefaultInstance() {
}

DPoint2d::DPoint2d(const DPoint2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DPoint2d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DPoint2d::~DPoint2d() {
  SharedDtor();
}

void DPoint2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DPoint2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DPoint2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DPoint2d_descriptor_;
}

const DPoint2d& DPoint2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

DPoint2d* DPoint2d::default_instance_ = NULL;

DPoint2d* DPoint2d::New() const {
  return new DPoint2d;
}

void DPoint2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DPoint2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DPoint2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DPoint2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DPoint2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DPoint2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DPoint2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DPoint2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DPoint2d::MergeFrom(const DPoint2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DPoint2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPoint2d::CopyFrom(const DPoint2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPoint2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DPoint2d::Swap(DPoint2d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DPoint2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DPoint2d_descriptor_;
  metadata.reflection = DPoint2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DVector3d::kXFieldNumber;
const int DVector3d::kYFieldNumber;
const int DVector3d::kZFieldNumber;
#endif  // !_MSC_VER

DVector3d::DVector3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DVector3d::InitAsDefaultInstance() {
}

DVector3d::DVector3d(const DVector3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DVector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DVector3d::~DVector3d() {
  SharedDtor();
}

void DVector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DVector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DVector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DVector3d_descriptor_;
}

const DVector3d& DVector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

DVector3d* DVector3d::default_instance_ = NULL;

DVector3d* DVector3d::New() const {
  return new DVector3d;
}

void DVector3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DVector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DVector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DVector3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DVector3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DVector3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DVector3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DVector3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DVector3d::MergeFrom(const DVector3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DVector3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DVector3d::CopyFrom(const DVector3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVector3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DVector3d::Swap(DVector3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DVector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DVector3d_descriptor_;
  metadata.reflection = DVector3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPlacement::kOrginFieldNumber;
const int IPlacement::kVectorZFieldNumber;
const int IPlacement::kVectorXFieldNumber;
#endif  // !_MSC_VER

IPlacement::IPlacement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPlacement::InitAsDefaultInstance() {
  orgin_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  vectorZ_ = const_cast< ::Bentley::Geometry::Proto::DVector3d*>(&::Bentley::Geometry::Proto::DVector3d::default_instance());
  vectorX_ = const_cast< ::Bentley::Geometry::Proto::DVector3d*>(&::Bentley::Geometry::Proto::DVector3d::default_instance());
}

IPlacement::IPlacement(const IPlacement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPlacement::SharedCtor() {
  _cached_size_ = 0;
  orgin_ = NULL;
  vectorZ_ = NULL;
  vectorX_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPlacement::~IPlacement() {
  SharedDtor();
}

void IPlacement::SharedDtor() {
  if (this != default_instance_) {
    delete orgin_;
    delete vectorZ_;
    delete vectorX_;
  }
}

void IPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPlacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPlacement_descriptor_;
}

const IPlacement& IPlacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IPlacement* IPlacement::default_instance_ = NULL;

IPlacement* IPlacement::New() const {
  return new IPlacement;
}

void IPlacement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orgin()) {
      if (orgin_ != NULL) orgin_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_vectorZ()) {
      if (vectorZ_ != NULL) vectorZ_->::Bentley::Geometry::Proto::DVector3d::Clear();
    }
    if (has_vectorX()) {
      if (vectorX_ != NULL) vectorX_->::Bentley::Geometry::Proto::DVector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.DPoint3d orgin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orgin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vectorZ;
        break;
      }

      // required .Bentley.Geometry.Proto.DVector3d vectorZ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vectorZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vectorZ()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vectorX;
        break;
      }

      // required .Bentley.Geometry.Proto.DVector3d vectorX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vectorX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vectorX()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.DPoint3d orgin = 1;
  if (has_orgin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orgin(), output);
  }

  // required .Bentley.Geometry.Proto.DVector3d vectorZ = 2;
  if (has_vectorZ()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vectorZ(), output);
  }

  // required .Bentley.Geometry.Proto.DVector3d vectorX = 3;
  if (has_vectorX()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vectorX(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPlacement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.DPoint3d orgin = 1;
  if (has_orgin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orgin(), target);
  }

  // required .Bentley.Geometry.Proto.DVector3d vectorZ = 2;
  if (has_vectorZ()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vectorZ(), target);
  }

  // required .Bentley.Geometry.Proto.DVector3d vectorX = 3;
  if (has_vectorX()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vectorX(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPlacement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.DPoint3d orgin = 1;
    if (has_orgin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orgin());
    }

    // required .Bentley.Geometry.Proto.DVector3d vectorZ = 2;
    if (has_vectorZ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vectorZ());
    }

    // required .Bentley.Geometry.Proto.DVector3d vectorX = 3;
    if (has_vectorX()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vectorX());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPlacement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPlacement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPlacement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPlacement::MergeFrom(const IPlacement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgin()) {
      mutable_orgin()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.orgin());
    }
    if (from.has_vectorZ()) {
      mutable_vectorZ()->::Bentley::Geometry::Proto::DVector3d::MergeFrom(from.vectorZ());
    }
    if (from.has_vectorX()) {
      mutable_vectorX()->::Bentley::Geometry::Proto::DVector3d::MergeFrom(from.vectorX());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPlacement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPlacement::CopyFrom(const IPlacement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPlacement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_orgin()) {
    if (!this->orgin().IsInitialized()) return false;
  }
  if (has_vectorZ()) {
    if (!this->vectorZ().IsInitialized()) return false;
  }
  if (has_vectorX()) {
    if (!this->vectorX().IsInitialized()) return false;
  }
  return true;
}

void IPlacement::Swap(IPlacement* other) {
  if (other != this) {
    std::swap(orgin_, other->orgin_);
    std::swap(vectorZ_, other->vectorZ_);
    std::swap(vectorX_, other->vectorX_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPlacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPlacement_descriptor_;
  metadata.reflection = IPlacement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Angle::kDegreesFieldNumber;
#endif  // !_MSC_VER

Angle::Angle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Angle::InitAsDefaultInstance() {
}

Angle::Angle(const Angle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Angle::SharedCtor() {
  _cached_size_ = 0;
  degrees_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Angle::~Angle() {
  SharedDtor();
}

void Angle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Angle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Angle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Angle_descriptor_;
}

const Angle& Angle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Angle* Angle::default_instance_ = NULL;

Angle* Angle::New() const {
  return new Angle;
}

void Angle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    degrees_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Angle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double degrees = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &degrees_)));
          set_has_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Angle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double degrees = 1;
  if (has_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->degrees(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Angle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double degrees = 1;
  if (has_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->degrees(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Angle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double degrees = 1;
    if (has_degrees()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Angle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Angle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Angle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Angle::MergeFrom(const Angle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_degrees()) {
      set_degrees(from.degrees());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Angle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Angle::CopyFrom(const Angle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Angle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Angle::Swap(Angle* other) {
  if (other != this) {
    std::swap(degrees_, other->degrees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Angle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Angle_descriptor_;
  metadata.reflection = Angle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DEllipse3d::kCenterXFieldNumber;
const int DEllipse3d::kCenterYFieldNumber;
const int DEllipse3d::kCenterZFieldNumber;
const int DEllipse3d::kVector0XFieldNumber;
const int DEllipse3d::kVector0YFieldNumber;
const int DEllipse3d::kVector0ZFieldNumber;
const int DEllipse3d::kVector90XFieldNumber;
const int DEllipse3d::kVector90YFieldNumber;
const int DEllipse3d::kVector90ZFieldNumber;
const int DEllipse3d::kStartRadiansFieldNumber;
const int DEllipse3d::kSweepRadiansFieldNumber;
#endif  // !_MSC_VER

DEllipse3d::DEllipse3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DEllipse3d::InitAsDefaultInstance() {
}

DEllipse3d::DEllipse3d(const DEllipse3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DEllipse3d::SharedCtor() {
  _cached_size_ = 0;
  centerX_ = 0;
  centerY_ = 0;
  centerZ_ = 0;
  vector0X_ = 0;
  vector0Y_ = 0;
  vector0Z_ = 0;
  vector90X_ = 0;
  vector90Y_ = 0;
  vector90Z_ = 0;
  startRadians_ = 0;
  sweepRadians_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DEllipse3d::~DEllipse3d() {
  SharedDtor();
}

void DEllipse3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DEllipse3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DEllipse3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEllipse3d_descriptor_;
}

const DEllipse3d& DEllipse3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

DEllipse3d* DEllipse3d::default_instance_ = NULL;

DEllipse3d* DEllipse3d::New() const {
  return new DEllipse3d;
}

void DEllipse3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    centerX_ = 0;
    centerY_ = 0;
    centerZ_ = 0;
    vector0X_ = 0;
    vector0Y_ = 0;
    vector0Z_ = 0;
    vector90X_ = 0;
    vector90Y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vector90Z_ = 0;
    startRadians_ = 0;
    sweepRadians_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DEllipse3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double centerX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerX_)));
          set_has_centerX();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerY;
        break;
      }

      // required double centerY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerY_)));
          set_has_centerY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_centerZ;
        break;
      }

      // required double centerZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerZ_)));
          set_has_centerZ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vector0X;
        break;
      }

      // required double vector0X = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector0X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector0X_)));
          set_has_vector0X();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_vector0Y;
        break;
      }

      // required double vector0Y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector0Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector0Y_)));
          set_has_vector0Y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_vector0Z;
        break;
      }

      // required double vector0Z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector0Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector0Z_)));
          set_has_vector0Z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_vector90X;
        break;
      }

      // required double vector90X = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector90X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector90X_)));
          set_has_vector90X();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_vector90Y;
        break;
      }

      // required double vector90Y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector90Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector90Y_)));
          set_has_vector90Y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_vector90Z;
        break;
      }

      // required double vector90Z = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vector90Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vector90Z_)));
          set_has_vector90Z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_startRadians;
        break;
      }

      // required double startRadians = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startRadians_)));
          set_has_startRadians();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_sweepRadians;
        break;
      }

      // required double sweepRadians = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sweepRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sweepRadians_)));
          set_has_sweepRadians();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DEllipse3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double centerX = 1;
  if (has_centerX()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerX(), output);
  }

  // required double centerY = 2;
  if (has_centerY()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerY(), output);
  }

  // required double centerZ = 3;
  if (has_centerZ()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->centerZ(), output);
  }

  // required double vector0X = 4;
  if (has_vector0X()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vector0X(), output);
  }

  // required double vector0Y = 5;
  if (has_vector0Y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vector0Y(), output);
  }

  // required double vector0Z = 6;
  if (has_vector0Z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vector0Z(), output);
  }

  // required double vector90X = 7;
  if (has_vector90X()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vector90X(), output);
  }

  // required double vector90Y = 8;
  if (has_vector90Y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->vector90Y(), output);
  }

  // required double vector90Z = 9;
  if (has_vector90Z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vector90Z(), output);
  }

  // required double startRadians = 10;
  if (has_startRadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->startRadians(), output);
  }

  // required double sweepRadians = 11;
  if (has_sweepRadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->sweepRadians(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DEllipse3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double centerX = 1;
  if (has_centerX()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->centerX(), target);
  }

  // required double centerY = 2;
  if (has_centerY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerY(), target);
  }

  // required double centerZ = 3;
  if (has_centerZ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->centerZ(), target);
  }

  // required double vector0X = 4;
  if (has_vector0X()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vector0X(), target);
  }

  // required double vector0Y = 5;
  if (has_vector0Y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vector0Y(), target);
  }

  // required double vector0Z = 6;
  if (has_vector0Z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vector0Z(), target);
  }

  // required double vector90X = 7;
  if (has_vector90X()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vector90X(), target);
  }

  // required double vector90Y = 8;
  if (has_vector90Y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->vector90Y(), target);
  }

  // required double vector90Z = 9;
  if (has_vector90Z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vector90Z(), target);
  }

  // required double startRadians = 10;
  if (has_startRadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->startRadians(), target);
  }

  // required double sweepRadians = 11;
  if (has_sweepRadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->sweepRadians(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DEllipse3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double centerX = 1;
    if (has_centerX()) {
      total_size += 1 + 8;
    }

    // required double centerY = 2;
    if (has_centerY()) {
      total_size += 1 + 8;
    }

    // required double centerZ = 3;
    if (has_centerZ()) {
      total_size += 1 + 8;
    }

    // required double vector0X = 4;
    if (has_vector0X()) {
      total_size += 1 + 8;
    }

    // required double vector0Y = 5;
    if (has_vector0Y()) {
      total_size += 1 + 8;
    }

    // required double vector0Z = 6;
    if (has_vector0Z()) {
      total_size += 1 + 8;
    }

    // required double vector90X = 7;
    if (has_vector90X()) {
      total_size += 1 + 8;
    }

    // required double vector90Y = 8;
    if (has_vector90Y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double vector90Z = 9;
    if (has_vector90Z()) {
      total_size += 1 + 8;
    }

    // required double startRadians = 10;
    if (has_startRadians()) {
      total_size += 1 + 8;
    }

    // required double sweepRadians = 11;
    if (has_sweepRadians()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DEllipse3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DEllipse3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DEllipse3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DEllipse3d::MergeFrom(const DEllipse3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerX()) {
      set_centerX(from.centerX());
    }
    if (from.has_centerY()) {
      set_centerY(from.centerY());
    }
    if (from.has_centerZ()) {
      set_centerZ(from.centerZ());
    }
    if (from.has_vector0X()) {
      set_vector0X(from.vector0X());
    }
    if (from.has_vector0Y()) {
      set_vector0Y(from.vector0Y());
    }
    if (from.has_vector0Z()) {
      set_vector0Z(from.vector0Z());
    }
    if (from.has_vector90X()) {
      set_vector90X(from.vector90X());
    }
    if (from.has_vector90Y()) {
      set_vector90Y(from.vector90Y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vector90Z()) {
      set_vector90Z(from.vector90Z());
    }
    if (from.has_startRadians()) {
      set_startRadians(from.startRadians());
    }
    if (from.has_sweepRadians()) {
      set_sweepRadians(from.sweepRadians());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DEllipse3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEllipse3d::CopyFrom(const DEllipse3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEllipse3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void DEllipse3d::Swap(DEllipse3d* other) {
  if (other != this) {
    std::swap(centerX_, other->centerX_);
    std::swap(centerY_, other->centerY_);
    std::swap(centerZ_, other->centerZ_);
    std::swap(vector0X_, other->vector0X_);
    std::swap(vector0Y_, other->vector0Y_);
    std::swap(vector0Z_, other->vector0Z_);
    std::swap(vector90X_, other->vector90X_);
    std::swap(vector90Y_, other->vector90Y_);
    std::swap(vector90Z_, other->vector90Z_);
    std::swap(startRadians_, other->startRadians_);
    std::swap(sweepRadians_, other->sweepRadians_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DEllipse3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DEllipse3d_descriptor_;
  metadata.reflection = DEllipse3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DTransform3d::kAxxFieldNumber;
const int DTransform3d::kAxyFieldNumber;
const int DTransform3d::kAxzFieldNumber;
const int DTransform3d::kAxwFieldNumber;
const int DTransform3d::kAyxFieldNumber;
const int DTransform3d::kAyyFieldNumber;
const int DTransform3d::kAyzFieldNumber;
const int DTransform3d::kAywFieldNumber;
const int DTransform3d::kAzxFieldNumber;
const int DTransform3d::kAzyFieldNumber;
const int DTransform3d::kAzzFieldNumber;
const int DTransform3d::kAzwFieldNumber;
#endif  // !_MSC_VER

DTransform3d::DTransform3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DTransform3d::InitAsDefaultInstance() {
}

DTransform3d::DTransform3d(const DTransform3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DTransform3d::SharedCtor() {
  _cached_size_ = 0;
  axx_ = 0;
  axy_ = 0;
  axz_ = 0;
  axw_ = 0;
  ayx_ = 0;
  ayy_ = 0;
  ayz_ = 0;
  ayw_ = 0;
  azx_ = 0;
  azy_ = 0;
  azz_ = 0;
  azw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTransform3d::~DTransform3d() {
  SharedDtor();
}

void DTransform3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DTransform3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DTransform3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTransform3d_descriptor_;
}

const DTransform3d& DTransform3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

DTransform3d* DTransform3d::default_instance_ = NULL;

DTransform3d* DTransform3d::New() const {
  return new DTransform3d;
}

void DTransform3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    axx_ = 0;
    axy_ = 0;
    axz_ = 0;
    axw_ = 0;
    ayx_ = 0;
    ayy_ = 0;
    ayz_ = 0;
    ayw_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    azx_ = 0;
    azy_ = 0;
    azz_ = 0;
    azw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DTransform3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double axx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axx_)));
          set_has_axx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_axy;
        break;
      }

      // required double axy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_axy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axy_)));
          set_has_axy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_axz;
        break;
      }

      // required double axz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_axz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axz_)));
          set_has_axz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_axw;
        break;
      }

      // required double axw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_axw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axw_)));
          set_has_axw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ayx;
        break;
      }

      // required double ayx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ayx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ayx_)));
          set_has_ayx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ayy;
        break;
      }

      // required double ayy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ayy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ayy_)));
          set_has_ayy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ayz;
        break;
      }

      // required double ayz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ayz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ayz_)));
          set_has_ayz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ayw;
        break;
      }

      // required double ayw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ayw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ayw_)));
          set_has_ayw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_azx;
        break;
      }

      // required double azx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azx_)));
          set_has_azx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_azy;
        break;
      }

      // required double azy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azy_)));
          set_has_azy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_azz;
        break;
      }

      // required double azz = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azz_)));
          set_has_azz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_azw;
        break;
      }

      // required double azw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azw_)));
          set_has_azw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DTransform3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double axx = 1;
  if (has_axx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->axx(), output);
  }

  // required double axy = 2;
  if (has_axy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->axy(), output);
  }

  // required double axz = 3;
  if (has_axz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->axz(), output);
  }

  // required double axw = 4;
  if (has_axw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->axw(), output);
  }

  // required double ayx = 5;
  if (has_ayx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ayx(), output);
  }

  // required double ayy = 6;
  if (has_ayy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ayy(), output);
  }

  // required double ayz = 7;
  if (has_ayz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ayz(), output);
  }

  // required double ayw = 8;
  if (has_ayw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ayw(), output);
  }

  // required double azx = 9;
  if (has_azx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->azx(), output);
  }

  // required double azy = 10;
  if (has_azy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->azy(), output);
  }

  // required double azz = 11;
  if (has_azz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->azz(), output);
  }

  // required double azw = 12;
  if (has_azw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->azw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DTransform3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double axx = 1;
  if (has_axx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->axx(), target);
  }

  // required double axy = 2;
  if (has_axy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->axy(), target);
  }

  // required double axz = 3;
  if (has_axz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->axz(), target);
  }

  // required double axw = 4;
  if (has_axw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->axw(), target);
  }

  // required double ayx = 5;
  if (has_ayx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ayx(), target);
  }

  // required double ayy = 6;
  if (has_ayy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ayy(), target);
  }

  // required double ayz = 7;
  if (has_ayz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ayz(), target);
  }

  // required double ayw = 8;
  if (has_ayw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ayw(), target);
  }

  // required double azx = 9;
  if (has_azx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->azx(), target);
  }

  // required double azy = 10;
  if (has_azy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->azy(), target);
  }

  // required double azz = 11;
  if (has_azz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->azz(), target);
  }

  // required double azw = 12;
  if (has_azw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->azw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DTransform3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double axx = 1;
    if (has_axx()) {
      total_size += 1 + 8;
    }

    // required double axy = 2;
    if (has_axy()) {
      total_size += 1 + 8;
    }

    // required double axz = 3;
    if (has_axz()) {
      total_size += 1 + 8;
    }

    // required double axw = 4;
    if (has_axw()) {
      total_size += 1 + 8;
    }

    // required double ayx = 5;
    if (has_ayx()) {
      total_size += 1 + 8;
    }

    // required double ayy = 6;
    if (has_ayy()) {
      total_size += 1 + 8;
    }

    // required double ayz = 7;
    if (has_ayz()) {
      total_size += 1 + 8;
    }

    // required double ayw = 8;
    if (has_ayw()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double azx = 9;
    if (has_azx()) {
      total_size += 1 + 8;
    }

    // required double azy = 10;
    if (has_azy()) {
      total_size += 1 + 8;
    }

    // required double azz = 11;
    if (has_azz()) {
      total_size += 1 + 8;
    }

    // required double azw = 12;
    if (has_azw()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTransform3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DTransform3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DTransform3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DTransform3d::MergeFrom(const DTransform3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axx()) {
      set_axx(from.axx());
    }
    if (from.has_axy()) {
      set_axy(from.axy());
    }
    if (from.has_axz()) {
      set_axz(from.axz());
    }
    if (from.has_axw()) {
      set_axw(from.axw());
    }
    if (from.has_ayx()) {
      set_ayx(from.ayx());
    }
    if (from.has_ayy()) {
      set_ayy(from.ayy());
    }
    if (from.has_ayz()) {
      set_ayz(from.ayz());
    }
    if (from.has_ayw()) {
      set_ayw(from.ayw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_azx()) {
      set_azx(from.azx());
    }
    if (from.has_azy()) {
      set_azy(from.azy());
    }
    if (from.has_azz()) {
      set_azz(from.azz());
    }
    if (from.has_azw()) {
      set_azw(from.azw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DTransform3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DTransform3d::CopyFrom(const DTransform3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTransform3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void DTransform3d::Swap(DTransform3d* other) {
  if (other != this) {
    std::swap(axx_, other->axx_);
    std::swap(axy_, other->axy_);
    std::swap(axz_, other->axz_);
    std::swap(axw_, other->axw_);
    std::swap(ayx_, other->ayx_);
    std::swap(ayy_, other->ayy_);
    std::swap(ayz_, other->ayz_);
    std::swap(ayw_, other->ayw_);
    std::swap(azx_, other->azx_);
    std::swap(azy_, other->azy_);
    std::swap(azz_, other->azz_);
    std::swap(azw_, other->azw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DTransform3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DTransform3d_descriptor_;
  metadata.reflection = DTransform3d_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoopType_LoopTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopType_LoopTypeEnum_descriptor_;
}
bool LoopType_LoopTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoopType_LoopTypeEnum LoopType::Parity;
const LoopType_LoopTypeEnum LoopType::InteriorToLeft;
const LoopType_LoopTypeEnum LoopType::LoopTypeEnum_MIN;
const LoopType_LoopTypeEnum LoopType::LoopTypeEnum_MAX;
const int LoopType::LoopTypeEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoopType::kLoopTypeFieldNumber;
#endif  // !_MSC_VER

LoopType::LoopType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoopType::InitAsDefaultInstance() {
}

LoopType::LoopType(const LoopType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoopType::SharedCtor() {
  _cached_size_ = 0;
  loopType_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoopType::~LoopType() {
  SharedDtor();
}

void LoopType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoopType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoopType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopType_descriptor_;
}

const LoopType& LoopType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

LoopType* LoopType::default_instance_ = NULL;

LoopType* LoopType::New() const {
  return new LoopType;
}

void LoopType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loopType_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoopType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.LoopType.LoopTypeEnum loopType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Bentley::Geometry::Proto::LoopType_LoopTypeEnum_IsValid(value)) {
            set_loopType(static_cast< ::Bentley::Geometry::Proto::LoopType_LoopTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoopType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.LoopType.LoopTypeEnum loopType = 1;
  if (has_loopType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loopType(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoopType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.LoopType.LoopTypeEnum loopType = 1;
  if (has_loopType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loopType(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoopType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.LoopType.LoopTypeEnum loopType = 1;
    if (has_loopType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loopType());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoopType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoopType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoopType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoopType::MergeFrom(const LoopType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loopType()) {
      set_loopType(from.loopType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoopType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopType::CopyFrom(const LoopType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoopType::Swap(LoopType* other) {
  if (other != this) {
    std::swap(loopType_, other->loopType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoopType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoopType_descriptor_;
  metadata.reflection = LoopType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ISinglePoint::kCoordinateFieldNumber;
const int ISinglePoint::kSharedGruopInstanceFieldNumber;
const int ISinglePoint::kSingleLineTextFieldNumber;
const int ISinglePoint::kTransformedGeometryFieldNumber;
const int ISinglePoint::kVectorFieldNumber;
#endif  // !_MSC_VER

ISinglePoint::ISinglePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ISinglePoint::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::Bentley::Geometry::Proto::Coordinate*>(&::Bentley::Geometry::Proto::Coordinate::default_instance());
  sharedGruopInstance_ = const_cast< ::Bentley::Geometry::Proto::SharedGroupInstance*>(&::Bentley::Geometry::Proto::SharedGroupInstance::default_instance());
  singleLineText_ = const_cast< ::Bentley::Geometry::Proto::SingleLineText*>(&::Bentley::Geometry::Proto::SingleLineText::default_instance());
  transformedGeometry_ = const_cast< ::Bentley::Geometry::Proto::TransformedGeometry*>(&::Bentley::Geometry::Proto::TransformedGeometry::default_instance());
  vector_ = const_cast< ::Bentley::Geometry::Proto::Vector*>(&::Bentley::Geometry::Proto::Vector::default_instance());
}

ISinglePoint::ISinglePoint(const ISinglePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ISinglePoint::SharedCtor() {
  _cached_size_ = 0;
  coordinate_ = NULL;
  sharedGruopInstance_ = NULL;
  singleLineText_ = NULL;
  transformedGeometry_ = NULL;
  vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ISinglePoint::~ISinglePoint() {
  SharedDtor();
}

void ISinglePoint::SharedDtor() {
  if (this != default_instance_) {
    delete coordinate_;
    delete sharedGruopInstance_;
    delete singleLineText_;
    delete transformedGeometry_;
    delete vector_;
  }
}

void ISinglePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ISinglePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ISinglePoint_descriptor_;
}

const ISinglePoint& ISinglePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ISinglePoint* ISinglePoint::default_instance_ = NULL;

ISinglePoint* ISinglePoint::New() const {
  return new ISinglePoint;
}

void ISinglePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::Bentley::Geometry::Proto::Coordinate::Clear();
    }
    if (has_sharedGruopInstance()) {
      if (sharedGruopInstance_ != NULL) sharedGruopInstance_->::Bentley::Geometry::Proto::SharedGroupInstance::Clear();
    }
    if (has_singleLineText()) {
      if (singleLineText_ != NULL) singleLineText_->::Bentley::Geometry::Proto::SingleLineText::Clear();
    }
    if (has_transformedGeometry()) {
      if (transformedGeometry_ != NULL) transformedGeometry_->::Bentley::Geometry::Proto::TransformedGeometry::Clear();
    }
    if (has_vector()) {
      if (vector_ != NULL) vector_->::Bentley::Geometry::Proto::Vector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ISinglePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.Coordinate coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sharedGruopInstance;
        break;
      }

      // optional .Bentley.Geometry.Proto.SharedGroupInstance sharedGruopInstance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sharedGruopInstance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sharedGruopInstance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_singleLineText;
        break;
      }

      // optional .Bentley.Geometry.Proto.SingleLineText singleLineText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singleLineText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singleLineText()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transformedGeometry;
        break;
      }

      // optional .Bentley.Geometry.Proto.TransformedGeometry transformedGeometry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformedGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformedGeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vector;
        break;
      }

      // optional .Bentley.Geometry.Proto.Vector vector = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ISinglePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.Coordinate coordinate = 1;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinate(), output);
  }

  // optional .Bentley.Geometry.Proto.SharedGroupInstance sharedGruopInstance = 2;
  if (has_sharedGruopInstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sharedGruopInstance(), output);
  }

  // optional .Bentley.Geometry.Proto.SingleLineText singleLineText = 3;
  if (has_singleLineText()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->singleLineText(), output);
  }

  // optional .Bentley.Geometry.Proto.TransformedGeometry transformedGeometry = 4;
  if (has_transformedGeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transformedGeometry(), output);
  }

  // optional .Bentley.Geometry.Proto.Vector vector = 5;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ISinglePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.Coordinate coordinate = 1;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinate(), target);
  }

  // optional .Bentley.Geometry.Proto.SharedGroupInstance sharedGruopInstance = 2;
  if (has_sharedGruopInstance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sharedGruopInstance(), target);
  }

  // optional .Bentley.Geometry.Proto.SingleLineText singleLineText = 3;
  if (has_singleLineText()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->singleLineText(), target);
  }

  // optional .Bentley.Geometry.Proto.TransformedGeometry transformedGeometry = 4;
  if (has_transformedGeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transformedGeometry(), target);
  }

  // optional .Bentley.Geometry.Proto.Vector vector = 5;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ISinglePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.Coordinate coordinate = 1;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

    // optional .Bentley.Geometry.Proto.SharedGroupInstance sharedGruopInstance = 2;
    if (has_sharedGruopInstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sharedGruopInstance());
    }

    // optional .Bentley.Geometry.Proto.SingleLineText singleLineText = 3;
    if (has_singleLineText()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singleLineText());
    }

    // optional .Bentley.Geometry.Proto.TransformedGeometry transformedGeometry = 4;
    if (has_transformedGeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformedGeometry());
    }

    // optional .Bentley.Geometry.Proto.Vector vector = 5;
    if (has_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ISinglePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ISinglePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ISinglePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ISinglePoint::MergeFrom(const ISinglePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinate()) {
      mutable_coordinate()->::Bentley::Geometry::Proto::Coordinate::MergeFrom(from.coordinate());
    }
    if (from.has_sharedGruopInstance()) {
      mutable_sharedGruopInstance()->::Bentley::Geometry::Proto::SharedGroupInstance::MergeFrom(from.sharedGruopInstance());
    }
    if (from.has_singleLineText()) {
      mutable_singleLineText()->::Bentley::Geometry::Proto::SingleLineText::MergeFrom(from.singleLineText());
    }
    if (from.has_transformedGeometry()) {
      mutable_transformedGeometry()->::Bentley::Geometry::Proto::TransformedGeometry::MergeFrom(from.transformedGeometry());
    }
    if (from.has_vector()) {
      mutable_vector()->::Bentley::Geometry::Proto::Vector::MergeFrom(from.vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ISinglePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISinglePoint::CopyFrom(const ISinglePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISinglePoint::IsInitialized() const {

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  if (has_sharedGruopInstance()) {
    if (!this->sharedGruopInstance().IsInitialized()) return false;
  }
  if (has_singleLineText()) {
    if (!this->singleLineText().IsInitialized()) return false;
  }
  if (has_transformedGeometry()) {
    if (!this->transformedGeometry().IsInitialized()) return false;
  }
  if (has_vector()) {
    if (!this->vector().IsInitialized()) return false;
  }
  return true;
}

void ISinglePoint::Swap(ISinglePoint* other) {
  if (other != this) {
    std::swap(coordinate_, other->coordinate_);
    std::swap(sharedGruopInstance_, other->sharedGruopInstance_);
    std::swap(singleLineText_, other->singleLineText_);
    std::swap(transformedGeometry_, other->transformedGeometry_);
    std::swap(vector_, other->vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ISinglePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ISinglePoint_descriptor_;
  metadata.reflection = ISinglePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPoint::kSinglePointFieldNumber;
#endif  // !_MSC_VER

IPoint::IPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPoint::InitAsDefaultInstance() {
  singlePoint_ = const_cast< ::Bentley::Geometry::Proto::ISinglePoint*>(&::Bentley::Geometry::Proto::ISinglePoint::default_instance());
}

IPoint::IPoint(const IPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPoint::SharedCtor() {
  _cached_size_ = 0;
  singlePoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPoint::~IPoint() {
  SharedDtor();
}

void IPoint::SharedDtor() {
  if (this != default_instance_) {
    delete singlePoint_;
  }
}

void IPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPoint_descriptor_;
}

const IPoint& IPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IPoint* IPoint::default_instance_ = NULL;

IPoint* IPoint::New() const {
  return new IPoint;
}

void IPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_singlePoint()) {
      if (singlePoint_ != NULL) singlePoint_->::Bentley::Geometry::Proto::ISinglePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.ISinglePoint singlePoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlePoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.ISinglePoint singlePoint = 1;
  if (has_singlePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlePoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.ISinglePoint singlePoint = 1;
  if (has_singlePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singlePoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.ISinglePoint singlePoint = 1;
    if (has_singlePoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlePoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPoint::MergeFrom(const IPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_singlePoint()) {
      mutable_singlePoint()->::Bentley::Geometry::Proto::ISinglePoint::MergeFrom(from.singlePoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPoint::CopyFrom(const IPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPoint::IsInitialized() const {

  if (has_singlePoint()) {
    if (!this->singlePoint().IsInitialized()) return false;
  }
  return true;
}

void IPoint::Swap(IPoint* other) {
  if (other != this) {
    std::swap(singlePoint_, other->singlePoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPoint_descriptor_;
  metadata.reflection = IPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPrimitiveCurve::kLineSegmentFieldNumber;
const int IPrimitiveCurve::kLineStringFieldNumber;
const int IPrimitiveCurve::kCircularArcFieldNumber;
const int IPrimitiveCurve::kEllipticArcFieldNumber;
const int IPrimitiveCurve::kBsplineCurveFieldNumber;
const int IPrimitiveCurve::kTransitionSpiralFieldNumber;
#endif  // !_MSC_VER

IPrimitiveCurve::IPrimitiveCurve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPrimitiveCurve::InitAsDefaultInstance() {
  lineSegment_ = const_cast< ::Bentley::Geometry::Proto::LineSegment*>(&::Bentley::Geometry::Proto::LineSegment::default_instance());
  lineString_ = const_cast< ::Bentley::Geometry::Proto::LineString*>(&::Bentley::Geometry::Proto::LineString::default_instance());
  circularArc_ = const_cast< ::Bentley::Geometry::Proto::CircularArc*>(&::Bentley::Geometry::Proto::CircularArc::default_instance());
  ellipticArc_ = const_cast< ::Bentley::Geometry::Proto::EllipticArc*>(&::Bentley::Geometry::Proto::EllipticArc::default_instance());
  bsplineCurve_ = const_cast< ::Bentley::Geometry::Proto::BsplineCurve*>(&::Bentley::Geometry::Proto::BsplineCurve::default_instance());
  transitionSpiral_ = const_cast< ::Bentley::Geometry::Proto::TransitionSpiral*>(&::Bentley::Geometry::Proto::TransitionSpiral::default_instance());
}

IPrimitiveCurve::IPrimitiveCurve(const IPrimitiveCurve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPrimitiveCurve::SharedCtor() {
  _cached_size_ = 0;
  lineSegment_ = NULL;
  lineString_ = NULL;
  circularArc_ = NULL;
  ellipticArc_ = NULL;
  bsplineCurve_ = NULL;
  transitionSpiral_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPrimitiveCurve::~IPrimitiveCurve() {
  SharedDtor();
}

void IPrimitiveCurve::SharedDtor() {
  if (this != default_instance_) {
    delete lineSegment_;
    delete lineString_;
    delete circularArc_;
    delete ellipticArc_;
    delete bsplineCurve_;
    delete transitionSpiral_;
  }
}

void IPrimitiveCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPrimitiveCurve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPrimitiveCurve_descriptor_;
}

const IPrimitiveCurve& IPrimitiveCurve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IPrimitiveCurve* IPrimitiveCurve::default_instance_ = NULL;

IPrimitiveCurve* IPrimitiveCurve::New() const {
  return new IPrimitiveCurve;
}

void IPrimitiveCurve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lineSegment()) {
      if (lineSegment_ != NULL) lineSegment_->::Bentley::Geometry::Proto::LineSegment::Clear();
    }
    if (has_lineString()) {
      if (lineString_ != NULL) lineString_->::Bentley::Geometry::Proto::LineString::Clear();
    }
    if (has_circularArc()) {
      if (circularArc_ != NULL) circularArc_->::Bentley::Geometry::Proto::CircularArc::Clear();
    }
    if (has_ellipticArc()) {
      if (ellipticArc_ != NULL) ellipticArc_->::Bentley::Geometry::Proto::EllipticArc::Clear();
    }
    if (has_bsplineCurve()) {
      if (bsplineCurve_ != NULL) bsplineCurve_->::Bentley::Geometry::Proto::BsplineCurve::Clear();
    }
    if (has_transitionSpiral()) {
      if (transitionSpiral_ != NULL) transitionSpiral_->::Bentley::Geometry::Proto::TransitionSpiral::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPrimitiveCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.LineSegment lineSegment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineSegment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lineString;
        break;
      }

      // optional .Bentley.Geometry.Proto.LineString lineString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineString()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_circularArc;
        break;
      }

      // optional .Bentley.Geometry.Proto.CircularArc circularArc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circularArc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circularArc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ellipticArc;
        break;
      }

      // optional .Bentley.Geometry.Proto.EllipticArc ellipticArc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ellipticArc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ellipticArc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bsplineCurve;
        break;
      }

      // optional .Bentley.Geometry.Proto.BsplineCurve bsplineCurve = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bsplineCurve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsplineCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transitionSpiral;
        break;
      }

      // optional .Bentley.Geometry.Proto.TransitionSpiral transitionSpiral = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transitionSpiral:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transitionSpiral()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPrimitiveCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.LineSegment lineSegment = 1;
  if (has_lineSegment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineSegment(), output);
  }

  // optional .Bentley.Geometry.Proto.LineString lineString = 2;
  if (has_lineString()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lineString(), output);
  }

  // optional .Bentley.Geometry.Proto.CircularArc circularArc = 3;
  if (has_circularArc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->circularArc(), output);
  }

  // optional .Bentley.Geometry.Proto.EllipticArc ellipticArc = 4;
  if (has_ellipticArc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ellipticArc(), output);
  }

  // optional .Bentley.Geometry.Proto.BsplineCurve bsplineCurve = 5;
  if (has_bsplineCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bsplineCurve(), output);
  }

  // optional .Bentley.Geometry.Proto.TransitionSpiral transitionSpiral = 6;
  if (has_transitionSpiral()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transitionSpiral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPrimitiveCurve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.LineSegment lineSegment = 1;
  if (has_lineSegment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineSegment(), target);
  }

  // optional .Bentley.Geometry.Proto.LineString lineString = 2;
  if (has_lineString()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lineString(), target);
  }

  // optional .Bentley.Geometry.Proto.CircularArc circularArc = 3;
  if (has_circularArc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->circularArc(), target);
  }

  // optional .Bentley.Geometry.Proto.EllipticArc ellipticArc = 4;
  if (has_ellipticArc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ellipticArc(), target);
  }

  // optional .Bentley.Geometry.Proto.BsplineCurve bsplineCurve = 5;
  if (has_bsplineCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bsplineCurve(), target);
  }

  // optional .Bentley.Geometry.Proto.TransitionSpiral transitionSpiral = 6;
  if (has_transitionSpiral()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transitionSpiral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPrimitiveCurve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.LineSegment lineSegment = 1;
    if (has_lineSegment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineSegment());
    }

    // optional .Bentley.Geometry.Proto.LineString lineString = 2;
    if (has_lineString()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineString());
    }

    // optional .Bentley.Geometry.Proto.CircularArc circularArc = 3;
    if (has_circularArc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->circularArc());
    }

    // optional .Bentley.Geometry.Proto.EllipticArc ellipticArc = 4;
    if (has_ellipticArc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ellipticArc());
    }

    // optional .Bentley.Geometry.Proto.BsplineCurve bsplineCurve = 5;
    if (has_bsplineCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsplineCurve());
    }

    // optional .Bentley.Geometry.Proto.TransitionSpiral transitionSpiral = 6;
    if (has_transitionSpiral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transitionSpiral());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPrimitiveCurve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPrimitiveCurve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPrimitiveCurve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPrimitiveCurve::MergeFrom(const IPrimitiveCurve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineSegment()) {
      mutable_lineSegment()->::Bentley::Geometry::Proto::LineSegment::MergeFrom(from.lineSegment());
    }
    if (from.has_lineString()) {
      mutable_lineString()->::Bentley::Geometry::Proto::LineString::MergeFrom(from.lineString());
    }
    if (from.has_circularArc()) {
      mutable_circularArc()->::Bentley::Geometry::Proto::CircularArc::MergeFrom(from.circularArc());
    }
    if (from.has_ellipticArc()) {
      mutable_ellipticArc()->::Bentley::Geometry::Proto::EllipticArc::MergeFrom(from.ellipticArc());
    }
    if (from.has_bsplineCurve()) {
      mutable_bsplineCurve()->::Bentley::Geometry::Proto::BsplineCurve::MergeFrom(from.bsplineCurve());
    }
    if (from.has_transitionSpiral()) {
      mutable_transitionSpiral()->::Bentley::Geometry::Proto::TransitionSpiral::MergeFrom(from.transitionSpiral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPrimitiveCurve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPrimitiveCurve::CopyFrom(const IPrimitiveCurve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPrimitiveCurve::IsInitialized() const {

  if (has_lineSegment()) {
    if (!this->lineSegment().IsInitialized()) return false;
  }
  if (has_lineString()) {
    if (!this->lineString().IsInitialized()) return false;
  }
  if (has_circularArc()) {
    if (!this->circularArc().IsInitialized()) return false;
  }
  if (has_ellipticArc()) {
    if (!this->ellipticArc().IsInitialized()) return false;
  }
  if (has_bsplineCurve()) {
    if (!this->bsplineCurve().IsInitialized()) return false;
  }
  if (has_transitionSpiral()) {
    if (!this->transitionSpiral().IsInitialized()) return false;
  }
  return true;
}

void IPrimitiveCurve::Swap(IPrimitiveCurve* other) {
  if (other != this) {
    std::swap(lineSegment_, other->lineSegment_);
    std::swap(lineString_, other->lineString_);
    std::swap(circularArc_, other->circularArc_);
    std::swap(ellipticArc_, other->ellipticArc_);
    std::swap(bsplineCurve_, other->bsplineCurve_);
    std::swap(transitionSpiral_, other->transitionSpiral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPrimitiveCurve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPrimitiveCurve_descriptor_;
  metadata.reflection = IPrimitiveCurve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ICurve::kPrimtiveCurveFieldNumber;
const int ICurve::kCurveChainFieldNumber;
#endif  // !_MSC_VER

ICurve::ICurve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ICurve::InitAsDefaultInstance() {
  primtiveCurve_ = const_cast< ::Bentley::Geometry::Proto::IPrimitiveCurve*>(&::Bentley::Geometry::Proto::IPrimitiveCurve::default_instance());
  curveChain_ = const_cast< ::Bentley::Geometry::Proto::CurveChain*>(&::Bentley::Geometry::Proto::CurveChain::default_instance());
}

ICurve::ICurve(const ICurve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ICurve::SharedCtor() {
  _cached_size_ = 0;
  primtiveCurve_ = NULL;
  curveChain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ICurve::~ICurve() {
  SharedDtor();
}

void ICurve::SharedDtor() {
  if (this != default_instance_) {
    delete primtiveCurve_;
    delete curveChain_;
  }
}

void ICurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICurve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICurve_descriptor_;
}

const ICurve& ICurve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ICurve* ICurve::default_instance_ = NULL;

ICurve* ICurve::New() const {
  return new ICurve;
}

void ICurve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_primtiveCurve()) {
      if (primtiveCurve_ != NULL) primtiveCurve_->::Bentley::Geometry::Proto::IPrimitiveCurve::Clear();
    }
    if (has_curveChain()) {
      if (curveChain_ != NULL) curveChain_->::Bentley::Geometry::Proto::CurveChain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ICurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.IPrimitiveCurve primtiveCurve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primtiveCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curveChain;
        break;
      }

      // optional .Bentley.Geometry.Proto.CurveChain curveChain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curveChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curveChain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ICurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.IPrimitiveCurve primtiveCurve = 1;
  if (has_primtiveCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->primtiveCurve(), output);
  }

  // optional .Bentley.Geometry.Proto.CurveChain curveChain = 2;
  if (has_curveChain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curveChain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ICurve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.IPrimitiveCurve primtiveCurve = 1;
  if (has_primtiveCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->primtiveCurve(), target);
  }

  // optional .Bentley.Geometry.Proto.CurveChain curveChain = 2;
  if (has_curveChain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curveChain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ICurve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.IPrimitiveCurve primtiveCurve = 1;
    if (has_primtiveCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primtiveCurve());
    }

    // optional .Bentley.Geometry.Proto.CurveChain curveChain = 2;
    if (has_curveChain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curveChain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICurve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ICurve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ICurve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ICurve::MergeFrom(const ICurve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primtiveCurve()) {
      mutable_primtiveCurve()->::Bentley::Geometry::Proto::IPrimitiveCurve::MergeFrom(from.primtiveCurve());
    }
    if (from.has_curveChain()) {
      mutable_curveChain()->::Bentley::Geometry::Proto::CurveChain::MergeFrom(from.curveChain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ICurve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICurve::CopyFrom(const ICurve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICurve::IsInitialized() const {

  if (has_primtiveCurve()) {
    if (!this->primtiveCurve().IsInitialized()) return false;
  }
  if (has_curveChain()) {
    if (!this->curveChain().IsInitialized()) return false;
  }
  return true;
}

void ICurve::Swap(ICurve* other) {
  if (other != this) {
    std::swap(primtiveCurve_, other->primtiveCurve_);
    std::swap(curveChain_, other->curveChain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ICurve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICurve_descriptor_;
  metadata.reflection = ICurve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ICurveChain::kCurveChainFieldNumber;
#endif  // !_MSC_VER

ICurveChain::ICurveChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ICurveChain::InitAsDefaultInstance() {
  curveChain_ = const_cast< ::Bentley::Geometry::Proto::CurveChain*>(&::Bentley::Geometry::Proto::CurveChain::default_instance());
}

ICurveChain::ICurveChain(const ICurveChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ICurveChain::SharedCtor() {
  _cached_size_ = 0;
  curveChain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ICurveChain::~ICurveChain() {
  SharedDtor();
}

void ICurveChain::SharedDtor() {
  if (this != default_instance_) {
    delete curveChain_;
  }
}

void ICurveChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICurveChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICurveChain_descriptor_;
}

const ICurveChain& ICurveChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ICurveChain* ICurveChain::default_instance_ = NULL;

ICurveChain* ICurveChain::New() const {
  return new ICurveChain;
}

void ICurveChain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_curveChain()) {
      if (curveChain_ != NULL) curveChain_->::Bentley::Geometry::Proto::CurveChain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ICurveChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.CurveChain curveChain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curveChain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ICurveChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.CurveChain curveChain = 1;
  if (has_curveChain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curveChain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ICurveChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.CurveChain curveChain = 1;
  if (has_curveChain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curveChain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ICurveChain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.CurveChain curveChain = 1;
    if (has_curveChain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curveChain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICurveChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ICurveChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ICurveChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ICurveChain::MergeFrom(const ICurveChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curveChain()) {
      mutable_curveChain()->::Bentley::Geometry::Proto::CurveChain::MergeFrom(from.curveChain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ICurveChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICurveChain::CopyFrom(const ICurveChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICurveChain::IsInitialized() const {

  if (has_curveChain()) {
    if (!this->curveChain().IsInitialized()) return false;
  }
  return true;
}

void ICurveChain::Swap(ICurveChain* other) {
  if (other != this) {
    std::swap(curveChain_, other->curveChain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ICurveChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICurveChain_descriptor_;
  metadata.reflection = ICurveChain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ISolid::kAnalyticSolidFieldNumber;
const int ISolid::kSolidBySweptSurfaceFieldNumber;
#endif  // !_MSC_VER

ISolid::ISolid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ISolid::InitAsDefaultInstance() {
  analyticSolid_ = const_cast< ::Bentley::Geometry::Proto::IAnalyticSolid*>(&::Bentley::Geometry::Proto::IAnalyticSolid::default_instance());
  solidBySweptSurface_ = const_cast< ::Bentley::Geometry::Proto::SolidBySweptSurface*>(&::Bentley::Geometry::Proto::SolidBySweptSurface::default_instance());
}

ISolid::ISolid(const ISolid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ISolid::SharedCtor() {
  _cached_size_ = 0;
  analyticSolid_ = NULL;
  solidBySweptSurface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ISolid::~ISolid() {
  SharedDtor();
}

void ISolid::SharedDtor() {
  if (this != default_instance_) {
    delete analyticSolid_;
    delete solidBySweptSurface_;
  }
}

void ISolid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ISolid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ISolid_descriptor_;
}

const ISolid& ISolid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ISolid* ISolid::default_instance_ = NULL;

ISolid* ISolid::New() const {
  return new ISolid;
}

void ISolid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_analyticSolid()) {
      if (analyticSolid_ != NULL) analyticSolid_->::Bentley::Geometry::Proto::IAnalyticSolid::Clear();
    }
    if (has_solidBySweptSurface()) {
      if (solidBySweptSurface_ != NULL) solidBySweptSurface_->::Bentley::Geometry::Proto::SolidBySweptSurface::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ISolid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.IAnalyticSolid analyticSolid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analyticSolid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_solidBySweptSurface;
        break;
      }

      // optional .Bentley.Geometry.Proto.SolidBySweptSurface solidBySweptSurface = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solidBySweptSurface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidBySweptSurface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ISolid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.IAnalyticSolid analyticSolid = 1;
  if (has_analyticSolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->analyticSolid(), output);
  }

  // optional .Bentley.Geometry.Proto.SolidBySweptSurface solidBySweptSurface = 102;
  if (has_solidBySweptSurface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->solidBySweptSurface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ISolid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.IAnalyticSolid analyticSolid = 1;
  if (has_analyticSolid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->analyticSolid(), target);
  }

  // optional .Bentley.Geometry.Proto.SolidBySweptSurface solidBySweptSurface = 102;
  if (has_solidBySweptSurface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->solidBySweptSurface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ISolid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.IAnalyticSolid analyticSolid = 1;
    if (has_analyticSolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analyticSolid());
    }

    // optional .Bentley.Geometry.Proto.SolidBySweptSurface solidBySweptSurface = 102;
    if (has_solidBySweptSurface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidBySweptSurface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ISolid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ISolid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ISolid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ISolid::MergeFrom(const ISolid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_analyticSolid()) {
      mutable_analyticSolid()->::Bentley::Geometry::Proto::IAnalyticSolid::MergeFrom(from.analyticSolid());
    }
    if (from.has_solidBySweptSurface()) {
      mutable_solidBySweptSurface()->::Bentley::Geometry::Proto::SolidBySweptSurface::MergeFrom(from.solidBySweptSurface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ISolid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISolid::CopyFrom(const ISolid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISolid::IsInitialized() const {

  if (has_analyticSolid()) {
    if (!this->analyticSolid().IsInitialized()) return false;
  }
  if (has_solidBySweptSurface()) {
    if (!this->solidBySweptSurface().IsInitialized()) return false;
  }
  return true;
}

void ISolid::Swap(ISolid* other) {
  if (other != this) {
    std::swap(analyticSolid_, other->analyticSolid_);
    std::swap(solidBySweptSurface_, other->solidBySweptSurface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ISolid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ISolid_descriptor_;
  metadata.reflection = ISolid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IAnalyticSolid::kBlockFieldNumber;
const int IAnalyticSolid::kCircularConeFieldNumber;
const int IAnalyticSolid::kSkewedConeFieldNumber;
const int IAnalyticSolid::kSphereFieldNumber;
const int IAnalyticSolid::kTorusPipeFieldNumber;
#endif  // !_MSC_VER

IAnalyticSolid::IAnalyticSolid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IAnalyticSolid::InitAsDefaultInstance() {
  block_ = const_cast< ::Bentley::Geometry::Proto::Block*>(&::Bentley::Geometry::Proto::Block::default_instance());
  circularCone_ = const_cast< ::Bentley::Geometry::Proto::CircularCone*>(&::Bentley::Geometry::Proto::CircularCone::default_instance());
  skewedCone_ = const_cast< ::Bentley::Geometry::Proto::SkewedCone*>(&::Bentley::Geometry::Proto::SkewedCone::default_instance());
  sphere_ = const_cast< ::Bentley::Geometry::Proto::Sphere*>(&::Bentley::Geometry::Proto::Sphere::default_instance());
  torusPipe_ = const_cast< ::Bentley::Geometry::Proto::TorusPipe*>(&::Bentley::Geometry::Proto::TorusPipe::default_instance());
}

IAnalyticSolid::IAnalyticSolid(const IAnalyticSolid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IAnalyticSolid::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  circularCone_ = NULL;
  skewedCone_ = NULL;
  sphere_ = NULL;
  torusPipe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IAnalyticSolid::~IAnalyticSolid() {
  SharedDtor();
}

void IAnalyticSolid::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
    delete circularCone_;
    delete skewedCone_;
    delete sphere_;
    delete torusPipe_;
  }
}

void IAnalyticSolid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAnalyticSolid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAnalyticSolid_descriptor_;
}

const IAnalyticSolid& IAnalyticSolid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IAnalyticSolid* IAnalyticSolid::default_instance_ = NULL;

IAnalyticSolid* IAnalyticSolid::New() const {
  return new IAnalyticSolid;
}

void IAnalyticSolid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Bentley::Geometry::Proto::Block::Clear();
    }
    if (has_circularCone()) {
      if (circularCone_ != NULL) circularCone_->::Bentley::Geometry::Proto::CircularCone::Clear();
    }
    if (has_skewedCone()) {
      if (skewedCone_ != NULL) skewedCone_->::Bentley::Geometry::Proto::SkewedCone::Clear();
    }
    if (has_sphere()) {
      if (sphere_ != NULL) sphere_->::Bentley::Geometry::Proto::Sphere::Clear();
    }
    if (has_torusPipe()) {
      if (torusPipe_ != NULL) torusPipe_->::Bentley::Geometry::Proto::TorusPipe::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IAnalyticSolid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circularCone;
        break;
      }

      // optional .Bentley.Geometry.Proto.CircularCone circularCone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circularCone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circularCone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skewedCone;
        break;
      }

      // optional .Bentley.Geometry.Proto.SkewedCone skewedCone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skewedCone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skewedCone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sphere;
        break;
      }

      // optional .Bentley.Geometry.Proto.Sphere sphere = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sphere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sphere()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_torusPipe;
        break;
      }

      // optional .Bentley.Geometry.Proto.TorusPipe torusPipe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torusPipe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torusPipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IAnalyticSolid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  // optional .Bentley.Geometry.Proto.CircularCone circularCone = 2;
  if (has_circularCone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->circularCone(), output);
  }

  // optional .Bentley.Geometry.Proto.SkewedCone skewedCone = 3;
  if (has_skewedCone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skewedCone(), output);
  }

  // optional .Bentley.Geometry.Proto.Sphere sphere = 4;
  if (has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere(), output);
  }

  // optional .Bentley.Geometry.Proto.TorusPipe torusPipe = 5;
  if (has_torusPipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->torusPipe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IAnalyticSolid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  // optional .Bentley.Geometry.Proto.CircularCone circularCone = 2;
  if (has_circularCone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->circularCone(), target);
  }

  // optional .Bentley.Geometry.Proto.SkewedCone skewedCone = 3;
  if (has_skewedCone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skewedCone(), target);
  }

  // optional .Bentley.Geometry.Proto.Sphere sphere = 4;
  if (has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sphere(), target);
  }

  // optional .Bentley.Geometry.Proto.TorusPipe torusPipe = 5;
  if (has_torusPipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->torusPipe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IAnalyticSolid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional .Bentley.Geometry.Proto.CircularCone circularCone = 2;
    if (has_circularCone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->circularCone());
    }

    // optional .Bentley.Geometry.Proto.SkewedCone skewedCone = 3;
    if (has_skewedCone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skewedCone());
    }

    // optional .Bentley.Geometry.Proto.Sphere sphere = 4;
    if (has_sphere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sphere());
    }

    // optional .Bentley.Geometry.Proto.TorusPipe torusPipe = 5;
    if (has_torusPipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torusPipe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAnalyticSolid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IAnalyticSolid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IAnalyticSolid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IAnalyticSolid::MergeFrom(const IAnalyticSolid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Bentley::Geometry::Proto::Block::MergeFrom(from.block());
    }
    if (from.has_circularCone()) {
      mutable_circularCone()->::Bentley::Geometry::Proto::CircularCone::MergeFrom(from.circularCone());
    }
    if (from.has_skewedCone()) {
      mutable_skewedCone()->::Bentley::Geometry::Proto::SkewedCone::MergeFrom(from.skewedCone());
    }
    if (from.has_sphere()) {
      mutable_sphere()->::Bentley::Geometry::Proto::Sphere::MergeFrom(from.sphere());
    }
    if (from.has_torusPipe()) {
      mutable_torusPipe()->::Bentley::Geometry::Proto::TorusPipe::MergeFrom(from.torusPipe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IAnalyticSolid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAnalyticSolid::CopyFrom(const IAnalyticSolid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IAnalyticSolid::IsInitialized() const {

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  if (has_circularCone()) {
    if (!this->circularCone().IsInitialized()) return false;
  }
  if (has_skewedCone()) {
    if (!this->skewedCone().IsInitialized()) return false;
  }
  if (has_sphere()) {
    if (!this->sphere().IsInitialized()) return false;
  }
  if (has_torusPipe()) {
    if (!this->torusPipe().IsInitialized()) return false;
  }
  return true;
}

void IAnalyticSolid::Swap(IAnalyticSolid* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(circularCone_, other->circularCone_);
    std::swap(skewedCone_, other->skewedCone_);
    std::swap(sphere_, other->sphere_);
    std::swap(torusPipe_, other->torusPipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IAnalyticSolid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAnalyticSolid_descriptor_;
  metadata.reflection = IAnalyticSolid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ISurface::kPolygonFieldNumber;
const int ISurface::kCircularDiskFieldNumber;
const int ISurface::kEllipticDiskFieldNumber;
const int ISurface::kBsplineSufaceFieldNumber;
const int ISurface::kIndexedMeshFieldNumber;
const int ISurface::kParametricSurfacePatchFieldNumber;
const int ISurface::kSurfaceBySweptCurveFieldNumber;
const int ISurface::kSurfaceGroupFieldNumber;
const int ISurface::kSurfacePatchFieldNumber;
#endif  // !_MSC_VER

ISurface::ISurface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ISurface::InitAsDefaultInstance() {
  polygon_ = const_cast< ::Bentley::Geometry::Proto::Polygon*>(&::Bentley::Geometry::Proto::Polygon::default_instance());
  circularDisk_ = const_cast< ::Bentley::Geometry::Proto::CircularDisk*>(&::Bentley::Geometry::Proto::CircularDisk::default_instance());
  ellipticDisk_ = const_cast< ::Bentley::Geometry::Proto::EllipticDisk*>(&::Bentley::Geometry::Proto::EllipticDisk::default_instance());
  bsplineSuface_ = const_cast< ::Bentley::Geometry::Proto::BsplineSurface*>(&::Bentley::Geometry::Proto::BsplineSurface::default_instance());
  indexedMesh_ = const_cast< ::Bentley::Geometry::Proto::IndexedMesh*>(&::Bentley::Geometry::Proto::IndexedMesh::default_instance());
  parametricSurfacePatch_ = const_cast< ::Bentley::Geometry::Proto::ParametricSurfacePatch*>(&::Bentley::Geometry::Proto::ParametricSurfacePatch::default_instance());
  surfaceBySweptCurve_ = const_cast< ::Bentley::Geometry::Proto::SurfaceBySweptCurve*>(&::Bentley::Geometry::Proto::SurfaceBySweptCurve::default_instance());
  surfaceGroup_ = const_cast< ::Bentley::Geometry::Proto::SurfaceGroup*>(&::Bentley::Geometry::Proto::SurfaceGroup::default_instance());
  surfacePatch_ = const_cast< ::Bentley::Geometry::Proto::SurfacePatch*>(&::Bentley::Geometry::Proto::SurfacePatch::default_instance());
}

ISurface::ISurface(const ISurface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ISurface::SharedCtor() {
  _cached_size_ = 0;
  polygon_ = NULL;
  circularDisk_ = NULL;
  ellipticDisk_ = NULL;
  bsplineSuface_ = NULL;
  indexedMesh_ = NULL;
  parametricSurfacePatch_ = NULL;
  surfaceBySweptCurve_ = NULL;
  surfaceGroup_ = NULL;
  surfacePatch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ISurface::~ISurface() {
  SharedDtor();
}

void ISurface::SharedDtor() {
  if (this != default_instance_) {
    delete polygon_;
    delete circularDisk_;
    delete ellipticDisk_;
    delete bsplineSuface_;
    delete indexedMesh_;
    delete parametricSurfacePatch_;
    delete surfaceBySweptCurve_;
    delete surfaceGroup_;
    delete surfacePatch_;
  }
}

void ISurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ISurface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ISurface_descriptor_;
}

const ISurface& ISurface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ISurface* ISurface::default_instance_ = NULL;

ISurface* ISurface::New() const {
  return new ISurface;
}

void ISurface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::Bentley::Geometry::Proto::Polygon::Clear();
    }
    if (has_circularDisk()) {
      if (circularDisk_ != NULL) circularDisk_->::Bentley::Geometry::Proto::CircularDisk::Clear();
    }
    if (has_ellipticDisk()) {
      if (ellipticDisk_ != NULL) ellipticDisk_->::Bentley::Geometry::Proto::EllipticDisk::Clear();
    }
    if (has_bsplineSuface()) {
      if (bsplineSuface_ != NULL) bsplineSuface_->::Bentley::Geometry::Proto::BsplineSurface::Clear();
    }
    if (has_indexedMesh()) {
      if (indexedMesh_ != NULL) indexedMesh_->::Bentley::Geometry::Proto::IndexedMesh::Clear();
    }
    if (has_parametricSurfacePatch()) {
      if (parametricSurfacePatch_ != NULL) parametricSurfacePatch_->::Bentley::Geometry::Proto::ParametricSurfacePatch::Clear();
    }
    if (has_surfaceBySweptCurve()) {
      if (surfaceBySweptCurve_ != NULL) surfaceBySweptCurve_->::Bentley::Geometry::Proto::SurfaceBySweptCurve::Clear();
    }
    if (has_surfaceGroup()) {
      if (surfaceGroup_ != NULL) surfaceGroup_->::Bentley::Geometry::Proto::SurfaceGroup::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_surfacePatch()) {
      if (surfacePatch_ != NULL) surfacePatch_->::Bentley::Geometry::Proto::SurfacePatch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ISurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.Polygon polygon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circularDisk;
        break;
      }

      // optional .Bentley.Geometry.Proto.CircularDisk circularDisk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circularDisk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circularDisk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ellipticDisk;
        break;
      }

      // optional .Bentley.Geometry.Proto.EllipticDisk ellipticDisk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ellipticDisk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ellipticDisk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_bsplineSuface;
        break;
      }

      // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bsplineSuface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsplineSuface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_indexedMesh;
        break;
      }

      // optional .Bentley.Geometry.Proto.IndexedMesh indexedMesh = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexedMesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexedMesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_parametricSurfacePatch;
        break;
      }

      // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parametricSurfacePatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parametricSurfacePatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_surfaceBySweptCurve;
        break;
      }

      // optional .Bentley.Geometry.Proto.SurfaceBySweptCurve surfaceBySweptCurve = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surfaceBySweptCurve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surfaceBySweptCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_surfaceGroup;
        break;
      }

      // optional .Bentley.Geometry.Proto.SurfaceGroup surfaceGroup = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surfaceGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surfaceGroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_surfacePatch;
        break;
      }

      // optional .Bentley.Geometry.Proto.SurfacePatch surfacePatch = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surfacePatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surfacePatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ISurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.Polygon polygon = 1;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygon(), output);
  }

  // optional .Bentley.Geometry.Proto.CircularDisk circularDisk = 2;
  if (has_circularDisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->circularDisk(), output);
  }

  // optional .Bentley.Geometry.Proto.EllipticDisk ellipticDisk = 3;
  if (has_ellipticDisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ellipticDisk(), output);
  }

  // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 100;
  if (has_bsplineSuface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->bsplineSuface(), output);
  }

  // optional .Bentley.Geometry.Proto.IndexedMesh indexedMesh = 101;
  if (has_indexedMesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->indexedMesh(), output);
  }

  // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 102;
  if (has_parametricSurfacePatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->parametricSurfacePatch(), output);
  }

  // optional .Bentley.Geometry.Proto.SurfaceBySweptCurve surfaceBySweptCurve = 103;
  if (has_surfaceBySweptCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->surfaceBySweptCurve(), output);
  }

  // optional .Bentley.Geometry.Proto.SurfaceGroup surfaceGroup = 104;
  if (has_surfaceGroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->surfaceGroup(), output);
  }

  // optional .Bentley.Geometry.Proto.SurfacePatch surfacePatch = 105;
  if (has_surfacePatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->surfacePatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ISurface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.Polygon polygon = 1;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->polygon(), target);
  }

  // optional .Bentley.Geometry.Proto.CircularDisk circularDisk = 2;
  if (has_circularDisk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->circularDisk(), target);
  }

  // optional .Bentley.Geometry.Proto.EllipticDisk ellipticDisk = 3;
  if (has_ellipticDisk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ellipticDisk(), target);
  }

  // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 100;
  if (has_bsplineSuface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->bsplineSuface(), target);
  }

  // optional .Bentley.Geometry.Proto.IndexedMesh indexedMesh = 101;
  if (has_indexedMesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->indexedMesh(), target);
  }

  // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 102;
  if (has_parametricSurfacePatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->parametricSurfacePatch(), target);
  }

  // optional .Bentley.Geometry.Proto.SurfaceBySweptCurve surfaceBySweptCurve = 103;
  if (has_surfaceBySweptCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->surfaceBySweptCurve(), target);
  }

  // optional .Bentley.Geometry.Proto.SurfaceGroup surfaceGroup = 104;
  if (has_surfaceGroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->surfaceGroup(), target);
  }

  // optional .Bentley.Geometry.Proto.SurfacePatch surfacePatch = 105;
  if (has_surfacePatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->surfacePatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ISurface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.Polygon polygon = 1;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

    // optional .Bentley.Geometry.Proto.CircularDisk circularDisk = 2;
    if (has_circularDisk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->circularDisk());
    }

    // optional .Bentley.Geometry.Proto.EllipticDisk ellipticDisk = 3;
    if (has_ellipticDisk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ellipticDisk());
    }

    // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 100;
    if (has_bsplineSuface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsplineSuface());
    }

    // optional .Bentley.Geometry.Proto.IndexedMesh indexedMesh = 101;
    if (has_indexedMesh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexedMesh());
    }

    // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 102;
    if (has_parametricSurfacePatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parametricSurfacePatch());
    }

    // optional .Bentley.Geometry.Proto.SurfaceBySweptCurve surfaceBySweptCurve = 103;
    if (has_surfaceBySweptCurve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surfaceBySweptCurve());
    }

    // optional .Bentley.Geometry.Proto.SurfaceGroup surfaceGroup = 104;
    if (has_surfaceGroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surfaceGroup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Bentley.Geometry.Proto.SurfacePatch surfacePatch = 105;
    if (has_surfacePatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surfacePatch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ISurface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ISurface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ISurface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ISurface::MergeFrom(const ISurface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_polygon()) {
      mutable_polygon()->::Bentley::Geometry::Proto::Polygon::MergeFrom(from.polygon());
    }
    if (from.has_circularDisk()) {
      mutable_circularDisk()->::Bentley::Geometry::Proto::CircularDisk::MergeFrom(from.circularDisk());
    }
    if (from.has_ellipticDisk()) {
      mutable_ellipticDisk()->::Bentley::Geometry::Proto::EllipticDisk::MergeFrom(from.ellipticDisk());
    }
    if (from.has_bsplineSuface()) {
      mutable_bsplineSuface()->::Bentley::Geometry::Proto::BsplineSurface::MergeFrom(from.bsplineSuface());
    }
    if (from.has_indexedMesh()) {
      mutable_indexedMesh()->::Bentley::Geometry::Proto::IndexedMesh::MergeFrom(from.indexedMesh());
    }
    if (from.has_parametricSurfacePatch()) {
      mutable_parametricSurfacePatch()->::Bentley::Geometry::Proto::ParametricSurfacePatch::MergeFrom(from.parametricSurfacePatch());
    }
    if (from.has_surfaceBySweptCurve()) {
      mutable_surfaceBySweptCurve()->::Bentley::Geometry::Proto::SurfaceBySweptCurve::MergeFrom(from.surfaceBySweptCurve());
    }
    if (from.has_surfaceGroup()) {
      mutable_surfaceGroup()->::Bentley::Geometry::Proto::SurfaceGroup::MergeFrom(from.surfaceGroup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_surfacePatch()) {
      mutable_surfacePatch()->::Bentley::Geometry::Proto::SurfacePatch::MergeFrom(from.surfacePatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ISurface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISurface::CopyFrom(const ISurface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISurface::IsInitialized() const {

  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (has_circularDisk()) {
    if (!this->circularDisk().IsInitialized()) return false;
  }
  if (has_ellipticDisk()) {
    if (!this->ellipticDisk().IsInitialized()) return false;
  }
  if (has_bsplineSuface()) {
    if (!this->bsplineSuface().IsInitialized()) return false;
  }
  if (has_indexedMesh()) {
    if (!this->indexedMesh().IsInitialized()) return false;
  }
  if (has_parametricSurfacePatch()) {
    if (!this->parametricSurfacePatch().IsInitialized()) return false;
  }
  if (has_surfaceBySweptCurve()) {
    if (!this->surfaceBySweptCurve().IsInitialized()) return false;
  }
  if (has_surfaceGroup()) {
    if (!this->surfaceGroup().IsInitialized()) return false;
  }
  if (has_surfacePatch()) {
    if (!this->surfacePatch().IsInitialized()) return false;
  }
  return true;
}

void ISurface::Swap(ISurface* other) {
  if (other != this) {
    std::swap(polygon_, other->polygon_);
    std::swap(circularDisk_, other->circularDisk_);
    std::swap(ellipticDisk_, other->ellipticDisk_);
    std::swap(bsplineSuface_, other->bsplineSuface_);
    std::swap(indexedMesh_, other->indexedMesh_);
    std::swap(parametricSurfacePatch_, other->parametricSurfacePatch_);
    std::swap(surfaceBySweptCurve_, other->surfaceBySweptCurve_);
    std::swap(surfaceGroup_, other->surfaceGroup_);
    std::swap(surfacePatch_, other->surfacePatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ISurface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ISurface_descriptor_;
  metadata.reflection = ISurface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ISurfacePatch::kParametricSurfacePatchFieldNumber;
#endif  // !_MSC_VER

ISurfacePatch::ISurfacePatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ISurfacePatch::InitAsDefaultInstance() {
  parametricSurfacePatch_ = const_cast< ::Bentley::Geometry::Proto::ParametricSurfacePatch*>(&::Bentley::Geometry::Proto::ParametricSurfacePatch::default_instance());
}

ISurfacePatch::ISurfacePatch(const ISurfacePatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ISurfacePatch::SharedCtor() {
  _cached_size_ = 0;
  parametricSurfacePatch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ISurfacePatch::~ISurfacePatch() {
  SharedDtor();
}

void ISurfacePatch::SharedDtor() {
  if (this != default_instance_) {
    delete parametricSurfacePatch_;
  }
}

void ISurfacePatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ISurfacePatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ISurfacePatch_descriptor_;
}

const ISurfacePatch& ISurfacePatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ISurfacePatch* ISurfacePatch::default_instance_ = NULL;

ISurfacePatch* ISurfacePatch::New() const {
  return new ISurfacePatch;
}

void ISurfacePatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parametricSurfacePatch()) {
      if (parametricSurfacePatch_ != NULL) parametricSurfacePatch_->::Bentley::Geometry::Proto::ParametricSurfacePatch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ISurfacePatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parametricSurfacePatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ISurfacePatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 1;
  if (has_parametricSurfacePatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parametricSurfacePatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ISurfacePatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 1;
  if (has_parametricSurfacePatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parametricSurfacePatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ISurfacePatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.ParametricSurfacePatch parametricSurfacePatch = 1;
    if (has_parametricSurfacePatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parametricSurfacePatch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ISurfacePatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ISurfacePatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ISurfacePatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ISurfacePatch::MergeFrom(const ISurfacePatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parametricSurfacePatch()) {
      mutable_parametricSurfacePatch()->::Bentley::Geometry::Proto::ParametricSurfacePatch::MergeFrom(from.parametricSurfacePatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ISurfacePatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISurfacePatch::CopyFrom(const ISurfacePatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISurfacePatch::IsInitialized() const {

  if (has_parametricSurfacePatch()) {
    if (!this->parametricSurfacePatch().IsInitialized()) return false;
  }
  return true;
}

void ISurfacePatch::Swap(ISurfacePatch* other) {
  if (other != this) {
    std::swap(parametricSurfacePatch_, other->parametricSurfacePatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ISurfacePatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ISurfacePatch_descriptor_;
  metadata.reflection = ISurfacePatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IParametricSurface::kBsplineSufaceFieldNumber;
#endif  // !_MSC_VER

IParametricSurface::IParametricSurface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IParametricSurface::InitAsDefaultInstance() {
  bsplineSuface_ = const_cast< ::Bentley::Geometry::Proto::BsplineSurface*>(&::Bentley::Geometry::Proto::BsplineSurface::default_instance());
}

IParametricSurface::IParametricSurface(const IParametricSurface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IParametricSurface::SharedCtor() {
  _cached_size_ = 0;
  bsplineSuface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IParametricSurface::~IParametricSurface() {
  SharedDtor();
}

void IParametricSurface::SharedDtor() {
  if (this != default_instance_) {
    delete bsplineSuface_;
  }
}

void IParametricSurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IParametricSurface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IParametricSurface_descriptor_;
}

const IParametricSurface& IParametricSurface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IParametricSurface* IParametricSurface::default_instance_ = NULL;

IParametricSurface* IParametricSurface::New() const {
  return new IParametricSurface;
}

void IParametricSurface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bsplineSuface()) {
      if (bsplineSuface_ != NULL) bsplineSuface_->::Bentley::Geometry::Proto::BsplineSurface::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IParametricSurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsplineSuface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IParametricSurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 1;
  if (has_bsplineSuface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bsplineSuface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IParametricSurface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 1;
  if (has_bsplineSuface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bsplineSuface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IParametricSurface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.BsplineSurface bsplineSuface = 1;
    if (has_bsplineSuface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsplineSuface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IParametricSurface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IParametricSurface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IParametricSurface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IParametricSurface::MergeFrom(const IParametricSurface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsplineSuface()) {
      mutable_bsplineSuface()->::Bentley::Geometry::Proto::BsplineSurface::MergeFrom(from.bsplineSuface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IParametricSurface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IParametricSurface::CopyFrom(const IParametricSurface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IParametricSurface::IsInitialized() const {

  if (has_bsplineSuface()) {
    if (!this->bsplineSuface().IsInitialized()) return false;
  }
  return true;
}

void IParametricSurface::Swap(IParametricSurface* other) {
  if (other != this) {
    std::swap(bsplineSuface_, other->bsplineSuface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IParametricSurface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IParametricSurface_descriptor_;
  metadata.reflection = IParametricSurface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IGeometry::kPointFieldNumber;
const int IGeometry::kCurveFieldNumber;
const int IGeometry::kSurfaceFieldNumber;
const int IGeometry::kSolidFieldNumber;
#endif  // !_MSC_VER

IGeometry::IGeometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IGeometry::InitAsDefaultInstance() {
  point_ = const_cast< ::Bentley::Geometry::Proto::IPoint*>(&::Bentley::Geometry::Proto::IPoint::default_instance());
  curve_ = const_cast< ::Bentley::Geometry::Proto::ICurve*>(&::Bentley::Geometry::Proto::ICurve::default_instance());
  surface_ = const_cast< ::Bentley::Geometry::Proto::ISurface*>(&::Bentley::Geometry::Proto::ISurface::default_instance());
  solid_ = const_cast< ::Bentley::Geometry::Proto::ISolid*>(&::Bentley::Geometry::Proto::ISolid::default_instance());
}

IGeometry::IGeometry(const IGeometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IGeometry::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  curve_ = NULL;
  surface_ = NULL;
  solid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IGeometry::~IGeometry() {
  SharedDtor();
}

void IGeometry::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete curve_;
    delete surface_;
    delete solid_;
  }
}

void IGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IGeometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IGeometry_descriptor_;
}

const IGeometry& IGeometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IGeometry* IGeometry::default_instance_ = NULL;

IGeometry* IGeometry::New() const {
  return new IGeometry;
}

void IGeometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::Bentley::Geometry::Proto::IPoint::Clear();
    }
    if (has_curve()) {
      if (curve_ != NULL) curve_->::Bentley::Geometry::Proto::ICurve::Clear();
    }
    if (has_surface()) {
      if (surface_ != NULL) surface_->::Bentley::Geometry::Proto::ISurface::Clear();
    }
    if (has_solid()) {
      if (solid_ != NULL) solid_->::Bentley::Geometry::Proto::ISolid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Bentley.Geometry.Proto.IPoint point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curve;
        break;
      }

      // optional .Bentley.Geometry.Proto.ICurve curve = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_surface;
        break;
      }

      // optional .Bentley.Geometry.Proto.ISurface surface = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_solid;
        break;
      }

      // optional .Bentley.Geometry.Proto.ISolid solid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Bentley.Geometry.Proto.IPoint point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // optional .Bentley.Geometry.Proto.ICurve curve = 2;
  if (has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curve(), output);
  }

  // optional .Bentley.Geometry.Proto.ISurface surface = 3;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->surface(), output);
  }

  // optional .Bentley.Geometry.Proto.ISolid solid = 4;
  if (has_solid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->solid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IGeometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Bentley.Geometry.Proto.IPoint point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // optional .Bentley.Geometry.Proto.ICurve curve = 2;
  if (has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curve(), target);
  }

  // optional .Bentley.Geometry.Proto.ISurface surface = 3;
  if (has_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->surface(), target);
  }

  // optional .Bentley.Geometry.Proto.ISolid solid = 4;
  if (has_solid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->solid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IGeometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Bentley.Geometry.Proto.IPoint point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional .Bentley.Geometry.Proto.ICurve curve = 2;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curve());
    }

    // optional .Bentley.Geometry.Proto.ISurface surface = 3;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface());
    }

    // optional .Bentley.Geometry.Proto.ISolid solid = 4;
    if (has_solid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IGeometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IGeometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IGeometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IGeometry::MergeFrom(const IGeometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::Bentley::Geometry::Proto::IPoint::MergeFrom(from.point());
    }
    if (from.has_curve()) {
      mutable_curve()->::Bentley::Geometry::Proto::ICurve::MergeFrom(from.curve());
    }
    if (from.has_surface()) {
      mutable_surface()->::Bentley::Geometry::Proto::ISurface::MergeFrom(from.surface());
    }
    if (from.has_solid()) {
      mutable_solid()->::Bentley::Geometry::Proto::ISolid::MergeFrom(from.solid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IGeometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IGeometry::CopyFrom(const IGeometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IGeometry::IsInitialized() const {

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_curve()) {
    if (!this->curve().IsInitialized()) return false;
  }
  if (has_surface()) {
    if (!this->surface().IsInitialized()) return false;
  }
  if (has_solid()) {
    if (!this->solid().IsInitialized()) return false;
  }
  return true;
}

void IGeometry::Swap(IGeometry* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(curve_, other->curve_);
    std::swap(surface_, other->surface_);
    std::swap(solid_, other->solid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IGeometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IGeometry_descriptor_;
  metadata.reflection = IGeometry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kPlacementFieldNumber;
const int Block::kCornerAFieldNumber;
const int Block::kCornerBFieldNumber;
const int Block::kBSolidFlagFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  cornerA_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  cornerB_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  cornerA_ = NULL;
  cornerB_ = NULL;
  bSolidFlag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
    delete cornerA_;
    delete cornerB_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    if (has_cornerA()) {
      if (cornerA_ != NULL) cornerA_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_cornerB()) {
      if (cornerB_ != NULL) cornerB_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    bSolidFlag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cornerA;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d cornerA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cornerA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cornerA()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cornerB;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d cornerB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cornerB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cornerB()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bSolidFlag;
        break;
      }

      // required bool bSolidFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSolidFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bSolidFlag_)));
          set_has_bSolidFlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d cornerA = 2;
  if (has_cornerA()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cornerA(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d cornerB = 3;
  if (has_cornerB()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cornerB(), output);
  }

  // required bool bSolidFlag = 4;
  if (has_bSolidFlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bSolidFlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d cornerA = 2;
  if (has_cornerA()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cornerA(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d cornerB = 3;
  if (has_cornerB()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cornerB(), target);
  }

  // required bool bSolidFlag = 4;
  if (has_bSolidFlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bSolidFlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required .Bentley.Geometry.Proto.DPoint3d cornerA = 2;
    if (has_cornerA()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cornerA());
    }

    // required .Bentley.Geometry.Proto.DPoint3d cornerB = 3;
    if (has_cornerB()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cornerB());
    }

    // required bool bSolidFlag = 4;
    if (has_bSolidFlag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_cornerA()) {
      mutable_cornerA()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.cornerA());
    }
    if (from.has_cornerB()) {
      mutable_cornerB()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.cornerB());
    }
    if (from.has_bSolidFlag()) {
      set_bSolidFlag(from.bSolidFlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  if (has_cornerA()) {
    if (!this->cornerA().IsInitialized()) return false;
  }
  if (has_cornerB()) {
    if (!this->cornerB().IsInitialized()) return false;
  }
  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(cornerA_, other->cornerA_);
    std::swap(cornerB_, other->cornerB_);
    std::swap(bSolidFlag_, other->bSolidFlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BsplineCurve::kOrderFieldNumber;
const int BsplineCurve::kClosedFieldNumber;
const int BsplineCurve::kControlPointFieldNumber;
const int BsplineCurve::kWeightFieldNumber;
const int BsplineCurve::kKnotFieldNumber;
#endif  // !_MSC_VER

BsplineCurve::BsplineCurve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BsplineCurve::InitAsDefaultInstance() {
}

BsplineCurve::BsplineCurve(const BsplineCurve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BsplineCurve::SharedCtor() {
  _cached_size_ = 0;
  Order_ = 0;
  Closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BsplineCurve::~BsplineCurve() {
  SharedDtor();
}

void BsplineCurve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BsplineCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsplineCurve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BsplineCurve_descriptor_;
}

const BsplineCurve& BsplineCurve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

BsplineCurve* BsplineCurve::default_instance_ = NULL;

BsplineCurve* BsplineCurve::New() const {
  return new BsplineCurve;
}

void BsplineCurve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    Order_ = 0;
    Closed_ = false;
  }
  ControlPoint_.Clear();
  Weight_.Clear();
  Knot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BsplineCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Order_)));
          set_has_Order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Closed;
        break;
      }

      // required bool Closed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Closed_)));
          set_has_Closed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ControlPoint;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ControlPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ControlPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ControlPoint;
        if (input->ExpectTag(33)) goto parse_Weight;
        break;
      }

      // repeated double Weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_Weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_Weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Weight;
        if (input->ExpectTag(41)) goto parse_Knot;
        break;
      }

      // repeated double Knot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Knot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_Knot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_Knot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Knot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BsplineCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Order = 1;
  if (has_Order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->Order(), output);
  }

  // required bool Closed = 2;
  if (has_Closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->Closed(), output);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 3;
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ControlPoint(i), output);
  }

  // repeated double Weight = 4;
  for (int i = 0; i < this->Weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->Weight(i), output);
  }

  // repeated double Knot = 5;
  for (int i = 0; i < this->Knot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->Knot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BsplineCurve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Order = 1;
  if (has_Order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->Order(), target);
  }

  // required bool Closed = 2;
  if (has_Closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->Closed(), target);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 3;
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ControlPoint(i), target);
  }

  // repeated double Weight = 4;
  for (int i = 0; i < this->Weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->Weight(i), target);
  }

  // repeated double Knot = 5;
  for (int i = 0; i < this->Knot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->Knot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BsplineCurve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Order = 1;
    if (has_Order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Order());
    }

    // required bool Closed = 2;
    if (has_Closed()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 3;
  total_size += 1 * this->ControlPoint_size();
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ControlPoint(i));
  }

  // repeated double Weight = 4;
  {
    int data_size = 0;
    data_size = 8 * this->Weight_size();
    total_size += 1 * this->Weight_size() + data_size;
  }

  // repeated double Knot = 5;
  {
    int data_size = 0;
    data_size = 8 * this->Knot_size();
    total_size += 1 * this->Knot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsplineCurve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BsplineCurve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BsplineCurve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BsplineCurve::MergeFrom(const BsplineCurve& from) {
  GOOGLE_CHECK_NE(&from, this);
  ControlPoint_.MergeFrom(from.ControlPoint_);
  Weight_.MergeFrom(from.Weight_);
  Knot_.MergeFrom(from.Knot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_Order()) {
      set_Order(from.Order());
    }
    if (from.has_Closed()) {
      set_Closed(from.Closed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BsplineCurve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsplineCurve::CopyFrom(const BsplineCurve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsplineCurve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ControlPoint_size(); i++) {
    if (!this->ControlPoint(i).IsInitialized()) return false;
  }
  return true;
}

void BsplineCurve::Swap(BsplineCurve* other) {
  if (other != this) {
    std::swap(Order_, other->Order_);
    std::swap(Closed_, other->Closed_);
    ControlPoint_.Swap(&other->ControlPoint_);
    Weight_.Swap(&other->Weight_);
    Knot_.Swap(&other->Knot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BsplineCurve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BsplineCurve_descriptor_;
  metadata.reflection = BsplineCurve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BsplineSurface::kOrderUFieldNumber;
const int BsplineSurface::kClosedUFieldNumber;
const int BsplineSurface::kNumUControlPointFieldNumber;
const int BsplineSurface::kOrderVFieldNumber;
const int BsplineSurface::kClosedVFieldNumber;
const int BsplineSurface::kNumVControlPointFieldNumber;
const int BsplineSurface::kControlPointFieldNumber;
const int BsplineSurface::kWeightFieldNumber;
const int BsplineSurface::kKnotUFieldNumber;
const int BsplineSurface::kKnotVFieldNumber;
#endif  // !_MSC_VER

BsplineSurface::BsplineSurface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BsplineSurface::InitAsDefaultInstance() {
}

BsplineSurface::BsplineSurface(const BsplineSurface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BsplineSurface::SharedCtor() {
  _cached_size_ = 0;
  OrderU_ = 0;
  ClosedU_ = false;
  NumUControlPoint_ = 0;
  OrderV_ = 0;
  ClosedV_ = false;
  NumVControlPoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BsplineSurface::~BsplineSurface() {
  SharedDtor();
}

void BsplineSurface::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BsplineSurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsplineSurface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BsplineSurface_descriptor_;
}

const BsplineSurface& BsplineSurface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

BsplineSurface* BsplineSurface::default_instance_ = NULL;

BsplineSurface* BsplineSurface::New() const {
  return new BsplineSurface;
}

void BsplineSurface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    OrderU_ = 0;
    ClosedU_ = false;
    NumUControlPoint_ = 0;
    OrderV_ = 0;
    ClosedV_ = false;
    NumVControlPoint_ = 0;
  }
  ControlPoint_.Clear();
  Weight_.Clear();
  KnotU_.Clear();
  KnotV_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BsplineSurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OrderU = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &OrderU_)));
          set_has_OrderU();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ClosedU;
        break;
      }

      // required bool ClosedU = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClosedU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ClosedU_)));
          set_has_ClosedU();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_NumUControlPoint;
        break;
      }

      // required int32 NumUControlPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NumUControlPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &NumUControlPoint_)));
          set_has_NumUControlPoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderV;
        break;
      }

      // required int32 OrderV = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &OrderV_)));
          set_has_OrderV();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ClosedV;
        break;
      }

      // required bool ClosedV = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClosedV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ClosedV_)));
          set_has_ClosedV();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NumVControlPoint;
        break;
      }

      // required int32 NumVControlPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NumVControlPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &NumVControlPoint_)));
          set_has_NumVControlPoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ControlPoint;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ControlPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ControlPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ControlPoint;
        if (input->ExpectTag(65)) goto parse_Weight;
        break;
      }

      // repeated double Weight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_Weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_Weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Weight;
        if (input->ExpectTag(73)) goto parse_KnotU;
        break;
      }

      // repeated double KnotU = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_KnotU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_KnotU())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_KnotU())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_KnotU;
        if (input->ExpectTag(81)) goto parse_KnotV;
        break;
      }

      // repeated double KnotV = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_KnotV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_KnotV())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_KnotV())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_KnotV;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BsplineSurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OrderU = 1;
  if (has_OrderU()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->OrderU(), output);
  }

  // required bool ClosedU = 2;
  if (has_ClosedU()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ClosedU(), output);
  }

  // required int32 NumUControlPoint = 3;
  if (has_NumUControlPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->NumUControlPoint(), output);
  }

  // required int32 OrderV = 4;
  if (has_OrderV()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->OrderV(), output);
  }

  // required bool ClosedV = 5;
  if (has_ClosedV()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ClosedV(), output);
  }

  // required int32 NumVControlPoint = 6;
  if (has_NumVControlPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->NumVControlPoint(), output);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 7;
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ControlPoint(i), output);
  }

  // repeated double Weight = 8;
  for (int i = 0; i < this->Weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->Weight(i), output);
  }

  // repeated double KnotU = 9;
  for (int i = 0; i < this->KnotU_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->KnotU(i), output);
  }

  // repeated double KnotV = 10;
  for (int i = 0; i < this->KnotV_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->KnotV(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BsplineSurface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OrderU = 1;
  if (has_OrderU()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->OrderU(), target);
  }

  // required bool ClosedU = 2;
  if (has_ClosedU()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ClosedU(), target);
  }

  // required int32 NumUControlPoint = 3;
  if (has_NumUControlPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->NumUControlPoint(), target);
  }

  // required int32 OrderV = 4;
  if (has_OrderV()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->OrderV(), target);
  }

  // required bool ClosedV = 5;
  if (has_ClosedV()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ClosedV(), target);
  }

  // required int32 NumVControlPoint = 6;
  if (has_NumVControlPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->NumVControlPoint(), target);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 7;
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ControlPoint(i), target);
  }

  // repeated double Weight = 8;
  for (int i = 0; i < this->Weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->Weight(i), target);
  }

  // repeated double KnotU = 9;
  for (int i = 0; i < this->KnotU_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->KnotU(i), target);
  }

  // repeated double KnotV = 10;
  for (int i = 0; i < this->KnotV_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->KnotV(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BsplineSurface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OrderU = 1;
    if (has_OrderU()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->OrderU());
    }

    // required bool ClosedU = 2;
    if (has_ClosedU()) {
      total_size += 1 + 1;
    }

    // required int32 NumUControlPoint = 3;
    if (has_NumUControlPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->NumUControlPoint());
    }

    // required int32 OrderV = 4;
    if (has_OrderV()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->OrderV());
    }

    // required bool ClosedV = 5;
    if (has_ClosedV()) {
      total_size += 1 + 1;
    }

    // required int32 NumVControlPoint = 6;
    if (has_NumVControlPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->NumVControlPoint());
    }

  }
  // repeated .Bentley.Geometry.Proto.DPoint3d ControlPoint = 7;
  total_size += 1 * this->ControlPoint_size();
  for (int i = 0; i < this->ControlPoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ControlPoint(i));
  }

  // repeated double Weight = 8;
  {
    int data_size = 0;
    data_size = 8 * this->Weight_size();
    total_size += 1 * this->Weight_size() + data_size;
  }

  // repeated double KnotU = 9;
  {
    int data_size = 0;
    data_size = 8 * this->KnotU_size();
    total_size += 1 * this->KnotU_size() + data_size;
  }

  // repeated double KnotV = 10;
  {
    int data_size = 0;
    data_size = 8 * this->KnotV_size();
    total_size += 1 * this->KnotV_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsplineSurface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BsplineSurface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BsplineSurface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BsplineSurface::MergeFrom(const BsplineSurface& from) {
  GOOGLE_CHECK_NE(&from, this);
  ControlPoint_.MergeFrom(from.ControlPoint_);
  Weight_.MergeFrom(from.Weight_);
  KnotU_.MergeFrom(from.KnotU_);
  KnotV_.MergeFrom(from.KnotV_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_OrderU()) {
      set_OrderU(from.OrderU());
    }
    if (from.has_ClosedU()) {
      set_ClosedU(from.ClosedU());
    }
    if (from.has_NumUControlPoint()) {
      set_NumUControlPoint(from.NumUControlPoint());
    }
    if (from.has_OrderV()) {
      set_OrderV(from.OrderV());
    }
    if (from.has_ClosedV()) {
      set_ClosedV(from.ClosedV());
    }
    if (from.has_NumVControlPoint()) {
      set_NumVControlPoint(from.NumVControlPoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BsplineSurface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsplineSurface::CopyFrom(const BsplineSurface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsplineSurface::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < ControlPoint_size(); i++) {
    if (!this->ControlPoint(i).IsInitialized()) return false;
  }
  return true;
}

void BsplineSurface::Swap(BsplineSurface* other) {
  if (other != this) {
    std::swap(OrderU_, other->OrderU_);
    std::swap(ClosedU_, other->ClosedU_);
    std::swap(NumUControlPoint_, other->NumUControlPoint_);
    std::swap(OrderV_, other->OrderV_);
    std::swap(ClosedV_, other->ClosedV_);
    std::swap(NumVControlPoint_, other->NumVControlPoint_);
    ControlPoint_.Swap(&other->ControlPoint_);
    Weight_.Swap(&other->Weight_);
    KnotU_.Swap(&other->KnotU_);
    KnotV_.Swap(&other->KnotV_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BsplineSurface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BsplineSurface_descriptor_;
  metadata.reflection = BsplineSurface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircularArc::kPlacementFieldNumber;
const int CircularArc::kRadiusFieldNumber;
const int CircularArc::kStartAngleFieldNumber;
const int CircularArc::kSweepAngleFieldNumber;
#endif  // !_MSC_VER

CircularArc::CircularArc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircularArc::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  startAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  sweepAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
}

CircularArc::CircularArc(const CircularArc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircularArc::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radius_ = 0;
  startAngle_ = NULL;
  sweepAngle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircularArc::~CircularArc() {
  SharedDtor();
}

void CircularArc::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
    delete startAngle_;
    delete sweepAngle_;
  }
}

void CircularArc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircularArc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircularArc_descriptor_;
}

const CircularArc& CircularArc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CircularArc* CircularArc::default_instance_ = NULL;

CircularArc* CircularArc::New() const {
  return new CircularArc;
}

void CircularArc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radius_ = 0;
    if (has_startAngle()) {
      if (startAngle_ != NULL) startAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    if (has_sweepAngle()) {
      if (sweepAngle_ != NULL) sweepAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircularArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }

      // required double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle startAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sweepAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle sweepAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sweepAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircularArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 3;
  if (has_startAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->startAngle(), output);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 4;
  if (has_sweepAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sweepAngle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircularArc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 3;
  if (has_startAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->startAngle(), target);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 4;
  if (has_sweepAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sweepAngle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircularArc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.Angle startAngle = 3;
    if (has_startAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startAngle());
    }

    // required .Bentley.Geometry.Proto.Angle sweepAngle = 4;
    if (has_sweepAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepAngle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircularArc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircularArc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircularArc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircularArc::MergeFrom(const CircularArc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_startAngle()) {
      mutable_startAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.startAngle());
    }
    if (from.has_sweepAngle()) {
      mutable_sweepAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.sweepAngle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircularArc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircularArc::CopyFrom(const CircularArc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircularArc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  if (has_startAngle()) {
    if (!this->startAngle().IsInitialized()) return false;
  }
  if (has_sweepAngle()) {
    if (!this->sweepAngle().IsInitialized()) return false;
  }
  return true;
}

void CircularArc::Swap(CircularArc* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radius_, other->radius_);
    std::swap(startAngle_, other->startAngle_);
    std::swap(sweepAngle_, other->sweepAngle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircularArc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircularArc_descriptor_;
  metadata.reflection = CircularArc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircularCone::kPlacementFieldNumber;
const int CircularCone::kHeightFieldNumber;
const int CircularCone::kRadiusAFieldNumber;
const int CircularCone::kRadiusBFieldNumber;
const int CircularCone::kBSolidFlagFieldNumber;
#endif  // !_MSC_VER

CircularCone::CircularCone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircularCone::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

CircularCone::CircularCone(const CircularCone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircularCone::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  height_ = 0;
  radiusA_ = 0;
  radiusB_ = 0;
  bSolidFlag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircularCone::~CircularCone() {
  SharedDtor();
}

void CircularCone::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
  }
}

void CircularCone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircularCone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircularCone_descriptor_;
}

const CircularCone& CircularCone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CircularCone* CircularCone::default_instance_ = NULL;

CircularCone* CircularCone::New() const {
  return new CircularCone;
}

void CircularCone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    height_ = 0;
    radiusA_ = 0;
    radiusB_ = 0;
    bSolidFlag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircularCone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_height;
        break;
      }

      // required double height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusA;
        break;
      }

      // required double radiusA = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusA_)));
          set_has_radiusA();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_radiusB;
        break;
      }

      // required double radiusB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusB_)));
          set_has_radiusB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bSolidFlag;
        break;
      }

      // required bool bSolidFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSolidFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bSolidFlag_)));
          set_has_bSolidFlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircularCone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->height(), output);
  }

  // required double radiusA = 3;
  if (has_radiusA()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusA(), output);
  }

  // required double radiusB = 4;
  if (has_radiusB()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radiusB(), output);
  }

  // required bool bSolidFlag = 5;
  if (has_bSolidFlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bSolidFlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircularCone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->height(), target);
  }

  // required double radiusA = 3;
  if (has_radiusA()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusA(), target);
  }

  // required double radiusB = 4;
  if (has_radiusB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radiusB(), target);
  }

  // required bool bSolidFlag = 5;
  if (has_bSolidFlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bSolidFlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircularCone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double height = 2;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required double radiusA = 3;
    if (has_radiusA()) {
      total_size += 1 + 8;
    }

    // required double radiusB = 4;
    if (has_radiusB()) {
      total_size += 1 + 8;
    }

    // required bool bSolidFlag = 5;
    if (has_bSolidFlag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircularCone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircularCone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircularCone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircularCone::MergeFrom(const CircularCone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radiusA()) {
      set_radiusA(from.radiusA());
    }
    if (from.has_radiusB()) {
      set_radiusB(from.radiusB());
    }
    if (from.has_bSolidFlag()) {
      set_bSolidFlag(from.bSolidFlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircularCone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircularCone::CopyFrom(const CircularCone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircularCone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void CircularCone::Swap(CircularCone* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(height_, other->height_);
    std::swap(radiusA_, other->radiusA_);
    std::swap(radiusB_, other->radiusB_);
    std::swap(bSolidFlag_, other->bSolidFlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircularCone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircularCone_descriptor_;
  metadata.reflection = CircularCone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircularCylinder::kPlacementFieldNumber;
const int CircularCylinder::kHeightFieldNumber;
const int CircularCylinder::kRadiusFieldNumber;
const int CircularCylinder::kBSolidFlagFieldNumber;
#endif  // !_MSC_VER

CircularCylinder::CircularCylinder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircularCylinder::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

CircularCylinder::CircularCylinder(const CircularCylinder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircularCylinder::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  height_ = 0;
  radius_ = 0;
  bSolidFlag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircularCylinder::~CircularCylinder() {
  SharedDtor();
}

void CircularCylinder::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
  }
}

void CircularCylinder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircularCylinder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircularCylinder_descriptor_;
}

const CircularCylinder& CircularCylinder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CircularCylinder* CircularCylinder::default_instance_ = NULL;

CircularCylinder* CircularCylinder::New() const {
  return new CircularCylinder;
}

void CircularCylinder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    height_ = 0;
    radius_ = 0;
    bSolidFlag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircularCylinder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_height;
        break;
      }

      // required double height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radius;
        break;
      }

      // required double radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bSolidFlag;
        break;
      }

      // required bool bSolidFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSolidFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bSolidFlag_)));
          set_has_bSolidFlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircularCylinder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->height(), output);
  }

  // required double radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  // required bool bSolidFlag = 4;
  if (has_bSolidFlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bSolidFlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircularCylinder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->height(), target);
  }

  // required double radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  // required bool bSolidFlag = 4;
  if (has_bSolidFlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bSolidFlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircularCylinder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double height = 2;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required double radius = 3;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required bool bSolidFlag = 4;
    if (has_bSolidFlag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircularCylinder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircularCylinder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircularCylinder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircularCylinder::MergeFrom(const CircularCylinder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_bSolidFlag()) {
      set_bSolidFlag(from.bSolidFlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircularCylinder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircularCylinder::CopyFrom(const CircularCylinder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircularCylinder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void CircularCylinder::Swap(CircularCylinder* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(bSolidFlag_, other->bSolidFlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircularCylinder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircularCylinder_descriptor_;
  metadata.reflection = CircularCylinder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircularDisk::kPlacementFieldNumber;
const int CircularDisk::kRadiusFieldNumber;
#endif  // !_MSC_VER

CircularDisk::CircularDisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircularDisk::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

CircularDisk::CircularDisk(const CircularDisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircularDisk::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircularDisk::~CircularDisk() {
  SharedDtor();
}

void CircularDisk::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
  }
}

void CircularDisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircularDisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircularDisk_descriptor_;
}

const CircularDisk& CircularDisk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CircularDisk* CircularDisk::default_instance_ = NULL;

CircularDisk* CircularDisk::New() const {
  return new CircularDisk;
}

void CircularDisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircularDisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }

      // required double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircularDisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircularDisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircularDisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircularDisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircularDisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircularDisk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircularDisk::MergeFrom(const CircularDisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircularDisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircularDisk::CopyFrom(const CircularDisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircularDisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void CircularDisk::Swap(CircularDisk* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircularDisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircularDisk_descriptor_;
  metadata.reflection = CircularDisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coordinate::kXyzFieldNumber;
#endif  // !_MSC_VER

Coordinate::Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coordinate::InitAsDefaultInstance() {
  xyz_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coordinate::SharedCtor() {
  _cached_size_ = 0;
  xyz_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coordinate::~Coordinate() {
  SharedDtor();
}

void Coordinate::SharedDtor() {
  if (this != default_instance_) {
    delete xyz_;
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New() const {
  return new Coordinate;
}

void Coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_xyz()) {
      if (xyz_ != NULL) xyz_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xyz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
  if (has_xyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xyz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
  if (has_xyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xyz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
    if (has_xyz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xyz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xyz()) {
      mutable_xyz()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.xyz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_xyz()) {
    if (!this->xyz().IsInitialized()) return false;
  }
  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other != this) {
    std::swap(xyz_, other->xyz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurveReference::kParentCurveFieldNumber;
const int CurveReference::kReversedFieldNumber;
#endif  // !_MSC_VER

CurveReference::CurveReference()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurveReference::InitAsDefaultInstance() {
  ParentCurve_ = const_cast< ::Bentley::Geometry::Proto::ICurve*>(&::Bentley::Geometry::Proto::ICurve::default_instance());
}

CurveReference::CurveReference(const CurveReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurveReference::SharedCtor() {
  _cached_size_ = 0;
  ParentCurve_ = NULL;
  Reversed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveReference::~CurveReference() {
  SharedDtor();
}

void CurveReference::SharedDtor() {
  if (this != default_instance_) {
    delete ParentCurve_;
  }
}

void CurveReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveReference_descriptor_;
}

const CurveReference& CurveReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CurveReference* CurveReference::default_instance_ = NULL;

CurveReference* CurveReference::New() const {
  return new CurveReference;
}

void CurveReference::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ParentCurve()) {
      if (ParentCurve_ != NULL) ParentCurve_->::Bentley::Geometry::Proto::ICurve::Clear();
    }
    Reversed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurveReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.ICurve ParentCurve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ParentCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reversed;
        break;
      }

      // required bool Reversed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reversed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Reversed_)));
          set_has_Reversed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurveReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.ICurve ParentCurve = 1;
  if (has_ParentCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ParentCurve(), output);
  }

  // required bool Reversed = 2;
  if (has_Reversed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->Reversed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurveReference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.ICurve ParentCurve = 1;
  if (has_ParentCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ParentCurve(), target);
  }

  // required bool Reversed = 2;
  if (has_Reversed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->Reversed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurveReference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.ICurve ParentCurve = 1;
    if (has_ParentCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ParentCurve());
    }

    // required bool Reversed = 2;
    if (has_Reversed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveReference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurveReference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurveReference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurveReference::MergeFrom(const CurveReference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ParentCurve()) {
      mutable_ParentCurve()->::Bentley::Geometry::Proto::ICurve::MergeFrom(from.ParentCurve());
    }
    if (from.has_Reversed()) {
      set_Reversed(from.Reversed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurveReference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveReference::CopyFrom(const CurveReference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveReference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ParentCurve()) {
    if (!this->ParentCurve().IsInitialized()) return false;
  }
  return true;
}

void CurveReference::Swap(CurveReference* other) {
  if (other != this) {
    std::swap(ParentCurve_, other->ParentCurve_);
    std::swap(Reversed_, other->Reversed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurveReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveReference_descriptor_;
  metadata.reflection = CurveReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EllipticArc::kPlacementFieldNumber;
const int EllipticArc::kRadiusAFieldNumber;
const int EllipticArc::kRadiusBFieldNumber;
const int EllipticArc::kStartAngleFieldNumber;
const int EllipticArc::kSweepAngleFieldNumber;
#endif  // !_MSC_VER

EllipticArc::EllipticArc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EllipticArc::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  startAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  sweepAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
}

EllipticArc::EllipticArc(const EllipticArc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EllipticArc::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radiusA_ = 0;
  radiusB_ = 0;
  startAngle_ = NULL;
  sweepAngle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EllipticArc::~EllipticArc() {
  SharedDtor();
}

void EllipticArc::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
    delete startAngle_;
    delete sweepAngle_;
  }
}

void EllipticArc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EllipticArc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EllipticArc_descriptor_;
}

const EllipticArc& EllipticArc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

EllipticArc* EllipticArc::default_instance_ = NULL;

EllipticArc* EllipticArc::New() const {
  return new EllipticArc;
}

void EllipticArc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radiusA_ = 0;
    radiusB_ = 0;
    if (has_startAngle()) {
      if (startAngle_ != NULL) startAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    if (has_sweepAngle()) {
      if (sweepAngle_ != NULL) sweepAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EllipticArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radiusA;
        break;
      }

      // required double radiusA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusA_)));
          set_has_radiusA();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusB;
        break;
      }

      // required double radiusB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusB_)));
          set_has_radiusB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_startAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle startAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sweepAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sweepAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EllipticArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radiusA(), output);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusB(), output);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 4;
  if (has_startAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->startAngle(), output);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
  if (has_sweepAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sweepAngle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EllipticArc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radiusA(), target);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusB(), target);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 4;
  if (has_startAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->startAngle(), target);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
  if (has_sweepAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sweepAngle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EllipticArc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radiusA = 2;
    if (has_radiusA()) {
      total_size += 1 + 8;
    }

    // required double radiusB = 3;
    if (has_radiusB()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.Angle startAngle = 4;
    if (has_startAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startAngle());
    }

    // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
    if (has_sweepAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepAngle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EllipticArc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EllipticArc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EllipticArc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EllipticArc::MergeFrom(const EllipticArc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radiusA()) {
      set_radiusA(from.radiusA());
    }
    if (from.has_radiusB()) {
      set_radiusB(from.radiusB());
    }
    if (from.has_startAngle()) {
      mutable_startAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.startAngle());
    }
    if (from.has_sweepAngle()) {
      mutable_sweepAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.sweepAngle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EllipticArc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EllipticArc::CopyFrom(const EllipticArc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EllipticArc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  if (has_startAngle()) {
    if (!this->startAngle().IsInitialized()) return false;
  }
  if (has_sweepAngle()) {
    if (!this->sweepAngle().IsInitialized()) return false;
  }
  return true;
}

void EllipticArc::Swap(EllipticArc* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radiusA_, other->radiusA_);
    std::swap(radiusB_, other->radiusB_);
    std::swap(startAngle_, other->startAngle_);
    std::swap(sweepAngle_, other->sweepAngle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EllipticArc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EllipticArc_descriptor_;
  metadata.reflection = EllipticArc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EllipticDisk::kPlacementFieldNumber;
const int EllipticDisk::kRadiusAFieldNumber;
const int EllipticDisk::kRadiusBFieldNumber;
#endif  // !_MSC_VER

EllipticDisk::EllipticDisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EllipticDisk::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

EllipticDisk::EllipticDisk(const EllipticDisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EllipticDisk::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radiusA_ = 0;
  radiusB_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EllipticDisk::~EllipticDisk() {
  SharedDtor();
}

void EllipticDisk::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
  }
}

void EllipticDisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EllipticDisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EllipticDisk_descriptor_;
}

const EllipticDisk& EllipticDisk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

EllipticDisk* EllipticDisk::default_instance_ = NULL;

EllipticDisk* EllipticDisk::New() const {
  return new EllipticDisk;
}

void EllipticDisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radiusA_ = 0;
    radiusB_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EllipticDisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radiusA;
        break;
      }

      // required double radiusA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusA_)));
          set_has_radiusA();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusB;
        break;
      }

      // required double radiusB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusB_)));
          set_has_radiusB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EllipticDisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radiusA(), output);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusB(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EllipticDisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radiusA(), target);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusB(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EllipticDisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radiusA = 2;
    if (has_radiusA()) {
      total_size += 1 + 8;
    }

    // required double radiusB = 3;
    if (has_radiusB()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EllipticDisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EllipticDisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EllipticDisk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EllipticDisk::MergeFrom(const EllipticDisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radiusA()) {
      set_radiusA(from.radiusA());
    }
    if (from.has_radiusB()) {
      set_radiusB(from.radiusB());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EllipticDisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EllipticDisk::CopyFrom(const EllipticDisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EllipticDisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void EllipticDisk::Swap(EllipticDisk* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radiusA_, other->radiusA_);
    std::swap(radiusB_, other->radiusB_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EllipticDisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EllipticDisk_descriptor_;
  metadata.reflection = EllipticDisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexedMesh::kCoordFieldNumber;
const int IndexedMesh::kCoordIndexFieldNumber;
const int IndexedMesh::kParamFieldNumber;
const int IndexedMesh::kParamIndexFieldNumber;
const int IndexedMesh::kNormalFieldNumber;
const int IndexedMesh::kNormalIndexFieldNumber;
const int IndexedMesh::kColorFieldNumber;
const int IndexedMesh::kColorIndexFieldNumber;
#endif  // !_MSC_VER

IndexedMesh::IndexedMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexedMesh::InitAsDefaultInstance() {
}

IndexedMesh::IndexedMesh(const IndexedMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexedMesh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexedMesh::~IndexedMesh() {
  SharedDtor();
}

void IndexedMesh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexedMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexedMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexedMesh_descriptor_;
}

const IndexedMesh& IndexedMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

IndexedMesh* IndexedMesh::default_instance_ = NULL;

IndexedMesh* IndexedMesh::New() const {
  return new IndexedMesh;
}

void IndexedMesh::Clear() {
  Coord_.Clear();
  CoordIndex_.Clear();
  Param_.Clear();
  ParamIndex_.Clear();
  Normal_.Clear();
  NormalIndex_.Clear();
  Color_.Clear();
  ColorIndex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexedMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.DPoint3d Coord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Coord;
        if (input->ExpectTag(16)) goto parse_CoordIndex;
        break;
      }

      // repeated int32 CoordIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoordIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_CoordIndex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_CoordIndex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CoordIndex;
        if (input->ExpectTag(26)) goto parse_Param;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DPoint2d Param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Param;
        if (input->ExpectTag(32)) goto parse_ParamIndex;
        break;
      }

      // repeated int32 ParamIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParamIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ParamIndex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ParamIndex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ParamIndex;
        if (input->ExpectTag(42)) goto parse_Normal;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DVector3d Normal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Normal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Normal;
        if (input->ExpectTag(48)) goto parse_NormalIndex;
        break;
      }

      // repeated int32 NormalIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NormalIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_NormalIndex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_NormalIndex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NormalIndex;
        if (input->ExpectTag(58)) goto parse_Color;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DVector3d Color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Color;
        if (input->ExpectTag(64)) goto parse_ColorIndex;
        break;
      }

      // repeated int32 ColorIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ColorIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_ColorIndex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ColorIndex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ColorIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndexedMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Coord = 1;
  for (int i = 0; i < this->Coord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Coord(i), output);
  }

  // repeated int32 CoordIndex = 2;
  for (int i = 0; i < this->CoordIndex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->CoordIndex(i), output);
  }

  // repeated .Bentley.Geometry.Proto.DPoint2d Param = 3;
  for (int i = 0; i < this->Param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->Param(i), output);
  }

  // repeated int32 ParamIndex = 4;
  for (int i = 0; i < this->ParamIndex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ParamIndex(i), output);
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Normal = 5;
  for (int i = 0; i < this->Normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->Normal(i), output);
  }

  // repeated int32 NormalIndex = 6;
  for (int i = 0; i < this->NormalIndex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->NormalIndex(i), output);
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Color = 7;
  for (int i = 0; i < this->Color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->Color(i), output);
  }

  // repeated int32 ColorIndex = 8;
  for (int i = 0; i < this->ColorIndex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->ColorIndex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexedMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Coord = 1;
  for (int i = 0; i < this->Coord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Coord(i), target);
  }

  // repeated int32 CoordIndex = 2;
  for (int i = 0; i < this->CoordIndex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->CoordIndex(i), target);
  }

  // repeated .Bentley.Geometry.Proto.DPoint2d Param = 3;
  for (int i = 0; i < this->Param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->Param(i), target);
  }

  // repeated int32 ParamIndex = 4;
  for (int i = 0; i < this->ParamIndex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->ParamIndex(i), target);
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Normal = 5;
  for (int i = 0; i < this->Normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->Normal(i), target);
  }

  // repeated int32 NormalIndex = 6;
  for (int i = 0; i < this->NormalIndex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->NormalIndex(i), target);
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Color = 7;
  for (int i = 0; i < this->Color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->Color(i), target);
  }

  // repeated int32 ColorIndex = 8;
  for (int i = 0; i < this->ColorIndex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->ColorIndex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexedMesh::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.DPoint3d Coord = 1;
  total_size += 1 * this->Coord_size();
  for (int i = 0; i < this->Coord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Coord(i));
  }

  // repeated int32 CoordIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->CoordIndex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->CoordIndex(i));
    }
    total_size += 1 * this->CoordIndex_size() + data_size;
  }

  // repeated .Bentley.Geometry.Proto.DPoint2d Param = 3;
  total_size += 1 * this->Param_size();
  for (int i = 0; i < this->Param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Param(i));
  }

  // repeated int32 ParamIndex = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ParamIndex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ParamIndex(i));
    }
    total_size += 1 * this->ParamIndex_size() + data_size;
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Normal = 5;
  total_size += 1 * this->Normal_size();
  for (int i = 0; i < this->Normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Normal(i));
  }

  // repeated int32 NormalIndex = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->NormalIndex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->NormalIndex(i));
    }
    total_size += 1 * this->NormalIndex_size() + data_size;
  }

  // repeated .Bentley.Geometry.Proto.DVector3d Color = 7;
  total_size += 1 * this->Color_size();
  for (int i = 0; i < this->Color_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Color(i));
  }

  // repeated int32 ColorIndex = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ColorIndex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ColorIndex(i));
    }
    total_size += 1 * this->ColorIndex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexedMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexedMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexedMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexedMesh::MergeFrom(const IndexedMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  Coord_.MergeFrom(from.Coord_);
  CoordIndex_.MergeFrom(from.CoordIndex_);
  Param_.MergeFrom(from.Param_);
  ParamIndex_.MergeFrom(from.ParamIndex_);
  Normal_.MergeFrom(from.Normal_);
  NormalIndex_.MergeFrom(from.NormalIndex_);
  Color_.MergeFrom(from.Color_);
  ColorIndex_.MergeFrom(from.ColorIndex_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexedMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedMesh::CopyFrom(const IndexedMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedMesh::IsInitialized() const {

  for (int i = 0; i < Coord_size(); i++) {
    if (!this->Coord(i).IsInitialized()) return false;
  }
  for (int i = 0; i < Param_size(); i++) {
    if (!this->Param(i).IsInitialized()) return false;
  }
  for (int i = 0; i < Normal_size(); i++) {
    if (!this->Normal(i).IsInitialized()) return false;
  }
  for (int i = 0; i < Color_size(); i++) {
    if (!this->Color(i).IsInitialized()) return false;
  }
  return true;
}

void IndexedMesh::Swap(IndexedMesh* other) {
  if (other != this) {
    Coord_.Swap(&other->Coord_);
    CoordIndex_.Swap(&other->CoordIndex_);
    Param_.Swap(&other->Param_);
    ParamIndex_.Swap(&other->ParamIndex_);
    Normal_.Swap(&other->Normal_);
    NormalIndex_.Swap(&other->NormalIndex_);
    Color_.Swap(&other->Color_);
    ColorIndex_.Swap(&other->ColorIndex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexedMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexedMesh_descriptor_;
  metadata.reflection = IndexedMesh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InterpolatingCurve::kEndConditionCodeFieldNumber;
const int InterpolatingCurve::kKnotCodeFieldNumber;
const int InterpolatingCurve::kStartVectorFieldNumber;
const int InterpolatingCurve::kEndVectorFieldNumber;
const int InterpolatingCurve::kPointFieldNumber;
const int InterpolatingCurve::kKnotFieldNumber;
#endif  // !_MSC_VER

InterpolatingCurve::InterpolatingCurve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterpolatingCurve::InitAsDefaultInstance() {
  StartVector_ = const_cast< ::Bentley::Geometry::Proto::DVector3d*>(&::Bentley::Geometry::Proto::DVector3d::default_instance());
  EndVector_ = const_cast< ::Bentley::Geometry::Proto::DVector3d*>(&::Bentley::Geometry::Proto::DVector3d::default_instance());
}

InterpolatingCurve::InterpolatingCurve(const InterpolatingCurve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterpolatingCurve::SharedCtor() {
  _cached_size_ = 0;
  EndConditionCode_ = 0;
  KnotCode_ = 0;
  StartVector_ = NULL;
  EndVector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterpolatingCurve::~InterpolatingCurve() {
  SharedDtor();
}

void InterpolatingCurve::SharedDtor() {
  if (this != default_instance_) {
    delete StartVector_;
    delete EndVector_;
  }
}

void InterpolatingCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterpolatingCurve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterpolatingCurve_descriptor_;
}

const InterpolatingCurve& InterpolatingCurve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

InterpolatingCurve* InterpolatingCurve::default_instance_ = NULL;

InterpolatingCurve* InterpolatingCurve::New() const {
  return new InterpolatingCurve;
}

void InterpolatingCurve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    EndConditionCode_ = 0;
    KnotCode_ = 0;
    if (has_StartVector()) {
      if (StartVector_ != NULL) StartVector_->::Bentley::Geometry::Proto::DVector3d::Clear();
    }
    if (has_EndVector()) {
      if (EndVector_ != NULL) EndVector_->::Bentley::Geometry::Proto::DVector3d::Clear();
    }
  }
  Point_.Clear();
  Knot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterpolatingCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 EndConditionCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &EndConditionCode_)));
          set_has_EndConditionCode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KnotCode;
        break;
      }

      // required int32 KnotCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KnotCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &KnotCode_)));
          set_has_KnotCode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StartVector;
        break;
      }

      // required .Bentley.Geometry.Proto.DVector3d StartVector = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartVector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_StartVector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EndVector;
        break;
      }

      // required .Bentley.Geometry.Proto.DVector3d EndVector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndVector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_EndVector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Point;
        break;
      }

      // repeated .Bentley.Geometry.Proto.DPoint3d Point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Point;
        if (input->ExpectTag(49)) goto parse_Knot;
        break;
      }

      // repeated double Knot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Knot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_Knot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_Knot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Knot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterpolatingCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 EndConditionCode = 1;
  if (has_EndConditionCode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->EndConditionCode(), output);
  }

  // required int32 KnotCode = 2;
  if (has_KnotCode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->KnotCode(), output);
  }

  // required .Bentley.Geometry.Proto.DVector3d StartVector = 3;
  if (has_StartVector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->StartVector(), output);
  }

  // required .Bentley.Geometry.Proto.DVector3d EndVector = 4;
  if (has_EndVector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->EndVector(), output);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 5;
  for (int i = 0; i < this->Point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->Point(i), output);
  }

  // repeated double Knot = 6;
  for (int i = 0; i < this->Knot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->Knot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterpolatingCurve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 EndConditionCode = 1;
  if (has_EndConditionCode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->EndConditionCode(), target);
  }

  // required int32 KnotCode = 2;
  if (has_KnotCode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->KnotCode(), target);
  }

  // required .Bentley.Geometry.Proto.DVector3d StartVector = 3;
  if (has_StartVector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->StartVector(), target);
  }

  // required .Bentley.Geometry.Proto.DVector3d EndVector = 4;
  if (has_EndVector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->EndVector(), target);
  }

  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 5;
  for (int i = 0; i < this->Point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->Point(i), target);
  }

  // repeated double Knot = 6;
  for (int i = 0; i < this->Knot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->Knot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterpolatingCurve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 EndConditionCode = 1;
    if (has_EndConditionCode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->EndConditionCode());
    }

    // required int32 KnotCode = 2;
    if (has_KnotCode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->KnotCode());
    }

    // required .Bentley.Geometry.Proto.DVector3d StartVector = 3;
    if (has_StartVector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->StartVector());
    }

    // required .Bentley.Geometry.Proto.DVector3d EndVector = 4;
    if (has_EndVector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->EndVector());
    }

  }
  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 5;
  total_size += 1 * this->Point_size();
  for (int i = 0; i < this->Point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Point(i));
  }

  // repeated double Knot = 6;
  {
    int data_size = 0;
    data_size = 8 * this->Knot_size();
    total_size += 1 * this->Knot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterpolatingCurve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterpolatingCurve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterpolatingCurve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterpolatingCurve::MergeFrom(const InterpolatingCurve& from) {
  GOOGLE_CHECK_NE(&from, this);
  Point_.MergeFrom(from.Point_);
  Knot_.MergeFrom(from.Knot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_EndConditionCode()) {
      set_EndConditionCode(from.EndConditionCode());
    }
    if (from.has_KnotCode()) {
      set_KnotCode(from.KnotCode());
    }
    if (from.has_StartVector()) {
      mutable_StartVector()->::Bentley::Geometry::Proto::DVector3d::MergeFrom(from.StartVector());
    }
    if (from.has_EndVector()) {
      mutable_EndVector()->::Bentley::Geometry::Proto::DVector3d::MergeFrom(from.EndVector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterpolatingCurve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterpolatingCurve::CopyFrom(const InterpolatingCurve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterpolatingCurve::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_StartVector()) {
    if (!this->StartVector().IsInitialized()) return false;
  }
  if (has_EndVector()) {
    if (!this->EndVector().IsInitialized()) return false;
  }
  for (int i = 0; i < Point_size(); i++) {
    if (!this->Point(i).IsInitialized()) return false;
  }
  return true;
}

void InterpolatingCurve::Swap(InterpolatingCurve* other) {
  if (other != this) {
    std::swap(EndConditionCode_, other->EndConditionCode_);
    std::swap(KnotCode_, other->KnotCode_);
    std::swap(StartVector_, other->StartVector_);
    std::swap(EndVector_, other->EndVector_);
    Point_.Swap(&other->Point_);
    Knot_.Swap(&other->Knot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterpolatingCurve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterpolatingCurve_descriptor_;
  metadata.reflection = InterpolatingCurve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineSegment::kStartPointFieldNumber;
const int LineSegment::kEndPointFieldNumber;
#endif  // !_MSC_VER

LineSegment::LineSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineSegment::InitAsDefaultInstance() {
  startPoint_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  endPoint_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
}

LineSegment::LineSegment(const LineSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineSegment::SharedCtor() {
  _cached_size_ = 0;
  startPoint_ = NULL;
  endPoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSegment::~LineSegment() {
  SharedDtor();
}

void LineSegment::SharedDtor() {
  if (this != default_instance_) {
    delete startPoint_;
    delete endPoint_;
  }
}

void LineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSegment_descriptor_;
}

const LineSegment& LineSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

LineSegment* LineSegment::default_instance_ = NULL;

LineSegment* LineSegment::New() const {
  return new LineSegment;
}

void LineSegment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startPoint()) {
      if (startPoint_ != NULL) startPoint_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_endPoint()) {
      if (endPoint_ != NULL) endPoint_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.DPoint3d startPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endPoint;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d endPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.DPoint3d startPoint = 1;
  if (has_startPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startPoint(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d endPoint = 2;
  if (has_endPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endPoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.DPoint3d startPoint = 1;
  if (has_startPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startPoint(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d endPoint = 2;
  if (has_endPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endPoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineSegment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.DPoint3d startPoint = 1;
    if (has_startPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startPoint());
    }

    // required .Bentley.Geometry.Proto.DPoint3d endPoint = 2;
    if (has_endPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endPoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineSegment::MergeFrom(const LineSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startPoint()) {
      mutable_startPoint()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.startPoint());
    }
    if (from.has_endPoint()) {
      mutable_endPoint()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.endPoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSegment::CopyFrom(const LineSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_startPoint()) {
    if (!this->startPoint().IsInitialized()) return false;
  }
  if (has_endPoint()) {
    if (!this->endPoint().IsInitialized()) return false;
  }
  return true;
}

void LineSegment::Swap(LineSegment* other) {
  if (other != this) {
    std::swap(startPoint_, other->startPoint_);
    std::swap(endPoint_, other->endPoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSegment_descriptor_;
  metadata.reflection = LineSegment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineString::kPointFieldNumber;
#endif  // !_MSC_VER

LineString::LineString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineString::InitAsDefaultInstance() {
}

LineString::LineString(const LineString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineString::~LineString() {
  SharedDtor();
}

void LineString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineString_descriptor_;
}

const LineString& LineString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

LineString* LineString::default_instance_ = NULL;

LineString* LineString::New() const {
  return new LineString;
}

void LineString::Clear() {
  Point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineString::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  total_size += 1 * this->Point_size();
  for (int i = 0; i < this->Point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineString::MergeFrom(const LineString& from) {
  GOOGLE_CHECK_NE(&from, this);
  Point_.MergeFrom(from.Point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineString::CopyFrom(const LineString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString::IsInitialized() const {

  for (int i = 0; i < Point_size(); i++) {
    if (!this->Point(i).IsInitialized()) return false;
  }
  return true;
}

void LineString::Swap(LineString* other) {
  if (other != this) {
    Point_.Swap(&other->Point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineString_descriptor_;
  metadata.reflection = LineString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Polygon::kPointFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New() const {
  return new Polygon;
}

void Polygon::Clear() {
  Point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Polygon::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.DPoint3d Point = 1;
  total_size += 1 * this->Point_size();
  for (int i = 0; i < this->Point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  Point_.MergeFrom(from.Point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  for (int i = 0; i < Point_size(); i++) {
    if (!this->Point(i).IsInitialized()) return false;
  }
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other != this) {
    Point_.Swap(&other->Point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrimitiveCurveReference::kParentCurveFieldNumber;
const int PrimitiveCurveReference::kReversedFieldNumber;
#endif  // !_MSC_VER

PrimitiveCurveReference::PrimitiveCurveReference()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrimitiveCurveReference::InitAsDefaultInstance() {
  ParentCurve_ = const_cast< ::Bentley::Geometry::Proto::IPrimitiveCurve*>(&::Bentley::Geometry::Proto::IPrimitiveCurve::default_instance());
}

PrimitiveCurveReference::PrimitiveCurveReference(const PrimitiveCurveReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrimitiveCurveReference::SharedCtor() {
  _cached_size_ = 0;
  ParentCurve_ = NULL;
  Reversed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimitiveCurveReference::~PrimitiveCurveReference() {
  SharedDtor();
}

void PrimitiveCurveReference::SharedDtor() {
  if (this != default_instance_) {
    delete ParentCurve_;
  }
}

void PrimitiveCurveReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveCurveReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveCurveReference_descriptor_;
}

const PrimitiveCurveReference& PrimitiveCurveReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

PrimitiveCurveReference* PrimitiveCurveReference::default_instance_ = NULL;

PrimitiveCurveReference* PrimitiveCurveReference::New() const {
  return new PrimitiveCurveReference;
}

void PrimitiveCurveReference::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ParentCurve()) {
      if (ParentCurve_ != NULL) ParentCurve_->::Bentley::Geometry::Proto::IPrimitiveCurve::Clear();
    }
    Reversed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimitiveCurveReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPrimitiveCurve ParentCurve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ParentCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reversed;
        break;
      }

      // required bool Reversed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reversed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Reversed_)));
          set_has_Reversed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrimitiveCurveReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPrimitiveCurve ParentCurve = 1;
  if (has_ParentCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ParentCurve(), output);
  }

  // required bool Reversed = 2;
  if (has_Reversed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->Reversed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrimitiveCurveReference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPrimitiveCurve ParentCurve = 1;
  if (has_ParentCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ParentCurve(), target);
  }

  // required bool Reversed = 2;
  if (has_Reversed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->Reversed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrimitiveCurveReference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPrimitiveCurve ParentCurve = 1;
    if (has_ParentCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ParentCurve());
    }

    // required bool Reversed = 2;
    if (has_Reversed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveCurveReference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimitiveCurveReference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimitiveCurveReference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimitiveCurveReference::MergeFrom(const PrimitiveCurveReference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ParentCurve()) {
      mutable_ParentCurve()->::Bentley::Geometry::Proto::IPrimitiveCurve::MergeFrom(from.ParentCurve());
    }
    if (from.has_Reversed()) {
      set_Reversed(from.Reversed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimitiveCurveReference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveCurveReference::CopyFrom(const PrimitiveCurveReference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveCurveReference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ParentCurve()) {
    if (!this->ParentCurve().IsInitialized()) return false;
  }
  return true;
}

void PrimitiveCurveReference::Swap(PrimitiveCurveReference* other) {
  if (other != this) {
    std::swap(ParentCurve_, other->ParentCurve_);
    std::swap(Reversed_, other->Reversed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimitiveCurveReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimitiveCurveReference_descriptor_;
  metadata.reflection = PrimitiveCurveReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedGroupInstance::kSharedGroupNameFieldNumber;
const int SharedGroupInstance::kTransformFieldNumber;
#endif  // !_MSC_VER

SharedGroupInstance::SharedGroupInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedGroupInstance::InitAsDefaultInstance() {
  Transform_ = const_cast< ::Bentley::Geometry::Proto::DTransform3d*>(&::Bentley::Geometry::Proto::DTransform3d::default_instance());
}

SharedGroupInstance::SharedGroupInstance(const SharedGroupInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedGroupInstance::SharedCtor() {
  _cached_size_ = 0;
  SharedGroupName_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  Transform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedGroupInstance::~SharedGroupInstance() {
  SharedDtor();
}

void SharedGroupInstance::SharedDtor() {
  if (SharedGroupName_ != &::google::protobuf::internal::kEmptyString) {
    delete SharedGroupName_;
  }
  if (this != default_instance_) {
    delete Transform_;
  }
}

void SharedGroupInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedGroupInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedGroupInstance_descriptor_;
}

const SharedGroupInstance& SharedGroupInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SharedGroupInstance* SharedGroupInstance::default_instance_ = NULL;

SharedGroupInstance* SharedGroupInstance::New() const {
  return new SharedGroupInstance;
}

void SharedGroupInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_SharedGroupName()) {
      if (SharedGroupName_ != &::google::protobuf::internal::kEmptyString) {
        SharedGroupName_->clear();
      }
    }
    if (has_Transform()) {
      if (Transform_ != NULL) Transform_->::Bentley::Geometry::Proto::DTransform3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedGroupInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SharedGroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_SharedGroupName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->SharedGroupName().data(), (int)this->SharedGroupName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Transform;
        break;
      }

      // required .Bentley.Geometry.Proto.DTransform3d Transform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedGroupInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SharedGroupName = 1;
  if (has_SharedGroupName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SharedGroupName().data(), (int)this->SharedGroupName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->SharedGroupName(), output);
  }

  // required .Bentley.Geometry.Proto.DTransform3d Transform = 2;
  if (has_Transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->Transform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedGroupInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SharedGroupName = 1;
  if (has_SharedGroupName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SharedGroupName().data(), (int)this->SharedGroupName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->SharedGroupName(), target);
  }

  // required .Bentley.Geometry.Proto.DTransform3d Transform = 2;
  if (has_Transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->Transform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedGroupInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SharedGroupName = 1;
    if (has_SharedGroupName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->SharedGroupName());
    }

    // required .Bentley.Geometry.Proto.DTransform3d Transform = 2;
    if (has_Transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Transform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedGroupInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedGroupInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedGroupInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedGroupInstance::MergeFrom(const SharedGroupInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_SharedGroupName()) {
      set_SharedGroupName(from.SharedGroupName());
    }
    if (from.has_Transform()) {
      mutable_Transform()->::Bentley::Geometry::Proto::DTransform3d::MergeFrom(from.Transform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedGroupInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedGroupInstance::CopyFrom(const SharedGroupInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedGroupInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_Transform()) {
    if (!this->Transform().IsInitialized()) return false;
  }
  return true;
}

void SharedGroupInstance::Swap(SharedGroupInstance* other) {
  if (other != this) {
    std::swap(SharedGroupName_, other->SharedGroupName_);
    std::swap(Transform_, other->Transform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedGroupInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedGroupInstance_descriptor_;
  metadata.reflection = SharedGroupInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShelledSolid::kBoundingSurfaceFieldNumber;
#endif  // !_MSC_VER

ShelledSolid::ShelledSolid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShelledSolid::InitAsDefaultInstance() {
  BoundingSurface_ = const_cast< ::Bentley::Geometry::Proto::ISurface*>(&::Bentley::Geometry::Proto::ISurface::default_instance());
}

ShelledSolid::ShelledSolid(const ShelledSolid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShelledSolid::SharedCtor() {
  _cached_size_ = 0;
  BoundingSurface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShelledSolid::~ShelledSolid() {
  SharedDtor();
}

void ShelledSolid::SharedDtor() {
  if (this != default_instance_) {
    delete BoundingSurface_;
  }
}

void ShelledSolid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShelledSolid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShelledSolid_descriptor_;
}

const ShelledSolid& ShelledSolid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ShelledSolid* ShelledSolid::default_instance_ = NULL;

ShelledSolid* ShelledSolid::New() const {
  return new ShelledSolid;
}

void ShelledSolid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_BoundingSurface()) {
      if (BoundingSurface_ != NULL) BoundingSurface_->::Bentley::Geometry::Proto::ISurface::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShelledSolid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.ISurface BoundingSurface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_BoundingSurface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShelledSolid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.ISurface BoundingSurface = 1;
  if (has_BoundingSurface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->BoundingSurface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShelledSolid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.ISurface BoundingSurface = 1;
  if (has_BoundingSurface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->BoundingSurface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShelledSolid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.ISurface BoundingSurface = 1;
    if (has_BoundingSurface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->BoundingSurface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShelledSolid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShelledSolid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShelledSolid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShelledSolid::MergeFrom(const ShelledSolid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_BoundingSurface()) {
      mutable_BoundingSurface()->::Bentley::Geometry::Proto::ISurface::MergeFrom(from.BoundingSurface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShelledSolid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShelledSolid::CopyFrom(const ShelledSolid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShelledSolid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_BoundingSurface()) {
    if (!this->BoundingSurface().IsInitialized()) return false;
  }
  return true;
}

void ShelledSolid::Swap(ShelledSolid* other) {
  if (other != this) {
    std::swap(BoundingSurface_, other->BoundingSurface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShelledSolid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShelledSolid_descriptor_;
  metadata.reflection = ShelledSolid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleLineText::kPlacementFieldNumber;
const int SingleLineText::kTextStringFieldNumber;
const int SingleLineText::kFontNameFieldNumber;
const int SingleLineText::kCharacterXSizeFieldNumber;
const int SingleLineText::kCharacterYSizeFieldNumber;
const int SingleLineText::kJustificationFieldNumber;
#endif  // !_MSC_VER

SingleLineText::SingleLineText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleLineText::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

SingleLineText::SingleLineText(const SingleLineText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleLineText::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  textString_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  fontName_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  characterXSize_ = 0;
  characterYSize_ = 0;
  justification_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleLineText::~SingleLineText() {
  SharedDtor();
}

void SingleLineText::SharedDtor() {
  if (textString_ != &::google::protobuf::internal::kEmptyString) {
    delete textString_;
  }
  if (fontName_ != &::google::protobuf::internal::kEmptyString) {
    delete fontName_;
  }
  if (this != default_instance_) {
    delete placement_;
  }
}

void SingleLineText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleLineText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleLineText_descriptor_;
}

const SingleLineText& SingleLineText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SingleLineText* SingleLineText::default_instance_ = NULL;

SingleLineText* SingleLineText::New() const {
  return new SingleLineText;
}

void SingleLineText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    if (has_textString()) {
      if (textString_ != &::google::protobuf::internal::kEmptyString) {
        textString_->clear();
      }
    }
    if (has_fontName()) {
      if (fontName_ != &::google::protobuf::internal::kEmptyString) {
        fontName_->clear();
      }
    }
    characterXSize_ = 0;
    characterYSize_ = 0;
    justification_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleLineText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_textString;
        break;
      }

      // required string textString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textString()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textString().data(), (int)this->textString().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fontName;
        break;
      }

      // required string fontName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fontName().data(), (int)this->fontName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_characterXSize;
        break;
      }

      // required double characterXSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_characterXSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &characterXSize_)));
          set_has_characterXSize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_characterYSize;
        break;
      }

      // required double characterYSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_characterYSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &characterYSize_)));
          set_has_characterYSize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_justification;
        break;
      }

      // required int32 justification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_justification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &justification_)));
          set_has_justification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleLineText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required string textString = 2;
  if (has_textString()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textString().data(), (int)this->textString().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->textString(), output);
  }

  // required string fontName = 3;
  if (has_fontName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontName().data(), (int)this->fontName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fontName(), output);
  }

  // required double characterXSize = 4;
  if (has_characterXSize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->characterXSize(), output);
  }

  // required double characterYSize = 5;
  if (has_characterYSize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->characterYSize(), output);
  }

  // required int32 justification = 6;
  if (has_justification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->justification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleLineText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required string textString = 2;
  if (has_textString()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textString().data(), (int)this->textString().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->textString(), target);
  }

  // required string fontName = 3;
  if (has_fontName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontName().data(), (int)this->fontName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fontName(), target);
  }

  // required double characterXSize = 4;
  if (has_characterXSize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->characterXSize(), target);
  }

  // required double characterYSize = 5;
  if (has_characterYSize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->characterYSize(), target);
  }

  // required int32 justification = 6;
  if (has_justification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->justification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleLineText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required string textString = 2;
    if (has_textString()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textString());
    }

    // required string fontName = 3;
    if (has_fontName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontName());
    }

    // required double characterXSize = 4;
    if (has_characterXSize()) {
      total_size += 1 + 8;
    }

    // required double characterYSize = 5;
    if (has_characterYSize()) {
      total_size += 1 + 8;
    }

    // required int32 justification = 6;
    if (has_justification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->justification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleLineText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleLineText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleLineText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleLineText::MergeFrom(const SingleLineText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_textString()) {
      set_textString(from.textString());
    }
    if (from.has_fontName()) {
      set_fontName(from.fontName());
    }
    if (from.has_characterXSize()) {
      set_characterXSize(from.characterXSize());
    }
    if (from.has_characterYSize()) {
      set_characterYSize(from.characterYSize());
    }
    if (from.has_justification()) {
      set_justification(from.justification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleLineText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLineText::CopyFrom(const SingleLineText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLineText::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void SingleLineText::Swap(SingleLineText* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(textString_, other->textString_);
    std::swap(fontName_, other->fontName_);
    std::swap(characterXSize_, other->characterXSize_);
    std::swap(characterYSize_, other->characterYSize_);
    std::swap(justification_, other->justification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleLineText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleLineText_descriptor_;
  metadata.reflection = SingleLineText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkewedCone::kPlacementFieldNumber;
const int SkewedCone::kCenterBFieldNumber;
const int SkewedCone::kRadiusAFieldNumber;
const int SkewedCone::kRadiusBFieldNumber;
const int SkewedCone::kBSolidFlagFieldNumber;
#endif  // !_MSC_VER

SkewedCone::SkewedCone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkewedCone::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  centerB_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
}

SkewedCone::SkewedCone(const SkewedCone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkewedCone::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  centerB_ = NULL;
  radiusA_ = 0;
  radiusB_ = 0;
  bSolidFlag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkewedCone::~SkewedCone() {
  SharedDtor();
}

void SkewedCone::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
    delete centerB_;
  }
}

void SkewedCone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkewedCone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkewedCone_descriptor_;
}

const SkewedCone& SkewedCone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SkewedCone* SkewedCone::default_instance_ = NULL;

SkewedCone* SkewedCone::New() const {
  return new SkewedCone;
}

void SkewedCone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    if (has_centerB()) {
      if (centerB_ != NULL) centerB_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    radiusA_ = 0;
    radiusB_ = 0;
    bSolidFlag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkewedCone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_centerB;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d centerB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_centerB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerB()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusA;
        break;
      }

      // required double radiusA = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusA_)));
          set_has_radiusA();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_radiusB;
        break;
      }

      // required double radiusB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusB_)));
          set_has_radiusB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bSolidFlag;
        break;
      }

      // required bool bSolidFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSolidFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bSolidFlag_)));
          set_has_bSolidFlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkewedCone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d centerB = 2;
  if (has_centerB()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->centerB(), output);
  }

  // required double radiusA = 3;
  if (has_radiusA()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusA(), output);
  }

  // required double radiusB = 4;
  if (has_radiusB()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radiusB(), output);
  }

  // required bool bSolidFlag = 5;
  if (has_bSolidFlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bSolidFlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkewedCone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d centerB = 2;
  if (has_centerB()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->centerB(), target);
  }

  // required double radiusA = 3;
  if (has_radiusA()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusA(), target);
  }

  // required double radiusB = 4;
  if (has_radiusB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radiusB(), target);
  }

  // required bool bSolidFlag = 5;
  if (has_bSolidFlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bSolidFlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkewedCone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required .Bentley.Geometry.Proto.DPoint3d centerB = 2;
    if (has_centerB()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerB());
    }

    // required double radiusA = 3;
    if (has_radiusA()) {
      total_size += 1 + 8;
    }

    // required double radiusB = 4;
    if (has_radiusB()) {
      total_size += 1 + 8;
    }

    // required bool bSolidFlag = 5;
    if (has_bSolidFlag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkewedCone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkewedCone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkewedCone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkewedCone::MergeFrom(const SkewedCone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_centerB()) {
      mutable_centerB()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.centerB());
    }
    if (from.has_radiusA()) {
      set_radiusA(from.radiusA());
    }
    if (from.has_radiusB()) {
      set_radiusB(from.radiusB());
    }
    if (from.has_bSolidFlag()) {
      set_bSolidFlag(from.bSolidFlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkewedCone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkewedCone::CopyFrom(const SkewedCone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkewedCone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  if (has_centerB()) {
    if (!this->centerB().IsInitialized()) return false;
  }
  return true;
}

void SkewedCone::Swap(SkewedCone* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(centerB_, other->centerB_);
    std::swap(radiusA_, other->radiusA_);
    std::swap(radiusB_, other->radiusB_);
    std::swap(bSolidFlag_, other->bSolidFlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkewedCone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkewedCone_descriptor_;
  metadata.reflection = SkewedCone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolidBySweptSurface::kBaseGeometryFieldNumber;
const int SolidBySweptSurface::kRailCurveFieldNumber;
#endif  // !_MSC_VER

SolidBySweptSurface::SolidBySweptSurface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolidBySweptSurface::InitAsDefaultInstance() {
  BaseGeometry_ = const_cast< ::Bentley::Geometry::Proto::ISurface*>(&::Bentley::Geometry::Proto::ISurface::default_instance());
  RailCurve_ = const_cast< ::Bentley::Geometry::Proto::ICurve*>(&::Bentley::Geometry::Proto::ICurve::default_instance());
}

SolidBySweptSurface::SolidBySweptSurface(const SolidBySweptSurface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolidBySweptSurface::SharedCtor() {
  _cached_size_ = 0;
  BaseGeometry_ = NULL;
  RailCurve_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolidBySweptSurface::~SolidBySweptSurface() {
  SharedDtor();
}

void SolidBySweptSurface::SharedDtor() {
  if (this != default_instance_) {
    delete BaseGeometry_;
    delete RailCurve_;
  }
}

void SolidBySweptSurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolidBySweptSurface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolidBySweptSurface_descriptor_;
}

const SolidBySweptSurface& SolidBySweptSurface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SolidBySweptSurface* SolidBySweptSurface::default_instance_ = NULL;

SolidBySweptSurface* SolidBySweptSurface::New() const {
  return new SolidBySweptSurface;
}

void SolidBySweptSurface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_BaseGeometry()) {
      if (BaseGeometry_ != NULL) BaseGeometry_->::Bentley::Geometry::Proto::ISurface::Clear();
    }
    if (has_RailCurve()) {
      if (RailCurve_ != NULL) RailCurve_->::Bentley::Geometry::Proto::ICurve::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolidBySweptSurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.ISurface BaseGeometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_BaseGeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RailCurve;
        break;
      }

      // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RailCurve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_RailCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolidBySweptSurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.ISurface BaseGeometry = 1;
  if (has_BaseGeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->BaseGeometry(), output);
  }

  // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
  if (has_RailCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->RailCurve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolidBySweptSurface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.ISurface BaseGeometry = 1;
  if (has_BaseGeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->BaseGeometry(), target);
  }

  // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
  if (has_RailCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->RailCurve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolidBySweptSurface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.ISurface BaseGeometry = 1;
    if (has_BaseGeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->BaseGeometry());
    }

    // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
    if (has_RailCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->RailCurve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolidBySweptSurface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolidBySweptSurface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolidBySweptSurface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolidBySweptSurface::MergeFrom(const SolidBySweptSurface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_BaseGeometry()) {
      mutable_BaseGeometry()->::Bentley::Geometry::Proto::ISurface::MergeFrom(from.BaseGeometry());
    }
    if (from.has_RailCurve()) {
      mutable_RailCurve()->::Bentley::Geometry::Proto::ICurve::MergeFrom(from.RailCurve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolidBySweptSurface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolidBySweptSurface::CopyFrom(const SolidBySweptSurface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolidBySweptSurface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_BaseGeometry()) {
    if (!this->BaseGeometry().IsInitialized()) return false;
  }
  if (has_RailCurve()) {
    if (!this->RailCurve().IsInitialized()) return false;
  }
  return true;
}

void SolidBySweptSurface::Swap(SolidBySweptSurface* other) {
  if (other != this) {
    std::swap(BaseGeometry_, other->BaseGeometry_);
    std::swap(RailCurve_, other->RailCurve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolidBySweptSurface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolidBySweptSurface_descriptor_;
  metadata.reflection = SolidBySweptSurface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sphere::kPlacementFieldNumber;
const int Sphere::kRadiusFieldNumber;
#endif  // !_MSC_VER

Sphere::Sphere()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sphere::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
}

Sphere::Sphere(const Sphere& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sphere::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sphere::~Sphere() {
  SharedDtor();
}

void Sphere::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
  }
}

void Sphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sphere_descriptor_;
}

const Sphere& Sphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Sphere* Sphere::default_instance_ = NULL;

Sphere* Sphere::New() const {
  return new Sphere;
}

void Sphere::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }

      // required double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sphere::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sphere::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sphere::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sphere* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sphere*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sphere::MergeFrom(const Sphere& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sphere::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sphere::CopyFrom(const Sphere& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sphere::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  return true;
}

void Sphere::Swap(Sphere* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sphere_descriptor_;
  metadata.reflection = Sphere_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spiral::kSpiralTypeFieldNumber;
const int Spiral::kStartPointFieldNumber;
const int Spiral::kStartBearingFieldNumber;
const int Spiral::kStartCurvatureFieldNumber;
const int Spiral::kEndPointFieldNumber;
const int Spiral::kEndBearingFieldNumber;
const int Spiral::kEndCurvatureFieldNumber;
const int Spiral::kGeometryFieldNumber;
#endif  // !_MSC_VER

Spiral::Spiral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spiral::InitAsDefaultInstance() {
  StartPoint_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  StartBearing_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  EndPoint_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  EndBearing_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  Geometry_ = const_cast< ::Bentley::Geometry::Proto::IGeometry*>(&::Bentley::Geometry::Proto::IGeometry::default_instance());
}

Spiral::Spiral(const Spiral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spiral::SharedCtor() {
  _cached_size_ = 0;
  SpiralType_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  StartPoint_ = NULL;
  StartBearing_ = NULL;
  StartCurvature_ = 0;
  EndPoint_ = NULL;
  EndBearing_ = NULL;
  EndCurvature_ = 0;
  Geometry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spiral::~Spiral() {
  SharedDtor();
}

void Spiral::SharedDtor() {
  if (SpiralType_ != &::google::protobuf::internal::kEmptyString) {
    delete SpiralType_;
  }
  if (this != default_instance_) {
    delete StartPoint_;
    delete StartBearing_;
    delete EndPoint_;
    delete EndBearing_;
    delete Geometry_;
  }
}

void Spiral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spiral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spiral_descriptor_;
}

const Spiral& Spiral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Spiral* Spiral::default_instance_ = NULL;

Spiral* Spiral::New() const {
  return new Spiral;
}

void Spiral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_SpiralType()) {
      if (SpiralType_ != &::google::protobuf::internal::kEmptyString) {
        SpiralType_->clear();
      }
    }
    if (has_StartPoint()) {
      if (StartPoint_ != NULL) StartPoint_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_StartBearing()) {
      if (StartBearing_ != NULL) StartBearing_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    StartCurvature_ = 0;
    if (has_EndPoint()) {
      if (EndPoint_ != NULL) EndPoint_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_EndBearing()) {
      if (EndBearing_ != NULL) EndBearing_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    EndCurvature_ = 0;
    if (has_Geometry()) {
      if (Geometry_ != NULL) Geometry_->::Bentley::Geometry::Proto::IGeometry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spiral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SpiralType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_SpiralType()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->SpiralType().data(), (int)this->SpiralType().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StartPoint;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d StartPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_StartPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StartBearing;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartBearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_StartBearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_StartCurvature;
        break;
      }

      // required double StartCurvature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartCurvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &StartCurvature_)));
          set_has_StartCurvature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EndPoint;
        break;
      }

      // required .Bentley.Geometry.Proto.DPoint3d EndPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_EndPoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_EndBearing;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle EndBearing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndBearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_EndBearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_EndCurvature;
        break;
      }

      // required double EndCurvature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EndCurvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &EndCurvature_)));
          set_has_EndCurvature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Geometry;
        break;
      }

      // required .Bentley.Geometry.Proto.IGeometry Geometry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spiral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SpiralType = 1;
  if (has_SpiralType()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SpiralType().data(), (int)this->SpiralType().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->SpiralType(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d StartPoint = 2;
  if (has_StartPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->StartPoint(), output);
  }

  // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
  if (has_StartBearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->StartBearing(), output);
  }

  // required double StartCurvature = 4;
  if (has_StartCurvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->StartCurvature(), output);
  }

  // required .Bentley.Geometry.Proto.DPoint3d EndPoint = 5;
  if (has_EndPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->EndPoint(), output);
  }

  // required .Bentley.Geometry.Proto.Angle EndBearing = 6;
  if (has_EndBearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->EndBearing(), output);
  }

  // required double EndCurvature = 7;
  if (has_EndCurvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->EndCurvature(), output);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 8;
  if (has_Geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->Geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spiral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SpiralType = 1;
  if (has_SpiralType()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SpiralType().data(), (int)this->SpiralType().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->SpiralType(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d StartPoint = 2;
  if (has_StartPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->StartPoint(), target);
  }

  // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
  if (has_StartBearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->StartBearing(), target);
  }

  // required double StartCurvature = 4;
  if (has_StartCurvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->StartCurvature(), target);
  }

  // required .Bentley.Geometry.Proto.DPoint3d EndPoint = 5;
  if (has_EndPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->EndPoint(), target);
  }

  // required .Bentley.Geometry.Proto.Angle EndBearing = 6;
  if (has_EndBearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->EndBearing(), target);
  }

  // required double EndCurvature = 7;
  if (has_EndCurvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->EndCurvature(), target);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 8;
  if (has_Geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->Geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spiral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SpiralType = 1;
    if (has_SpiralType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->SpiralType());
    }

    // required .Bentley.Geometry.Proto.DPoint3d StartPoint = 2;
    if (has_StartPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->StartPoint());
    }

    // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
    if (has_StartBearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->StartBearing());
    }

    // required double StartCurvature = 4;
    if (has_StartCurvature()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.DPoint3d EndPoint = 5;
    if (has_EndPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->EndPoint());
    }

    // required .Bentley.Geometry.Proto.Angle EndBearing = 6;
    if (has_EndBearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->EndBearing());
    }

    // required double EndCurvature = 7;
    if (has_EndCurvature()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.IGeometry Geometry = 8;
    if (has_Geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Geometry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spiral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spiral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spiral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spiral::MergeFrom(const Spiral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_SpiralType()) {
      set_SpiralType(from.SpiralType());
    }
    if (from.has_StartPoint()) {
      mutable_StartPoint()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.StartPoint());
    }
    if (from.has_StartBearing()) {
      mutable_StartBearing()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.StartBearing());
    }
    if (from.has_StartCurvature()) {
      set_StartCurvature(from.StartCurvature());
    }
    if (from.has_EndPoint()) {
      mutable_EndPoint()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.EndPoint());
    }
    if (from.has_EndBearing()) {
      mutable_EndBearing()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.EndBearing());
    }
    if (from.has_EndCurvature()) {
      set_EndCurvature(from.EndCurvature());
    }
    if (from.has_Geometry()) {
      mutable_Geometry()->::Bentley::Geometry::Proto::IGeometry::MergeFrom(from.Geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spiral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spiral::CopyFrom(const Spiral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spiral::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_StartPoint()) {
    if (!this->StartPoint().IsInitialized()) return false;
  }
  if (has_StartBearing()) {
    if (!this->StartBearing().IsInitialized()) return false;
  }
  if (has_EndPoint()) {
    if (!this->EndPoint().IsInitialized()) return false;
  }
  if (has_EndBearing()) {
    if (!this->EndBearing().IsInitialized()) return false;
  }
  if (has_Geometry()) {
    if (!this->Geometry().IsInitialized()) return false;
  }
  return true;
}

void Spiral::Swap(Spiral* other) {
  if (other != this) {
    std::swap(SpiralType_, other->SpiralType_);
    std::swap(StartPoint_, other->StartPoint_);
    std::swap(StartBearing_, other->StartBearing_);
    std::swap(StartCurvature_, other->StartCurvature_);
    std::swap(EndPoint_, other->EndPoint_);
    std::swap(EndBearing_, other->EndBearing_);
    std::swap(EndCurvature_, other->EndCurvature_);
    std::swap(Geometry_, other->Geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spiral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spiral_descriptor_;
  metadata.reflection = Spiral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceBySweptCurve::kBaseGeometryFieldNumber;
const int SurfaceBySweptCurve::kRailCurveFieldNumber;
#endif  // !_MSC_VER

SurfaceBySweptCurve::SurfaceBySweptCurve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SurfaceBySweptCurve::InitAsDefaultInstance() {
  BaseGeometry_ = const_cast< ::Bentley::Geometry::Proto::ICurve*>(&::Bentley::Geometry::Proto::ICurve::default_instance());
  RailCurve_ = const_cast< ::Bentley::Geometry::Proto::ICurve*>(&::Bentley::Geometry::Proto::ICurve::default_instance());
}

SurfaceBySweptCurve::SurfaceBySweptCurve(const SurfaceBySweptCurve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SurfaceBySweptCurve::SharedCtor() {
  _cached_size_ = 0;
  BaseGeometry_ = NULL;
  RailCurve_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfaceBySweptCurve::~SurfaceBySweptCurve() {
  SharedDtor();
}

void SurfaceBySweptCurve::SharedDtor() {
  if (this != default_instance_) {
    delete BaseGeometry_;
    delete RailCurve_;
  }
}

void SurfaceBySweptCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceBySweptCurve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceBySweptCurve_descriptor_;
}

const SurfaceBySweptCurve& SurfaceBySweptCurve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SurfaceBySweptCurve* SurfaceBySweptCurve::default_instance_ = NULL;

SurfaceBySweptCurve* SurfaceBySweptCurve::New() const {
  return new SurfaceBySweptCurve;
}

void SurfaceBySweptCurve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_BaseGeometry()) {
      if (BaseGeometry_ != NULL) BaseGeometry_->::Bentley::Geometry::Proto::ICurve::Clear();
    }
    if (has_RailCurve()) {
      if (RailCurve_ != NULL) RailCurve_->::Bentley::Geometry::Proto::ICurve::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceBySweptCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.ICurve BaseGeometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_BaseGeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RailCurve;
        break;
      }

      // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RailCurve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_RailCurve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SurfaceBySweptCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.ICurve BaseGeometry = 1;
  if (has_BaseGeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->BaseGeometry(), output);
  }

  // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
  if (has_RailCurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->RailCurve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SurfaceBySweptCurve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.ICurve BaseGeometry = 1;
  if (has_BaseGeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->BaseGeometry(), target);
  }

  // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
  if (has_RailCurve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->RailCurve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SurfaceBySweptCurve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.ICurve BaseGeometry = 1;
    if (has_BaseGeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->BaseGeometry());
    }

    // required .Bentley.Geometry.Proto.ICurve RailCurve = 2;
    if (has_RailCurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->RailCurve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceBySweptCurve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceBySweptCurve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceBySweptCurve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceBySweptCurve::MergeFrom(const SurfaceBySweptCurve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_BaseGeometry()) {
      mutable_BaseGeometry()->::Bentley::Geometry::Proto::ICurve::MergeFrom(from.BaseGeometry());
    }
    if (from.has_RailCurve()) {
      mutable_RailCurve()->::Bentley::Geometry::Proto::ICurve::MergeFrom(from.RailCurve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceBySweptCurve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceBySweptCurve::CopyFrom(const SurfaceBySweptCurve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceBySweptCurve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_BaseGeometry()) {
    if (!this->BaseGeometry().IsInitialized()) return false;
  }
  if (has_RailCurve()) {
    if (!this->RailCurve().IsInitialized()) return false;
  }
  return true;
}

void SurfaceBySweptCurve::Swap(SurfaceBySweptCurve* other) {
  if (other != this) {
    std::swap(BaseGeometry_, other->BaseGeometry_);
    std::swap(RailCurve_, other->RailCurve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceBySweptCurve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceBySweptCurve_descriptor_;
  metadata.reflection = SurfaceBySweptCurve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TorusPipe::kPlacementFieldNumber;
const int TorusPipe::kRadiusAFieldNumber;
const int TorusPipe::kRadiusBFieldNumber;
const int TorusPipe::kStartAngleFieldNumber;
const int TorusPipe::kSweepAngleFieldNumber;
const int TorusPipe::kBSolidFlagFieldNumber;
#endif  // !_MSC_VER

TorusPipe::TorusPipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TorusPipe::InitAsDefaultInstance() {
  placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  startAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  sweepAngle_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
}

TorusPipe::TorusPipe(const TorusPipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TorusPipe::SharedCtor() {
  _cached_size_ = 0;
  placement_ = NULL;
  radiusA_ = 0;
  radiusB_ = 0;
  startAngle_ = NULL;
  sweepAngle_ = NULL;
  bSolidFlag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TorusPipe::~TorusPipe() {
  SharedDtor();
}

void TorusPipe::SharedDtor() {
  if (this != default_instance_) {
    delete placement_;
    delete startAngle_;
    delete sweepAngle_;
  }
}

void TorusPipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TorusPipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TorusPipe_descriptor_;
}

const TorusPipe& TorusPipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

TorusPipe* TorusPipe::default_instance_ = NULL;

TorusPipe* TorusPipe::New() const {
  return new TorusPipe;
}

void TorusPipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placement()) {
      if (placement_ != NULL) placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    radiusA_ = 0;
    radiusB_ = 0;
    if (has_startAngle()) {
      if (startAngle_ != NULL) startAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    if (has_sweepAngle()) {
      if (sweepAngle_ != NULL) sweepAngle_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    bSolidFlag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TorusPipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IPlacement placement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radiusA;
        break;
      }

      // required double radiusA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusA_)));
          set_has_radiusA();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusB;
        break;
      }

      // required double radiusB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusB_)));
          set_has_radiusB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_startAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle startAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sweepAngle;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sweepAngle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepAngle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bSolidFlag;
        break;
      }

      // required bool bSolidFlag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSolidFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bSolidFlag_)));
          set_has_bSolidFlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TorusPipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement(), output);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radiusA(), output);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusB(), output);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 4;
  if (has_startAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->startAngle(), output);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
  if (has_sweepAngle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sweepAngle(), output);
  }

  // required bool bSolidFlag = 6;
  if (has_bSolidFlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bSolidFlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TorusPipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IPlacement placement = 1;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->placement(), target);
  }

  // required double radiusA = 2;
  if (has_radiusA()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radiusA(), target);
  }

  // required double radiusB = 3;
  if (has_radiusB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusB(), target);
  }

  // required .Bentley.Geometry.Proto.Angle startAngle = 4;
  if (has_startAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->startAngle(), target);
  }

  // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
  if (has_sweepAngle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sweepAngle(), target);
  }

  // required bool bSolidFlag = 6;
  if (has_bSolidFlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bSolidFlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TorusPipe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IPlacement placement = 1;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement());
    }

    // required double radiusA = 2;
    if (has_radiusA()) {
      total_size += 1 + 8;
    }

    // required double radiusB = 3;
    if (has_radiusB()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.Angle startAngle = 4;
    if (has_startAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startAngle());
    }

    // required .Bentley.Geometry.Proto.Angle sweepAngle = 5;
    if (has_sweepAngle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepAngle());
    }

    // required bool bSolidFlag = 6;
    if (has_bSolidFlag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TorusPipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TorusPipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TorusPipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TorusPipe::MergeFrom(const TorusPipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      mutable_placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.placement());
    }
    if (from.has_radiusA()) {
      set_radiusA(from.radiusA());
    }
    if (from.has_radiusB()) {
      set_radiusB(from.radiusB());
    }
    if (from.has_startAngle()) {
      mutable_startAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.startAngle());
    }
    if (from.has_sweepAngle()) {
      mutable_sweepAngle()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.sweepAngle());
    }
    if (from.has_bSolidFlag()) {
      set_bSolidFlag(from.bSolidFlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TorusPipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TorusPipe::CopyFrom(const TorusPipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorusPipe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_placement()) {
    if (!this->placement().IsInitialized()) return false;
  }
  if (has_startAngle()) {
    if (!this->startAngle().IsInitialized()) return false;
  }
  if (has_sweepAngle()) {
    if (!this->sweepAngle().IsInitialized()) return false;
  }
  return true;
}

void TorusPipe::Swap(TorusPipe* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(radiusA_, other->radiusA_);
    std::swap(radiusB_, other->radiusB_);
    std::swap(startAngle_, other->startAngle_);
    std::swap(sweepAngle_, other->sweepAngle_);
    std::swap(bSolidFlag_, other->bSolidFlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TorusPipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TorusPipe_descriptor_;
  metadata.reflection = TorusPipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformedGeometry::kTransformFieldNumber;
const int TransformedGeometry::kGeometryFieldNumber;
#endif  // !_MSC_VER

TransformedGeometry::TransformedGeometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformedGeometry::InitAsDefaultInstance() {
  Transform_ = const_cast< ::Bentley::Geometry::Proto::DTransform3d*>(&::Bentley::Geometry::Proto::DTransform3d::default_instance());
  Geometry_ = const_cast< ::Bentley::Geometry::Proto::IGeometry*>(&::Bentley::Geometry::Proto::IGeometry::default_instance());
}

TransformedGeometry::TransformedGeometry(const TransformedGeometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformedGeometry::SharedCtor() {
  _cached_size_ = 0;
  Transform_ = NULL;
  Geometry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformedGeometry::~TransformedGeometry() {
  SharedDtor();
}

void TransformedGeometry::SharedDtor() {
  if (this != default_instance_) {
    delete Transform_;
    delete Geometry_;
  }
}

void TransformedGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformedGeometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformedGeometry_descriptor_;
}

const TransformedGeometry& TransformedGeometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

TransformedGeometry* TransformedGeometry::default_instance_ = NULL;

TransformedGeometry* TransformedGeometry::New() const {
  return new TransformedGeometry;
}

void TransformedGeometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_Transform()) {
      if (Transform_ != NULL) Transform_->::Bentley::Geometry::Proto::DTransform3d::Clear();
    }
    if (has_Geometry()) {
      if (Geometry_ != NULL) Geometry_->::Bentley::Geometry::Proto::IGeometry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformedGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.DTransform3d Transform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Geometry;
        break;
      }

      // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformedGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.DTransform3d Transform = 1;
  if (has_Transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Transform(), output);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
  if (has_Geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->Geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformedGeometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.DTransform3d Transform = 1;
  if (has_Transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Transform(), target);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
  if (has_Geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->Geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformedGeometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.DTransform3d Transform = 1;
    if (has_Transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Transform());
    }

    // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
    if (has_Geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Geometry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformedGeometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformedGeometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformedGeometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformedGeometry::MergeFrom(const TransformedGeometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_Transform()) {
      mutable_Transform()->::Bentley::Geometry::Proto::DTransform3d::MergeFrom(from.Transform());
    }
    if (from.has_Geometry()) {
      mutable_Geometry()->::Bentley::Geometry::Proto::IGeometry::MergeFrom(from.Geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformedGeometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformedGeometry::CopyFrom(const TransformedGeometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformedGeometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_Transform()) {
    if (!this->Transform().IsInitialized()) return false;
  }
  if (has_Geometry()) {
    if (!this->Geometry().IsInitialized()) return false;
  }
  return true;
}

void TransformedGeometry::Swap(TransformedGeometry* other) {
  if (other != this) {
    std::swap(Transform_, other->Transform_);
    std::swap(Geometry_, other->Geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformedGeometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformedGeometry_descriptor_;
  metadata.reflection = TransformedGeometry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransitionSpiral::kSpiralTypeFieldNumber;
const int TransitionSpiral::kPlacementFieldNumber;
const int TransitionSpiral::kStartBearingFieldNumber;
const int TransitionSpiral::kStartRadiusFieldNumber;
const int TransitionSpiral::kEndBearingFieldNumber;
const int TransitionSpiral::kEndRadiusFieldNumber;
const int TransitionSpiral::kActiveStartFractionFieldNumber;
const int TransitionSpiral::kActiveEndFractionFieldNumber;
const int TransitionSpiral::kGeometryFieldNumber;
#endif  // !_MSC_VER

TransitionSpiral::TransitionSpiral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransitionSpiral::InitAsDefaultInstance() {
  Placement_ = const_cast< ::Bentley::Geometry::Proto::IPlacement*>(&::Bentley::Geometry::Proto::IPlacement::default_instance());
  StartBearing_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  EndBearing_ = const_cast< ::Bentley::Geometry::Proto::Angle*>(&::Bentley::Geometry::Proto::Angle::default_instance());
  Geometry_ = const_cast< ::Bentley::Geometry::Proto::IGeometry*>(&::Bentley::Geometry::Proto::IGeometry::default_instance());
}

TransitionSpiral::TransitionSpiral(const TransitionSpiral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransitionSpiral::SharedCtor() {
  _cached_size_ = 0;
  SpiralType_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  Placement_ = NULL;
  StartBearing_ = NULL;
  StartRadius_ = 0;
  EndBearing_ = NULL;
  EndRadius_ = 0;
  ActiveStartFraction_ = 0;
  ActiveEndFraction_ = 0;
  Geometry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitionSpiral::~TransitionSpiral() {
  SharedDtor();
}

void TransitionSpiral::SharedDtor() {
  if (SpiralType_ != &::google::protobuf::internal::kEmptyString) {
    delete SpiralType_;
  }
  if (this != default_instance_) {
    delete Placement_;
    delete StartBearing_;
    delete EndBearing_;
    delete Geometry_;
  }
}

void TransitionSpiral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransitionSpiral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionSpiral_descriptor_;
}

const TransitionSpiral& TransitionSpiral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

TransitionSpiral* TransitionSpiral::default_instance_ = NULL;

TransitionSpiral* TransitionSpiral::New() const {
  return new TransitionSpiral;
}

void TransitionSpiral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_SpiralType()) {
      if (SpiralType_ != &::google::protobuf::internal::kEmptyString) {
        SpiralType_->clear();
      }
    }
    if (has_Placement()) {
      if (Placement_ != NULL) Placement_->::Bentley::Geometry::Proto::IPlacement::Clear();
    }
    if (has_StartBearing()) {
      if (StartBearing_ != NULL) StartBearing_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    StartRadius_ = 0;
    if (has_EndBearing()) {
      if (EndBearing_ != NULL) EndBearing_->::Bentley::Geometry::Proto::Angle::Clear();
    }
    EndRadius_ = 0;
    ActiveStartFraction_ = 0;
    ActiveEndFraction_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_Geometry()) {
      if (Geometry_ != NULL) Geometry_->::Bentley::Geometry::Proto::IGeometry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransitionSpiral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SpiralType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_SpiralType()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->SpiralType().data(), (int)this->SpiralType().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Placement;
        break;
      }

      // required .Bentley.Geometry.Proto.IPlacement Placement = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Placement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Placement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StartBearing;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartBearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_StartBearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_StartRadius;
        break;
      }

      // required double StartRadius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &StartRadius_)));
          set_has_StartRadius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EndBearing;
        break;
      }

      // required .Bentley.Geometry.Proto.Angle EndBearing = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndBearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_EndBearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_EndRadius;
        break;
      }

      // required double EndRadius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EndRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &EndRadius_)));
          set_has_EndRadius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ActiveStartFraction;
        break;
      }

      // required double ActiveStartFraction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ActiveStartFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ActiveStartFraction_)));
          set_has_ActiveStartFraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ActiveEndFraction;
        break;
      }

      // required double ActiveEndFraction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ActiveEndFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ActiveEndFraction_)));
          set_has_ActiveEndFraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Geometry;
        break;
      }

      // required .Bentley.Geometry.Proto.IGeometry Geometry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitionSpiral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SpiralType = 1;
  if (has_SpiralType()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SpiralType().data(), (int)this->SpiralType().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->SpiralType(), output);
  }

  // required .Bentley.Geometry.Proto.IPlacement Placement = 2;
  if (has_Placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->Placement(), output);
  }

  // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
  if (has_StartBearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->StartBearing(), output);
  }

  // required double StartRadius = 4;
  if (has_StartRadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->StartRadius(), output);
  }

  // required .Bentley.Geometry.Proto.Angle EndBearing = 5;
  if (has_EndBearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->EndBearing(), output);
  }

  // required double EndRadius = 6;
  if (has_EndRadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->EndRadius(), output);
  }

  // required double ActiveStartFraction = 7;
  if (has_ActiveStartFraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ActiveStartFraction(), output);
  }

  // required double ActiveEndFraction = 8;
  if (has_ActiveEndFraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ActiveEndFraction(), output);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 9;
  if (has_Geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->Geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransitionSpiral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SpiralType = 1;
  if (has_SpiralType()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->SpiralType().data(), (int)this->SpiralType().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->SpiralType(), target);
  }

  // required .Bentley.Geometry.Proto.IPlacement Placement = 2;
  if (has_Placement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->Placement(), target);
  }

  // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
  if (has_StartBearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->StartBearing(), target);
  }

  // required double StartRadius = 4;
  if (has_StartRadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->StartRadius(), target);
  }

  // required .Bentley.Geometry.Proto.Angle EndBearing = 5;
  if (has_EndBearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->EndBearing(), target);
  }

  // required double EndRadius = 6;
  if (has_EndRadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->EndRadius(), target);
  }

  // required double ActiveStartFraction = 7;
  if (has_ActiveStartFraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ActiveStartFraction(), target);
  }

  // required double ActiveEndFraction = 8;
  if (has_ActiveEndFraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ActiveEndFraction(), target);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 9;
  if (has_Geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->Geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransitionSpiral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SpiralType = 1;
    if (has_SpiralType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->SpiralType());
    }

    // required .Bentley.Geometry.Proto.IPlacement Placement = 2;
    if (has_Placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Placement());
    }

    // required .Bentley.Geometry.Proto.Angle StartBearing = 3;
    if (has_StartBearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->StartBearing());
    }

    // required double StartRadius = 4;
    if (has_StartRadius()) {
      total_size += 1 + 8;
    }

    // required .Bentley.Geometry.Proto.Angle EndBearing = 5;
    if (has_EndBearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->EndBearing());
    }

    // required double EndRadius = 6;
    if (has_EndRadius()) {
      total_size += 1 + 8;
    }

    // required double ActiveStartFraction = 7;
    if (has_ActiveStartFraction()) {
      total_size += 1 + 8;
    }

    // required double ActiveEndFraction = 8;
    if (has_ActiveEndFraction()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Bentley.Geometry.Proto.IGeometry Geometry = 9;
    if (has_Geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Geometry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitionSpiral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransitionSpiral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransitionSpiral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransitionSpiral::MergeFrom(const TransitionSpiral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_SpiralType()) {
      set_SpiralType(from.SpiralType());
    }
    if (from.has_Placement()) {
      mutable_Placement()->::Bentley::Geometry::Proto::IPlacement::MergeFrom(from.Placement());
    }
    if (from.has_StartBearing()) {
      mutable_StartBearing()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.StartBearing());
    }
    if (from.has_StartRadius()) {
      set_StartRadius(from.StartRadius());
    }
    if (from.has_EndBearing()) {
      mutable_EndBearing()->::Bentley::Geometry::Proto::Angle::MergeFrom(from.EndBearing());
    }
    if (from.has_EndRadius()) {
      set_EndRadius(from.EndRadius());
    }
    if (from.has_ActiveStartFraction()) {
      set_ActiveStartFraction(from.ActiveStartFraction());
    }
    if (from.has_ActiveEndFraction()) {
      set_ActiveEndFraction(from.ActiveEndFraction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_Geometry()) {
      mutable_Geometry()->::Bentley::Geometry::Proto::IGeometry::MergeFrom(from.Geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransitionSpiral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionSpiral::CopyFrom(const TransitionSpiral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionSpiral::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_Placement()) {
    if (!this->Placement().IsInitialized()) return false;
  }
  if (has_StartBearing()) {
    if (!this->StartBearing().IsInitialized()) return false;
  }
  if (has_EndBearing()) {
    if (!this->EndBearing().IsInitialized()) return false;
  }
  if (has_Geometry()) {
    if (!this->Geometry().IsInitialized()) return false;
  }
  return true;
}

void TransitionSpiral::Swap(TransitionSpiral* other) {
  if (other != this) {
    std::swap(SpiralType_, other->SpiralType_);
    std::swap(Placement_, other->Placement_);
    std::swap(StartBearing_, other->StartBearing_);
    std::swap(StartRadius_, other->StartRadius_);
    std::swap(EndBearing_, other->EndBearing_);
    std::swap(EndRadius_, other->EndRadius_);
    std::swap(ActiveStartFraction_, other->ActiveStartFraction_);
    std::swap(ActiveEndFraction_, other->ActiveEndFraction_);
    std::swap(Geometry_, other->Geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransitionSpiral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransitionSpiral_descriptor_;
  metadata.reflection = TransitionSpiral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXyzFieldNumber;
const int Vector::kVectorFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector::InitAsDefaultInstance() {
  xyz_ = const_cast< ::Bentley::Geometry::Proto::DPoint3d*>(&::Bentley::Geometry::Proto::DPoint3d::default_instance());
  vector_ = const_cast< ::Bentley::Geometry::Proto::DVector3d*>(&::Bentley::Geometry::Proto::DVector3d::default_instance());
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  xyz_ = NULL;
  vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
    delete xyz_;
    delete vector_;
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_xyz()) {
      if (xyz_ != NULL) xyz_->::Bentley::Geometry::Proto::DPoint3d::Clear();
    }
    if (has_vector()) {
      if (vector_ != NULL) vector_->::Bentley::Geometry::Proto::DVector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xyz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vector;
        break;
      }

      // required .Bentley.Geometry.Proto.DVector3d vector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
  if (has_xyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xyz(), output);
  }

  // required .Bentley.Geometry.Proto.DVector3d vector = 2;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
  if (has_xyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xyz(), target);
  }

  // required .Bentley.Geometry.Proto.DVector3d vector = 2;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.DPoint3d xyz = 1;
    if (has_xyz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xyz());
    }

    // required .Bentley.Geometry.Proto.DVector3d vector = 2;
    if (has_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xyz()) {
      mutable_xyz()->::Bentley::Geometry::Proto::DPoint3d::MergeFrom(from.xyz());
    }
    if (from.has_vector()) {
      mutable_vector()->::Bentley::Geometry::Proto::DVector3d::MergeFrom(from.vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_xyz()) {
    if (!this->xyz().IsInitialized()) return false;
  }
  if (has_vector()) {
    if (!this->vector().IsInitialized()) return false;
  }
  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(xyz_, other->xyz_);
    std::swap(vector_, other->vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdjacentSurfacePatches::kPatchFieldNumber;
#endif  // !_MSC_VER

AdjacentSurfacePatches::AdjacentSurfacePatches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdjacentSurfacePatches::InitAsDefaultInstance() {
}

AdjacentSurfacePatches::AdjacentSurfacePatches(const AdjacentSurfacePatches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdjacentSurfacePatches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdjacentSurfacePatches::~AdjacentSurfacePatches() {
  SharedDtor();
}

void AdjacentSurfacePatches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdjacentSurfacePatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjacentSurfacePatches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjacentSurfacePatches_descriptor_;
}

const AdjacentSurfacePatches& AdjacentSurfacePatches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

AdjacentSurfacePatches* AdjacentSurfacePatches::default_instance_ = NULL;

AdjacentSurfacePatches* AdjacentSurfacePatches::New() const {
  return new AdjacentSurfacePatches;
}

void AdjacentSurfacePatches::Clear() {
  Patch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdjacentSurfacePatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.ISurfacePatch Patch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Patch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Patch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdjacentSurfacePatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.ISurfacePatch Patch = 1;
  for (int i = 0; i < this->Patch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Patch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdjacentSurfacePatches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.ISurfacePatch Patch = 1;
  for (int i = 0; i < this->Patch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Patch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdjacentSurfacePatches::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.ISurfacePatch Patch = 1;
  total_size += 1 * this->Patch_size();
  for (int i = 0; i < this->Patch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Patch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjacentSurfacePatches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdjacentSurfacePatches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdjacentSurfacePatches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjacentSurfacePatches::MergeFrom(const AdjacentSurfacePatches& from) {
  GOOGLE_CHECK_NE(&from, this);
  Patch_.MergeFrom(from.Patch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdjacentSurfacePatches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjacentSurfacePatches::CopyFrom(const AdjacentSurfacePatches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjacentSurfacePatches::IsInitialized() const {

  for (int i = 0; i < Patch_size(); i++) {
    if (!this->Patch(i).IsInitialized()) return false;
  }
  return true;
}

void AdjacentSurfacePatches::Swap(AdjacentSurfacePatches* other) {
  if (other != this) {
    Patch_.Swap(&other->Patch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdjacentSurfacePatches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjacentSurfacePatches_descriptor_;
  metadata.reflection = AdjacentSurfacePatches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kMemberFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  Member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.IGeometry Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.IGeometry Member = 1;
  for (int i = 0; i < this->Member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.IGeometry Member = 1;
  for (int i = 0; i < this->Member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.IGeometry Member = 1;
  total_size += 1 * this->Member_size();
  for (int i = 0; i < this->Member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  Member_.MergeFrom(from.Member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  for (int i = 0; i < Member_size(); i++) {
    if (!this->Member(i).IsInitialized()) return false;
  }
  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    Member_.Swap(&other->Member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurveChain::kCurveFieldNumber;
#endif  // !_MSC_VER

CurveChain::CurveChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurveChain::InitAsDefaultInstance() {
}

CurveChain::CurveChain(const CurveChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurveChain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveChain::~CurveChain() {
  SharedDtor();
}

void CurveChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurveChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveChain_descriptor_;
}

const CurveChain& CurveChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CurveChain* CurveChain::default_instance_ = NULL;

CurveChain* CurveChain::New() const {
  return new CurveChain;
}

void CurveChain::Clear() {
  Curve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurveChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.IPrimitiveCurve Curve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Curve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Curve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Curve;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurveChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.IPrimitiveCurve Curve = 1;
  for (int i = 0; i < this->Curve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Curve(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurveChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.IPrimitiveCurve Curve = 1;
  for (int i = 0; i < this->Curve_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Curve(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurveChain::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.IPrimitiveCurve Curve = 1;
  total_size += 1 * this->Curve_size();
  for (int i = 0; i < this->Curve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Curve(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurveChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurveChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurveChain::MergeFrom(const CurveChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  Curve_.MergeFrom(from.Curve_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurveChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveChain::CopyFrom(const CurveChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveChain::IsInitialized() const {

  for (int i = 0; i < Curve_size(); i++) {
    if (!this->Curve(i).IsInitialized()) return false;
  }
  return true;
}

void CurveChain::Swap(CurveChain* other) {
  if (other != this) {
    Curve_.Swap(&other->Curve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurveChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveChain_descriptor_;
  metadata.reflection = CurveChain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurveGroup::kCurveFieldNumber;
#endif  // !_MSC_VER

CurveGroup::CurveGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurveGroup::InitAsDefaultInstance() {
}

CurveGroup::CurveGroup(const CurveGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurveGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveGroup::~CurveGroup() {
  SharedDtor();
}

void CurveGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveGroup_descriptor_;
}

const CurveGroup& CurveGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

CurveGroup* CurveGroup::default_instance_ = NULL;

CurveGroup* CurveGroup::New() const {
  return new CurveGroup;
}

void CurveGroup::Clear() {
  Curve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.ICurve Curve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Curve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Curve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Curve;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.ICurve Curve = 1;
  for (int i = 0; i < this->Curve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Curve(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurveGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.ICurve Curve = 1;
  for (int i = 0; i < this->Curve_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Curve(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurveGroup::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.ICurve Curve = 1;
  total_size += 1 * this->Curve_size();
  for (int i = 0; i < this->Curve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Curve(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurveGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurveGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurveGroup::MergeFrom(const CurveGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  Curve_.MergeFrom(from.Curve_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurveGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveGroup::CopyFrom(const CurveGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveGroup::IsInitialized() const {

  for (int i = 0; i < Curve_size(); i++) {
    if (!this->Curve(i).IsInitialized()) return false;
  }
  return true;
}

void CurveGroup::Swap(CurveGroup* other) {
  if (other != this) {
    Curve_.Swap(&other->Curve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurveGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveGroup_descriptor_;
  metadata.reflection = CurveGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Operation::kNameFieldNumber;
const int Operation::kMemberFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  Name_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (Name_ != &::google::protobuf::internal::kEmptyString) {
    delete Name_;
  }
  if (this != default_instance_) {
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_Name()) {
      if (Name_ != &::google::protobuf::internal::kEmptyString) {
        Name_->clear();
      }
    }
  }
  Member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_Name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->Name().data(), (int)this->Name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Member;
        break;
      }

      // repeated .Bentley.Geometry.Proto.IGeometry Member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_Name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->Name().data(), (int)this->Name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->Name(), output);
  }

  // repeated .Bentley.Geometry.Proto.IGeometry Member = 2;
  for (int i = 0; i < this->Member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->Member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_Name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->Name().data(), (int)this->Name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->Name(), target);
  }

  // repeated .Bentley.Geometry.Proto.IGeometry Member = 2;
  for (int i = 0; i < this->Member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->Member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_Name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->Name());
    }

  }
  // repeated .Bentley.Geometry.Proto.IGeometry Member = 2;
  total_size += 1 * this->Member_size();
  for (int i = 0; i < this->Member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  Member_.MergeFrom(from.Member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_Name()) {
      set_Name(from.Name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < Member_size(); i++) {
    if (!this->Member(i).IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(Name_, other->Name_);
    Member_.Swap(&other->Member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParametricSurfacePatch::kSurfaceFieldNumber;
const int ParametricSurfacePatch::kCurveChainFieldNumber;
const int ParametricSurfacePatch::kLoopTypeFieldNumber;
#endif  // !_MSC_VER

ParametricSurfacePatch::ParametricSurfacePatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParametricSurfacePatch::InitAsDefaultInstance() {
  Surface_ = const_cast< ::Bentley::Geometry::Proto::IParametricSurface*>(&::Bentley::Geometry::Proto::IParametricSurface::default_instance());
  LoopType_ = const_cast< ::Bentley::Geometry::Proto::LoopType*>(&::Bentley::Geometry::Proto::LoopType::default_instance());
}

ParametricSurfacePatch::ParametricSurfacePatch(const ParametricSurfacePatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParametricSurfacePatch::SharedCtor() {
  _cached_size_ = 0;
  Surface_ = NULL;
  LoopType_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParametricSurfacePatch::~ParametricSurfacePatch() {
  SharedDtor();
}

void ParametricSurfacePatch::SharedDtor() {
  if (this != default_instance_) {
    delete Surface_;
    delete LoopType_;
  }
}

void ParametricSurfacePatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParametricSurfacePatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParametricSurfacePatch_descriptor_;
}

const ParametricSurfacePatch& ParametricSurfacePatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

ParametricSurfacePatch* ParametricSurfacePatch::default_instance_ = NULL;

ParametricSurfacePatch* ParametricSurfacePatch::New() const {
  return new ParametricSurfacePatch;
}

void ParametricSurfacePatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_Surface()) {
      if (Surface_ != NULL) Surface_->::Bentley::Geometry::Proto::IParametricSurface::Clear();
    }
    if (has_LoopType()) {
      if (LoopType_ != NULL) LoopType_->::Bentley::Geometry::Proto::LoopType::Clear();
    }
  }
  CurveChain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParametricSurfacePatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.IParametricSurface Surface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Surface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CurveChain;
        break;
      }

      // repeated .Bentley.Geometry.Proto.ICurveChain CurveChain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurveChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_CurveChain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CurveChain;
        if (input->ExpectTag(26)) goto parse_LoopType;
        break;
      }

      // required .Bentley.Geometry.Proto.LoopType LoopType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoopType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_LoopType()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParametricSurfacePatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.IParametricSurface Surface = 1;
  if (has_Surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Surface(), output);
  }

  // repeated .Bentley.Geometry.Proto.ICurveChain CurveChain = 2;
  for (int i = 0; i < this->CurveChain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->CurveChain(i), output);
  }

  // required .Bentley.Geometry.Proto.LoopType LoopType = 3;
  if (has_LoopType()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->LoopType(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParametricSurfacePatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.IParametricSurface Surface = 1;
  if (has_Surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Surface(), target);
  }

  // repeated .Bentley.Geometry.Proto.ICurveChain CurveChain = 2;
  for (int i = 0; i < this->CurveChain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->CurveChain(i), target);
  }

  // required .Bentley.Geometry.Proto.LoopType LoopType = 3;
  if (has_LoopType()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->LoopType(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParametricSurfacePatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.IParametricSurface Surface = 1;
    if (has_Surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Surface());
    }

    // required .Bentley.Geometry.Proto.LoopType LoopType = 3;
    if (has_LoopType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->LoopType());
    }

  }
  // repeated .Bentley.Geometry.Proto.ICurveChain CurveChain = 2;
  total_size += 1 * this->CurveChain_size();
  for (int i = 0; i < this->CurveChain_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->CurveChain(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParametricSurfacePatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParametricSurfacePatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParametricSurfacePatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParametricSurfacePatch::MergeFrom(const ParametricSurfacePatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  CurveChain_.MergeFrom(from.CurveChain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_Surface()) {
      mutable_Surface()->::Bentley::Geometry::Proto::IParametricSurface::MergeFrom(from.Surface());
    }
    if (from.has_LoopType()) {
      mutable_LoopType()->::Bentley::Geometry::Proto::LoopType::MergeFrom(from.LoopType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParametricSurfacePatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParametricSurfacePatch::CopyFrom(const ParametricSurfacePatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametricSurfacePatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_Surface()) {
    if (!this->Surface().IsInitialized()) return false;
  }
  for (int i = 0; i < CurveChain_size(); i++) {
    if (!this->CurveChain(i).IsInitialized()) return false;
  }
  if (has_LoopType()) {
    if (!this->LoopType().IsInitialized()) return false;
  }
  return true;
}

void ParametricSurfacePatch::Swap(ParametricSurfacePatch* other) {
  if (other != this) {
    std::swap(Surface_, other->Surface_);
    CurveChain_.Swap(&other->CurveChain_);
    std::swap(LoopType_, other->LoopType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParametricSurfacePatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParametricSurfacePatch_descriptor_;
  metadata.reflection = ParametricSurfacePatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointChain::kPointFieldNumber;
#endif  // !_MSC_VER

PointChain::PointChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointChain::InitAsDefaultInstance() {
}

PointChain::PointChain(const PointChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointChain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointChain::~PointChain() {
  SharedDtor();
}

void PointChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointChain_descriptor_;
}

const PointChain& PointChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

PointChain* PointChain::default_instance_ = NULL;

PointChain* PointChain::New() const {
  return new PointChain;
}

void PointChain::Clear() {
  Point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.ISinglePoint Point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.ISinglePoint Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.ISinglePoint Point = 1;
  for (int i = 0; i < this->Point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointChain::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.ISinglePoint Point = 1;
  total_size += 1 * this->Point_size();
  for (int i = 0; i < this->Point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointChain::MergeFrom(const PointChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  Point_.MergeFrom(from.Point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointChain::CopyFrom(const PointChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointChain::IsInitialized() const {

  for (int i = 0; i < Point_size(); i++) {
    if (!this->Point(i).IsInitialized()) return false;
  }
  return true;
}

void PointChain::Swap(PointChain* other) {
  if (other != this) {
    Point_.Swap(&other->Point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointChain_descriptor_;
  metadata.reflection = PointChain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointGroup::kMemberFieldNumber;
#endif  // !_MSC_VER

PointGroup::PointGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointGroup::InitAsDefaultInstance() {
}

PointGroup::PointGroup(const PointGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointGroup::~PointGroup() {
  SharedDtor();
}

void PointGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointGroup_descriptor_;
}

const PointGroup& PointGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

PointGroup* PointGroup::default_instance_ = NULL;

PointGroup* PointGroup::New() const {
  return new PointGroup;
}

void PointGroup::Clear() {
  Member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.IPoint Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.IPoint Member = 1;
  for (int i = 0; i < this->Member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.IPoint Member = 1;
  for (int i = 0; i < this->Member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointGroup::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.IPoint Member = 1;
  total_size += 1 * this->Member_size();
  for (int i = 0; i < this->Member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointGroup::MergeFrom(const PointGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  Member_.MergeFrom(from.Member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGroup::CopyFrom(const PointGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGroup::IsInitialized() const {

  for (int i = 0; i < Member_size(); i++) {
    if (!this->Member(i).IsInitialized()) return false;
  }
  return true;
}

void PointGroup::Swap(PointGroup* other) {
  if (other != this) {
    Member_.Swap(&other->Member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointGroup_descriptor_;
  metadata.reflection = PointGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedGroupDef::kNameFieldNumber;
const int SharedGroupDef::kGeometryFieldNumber;
#endif  // !_MSC_VER

SharedGroupDef::SharedGroupDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedGroupDef::InitAsDefaultInstance() {
  Geometry_ = const_cast< ::Bentley::Geometry::Proto::IGeometry*>(&::Bentley::Geometry::Proto::IGeometry::default_instance());
}

SharedGroupDef::SharedGroupDef(const SharedGroupDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedGroupDef::SharedCtor() {
  _cached_size_ = 0;
  Name_ = const_cast< ::Bentley::Utf8String*>(&::google::protobuf::internal::kEmptyString);
  Geometry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedGroupDef::~SharedGroupDef() {
  SharedDtor();
}

void SharedGroupDef::SharedDtor() {
  if (Name_ != &::google::protobuf::internal::kEmptyString) {
    delete Name_;
  }
  if (this != default_instance_) {
    delete Geometry_;
  }
}

void SharedGroupDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedGroupDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedGroupDef_descriptor_;
}

const SharedGroupDef& SharedGroupDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SharedGroupDef* SharedGroupDef::default_instance_ = NULL;

SharedGroupDef* SharedGroupDef::New() const {
  return new SharedGroupDef;
}

void SharedGroupDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_Name()) {
      if (Name_ != &::google::protobuf::internal::kEmptyString) {
        Name_->clear();
      }
    }
    if (has_Geometry()) {
      if (Geometry_ != NULL) Geometry_->::Bentley::Geometry::Proto::IGeometry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedGroupDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_Name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->Name().data(), (int)this->Name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Geometry;
        break;
      }

      // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_Geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedGroupDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_Name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->Name().data(), (int)this->Name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->Name(), output);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
  if (has_Geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->Geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedGroupDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_Name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->Name().data(), (int)this->Name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->Name(), target);
  }

  // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
  if (has_Geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->Geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedGroupDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_Name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->Name());
    }

    // required .Bentley.Geometry.Proto.IGeometry Geometry = 2;
    if (has_Geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->Geometry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedGroupDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedGroupDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedGroupDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedGroupDef::MergeFrom(const SharedGroupDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_Name()) {
      set_Name(from.Name());
    }
    if (from.has_Geometry()) {
      mutable_Geometry()->::Bentley::Geometry::Proto::IGeometry::MergeFrom(from.Geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedGroupDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedGroupDef::CopyFrom(const SharedGroupDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedGroupDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_Geometry()) {
    if (!this->Geometry().IsInitialized()) return false;
  }
  return true;
}

void SharedGroupDef::Swap(SharedGroupDef* other) {
  if (other != this) {
    std::swap(Name_, other->Name_);
    std::swap(Geometry_, other->Geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedGroupDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedGroupDef_descriptor_;
  metadata.reflection = SharedGroupDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolidGroup::kSolidFieldNumber;
#endif  // !_MSC_VER

SolidGroup::SolidGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolidGroup::InitAsDefaultInstance() {
}

SolidGroup::SolidGroup(const SolidGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolidGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolidGroup::~SolidGroup() {
  SharedDtor();
}

void SolidGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SolidGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolidGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolidGroup_descriptor_;
}

const SolidGroup& SolidGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SolidGroup* SolidGroup::default_instance_ = NULL;

SolidGroup* SolidGroup::New() const {
  return new SolidGroup;
}

void SolidGroup::Clear() {
  Solid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolidGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.ISolid Solid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Solid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Solid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Solid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolidGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.ISolid Solid = 1;
  for (int i = 0; i < this->Solid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Solid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolidGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.ISolid Solid = 1;
  for (int i = 0; i < this->Solid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Solid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolidGroup::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.ISolid Solid = 1;
  total_size += 1 * this->Solid_size();
  for (int i = 0; i < this->Solid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Solid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolidGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolidGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolidGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolidGroup::MergeFrom(const SolidGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  Solid_.MergeFrom(from.Solid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolidGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolidGroup::CopyFrom(const SolidGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolidGroup::IsInitialized() const {

  for (int i = 0; i < Solid_size(); i++) {
    if (!this->Solid(i).IsInitialized()) return false;
  }
  return true;
}

void SolidGroup::Swap(SolidGroup* other) {
  if (other != this) {
    Solid_.Swap(&other->Solid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolidGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolidGroup_descriptor_;
  metadata.reflection = SolidGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceGroup::kSurfaceFieldNumber;
#endif  // !_MSC_VER

SurfaceGroup::SurfaceGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SurfaceGroup::InitAsDefaultInstance() {
}

SurfaceGroup::SurfaceGroup(const SurfaceGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SurfaceGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfaceGroup::~SurfaceGroup() {
  SharedDtor();
}

void SurfaceGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SurfaceGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceGroup_descriptor_;
}

const SurfaceGroup& SurfaceGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SurfaceGroup* SurfaceGroup::default_instance_ = NULL;

SurfaceGroup* SurfaceGroup::New() const {
  return new SurfaceGroup;
}

void SurfaceGroup::Clear() {
  Surface_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bentley.Geometry.Proto.ISurface Surface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Surface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Surface;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SurfaceGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Bentley.Geometry.Proto.ISurface Surface = 1;
  for (int i = 0; i < this->Surface_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->Surface(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SurfaceGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Bentley.Geometry.Proto.ISurface Surface = 1;
  for (int i = 0; i < this->Surface_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->Surface(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SurfaceGroup::ByteSize() const {
  int total_size = 0;

  // repeated .Bentley.Geometry.Proto.ISurface Surface = 1;
  total_size += 1 * this->Surface_size();
  for (int i = 0; i < this->Surface_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Surface(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceGroup::MergeFrom(const SurfaceGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  Surface_.MergeFrom(from.Surface_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceGroup::CopyFrom(const SurfaceGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceGroup::IsInitialized() const {

  for (int i = 0; i < Surface_size(); i++) {
    if (!this->Surface(i).IsInitialized()) return false;
  }
  return true;
}

void SurfaceGroup::Swap(SurfaceGroup* other) {
  if (other != this) {
    Surface_.Swap(&other->Surface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceGroup_descriptor_;
  metadata.reflection = SurfaceGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfacePatch::kExteriorLoopFieldNumber;
const int SurfacePatch::kHoleLoopFieldNumber;
#endif  // !_MSC_VER

SurfacePatch::SurfacePatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SurfacePatch::InitAsDefaultInstance() {
  ExteriorLoop_ = const_cast< ::Bentley::Geometry::Proto::ICurveChain*>(&::Bentley::Geometry::Proto::ICurveChain::default_instance());
}

SurfacePatch::SurfacePatch(const SurfacePatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SurfacePatch::SharedCtor() {
  _cached_size_ = 0;
  ExteriorLoop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfacePatch::~SurfacePatch() {
  SharedDtor();
}

void SurfacePatch::SharedDtor() {
  if (this != default_instance_) {
    delete ExteriorLoop_;
  }
}

void SurfacePatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfacePatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfacePatch_descriptor_;
}

const SurfacePatch& SurfacePatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allcg_2eproto();
  return *default_instance_;
}

SurfacePatch* SurfacePatch::default_instance_ = NULL;

SurfacePatch* SurfacePatch::New() const {
  return new SurfacePatch;
}

void SurfacePatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ExteriorLoop()) {
      if (ExteriorLoop_ != NULL) ExteriorLoop_->::Bentley::Geometry::Proto::ICurveChain::Clear();
    }
  }
  HoleLoop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfacePatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Bentley.Geometry.Proto.ICurveChain ExteriorLoop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ExteriorLoop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HoleLoop;
        break;
      }

      // repeated .Bentley.Geometry.Proto.ICurveChain HoleLoop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HoleLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_HoleLoop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HoleLoop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SurfacePatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Bentley.Geometry.Proto.ICurveChain ExteriorLoop = 1;
  if (has_ExteriorLoop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ExteriorLoop(), output);
  }

  // repeated .Bentley.Geometry.Proto.ICurveChain HoleLoop = 2;
  for (int i = 0; i < this->HoleLoop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->HoleLoop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SurfacePatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Bentley.Geometry.Proto.ICurveChain ExteriorLoop = 1;
  if (has_ExteriorLoop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ExteriorLoop(), target);
  }

  // repeated .Bentley.Geometry.Proto.ICurveChain HoleLoop = 2;
  for (int i = 0; i < this->HoleLoop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->HoleLoop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SurfacePatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Bentley.Geometry.Proto.ICurveChain ExteriorLoop = 1;
    if (has_ExteriorLoop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ExteriorLoop());
    }

  }
  // repeated .Bentley.Geometry.Proto.ICurveChain HoleLoop = 2;
  total_size += 1 * this->HoleLoop_size();
  for (int i = 0; i < this->HoleLoop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->HoleLoop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfacePatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfacePatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfacePatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfacePatch::MergeFrom(const SurfacePatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  HoleLoop_.MergeFrom(from.HoleLoop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ExteriorLoop()) {
      mutable_ExteriorLoop()->::Bentley::Geometry::Proto::ICurveChain::MergeFrom(from.ExteriorLoop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfacePatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfacePatch::CopyFrom(const SurfacePatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfacePatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ExteriorLoop()) {
    if (!this->ExteriorLoop().IsInitialized()) return false;
  }
  for (int i = 0; i < HoleLoop_size(); i++) {
    if (!this->HoleLoop(i).IsInitialized()) return false;
  }
  return true;
}

void SurfacePatch::Swap(SurfacePatch* other) {
  if (other != this) {
    std::swap(ExteriorLoop_, other->ExteriorLoop_);
    HoleLoop_.Swap(&other->HoleLoop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfacePatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfacePatch_descriptor_;
  metadata.reflection = SurfacePatch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Geometry
}  // namespace Bentley

// @@protoc_insertion_point(global_scope)
