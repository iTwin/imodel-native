/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/Geom/dpoint3d.fdf $
|
|  $Copyright: (c) 2018 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once

/*__BENTLEY_INTERNAL_ONLY__*/

BEGIN_BENTLEY_NAMESPACE

//!
//! @description Returns the (scalar) cross product of the xy parts of two vectors.
//!   The vectors are computed from the Origin to Target1 and Target2.
//! @param pOrigin IN      The base point for computing vectors
//! @param pTarget1 IN      The target point for the first vector
//! @param pTarget2 IN      The target point for the second vector
//! @group "DPoint3d Dot and Cross"
//! @return scalar cross product
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_crossProduct3DPoint3dXY
(
DPoint3dCP pOrigin,
DPoint3dCP pTarget1,
DPoint3dCP pTarget2
);

//!
//! @description Returns the (scalar) dot product of two vectors.
//!   The vectors are computed from the Origin to Target1 and Target2.
//! @param pOrigin IN      The base point for computing vectors
//! @param pTarget1 IN      The target point for the first vector
//! @param pTarget2 IN      The target point for the second vector
//! @group "DPoint3d Dot and Cross"
//! @return dot product
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_dotProduct3DPoint3d
(
DPoint3dCP pOrigin,
DPoint3dCP pTarget1,
DPoint3dCP pTarget2
);

//!
//! @description Returns the (scalar) dot product of xy parts of two vectors.
//!   The vectors are computed from the Origin to Target1 and Target2.
//! @param pOrigin IN      The base point for computing vectors
//! @param pTarget1 IN      The target point for the first vector
//! @param pTarget2 IN      The target point for the second vector
//! @group "DPoint3d Dot and Cross"
//! @return dot product
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_dotProduct3DPoint3dXY
(
DPoint3dCP pOrigin,
DPoint3dCP pTarget1,
DPoint3dCP pTarget2
);

//!
//! @description Returns the (scalar) dot product of two vectors.
//!  One vector is computed internally as the difference of the Target
//!   and Origin (Target - Origin).
//!  The other is given directly as a single argument.
//!
//! @param pTarget IN The end point of first vector of the cross product.
//! @param pOrigin IN The start point of the first vector of the cross product.
//! @param pVector IN The second vector of the cross product.
//! @group "DPoint3d Dot and Cross"
//! @return dot product
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_dotDifference
(
DPoint3dCP pTarget,
DPoint3dCP pOrigin,
DVec3dCP pVector
);

//!
//! @description Computes the triple product of vectors from a base point to three target points.
//! @param pOrigin IN      The base point for all three vectors
//! @param pTarget1 IN      The target point for the first vector
//! @param pTarget2 IN      The target point for the second vector
//! @param pTarget3 IN      The target point for the third vector
//! @return triple product
//! @group "DPoint3d Dot and Cross"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_tripleProduct4Points
(
DPoint3dCP pOrigin,
DPoint3dCP pTarget1,
DPoint3dCP pTarget2,
DPoint3dCP pTarget3
);

//!
//! @description Sets all components of a point or vector to zero.
//! @param pPoint OUT     zeroed point or vector
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_zero
(
DPoint3dP pPoint
);

//!
//! @description Sets all components of a point or vector to 1.0.
//! @param pPoint OUT     initialized point or vector
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_one
(
DPoint3dP pPoint
);

//!
//! @description Copies doubles from a 3 component array to the x,y, and z components of a DPoint3d
//! @param pPoint OUT     initialized point or vector
//! @param pXyz IN      x, y, z components
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_fromArray
(
DPoint3dP pPoint,
const   double      *pXyz
);

//!
//! @description Copy (and promote) from a float point.
//! @param pPoint OUT     initialized point or vector
//! @param pFPoint IN      source point
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_initFromFPoint3d
(
DPoint3dP pPoint,
FPoint3dCP pFPoint
);

//!
//! @description Copy from a 2d point, setting z to zero.
//! @param pPoint OUT     initialized point or vector
//! @param pFPoint IN      source point
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_initFromDPoint2d
(
DPoint3dP pPoint,
DPoint2dCP pFPoint
);

//!
//! @description Copy from a 2d float point, setting z to zero.
//! @param pPoint OUT     initialized point or vector
//! @param pFPoint IN      source point
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_initFromFPoint2d
(
DPoint3dP pPoint,
FPoint2dCP pFPoint
);

//!
//! @description Sets the x,y, and z components of a point
//! @param pPoint OUT     initialized point or vector
//! @param ax IN      x component
//! @param ay IN      y component
//! @param az IN      z component
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void  bsiDPoint3d_setXYZ
(
DPoint3dP pPoint,
double       ax,
double       ay,
double       az
);

//!
//! @description Sets the x and y components of a point.  Sets z to zero.
//! @param pPoint OUT     initialized point or vector
//! @param ax IN      x component
//! @param ay IN      y component
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_setXY
(
DPoint3dP pPoint,
double       ax,
double       ay
);

//!
//! @description Sets the x,y, and z components of a DPoint3d structure from the
//! corresponding parts of a DPoint4d.  Weight part of DPoint4d is not used.
//! @param pPoint OUT     initialized point
//! @param pHPoint IN      homogeneous point
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_getXYZ
(
DPoint3dP pPoint,
DPoint4dCP pHPoint
);

//!
//! @description Sets the x,y, and z components of a DPoint3d structure from the
//!    corresponding parts of a DPoint4d, multiplied by the given scalar.  Weight part of DPoint4d is not used.
//! @param pPoint OUT     initialized point
//! @param pHPoint IN      homogeneous point
//! @param a IN      scale
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_getScaledXYZ
(
DPoint3dP pPoint,
DPoint4dCP pHPoint,
double          a
);

//!
//! @description Set one of the x,y,z components of the point.
//! @param pPoint OUT     point or vector whose component is set
//! @param a IN      component value
//! @param index IN      selects the the component: 0=x, 1=y, 2=z, others cyclic
//! @group "DPoint3d Modification"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_setComponent
(
DPoint3dP pPoint,
double       a,
int         index
);

//!
//! @description Gets a single component of a point.
//! @param pPoint IN      point or vector whose component is accessed
//! @param index IN      selects the component: 0=x, 1=y, 2=z, others cyclic
//! @return specified component of the point or vector
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_getComponent
(
DPoint3dCP pPoint,
int         index
);

//!
//! @description Copies x,y,z components from a point to individual variables.
//! @param pPoint IN      source point
//! @param pXCoord OUT     x component
//! @param pYCoord OUT     y component
//! @param pZCoord OUT     z component
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_getComponents
(
DPoint3dCP pPoint,
double      *pXCoord,
double      *pYCoord,
double      *pZCoord
);

//!
//! @description Computes a point whose position is given by a fractional
//!    argument and two endpoints.
//! @param pSum OUT     interpolated point
//! @param pPoint0 IN      point corresponding to fractionParameter 0.0
//! @param fractionParameter IN      fractional parametric coordinate (0.0 is the start of the segment, 1.0 is the end, 0.5 is midpoint)
//! @param pPoint1 IN      point corresponding to fractionParameter 1.0
//! @group "DPoint3d Addition"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_interpolate
(
DPoint3dP pSum,
DPoint3dCP pPoint0,
double           fractionParameter,
DPoint3dCP pPoint1
);

//!
//! @description Test if the vector from the Origin to the TestPoint is within the smaller
//!    angle between the vectors from the Origin to the Target points.
//! @param pTestPoint IN      point to test
//! @param pOrigin IN      origin for vectors
//! @param pTarget1 IN      first target point
//! @param pTarget2 IN      second target point
//! @return true if the test point is within the angle
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_isPointInSmallerSector
(
DPoint3dCP pTestPoint,
DPoint3dCP pOrigin,
DPoint3dCP pTarget1,
DPoint3dCP pTarget2
);

//!
//! @description Test if a point is within the counter-clockwise sector defined by
//!    an origin and two boundary points, with an up vector to determine which
//!    direction is counter clockwise.
//! @param pTestPoint IN      point to test
//! @param pOrigin IN      origin for vectors
//! @param pTarget0 IN      first target point
//! @param pTarget1 IN      second target point
//! @param pUpVector IN      vector pointing upward from the plane in which CCW direction is determined
//! @return true if the test point is within the angle
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_isPointInCCWSector
(
DPoint3dCP pTestPoint,
DPoint3dCP pOrigin,
DPoint3dCP pTarget0,
DPoint3dCP pTarget1,
DVec3dCP pUpVector
);

//!
//! @description Computes the (cartesian) distance between two points.
//! @param pPoint1 IN      first point
//! @param pPoint2 IN      second point
//! @return distance between points
//! @group "DPoint3d Distance"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_distance
(
DPoint3dCP pPoint1,
DPoint3dCP pPoint2
);

//!
//! @description Computes the squared distance between two points.
//! @param pPoint1 IN      first point
//! @param pPoint2 IN      second point
//! @return squared distance between the points
//! @group "DPoint3d Distance"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_distanceSquared
(
DPoint3dCP pPoint1,
DPoint3dCP pPoint2
);

//!
//! @description Computes the squared distance between two points, using only the xy parts.
//! @param pPoint1 IN      first point
//! @param pPoint2 IN      second point
//! @return squared distance between the XY projections of the two points (i.e. any z difference is ignored)
//! @group "DPoint3d Distance"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_distanceSquaredXY
(
DPoint3dCP pPoint1,
DPoint3dCP pPoint2
);

//!
//! @description Computes the distance between two points, using only x and y components.
//! @param pPoint1 IN      first point
//! @param pPoint2 IN      second point
//! @return distance between the XY projections of the two points (i.e. any z difference is ignored)
//! @group "DPoint3d Distance"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_distanceXY
(
DPoint3dCP pPoint1,
DPoint3dCP pPoint2
);

//!
//! @description Finds the largest absolute value among the components of a point or vector.
//! @param pVector IN      point or vector
//! @return largest absolute value among point coordinates
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_maxAbs
(
DPoint3dCP pVector
);

//!
//! @description Finds the largest absolute value among the components of a difference of points or vectors.
//! @param pVector1 IN      first point or vector
//! @param pVector2 IN      second point or vector
//! @return largest absolute value among point/vector coordinates
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP double bsiDPoint3d_maxAbsDifference
(
DPoint3dCP pVector1,
DPoint3dCP pVector2
);

//!
//! @description Test for exact equality between all components of two points or vectors.
//! @param pVector1 IN      first point or vector
//! @param pVector2 IN      second point or vector
//! @return true if the points are identical
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_pointEqual
(
DPoint3dCP pVector1,
DPoint3dCP pVector2
);

//!
//! @description Test if the x, y, and z components of two points or vectors are equal within tolerance.
//! @remarks Tests are done against the absolute value of <EM>each</EM> component difference
//!    (i.e., not against the sum of these absolute differences or the square root of the sum of the squares of these differences).
//! @param pVector1 IN      first point or vector
//! @param pVector2 IN      second point or vector
//! @param tolerance IN      tolerance
//! @return true if all components are within given tolerance of each other.
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_pointEqualTolerance
(
DPoint3dCP pVector1,
DPoint3dCP pVector2,
double                  tolerance
);

//!
//! @description Computes the coordinates of pPoint under the translation and scaling that puts 000 at pCube->low and 111 at pCube->high.
//! @param pParameters OUT     NPC coordinates of pPoint within pCube
//! @param pPoint IN      point whose NPC coordinates are to be computed
//! @param pCube IN      range box whose corners map to 000 and 111
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_npcCoordinates
(
DPoint3dP pParameters,
DPoint3dCP pPoint,
DRange3dCP pCube
);

//!
//! @description Tests if a point is a disconnect (separator) point.
//! @param pPoint IN      point to test
//! @return true if the any component of the point is the disconnect value
//! 
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_isDisconnect
(
DPoint3dCP pPoint
);

//!
//! @description Initialize a point with all coordinates as the disconnect value.
//! @param pPoint OUT     point to initialize
//! 
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_initDisconnect
(
DPoint3dP pPoint
);

//!
//! @description Add an offset vector to a given starting point or vector,
//!       with the offset specified in XY polar form, i.e. as angle and distance.
//! @param pSum OUT     computed sum
//! @param pOrigin IN      point or vector to offset
//! @param angleRadians IN      angle from x-axis to projection of offset vector in xy-plane
//! @param distanceXY IN      length of projection of offset vector in xy-plane
//! @param dz IN      z part of offset vector
//! @group "DPoint3d Addition"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_addAngleDistance
(
DPoint3dP pSum,
DPoint3dCP pOrigin,
double      angleRadians,
double      distanceXY,
double      dz
);

//!
//! @description Initialize a point from polar angle and distance from origin.
//! @param pPoint OUT     computed point
//! @param angleRadians IN      angle in xy-plane from x-axis
//! @param distanceXY IN      xy plane distance from origin to result point
//! @param z IN      z part of point
//! @group "DPoint3d Initialization"
//!
Public GEOMDLLIMPEXP void bsiDPoint3d_initFromAngleDistance
(
DPoint3dP pPoint,
double      angleRadians,
double      distanceXY,
double      z
);

//!
//! @description Sweep a point along a specified direction until it is on a plane.
//! @param pPoint IN start point.
//! @param pResult OUT initialized point
//! @param pSweepMultiplier OUT muliplier of sweep vector.
//! @param pSweepDirection IN direction to project.  If NULL, the plane normal is used.
//! @param pPlane IN the target plane.
//! @return false if projection direction is parallel to the plane.  The result
//!    is then a copy of the source.
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_sweepToPlane
(
DPoint3dCP  pPoint,
DPoint3dP   pResult,
double *    pSweepMultiplier,
DVec3dCP    pSweepDirection,
DPlane3dCP  pPlane
);

//!
//! @description Sweep a weighted point along a specified direction until it is on a plane.
//!        Return the weighted plane point.
//! @param pPoint IN weighted start point.
//! @param    pResult OUT initialized point
//! @param    pSweepMultiplier OUT muliplier of sweep vector.
//! @param    weight IN weight of both start point and result.
//! @param    pSweepDirection IN direction to project.  If NULL, the plane normal is used.
//! @param    pPlane IN the target plane.
//! @return false if projection direction is parallel to the plane.  The result
//!    is then a copy of the source.
//! @group "DPoint3d Queries"
//!
Public GEOMDLLIMPEXP bool    bsiDPoint3d_sweepWeightedToPlane
(
DPoint3dCP  pPoint,
DPoint3dP   pResult,
double *    pSweepMultiplier,
double      weight,
DVec3dCP    pSweepDirection,
DPlane3dCP  pPlane
);
// SPECIAL -- from DeprecatedFunctions.cpp
/*-----------------------------------------------------------------*//**
* @description Sets this instance to the barycentric coordinates of pPoint
* relative to the triangle (pVertex0, pVertex1, pVertex2) in the xy-plane.
*
* @instance pInstance   <= barycentric coordinates of pPoint relative to T
* @param pPoint         => point in plane
* @param pVertex0       => vertex 0 of triangle T
* @param pVertex1       => vertex 1 of triangle T
* @param pVertex2       => vertex 2 of triangle T
* @see bsiDPoint3d_barycentricFromDPoint2dTriangleVectors
* @see bsiDPoint2d_fromBarycentricAndDPoint2dTriangle
* @group "DPoint3d Barycentric"
* @return true if and only if the area of T is sufficiently large.
* @bsihdr                                                                       DavidAssaf      10/98
+---------------+---------------+---------------+---------------+------*/
Public  GEOMDLLIMPEXP bool    bsiDPoint3d_barycentricFromDPoint2dTriangle
(
DPoint3dR uvw,
DPoint3dR dUVWdX,
DPoint3dR dUVWdY,
double   &area,
DPoint2dCR point,
DPoint2dCR vertex0,
DPoint2dCR vertex1,
DPoint2dCR vertex2
);
/*-----------------------------------------------------------------*//**
* @description Sets this instance to the barycentric coordinates of pPoint
* relative to the triangle (pVertex0, pVertex1, pVertex2) in space.
* Points p and r in space have the same barycentric coordinates relative to
* T if and only if they project to the same point q in the plane of T;
* then their barycentric coordinates relative to T are those of q.
*
* @instance pInstance   <= barycentric coordinates of pPoint relative to T
* @param pPoint         => point in space
* @param pVertex0       => vertex of triangle T
* @param pVertex1       => vertex of triangle T
* @param pVertex2       => vertex of triangle T
* @see bsiDPoint3d_barycentricFromDPoint2dTriangle
* @see bsiDPoint3d_fromBarycentricAndDPoint3dTriangle
* @return true if and only if the area of T is sufficiently large.
* @group "DPoint3d Barycentric"
* @bsihdr                                                                       DavidAssaf      10/98
+---------------+---------------+---------------+---------------+------*/
Public  GEOMDLLIMPEXP bool    bsiDPoint3d_barycentricFromDPoint3dTriangle

(
DPoint3dP pInstance,
DPoint3dCP pPoint,
DPoint3dCP pVertex0,
DPoint3dCP pVertex1,
DPoint3dCP pVertex2
);

/*-----------------------------------------------------------------*//**
* @description Sets this instance to the point in the plane with the given barycentric
* coordinates relative to triangle T (pVertex0, pVertex1, pVertex2).
*
* @instance pInstance   <= point with given barycoords relative to T
* @param pBaryCoords    => barycentric coordinates relative to T
* @param pVertex0       => vertex 0 of triangle T
* @param pVertex1       => vertex 1 of triangle T
* @param pVertex2       => vertex 2 of triangle T
* @see bsiDPoint3d_barycentricFromDPoint2dTriangle
* @group "DPoint2d Barycentric"
* @bsihdr                                                               DavidAssaf      10/98
+---------------+---------------+---------------+---------------+------*/
Public  GEOMDLLIMPEXP void bsiDPoint2d_fromBarycentricAndDPoint2dTriangle

(
DPoint2dP pInstance,
DPoint3dCP pBaryCoords,
DPoint2dCP pVertex0,
DPoint2dCP pVertex1,
DPoint2dCP pVertex2
);

END_BENTLEY_NAMESPACE

