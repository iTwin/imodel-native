/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See COPYRIGHT.md in the repository root for full copyright notice.
*--------------------------------------------------------------------------------------------*/

/* DO NOT EDIT!  THIS FILE IS GENERATED. */

#pragma once


/*---------------------------------------------------------------------------------**//**
@description Input is 3 points on an arc, plus a function which will be applied to
    convert points to a truncated format.   This function computes the center of the
    circle through the 3 true points, and then returns three truncated points which can
    serve as start-middle-end of an arc whose center is close to the base center in spite of
    noise introduced by the truncation.
@param pStartOut OUT the (truncated) start point.
@param pMiddleOut OUT the (truncated) along-arc point. This will be in the specified fractional
     part of the arc.
@param pEndOut OUT the (truncated) end point.
@param pTrueCenterOut OUT the computed center for the three input points.
@param pBestCenterOut OUT the computed center for the three output (truncated) points.
@param pStartIn IN the full-precision start point.
@param pMiddleIn IN the full precision along-arc point.
@param pEndIn IN the full precision end point.
@param coordinateFunction IN a function pointer.  This function may be called repeatedly with signature
            coordinateFunction (DPoint3d *pOut, DPoint3d const *pIn, void *pContext)
        to convert (truncate?) a full precision point pIn to a storage-format point pOut.
@param pContext IN caller's data context for truncation function.
@param f0 IN start fraction for search interval.   (Suggested value: 0.49, maybe as low as 0.4)
@param f1 IN end fraction for search interval.  (Suggested value: 0.51, maybe as high as 0.6)
@param maxTest IN number of mid points to test (Suggested value: 101 to 1001)
@param centerTol IN tolerance to trigger (desired) early termination.   If a center is found
        within this distance of the true center, the search is termianted.
* @bsimethod                                                    BentleySystems  12/2005
+---------------+---------------+---------------+---------------+---------------+------*/
Public void searchTruncatedCoordinateMidpointsToMatchCenter
(
DPoint3d *pStartOut,
DPoint3d *pMiddleOut,
DPoint3d *pEndOut,
DPoint3d *pTrueCenterOut,
DPoint3d *pBestCenterOut,
DPoint3d const *pStartIn,
DPoint3d const *pMiddleIn,
DPoint3d const *pEndIn,
void (*coordinateFixupFunction)(DPoint3d *pOut, DPoint3d const *pIn, void *pContext),
void *pContext,
double f0,
double f1,
int maxTest,
double centerTol
);

