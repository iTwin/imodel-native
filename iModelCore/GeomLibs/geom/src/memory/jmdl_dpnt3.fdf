/*--------------------------------------------------------------------------------------+
|
|     $Source: geom/src/memory/jmdl_dpnt3.fdf $
|    $RCSfile: copyright.txt,v $
|   $Revision: 1.1 $
|       $Date: 2006/08/02 18:07:13 $
|     $Author: DavidAssaf $
|
|  $Copyright: (c) 2014 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/

/* DO NOT EDIT!  THIS FILE IS GENERATED. */

#pragma once
BEGIN_BENTLEY_GEOMETRY_NAMESPACE

/**
* @see
* @return EmbeddedDPoint3dArray
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP EmbeddedDPoint3dArray *jmdlVArrayDPoint3d_new
(
void
);

/**
* Initialize a given EmbeddedDPoint3dArray header.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_init
(
EmbeddedDPoint3dArray     *pHeader
);

/**
* @param pHeader
* @see
* @return EmbeddedDPoint3dArray
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP EmbeddedDPoint3dArray *jmdlVArrayDPoint3d_free
(
EmbeddedDPoint3dArray *pHeader
);

/**
* @param pHeader
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_empty
(
EmbeddedDPoint3dArray *pHeader
);

/**
* @param pHeader
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_releaseMem
(
EmbeddedDPoint3dArray *pHeader
);

/**
* @see
* @return EmbeddedDPoint3dArray
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP EmbeddedDPoint3dArray *jmdlVArrayDPoint3d_grab
(
void
);

/**
* @param pHeader
* @see
* @return EmbeddedDPoint3dArray
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP EmbeddedDPoint3dArray *jmdlVArrayDPoint3d_drop
(
EmbeddedDPoint3dArray     *pHeader
);

/**
* @param pHeader0 IN OUT  first array header
* @param pHeader1 IN OUT  second array header
* @see
* @return EmbeddedDPoint3dArray
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void     jmdlVArrayDPoint3d_swapContents
(
EmbeddedDPoint3dArray     *pHeader0,
EmbeddedDPoint3dArray     *pHeader1
);

/**
* @param    pHeader
* @param n
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_extend
(
EmbeddedDPoint3dArray     *pHeader,
int                 n
);

/**
* Reallocate the buffer to accommodate exactly n DPoint3ds.
* NOTE: this will truncate the contents of this instance if its count is
* greater than n.
*
* @param    pHeader
* @param    n       Number of DPoint3ds to accommodate, no more, no less.
* @return false if unable to reallocate the buffer.
* @bsimethod                                                    BentleySystems  03/99
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP bool    jmdlVArrayDPoint3d_setExactBufferSize
(
EmbeddedDPoint3dArray     *pHeader,
int                 n
);

/**
* @param    pHeader
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_getCount
(
const EmbeddedDPoint3dArray *pHeader
);

/**
* @param    pHeader
* @param pPoint
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_addPoint
(
EmbeddedDPoint3dArray         *pHeader,
const DPoint3d          *pPoint
);

/**
* @param pPoint OUT     point to be normalized and added to the array.
* @return true if the point had non-zero weight.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP bool    jmdlVArrayDPoint3d_addDPoint4d
(
EmbeddedDPoint3dArray         *pHeader,
const DPoint4d          *pPoint
);

/**
* @param pHeader
* @param pPoint
* @param index
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_insert
(
        EmbeddedDPoint3dArray         *pHeader,
const   DPoint3d                *pPoint,
        int                     index
);

/**
* @param pHeader IN OUT  header of array receiveing points
* @param pPoint IN      array of points to add
* @param n IN      number of points to add
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_addArray
(
      EmbeddedDPoint3dArray       *pHeader,
const DPoint3d              *pPoint,
      int                   n
);

/**
* @param pHeader IN OUT  header of array receiveing points
* @param pPoint IN      array of points to add
* @param index IN      index location for adding the array
* @param n IN      number of points to add
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_addDPoint3dArrayAtIndex
(
      EmbeddedDPoint3dArray       *pHeader,
const DPoint3d              *pPoint,
      int                   index,
      int                   n
);

/**
* @param    pHeader
* @param pPoint
* @param nGot
* @param i0
* @param nreq
* @see
* @return SUCCESS if index nGot > 0
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_getArray
(
const EmbeddedDPoint3dArray   *pHeader,
DPoint3d                *pPoint,
int                     *nGot,
int                     i0,
int                     nreq
);

/**
* @param    pHeader
* @param pointP
* @param index
* @see
* @return SUCCESS if index is valid
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_getDPoint3d
(
const EmbeddedDPoint3dArray   *pHeader,
DPoint3d                *pointP,
int                     index
);

/**
* @param pHeader
* @param pointP
* @param index
* @see
* @return SUCCESS if
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_setDPoint3d
(
EmbeddedDPoint3dArray   *pHeader,
DPoint3d          *pointP,
int               index
);

/**
* Compute the cross product of the vectors from point 0 to point 1 and
* point 0 to point 2.
* @param pProduct OUT     cross product vector
* @param pHeader IN      array of points
* @param index0 IN      reference point index
* @param index1 IN      target point of vector 1
* @param index2 IN      target point of vector 2
* @see
* @return SUCCESS if
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_crossProduct3Points
(
const EmbeddedDPoint3dArray   *pHeader,   /* IN      array of points */
DPoint3d                *pProduct,  /* OUT     cross product vector */
int                     index0,     /* IN      reference point index */
int                     index1,     /* IN      target point of vector 1 */
int                     index2      /* IN      target point of vector 2 */
);

/**
* @param pHeader IN OUT  array from which to get block
* @param n IN      number of entries requested
* @see
* @return Temporary pointer to block.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP DPoint3d *jmdlVArrayDPoint3d_getBlock
(
EmbeddedDPoint3dArray *pHeader,
int             n
);

/**
* @param pVertex Packed vertex array
* @param int            maxVertex vertex array limit
* @param pHeader master vertex array
* @param pIndex index array
* @param int            nIndex               number of vertices
* @see
* @return int
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_getIndexedArray
(
const   EmbeddedDPoint3dArray *pHeader,
DPoint3d        *pVertex,
        int             maxVertex,
        int             *pIndex,
        int             nIndex
);

/**
* @param pHeader
* @param index
* @see
* @return const
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP DPoint3d* jmdlVArrayDPoint3d_getPtr
(
EmbeddedDPoint3dArray *pHeader,
      int        index
);

/**
* @param pHeader
* @param index
* @see
* @return const
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP const DPoint3d* jmdlVArrayDPoint3d_getConstPtr
(
const EmbeddedDPoint3dArray *pHeader,
      int        index
);

/**
* @param pHeader IN      point array header
* @param pRange OUT     computed range. Not set if no points.
* @see
* @return ERROR if no points in array.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_getRange
(
const EmbeddedDPoint3dArray   *pHeader,
DRange3d                *pRange
);

/**
* @param    pHeader IN      point array header
* @param pNormal OUT     plane normal
* @param pOrigin OUT     plane origin
* @param pError OUT     nonplanarity estimate.
* @see
* @return ERROR if no points in array.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_getPolygonPlane
(
const EmbeddedDPoint3dArray   *pHeader,
DPoint3d                *pNormal,
DPoint3d                *pOrigin,
double                  *pError
);

/**
* @param pHeader IN OUT  array to transform
* @param pTransform IN      transform to apply
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_applyTransform
(
EmbeddedDPoint3dArray     *pHeader,
const Transform  *pTransform
);

/**
* @param pDest IN      destination array
* @param pSource IN OUT  array to transform
* @param pTransform IN      transform to apply
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_applyTransform2
(
EmbeddedDPoint3dArray   *pDest,
const EmbeddedDPoint3dArray   *pSource,
const Transform  *pTransform
);

/**
* @param pHeader IN OUT  array to transform
* @param pMatrix IN      transform to apply
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_applyMatrix
(
EmbeddedDPoint3dArray     *pHeader,
const RotMatrix *pMatrix
);

/**
* @param pHeader
* @param index1
* @param index2
* @see
* @return SUCCESS if
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_swapValues
(
EmbeddedDPoint3dArray *pHeader,
int             index1,
int             index2
);

/**
* @param pDestHeader
* @param pSourceHeader
* @see
* @return SUCCESS if
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP StatusInt jmdlVArrayDPoint3d_copy
(
EmbeddedDPoint3dArray *pDestHeader,
const EmbeddedDPoint3dArray *pSourceHeader
);

/**
* @param pDestHeader
* @param VBArray_SortFunction pFunction
* @see
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_sort
(
EmbeddedDPoint3dArray *pDestHeader,
VBArray_SortFunction pFunction
);

/**
* Writes a DPoint3d array to the stream.
*
* @param pStream    IN OUT  data stream ptr
* @param pArrayHdr  IN      header for DPoint3d array to write to data stream
* @param pFuncs     IN      callback bundle for reading/writing to the stream
* @return false if error; true if success
* @see #jmdlVArrayDPoint3d_loadFromDataStream
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP bool    jmdlVArrayDPoint3d_storeToDataStream
(
void                    *pStream,
const EmbeddedDPoint3dArray   *pArrayHdr,
const MTG_IOFuncs       *pFuncs
);

/**
* Writes or appends to a DPoint3d array the given stream of doubles, as written
* by jmdlVArrayDPoint3d_storeToDataStream.
*
* @param pArrayHdr  IN OUT  header for DPoint3d array to read from data stream
* @param pStream    IN OUT  data stream ptr
* @param pFuncs     IN      callback bundle for reading/writing to the stream
* @param bAppend    IN      true to append new points; false to overwrite old points
* @return false if error; true if success
* @see #jmdlVArrayDPoint3d_storeToDataStream
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP bool    jmdlVArrayDPoint3d_loadFromDataStream
(
EmbeddedDPoint3dArray           *pArrayHdr,
void                    *pStream,
const MTG_IOFuncs       *pFuncs,
bool                    bAppend
);

/**
* Add points of a transfinite mapping grid.
* The 4 input arrays contain the boundary points in order around the boundary.
* Nominally, the last point in each array must match the zeroth of the next array.
* However, the code never references any point indexed num0-1 or num1-1 -- it
* always uses point 0 of the "next" array.   That is, corner points are
* taken from beginning of the array for the outgoing side, not
* from the end of array for the incoming side.
*
* Points are entered from left to right along each row, starting at the bottom.
* @param pXYZ0 IN      array of num0 points along lower edge, left to right.
* @param pXYZ1 IN      array of num1 points along right edge, bottom to top.
* @param pXYZ2 IN      array of num0 points along upper edge, right to left
* @param pXYZ3 IN      array of num1 points along left edge, top to bottom.
* @param num0 IN      number of points along bottom and top edges of grid.  num0 - 1 points
*               of pXYZ0 and pXYZ2 are referenced.
* @param num1 IN      number of points along left and right edges of grid.  num1 - 1 points
*               of pXYZ1 and pXYZ3 are referenced.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP void jmdlVArrayDPoint3d_addTransfiniteGrid
(
EmbeddedDPoint3dArray *pArray,
DPoint3d *pXYZ0,
DPoint3d *pXYZ1,
DPoint3d *pXYZ2,
DPoint3d *pXYZ3,
int       num0,
int       num1
);

/*--------------------------------------------------------------------*//*
* @param pXYZArray IN      array of n points, containing possibly matched points.
* @param pCycleArray IN      array of n indices, arranged as cyclic linked lists
*               joining points with identical points.  May be null pointer.
* @param pBlockedIndexArray IN      array containing packed blocks of point indices,
*               each terminated by index -1.  This will contain at least n+1
*               and at most 2n indices.  May be null pointer.
* @param absTol = absolute tolerance for common points.
* @param relTol = relative tolerance for common points.
* @return number of distinct points, hence number of cycles and blocks
*               in the index arrays.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_identifyMatchedVertices
(
const EmbeddedDPoint3dArray *pXYZArray,
EmbeddedIntArray      *pCycleArray,
EmbeddedIntArray      *pBlockedIndexArray,
double          absTol,
double          relTol
);

/*--------------------------------------------------------------------*//*
* @param pXYZArray IN      array of n points, containing possibly matched points.
* @param pCycleArray IN      array of n indices, arranged as cyclic linked lists
*               joining points with identical points.  May be null pointer.
* @param pBlockedIndexArray IN      array containing packed blocks of point indices,
*               each terminated by index -1.  This will contain at least n+1
*               and at most 2n indices.  May be null pointer.
* @param absTol = absolute tolerance for common points.
* @param relTol = relative tolerance for common points.
* @return number of distinct points, hence number of cycles and blocks
*               in the index arrays.
* @bsimethod                                                    BentleySystems  12/97
+---------------+---------------+---------------+---------------+------*/
Public GEOMDLLIMPEXP int jmdlVArrayDPoint3d_identifyMatchedVerticesXY
(
const EmbeddedDPoint3dArray *pXYZArray,
EmbeddedIntArray      *pCycleArray,
EmbeddedIntArray      *pBlockedIndexArray,
double          absTol,
double          relTol
);

END_BENTLEY_GEOMETRY_NAMESPACE