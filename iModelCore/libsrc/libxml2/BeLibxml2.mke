#---------------------------------------------------------------------------------------------
#  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
#  See LICENSE.md in the repository root for full copyright notice.
#---------------------------------------------------------------------------------------------

HAVE_PERMISSION_TO_COMPILE_AT_W3 = 1

# Export/make visible all functions in libxml2. 
GCC_DEFAULT_VISIBILITY = default

# Ignore warnings in third-party code.
IS_THIRD_PARTY_LIBRARY = 1

# libsrc\libxml2\xmlIO.c: In function 'xmlParserGetDirectory':
# libsrc\libxml2\xmlIO.c:3659:31: error: comparison between pointer and integer [-Werror]
GCC_NOSTRICT = 1

%if defined(BUILD_USING_VS2012)
    BUILD_TOOLSET="VS2012"
    OVERRIDE_DEFAULT_TOOLSET=VS2012
    VC_Version = _VC11
%endif

%include mdl.mki

%if defined(iTwinNativeThirdParty)
  dllPrefix = Be
%else
  dllPrefix = iTwin
%endif

appName = $(dllPrefix)Libxml2$(VC_Version)
baseDir = $(_MakeFilePath)vendor/
o = $(OutputRootDir)build/BeLibxml2/
CCompPDBName = $(appName)

%if $(TARGET_PLATFORM) == "iOS" || $(TARGET_PLATFORM) == "Android"
    nameToDefine = __MT__
    %include cdefapnd.mki
%endif

always:
    !~@mkdir $(o)

#----------------------------------------------------------------------

$(BuildContext)VendorAPI/libxml : $(baseDir)include/libxml
    $(LinkFirstDepToFirstTargetAsDirectory)

$(BuildContext)Delivery/libxml2-license.txt : $(baseDir)Copyright
    $(LinkFirstDepToFirstTarget)

#----------------------------------------------------------------------

# The trick here is, we don't want to modify the library code to compile on the Microsoft x64 compiler (which generates these warnings). The warnings are not generated by the Microsoft x86 compiler (and presumably not by the GCC x86 or x64 compilers).
# Further, these switches will only be recognized by the Microsoft compiler. However, there are no x64 mobile platforms being targetted yet, so detecting x64 suffices.
# We believe all instances of these warning are (relatively) safe, such as using char* pointer arithmetic to detect string lengths, or storing the result of strlen as an int.

%if $(TARGET_PROCESSOR_ARCHITECTURE)=="x64"
    # C4244: 'argument' : conversion from 'type1' to 'type2', possible loss of data
    CCompOpts + -wd4244

    # C4267: 'var' : conversion from 'size_t' to 'type', possible loss of data
    CCompOpts + -wd4267
%endif

# Version 2.9 of libxml switched from regular int to unsigned int for specifying string length.  This caused similar but different errors than the ones we are suppressing above.

%if $(TARGET_PROCESSOR_ARCHITECTURE)=="x86" || $(TARGET_PLATFORM) == "WinRT"
    #C4018: '>' : signed/unsigned mismatch
    CCompOpts + -wd4018

    #C4244: warning C4244: 'function' : conversion from 'int64_t' to 'const size_t', possible loss of data
    CCompOpts + -wd4244
%endif

# Prefer to disable warnings in third-party code vs. editing it.
%if ("APPLE_CLANG" == $(BUILD_TOOLSET))
    OldLLVMCommonCompOpts =% $(LLVMCommonCompOpts)
    LLVMCommonCompOpts + -Wno-error=implicit-function-declaration
%endif

dirToSearch = $(BuildContext)VendorAPI/icu4c/
%include cincapnd.mki

# Rather than change every file that has #include <private/buf.h>
dirToSearch = $(baseDir)include/
%include cincapnd.mki

# In libxml, xmlversion is generated like this. 
# There are a number of Bentley changes to the file and the version doesn't 
# change between commits so I'm just going to to commit it as before.
# $(baseDir)include/libxml/xmlversion.h : $(baseDir)include/libxml/xmlversion.h.in
#     chdir $(baseDir)win32
#     cscript configure.js
#     chdir $(baseDir)

#----------------------------------------------------------------------
# Note: C compiler must be used, not C++
#----------------------------------------------------------------------
BeLibxmlCompileDepends=$(_MakeFileSpec) $(baseDir)libxml.h $(baseDir)include/libxml/xmlversion.h

MultiCompileDepends=$(_MakeFileSpec) $(BeLibxmlCompileDepends)
%include MultiCppCompileRule.mki

$(o)buf$(oext)              : $(baseDir)buf.c ${BeLibxmlCompileDepends}

$(o)c14n$(oext)             : $(baseDir)c14n.c ${BeLibxmlCompileDepends}

$(o)catalog$(oext)          : $(baseDir)catalog.c ${BeLibxmlCompileDepends}

$(o)chvalid$(oext)          : $(baseDir)chvalid.c ${BeLibxmlCompileDepends}

$(o)debugXML$(oext)         : $(baseDir)debugXML.c ${BeLibxmlCompileDepends}

$(o)dict$(oext)             : $(baseDir)dict.c ${BeLibxmlCompileDepends}

$(o)DOCBparser$(oext)       : $(baseDir)DOCBparser.c ${BeLibxmlCompileDepends}

$(o)encoding$(oext)         : $(baseDir)encoding.c ${BeLibxmlCompileDepends}

$(o)entities$(oext)         : $(baseDir)entities.c ${BeLibxmlCompileDepends}

$(o)error$(oext)            : $(baseDir)error.c ${BeLibxmlCompileDepends}

$(o)globals$(oext)          : $(baseDir)globals.c ${BeLibxmlCompileDepends}

$(o)hash$(oext)             : $(baseDir)hash.c ${BeLibxmlCompileDepends}

$(o)HTMLparser$(oext)       : $(baseDir)HTMLparser.c ${BeLibxmlCompileDepends}

$(o)HTMLtree$(oext)         : $(baseDir)HTMLtree.c ${BeLibxmlCompileDepends}

$(o)legacy$(oext)           : $(baseDir)legacy.c ${BeLibxmlCompileDepends}

$(o)list$(oext)             : $(baseDir)list.c ${BeLibxmlCompileDepends}

$(o)nanoftp$(oext)          : $(baseDir)nanoftp.c ${BeLibxmlCompileDepends}

$(o)nanohttp$(oext)         : $(baseDir)nanohttp.c ${BeLibxmlCompileDepends}

$(o)parser$(oext)           : $(baseDir)parser.c ${BeLibxmlCompileDepends}

$(o)parserInternals$(oext)  : $(baseDir)parserInternals.c ${BeLibxmlCompileDepends}

$(o)pattern$(oext)          : $(baseDir)pattern.c ${BeLibxmlCompileDepends}

$(o)relaxng$(oext)          : $(baseDir)relaxng.c ${BeLibxmlCompileDepends}

$(o)SAX$(oext)              : $(baseDir)SAX.c ${BeLibxmlCompileDepends}

$(o)SAX2$(oext)             : $(baseDir)SAX2.c ${BeLibxmlCompileDepends}

$(o)schematron$(oext)       : $(baseDir)schematron.c ${BeLibxmlCompileDepends}

$(o)threads$(oext)          : $(baseDir)threads.c ${BeLibxmlCompileDepends}

$(o)tree$(oext)             : $(baseDir)tree.c ${BeLibxmlCompileDepends}

$(o)uri$(oext)              : $(baseDir)uri.c ${BeLibxmlCompileDepends}

$(o)valid$(oext)            : $(baseDir)valid.c ${BeLibxmlCompileDepends}

$(o)xinclude$(oext)         : $(baseDir)xinclude.c ${BeLibxmlCompileDepends}

$(o)xlink$(oext)            : $(baseDir)xlink.c ${BeLibxmlCompileDepends}

$(o)xmlIO$(oext)            : $(baseDir)xmlIO.c ${BeLibxmlCompileDepends}

$(o)xmlmemory$(oext)        : $(baseDir)xmlmemory.c ${BeLibxmlCompileDepends}

$(o)xmlmodule$(oext)        : $(baseDir)xmlmodule.c ${BeLibxmlCompileDepends}

$(o)xmlreader$(oext)        : $(baseDir)xmlreader.c ${BeLibxmlCompileDepends}

$(o)xmlregexp$(oext)        : $(baseDir)xmlregexp.c ${BeLibxmlCompileDepends}

$(o)xmlsave$(oext)          : $(baseDir)xmlsave.c ${BeLibxmlCompileDepends}

$(o)xmlschemas$(oext)       : $(baseDir)xmlschemas.c ${BeLibxmlCompileDepends}

$(o)xmlschemastypes$(oext)  : $(baseDir)xmlschemastypes.c ${BeLibxmlCompileDepends}

$(o)xmlstring$(oext)        : $(baseDir)xmlstring.c ${BeLibxmlCompileDepends}

$(o)xmlunicode$(oext)       : $(baseDir)xmlunicode.c ${BeLibxmlCompileDepends}

$(o)xmlwriter$(oext)        : $(baseDir)xmlwriter.c ${BeLibxmlCompileDepends}

$(o)xpath$(oext)            : $(baseDir)xpath.c ${BeLibxmlCompileDepends}

$(o)xpointer$(oext)         : $(baseDir)xpointer.c ${BeLibxmlCompileDepends}

$(o)xzlib$(oext)            : $(baseDir)xzlib.c ${BeLibxmlCompileDepends}

#----------------------------------------------------------------------
#   Below is the listing of source files that are NOT meant to be 
#        compiled into the primary DLL/SO even though they live in the 
#        same source code directory. 
#----------------------------------------------------------------------
%if defined (NOT_INCLUDED)
    # testing
    runsuite.c
    runtest.c
    runxmlconf.c
    testapi.c
    testAutomata.c
    testC14N.c
    testchar.c
    testdict.c
    testdso.c
    testHTML.c
    testModule.c
    testReader.c
    testrecurse.c
    testRegexp.c
    testRelax.c
    testSAX.c
    testSchemas.c
    testThreads.c
    testURI.c
    testXPath.c
    xmllint.c
        
    # utility program
    xmlcatalog.c
        
    # trio
    trio.c
    trionan.c
    triostr.c
%endif

%include MultiCppCompileGo.mki
objs =% $(MultiCompileObjectList)

%if ("APPLE_CLANG" == $(BUILD_TOOLSET))
    LLVMCommonCompOpts = $(OldLLVMCommonCompOpts)
%endif

#----------------------------------------------------------------------
#   Create the Bentley DLL
#----------------------------------------------------------------------
DLM_NAME = $(appName)
DLM_OBJECT_FILES = $(objs)
DLM_EXPORT_OBJS = $(DLM_OBJECT_FILES)
DLM_OBJECT_DEST = $(o)
DLM_DEST = $(o)
DLM_EXPORT_DEST = $(o)
DLM_NOENTRY = 1
DLM_NO_BENTLEY_LIB = 1

%if $(TARGET_PLATFORM) == "Windows"
    LINKER_LIBRARIES = ws2_32.lib
%endif

LINKER_LIBRARIES + $(BuildContext)SubParts/Libs/$(shlibprefix)$(dllPrefix)Icu4c$(libext)

DLM_CONTEXT_LOCATION = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

%include $(sharedMki)linkLibrary.mki
