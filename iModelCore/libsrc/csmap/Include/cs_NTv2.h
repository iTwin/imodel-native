/*
 * Copyright (c) 2008, Autodesk, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Autodesk, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Autodesk, Inc. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Autodesk, Inc. OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/******************************************************************************
*******************************************************************************
**                                                                           **
**   Canadian National Transformation, Version 2 Grid Interpolation File     **
**                                                                           **
*******************************************************************************
******************************************************************************/
/* For a short period of time (~2 years), the file format generated by the
   Australians was slightly different from that defined by the original
   Canadian specification.  This difference was due to the fact that the
   Canadians used FORTRAN while the Australian used 'C'.  Thus, the size and
   packing of the various mixture of data elements ended up being slightly
   different. */
enum csNTv2Type {csNTv2TypeNone = 0,
				 csNTv2TypeCanada,
				 csNTv2TypeAustralia
			    };

/* The structures immediately following emulate the format of data in disk
   files.  Thus, structure packing becomes critical.  We establish the packing
   we need based on the specific compilers we know something about. */
#if   _RUN_TIME == _rt_BORLAND16 || _RUN_TIME == _rt_BORLAND32
#	pragma option -a1
#elif _RUN_TIME == _rt_METAWARE
#	pragma Align_members (1)
#elif _RUN_TIME == _rt_MSC16 || _RUN_TIME == _rt_MSVC16 || _RUN_TIME == _rt_MSDOTNET || \
														   _RUN_TIME == _rt_MSWIN64 ||  \
														   _RUN_TIME == _rt_MSVC32 ||   \
														   _RUN_TIME == _rt_WINCE
#	pragma pack (1)
#elif _RUN_TIME == _rt_HPUX
#	pragma pack 1
#elif _RUN_TIME == _rt_AIX
#	pragma options align=packed
#elif _RUN_TIME >= _rt_UNIXPCC
#	pragma pack (1)
#else
	/* I don't know what would work for WATCOM.  You may need to
	   add your own stuff here depeneding on the compiler.  You need
	   to enforce a packing factor of 1; i.e. the compiler MUST not
	   add any packing to the structure for alignment. */
#endif

/* The following structure is used to read data elements from the
   Canadian NT v2 data file.  This is common to both variations.
   Generally speaking, the accuracy values are ignored.

   Note that these files are all based on west positive lonigtude.
   Thus, a positive del_lng is a shift to the west. */
struct TcsCaNTv2Data
{
	float del_lat;			/* Latitude shift, in seconds. */
	float del_lng;			/* Longitude shift, in seconds. */
	float acc_lat;			/* Latitude accuracy */
	float acc_lng;			/* Longitude accuracy */
};
#define cs_BSWP_NTv2Data "ffff"

/* This is the traditional NTv2 header as devised by Geomatics Canada.
   The original NTv2 GRIDINT program was written in FORTRAN, thus this
   header structure looks a little strange.  To the FORTRAN GRIDINT
   program, the entire file consists of 16 bye records.  (The actual
   data records consists of 4 floats; thus 16 bytes.) */
struct csNTv2HdrCa_
{
	char titl01 [8];		/* Should be "NUM_OREC" */
	long32_t num_orec;		/* Number of records in the file
							   header, including this one. */
	long32_t fill01;
	char titl02 [8];		/* Should be "NUM_SREC" */
	long32_t num_srec;		/* Number of records in a sub_file
							   header. */
	long32_t fill02;
	char titl03 [8];		/* Should be "NUM_FILE" */
	long32_t num_file;		/* Number of sub-files in the
							   main file. */
	long32_t fill03;
	char titl04 [8];		/* Should be "GS_TYPE " */
	char gs_type [8];		/* Indicates the units used for
							   real numbers in the file,
							   typically "SECONDS" */
	char titl05 [8];		/* Should be "VERSION " */
	char version [8];		/* Currently "NTv2.0" */
	char titl06 [8];		/* Should be "DATUM_F " */
	char datum_f [8];		/* FROM datum, "NAD27" for example */
	char titl07 [8];		/* Should be "DATUM_T " */
	char datum_t [8];		/* TO datum, "NAD83" for example */
	char titl08 [8];		/* Should be "MAJOR_F " */
	double major_f;			/* Length of the major axis for
							   the FROM ellipsoid. Not used
							   anywhere, but its here. */
	char titl09 [8];		/* Should be "MINOR_F " */
	double minor_f;			/* Length of the minor axis for
							   the FROM ellipsoid. Not used
							   anywhere, but its here. */
	char titl10 [8];		/* Should be "MAJOR_T " */
	double major_t;			/* Length of the major axis for
							   the TO ellipsoid. Not used
							   anywhere, but its here. */
	char titl11 [8];		/* Should be "MINOR_T " */
	double minor_t;			/* Length of the minor axis for
							   the TO ellipsoid. Not used
							   anywhere, but its here. */
};
#define cs_BSWP_NTv2HdrCa "8cll8cll8cll8c8c8c8c8c8c8c8c8cd8cd8cd8cd"

/* Per a client, the following csGnuPack stuff is required for
   proper compilation using certain Sun ANSI(?) compliant
   compilers. */
#if defined(__GNUC__) && (_PROCESSOR==_pc_SPARC32 || _PROCESSOR==_pc_SPARC64)
#	define csGnuPack __attribute__ ((packed))
#else
#	define csGnuPack
#endif

/* The following structure defines the format of the legacy Australian
   variation of the NTYv2 header.  The format of the headers on newer
   Australian files (1995 or later) is the same as the original Canadian
   data files.  Thus, this definition and all support of it is a legacy
   feature of CS-MAP. */ 
struct csNTv2HdrAu_
{
	char titl01 [8] csGnuPack;		/* Should be "NUM_OREC" */
	long32_t num_orec csGnuPack;	/* Number of records in the file
									   header, including this one. */
	char titl02 [8] csGnuPack;		/* Should be "NUM_SREC" */
	long32_t num_srec csGnuPack;	/* Number of records in a sub_file
									   header. */
	char titl03 [8]  csGnuPack;		/* Should be "NUM_FILE" */
	long32_t num_file csGnuPack;	/* Number of sub-files in the
									   main file. */
	char titl04 [8]  csGnuPack;		/* Should be "GS_TYPE " */
	char gs_type [8] csGnuPack;		/* Indicates the units used for
									   real numbers in the file,
									   typically "SECONDS" */
	char titl05 [8]  csGnuPack;		/* Should be "VERSION " */
	char version [8] csGnuPack;		/* Currently "NTv2.0" */
	char titl06 [8]  csGnuPack;		/* Should be "DATUM_F " */
	char datum_f [8] csGnuPack;		/* FROM datum */
	char titl07 [8]  csGnuPack;		/* Should be "DATUM_T " */
	char datum_t [8] csGnuPack;		/* TO datum */
	char titl08 [8]  csGnuPack;		/* Should be "MAJOR_F " */
	double major_f   csGnuPack;		/* Length of the major axis for
									   the FROM ellipsoid. Not used
									   anywhere, but its here. */
	char titl09 [8]  csGnuPack;		/* Should be "MINOR_F " */
	double minor_f   csGnuPack;		/* Length of the minor axis for
									   the FROM ellipsoid. Not used
									   anywhere, but its here. */
	char titl10 [8]  csGnuPack;		/* Should be "MAJOR_T " */
	double major_t   csGnuPack;		/* Length of the major axis for
									   the TO ellipsoid. Not used
									   anywhere, but its here. */
	char titl11 [8]  csGnuPack;		/* Should be "MINOR_T " */
	double minor_t   csGnuPack;		/* Length of the minor axis for
									   the TO ellipsoid. Not used
									   anywhere, but its here. */
};
#define cs_BSWP_NTv2HdrAu "8cl8cl8cl8c8c8c8c8c8c8c8c8cd8cd8cd8cd"

/*	The following union is an attempt to make sense out the
	variations in file formats. */
union csNtv2Hdrs_
{
	struct csNTv2HdrCa_ Canadian;
	struct csNTv2HdrAu_ Australian;
};

/* The following structure is used to read, byte swap, and decipher the
   sub-file headers in the CaNTv2 data file.  Since the file header
   provides the number of sub-files in the file, these are maintained
   in an array (rather than the traditional linked list). */
struct csNTv2SubHdr_
{
	char titl01 [8];		/* Should be "SUB_NAME" */
	char sub_name [8];		/* Name of the sub file. */
	char titl02 [8];		/* Should be "PARENT  " */
	char parent [8];		/* Name of the parent sub-file,
							   or "NONE" if this is the top
							   of a heirarchy. */
	char titl03 [8];		/* Should be "CREATED " */
	char created [8];		/* Create date in ASCII (yy-mm-dd) */
	char titl04 [8];		/* Should be "UPDATED " */
	char updated [8];		/* Update date in ASCII (yy-mm-dd) */
	char titl05 [8];		/* Should be "S_LAT   " */
	double s_lat;			/* Latitude of the southern limit,
							   in data file units, typically
							   seconds. */
	char titl06 [8];		/* Should be "N_LAT   " */
	double n_lat;			/* Latitude of the northern limit,
							   in data file units, typically
							   seconds. */
	char titl07 [8];		/* Should be "E_LONG  " */
	double e_long;			/* Longitude of the eastern limit,
							   in data file units, typically
							   seconds.  Note, west longitude
							   is carried as a positive number. */
	char titl08 [8];		/* Should be "W_LONG  " */
	double w_long;			/* Longitude of the western limit,
							   in data file units, typically
							   seconds.  Note, west longitude
							   is carried as a positive number. */
	char titl09 [8];		/* Should be "LAT_INC " */
	double lat_inc;			/* Latitude increment between
							   records in file units (i.e.
							   seconds).  Typically 300. */
	char titl10 [8];		/* Should beLongitude"LONG_INC" */
	double long_inc;		/* Longitude increment between
							   records in file units (i.e.
							   seconds).  Typically 300. */
	char titl11 [8];		/* Should be "GS_COUNT" */
	long32_t gs_count;			/* Number of records in the sub-file
							   including all records in the
							   header. */
	long32_t fill11;		/* Filler; not present in the
							   Australian version. */
};
#define cs_BSWP_NTv2SubHdrCA "8c8c8c8c8c8c8c8c8cd8cd8cd8cd8cd8cd8cll"
#define cs_BSWP_NTv2SubHdrAU "8c8c8c8c8c8c8c8c8cd8cd8cd8cd8cd8cd8cl"

/* End of structures of the NTv2 format which appear on disk.  We now
   re-establish the normal packing for in memory structures only. */
#if   _RUN_TIME == _rt_BORLAND16 || _RUN_TIME == _rt_BORLAND32
#	pragma option -a.
#elif _RUN_TIME == _rt_METAWARE
#	pragma Align_members ()
#elif _RUN_TIME == _rt_MSC16 || _RUN_TIME == _rt_MSVC16 || _RUN_TIME == _rt_MSDOTNET || \
														   _RUN_TIME == _rt_MSWIN64 ||  \
														   _RUN_TIME == _rt_MSVC32 ||   \
														   _RUN_TIME == _rt_WINCE
#	pragma pack ()
#elif _RUN_TIME == _rt_HPUX
#	pragma pack
#elif _RUN_TIME == _rt_AIX
#   pragma options align=reset
#elif _RUN_TIME >= _rt_UNIXPCC
#   pragma pack ()
#else
		/* I don't know what would work for WATCOM. */
#endif

/* There are some slight differences in how a grid cell behaves in the
   NTv2 environment and other environments.  Thus, we have a object which
   represents an NTv2 grid cell which is very similar to, but yet somewhat
   different from, other grid cells.

   One of the differences is that because of the 'west is positive' nature
   of the NTv2 file format, the reference point of the cell which is used
   to compute the AA, BB, CC, and DD bilinear coefficients is the southeast
   corner of the grid cell.  In most other grid cell environments, the
   reference corner is the south west corner of the grid cell.
   
   Note that this cell structure is sufficient for the calculation of
   either the longitude or latitude but not both.  Two such structures
   are required to perform a complete datum shift.  The NTv2 file format
   has no provisions for the vertical dimension (i.e. horizontal only). */
struct csNTv2GridCell_
{
	double seCorner [2];			/* Cell Coverage */
	double nwCorner [2];
	double deltaLng;				/* Cell Size, in degrees. */
	double deltaLat;
	double density;					/* including this here enables selection
									   of grid data sources at the grid cell
									   level. */
	/* For performance, the AA, BB, CC, and DD values are precalculated
	   after cell data has been fetched from the data file. */
	double currentAA;
	double currentBB;
	double currentCC;
	double currentDD;
	char sourceId [32];					/* File name, and possibly
										   sub-grid, of the source of
										   the cell data. */
};

/* In addition to the file header, the preamble to an actual NTv2
   data file contains a number of sub-grid headers which look like
   this.  The number of these SubGrids is carried in the file
   header (NUM_FILE element). */
struct csNTv2SubGrid_
{
	double SouthWest [2];		/* Geographic coordinates of the southwest
								   extent of the sub-grid in degrees.  Note,
								   this is an East Positive Value used to
								   check coverage. */
	double NorthEast [2];		/* Geographic coordinates of the northeast
								   extent of the sub-grid, East Positive,
								   in degrees. */
	double SeReference [2];		/* Geographic coordinates of the southeast
								   corner of the sub-grid, West Positive, in
								   degrees.  These are the values used in the
								   calculations and the values which actually
								   appear in the data file. */
	double NwReference [2];		/* Geographic coordinates of the northwest
								   corner of the sub-grid in degrees, West
								   Positive.  These are the values used in the
								   calculations and the values which actually
								   appear in the data file. */
	double DeltaLng;			/* Size of a grid cell in degrees. */ 
	double DeltaLat;			/* Size of a grid cell in degrees. */
	double Density;				/* An inprecise value which indicates
								   the density of the grid in the
								   sub-grid.  Used to select one grid
								   over another in overlap situations. */
	long32_t FirstRecord;		/* The file position of the first data record
								   in this sub-grid. */
	long32_t GridRecCnt;		/* Number of 16 byte records in the
								   sub-file. */
	short ParentIndex;			/* Set to the index of the parent, if this is
								   a child.  The index refers to the position
								   of the parent in the sub-grid array. */
	short ChildIndex;			/* Set to a positive value if this sub-file
								   is the parent of at least one or more
								   sub-files. The value is the index of the
								   first such sub-file in the sub-grid
								   directory. */
	unsigned short RowCount;	/* The number of grid rows (i.e. records)
								   in the sub-grid. */
	unsigned short ElementCount;/* Number of 16 byte data records in each row. */
	unsigned short RowSize;		/* Size of records in the sub-grid in
								   bytes; i.e. the length of each row of
								   longitude values (16 * ElementCount). */
	short Cacheable;			/* TRUE says this sub-grid is cachable.
								   Certain sub-grids have been found to
								   be non-cachable due to a bust in the
								   file format. */
	char Name [16];				/* Name of the sub-grid. */
	char Parent [16];			/* Name of the parent sub-file. Null
								   string if this is a parent. */
};

/* Internally, The following structure represents a NTv2 file.  Grid data
   files of the NTv2 format (Canadian National Transformation, Version 2).
   Several other nations have adopted this format for use in their national
   geodetic programs. */
struct cs_NTv2_
{
	struct csNTv2SubGrid_ *SubGridDir;
									/* Since the header tells us how many
									   of these things there are, we use
									   a malloc'ed array of these things. */
	csFILE *Stream;					/* Provides access to the data file. */
	long32_t HdrRecCnt;				/* Number of 16 byte records in the
									   file header.  In the Australian
									   version, not all records are 16
									   bytes; the first three are only 12
									   bytes long. */
	long32_t SubHdrRecCnt;			/* Number of 16 byte records in each sub
									   grid header.  In the Australian version,
									   the last record is only 12 bytes long. */
	long32_t SubCount;				/* Number of sub grids in the file, also
									   the number of elements in the
									   SubGridDir array. */
	unsigned short RecSize;			/* Size of records in this file (16) */
	short CellIsValid;				/* +1 indicates the Latitude and longitude
									   cells are valid. */
	short SubOverlap;				/* non-Zero indicates that overlap was
									   detected in the parent grids.  In the
									   original specification, this was not
									   allowed.  Since then, the restriction
									   has been dropped. */
	enum csNTv2Type IntType;		/* Indicates the format of the data file
									   managed by this object; i.e. either the
									   original Canadian format or the legacy
									   Australian format.  Generated and
									   maintained internally. */ 
	long32_t BufferSize;			/* Size of buffer to be used for this
									   object. */
	struct csNTv2GridCell_ longitudeCell;
									/* Last cell used, the longitude data. */
	struct csNTv2GridCell_ latitudeCell;
									/* Last cell used, the latitude data. */
	char FilePath [MAXPATH];		/* The base name for the file being
									   managed by this object. */
	char FileName [16];				/* Last 15 characters of the actual
									   file name, used to generate
									   point data ID's. */
	char sourceId [48];				/* Used to generate the source string, i.e.
									   a string which includes the file name,
									   and the actual sub-grid used to do
									   a calculation. */
	double errorValue;
	double cnvrgValue;
	short maxIterations;
};

struct cs_NTv2_* CSnewNTv2 (Const char *filePath,long32_t bufferSize,ulong32_t flags,
																	 double density);
int CSinitNTv2 (struct cs_NTv2_* thisPtr,Const char *filePath,long32_t bufferSize,
															  ulong32_t flags,
															  double density);
void CSdeleteNTv2 (struct cs_NTv2_* thisPtr);
void CSreleaseNTv2 (struct cs_NTv2_* thisPtr);
Const char* CSpathNTv2 (Const struct cs_NTv2_* thisPtr);
int CScalcNTv2 (struct cs_NTv2_* thisPtr,double deltaLL [2],Const double source [2]);
struct csNTv2SubGrid_* CSlocateSubNTv2 (struct cs_NTv2_* thisPtr,Const double source [2]);
double CStestNTv2 (Const struct cs_NTv2_* thisPtr,Const double location [2]);
Const char *CSsourceNTv2 (struct cs_NTv2_* thisPtr,Const double llSource [2]);
void CSinitNTv2GridCell (struct csNTv2GridCell_* thisPtr);
double CScalcNTv2GridCell (Const struct csNTv2GridCell_* thisPtr,Const double sourceLL [2]);
