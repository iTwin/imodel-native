#----------------------------------------------------------------------------------------
#
#  $Source: test/BuildUnitTests.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#----------------------------------------------------------------------------------------
# Builds unit tests that are found in the specified input directory.
#
# Input:    BEGTEST_INPUT           - (required) Unit tests input directory.
#           BEGTEST_NAME            - (required) Unit tests name.
#           BEGTEST_OUTPUT          - (optional) Unit tests output directory. Defaults to $(OutputRootDir)build/UnitTests/$(BEGTEST_NAME)/
#           BEGTEST_IGNORE          - (optional) Path to the unit tests ignore list file.
#           BEGTEST_API             - (optional) List of include directory paths. Defaults to $(BuildContext)PublicAPI and $(BuildContext)VendorAPI
#           BEGTEST_DEPENDENCIES    - (optional) Makefile that sets additional dependencies required by unit tests. See below for the list of available types of dependencies.
#
# Output:   Unit tests built in the $(BEGTEST_OUTPUT) directory. The output can then be picked up
#           by the BeGTest product.
#
# Dependencies' file content (specified by BEGTEST_DEPENDENCIES option):
#   BEGTEST_LIBRARIES   - Libraries required to build the unit tests. The libraries in the $(BuildContext)SubParts/Libs are already included.
#   BEGTEST_ASSEMBLIES  - Shared libraries required to run the unit tests. The libraries in the $(BuildContext)SubParts/Assemblies are already included.
#   BEGTEST_ASSETS      - Assets required by the unit tests (or the libraries that are tested).
#   BEGTEST_XLIFFS      - List of .xliff files required by the unit tests (or the libraries that are tested).
#
%include $(SrcBsiCommon)sharedmki/InternalSystemPolicy.mki

baseDir =   $(_MakeFilePath)

# Prefer to disable warnings vs. editing it.
# This should be done via a policy file, but preferring to minimize changes in this repository.
#%if $(BUILD_TOOLSET) == "CLANG"
    NO_DEFAULT_CLANG_WARNINGS = 1
#%endif

%include mdl.mki

%if !defined (BEGTEST_INPUT)
    %error Define BEGTEST_INPUT to indicate the location of unit tests source files
%endif
%if !defined (BEGTEST_NAME)
    %error Define BEGTEST_NAME to indicate the name of the unit tests library
%endif

%include $(SrcBsiCommon)sharedmki/BeTestSelectHarness.mki

# Make sure the output directory exists
%if defined (BEGTEST_OUTPUT)
    o = $(BEGTEST_OUTPUT)$(BEGTEST_NAME)/
%else
    o = $(OutputRootDir)build/UnitTests/$(BEGTEST_NAME)/
%endif

always:
    !~@mkdir $(o)
       
# Compile and Link the unit tests
CCompPDBName = $(BEGTEST_NAME)
appName=%$(CCompPDBName)
%include $(baseDir)CompileUnitTests.mki
%include $(baseDir)LinkUnitTests.mki

%if $(TARGET_PLATFORM) != "iOS"
    BEGTEST_LIBRARIES = $[@wildcard $(BuildContext)SubParts/Libs/*$(libext)] $[@wildcard $(BuildContext)SubParts/Libs/*$(stlibext)]
%else
    # iOS linker has issues with duplicate objects, so we want everything except conglomerated (hence duplicated) libraries.
    # iOS is only static libraries, so we can take shortcuts in the naming expression.
    BEGTEST_LIBRARIES = $[@readstdout "find $(BuildContext)SubParts/Libs -not -iname '*fx*' -iname '*.a'"]
%endif

BEGTEST_ASSEMBLIES  = $[@wildcard $(BuildContext)SubParts/Assemblies/*$(shlibext)] $[@wildcard $(BuildContext)Delivery/*$(shlibext)]
BEGTEST_ASSETS      = 
BEGTEST_XLIFFS      =

# Allow the tests to inject their own dependencies
%if defined (BEGTEST_DEPENDENCIES)
    %iffile $(BEGTEST_DEPENDENCIES)
        %include $(BEGTEST_DEPENDENCIES)
    %else
        %error Unit Tests dependencies file $(BEGTEST_DEPENDENCIES) is set but does not exist.
    %endif
%endif

# Create a list of libraries that are required by these tests
always:
    >$(o)libraries.list
    $(BEGTEST_LIBRARIES)
    <

# Create a list of assemblies that are required by these tests
always:
    >$(o)assemblies.list
    $(BEGTEST_ASSEMBLIES)
    <
    
# Create a list of assets that are required by these tests 
always:
    >$(o)assets.list
    $(BEGTEST_ASSETS)
    <

# Create a list of xliffs that are required by these tests 
always:
    >$(o)xliffs.list
    $(BEGTEST_XLIFFS)
    <
