#--------------------------------------------------------------------------------------
#
#     $Source: test/CompileUnitTests.mki $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
%if !defined (BEGTEST_NAME)
    %error Define BEGTEST_NAME to indicate the overall source of the tests, e.g., Bentley.
%endif
%if !defined (BEGTEST_INPUT)
    %error Define BEGTEST_INPUT to indicate the location of unit tests source files
%endif
%if !defined (BE_TEST_TESTHARNESS)
    %error You forgot to include $(SrcBsiCommon)sharedmki/BeTestSelectHarness.mki
%endif
%if !defined (o)
    %error Define o to be specific to $(BEGTEST_NAME)
%endif

# Make sure the output directory exists
always:
    !~@mkdir $(o)
    !~@mkdir $(o)PublicAPI/UnitTests
    
# If we're compiling for GTest, add gtest include path
%ifdef USE_GTEST
    # Put gtest itself on the include path (but nothing else from VendorAPI)
    always:
        !~@mkdir $(o)gtest_include
        ~linkdir "$(o)gtest_include/gtest = $(BuildContext)VendorAPI/gtest"
        ~linkdir "$(o)gtest_include/gmock = $(BuildContext)VendorAPI/gmock"

    dirToSearch = $(o)gtest_include
    %include $(SrcBsiCommon)PublicSDK/cincapnd.mki
%endif

# If the tests specify PublicAPI, link it to the known location
%iffile $(BEGTEST_INPUT)PublicAPI
    always:
        CopyWithSymlinks.py     $(BEGTEST_INPUT)PublicAPI                       $(o)PublicAPI/UnitTests
%endif
# If there's unit tests' PublicAPI directory in SubParts, link it in
%iffile $(BuildContext)SubParts/UnitTests/PublicAPI
    always:
        CopyWithSymlinks.py     $(BuildContext)SubParts/UnitTests/PublicAPI     $(o)PublicAPI
%endif
# Add the unit tests PublicAPI include directory to include path
dirToSearch =% $(o)PublicAPI
%include $(SrcBsiCommon)PublicSDK/cincapnd.mki

# If there's PrivateAPI directory in SubParts, link it in and add to include path
%iffile $(BuildContext)SubParts/UnitTests/PrivateAPI
    always:
        CopyWithSymlinks.py     $(BuildContext)SubParts/UnitTests/PrivateAPI    $(o)PrivateAPI
        
    dirToSearch =% $(o)PrivateAPI
    %include $(SrcBsiCommon)PublicSDK/cincapnd.mki
%endif

# Make sure we have an empty ignore list file
$(OutputRootDir)build/UnitTests/emptyIgnoreList : $(_MakeFileSpec)
    !~@mkdir $[@dir $@]
    $(msg)
    >$@
    <
    ~time

# Set ignore list file path to existing or empty file
%if defined (BEGTEST_IGNORE)
    %ifnofile $(BEGTEST_IGNORE)
        %warn BEGTEST_IGNORE was set to not existing file ($(BEGTEST_IGNORE)). Setting it to an empty one.
        BEGTEST_IGNORE = $(OutputRootDir)build/UnitTests/emptyIgnoreList
    %endif
%else
    %warn BEGTEST_IGNORE was not set. Setting it to an empty ignore list file.
    BEGTEST_IGNORE = $(OutputRootDir)build/UnitTests/emptyIgnoreList
%endif

# Pick all unit test source files
UnitTestSourceFiles = $[@wildcard $(BEGTEST_INPUT)*.cpp]

# Compile the unit tests
%if defined (BEGTEST_API)
    _savedIncludes =% $(PublicAPIIncludes)
    PublicAPIIncludes = $[@addprefix -I $(BEGTEST_API)]
    UnitTestsHeaderFileDependencies = $[@wildcard $(BEGTEST_API)*.h]
%else
    UnitTestsHeaderFileDependencies = 
%endif

always:
    $(SrcRoot)bsicommon/build/GenerateTestFileList.py $(BEGTEST_INPUT) cpp $(BEGTEST_IGNORE) > $(o)UnitTestObjs.mki

LinuxGccCommonOptions + -Wno-unused-variable

%if (" " != $[@findstring VC, $(BUILD_TOOLSET)])
    cDefs + -wd4250
%endif

# Prevent fatal error C1128. This can be caused by extensive use of gmock templates
CCCompOpts + -bigobj

%include MultiCppCompileRule.mki
%include $(o)UnitTestObjs.mki
%include MultiCppCompileGo.mki
    
%if defined (_savedIncludes)
    PublicAPIIncludes =% $(_savedIncludes)
    %undef _savedIncludes
%endif

always:
    $(deleteCmd) $(o)UnitTestObjs.mki

%ifndef USE_GTEST
    # Create $(o)UnitTests.list.h  from pre-processed source (BTest only)
    UnitTestListHFiles = $[@wildcard $(o)*.UnitTests.List.h]
    
    # Also need to include the backdoor unittests.list.h file - it might
    # have setup / teardown functions for these unit tests
    %if defined (BEGTEST_BACKDOOR)
        UnitTestListHFiles + $(BEGTEST_BACKDOOR)
    %endif
    
    $(o)UnitTests.list.h : $(UnitTestListHFiles)
        $(msg)
        $(SrcBsiCommon)sharedmki/Cat.py $(UnitTestListHFiles) > $@
        ~time
       
    # Create $(o)UnitTests.class.txt  from test class lists extracted by DetectUnitTests.py
    UnitTestListClasses = $[@wildcard $(o)*.testclasses]
    $(o)UnitTests.classes.txt : $(UnitTestListHFiles)
        $(msg)
        $(SrcBsiCommon)build/MergeUnitTestClassNames.py $@ $(UnitTestListClasses)
        ~time

%endif
