/*--------------------------------------------------------------------------------------+
|
|     $Source: PublicAPI/WebServices/ConnectC/CWSCCGenPublic.h $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyApiGen tool on May 25, 2016.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

// define __CWSCC_DLL_BUILD__ when consuming header.
#ifdef __CWSCC_DLL_BUILD__
#define CWSCC_EXPORT EXPORT_ATTRIBUTE
#else
#define CWSCC_EXPORT IMPORT_ATTRIBUTE
#endif

/************************************************************************************//**
* \defgroup ConnectWebServicesClientCStatusCodes ConnectWebServicesClientC Status Codes
* \{
****************************************************************************************/

/*!
\def ERROR500
The response from the server contained a 500, Internal Server, http error
*/

/*!
\def ERROR409
The response from the server contained a 409, Conflict, http error
*/

/*!
\def ERROR404
The response from the server contained a 404, Not Found, http error
*/

/*!
\def ERROR403
The response from the server contained a 403, Forbidden, http error
*/

/*!
\def ERROR401
The response from the server contained a 401, Unauthorized, http error
*/

/*!
\def ERROR400
The response from the server contained a 400, Bad Request, http error
*/

/*!
\def SUCCESS
Successful operation
*/

/*!
\def INVALID_PARAMETER
Invalid parameter passed to function
*/

/*!
\def PROPERTY_HAS_NOT_BEEN_SET
The buffer property passed to function has not been set in the buffer
*/

/*!
\def INTERNAL_MEMORY_ERROR
Memory failed to initialize interally.
*/

/*!
\def LOGIN_FAILED
The login attempt was not completed successfully.
*/

/*!
\def SSL_REQUIRED
SSL is required for communication with the server.
*/

/*!
\def NOT_ENOUGH_RIGHTS
The user does not have the proper rights.
*/

/*!
\def REPOSITORY_NOT_FOUND
The repository you attempted to query was not found.
*/

/*!
\def SCHEMA_NOT_FOUND
The schema you attempted to query was not found.
*/

/*!
\def CLASS_NOT_FOUND
The class you attempted to query was not found.
*/

/*!
\def PROPERTY_NOT_FOUND
The property you attempted to query was not found.
*/

/*!
\def INSTANCE_NOT_FOUND
The instance you attempted to query was not found.
*/

/*!
\def FILE_NOT_FOUND
The file you attempted to query was not found.
*/

/*!
\def NOT_SUPPORTED
The action you attempted is not supported.
*/

/*!
\def NO_SERVER_LICENSE
A server license was not found.
*/

/*!
\def NO_CLIENT_LICENSE
A client license was not found.
*/

/*!
\def TO_MANY_BAD_LOGIN_ATTEMPTS
To many unsuccessful login attempts have happened.
*/

#define ERROR500                                 500
#define ERROR409                                 409
#define ERROR404                                 404
#define ERROR403                                 403
#define ERROR401                                 401
#define ERROR400                                 400
#define SUCCESS                                  0
#define INVALID_PARAMETER                        -100
#define PROPERTY_HAS_NOT_BEEN_SET                -101
#define INTERNAL_MEMORY_ERROR                    -102
#define LOGIN_FAILED                             -200
#define SSL_REQUIRED                             -201
#define NOT_ENOUGH_RIGHTS                        -202
#define REPOSITORY_NOT_FOUND                     -204
#define SCHEMA_NOT_FOUND                         -205
#define CLASS_NOT_FOUND                          -206
#define PROPERTY_NOT_FOUND                       -207
#define INSTANCE_NOT_FOUND                       -210
#define FILE_NOT_FOUND                           -211
#define NOT_SUPPORTED                            -212
#define NO_SERVER_LICENSE                        -213
#define NO_CLIENT_LICENSE                        -214
#define TO_MANY_BAD_LOGIN_ATTEMPTS               -215

/**
* \brief Call status code. See \ref ConnectWebServicesClientCStatusCodes
 
*/
typedef int16_t CallStatus;
/** \} */

/************************************************************************************//**
* \defgroup PointerTypes ConnectWebServicesClientC Pointer types
* \{
****************************************************************************************/
/**
* \brief API handle 
*/
typedef void* CWSCCHANDLE;

typedef void* CWSCCDATABUFHANDLE;
/** \} */

/************************************************************************************//**
* \defgroup ConnectWebServicesClientCAPIFunctions ConnectWebServicesClientC API Function Declarations
* \{
****************************************************************************************/
/**
* \brief API handle free function 
*/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_FreeApi(CWSCCHANDLE apiHandle);

/************************************************************************************//**
* \brief Query WSG to get list of organizations
* \param[in] apiHandle API object
* \param[out] organizationBuffer Buffer of Organization data
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadOrganizationList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* organizationBuffer
);

/************************************************************************************//**
* \brief Create a new organization
* \param[in] apiHandle API object
* \param[in] OrganizationGuid
* \param[in] OrganizationName
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_CreateOrganization
(
CWSCCHANDLE apiHandle,
WCharCP OrganizationGuid,
WCharCP OrganizationName
);

/************************************************************************************//**
* \brief Get organization information buffer
* \param[in] apiHandle API object
* \param[in] organizationId Organization ID to select
* \param[out] organizationBuffer Organization data buffer
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadOrganization
(
CWSCCHANDLE apiHandle,
WCharCP organizationId,
CWSCCDATABUFHANDLE* organizationBuffer
);

/************************************************************************************//**
* \brief Query WSG to get list of projects
* \param[in] apiHandle API object
* \param[out] projectBuffer Buffer of Project data
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectBuffer
);

/************************************************************************************//**
* \brief Create a new project
* \param[in] apiHandle API object
* \param[in] Name
* \param[in] Number
* \param[in] OrganizationId
* \param[in] Active
* \param[in] Industry
* \param[in] AssetType
* \param[in] LastModified
* \param[in] Location
* \param[in] Latitude
* \param[in] Longitude
* \param[in] LocationIsUsingLatLong
* \param[in] RegisteredDate
* \param[in] TimeZoneLocation
* \param[in] Status
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_CreateProject
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
);

/************************************************************************************//**
* \brief Get project information buffer
* \param[in] apiHandle API object
* \param[in] projectId Project ID to select
* \param[out] projectBuffer Project data buffer
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
CWSCCDATABUFHANDLE* projectBuffer
);

/************************************************************************************//**
* \brief Update an existing project
* \param[in] apiHandle API object
* \param[in] projectId Project ID to update
* \param[in] Name
* \param[in] Number
* \param[in] OrganizationId
* \param[in] Active
* \param[in] Industry
* \param[in] AssetType
* \param[in] LastModified
* \param[in] Location
* \param[in] Latitude
* \param[in] Longitude
* \param[in] LocationIsUsingLatLong
* \param[in] RegisteredDate
* \param[in] TimeZoneLocation
* \param[in] Status
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_UpdateProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId,
WCharCP Name,
WCharCP Number,
WCharCP OrganizationId,
bool* Active,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status
);

/************************************************************************************//**
* \brief Delete a project
* \param[in] apiHandle API object
* \param[in] projectId Project ID to remove
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_DeleteProject
(
CWSCCHANDLE apiHandle,
WCharCP projectId
);

/************************************************************************************//**
* \brief Query WSG to get list of projectfavorites
* \param[in] apiHandle API object
* \param[out] projectfavoriteBuffer Buffer of ProjectFavorite data
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectFavoriteList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
);

/************************************************************************************//**
* \brief Get projectfavorite information buffer
* \param[in] apiHandle API object
* \param[in] projectfavoriteId ProjectFavorite ID to select
* \param[out] projectfavoriteBuffer ProjectFavorite data buffer
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId,
CWSCCDATABUFHANDLE* projectfavoriteBuffer
);

/************************************************************************************//**
* \brief Delete a projectfavorite
* \param[in] apiHandle API object
* \param[in] projectfavoriteId ProjectFavorite ID to remove
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_DeleteProjectFavorite
(
CWSCCHANDLE apiHandle,
WCharCP projectfavoriteId
);

/************************************************************************************//**
* \brief Query WSG to get list of projectmrus
* \param[in] apiHandle API object
* \param[out] projectmruBuffer Buffer of ProjectMRU data
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectMRUList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmruBuffer
);

/************************************************************************************//**
* \brief Create a new projectmru
* \param[in] apiHandle API object
* \param[in] ProjectGuid
* \param[in] ProjectName
* \param[in] LastModified
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_CreateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
);

/************************************************************************************//**
* \brief Get projectmru information buffer
* \param[in] apiHandle API object
* \param[in] projectmruId ProjectMRU ID to select
* \param[out] projectmruBuffer ProjectMRU data buffer
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
CWSCCDATABUFHANDLE* projectmruBuffer
);

/************************************************************************************//**
* \brief Query WSG to get list of projectmrudetails
* \param[in] apiHandle API object
* \param[out] projectmrudetailBuffer Buffer of ProjectMRUDetail data
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectMRUDetailList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
);

/************************************************************************************//**
* \brief Get projectmrudetail information buffer
* \param[in] apiHandle API object
* \param[in] projectmrudetailId ProjectMRUDetail ID to select
* \param[out] projectmrudetailBuffer ProjectMRUDetail data buffer
* \return Success or error code. See \ref ConnectWebServicesClientCStatusCodes
****************************************************************************************/
CWSCC_EXPORT CallStatus ConnectWebServicesClientC_ReadProjectMRUDetail
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetailId,
CWSCCDATABUFHANDLE* projectmrudetailBuffer
);

/** \} */
