/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/CWSCCGenBuffer.cpp $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyApiGen tool on April 26, 2016.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
GUID guidFromString(const std::wstring& guidStr)
    {
    //FROM "Essentials of COM" on PluralSight
    GUID parsed;
    HRESULT result = CLSIDFromString(guidStr.c_str(), &parsed);
    if (result != NOERROR)
        return GUID();
    return parsed;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
std::wstring stringToWString(const std::string &str)
    {
    if (str.empty()) return std::wstring();
    int size_needed = MultiByteToWideChar(CP_UTF8, 0, &str[0], (int) str.size(), NULL, 0);
    std::wstring wstrTo(size_needed, 0);
    MultiByteToWideChar(CP_UTF8, 0, &str[0], (int) str.size(), &wstrTo[0], size_needed);
    return wstrTo;
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT VOID ConnectWebServicesClientC_DataBufferFree
(
CWSCCDATABUFHANDLE dataBuffer
)
    {
    if (NULL == dataBuffer)
        return;

    HCWSCCBUFFER buf = (HCWSCCBUFFER)dataBuffer;
    if(buf->lpItems != NULL)
        free(buf->lpItems);
    free(buf);
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT LONG ConnectWebServicesClientC_DataBufferGetCount
(
CWSCCDATABUFHANDLE dataBuffer
)
    {
    if (NULL == dataBuffer)
        return 0;

    HCWSCCBUFFER buf = (HCWSCCBUFFER)dataBuffer;
    return buf->lCount;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetStringProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_CONNECTUSER:
            return connectuserGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_ORGANIZATION:
            return organizationGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_PROJECT:
            return projectGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_PROJECTFAVORITE:
            return projectfavoriteGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_PROJECTMRU:
            return projectmruGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetStringProperty(buf, bufferProperty, index, str, strLength);
        case BUFF_TYPE_PROJECTTEMPLATE:
            return projecttemplateGetStringProperty(buf, bufferProperty, index, str, strLength);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetStringLength
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_CONNECTUSER:
            return connectuserGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_ORGANIZATION:
            return organizationGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_PROJECT:
            return projectGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_PROJECTFAVORITE:
            return projectfavoriteGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_PROJECTMRU:
            return projectmruGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetStringLength(buf, bufferProperty, index, outStringSize);
        case BUFF_TYPE_PROJECTTEMPLATE:
            return projecttemplateGetStringLength(buf, bufferProperty, index, outStringSize);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetGuidProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
LPGUID guid
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_CONNECTUSER:
            return connectuserGetGuidProperty(buf, bufferProperty, index, guid);
        case BUFF_TYPE_ORGANIZATION:
            return organizationGetGuidProperty(buf, bufferProperty, index, guid);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetBooleanProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
bool* boolean
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_PROJECT:
            return projectGetBooleanProperty(buf, bufferProperty, index, boolean);
        case BUFF_TYPE_PROJECTFAVORITE:
            return projectfavoriteGetBooleanProperty(buf, bufferProperty, index, boolean);
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetBooleanProperty(buf, bufferProperty, index, boolean);
        case BUFF_TYPE_PROJECTTEMPLATE:
            return projecttemplateGetBooleanProperty(buf, bufferProperty, index, boolean);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetIntProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
int* integer
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_PROJECT:
            return projectGetIntProperty(buf, bufferProperty, index, integer);
        case BUFF_TYPE_PROJECTFAVORITE:
            return projectfavoriteGetIntProperty(buf, bufferProperty, index, integer);
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetIntProperty(buf, bufferProperty, index, integer);
        case BUFF_TYPE_PROJECTTEMPLATE:
            return projecttemplateGetIntProperty(buf, bufferProperty, index, integer);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetDoubleProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
double* pDouble
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_PROJECT:
            return projectGetDoubleProperty(buf, bufferProperty, index, pDouble);
        case BUFF_TYPE_PROJECTFAVORITE:
            return projectfavoriteGetDoubleProperty(buf, bufferProperty, index, pDouble);
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetDoubleProperty(buf, bufferProperty, index, pDouble);
        case BUFF_TYPE_PROJECTTEMPLATE:
            return projecttemplateGetDoubleProperty(buf, bufferProperty, index, pDouble);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CWSCC_EXPORT CALLSTATUS ConnectWebServicesClientC_DataBufferGetLongProperty
(
CWSCCDATABUFHANDLE dataBuffer,
int bufferProperty,
int index,
long* pLong
)
    {
    if(NULL == dataBuffer)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The dataBuffer passed into the property get function is NULL."};

    HCWSCCBUFFER buf = (HCWSCCBUFFER) dataBuffer;

    switch (buf->lType)
        {
        case BUFF_TYPE_PROJECTMRUDETAIL:
            return projectmrudetailGetLongProperty(buf, bufferProperty, index, pLong);
        default:
            return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The buf->lType does not match any of the buffer properties."};
        }
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS connectuserGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCCONNECTUSERBUFFER connectuserBuf = (LPCWSCCCONNECTUSERBUFFER) buf->lpItems;
    connectuserBuf = connectuserBuf + index;

    if (CONNECTUSER_BUFF_USERNAME == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UserName")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UserName")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UserName property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, connectuserBuf->UserName.c_str());
        }
    else if (CONNECTUSER_BUFF_USEREMAIL == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UserEmail")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UserEmail")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UserEmail property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, connectuserBuf->UserEmail.c_str());
        }
    else if (CONNECTUSER_BUFF_ULTIMATESITEID == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UltimateSiteId")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UltimateSiteId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UltimateSiteId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, connectuserBuf->UltimateSiteId.c_str());
        }
    else if (CONNECTUSER_BUFF_ORGNAME == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("OrgName")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("OrgName")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrgName property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, connectuserBuf->OrgName.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS organizationGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCORGANIZATIONBUFFER organizationBuf = (LPCWSCCORGANIZATIONBUFFER) buf->lpItems;
    organizationBuf = organizationBuf + index;

    if (ORGANIZATION_BUFF_ORGANIZATIONNAME == bufferProperty)
        {
        if (organizationBuf->IsSet.find(stringToWString("OrganizationName")) == organizationBuf->IsSet.end() || organizationBuf->IsSet[stringToWString("OrganizationName")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationName property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, organizationBuf->OrganizationName.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) buf->lpItems;
    projectBuf = projectBuf + index;

    if (PROJECT_BUFF_NAME == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Name")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Name")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->Name.c_str());
        }
    else if (PROJECT_BUFF_NUMBER == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Number")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Number")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->Number.c_str());
        }
    else if (PROJECT_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("OrganizationId")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->OrganizationId.c_str());
        }
    else if (PROJECT_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Industry")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Industry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->Industry.c_str());
        }
    else if (PROJECT_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("AssetType")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("AssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->AssetType.c_str());
        }
    else if (PROJECT_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LastModified")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LastModified")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->LastModified.c_str());
        }
    else if (PROJECT_BUFF_LOCATION == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Location")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Location")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->Location.c_str());
        }
    else if (PROJECT_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("RegisteredDate")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->RegisteredDate.c_str());
        }
    else if (PROJECT_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->TimeZoneLocation.c_str());
        }
    else if (PROJECT_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToAssetType")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->LinkToAssetType.c_str());
        }
    else if (PROJECT_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToIndustry")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->LinkToIndustry.c_str());
        }
    else if (PROJECT_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->LinkToIndustryAssets.c_str());
        }
    else if (PROJECT_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectBuf->PWDMInvitationId.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectfavoriteGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) buf->lpItems;
    projectfavoriteBuf = projectfavoriteBuf + index;

    if (PROJECTFAVORITE_BUFF_NAME == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Name")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Name")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->Name.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_NUMBER == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Number")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Number")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->Number.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("OrganizationId")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->OrganizationId.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Industry")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Industry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->Industry.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("AssetType")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("AssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->AssetType.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("LastModified")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("LastModified")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->LastModified.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_LOCATION == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Location")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Location")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->Location.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("RegisteredDate")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->RegisteredDate.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->TimeZoneLocation.c_str());
        }
    else if (PROJECTFAVORITE_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectfavoriteBuf->PWDMInvitationId.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmruGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) buf->lpItems;
    projectmruBuf = projectmruBuf + index;

    if (PROJECTMRU_BUFF_PROJECTGUID == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("ProjectGuid")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("ProjectGuid")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "ProjectGuid property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmruBuf->ProjectGuid.c_str());
        }
    else if (PROJECTMRU_BUFF_PROJECTNAME == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("ProjectName")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("ProjectName")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "ProjectName property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmruBuf->ProjectName.c_str());
        }
    else if (PROJECTMRU_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("LastModified")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("LastModified")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmruBuf->LastModified.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToAssetType")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->LinkToAssetType.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToIndustry")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->LinkToIndustry.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->LinkToIndustryAssets.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_NAME == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Name")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Name")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->Name.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_NUMBER == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Number")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Number")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->Number.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("OrganizationId")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->OrganizationId.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Industry")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Industry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->Industry.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("AssetType")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("AssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->AssetType.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LastModified")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LastModified")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->LastModified.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_LOCATION == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Location")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Location")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->Location.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("RegisteredDate")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->RegisteredDate.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->TimeZoneLocation.c_str());
        }
    else if (PROJECTMRUDETAIL_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projectmrudetailBuf->PWDMInvitationId.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projecttemplateGetStringProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPWSTR str,
UINT32 strLength
)
    {
    if (buf == NULL || bufferProperty == 0 || str == NULL || strLength == 0)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) buf->lpItems;
    projecttemplateBuf = projecttemplateBuf + index;

    if (PROJECTTEMPLATE_BUFF_NAME == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Name")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Name")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->Name.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_NUMBER == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Number")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Number")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->Number.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("OrganizationId")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->OrganizationId.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_INDUSTRY == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Industry")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Industry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->Industry.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("AssetType")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("AssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->AssetType.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LastModified")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LastModified")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->LastModified.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_LOCATION == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Location")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Location")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->Location.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("RegisteredDate")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->RegisteredDate.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->TimeZoneLocation.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToAssetType")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->LinkToAssetType.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToIndustry")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->LinkToIndustry.c_str());
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            str = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        wcscpy_s(str, strLength, projecttemplateBuf->LinkToIndustryAssets.c_str());
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS connectuserGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCCONNECTUSERBUFFER connectuserBuf = (LPCWSCCCONNECTUSERBUFFER) buf->lpItems;
    connectuserBuf = connectuserBuf + index;

    if (CONNECTUSER_BUFF_USERNAME == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UserName")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UserName")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UserName property is not set, so it can not be retrieved."};
            }
        *outStringSize = connectuserBuf->UserName.length();
        }
    else if (CONNECTUSER_BUFF_USEREMAIL == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UserEmail")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UserEmail")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UserEmail property is not set, so it can not be retrieved."};
            }
        *outStringSize = connectuserBuf->UserEmail.length();
        }
    else if (CONNECTUSER_BUFF_ULTIMATESITEID == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("UltimateSiteId")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("UltimateSiteId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "UltimateSiteId property is not set, so it can not be retrieved."};
            }
        *outStringSize = connectuserBuf->UltimateSiteId.length();
        }
    else if (CONNECTUSER_BUFF_ORGNAME == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("OrgName")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("OrgName")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrgName property is not set, so it can not be retrieved."};
            }
        *outStringSize = connectuserBuf->OrgName.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS organizationGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCORGANIZATIONBUFFER organizationBuf = (LPCWSCCORGANIZATIONBUFFER) buf->lpItems;
    organizationBuf = organizationBuf + index;

    if (ORGANIZATION_BUFF_ORGANIZATIONNAME == bufferProperty)
        {
        if (organizationBuf->IsSet.find(stringToWString("OrganizationName")) == organizationBuf->IsSet.end() || organizationBuf->IsSet[stringToWString("OrganizationName")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationName property is not set, so it can not be retrieved."};
            }
        *outStringSize = organizationBuf->OrganizationName.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) buf->lpItems;
    projectBuf = projectBuf + index;

    if (PROJECT_BUFF_NAME == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Name")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Name")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->Name.length();
        }
    else if (PROJECT_BUFF_NUMBER == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Number")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Number")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->Number.length();
        }
    else if (PROJECT_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("OrganizationId")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->OrganizationId.length();
        }
    else if (PROJECT_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Industry")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Industry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->Industry.length();
        }
    else if (PROJECT_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("AssetType")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("AssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->AssetType.length();
        }
    else if (PROJECT_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LastModified")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LastModified")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->LastModified.length();
        }
    else if (PROJECT_BUFF_LOCATION == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Location")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Location")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->Location.length();
        }
    else if (PROJECT_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("RegisteredDate")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->RegisteredDate.length();
        }
    else if (PROJECT_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->TimeZoneLocation.length();
        }
    else if (PROJECT_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToAssetType")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->LinkToAssetType.length();
        }
    else if (PROJECT_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToIndustry")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->LinkToIndustry.length();
        }
    else if (PROJECT_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->LinkToIndustryAssets.length();
        }
    else if (PROJECT_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectBuf->PWDMInvitationId.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectfavoriteGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) buf->lpItems;
    projectfavoriteBuf = projectfavoriteBuf + index;

    if (PROJECTFAVORITE_BUFF_NAME == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Name")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Name")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->Name.length();
        }
    else if (PROJECTFAVORITE_BUFF_NUMBER == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Number")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Number")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->Number.length();
        }
    else if (PROJECTFAVORITE_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("OrganizationId")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->OrganizationId.length();
        }
    else if (PROJECTFAVORITE_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Industry")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Industry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->Industry.length();
        }
    else if (PROJECTFAVORITE_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("AssetType")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("AssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->AssetType.length();
        }
    else if (PROJECTFAVORITE_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("LastModified")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("LastModified")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->LastModified.length();
        }
    else if (PROJECTFAVORITE_BUFF_LOCATION == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Location")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Location")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->Location.length();
        }
    else if (PROJECTFAVORITE_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("RegisteredDate")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->RegisteredDate.length();
        }
    else if (PROJECTFAVORITE_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->TimeZoneLocation.length();
        }
    else if (PROJECTFAVORITE_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectfavoriteBuf->PWDMInvitationId.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmruGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) buf->lpItems;
    projectmruBuf = projectmruBuf + index;

    if (PROJECTMRU_BUFF_PROJECTGUID == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("ProjectGuid")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("ProjectGuid")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "ProjectGuid property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmruBuf->ProjectGuid.length();
        }
    else if (PROJECTMRU_BUFF_PROJECTNAME == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("ProjectName")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("ProjectName")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "ProjectName property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmruBuf->ProjectName.length();
        }
    else if (PROJECTMRU_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(stringToWString("LastModified")) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[stringToWString("LastModified")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmruBuf->LastModified.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToAssetType")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->LinkToAssetType.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToIndustry")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->LinkToIndustry.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->LinkToIndustryAssets.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_NAME == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Name")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Name")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->Name.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_NUMBER == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Number")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Number")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->Number.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("OrganizationId")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->OrganizationId.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Industry")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Industry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->Industry.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("AssetType")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("AssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->AssetType.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LastModified")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LastModified")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->LastModified.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_LOCATION == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Location")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Location")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->Location.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("RegisteredDate")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->RegisteredDate.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->TimeZoneLocation.length();
        }
    else if (PROJECTMRUDETAIL_BUFF_PWDMINVITATIONID == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("PWDMInvitationId")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("PWDMInvitationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "PWDMInvitationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projectmrudetailBuf->PWDMInvitationId.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projecttemplateGetStringLength
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
size_t* outStringSize
)
    {
    if (buf == NULL || bufferProperty == 0 || outStringSize == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) buf->lpItems;
    projecttemplateBuf = projecttemplateBuf + index;

    if (PROJECTTEMPLATE_BUFF_NAME == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Name")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Name")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Name property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->Name.length();
        }
    else if (PROJECTTEMPLATE_BUFF_NUMBER == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Number")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Number")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Number property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->Number.length();
        }
    else if (PROJECTTEMPLATE_BUFF_ORGANIZATIONID == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("OrganizationId")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("OrganizationId")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationId property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->OrganizationId.length();
        }
    else if (PROJECTTEMPLATE_BUFF_INDUSTRY == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Industry")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Industry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Industry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->Industry.length();
        }
    else if (PROJECTTEMPLATE_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("AssetType")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("AssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "AssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->AssetType.length();
        }
    else if (PROJECTTEMPLATE_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LastModified")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LastModified")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastModified property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->LastModified.length();
        }
    else if (PROJECTTEMPLATE_BUFF_LOCATION == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Location")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Location")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Location property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->Location.length();
        }
    else if (PROJECTTEMPLATE_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("RegisteredDate")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("RegisteredDate")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "RegisteredDate property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->RegisteredDate.length();
        }
    else if (PROJECTTEMPLATE_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("TimeZoneLocation")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("TimeZoneLocation")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "TimeZoneLocation property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->TimeZoneLocation.length();
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOASSETTYPE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToAssetType")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToAssetType")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToAssetType property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->LinkToAssetType.length();
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOINDUSTRY == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToIndustry")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToIndustry")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustry property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->LinkToIndustry.length();
        }
    else if (PROJECTTEMPLATE_BUFF_LINKTOINDUSTRYASSETS == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LinkToIndustryAssets")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LinkToIndustryAssets")] == false)
            {
            outStringSize = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LinkToIndustryAssets property is not set, so it can not be retrieved."};
            }
        *outStringSize = projecttemplateBuf->LinkToIndustryAssets.length();
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS connectuserGetGuidProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPGUID guid
)
    {
    if (buf == NULL || bufferProperty == 0 || guid == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCCONNECTUSERBUFFER connectuserBuf = (LPCWSCCCONNECTUSERBUFFER) buf->lpItems;
    connectuserBuf = connectuserBuf + index;

    if (CONNECTUSER_BUFF_CONNECTORGGUID == bufferProperty)
        {
        if (connectuserBuf->IsSet.find(stringToWString("ConnectOrgGuid")) == connectuserBuf->IsSet.end() || connectuserBuf->IsSet[stringToWString("ConnectOrgGuid")] == false)
            {
            guid = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "ConnectOrgGuid property is not set, so it can not be retrieved."};
            }
        memcpy(guid, &(connectuserBuf->ConnectOrgGuid), sizeof(GUID));
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS organizationGetGuidProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
LPGUID guid
)
    {
    if (buf == NULL || bufferProperty == 0 || guid == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCORGANIZATIONBUFFER organizationBuf = (LPCWSCCORGANIZATIONBUFFER) buf->lpItems;
    organizationBuf = organizationBuf + index;

    if (ORGANIZATION_BUFF_ORGANIZATIONGUID == bufferProperty)
        {
        if (organizationBuf->IsSet.find(stringToWString("OrganizationGuid")) == organizationBuf->IsSet.end() || organizationBuf->IsSet[stringToWString("OrganizationGuid")] == false)
            {
            guid = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "OrganizationGuid property is not set, so it can not be retrieved."};
            }
        memcpy(guid, &(organizationBuf->OrganizationGuid), sizeof(GUID));
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectGetBooleanProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
bool* boolean
)
    {
    if (buf == NULL || bufferProperty == 0 || boolean == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) buf->lpItems;
    projectBuf = projectBuf + index;

    if (PROJECT_BUFF_ACTIVE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Active")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Active")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Active property is not set, so it can not be retrieved."};
            }
        *boolean = projectBuf->Active;
        }
    else if (PROJECT_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("LocationIsUsingLatLong")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("LocationIsUsingLatLong")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LocationIsUsingLatLong property is not set, so it can not be retrieved."};
            }
        *boolean = projectBuf->LocationIsUsingLatLong;
        }
    else if (PROJECT_BUFF_EBBACKED == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("eBBacked")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("eBBacked")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "eBBacked property is not set, so it can not be retrieved."};
            }
        *boolean = projectBuf->eBBacked;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectfavoriteGetBooleanProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
bool* boolean
)
    {
    if (buf == NULL || bufferProperty == 0 || boolean == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) buf->lpItems;
    projectfavoriteBuf = projectfavoriteBuf + index;

    if (PROJECTFAVORITE_BUFF_EBBACKED == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("eBBacked")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("eBBacked")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "eBBacked property is not set, so it can not be retrieved."};
            }
        *boolean = projectfavoriteBuf->eBBacked;
        }
    else if (PROJECTFAVORITE_BUFF_ACTIVE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Active")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Active")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Active property is not set, so it can not be retrieved."};
            }
        *boolean = projectfavoriteBuf->Active;
        }
    else if (PROJECTFAVORITE_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("LocationIsUsingLatLong")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("LocationIsUsingLatLong")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LocationIsUsingLatLong property is not set, so it can not be retrieved."};
            }
        *boolean = projectfavoriteBuf->LocationIsUsingLatLong;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetBooleanProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
bool* boolean
)
    {
    if (buf == NULL || bufferProperty == 0 || boolean == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_ISFAVORITE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("IsFavorite")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("IsFavorite")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "IsFavorite property is not set, so it can not be retrieved."};
            }
        *boolean = projectmrudetailBuf->IsFavorite;
        }
    else if (PROJECTMRUDETAIL_BUFF_EBBACKED == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("eBBacked")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("eBBacked")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "eBBacked property is not set, so it can not be retrieved."};
            }
        *boolean = projectmrudetailBuf->eBBacked;
        }
    else if (PROJECTMRUDETAIL_BUFF_ACTIVE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Active")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Active")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Active property is not set, so it can not be retrieved."};
            }
        *boolean = projectmrudetailBuf->Active;
        }
    else if (PROJECTMRUDETAIL_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LocationIsUsingLatLong")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LocationIsUsingLatLong")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LocationIsUsingLatLong property is not set, so it can not be retrieved."};
            }
        *boolean = projectmrudetailBuf->LocationIsUsingLatLong;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projecttemplateGetBooleanProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
bool* boolean
)
    {
    if (buf == NULL || bufferProperty == 0 || boolean == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) buf->lpItems;
    projecttemplateBuf = projecttemplateBuf + index;

    if (PROJECTTEMPLATE_BUFF_ACTIVE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Active")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Active")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Active property is not set, so it can not be retrieved."};
            }
        *boolean = projecttemplateBuf->Active;
        }
    else if (PROJECTTEMPLATE_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("LocationIsUsingLatLong")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("LocationIsUsingLatLong")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LocationIsUsingLatLong property is not set, so it can not be retrieved."};
            }
        *boolean = projecttemplateBuf->LocationIsUsingLatLong;
        }
    else if (PROJECTTEMPLATE_BUFF_EBBACKED == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("eBBacked")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("eBBacked")] == false)
            {
            boolean = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "eBBacked property is not set, so it can not be retrieved."};
            }
        *boolean = projecttemplateBuf->eBBacked;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectGetIntProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
int* integer
)
    {
    if (buf == NULL || bufferProperty == 0 || integer == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) buf->lpItems;
    projectBuf = projectBuf + index;

    if (PROJECT_BUFF_STATUS == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Status")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Status")] == false)
            {
            integer = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Status property is not set, so it can not be retrieved."};
            }
        *integer = projectBuf->Status;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectfavoriteGetIntProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
int* integer
)
    {
    if (buf == NULL || bufferProperty == 0 || integer == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) buf->lpItems;
    projectfavoriteBuf = projectfavoriteBuf + index;

    if (PROJECTFAVORITE_BUFF_STATUS == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Status")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Status")] == false)
            {
            integer = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Status property is not set, so it can not be retrieved."};
            }
        *integer = projectfavoriteBuf->Status;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetIntProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
int* integer
)
    {
    if (buf == NULL || bufferProperty == 0 || integer == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_STATUS == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Status")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Status")] == false)
            {
            integer = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Status property is not set, so it can not be retrieved."};
            }
        *integer = projectmrudetailBuf->Status;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projecttemplateGetIntProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
int* integer
)
    {
    if (buf == NULL || bufferProperty == 0 || integer == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) buf->lpItems;
    projecttemplateBuf = projecttemplateBuf + index;

    if (PROJECTTEMPLATE_BUFF_STATUS == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Status")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Status")] == false)
            {
            integer = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Status property is not set, so it can not be retrieved."};
            }
        *integer = projecttemplateBuf->Status;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectGetDoubleProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
double* pDouble
)
    {
    if (buf == NULL || bufferProperty == 0 || pDouble == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTBUFFER projectBuf = (LPCWSCCPROJECTBUFFER) buf->lpItems;
    projectBuf = projectBuf + index;

    if (PROJECT_BUFF_LATITUDE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Latitude")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Latitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Latitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectBuf->Latitude;
        }
    else if (PROJECT_BUFF_LONGITUDE == bufferProperty)
        {
        if (projectBuf->IsSet.find(stringToWString("Longitude")) == projectBuf->IsSet.end() || projectBuf->IsSet[stringToWString("Longitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Longitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectBuf->Longitude;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectfavoriteGetDoubleProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
double* pDouble
)
    {
    if (buf == NULL || bufferProperty == 0 || pDouble == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf = (LPCWSCCPROJECTFAVORITEBUFFER) buf->lpItems;
    projectfavoriteBuf = projectfavoriteBuf + index;

    if (PROJECTFAVORITE_BUFF_LATITUDE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Latitude")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Latitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Latitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectfavoriteBuf->Latitude;
        }
    else if (PROJECTFAVORITE_BUFF_LONGITUDE == bufferProperty)
        {
        if (projectfavoriteBuf->IsSet.find(stringToWString("Longitude")) == projectfavoriteBuf->IsSet.end() || projectfavoriteBuf->IsSet[stringToWString("Longitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Longitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectfavoriteBuf->Longitude;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetDoubleProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
double* pDouble
)
    {
    if (buf == NULL || bufferProperty == 0 || pDouble == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_LATITUDE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Latitude")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Latitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Latitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectmrudetailBuf->Latitude;
        }
    else if (PROJECTMRUDETAIL_BUFF_LONGITUDE == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("Longitude")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("Longitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Longitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projectmrudetailBuf->Longitude;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projecttemplateGetDoubleProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
double* pDouble
)
    {
    if (buf == NULL || bufferProperty == 0 || pDouble == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf = (LPCWSCCPROJECTTEMPLATEBUFFER) buf->lpItems;
    projecttemplateBuf = projecttemplateBuf + index;

    if (PROJECTTEMPLATE_BUFF_LATITUDE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Latitude")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Latitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Latitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projecttemplateBuf->Latitude;
        }
    else if (PROJECTTEMPLATE_BUFF_LONGITUDE == bufferProperty)
        {
        if (projecttemplateBuf->IsSet.find(stringToWString("Longitude")) == projecttemplateBuf->IsSet.end() || projecttemplateBuf->IsSet[stringToWString("Longitude")] == false)
            {
            pDouble = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "Longitude property is not set, so it can not be retrieved."};
            }
        *pDouble = projecttemplateBuf->Longitude;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2016
+---------------+---------------+---------------+---------------+---------------+------*/
CALLSTATUS projectmrudetailGetLongProperty
(
HCWSCCBUFFER buf,
int bufferProperty,
int index,
long* pLong
)
    {
    if (buf == NULL || bufferProperty == 0 || pLong == NULL)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "An invalid buffer pointer or invalid property pointer was passed into the get property function."};

    if(index < 0 || index >= buf->lCount)
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The index parameter passed into the get property function is out of bounds."};

    LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf = (LPCWSCCPROJECTMRUDETAILBUFFER) buf->lpItems;
    projectmrudetailBuf = projectmrudetailBuf + index;

    if (PROJECTMRUDETAIL_BUFF_LASTACCESSEDBYUSER == bufferProperty)
        {
        if (projectmrudetailBuf->IsSet.find(stringToWString("LastAccessedByUser")) == projectmrudetailBuf->IsSet.end() || projectmrudetailBuf->IsSet[stringToWString("LastAccessedByUser")] == false)
            {
            pLong = nullptr;
            return CALLSTATUS {PROPERTY_HAS_NOT_BEEN_SET, "The buffer property passed to function has not been set in the buffer", "LastAccessedByUser property is not set, so it can not be retrieved."};
            }
        *pLong = projectmrudetailBuf->LastAccessedByUser;
        }
    else
        return CALLSTATUS {INVALID_PARAMETER, "Invalid parameter passed to function", "The bufferProperty is invalid. It did not match up with any of the buffer's properties."};
    return CALLSTATUS {SUCCESS, "Successful operation", "The property retrieval function completed successfully."};
    }




void ConnectUserBufferStuffer
(
LPCWSCCCONNECTUSERBUFFER connectuserBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("UserName") && properties["UserName"].IsString())
        connectuserBuf->UserName = stringToWString(properties["UserName"].GetString());
    connectuserBuf->IsSet[stringToWString("UserName")] = (properties.HasMember("UserName") && properties["UserName"].IsString());
    if(properties.HasMember("UserEmail") && properties["UserEmail"].IsString())
        connectuserBuf->UserEmail = stringToWString(properties["UserEmail"].GetString());
    connectuserBuf->IsSet[stringToWString("UserEmail")] = (properties.HasMember("UserEmail") && properties["UserEmail"].IsString());
    if(properties.HasMember("ConnectOrgGuid") && properties["ConnectOrgGuid"].IsString())
        connectuserBuf->ConnectOrgGuid = guidFromString(stringToWString(properties["ConnectOrgGuid"].GetString()));
    connectuserBuf->IsSet[stringToWString("ConnectOrgGuid")] = (properties.HasMember("ConnectOrgGuid") && properties["ConnectOrgGuid"].IsString());
    if(properties.HasMember("UltimateSiteId") && properties["UltimateSiteId"].IsString())
        connectuserBuf->UltimateSiteId = stringToWString(properties["UltimateSiteId"].GetString());
    connectuserBuf->IsSet[stringToWString("UltimateSiteId")] = (properties.HasMember("UltimateSiteId") && properties["UltimateSiteId"].IsString());
    if(properties.HasMember("OrgName") && properties["OrgName"].IsString())
        connectuserBuf->OrgName = stringToWString(properties["OrgName"].GetString());
    connectuserBuf->IsSet[stringToWString("OrgName")] = (properties.HasMember("OrgName") && properties["OrgName"].IsString());
    }

void OrganizationBufferStuffer
(
LPCWSCCORGANIZATIONBUFFER organizationBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("OrganizationGuid") && properties["OrganizationGuid"].IsString())
        organizationBuf->OrganizationGuid = guidFromString(stringToWString(properties["OrganizationGuid"].GetString()));
    organizationBuf->IsSet[stringToWString("OrganizationGuid")] = (properties.HasMember("OrganizationGuid") && properties["OrganizationGuid"].IsString());
    if(properties.HasMember("OrganizationName") && properties["OrganizationName"].IsString())
        organizationBuf->OrganizationName = stringToWString(properties["OrganizationName"].GetString());
    organizationBuf->IsSet[stringToWString("OrganizationName")] = (properties.HasMember("OrganizationName") && properties["OrganizationName"].IsString());
    }

void ProjectBufferStuffer
(
LPCWSCCPROJECTBUFFER projectBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projectBuf->Name = stringToWString(properties["Name"].GetString());
    projectBuf->IsSet[stringToWString("Name")] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projectBuf->Number = stringToWString(properties["Number"].GetString());
    projectBuf->IsSet[stringToWString("Number")] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString())
        projectBuf->OrganizationId = stringToWString(properties["OrganizationId"].GetString());
    projectBuf->IsSet[stringToWString("OrganizationId")] = (properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString());
    if(properties.HasMember("Active") && properties["Active"].IsBool())
        projectBuf->Active = properties["Active"].GetBool();
    projectBuf->IsSet[stringToWString("Active")] = (properties.HasMember("Active") && properties["Active"].IsBool());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projectBuf->Industry = stringToWString(properties["Industry"].GetString());
    projectBuf->IsSet[stringToWString("Industry")] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projectBuf->AssetType = stringToWString(properties["AssetType"].GetString());
    projectBuf->IsSet[stringToWString("AssetType")] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectBuf->LastModified = stringToWString(properties["LastModified"].GetString());
    projectBuf->IsSet[stringToWString("LastModified")] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projectBuf->Location = stringToWString(properties["Location"].GetString());
    projectBuf->IsSet[stringToWString("Location")] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projectBuf->Latitude = properties["Latitude"].GetDouble();
    projectBuf->IsSet[stringToWString("Latitude")] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projectBuf->Longitude = properties["Longitude"].GetDouble();
    projectBuf->IsSet[stringToWString("Longitude")] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projectBuf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projectBuf->IsSet[stringToWString("LocationIsUsingLatLong")] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projectBuf->RegisteredDate = stringToWString(properties["RegisteredDate"].GetString());
    projectBuf->IsSet[stringToWString("RegisteredDate")] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projectBuf->TimeZoneLocation = stringToWString(properties["TimeZoneLocation"].GetString());
    projectBuf->IsSet[stringToWString("TimeZoneLocation")] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projectBuf->Status = properties["Status"].GetInt();
    projectBuf->IsSet[stringToWString("Status")] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("eBBacked") && properties["eBBacked"].IsBool())
        projectBuf->eBBacked = properties["eBBacked"].GetBool();
    projectBuf->IsSet[stringToWString("eBBacked")] = (properties.HasMember("eBBacked") && properties["eBBacked"].IsBool());
    if(properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString())
        projectBuf->LinkToAssetType = stringToWString(properties["LinkToAssetType"].GetString());
    projectBuf->IsSet[stringToWString("LinkToAssetType")] = (properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString());
    if(properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString())
        projectBuf->LinkToIndustry = stringToWString(properties["LinkToIndustry"].GetString());
    projectBuf->IsSet[stringToWString("LinkToIndustry")] = (properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString());
    if(properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString())
        projectBuf->LinkToIndustryAssets = stringToWString(properties["LinkToIndustryAssets"].GetString());
    projectBuf->IsSet[stringToWString("LinkToIndustryAssets")] = (properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString());
    if(properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString())
        projectBuf->PWDMInvitationId = stringToWString(properties["PWDMInvitationId"].GetString());
    projectBuf->IsSet[stringToWString("PWDMInvitationId")] = (properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString());
    }

void ProjectFavoriteBufferStuffer
(
LPCWSCCPROJECTFAVORITEBUFFER projectfavoriteBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("eBBacked") && properties["eBBacked"].IsBool())
        projectfavoriteBuf->eBBacked = properties["eBBacked"].GetBool();
    projectfavoriteBuf->IsSet[stringToWString("eBBacked")] = (properties.HasMember("eBBacked") && properties["eBBacked"].IsBool());
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projectfavoriteBuf->Name = stringToWString(properties["Name"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("Name")] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projectfavoriteBuf->Number = stringToWString(properties["Number"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("Number")] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString())
        projectfavoriteBuf->OrganizationId = stringToWString(properties["OrganizationId"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("OrganizationId")] = (properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString());
    if(properties.HasMember("Active") && properties["Active"].IsBool())
        projectfavoriteBuf->Active = properties["Active"].GetBool();
    projectfavoriteBuf->IsSet[stringToWString("Active")] = (properties.HasMember("Active") && properties["Active"].IsBool());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projectfavoriteBuf->Industry = stringToWString(properties["Industry"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("Industry")] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projectfavoriteBuf->AssetType = stringToWString(properties["AssetType"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("AssetType")] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectfavoriteBuf->LastModified = stringToWString(properties["LastModified"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("LastModified")] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projectfavoriteBuf->Location = stringToWString(properties["Location"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("Location")] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projectfavoriteBuf->Latitude = properties["Latitude"].GetDouble();
    projectfavoriteBuf->IsSet[stringToWString("Latitude")] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projectfavoriteBuf->Longitude = properties["Longitude"].GetDouble();
    projectfavoriteBuf->IsSet[stringToWString("Longitude")] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projectfavoriteBuf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projectfavoriteBuf->IsSet[stringToWString("LocationIsUsingLatLong")] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projectfavoriteBuf->RegisteredDate = stringToWString(properties["RegisteredDate"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("RegisteredDate")] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projectfavoriteBuf->TimeZoneLocation = stringToWString(properties["TimeZoneLocation"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("TimeZoneLocation")] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projectfavoriteBuf->Status = properties["Status"].GetInt();
    projectfavoriteBuf->IsSet[stringToWString("Status")] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString())
        projectfavoriteBuf->PWDMInvitationId = stringToWString(properties["PWDMInvitationId"].GetString());
    projectfavoriteBuf->IsSet[stringToWString("PWDMInvitationId")] = (properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString());
    }

void ProjectMRUBufferStuffer
(
LPCWSCCPROJECTMRUBUFFER projectmruBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("ProjectGuid") && properties["ProjectGuid"].IsString())
        projectmruBuf->ProjectGuid = stringToWString(properties["ProjectGuid"].GetString());
    projectmruBuf->IsSet[stringToWString("ProjectGuid")] = (properties.HasMember("ProjectGuid") && properties["ProjectGuid"].IsString());
    if(properties.HasMember("ProjectName") && properties["ProjectName"].IsString())
        projectmruBuf->ProjectName = stringToWString(properties["ProjectName"].GetString());
    projectmruBuf->IsSet[stringToWString("ProjectName")] = (properties.HasMember("ProjectName") && properties["ProjectName"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectmruBuf->LastModified = stringToWString(properties["LastModified"].GetString());
    projectmruBuf->IsSet[stringToWString("LastModified")] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    }

void ProjectMRUDetailBufferStuffer
(
LPCWSCCPROJECTMRUDETAILBUFFER projectmrudetailBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("IsFavorite") && properties["IsFavorite"].IsBool())
        projectmrudetailBuf->IsFavorite = properties["IsFavorite"].GetBool();
    projectmrudetailBuf->IsSet[stringToWString("IsFavorite")] = (properties.HasMember("IsFavorite") && properties["IsFavorite"].IsBool());
    if(properties.HasMember("LastAccessedByUser") && properties["LastAccessedByUser"].IsInt())
        projectmrudetailBuf->LastAccessedByUser = properties["LastAccessedByUser"].GetInt();
    projectmrudetailBuf->IsSet[stringToWString("LastAccessedByUser")] = (properties.HasMember("LastAccessedByUser") && properties["LastAccessedByUser"].IsInt());
    if(properties.HasMember("eBBacked") && properties["eBBacked"].IsBool())
        projectmrudetailBuf->eBBacked = properties["eBBacked"].GetBool();
    projectmrudetailBuf->IsSet[stringToWString("eBBacked")] = (properties.HasMember("eBBacked") && properties["eBBacked"].IsBool());
    if(properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString())
        projectmrudetailBuf->LinkToAssetType = stringToWString(properties["LinkToAssetType"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("LinkToAssetType")] = (properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString());
    if(properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString())
        projectmrudetailBuf->LinkToIndustry = stringToWString(properties["LinkToIndustry"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("LinkToIndustry")] = (properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString());
    if(properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString())
        projectmrudetailBuf->LinkToIndustryAssets = stringToWString(properties["LinkToIndustryAssets"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("LinkToIndustryAssets")] = (properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString());
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projectmrudetailBuf->Name = stringToWString(properties["Name"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("Name")] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projectmrudetailBuf->Number = stringToWString(properties["Number"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("Number")] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString())
        projectmrudetailBuf->OrganizationId = stringToWString(properties["OrganizationId"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("OrganizationId")] = (properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString());
    if(properties.HasMember("Active") && properties["Active"].IsBool())
        projectmrudetailBuf->Active = properties["Active"].GetBool();
    projectmrudetailBuf->IsSet[stringToWString("Active")] = (properties.HasMember("Active") && properties["Active"].IsBool());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projectmrudetailBuf->Industry = stringToWString(properties["Industry"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("Industry")] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projectmrudetailBuf->AssetType = stringToWString(properties["AssetType"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("AssetType")] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectmrudetailBuf->LastModified = stringToWString(properties["LastModified"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("LastModified")] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projectmrudetailBuf->Location = stringToWString(properties["Location"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("Location")] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projectmrudetailBuf->Latitude = properties["Latitude"].GetDouble();
    projectmrudetailBuf->IsSet[stringToWString("Latitude")] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projectmrudetailBuf->Longitude = properties["Longitude"].GetDouble();
    projectmrudetailBuf->IsSet[stringToWString("Longitude")] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projectmrudetailBuf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projectmrudetailBuf->IsSet[stringToWString("LocationIsUsingLatLong")] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projectmrudetailBuf->RegisteredDate = stringToWString(properties["RegisteredDate"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("RegisteredDate")] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projectmrudetailBuf->TimeZoneLocation = stringToWString(properties["TimeZoneLocation"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("TimeZoneLocation")] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projectmrudetailBuf->Status = properties["Status"].GetInt();
    projectmrudetailBuf->IsSet[stringToWString("Status")] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString())
        projectmrudetailBuf->PWDMInvitationId = stringToWString(properties["PWDMInvitationId"].GetString());
    projectmrudetailBuf->IsSet[stringToWString("PWDMInvitationId")] = (properties.HasMember("PWDMInvitationId") && properties["PWDMInvitationId"].IsString());
    }

void ProjectTemplateBufferStuffer
(
LPCWSCCPROJECTTEMPLATEBUFFER projecttemplateBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projecttemplateBuf->Name = stringToWString(properties["Name"].GetString());
    projecttemplateBuf->IsSet[stringToWString("Name")] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projecttemplateBuf->Number = stringToWString(properties["Number"].GetString());
    projecttemplateBuf->IsSet[stringToWString("Number")] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString())
        projecttemplateBuf->OrganizationId = stringToWString(properties["OrganizationId"].GetString());
    projecttemplateBuf->IsSet[stringToWString("OrganizationId")] = (properties.HasMember("OrganizationId") && properties["OrganizationId"].IsString());
    if(properties.HasMember("Active") && properties["Active"].IsBool())
        projecttemplateBuf->Active = properties["Active"].GetBool();
    projecttemplateBuf->IsSet[stringToWString("Active")] = (properties.HasMember("Active") && properties["Active"].IsBool());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projecttemplateBuf->Industry = stringToWString(properties["Industry"].GetString());
    projecttemplateBuf->IsSet[stringToWString("Industry")] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projecttemplateBuf->AssetType = stringToWString(properties["AssetType"].GetString());
    projecttemplateBuf->IsSet[stringToWString("AssetType")] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projecttemplateBuf->LastModified = stringToWString(properties["LastModified"].GetString());
    projecttemplateBuf->IsSet[stringToWString("LastModified")] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projecttemplateBuf->Location = stringToWString(properties["Location"].GetString());
    projecttemplateBuf->IsSet[stringToWString("Location")] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projecttemplateBuf->Latitude = properties["Latitude"].GetDouble();
    projecttemplateBuf->IsSet[stringToWString("Latitude")] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projecttemplateBuf->Longitude = properties["Longitude"].GetDouble();
    projecttemplateBuf->IsSet[stringToWString("Longitude")] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projecttemplateBuf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projecttemplateBuf->IsSet[stringToWString("LocationIsUsingLatLong")] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projecttemplateBuf->RegisteredDate = stringToWString(properties["RegisteredDate"].GetString());
    projecttemplateBuf->IsSet[stringToWString("RegisteredDate")] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projecttemplateBuf->TimeZoneLocation = stringToWString(properties["TimeZoneLocation"].GetString());
    projecttemplateBuf->IsSet[stringToWString("TimeZoneLocation")] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projecttemplateBuf->Status = properties["Status"].GetInt();
    projecttemplateBuf->IsSet[stringToWString("Status")] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("eBBacked") && properties["eBBacked"].IsBool())
        projecttemplateBuf->eBBacked = properties["eBBacked"].GetBool();
    projecttemplateBuf->IsSet[stringToWString("eBBacked")] = (properties.HasMember("eBBacked") && properties["eBBacked"].IsBool());
    if(properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString())
        projecttemplateBuf->LinkToAssetType = stringToWString(properties["LinkToAssetType"].GetString());
    projecttemplateBuf->IsSet[stringToWString("LinkToAssetType")] = (properties.HasMember("LinkToAssetType") && properties["LinkToAssetType"].IsString());
    if(properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString())
        projecttemplateBuf->LinkToIndustry = stringToWString(properties["LinkToIndustry"].GetString());
    projecttemplateBuf->IsSet[stringToWString("LinkToIndustry")] = (properties.HasMember("LinkToIndustry") && properties["LinkToIndustry"].IsString());
    if(properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString())
        projecttemplateBuf->LinkToIndustryAssets = stringToWString(properties["LinkToIndustryAssets"].GetString());
    projecttemplateBuf->IsSet[stringToWString("LinkToIndustryAssets")] = (properties.HasMember("LinkToIndustryAssets") && properties["LinkToIndustryAssets"].IsString());
    }

