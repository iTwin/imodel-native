/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/ConnectWsgGlobal/GlobalSchemaGen.cpp $
|
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyCApiGen tool on April 12, 2017.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganization_V2List
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* organization_v2Buffer
)
    {
    VERIFY_API

    if (organization_v2Buffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organization_v2Buffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "Organization_V2"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCORGANIZATION_V2BUFFER bufToFill = new CWSCCORGANIZATION_V2BUFFER;
        Organization_V2_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_ORGANIZATION_V2;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *organization_v2Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganization_V2List completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateOrganization_V2
(
CWSCCHANDLE apiHandle,
WCharCP OrganizationGuid,
WCharCP OrganizationName
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Organization_V2";

    Json::Value propertiesJson;
    if (OrganizationGuid != nullptr) propertiesJson["OrganizationGuid"] = Utf8String(OrganizationGuid);
    if (OrganizationName != nullptr) propertiesJson["OrganizationName"] = Utf8String(OrganizationName);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Organization_V2 properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateOrganization_V2 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrganization_V2
(
CWSCCHANDLE apiHandle,
WCharCP organization_v2Id,
CWSCCDATABUFHANDLE* organization_v2Buffer
)
    {
    VERIFY_API

    if (organization_v2Buffer == nullptr || organization_v2Id == nullptr || wcslen(organization_v2Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("organization_v2Buffer is a nullptr or organization_v2Id is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "Organization_V2", Utf8String(organization_v2Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf = new CWSCCORGANIZATION_V2BUFFER;
    Organization_V2_BufferStuffer(organization_v2Buf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(organization_v2Buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_ORGANIZATION_V2;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {organization_v2Buf};
    *organization_v2Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrganization_V2 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrgProjectList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* orgprojectBuffer
)
    {
    VERIFY_API

    if (orgprojectBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("orgprojectBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "OrgProject"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCORGPROJECTBUFFER bufToFill = new CWSCCORGPROJECTBUFFER;
        OrgProject_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_ORGPROJECT;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *orgprojectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrgProjectList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateOrgProject
(
CWSCCHANDLE apiHandle,
WCharCP Name,
WCharCP Number,
int32_t* Status,
bool* IsRbacEnabled
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "OrgProject";

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (IsRbacEnabled != nullptr) propertiesJson["IsRbacEnabled"] = *IsRbacEnabled;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid OrgProject properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateOrgProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadOrgProject
(
CWSCCHANDLE apiHandle,
WCharCP orgprojectId,
CWSCCDATABUFHANDLE* orgprojectBuffer
)
    {
    VERIFY_API

    if (orgprojectBuffer == nullptr || orgprojectId == nullptr || wcslen(orgprojectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("orgprojectBuffer is a nullptr or orgprojectId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "OrgProject", Utf8String(orgprojectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCORGPROJECTBUFFER orgprojectBuf = new CWSCCORGPROJECTBUFFER;
    OrgProject_BufferStuffer(orgprojectBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(orgprojectBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_ORGPROJECT;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {orgprojectBuf};
    *orgprojectBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadOrgProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateOrgProject
(
CWSCCHANDLE apiHandle,
WCharCP orgprojectId,
WCharCP Name,
WCharCP Number,
int32_t* Status,
bool* IsRbacEnabled
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (IsRbacEnabled != nullptr) propertiesJson["IsRbacEnabled"] = *IsRbacEnabled;
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid OrgProject properties passed in.");
        return INVALID_PARAMETER;
        }
    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendUpdateObjectRequest({"GlobalSchema", "OrgProject", Utf8String(orgprojectId)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateOrgProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteOrgProject
(
CWSCCHANDLE apiHandle,
WCharCP orgprojectId
)
    {
    VERIFY_API

    if (orgprojectId == nullptr || wcslen(orgprojectId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("orgprojectId is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendDeleteObjectRequest({"GlobalSchema", "OrgProject", Utf8String(orgprojectId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteOrgProject completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProject_V4List
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* project_v4Buffer
)
    {
    VERIFY_API

    if (project_v4Buffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("project_v4Buffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "Project_V4"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECT_V4BUFFER bufToFill = new CWSCCPROJECT_V4BUFFER;
        Project_V4_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_PROJECT_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *project_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProject_V4List completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProject_V4
(
CWSCCHANDLE apiHandle,
WCharCP UltimateRefId,
bool* IsRbacEnabled,
WCharCP Name,
WCharCP Number,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP Data_Location_Guid,
WCharCP Country_Code
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "Project_V4";

    Json::Value propertiesJson;
    if (UltimateRefId != nullptr) propertiesJson["UltimateRefId"] = Utf8String(UltimateRefId);
    if (IsRbacEnabled != nullptr) propertiesJson["IsRbacEnabled"] = *IsRbacEnabled;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (Data_Location_Guid != nullptr) propertiesJson["Data_Location_Guid"] = Utf8String(Data_Location_Guid);
    if (Country_Code != nullptr) propertiesJson["Country_Code"] = Utf8String(Country_Code);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project_V4 properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProject_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProject_V4
(
CWSCCHANDLE apiHandle,
WCharCP project_v4Id,
CWSCCDATABUFHANDLE* project_v4Buffer
)
    {
    VERIFY_API

    if (project_v4Buffer == nullptr || project_v4Id == nullptr || wcslen(project_v4Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("project_v4Buffer is a nullptr or project_v4Id is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "Project_V4", Utf8String(project_v4Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = new CWSCCPROJECT_V4BUFFER;
    Project_V4_BufferStuffer(project_v4Buf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(project_v4Buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_PROJECT_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {project_v4Buf};
    *project_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProject_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_UpdateProject_V4
(
CWSCCHANDLE apiHandle,
WCharCP project_v4Id,
WCharCP UltimateRefId,
bool* IsRbacEnabled,
WCharCP Name,
WCharCP Number,
WCharCP Industry,
WCharCP AssetType,
WCharCP LastModified,
WCharCP Location,
double* Latitude,
double* Longitude,
bool* LocationIsUsingLatLong,
WCharCP RegisteredDate,
WCharCP TimeZoneLocation,
int32_t* Status,
WCharCP Data_Location_Guid,
WCharCP Country_Code
)
    {
    VERIFY_API

    Json::Value propertiesJson;
    if (UltimateRefId != nullptr) propertiesJson["UltimateRefId"] = Utf8String(UltimateRefId);
    if (IsRbacEnabled != nullptr) propertiesJson["IsRbacEnabled"] = *IsRbacEnabled;
    if (Name != nullptr) propertiesJson["Name"] = Utf8String(Name);
    if (Number != nullptr) propertiesJson["Number"] = Utf8String(Number);
    if (Industry != nullptr) propertiesJson["Industry"] = Utf8String(Industry);
    if (AssetType != nullptr) propertiesJson["AssetType"] = Utf8String(AssetType);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (Location != nullptr) propertiesJson["Location"] = Utf8String(Location);
    if (Latitude != nullptr) propertiesJson["Latitude"] = *Latitude;
    if (Longitude != nullptr) propertiesJson["Longitude"] = *Longitude;
    if (LocationIsUsingLatLong != nullptr) propertiesJson["LocationIsUsingLatLong"] = *LocationIsUsingLatLong;
    if (RegisteredDate != nullptr) propertiesJson["RegisteredDate"] = Utf8String(RegisteredDate);
    if (TimeZoneLocation != nullptr) propertiesJson["TimeZoneLocation"] = Utf8String(TimeZoneLocation);
    if (Status != nullptr) propertiesJson["Status"] = *Status;
    if (Data_Location_Guid != nullptr) propertiesJson["Data_Location_Guid"] = Utf8String(Data_Location_Guid);
    if (Country_Code != nullptr) propertiesJson["Country_Code"] = Utf8String(Country_Code);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid Project_V4 properties passed in.");
        return INVALID_PARAMETER;
        }
    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendUpdateObjectRequest({"GlobalSchema", "Project_V4", Utf8String(project_v4Id)}, propertiesJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_UpdateProject_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProject_V4
(
CWSCCHANDLE apiHandle,
WCharCP project_v4Id
)
    {
    VERIFY_API

    if (project_v4Id == nullptr || wcslen(project_v4Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("project_v4Id is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendDeleteObjectRequest({"GlobalSchema", "Project_V4", Utf8String(project_v4Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteProject_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavorite_V4List
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectfavorite_v4Buffer
)
    {
    VERIFY_API

    if (projectfavorite_v4Buffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavorite_v4Buffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectFavorite_V4"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTFAVORITE_V4BUFFER bufToFill = new CWSCCPROJECTFAVORITE_V4BUFFER;
        ProjectFavorite_V4_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_PROJECTFAVORITE_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *projectfavorite_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavorite_V4List completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectFavorite_V4
(
CWSCCHANDLE apiHandle,
WCharCP projectfavorite_v4Id,
CWSCCDATABUFHANDLE* projectfavorite_v4Buffer
)
    {
    VERIFY_API

    if (projectfavorite_v4Buffer == nullptr || projectfavorite_v4Id == nullptr || wcslen(projectfavorite_v4Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectfavorite_v4Buffer is a nullptr or projectfavorite_v4Id is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectFavorite_V4", Utf8String(projectfavorite_v4Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = new CWSCCPROJECTFAVORITE_V4BUFFER;
    ProjectFavorite_V4_BufferStuffer(projectfavorite_v4Buf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectfavorite_v4Buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_PROJECTFAVORITE_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {projectfavorite_v4Buf};
    *projectfavorite_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectFavorite_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_DeleteProjectFavorite_V4
(
CWSCCHANDLE apiHandle,
WCharCP projectfavorite_v4Id
)
    {
    VERIFY_API

    if (projectfavorite_v4Id == nullptr || wcslen(projectfavorite_v4Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
         api->SetStatusDescription("projectfavorite_v4Id is a nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendDeleteObjectRequest({"GlobalSchema", "ProjectFavorite_V4", Utf8String(projectfavorite_v4Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_DeleteProjectFavorite_V4 completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUList
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRU"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUBUFFER bufToFill = new CWSCCPROJECTMRUBUFFER;
        ProjectMRU_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_PROJECTMRU;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUList completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_CreateProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP ProjectGuid,
WCharCP ProjectName,
WCharCP LastModified
)
    {
    VERIFY_API

    Json::Value instance;
    instance["schemaName"] = "GlobalSchema";
    instance["className"] = "ProjectMRU";

    Json::Value propertiesJson;
    if (ProjectGuid != nullptr) propertiesJson["ProjectGuid"] = Utf8String(ProjectGuid);
    if (ProjectName != nullptr) propertiesJson["ProjectName"] = Utf8String(ProjectName);
    if (LastModified != nullptr) propertiesJson["LastModified"] = Utf8String(LastModified);
    if (propertiesJson.size() == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("There were not any valid ProjectMRU properties passed in.");
        return INVALID_PARAMETER;
        }
    instance["properties"] = propertiesJson;

    Json::Value objectCreationJson;
    objectCreationJson["instance"] = instance;

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendCreateObjectRequest(objectCreationJson)->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    api->SetCreatedObjectResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_CreateProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRU
(
CWSCCHANDLE apiHandle,
WCharCP projectmruId,
CWSCCDATABUFHANDLE* projectmruBuffer
)
    {
    VERIFY_API

    if (projectmruBuffer == nullptr || projectmruId == nullptr || wcslen(projectmruId) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmruBuffer is a nullptr or projectmruId is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectMRU", Utf8String(projectmruId)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = new CWSCCPROJECTMRUBUFFER;
    ProjectMRU_BufferStuffer(projectmruBuf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmruBuf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_PROJECTMRU;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {projectmruBuf};
    *projectmruBuffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRU completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetail_V4List
(
CWSCCHANDLE apiHandle,
CWSCCDATABUFHANDLE* projectmrudetail_v4Buffer
)
    {
    VERIFY_API

    if (projectmrudetail_v4Buffer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetail_v4Buffer is a nullptr.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendQueryRequest(WSQuery("GlobalSchema", "ProjectMRUDetail_V4"))->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    for (WSObjectsReader::Instance instance : result.GetValue().GetInstances())
        {
        LPCWSCCPROJECTMRUDETAIL_V4BUFFER bufToFill = new CWSCCPROJECTMRUDETAIL_V4BUFFER;
        ProjectMRUDetail_V4_BufferStuffer(bufToFill, instance.GetProperties());
        buf->lItems.push_back(bufToFill);
        }

    buf->lCount = buf->lItems.size();
    buf->lClassType = BUFF_TYPE_PROJECTMRUDETAIL_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    *projectmrudetail_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetail_V4List completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    04/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ConnectWebServicesClientC_ReadProjectMRUDetail_V4
(
CWSCCHANDLE apiHandle,
WCharCP projectmrudetail_v4Id,
CWSCCDATABUFHANDLE* projectmrudetail_v4Buffer
)
    {
    VERIFY_API

    if (projectmrudetail_v4Buffer == nullptr || projectmrudetail_v4Id == nullptr || wcslen(projectmrudetail_v4Id) == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("projectmrudetail_v4Buffer is a nullptr or projectmrudetail_v4Id is nullptr or empty.");
        return INVALID_PARAMETER;
        }

    Utf8String connectwsgglobalUrl = UrlProvider::Urls::ConnectWsgGlobal.Get();
    if (api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL") == api->m_repositoryClients.end())
        {
        api->CreateWSRepositoryClient
            (
            connectwsgglobalUrl,
            "BentleyCONNECT.Global--CONNECT.GLOBAL"
            );
        }

    auto client = api->m_repositoryClients.find(connectwsgglobalUrl + "BentleyCONNECT.Global--CONNECT.GLOBAL")->second;
    auto result = client->SendGetObjectRequest({"GlobalSchema", "ProjectMRUDetail_V4", Utf8String(projectmrudetail_v4Id)})->GetResult();
    if (!result.IsSuccess())
        return wsresultToConnectWebServicesClientCStatus(api, result.GetError().GetId(), result.GetError().GetDisplayMessage(), result.GetError().GetDisplayDescription());

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = new CWSCCPROJECTMRUDETAIL_V4BUFFER;
    ProjectMRUDetail_V4_BufferStuffer(projectmrudetail_v4Buf, (*result.GetValue().GetInstances().begin()).GetProperties());

    CWSCCBUFFER* buf = (CWSCCBUFFER*) calloc(1, sizeof(CWSCCBUFFER));
    if (buf == nullptr)
        {
        free(projectmrudetail_v4Buf);
        api->SetStatusMessage("Memory failed to initialize interally.");
        api->SetStatusDescription("Failed to calloc memory for CWSCCBUFFER.");
        return INTERNAL_MEMORY_ERROR;
        }

    buf->lCount = 1;
    buf->lClassType = BUFF_TYPE_PROJECTMRUDETAIL_V4;
    buf->lSchemaType = SCHEMA_TYPE_GLOBALSCHEMA;
    buf->isWSGBuffer = true;
    buf->lItems = {projectmrudetail_v4Buf};
    *projectmrudetail_v4Buffer = (CWSCCDATABUFHANDLE) buf;

    api->SetObjectsResponse(result.GetValue());
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("ConnectWebServicesClientC_ReadProjectMRUDetail_V4 completed successfully.");
    return SUCCESS;
    }

