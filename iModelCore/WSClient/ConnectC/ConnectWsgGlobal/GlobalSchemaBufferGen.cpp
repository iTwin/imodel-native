/*--------------------------------------------------------------------------------------+
|
|     $Source: ConnectC/ConnectWsgGlobal/GlobalSchemaBufferGen.cpp $
|
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
//--------------------------------------------------------------------------------------+
// <auto-generated>
//     This code was generated by the pyCApiGen tool on March 17, 2017.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------+

#include "CWSCCInternal.h"

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
WString GlobalSchema_stringToWString(const Utf8String &str)
    {
    Utf16Buffer _16buf;
    BeStringUtilities::Utf8ToUtf16(_16buf, str.c_str());
    WString outStr;
    BeStringUtilities::Utf16ToWChar(outStr, _16buf.data());
    return outStr;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_DataBufferFree
(
LPCWSCC api,
HCWSCCBUFFER buf
)
    {
    for (uint64_t index = 0; index < buf->lItems.size(); index++)
        {
        if (buf->lItems[index] != nullptr)
            {
            switch(buf->lClassType)
                {
                case BUFF_TYPE_ORGANIZATION_V2:
                    {
                    LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf = (LPCWSCCORGANIZATION_V2BUFFER) buf->lItems[index];
                    delete organization_v2Buf;
                    }
                    break;
                case BUFF_TYPE_ORGPROJECT:
                    {
                    LPCWSCCORGPROJECTBUFFER orgprojectBuf = (LPCWSCCORGPROJECTBUFFER) buf->lItems[index];
                    delete orgprojectBuf;
                    }
                    break;
                case BUFF_TYPE_PROJECT_V4:
                    {
                    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
                    delete project_v4Buf;
                    }
                    break;
                case BUFF_TYPE_PROJECTFAVORITE_V4:
                    {
                    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
                    delete projectfavorite_v4Buf;
                    }
                    break;
                case BUFF_TYPE_PROJECTMRU:
                    {
                    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) buf->lItems[index];
                    delete projectmruBuf;
                    }
                    break;
                case BUFF_TYPE_PROJECTMRUDETAIL_V4:
                    {
                    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
                    delete projectmrudetail_v4Buf;
                    }
                    break;
                default:
                    continue;
                }
            }
        }
    free(buf);
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The ConnectWebServicesClientC_DataBufferFree function successfully completed.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_ORGANIZATION_V2:
            {
            return Organization_V2_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_ORGPROJECT:
            {
            return OrgProject_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_PROJECTMRU:
            {
            return ProjectMRU_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetStringProperty(api, buf, bufferProperty, index, strLength, str);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_ORGANIZATION_V2:
            {
            return Organization_V2_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_ORGPROJECT:
            {
            return OrgProject_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_PROJECTMRU:
            {
            return ProjectMRU_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetStringLength(api, buf, bufferProperty, index, outStringSize);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetDatetimeProperty(api, buf, bufferProperty, index, strLength, dateTime);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetDatetimeProperty(api, buf, bufferProperty, index, strLength, dateTime);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetDatetimeProperty(api, buf, bufferProperty, index, strLength, dateTime);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetGuidProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP guid
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_ORGANIZATION_V2:
            {
            return Organization_V2_GetGuidProperty(api, buf, bufferProperty, index, strLength, guid);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_ORGPROJECT:
            {
            return OrgProject_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetBooleanProperty(api, buf, bufferProperty, index, boolean);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetIntProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int32_t* integer
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_ORGPROJECT:
            {
            return OrgProject_GetIntProperty(api, buf, bufferProperty, index, integer);
            }
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetIntProperty(api, buf, bufferProperty, index, integer);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetIntProperty(api, buf, bufferProperty, index, integer);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetIntProperty(api, buf, bufferProperty, index, integer);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetDoubleProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
double* pDouble
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_PROJECT_V4:
            {
            return Project_V4_GetDoubleProperty(api, buf, bufferProperty, index, pDouble);
            }
        case BUFF_TYPE_PROJECTFAVORITE_V4:
            {
            return ProjectFavorite_V4_GetDoubleProperty(api, buf, bufferProperty, index, pDouble);
            }
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetDoubleProperty(api, buf, bufferProperty, index, pDouble);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus GlobalSchema_GetLongProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int64_t* pLong
)
    {
    switch (buf->lClassType)
        {
        case BUFF_TYPE_PROJECTMRUDETAIL_V4:
            {
            return ProjectMRUDetail_V4_GetLongProperty(api, buf, bufferProperty, index, pLong);
            }
        default:
            api->SetStatusMessage("Invalid parameter passed to function");
            api->SetStatusDescription("The buffer type passed in is invalid.");
            return INVALID_PARAMETER;
        }
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Organization_V2_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf = (LPCWSCCORGANIZATION_V2BUFFER) buf->lItems[index];
    if (ORGANIZATION_V2_BUFF_ORGANIZATIONNAME == bufferProperty)
        {
        if (organization_v2Buf->IsSet.find(WString("OrganizationName", true)) == organization_v2Buf->IsSet.end() || organization_v2Buf->IsSet[WString("OrganizationName", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("OrganizationName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, organization_v2Buf->OrganizationName.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus OrgProject_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGPROJECTBUFFER orgprojectBuf = (LPCWSCCORGPROJECTBUFFER) buf->lItems[index];
    if (ORGPROJECT_BUFF_NAME == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("Name", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("Name", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, orgprojectBuf->Name.c_str());
        }
    else if (ORGPROJECT_BUFF_NUMBER == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("Number", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("Number", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, orgprojectBuf->Number.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("UltimateRefId", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->UltimateRefId.c_str());
        }
    else if (PROJECT_V4_BUFF_NAME == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Name", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Name", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Name.c_str());
        }
    else if (PROJECT_V4_BUFF_NUMBER == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Number", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Number", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Number.c_str());
        }
    else if (PROJECT_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Industry", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Industry.c_str());
        }
    else if (PROJECT_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("AssetType", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->AssetType.c_str());
        }
    else if (PROJECT_V4_BUFF_LOCATION == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Location", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Location", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Location.c_str());
        }
    else if (PROJECT_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->TimeZoneLocation.c_str());
        }
    else if (PROJECT_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Data_Location_Guid.c_str());
        }
    else if (PROJECT_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Country_Code", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, project_v4Buf->Country_Code.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("UltimateRefId", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->UltimateRefId.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_NAME == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Name", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Name", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Name.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_NUMBER == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Number", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Number", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Number.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Industry", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Industry.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("AssetType", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->AssetType.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_LOCATION == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Location", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Location", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Location.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->TimeZoneLocation.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Data_Location_Guid.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Country_Code", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectfavorite_v4Buf->Country_Code.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRU_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) buf->lItems[index];
    if (PROJECTMRU_BUFF_PROJECTGUID == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("ProjectGuid", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("ProjectGuid", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ProjectGuid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmruBuf->ProjectGuid.c_str());
        }
    else if (PROJECTMRU_BUFF_PROJECTNAME == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("ProjectName", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("ProjectName", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ProjectName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmruBuf->ProjectName.c_str());
        }
    else if (PROJECTMRU_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("LastModified", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("LastModified", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastModified property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmruBuf->LastModified.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetStringProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP str
)
    {
    if (buf == nullptr || bufferProperty == 0 || str == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("UltimateRefId", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->UltimateRefId.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_NAME == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Name", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Name", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Name.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_NUMBER == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Number", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Number", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Number.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Industry", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Industry.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("AssetType", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->AssetType.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_LOCATION == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Location", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Location", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Location.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->TimeZoneLocation.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Data_Location_Guid.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Country_Code", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            str = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(str, strLength, projectmrudetail_v4Buf->Country_Code.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Organization_V2_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf = (LPCWSCCORGANIZATION_V2BUFFER) buf->lItems[index];
    if (ORGANIZATION_V2_BUFF_ORGANIZATIONNAME == bufferProperty)
        {
        if (organization_v2Buf->IsSet.find(WString("OrganizationName", true)) == organization_v2Buf->IsSet.end() || organization_v2Buf->IsSet[WString("OrganizationName", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("OrganizationName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = organization_v2Buf->OrganizationName.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus OrgProject_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGPROJECTBUFFER orgprojectBuf = (LPCWSCCORGPROJECTBUFFER) buf->lItems[index];
    if (ORGPROJECT_BUFF_NAME == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("Name", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("Name", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = orgprojectBuf->Name.length();
        }
    else if (ORGPROJECT_BUFF_NUMBER == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("Number", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("Number", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = orgprojectBuf->Number.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("UltimateRefId", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->UltimateRefId.length();
        }
    else if (PROJECT_V4_BUFF_NAME == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Name", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Name", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Name.length();
        }
    else if (PROJECT_V4_BUFF_NUMBER == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Number", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Number", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Number.length();
        }
    else if (PROJECT_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Industry", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Industry.length();
        }
    else if (PROJECT_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("AssetType", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->AssetType.length();
        }
    else if (PROJECT_V4_BUFF_LOCATION == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Location", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Location", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Location.length();
        }
    else if (PROJECT_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->TimeZoneLocation.length();
        }
    else if (PROJECT_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Data_Location_Guid.length();
        }
    else if (PROJECT_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Country_Code", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = project_v4Buf->Country_Code.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("UltimateRefId", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->UltimateRefId.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_NAME == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Name", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Name", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Name.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_NUMBER == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Number", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Number", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Number.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Industry", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Industry.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("AssetType", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->AssetType.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_LOCATION == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Location", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Location", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Location.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->TimeZoneLocation.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Data_Location_Guid.length();
        }
    else if (PROJECTFAVORITE_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Country_Code", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectfavorite_v4Buf->Country_Code.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRU_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUBUFFER projectmruBuf = (LPCWSCCPROJECTMRUBUFFER) buf->lItems[index];
    if (PROJECTMRU_BUFF_PROJECTGUID == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("ProjectGuid", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("ProjectGuid", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ProjectGuid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmruBuf->ProjectGuid.length();
        }
    else if (PROJECTMRU_BUFF_PROJECTNAME == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("ProjectName", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("ProjectName", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("ProjectName property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmruBuf->ProjectName.length();
        }
    else if (PROJECTMRU_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmruBuf->IsSet.find(WString("LastModified", true)) == projectmruBuf->IsSet.end() || projectmruBuf->IsSet[WString("LastModified", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastModified property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmruBuf->LastModified.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetStringLength
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
size_t* outStringSize
)
    {
    if (buf == nullptr || bufferProperty == 0 || outStringSize == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_ULTIMATEREFID == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("UltimateRefId", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("UltimateRefId", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("UltimateRefId property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->UltimateRefId.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_NAME == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Name", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Name", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Name property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Name.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_NUMBER == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Number", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Number", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Number property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Number.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_INDUSTRY == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Industry", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Industry", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Industry property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Industry.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_ASSETTYPE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("AssetType", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("AssetType", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("AssetType property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->AssetType.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_LOCATION == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Location", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Location", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Location property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Location.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_TIMEZONELOCATION == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("TimeZoneLocation", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("TimeZoneLocation", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("TimeZoneLocation property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->TimeZoneLocation.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_DATA_LOCATION_GUID == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Data_Location_Guid", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Data_Location_Guid", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Data_Location_Guid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Data_Location_Guid.length();
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_COUNTRY_CODE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Country_Code", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Country_Code", true)] == false)
            {
            outStringSize = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Country_Code property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *outStringSize = projectmrudetail_v4Buf->Country_Code.length();
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    if (buf == nullptr || bufferProperty == 0 || dateTime == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("LastModified", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("LastModified", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastModified property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, project_v4Buf->LastModified.c_str());
        }
    else if (PROJECT_V4_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("RegisteredDate", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("RegisteredDate", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("RegisteredDate property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, project_v4Buf->RegisteredDate.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    if (buf == nullptr || bufferProperty == 0 || dateTime == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("LastModified", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("LastModified", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastModified property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, projectfavorite_v4Buf->LastModified.c_str());
        }
    else if (PROJECTFAVORITE_V4_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("RegisteredDate", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("RegisteredDate", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("RegisteredDate property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, projectfavorite_v4Buf->RegisteredDate.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetDatetimeProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP dateTime
)
    {
    if (buf == nullptr || bufferProperty == 0 || dateTime == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_LASTMODIFIED == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("LastModified", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("LastModified", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastModified property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, projectmrudetail_v4Buf->LastModified.c_str());
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_REGISTEREDDATE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("RegisteredDate", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("RegisteredDate", true)] == false)
            {
            dateTime = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("RegisteredDate property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(dateTime, strLength, projectmrudetail_v4Buf->RegisteredDate.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Organization_V2_GetGuidProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
uint32_t strLength,
WCharP guid
)
    {
    if (buf == nullptr || bufferProperty == 0 || guid == nullptr || strLength == 0)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf = (LPCWSCCORGANIZATION_V2BUFFER) buf->lItems[index];
    if (ORGANIZATION_V2_BUFF_ORGANIZATIONGUID == bufferProperty)
        {
        if (organization_v2Buf->IsSet.find(WString("OrganizationGuid", true)) == organization_v2Buf->IsSet.end() || organization_v2Buf->IsSet[WString("OrganizationGuid", true)] == false)
            {
            guid = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("OrganizationGuid property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        BeStringUtilities::Wcsncpy(guid, strLength, organization_v2Buf->OrganizationGuid.c_str());
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus OrgProject_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGPROJECTBUFFER orgprojectBuf = (LPCWSCCORGPROJECTBUFFER) buf->lItems[index];
    if (ORGPROJECT_BUFF_ISRBACENABLED == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("IsRbacEnabled", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("IsRbacEnabled", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsRbacEnabled property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = orgprojectBuf->IsRbacEnabled;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_ISRBACENABLED == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("IsRbacEnabled", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("IsRbacEnabled", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsRbacEnabled property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = project_v4Buf->IsRbacEnabled;
        }
    else if (PROJECT_V4_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("LocationIsUsingLatLong", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LocationIsUsingLatLong property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = project_v4Buf->LocationIsUsingLatLong;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_ISRBACENABLED == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("IsRbacEnabled", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("IsRbacEnabled", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsRbacEnabled property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = projectfavorite_v4Buf->IsRbacEnabled;
        }
    else if (PROJECTFAVORITE_V4_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("LocationIsUsingLatLong", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LocationIsUsingLatLong property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = projectfavorite_v4Buf->LocationIsUsingLatLong;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetBooleanProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
bool* boolean
)
    {
    if (buf == nullptr || bufferProperty == 0 || boolean == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_ISFAVORITE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("IsFavorite", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("IsFavorite", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsFavorite property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = projectmrudetail_v4Buf->IsFavorite;
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_ISRBACENABLED == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("IsRbacEnabled", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("IsRbacEnabled", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("IsRbacEnabled property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = projectmrudetail_v4Buf->IsRbacEnabled;
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_LOCATIONISUSINGLATLONG == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("LocationIsUsingLatLong", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] == false)
            {
            boolean = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LocationIsUsingLatLong property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *boolean = projectmrudetail_v4Buf->LocationIsUsingLatLong;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus OrgProject_GetIntProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int32_t* integer
)
    {
    if (buf == nullptr || bufferProperty == 0 || integer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCORGPROJECTBUFFER orgprojectBuf = (LPCWSCCORGPROJECTBUFFER) buf->lItems[index];
    if (ORGPROJECT_BUFF_STATUS == bufferProperty)
        {
        if (orgprojectBuf->IsSet.find(WString("Status", true)) == orgprojectBuf->IsSet.end() || orgprojectBuf->IsSet[WString("Status", true)] == false)
            {
            integer = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Status property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *integer = orgprojectBuf->Status;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetIntProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int32_t* integer
)
    {
    if (buf == nullptr || bufferProperty == 0 || integer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_STATUS == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Status", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Status", true)] == false)
            {
            integer = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Status property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *integer = project_v4Buf->Status;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetIntProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int32_t* integer
)
    {
    if (buf == nullptr || bufferProperty == 0 || integer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_STATUS == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Status", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Status", true)] == false)
            {
            integer = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Status property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *integer = projectfavorite_v4Buf->Status;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetIntProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int32_t* integer
)
    {
    if (buf == nullptr || bufferProperty == 0 || integer == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_STATUS == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Status", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Status", true)] == false)
            {
            integer = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Status property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *integer = projectmrudetail_v4Buf->Status;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus Project_V4_GetDoubleProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
double* pDouble
)
    {
    if (buf == nullptr || bufferProperty == 0 || pDouble == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECT_V4BUFFER project_v4Buf = (LPCWSCCPROJECT_V4BUFFER) buf->lItems[index];
    if (PROJECT_V4_BUFF_LATITUDE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Latitude", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Latitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Latitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = project_v4Buf->Latitude;
        }
    else if (PROJECT_V4_BUFF_LONGITUDE == bufferProperty)
        {
        if (project_v4Buf->IsSet.find(WString("Longitude", true)) == project_v4Buf->IsSet.end() || project_v4Buf->IsSet[WString("Longitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Longitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = project_v4Buf->Longitude;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectFavorite_V4_GetDoubleProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
double* pDouble
)
    {
    if (buf == nullptr || bufferProperty == 0 || pDouble == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf = (LPCWSCCPROJECTFAVORITE_V4BUFFER) buf->lItems[index];
    if (PROJECTFAVORITE_V4_BUFF_LATITUDE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Latitude", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Latitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Latitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = projectfavorite_v4Buf->Latitude;
        }
    else if (PROJECTFAVORITE_V4_BUFF_LONGITUDE == bufferProperty)
        {
        if (projectfavorite_v4Buf->IsSet.find(WString("Longitude", true)) == projectfavorite_v4Buf->IsSet.end() || projectfavorite_v4Buf->IsSet[WString("Longitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Longitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = projectfavorite_v4Buf->Longitude;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetDoubleProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
double* pDouble
)
    {
    if (buf == nullptr || bufferProperty == 0 || pDouble == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_LATITUDE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Latitude", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Latitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Latitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = projectmrudetail_v4Buf->Latitude;
        }
    else if (PROJECTMRUDETAIL_V4_BUFF_LONGITUDE == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("Longitude", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("Longitude", true)] == false)
            {
            pDouble = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("Longitude property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pDouble = projectmrudetail_v4Buf->Longitude;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }


/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
CallStatus ProjectMRUDetail_V4_GetLongProperty
(
LPCWSCC api,
HCWSCCBUFFER buf,
int16_t bufferProperty,
uint32_t index,
int64_t* pLong
)
    {
    if (buf == nullptr || bufferProperty == 0 || pLong == nullptr)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("An invalid buffer pointer or invalid property pointer was passed into the get property function.");
        return INVALID_PARAMETER;
        }

    if(index >= buf->lCount)
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The index parameter passed into the get property function is out of bounds.");
        return INVALID_PARAMETER;
        }

    LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf = (LPCWSCCPROJECTMRUDETAIL_V4BUFFER) buf->lItems[index];
    if (PROJECTMRUDETAIL_V4_BUFF_LASTACCESSEDBYUSER == bufferProperty)
        {
        if (projectmrudetail_v4Buf->IsSet.find(WString("LastAccessedByUser", true)) == projectmrudetail_v4Buf->IsSet.end() || projectmrudetail_v4Buf->IsSet[WString("LastAccessedByUser", true)] == false)
            {
            pLong = nullptr;
            api->SetStatusMessage("The buffer property passed to function has not been set in the buffer");
            api->SetStatusDescription("LastAccessedByUser property is not set, so it can not be retrieved.");
            return PROPERTY_HAS_NOT_BEEN_SET;
            }
        *pLong = projectmrudetail_v4Buf->LastAccessedByUser;
        }
    else
        {
        api->SetStatusMessage("Invalid parameter passed to function");
        api->SetStatusDescription("The bufferProperty is invalid. It did not match up with any of the buffer's properties.");
        return INVALID_PARAMETER;
        }
    api->SetStatusMessage("Successful operation");
    api->SetStatusDescription("The property retrieval function completed successfully.");
    return SUCCESS;
    }



/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void Organization_V2_BufferStuffer
(
LPCWSCCORGANIZATION_V2BUFFER organization_v2Buf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("OrganizationGuid") && properties["OrganizationGuid"].IsString())
        organization_v2Buf->OrganizationGuid = WString(properties["OrganizationGuid"].GetString(), true);
    organization_v2Buf->IsSet[WString("OrganizationGuid", true)] = (properties.HasMember("OrganizationGuid") && properties["OrganizationGuid"].IsString());
    if(properties.HasMember("OrganizationName") && properties["OrganizationName"].IsString())
        organization_v2Buf->OrganizationName = WString(properties["OrganizationName"].GetString(), true);
    organization_v2Buf->IsSet[WString("OrganizationName", true)] = (properties.HasMember("OrganizationName") && properties["OrganizationName"].IsString());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void OrgProject_BufferStuffer
(
LPCWSCCORGPROJECTBUFFER orgprojectBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("Name") && properties["Name"].IsString())
        orgprojectBuf->Name = WString(properties["Name"].GetString(), true);
    orgprojectBuf->IsSet[WString("Name", true)] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        orgprojectBuf->Number = WString(properties["Number"].GetString(), true);
    orgprojectBuf->IsSet[WString("Number", true)] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        orgprojectBuf->Status = properties["Status"].GetInt();
    orgprojectBuf->IsSet[WString("Status", true)] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool())
        orgprojectBuf->IsRbacEnabled = properties["IsRbacEnabled"].GetBool();
    orgprojectBuf->IsSet[WString("IsRbacEnabled", true)] = (properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void Project_V4_BufferStuffer
(
LPCWSCCPROJECT_V4BUFFER project_v4Buf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString())
        project_v4Buf->UltimateRefId = WString(properties["UltimateRefId"].GetString(), true);
    project_v4Buf->IsSet[WString("UltimateRefId", true)] = (properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString());
    if(properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool())
        project_v4Buf->IsRbacEnabled = properties["IsRbacEnabled"].GetBool();
    project_v4Buf->IsSet[WString("IsRbacEnabled", true)] = (properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool());
    if(properties.HasMember("Name") && properties["Name"].IsString())
        project_v4Buf->Name = WString(properties["Name"].GetString(), true);
    project_v4Buf->IsSet[WString("Name", true)] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        project_v4Buf->Number = WString(properties["Number"].GetString(), true);
    project_v4Buf->IsSet[WString("Number", true)] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        project_v4Buf->Industry = WString(properties["Industry"].GetString(), true);
    project_v4Buf->IsSet[WString("Industry", true)] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        project_v4Buf->AssetType = WString(properties["AssetType"].GetString(), true);
    project_v4Buf->IsSet[WString("AssetType", true)] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        project_v4Buf->LastModified = WString(properties["LastModified"].GetString(), true);
    project_v4Buf->IsSet[WString("LastModified", true)] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        project_v4Buf->Location = WString(properties["Location"].GetString(), true);
    project_v4Buf->IsSet[WString("Location", true)] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        project_v4Buf->Latitude = properties["Latitude"].GetDouble();
    project_v4Buf->IsSet[WString("Latitude", true)] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        project_v4Buf->Longitude = properties["Longitude"].GetDouble();
    project_v4Buf->IsSet[WString("Longitude", true)] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        project_v4Buf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    project_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        project_v4Buf->RegisteredDate = WString(properties["RegisteredDate"].GetString(), true);
    project_v4Buf->IsSet[WString("RegisteredDate", true)] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        project_v4Buf->TimeZoneLocation = WString(properties["TimeZoneLocation"].GetString(), true);
    project_v4Buf->IsSet[WString("TimeZoneLocation", true)] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        project_v4Buf->Status = properties["Status"].GetInt();
    project_v4Buf->IsSet[WString("Status", true)] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString())
        project_v4Buf->Data_Location_Guid = WString(properties["Data_Location_Guid"].GetString(), true);
    project_v4Buf->IsSet[WString("Data_Location_Guid", true)] = (properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString());
    if(properties.HasMember("Country_Code") && properties["Country_Code"].IsString())
        project_v4Buf->Country_Code = WString(properties["Country_Code"].GetString(), true);
    project_v4Buf->IsSet[WString("Country_Code", true)] = (properties.HasMember("Country_Code") && properties["Country_Code"].IsString());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void ProjectFavorite_V4_BufferStuffer
(
LPCWSCCPROJECTFAVORITE_V4BUFFER projectfavorite_v4Buf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString())
        projectfavorite_v4Buf->UltimateRefId = WString(properties["UltimateRefId"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("UltimateRefId", true)] = (properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString());
    if(properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool())
        projectfavorite_v4Buf->IsRbacEnabled = properties["IsRbacEnabled"].GetBool();
    projectfavorite_v4Buf->IsSet[WString("IsRbacEnabled", true)] = (properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool());
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projectfavorite_v4Buf->Name = WString(properties["Name"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Name", true)] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projectfavorite_v4Buf->Number = WString(properties["Number"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Number", true)] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projectfavorite_v4Buf->Industry = WString(properties["Industry"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Industry", true)] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projectfavorite_v4Buf->AssetType = WString(properties["AssetType"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("AssetType", true)] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectfavorite_v4Buf->LastModified = WString(properties["LastModified"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("LastModified", true)] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projectfavorite_v4Buf->Location = WString(properties["Location"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Location", true)] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projectfavorite_v4Buf->Latitude = properties["Latitude"].GetDouble();
    projectfavorite_v4Buf->IsSet[WString("Latitude", true)] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projectfavorite_v4Buf->Longitude = properties["Longitude"].GetDouble();
    projectfavorite_v4Buf->IsSet[WString("Longitude", true)] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projectfavorite_v4Buf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projectfavorite_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projectfavorite_v4Buf->RegisteredDate = WString(properties["RegisteredDate"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("RegisteredDate", true)] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projectfavorite_v4Buf->TimeZoneLocation = WString(properties["TimeZoneLocation"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("TimeZoneLocation", true)] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projectfavorite_v4Buf->Status = properties["Status"].GetInt();
    projectfavorite_v4Buf->IsSet[WString("Status", true)] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString())
        projectfavorite_v4Buf->Data_Location_Guid = WString(properties["Data_Location_Guid"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Data_Location_Guid", true)] = (properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString());
    if(properties.HasMember("Country_Code") && properties["Country_Code"].IsString())
        projectfavorite_v4Buf->Country_Code = WString(properties["Country_Code"].GetString(), true);
    projectfavorite_v4Buf->IsSet[WString("Country_Code", true)] = (properties.HasMember("Country_Code") && properties["Country_Code"].IsString());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void ProjectMRU_BufferStuffer
(
LPCWSCCPROJECTMRUBUFFER projectmruBuf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("ProjectGuid") && properties["ProjectGuid"].IsString())
        projectmruBuf->ProjectGuid = WString(properties["ProjectGuid"].GetString(), true);
    projectmruBuf->IsSet[WString("ProjectGuid", true)] = (properties.HasMember("ProjectGuid") && properties["ProjectGuid"].IsString());
    if(properties.HasMember("ProjectName") && properties["ProjectName"].IsString())
        projectmruBuf->ProjectName = WString(properties["ProjectName"].GetString(), true);
    projectmruBuf->IsSet[WString("ProjectName", true)] = (properties.HasMember("ProjectName") && properties["ProjectName"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectmruBuf->LastModified = WString(properties["LastModified"].GetString(), true);
    projectmruBuf->IsSet[WString("LastModified", true)] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    }
/*---------------------------------------------------------------------------------**//**
* @bsimethod                                                                    03/2017
+---------------+---------------+---------------+---------------+---------------+------*/
void ProjectMRUDetail_V4_BufferStuffer
(
LPCWSCCPROJECTMRUDETAIL_V4BUFFER projectmrudetail_v4Buf,
RapidJsonValueCR properties
)
    {
    if(properties.HasMember("IsFavorite") && properties["IsFavorite"].IsBool())
        projectmrudetail_v4Buf->IsFavorite = properties["IsFavorite"].GetBool();
    projectmrudetail_v4Buf->IsSet[WString("IsFavorite", true)] = (properties.HasMember("IsFavorite") && properties["IsFavorite"].IsBool());
    if(properties.HasMember("LastAccessedByUser") && properties["LastAccessedByUser"].IsInt())
        projectmrudetail_v4Buf->LastAccessedByUser = properties["LastAccessedByUser"].GetInt();
    projectmrudetail_v4Buf->IsSet[WString("LastAccessedByUser", true)] = (properties.HasMember("LastAccessedByUser") && properties["LastAccessedByUser"].IsInt());
    if(properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString())
        projectmrudetail_v4Buf->UltimateRefId = WString(properties["UltimateRefId"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("UltimateRefId", true)] = (properties.HasMember("UltimateRefId") && properties["UltimateRefId"].IsString());
    if(properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool())
        projectmrudetail_v4Buf->IsRbacEnabled = properties["IsRbacEnabled"].GetBool();
    projectmrudetail_v4Buf->IsSet[WString("IsRbacEnabled", true)] = (properties.HasMember("IsRbacEnabled") && properties["IsRbacEnabled"].IsBool());
    if(properties.HasMember("Name") && properties["Name"].IsString())
        projectmrudetail_v4Buf->Name = WString(properties["Name"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Name", true)] = (properties.HasMember("Name") && properties["Name"].IsString());
    if(properties.HasMember("Number") && properties["Number"].IsString())
        projectmrudetail_v4Buf->Number = WString(properties["Number"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Number", true)] = (properties.HasMember("Number") && properties["Number"].IsString());
    if(properties.HasMember("Industry") && properties["Industry"].IsString())
        projectmrudetail_v4Buf->Industry = WString(properties["Industry"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Industry", true)] = (properties.HasMember("Industry") && properties["Industry"].IsString());
    if(properties.HasMember("AssetType") && properties["AssetType"].IsString())
        projectmrudetail_v4Buf->AssetType = WString(properties["AssetType"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("AssetType", true)] = (properties.HasMember("AssetType") && properties["AssetType"].IsString());
    if(properties.HasMember("LastModified") && properties["LastModified"].IsString())
        projectmrudetail_v4Buf->LastModified = WString(properties["LastModified"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("LastModified", true)] = (properties.HasMember("LastModified") && properties["LastModified"].IsString());
    if(properties.HasMember("Location") && properties["Location"].IsString())
        projectmrudetail_v4Buf->Location = WString(properties["Location"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Location", true)] = (properties.HasMember("Location") && properties["Location"].IsString());
    if(properties.HasMember("Latitude") && properties["Latitude"].IsDouble())
        projectmrudetail_v4Buf->Latitude = properties["Latitude"].GetDouble();
    projectmrudetail_v4Buf->IsSet[WString("Latitude", true)] = (properties.HasMember("Latitude") && properties["Latitude"].IsDouble());
    if(properties.HasMember("Longitude") && properties["Longitude"].IsDouble())
        projectmrudetail_v4Buf->Longitude = properties["Longitude"].GetDouble();
    projectmrudetail_v4Buf->IsSet[WString("Longitude", true)] = (properties.HasMember("Longitude") && properties["Longitude"].IsDouble());
    if(properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool())
        projectmrudetail_v4Buf->LocationIsUsingLatLong = properties["LocationIsUsingLatLong"].GetBool();
    projectmrudetail_v4Buf->IsSet[WString("LocationIsUsingLatLong", true)] = (properties.HasMember("LocationIsUsingLatLong") && properties["LocationIsUsingLatLong"].IsBool());
    if(properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString())
        projectmrudetail_v4Buf->RegisteredDate = WString(properties["RegisteredDate"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("RegisteredDate", true)] = (properties.HasMember("RegisteredDate") && properties["RegisteredDate"].IsString());
    if(properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString())
        projectmrudetail_v4Buf->TimeZoneLocation = WString(properties["TimeZoneLocation"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("TimeZoneLocation", true)] = (properties.HasMember("TimeZoneLocation") && properties["TimeZoneLocation"].IsString());
    if(properties.HasMember("Status") && properties["Status"].IsInt())
        projectmrudetail_v4Buf->Status = properties["Status"].GetInt();
    projectmrudetail_v4Buf->IsSet[WString("Status", true)] = (properties.HasMember("Status") && properties["Status"].IsInt());
    if(properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString())
        projectmrudetail_v4Buf->Data_Location_Guid = WString(properties["Data_Location_Guid"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Data_Location_Guid", true)] = (properties.HasMember("Data_Location_Guid") && properties["Data_Location_Guid"].IsString());
    if(properties.HasMember("Country_Code") && properties["Country_Code"].IsString())
        projectmrudetail_v4Buf->Country_Code = WString(properties["Country_Code"].GetString(), true);
    projectmrudetail_v4Buf->IsSet[WString("Country_Code", true)] = (properties.HasMember("Country_Code") && properties["Country_Code"].IsString());
    }
