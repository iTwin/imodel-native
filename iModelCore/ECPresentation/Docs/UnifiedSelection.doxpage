/*--------------------------------------------------------------------------------------+
|
|     $Source: docs/overview/UnifiedSelection.doxpage $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
// __PUBLISH_SECTION_START__

/** @defgroup GROUP_UnifiedSelection Unified Selection
@ingroup GROUP_Presentation
@see @ref PAGE_UnifiedSelection "Unified Selection overview page"

Unified selection module is responsible for handling selected DGN elements and ECInstances in a unified
way which means that selecting an ECInstance in one control selects it (or its representation) in all
other unified selection controls.
*/

/**
@page PAGE_UnifiedSelection Unified Selection
@see @ref GROUP_UnifiedSelection

Unified selection module is responsible for handling selected DGN elements and ECInstances in a unified
way which means that selecting an ECInstance in one control selects it (or its representation) in all
other unified selection controls.

@section SECTION_UnifiedSelection_HowItWorks How It Works

The main part of unified selection is the @ref BentleyApi::DgnClientFx::Presentation::SelectionManager "SelectionManager". It's main responsibilities are
storing the overall selection, changing the selection and notifying listeners about selection changes. An important note about selection is that it's 
stored in @ref BentleyApi::DgnClientFx::Presentation::NavNodeKey "NavNodeKeys" instead of ECInstances or ECInstanceKeys. This allows selecting not only
ECInstances, but also grouping nodes.

The part that enables unified selection is the @ref BentleyApi::DgnClientFx::Presentation::SelectionSyncHandler "SelectionSyncHandler" abstract class.
It's role is to synchronize selection between the selection manager and other parts of the application. An important note is that selection handlers use
the @ref GROUP_Presentation_Content "Content Presentation API" to get the selection. This allows the presentation manager to modify what actually gets
selected. For example, if user selects an assembly, the SelectionSyncHandler requests the presentation manager to get content for that assembly. The 
presentation manager can then return all parts that belong to that assembly as its content and all of those ECInstances get selected.

@section SECTION_UnifiedSelection_SettingUp Setting Up
Every application that wants make use of unified selection should first make sure it's properly initialized. The 
best place to initialize it is the @ref BentleyApi::DgnClientFx::DgnClientApp::_OnDgnClientFxInitialized "DgnClientApp::_OnDgnClientFxInitialized" callback.

The main requirement for unified selection to work is properly set up @ref BentleyApi::DgnClientFx::Presentation::IECPresentationManager 
"IECPresentationManager". See @ref SECTION_RulesDrivenPresentationManager_SettingUp "this page" for an example of how to set up
rules-driven presentation manager implementation.

The next step is to register the @ref BentleyApi::DgnClientFx::Presentation::SelectionSyncHandler "SelectionSyncHandlers" that synchronize 
selection between the @ref BentleyApi::DgnClientFx::Presentation::SelectionManager "SelectionManager" and different application controls. The
framework provides two handlers for applications:
- @ref SECTION_UnifiedSelection_SettingUp_DgnViewSelectionSyncHandler
- @ref SECTION_UnifiedSelection_SettingUp_UISelectionSyncHandler

Applications are also free to create their own handlers in case they want the selection synchronized with other parts of the application.

@subsection SECTION_UnifiedSelection_SettingUp_DgnViewSelectionSyncHandler DgnViewSelectionSyncHandler
The first step to get @ref BentleyApi::DgnClientFx::Presentation::DgnViewSelectionSyncHandler "DgnViewSelectionSyncHandler" working 
is to register it:
$SAMPLECODE_BEGIN[RegisterDgnViewSelectionSyncHandler, Register DgnViewSelectionSyncHandler]
__PUBLISH_INSERT_FILE__ SampleNavigatorApp_InitPresentation_RegisterDgnViewSelectionSyncHandler.sampleCode
$SAMPLECODE_END

Then, application has to notify the handler when a new project is opened (from 
the @ref BentleyApi::DgnClientFx::DgnClientApp::_OnProjectOpen "DgnClientApp::_OnProjectOpen" callback):
$SAMPLECODE_BEGIN[RegisterDgnViewSelectionSyncHandlerProject, Register open projects]
__PUBLISH_INSERT_FILE__ SampleNavigatorApp__OnProjectOpen_RegisterDgnViewSelectionSyncHandlerProject.sampleCode
$SAMPLECODE_END

And also notify the handler when a project is closed (from 
the @ref BentleyApi::DgnClientFx::DgnClientApp::_OnProjectClose "DgnClientApp::_OnProjectClose" callback):
$SAMPLECODE_BEGIN[UnregisterDgnViewSelectionSyncHandlerProject, Unregister closed projects]
__PUBLISH_INSERT_FILE__ SampleNavigatorApp__OnProjectClose_UnregisterDgnViewSelectionSyncHandlerProject.sampleCode
$SAMPLECODE_END

@subsection SECTION_UnifiedSelection_SettingUp_UISelectionSyncHandler UISelectionSyncHandler
To set up the @ref BentleyApi::DgnClientFx::Presentation::UISelectionSyncHandler "UISelectionSyncHandler" the 
application only has to register it:
$SAMPLECODE_BEGIN[RegisterUISelectionSyncHandler, Register UISelectionSyncHandler]
__PUBLISH_INSERT_FILE__ SampleNavigatorApp_InitPresentation_RegisterUISelectionSyncHandler.sampleCode
$SAMPLECODE_END

@subsection SECTION_UnifiedSelection_SettingUp_Cleanup Cleanup
The selection synchronization handlers should also be unregistered when the application is being terminated. The best place to do 
that is the @ref BentleyApi::DgnClientFx::DgnClientApp "DgnClientApp" destructor:
$SAMPLECODE_BEGIN[UnregisterSelectionSyncHandlers, Unregister selection synchronization handlers]
__PUBLISH_INSERT_FILE__ SampleNavigatorApp_TerminatePresentation_UnregisterSelectionSyncHandlers.sampleCode
$SAMPLECODE_END
*/
