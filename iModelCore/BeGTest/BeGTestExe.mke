#--------------------------------------------------------------------------------------
#
#     $Source: BeGTestExe.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
#
# Builds a test runner based on gtest
#
PolicyFile=$(_MakeFilePath)AssertBeGTestPolicy.mki
%include mdl.mki
%include $(SrcBsiCommon)sharedmki/BeTestSelectHarness.mki

baseDir             = $(_MakeFilePath)
progName            = BeGTest
unitTestsDir = $(OutputRootDir)build/UnitTests/
o            = $(OutputRootDir)build/BeGTest/bin/
tmp          = $(OutputRootDir)build/BeGTest/tmp/
obj          = $(OutputRootDir)build/BeGTest/obj/

%ifdef BMAKE_DELETE_ALL_TARGETS    
always:
    $(rmdirRecursiveCmd) $(o)
    $(rmdirRecursiveCmd) $(obj)
    $(rmdirRecursiveCmd) $(tmp)
%return
%endif

always:
    !~@mkdir $(o)
    !~@mkdir $(obj)
    !~@mkdir $(tmp)
    !~@mkdir $(unitTestsDir)
    !~@putenv PYTHONPATH=$(PYTHONPATH)$(bsicommon_ospathsep)$(SrcBsiCommon)PublicSDK

# Merge all paths of all libraries, required by all unit tests into a single file
_list = $[@wildcard $(unitTestsDir)*libraries.list]
%if $(_list) != " "
    $(tmp)libraries.list : $(_list)
        $(baseDir)MergeFileLists.py $@ $(_list)
        ~time
%else
    always:
        >$(tmp)libraries.list
        <
%endif

# Build the executable
cDefs        + -DCREATE_STATIC_LIBRARIES=1
CCompPDBName = $(progName)

$(obj)BeGTestExe$(oext)   : $(baseDir)BeGTestExe.cpp $(BuildContext)PublicAPI/Bentley/BeTest.h

GUNITTEST_OUT       = $(tmp)
GUNITTEST_NAME      = $(progName)
GUNITTEST_DEST      = $(o)
GUNITTEST_PATH      = $(o) 
GUNITTEST_SYMB      = $(o)
GUNITTEST_NOEXEC    = 1
GTEST_MAIN_IS_SUPPLIED = 1

LOCAL_GUNITTEST_OBJS + $[@wildcard $(obj)*$(oext)]
LOCAL_GUNITTEST_OBJS + $[@wildcard $(unitTestsDir)*$(oext)]
GUNITTEST_LIBS       + $[@wildcard $(BuildContext)SubParts/Libs/*$(libext)]
GUNITTEST_LIBS       + $[@readfile $(tmp)libraries.list]
%if $(TARGET_PLATFORM)=="Windows"
    GUNITTEST_LIBS   + advapi32$(libext) rpcrt4$(libext) Shlwapi$(libext) version$(libext)
%elif $(TARGET_PLATFORM)=="Linux"
    GUNITTEST_LIBS   + -lpthread
%endif

%include $(SharedMki)gunittest.mki

# Merge all paths of all assemblies, required by all unit tests into a single file
_list = $[@wildcard $(unitTestsDir)*assemblies.list]
%if $(_list) != " "
    $(tmp)assemblies.list : $(_list)
        $(baseDir)MergeFileLists.py $@ $(_list)
        ~time
%else
    always:
        >$(tmp)assemblies.list
        <
%endif
    
# Merge all paths of all assets, required by all unit tests into a single file
_list = $[@wildcard $(unitTestsDir)*assets.list]
%if $(_list) != " "
    $(tmp)assets.list : $(_list)
        $(baseDir)MergeFileLists.py $@ $(_list)
        ~time
%else
    always:
        >$(tmp)assets.list
        <
%endif

# Deliver the required assemblies and other assets
$(tmp)deliver.mki : $(tmp)assemblies.list $(tmp)assets.list
    $(baseDir)GenerateDeliveryFile.py   $(tmp)assemblies.list   $(o)                              >  $@
    $(baseDir)GenerateDeliveryFile.py   $(tmp)assets.list       $(o)DgnPlatformAssetsDirectory/   >> $@

%include $(tmp)deliver.mki

always:
    $(deleteCmd) $(tmp)deliver.mki

# Create the sqlang database for the unit tests
SQLANG_OutputDb     = $(o)DgnPlatformAssetsDirectory/sqlang/BeGTest_en-US.sqlang.db3 
SQLANG_DeliveryDir  = $(tmp)
%include CreateSQLangDb.mki

# Deliver ignore lists
always:
    !~@mkdir $(o)DgnPlatformAssetsDirectory/Ignore/
    %ifdef winNT
        GenerateSymlinkStar.py $(unitTestsDir) ignore_list.txt $$(o)DgnPlatformAssetsDirectory/Ignore/ > $(tmp)symlinkStar.mki
    %else
        GenerateSymlinkStar.py $(unitTestsDir) ignore_list.txt $(o)DgnPlatformAssetsDirectory/Ignore/ > $(tmp)symlinkStar.mki
    %endif

%include $(tmp)symlinkStar.mki

always:
    $(deleteCmd) $(tmp)symlinkStar.mki

# Make the program executable
%ifdef __unix
always:
  chmod +x $(o)$(progName)
%endif

# Logging config file
always:
    python $(SrcBsiCommon)build/CreateSymLinks.py -f $(o)logging.config.xml=$(baseDir)logging.config.xml

# Link everything to the Delivery dir    
always:
    python $(SrcBsiCommon)build/CreateSymLinks.py -m $(BuildContext)Delivery=$(o)
    python $(SrcBsiCommon)build/CreateSymLinks.py -a $(BuildContext)Delivery=$(o)
    python $(SrcBsiCommon)build/CreateSymLinks.py -m $(BuildContext)Delivery=$(BuildContext)SubParts/Assemblies
    