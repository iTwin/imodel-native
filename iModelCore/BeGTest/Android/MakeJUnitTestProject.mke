#---------------------------------------------------------------------------------------------
#  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
#  See LICENSE.md in the repository root for full copyright notice.
#---------------------------------------------------------------------------------------------
#
# Builds an Android JUnit test project to run a specified collection of tests
#
# Inputs:
%ifndef TEST_COLLECTION_PRODUCT
    %error Define TEST_COLLECTION_PRODUCT as the name of the test collection product
%endif

%ifndef TEST_DELIVERY_SUBDIR
    TEST_DELIVERY_SUBDIR=ANJUP
%endif

%ifndef TEST_SHORT_NAME
    TEST_SHORT_NAME=$(TEST_COLLECTION_PRODUCT)
%endif

GCC_DEFAULT_VISIBILITY=default
BUILD_WITH_C20=1

%include mdl.mki
%include $(SrcRoot)bsicommon/sharedmki/BeTestSelectHarness.mki

%if $(TARGET_PLATFORM)!="Android"
    %error This makefile should be used only when TARGET_PLATFORM is Android
%endif
%ifndef BENTLEY_ANDROID_libcpp_shared
    %error BENTLEY_ANDROID_libcpp_shared must be defined. (Should have been defined by androidToolContext*.mki)
%endif
%ifndef BENTLEY_ANDROID_libcpp_shared_fullpath
    %error BENTLEY_ANDROID_libcpp_shared_fullpath must be defined. (Should have been defined by androidToolContext*.mki)
%endif

# *** TRICKY: The following macros are all referenced by the .mki files that are generated by GenerateJUnitTestFileList.py. Don't remove them or rename them!
baseDir             = $(_MakeFilePath)
outputDir           = $(OutRoot)$(TARGET_PROCESSOR_DIRECTORY)/$(TEST_SHORT_NAME)/
libsDir             = $(outputDir)prj/app/libs/
mainDir             = $(outputDir)prj/app/src/main/
androidTestDir      = $(outputDir)prj/app/src/androidTest/

collectionProduct = $(OutputRootDir)../Product/${TEST_COLLECTION_PRODUCT}/
unitTestsDir = $(collectionProduct)Objects/
inputSoDir = $(collectionProduct)Libs/

%if defined (BMAKE_DELETE_ALL_TARGETS)
    always:
        $(rmdirRecursiveCmd) $(outputDir)

    %return 
%else
    always:
        ~mkdir $(outputDir)
        !~@putenv PYTHONPATH=$(PYTHONPATH)$(bsicommon_ospathsep)$(SrcRoot)bsicommon/PublicSDK
%endif

%ifdef CREATE_STATIC_LIBRARIES
    # ***TRICKY: We copy in order to eliminate dups
    always:
        ~mkdir $(outputDir)/libs
        $(BBPYTHONCMD) $(SrcRoot)bsicommon/build/CopyWithSymlinks.py $(collectionProduct)Libs $(outputDir)libs
        $(BBPYTHONCMD) $(SrcRoot)bsicommon/build/CopyWithSymlinks.py $(BuildContext)SubParts/Libs $(outputDir)libs

    %iffile $(outputDir)libs/libDgnDb0601ToJson.a
        always:
            !-$(deleteCmd) $(outputDir)libs\libDgnDb0601ToJson.a
    %endif
    
    %iffile $(outputDir)libs/libBimFromDgnDb.a
        always:
            !-$(deleteCmd) $(outputDir)libs\libBimFromDgnDb.a
    %endif

    static_libraries_full_path = $[@realpath $[@wildcard $(outputDir)libs/*$(stlibext)]]
%endif

#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
#           project - contains both the application under test it's unit tests
#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
#--------------------------------------------------------------------------------------
# Bootstrap by copying the parts of the project directory.
#           we use build.gradle as a proxy
#--------------------------------------------------------------------------------------
$(outputDir)prj/build.gradle : $(baseDir)project/build.gradle
    $(msg)
    $(BBPYTHONCMD) $(SrcRoot)bsicommon/build/CopyWithSymlinks.py     $(baseDir)project                     $(outputDir)prj

#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
#           project/app/src/main - contains the (fake) application under test
#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
$(mainDir)assets : $(collectionProduct)Assets
    $(msg)
    $(LinkFirstDepToFirstTargetAsDirectory)

# Generate the assets' manifest
# WARNING: This manifest name is hard-wired in BeTestAndroidproject\app\src\main\java\com\bentley\testTestActivity.java
_assets = $[@wildcard $(mainDir)assets/*.*]
%if $(_assets) != " "
    $(mainDir)assets/BeTestAndroid.manifest : $(_assets)
        $(BBPYTHONCMD) $(baseDir)CreateAssetsManifest.py $@ $(mainDir)assets
%else
    always:
        >$(mainDir)assets/BeTestAndroid.manifest
        This project has no assets.
        <
%endif

#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
#           project/app/src/androidTest - contains the (generated) unit tests
#/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_


#--------------------------------------------------------------------------------------
# Populate $(unitTestsDir) with .java wrappers that look like JUnit test classes to JUnit. 
# Also generate the jni .c files that call our C++ unit tests.
#
# Each suite of unit tests builds and delivers a file called UnitTests.list.h. This list file essentially contains 
# a list of the tests that should be run. GenerateJUnitTestFileList.py uses this list file to generate .java and .cpp 
# files that create wrappers for the listed tests.
# GenerateJUnitTestFileList.py does this for all list files found under $(collectionProduct)Objects/ 
# Thus, it generates wrappers for all test suites.
#--------------------------------------------------------------------------------------
$(outputDir)JUnitTestFiles.mki : $[@wildcard $(unitTestsDir)*UnitTests.list.h] $(baseDir)GenJUnitTestCaseS.java.c $(baseDir)GenJUnitTestCase.jni.cpp $(_MakeFileSpec)
    $(msg)
    !@$(BBPYTHONCMD) $(baseDir)GenerateJUnitTestFileList.py $(unitTestsDir) $(baseDir)GenJUnitTestCaseS.java.c $(baseDir)GenJUnitTestCase.jni.cpp > $(outputDir)JUnitTestFiles.mki
    ~time 

# Allow the .c files to @include <BeTestHost.h>
cIncs + -I$(baseDir)

%iffile $(outputDir)JUnitTestFiles.mki
    %include $(outputDir)JUnitTestFiles.mki
%endif

#always:
#    !-$(deleteCmd) $(outputDir)JUnitTestFiles.mki

#--------------------------------------------------------------------------------------
# obj/local/arm64-v8a/libAndroidTestJni.so
#       The shared object containing the JNI wappers and the pre-built native-code unit test code.
#       It links with the supporting libraries.
#--------------------------------------------------------------------------------------
# Build libAndroidTestJni.so. This is the library that implements the jni methods and is put into the APK file.
always:
    ~mkdir $(outputDir)prj/obj/local/arm64-v8a
    ~mkdir $(libsDir)/arm64-v8a

cIncs + -I$(outputDir)

$(outputDir)betest_static_initialize$(oext) : $(baseDir)betest_static_initialize.cpp

DLM_NAME           = AndroidTestJni
DLM_DEST           = $(outputDir)prj/obj/local/arm64-v8a/
DLM_OBJECT_DEST    = $(outputDir)
DLM_NOINITFUNC     = 1
DLM_NOENTRY        = 1
DLM_NO_BENTLEY_LIB = 1
DLM_OBJECT_FILES   = $(outputDir)betest_static_initialize$(oext)
DLM_OBJECT_FILES   + $[@wildcard $(outputDir)*JniTest$(oext)]
DLM_OBJECT_FILES   + $[@wildcard $(unitTestsDir)/*$(oext)]
%ifdef static_libraries_full_path
    DLM_OBJECT_FILES   + $(static_libraries_full_path)
%endif
%ifdef static_libraries_full_path
    LINKER_LIBRARIES   = $(BENTLEY_ANDROID_LINK_OpenGLLibraries)  
%endif

# Note: gcclink automatically links with $(BENTLEY_ANDROID_ANDROID_LIBSTL_STATIC)

%include dlmlink.mki

#--------------------------------------------------------------------------------------
# Copy supporting libraries
#--------------------------------------------------------------------------------------
always:
    @$(BBPYTHONCMD) $(_MakeFilePath)CopyAllTo.py $(LINKER_LIBRARIES) $(outputDir)prj/obj/local/arm64-v8a

$(outputDir)prj/obj/local/arm64-v8a/$(BENTLEY_ANDROID_libcpp_shared) : $(BENTLEY_ANDROID_libcpp_shared_fullpath)
    $(copyCmd) "$<" $@

#--------------------------------------------------------------------------------------
# libs/arm64-v8a
#--------------------------------------------------------------------------------------

$(libsDir)arm64-v8a/$(shlibprefix)AndroidTestJni$(shlibext) : $(outputDir)prj/obj/local/arm64-v8a/$(shlibprefix)AndroidTestJni$(shlibext)
    $(msg)
    $(copyCmd) $< $@
    ~time

$(libsDir)arm64-v8a/$(BENTLEY_ANDROID_libcpp_shared) : $(outputDir)prj/obj/local/arm64-v8a/$(BENTLEY_ANDROID_libcpp_shared)
    $(msg)
    $(copyCmd) $< $@
    ~time

always:
    @$(BBPYTHONCMD) $(_MakeFilePath)CopyAllTo.py   $(LINKER_LIBRARIES) $(libsDir)arm64-v8a

# Don't strip the SOs in libs if we plan to debug. VisualStudio needs to find the symbols in the SOs that are in the APK.
%if !defined (GCC_DEBUG)
always:
    -$(BENTLEY_ANDROID_TOOLCHAIN_strip) $(BENTLEY_ANDROID_TOOLCHAIN_strip_options) $[@wildcard $(libsDir)arm64-v8a/*$(shlibext)]
%endif

#--------------------------------------------------------------------------------------
# Generate some files needed for debugging (see ndk-gdb)
#--------------------------------------------------------------------------------------
$(libsDir)arm64-v8a/gdbserver : $(BENTLEY_ANDROID_Gdbserver)
    $(msg)
    $(copyCmd) $< $@
    ~time

$(libsDir)arm64-v8a/gdb.setup : $(libsDir)arm64-v8a/$(shlibprefix)AndroidTestJni$(shlibext)
    $(msg)
    > $@
        set solib-search-path .\/prj\/obj\/local\/arm64-v8a
        directory $[@subst \, \/, $(BENTLEY_ANDROID_GdbUsrInclude)] jni
    <
    ~time

#--------------------------------------------------------------------------------------
# Delivery
#--------------------------------------------------------------------------------------
# Keep paths short! We can easily exceed MAX_PATH on our firebug and PRG machines!
$(BuildContext)Delivery/${TEST_DELIVERY_SUBDIR} : $(outputDir)prj
    !~@mkdir $@
    $(BBPYTHONCMD) $(SrcRoot)bsicommon/build/CopyWithSymlinks.py $< $@ --excludePattern=intermediates

always:
    $(_bmake) $(baseDir)BuildApk.mke -dTEST_COLLECTION_PRODUCT=$(TEST_COLLECTION_PRODUCT) -dTEST_SHORT_NAME=$(TEST_SHORT_NAME)
    ~linkdir "$(BuildContext)Delivery/${TEST_DELIVERY_SUBDIR}/Scripts=$(outputDir)Scripts"
