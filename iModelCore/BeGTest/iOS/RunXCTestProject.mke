#--------------------------------------------------------------------------------------
#
#     $Source: iOS/RunXCTestProject.mke $
#
#  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
%include mdl.mki

%if $(TARGET_PLATFORM)!="iOS"
    %error This makefile should be used only when TARGET_PLATFORM is iOS
%endif

%ifndef XCTEST_PRODUCT
    %error Define XCTEST_PRODUCT as the name of the Product in the output directory that contains BeTestiOS.xcodeproj for the specified test suite.
%endif


ProductBaseDir = $(OutputRootDir)Product/


XCODEPROJ=$(ProductBaseDir)$(XCTEST_PRODUCT)/BeTestiOS.xcodeproj

%ifndef XCTEST_LOGFILE_NAME
    XCTEST_LOGFILE_NAME=$(XCTEST_PRODUCT).log
%endif

%ifnofile $(XCODEPROJ)
    %error $(XCODEPROJ) not found.
%endif

%ifndef XCTEST_OUTPUT_DIR
    XCTEST_OUTPUT_DIR=$(OutputRootDir)build/RunXCTest/$(XCTEST_PRODUCT)/
%endif

logFile = ${XCTEST_OUTPUT_DIR}/XCTest.log

%if !defined (BENTLEY_RUN_XCTEST_DEVICE_NAME)
    %warn To run XCTests, define BENTLEY_RUN_XCTEST_DEVICE_NAME as the name of the attached iOS device to use.

    # Link a fake log file to satisfy partfile bindings.
    always:
        ~@mkdir ${XCTEST_OUTPUT_DIR}
        >$(logFile)
	iOS XCTests were not run
	<
        ~linkfile "$(BuildContext)Delivery/XCTest/Logs/$(XCTEST_LOGFILE_NAME)=$(logFile)"

    %return
%endif

%if defined (BMAKE_DELETE_ALL_TARGETS)
always:
    $(rmdirRecursiveCmd) ${XCTEST_OUTPUT_DIR}

    %return
%endif

# Note we often get an error when copying resources to the device the first time we try to run a given set of tests. 
# The solution is simply to re-try the command.

BETEST_SCHEME='BeTestiOS'
%ifdef CLANG_SANITIZE
	%if $(CLANG_SANITIZE) == "address"
		BETEST_SCHEME='BeTestiOS Sanitize Address'
	%endif
%endif

always:
    !~@mkdir ${XCTEST_OUTPUT_DIR}
    echo $(XCODEPROJ)>$(logfile)
    -xcodebuild clean -project $(XCODEPROJ) -scheme $(BETEST_SCHEME) -destination 'platform=iOS,name=$(BENTLEY_RUN_XCTEST_DEVICE_NAME)' >> $(logfile) 2>&1	
    -xcodebuild test -project $(XCODEPROJ) -scheme $(BETEST_SCHEME) -destination 'platform=iOS,name=$(BENTLEY_RUN_XCTEST_DEVICE_NAME)' >> $(logfile) 2>&1
    python $(baseDir)CheckForRetry.py $(logfile) > ${XCTEST_OUTPUT_DIR}/CheckForRetry.txt
    %if " " != $[@findstring "retry", $[@readfile ${XCTEST_OUTPUT_DIR}/CheckForRetry.txt]]
        |Test launch failed. Retrying...
        echo $(XCODEPROJ)>$(logfile)
        -xcodebuild clean -project $(XCODEPROJ) -scheme $(BETEST_SCHEME) -destination 'platform=iOS,name=$(BENTLEY_RUN_XCTEST_DEVICE_NAME)' >> $(logfile) 2>&1
        -xcodebuild test -project $(XCODEPROJ) -scheme $(BETEST_SCHEME) -destination 'platform=iOS,name=$(BENTLEY_RUN_XCTEST_DEVICE_NAME)' >> $(logfile) 2>&1
    %endif

BreakOnFailure = 0
%if defined (BEGTEST_BREAK_ON_FAILURE)
    BreakOnFailure = 1
%endif

always:
    python $(baseDIr)CheckLogFilesForFailures.py $[@dir $(logFile)] $(BreakOnFailure)

always:
    ~linkfile "$(BuildContext)Delivery/XCTest/Logs/$(XCTEST_LOGFILE_NAME)=$(logFile)"
