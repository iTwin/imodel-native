#--------------------------------------------------------------------------------------
#
#     $Source: buildGtest.mke $
#
#  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
#
# Builds a test runner based on gtest
#
%include mdl.mki

%ifndef BEGTEST_NAME
    %error Must define BEGTEST_NAME as the name of the .exe to create
%endif

BE_TEST_TESTHARNESS=GUnitTests
USE_GTEST=1

nameToDefine=USE_GTEST=1
%include cdefapnd.mki

baseDir      = $(_MakeFilePath)
progName     = $(BEGTEST_NAME)
progNameExe  = $(progName)$(exeext)
o            = $(OutputRootDir)build/BeGTest/
runDir       = $(OutputRootDir)build/BeGTest/run/

materialProduct = $(OutputRootDir)Product/${BEGTEST_TEST_PRODUCT_DIR}/

%ifdef BMAKE_DELETE_ALL_TARGETS    
always:
    $(rmdirRecursiveCmd) $(o)
    $(rmdirRecursiveCmd) $(runDir)
    $(rmdirRecursiveCmd) $(runDir)logs
    $(rmdirRecursiveCmd) $(runDir)Output
    $(rmdirRecursiveCmd) $(runDir)Temp
%return
%endif

always:
    !~@mkdir $(o)
    !~@mkdir $(runDir)
    !~@mkdir $(runDir)logs
    !~@mkdir $(runDir)Output
    !~@mkdir $(runDir)Temp
    !~@putenv PYTHONPATH=$(PYTHONPATH)$(bsicommon_ospathsep)$(SrcBsiCommon)PublicSDK

%ifndef BEGTEST_FRAMEWORK_SQLANG
    BEGTEST_FRAMEWORK_SQLANG=DgnPlatform_en.sqlang.db3
%endif

always:
    > $(o)BEGTEST_FRAMEWORK_SQLANG_DEF.h
\#define BEGTEST_FRAMEWORK_SQLANG L"$(BEGTEST_FRAMEWORK_SQLANG)"
    <

cIncs + -I$(o)

# -----------------------------------------------------
# Compile BeGTestExe.cpp. It contains "main"
# -----------------------------------------------------
cDefs        + -DCREATE_STATIC_LIBRARIES=1
CCompPDBName = $(progName)

$(o)BeGTestExe$(oext)   : $(baseDir)BeGTestExe.cpp $(BuildContext)PublicAPI/Bentley/BeTest.h

# -----------------------------------------------------
# Link begtest.exe. This EXE incorporates the unittest .objs into itself (so that their static C++ constructors will be called).
# -----------------------------------------------------

#   Link the unit tests themselves
LOCAL_GUNITTEST_OBJS + $(o)BeGTestExe$(oext) $[@wildcard $(materialProduct)Objects/*$(oext)]

#   Satisfy the link requirements of the unit tests
GUNITTEST_LIBS       + $[@wildcard $(materialProduct)Libs/*$(libext)]

#   Satisfy the link requirements of begtest itself
GUNITTEST_LIBS       + $[@wildcard $(BuildContext)SubParts/Libs/*$(libext)]

%if $(TARGET_PLATFORM)=="Windows"
    GUNITTEST_LIBS   + advapi32$(libext) rpcrt4$(libext) Shlwapi$(libext) version$(libext) user32.lib
%elif $(TARGET_PLATFORM)=="Linux"
    GUNITTEST_LIBS   + -lpthread
%endif

GUNITTEST_OUT       = $(o)
GUNITTEST_NAME      = $(progName)
GUNITTEST_DEST      = $(o)
GUNITTEST_PATH      = $(o) 
GUNITTEST_SYMB      = $(o)
GUNITTEST_NOEXEC    = 1
GTEST_MAIN_IS_SUPPLIED = 1

%include $(SharedMki)gunittest.mki

# Make the program executable
%ifdef __unix
always:
  chmod +x $(o)$(progName)
%endif

# ---------------------------------------------------------------------------------------------------
# Link files into the Delivery directory with the names and locations that BeGTestExe.cpp expects.
# ---------------------------------------------------------------------------------------------------
always:
    python $(SrcBsiCommon)build/CreateSymLinks.py -f "$(BuildContext)Delivery/BuildGtest/Assemblies/$(progNameExe)=$(o)$(progNameExe)"
    python $(SrcBsiCommon)build/CreateSymLinks.py -m "$(BuildContext)Delivery/BuildGtest/Assemblies=$(materialProduct)Assemblies/*$(shlibext)"
    python $(SrcBsiCommon)build/CreateSymLinks.py -m "$(BuildContext)Delivery/BuildGtest/Assemblies=$(BuildContext)SubParts/Assemblies/*$(shlibext)"
    python $(SrcBsiCommon)build/CreateSymLinks.py -f "$(BuildContext)Delivery/BuildGtest/Assemblies/logging.config.xml=$(baseDir)logging.config.xml"
    python $(SrcBsiCommon)build/CreateSymLinks.py -d "$(BuildContext)Delivery/BuildGtest/DgnPlatformAssetsDirectory=$(materialProduct)Assets"
