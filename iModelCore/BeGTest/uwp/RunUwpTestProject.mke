#--------------------------------------------------------------------------------------
#     $Source: uwp/RunUwpTestProject.mke $
#  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
#--------------------------------------------------------------------------------------

# Running of UWP tests is currently opt-in.
# (a) In order to use Microsoft's command line test runner, the tests must be signed, and that signature must be trusted by the computer.
#       In order for everyone to do this, the private key would have to be committed (to sign), and trusted by every developer/firebug/PRG machine.
#       This is an unacceptable security hole in the general case.
# (b) The build output of the unit test app contains unacceptably long file paths, which easily end up exceeding MAX_PATH in LKGs.
#       This means that firebug/PRG could never build (nor run) them because it must save LKGs.
#
# If you, as a developer/tester, want to run them, you must:
# (a) Once, double-click %SrcRoot%BeGTest\uwp\VisualStudioProject\BeTestTest1\BeTestTest1_TemporaryKey.pfx to import and trust the certificate.
#       In the dialog that opens:
#           (page 1) Set 'Store Location' to 'Local Machine'
#           (page 2) Keep settings (path should be pre-filled from what you double-clicked)
#           (page 3) Keep settings (no password required; do NOT mark key as exportable; DO include all extended properties)
#           (page 4) Select 'Place all certificates in the following store' and select 'Trusted Root Certification Authorities'
#           (page 5) Finish
#       Reference: http://stackoverflow.com/questions/33771590/running-universal-windows-unit-tests-from-the-command-line
# (b) Define RUN_UWP_TESTS in your environment before you build.

%include mdl.mki

%if ("WinRT" != $(TARGET_PLATFORM))
    %error This makefile can only be used when targetting UWP.
%endif

%if !defined(UWPTEST_PRODUCT)
    %error Must define UWPTEST_PRODUCT as the name of the Product that contains the solution for the test suite.
%endif

%ifndef UWPTEST_LOGFILE_NAME
    UWPTEST_LOGFILE_NAME=$(UWPTEST_PRODUCT).log
%endif

%ifndef UWPTEST_OUTPUT_DIR
    UWPTEST_OUTPUT_DIR=$(OutputRootDir)build/RunCppUnit/$(UWPTEST_PRODUCT)/
%endif

%if defined (BMAKE_DELETE_ALL_TARGETS)
always:
    $(rmdirRecursiveCmd) ${UWPTEST_OUTPUT_DIR}
    %return
%endif

logFile = ${UWPTEST_OUTPUT_DIR}/test.log

always:
    !~@mkdir ${UWPTEST_OUTPUT_DIR}

%if !defined (RUN_UWP_TESTS)
    %message To run Uwp CppUnitTests, define RUN_UWP_TESTS
    always:
        >$(logFile)
        CppUnitTests were not run
        <
        ~linkfile "$(BuildContext)Delivery/UwpTest/Logs/$(UWPTEST_LOGFILE_NAME)=$(logFile)"
    
    %return
%endif

%if !defined (NDEBUG)
    FlavorName = _Debug
    # "release" builds have no modifier in their name
%endif

ArchOpt = x86
ArchName = Win32
%if "WinRTx64" == $(TARGET_PROCESSOR_ARCHITECTURE)
    ArchOpt = x64
    ArchName = x64
%endif

%ifdef CREATE_STATIC_LIBRARIES
    ProductBaseDir = $(OutputRootDir)../Product/
%else
    ProductBaseDir = $(OutputRootDir)Product/
%endif

TestBundle = $(OutputRootDir)$(ProductBaseDir)/$(UWPTEST_PRODUCT)/AppPackages/BeTestTest1/BeTestTest1_1.0.0.0_$(ArchName)$(FlavorName)_Test/BeTestTest1_1.0.0.0_$(ArchName)$(FlavorName).appx

%ifnofile $(TestBundle)
    %error Indicated test library file '$(TestBundle)' does not exist. Please check the value of UWPTEST_PRODUCT ('$(UWPTEST_PRODUCT)').
%endif

$(logFile) : $(TestBundle)
    -vstest.console.exe \/InIsolation \/Platform:$(ArchOpt) $(TestBundle) > $(logFile) 2>&1

%message See $(logFile)

BreakOnFailure = 0
%if defined (BEGTEST_BREAK_ON_FAILURE)
    BreakOnFailure = 1
%endif

always:
    python $(baseDIr)CheckLogFilesForFailures.py $[@dir $(logFile)] $(BreakOnFailure)

always:
    ~linkfile "$(BuildContext)Delivery/UwpTest/Logs/$(UWPTEST_LOGFILE_NAME)=$(logFile)"
