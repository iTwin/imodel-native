//:>--------------------------------------------------------------------------------------+
//:>
//:>     $Source: Tests/NonPublished/DictionaryTests/GCSSpecificWKTInterpretationTester.cpp $
//:>
//:>  $Copyright: (c) 2018 Bentley Systems, Incorporated. All rights reserved. $
//:>
//:>+--------------------------------------------------------------------------------------

#include <Bentley/BeTest.h>

#include <GeoCoord/BaseGeoCoord.h>
#include <GeoCoord/GCSLibrary.h>
#include "GCSSpecificWKTInterpretationTester.h"

using namespace ::testing;

bool GCSSpecificWKTInterpretationTester::s_initialized = false;


GCSSpecificWKTInterpretationTester::GCSSpecificWKTInterpretationTester() 
    {
    if (!s_initialized)
        {
        BeTest::Host& host = BeTest::GetHost();

        BeFileName path;
        host.GetDgnPlatformAssetsDirectory(path);

        path.AppendToPath(L"DgnGeoCoord");

        GeoCoordinates::BaseGCS::Initialize(path.c_str());

        s_initialized = true;

        }
    }


/*---------------------------------------------------------------------------------**//**
* @bsi                                                   Alain.Robert  09/2018
+---------------+---------------+---------------+---------------+---------------+------*/
static bvector<bpair <WString, WString> > s_ListOfWKTAndInterpretations =
    {
    // This one is a variant of Web Mercator generated by PROJ4
    { L"EPSG:900913" , L"PROJCS[\"Google Maps Global Mercator\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Mercator_2SP\"],PARAMETER[\"standard_parallel_1\",0],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"Meter\",1],EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],AUTHORITY[\"EPSG\",\"900913\"]]"},

    // Heathrow Airport grid. The name of the datum is intentionnally unknown. The match is performed using the 7 parameter definition.
    { L"HeathrowAirportGrid2007", L"PROJCS[\"AirportGrid2007\", GEOGCS[\"HeathrowT5.LL\",DATUM[\"Heathrow T5\", SPHEROID[\"AIRY30\",6377563.396,299.32496127],358.398,-213.7028,495.3183,-668.80613932004700,4.72664217602752,-719.67109718139600,-6.26386076385543],PRIMEM[\"Greenwich\",0],UNIT[\"Decimal Degree\",0.017453292519943295]],PROJECTION[\"Transverse Mercator\"],PARAMETER[\"latitude_of_origin\",51.470110655555558],PARAMETER[\"central_meridian\",-0.41832591666666669],PARAMETER[\"scale_factor\",0.999995],PARAMETER[\"false_easting\",7334.810],PARAMETER[\"false_northing\",5637.423],UNIT[\"Meter\",1.00000000000000]]" }, 

    };
    







/*---------------------------------------------------------------------------------**//**
* Basic instantiation tests of WKT and compare with known identical keyname
* @bsimethod                                                    Alain.Robert  08/2018
+---------------+---------------+---------------+---------------+---------------+------*/
TEST_P (GCSSpecificWKTInterpretationTester, ParseWKTTest)
    {
    GeoCoordinates::BaseGCSPtr currentGCS;


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    // This WKT originates from a client for a 3MX
    WString wellKnownText = GetParam().second;
    WString keyname = GetParam().first;

    GeoCoordinates::BaseGCSPtr knownGoodGCS = GeoCoordinates::BaseGCS::CreateGCS(keyname.c_str());
    ASSERT_TRUE(knownGoodGCS->IsValid());


    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorOGC, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());

    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();


    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorGeoTiff, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));

    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorESRI, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorOracle, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorGeoTools, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorEPSG, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorOracle9, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorAutodesk, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    currentGCS = GeoCoordinates::BaseGCS::CreateGCS();

    EXPECT_TRUE(SUCCESS == currentGCS->InitFromWellKnownText(NULL, NULL, GeoCoordinates::BaseGCS::wktFlavorUnknown, wellKnownText.c_str()));

    EXPECT_TRUE(currentGCS->IsValid());
    EXPECT_TRUE(currentGCS->IsEquivalent(*knownGoodGCS));


    }
   

    
INSTANTIATE_TEST_CASE_P(GCSSpecificWKTInterpretationTester_Combined,
                        GCSSpecificWKTInterpretationTester,
                        ValuesIn(s_ListOfWKTAndInterpretations));



