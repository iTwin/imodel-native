//---------------------------------------------------------------------------------------------
//  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
//  See LICENSE.md in the repository root for full copyright notice.
//---------------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DIMENSION_BENTLEYM0200_DGN_FB_H_
#define FLATBUFFERS_GENERATED_DIMENSION_BENTLEYM0200_DGN_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace BentleyM0200 {
namespace Dgn {
namespace FB {

struct DPoint2d;

struct DimensionPoints;
struct DimensionPointsBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) DPoint2d FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;

 public:
  DPoint2d() {
    memset(static_cast<void *>(this), 0, sizeof(DPoint2d));
  }
  DPoint2d(double _x, double _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(DPoint2d, 16);

struct DimensionPoints FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DimensionPointsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COORDS = 4
  };
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::DPoint2d *> *coords() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::DPoint2d *> *>(VT_COORDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COORDS) &&
           verifier.VerifyVector(coords()) &&
           verifier.EndTable();
  }
  bool has_coords() const { return CheckField(VT_COORDS); }
};

struct DimensionPointsBuilder {
  typedef DimensionPoints Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_coords(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::DPoint2d *>> coords) {
    fbb_.AddOffset(DimensionPoints::VT_COORDS, coords);
  }
  explicit DimensionPointsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DimensionPointsBuilder &operator=(const DimensionPointsBuilder &);
  flatbuffers::Offset<DimensionPoints> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DimensionPoints>(end);
    return o;
  }
};

inline flatbuffers::Offset<DimensionPoints> CreateDimensionPoints(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::DPoint2d *>> coords = 0) {
  DimensionPointsBuilder builder_(_fbb);
  builder_.add_coords(coords);
  return builder_.Finish();
}

inline flatbuffers::Offset<DimensionPoints> CreateDimensionPointsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<BentleyM0200::Dgn::FB::DPoint2d> *coords = nullptr) {
  auto coords__ = coords ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::DPoint2d>(*coords) : 0;
  return BentleyM0200::Dgn::FB::CreateDimensionPoints(
      _fbb,
      coords__);
}

}  // namespace FB
}  // namespace Dgn
}  // namespace BentleyM0200

#endif  // FLATBUFFERS_GENERATED_DIMENSION_BENTLEYM0200_DGN_FB_H_
