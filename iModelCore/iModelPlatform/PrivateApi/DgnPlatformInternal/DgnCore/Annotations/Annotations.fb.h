//---------------------------------------------------------------------------------------------
//  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
//  See LICENSE.md in the repository root for full copyright notice.
//---------------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYM0200_DGN_FB_H_
#define FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYM0200_DGN_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace BentleyM0200 {
namespace Dgn {
namespace FB {

struct AnnotationTextStyleSetter;

struct AnnotationTextStyle;
struct AnnotationTextStyleBuilder;

struct AnnotationTextBlockSetter;

struct AnnotationTextBlockRun;
struct AnnotationTextBlockRunBuilder;

struct AnnotationTextBlockParagraph;
struct AnnotationTextBlockParagraphBuilder;

struct AnnotationTextBlock;
struct AnnotationTextBlockBuilder;

struct AnnotationFrameStyleSetter;

struct AnnotationFrameStyle;
struct AnnotationFrameStyleBuilder;

struct AnnotationFrame;
struct AnnotationFrameBuilder;

struct AnnotationLeaderStyleSetter;

struct AnnotationLeaderStyle;
struct AnnotationLeaderStyleBuilder;

struct AnnotationLeaderDPoint3d;

struct AnnotationLeader;
struct AnnotationLeaderBuilder;

struct TextAnnotationSeedSetter;

struct TextAnnotationSeed;
struct TextAnnotationSeedBuilder;

struct TextAnnotation;
struct TextAnnotationBuilder;

struct TextAnnotationElementTransform;

struct TextAnnotationElement;
struct TextAnnotationElementBuilder;

enum AnnotationTextStyleProperty {
  AnnotationTextStyleProperty_None = 0,
  AnnotationTextStyleProperty_ColorType = 1,
  AnnotationTextStyleProperty_ColorValue = 2,
  AnnotationTextStyleProperty_FontId = 3,
  AnnotationTextStyleProperty_Height = 4,
  AnnotationTextStyleProperty_LineSpacingFactor = 5,
  AnnotationTextStyleProperty_IsBold = 6,
  AnnotationTextStyleProperty_IsItalic = 7,
  AnnotationTextStyleProperty_IsUnderlined = 8,
  AnnotationTextStyleProperty_StackedFractionScale = 9,
  AnnotationTextStyleProperty_StackedFractionType = 10,
  AnnotationTextStyleProperty_SubScriptOffsetFactor = 11,
  AnnotationTextStyleProperty_SubScriptScale = 12,
  AnnotationTextStyleProperty_SuperScriptOffsetFactor = 13,
  AnnotationTextStyleProperty_SuperScriptScale = 14,
  AnnotationTextStyleProperty_WidthFactor = 15,
  AnnotationTextStyleProperty_MIN = AnnotationTextStyleProperty_None,
  AnnotationTextStyleProperty_MAX = AnnotationTextStyleProperty_WidthFactor
};

inline const AnnotationTextStyleProperty (&EnumValuesAnnotationTextStyleProperty())[16] {
  static const AnnotationTextStyleProperty values[] = {
    AnnotationTextStyleProperty_None,
    AnnotationTextStyleProperty_ColorType,
    AnnotationTextStyleProperty_ColorValue,
    AnnotationTextStyleProperty_FontId,
    AnnotationTextStyleProperty_Height,
    AnnotationTextStyleProperty_LineSpacingFactor,
    AnnotationTextStyleProperty_IsBold,
    AnnotationTextStyleProperty_IsItalic,
    AnnotationTextStyleProperty_IsUnderlined,
    AnnotationTextStyleProperty_StackedFractionScale,
    AnnotationTextStyleProperty_StackedFractionType,
    AnnotationTextStyleProperty_SubScriptOffsetFactor,
    AnnotationTextStyleProperty_SubScriptScale,
    AnnotationTextStyleProperty_SuperScriptOffsetFactor,
    AnnotationTextStyleProperty_SuperScriptScale,
    AnnotationTextStyleProperty_WidthFactor
  };
  return values;
}

inline const char * const *EnumNamesAnnotationTextStyleProperty() {
  static const char * const names[17] = {
    "None",
    "ColorType",
    "ColorValue",
    "FontId",
    "Height",
    "LineSpacingFactor",
    "IsBold",
    "IsItalic",
    "IsUnderlined",
    "StackedFractionScale",
    "StackedFractionType",
    "SubScriptOffsetFactor",
    "SubScriptScale",
    "SuperScriptOffsetFactor",
    "SuperScriptScale",
    "WidthFactor",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationTextStyleProperty(AnnotationTextStyleProperty e) {
  if (flatbuffers::IsOutRange(e, AnnotationTextStyleProperty_None, AnnotationTextStyleProperty_WidthFactor)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationTextStyleProperty()[index];
}

enum AnnotationTextBlockProperty {
  AnnotationTextBlockProperty_None = 0,
  AnnotationTextBlockProperty_DocumentWidth = 1,
  AnnotationTextBlockProperty_Justification = 2,
  AnnotationTextBlockProperty_MIN = AnnotationTextBlockProperty_None,
  AnnotationTextBlockProperty_MAX = AnnotationTextBlockProperty_Justification
};

inline const AnnotationTextBlockProperty (&EnumValuesAnnotationTextBlockProperty())[3] {
  static const AnnotationTextBlockProperty values[] = {
    AnnotationTextBlockProperty_None,
    AnnotationTextBlockProperty_DocumentWidth,
    AnnotationTextBlockProperty_Justification
  };
  return values;
}

inline const char * const *EnumNamesAnnotationTextBlockProperty() {
  static const char * const names[4] = {
    "None",
    "DocumentWidth",
    "Justification",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationTextBlockProperty(AnnotationTextBlockProperty e) {
  if (flatbuffers::IsOutRange(e, AnnotationTextBlockProperty_None, AnnotationTextBlockProperty_Justification)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationTextBlockProperty()[index];
}

enum AnnotationTextBlockRunType {
  AnnotationTextBlockRunType_Invalid = 0,
  AnnotationTextBlockRunType_Text = 1,
  AnnotationTextBlockRunType_Fraction = 2,
  AnnotationTextBlockRunType_LineBreak = 3,
  AnnotationTextBlockRunType_MIN = AnnotationTextBlockRunType_Invalid,
  AnnotationTextBlockRunType_MAX = AnnotationTextBlockRunType_LineBreak
};

inline const AnnotationTextBlockRunType (&EnumValuesAnnotationTextBlockRunType())[4] {
  static const AnnotationTextBlockRunType values[] = {
    AnnotationTextBlockRunType_Invalid,
    AnnotationTextBlockRunType_Text,
    AnnotationTextBlockRunType_Fraction,
    AnnotationTextBlockRunType_LineBreak
  };
  return values;
}

inline const char * const *EnumNamesAnnotationTextBlockRunType() {
  static const char * const names[5] = {
    "Invalid",
    "Text",
    "Fraction",
    "LineBreak",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationTextBlockRunType(AnnotationTextBlockRunType e) {
  if (flatbuffers::IsOutRange(e, AnnotationTextBlockRunType_Invalid, AnnotationTextBlockRunType_LineBreak)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationTextBlockRunType()[index];
}

enum AnnotationTextRunSubSuperScript {
  AnnotationTextRunSubSuperScript_Neither = 0,
  AnnotationTextRunSubSuperScript_SubScript = 1,
  AnnotationTextRunSubSuperScript_SuperScript = 2,
  AnnotationTextRunSubSuperScript_MIN = AnnotationTextRunSubSuperScript_Neither,
  AnnotationTextRunSubSuperScript_MAX = AnnotationTextRunSubSuperScript_SuperScript
};

inline const AnnotationTextRunSubSuperScript (&EnumValuesAnnotationTextRunSubSuperScript())[3] {
  static const AnnotationTextRunSubSuperScript values[] = {
    AnnotationTextRunSubSuperScript_Neither,
    AnnotationTextRunSubSuperScript_SubScript,
    AnnotationTextRunSubSuperScript_SuperScript
  };
  return values;
}

inline const char * const *EnumNamesAnnotationTextRunSubSuperScript() {
  static const char * const names[4] = {
    "Neither",
    "SubScript",
    "SuperScript",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationTextRunSubSuperScript(AnnotationTextRunSubSuperScript e) {
  if (flatbuffers::IsOutRange(e, AnnotationTextRunSubSuperScript_Neither, AnnotationTextRunSubSuperScript_SuperScript)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationTextRunSubSuperScript()[index];
}

enum AnnotationFrameStyleProperty {
  AnnotationFrameStyleProperty_None = 0,
  AnnotationFrameStyleProperty_CloudBulgeFactor = 1,
  AnnotationFrameStyleProperty_CloudDiameterFactor = 2,
  AnnotationFrameStyleProperty_FillColorType = 3,
  AnnotationFrameStyleProperty_FillColorValue = 4,
  AnnotationFrameStyleProperty_FillTransparency = 5,
  AnnotationFrameStyleProperty_HorizontalPadding = 6,
  AnnotationFrameStyleProperty_IsFillEnabled = 7,
  AnnotationFrameStyleProperty_IsStrokeCloud = 8,
  AnnotationFrameStyleProperty_IsStrokeEnabled = 9,
  AnnotationFrameStyleProperty_StrokeColorType = 10,
  AnnotationFrameStyleProperty_StrokeColorValue = 11,
  AnnotationFrameStyleProperty_StrokeWeight = 12,
  AnnotationFrameStyleProperty_Type = 13,
  AnnotationFrameStyleProperty_VerticalPadding = 14,
  AnnotationFrameStyleProperty_MIN = AnnotationFrameStyleProperty_None,
  AnnotationFrameStyleProperty_MAX = AnnotationFrameStyleProperty_VerticalPadding
};

inline const AnnotationFrameStyleProperty (&EnumValuesAnnotationFrameStyleProperty())[15] {
  static const AnnotationFrameStyleProperty values[] = {
    AnnotationFrameStyleProperty_None,
    AnnotationFrameStyleProperty_CloudBulgeFactor,
    AnnotationFrameStyleProperty_CloudDiameterFactor,
    AnnotationFrameStyleProperty_FillColorType,
    AnnotationFrameStyleProperty_FillColorValue,
    AnnotationFrameStyleProperty_FillTransparency,
    AnnotationFrameStyleProperty_HorizontalPadding,
    AnnotationFrameStyleProperty_IsFillEnabled,
    AnnotationFrameStyleProperty_IsStrokeCloud,
    AnnotationFrameStyleProperty_IsStrokeEnabled,
    AnnotationFrameStyleProperty_StrokeColorType,
    AnnotationFrameStyleProperty_StrokeColorValue,
    AnnotationFrameStyleProperty_StrokeWeight,
    AnnotationFrameStyleProperty_Type,
    AnnotationFrameStyleProperty_VerticalPadding
  };
  return values;
}

inline const char * const *EnumNamesAnnotationFrameStyleProperty() {
  static const char * const names[16] = {
    "None",
    "CloudBulgeFactor",
    "CloudDiameterFactor",
    "FillColorType",
    "FillColorValue",
    "FillTransparency",
    "HorizontalPadding",
    "IsFillEnabled",
    "IsStrokeCloud",
    "IsStrokeEnabled",
    "StrokeColorType",
    "StrokeColorValue",
    "StrokeWeight",
    "Type",
    "VerticalPadding",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationFrameStyleProperty(AnnotationFrameStyleProperty e) {
  if (flatbuffers::IsOutRange(e, AnnotationFrameStyleProperty_None, AnnotationFrameStyleProperty_VerticalPadding)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationFrameStyleProperty()[index];
}

enum AnnotationLeaderStyleProperty {
  AnnotationLeaderStyleProperty_None = 0,
  AnnotationLeaderStyleProperty_LineColorType = 1,
  AnnotationLeaderStyleProperty_LineColorValue = 2,
  AnnotationLeaderStyleProperty_LineType = 3,
  AnnotationLeaderStyleProperty_LineWeight = 4,
  AnnotationLeaderStyleProperty_TerminatorColorType = 5,
  AnnotationLeaderStyleProperty_TerminatorColorValue = 6,
  AnnotationLeaderStyleProperty_TerminatorScaleFactor = 7,
  AnnotationLeaderStyleProperty_TerminatorType = 8,
  AnnotationLeaderStyleProperty_TerminatorWeight = 9,
  AnnotationLeaderStyleProperty_MIN = AnnotationLeaderStyleProperty_None,
  AnnotationLeaderStyleProperty_MAX = AnnotationLeaderStyleProperty_TerminatorWeight
};

inline const AnnotationLeaderStyleProperty (&EnumValuesAnnotationLeaderStyleProperty())[10] {
  static const AnnotationLeaderStyleProperty values[] = {
    AnnotationLeaderStyleProperty_None,
    AnnotationLeaderStyleProperty_LineColorType,
    AnnotationLeaderStyleProperty_LineColorValue,
    AnnotationLeaderStyleProperty_LineType,
    AnnotationLeaderStyleProperty_LineWeight,
    AnnotationLeaderStyleProperty_TerminatorColorType,
    AnnotationLeaderStyleProperty_TerminatorColorValue,
    AnnotationLeaderStyleProperty_TerminatorScaleFactor,
    AnnotationLeaderStyleProperty_TerminatorType,
    AnnotationLeaderStyleProperty_TerminatorWeight
  };
  return values;
}

inline const char * const *EnumNamesAnnotationLeaderStyleProperty() {
  static const char * const names[11] = {
    "None",
    "LineColorType",
    "LineColorValue",
    "LineType",
    "LineWeight",
    "TerminatorColorType",
    "TerminatorColorValue",
    "TerminatorScaleFactor",
    "TerminatorType",
    "TerminatorWeight",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationLeaderStyleProperty(AnnotationLeaderStyleProperty e) {
  if (flatbuffers::IsOutRange(e, AnnotationLeaderStyleProperty_None, AnnotationLeaderStyleProperty_TerminatorWeight)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationLeaderStyleProperty()[index];
}

enum AnnotationLeaderSourceAttachmentType {
  AnnotationLeaderSourceAttachmentType_Invalid = 0,
  AnnotationLeaderSourceAttachmentType_ById = 1,
  AnnotationLeaderSourceAttachmentType_MIN = AnnotationLeaderSourceAttachmentType_Invalid,
  AnnotationLeaderSourceAttachmentType_MAX = AnnotationLeaderSourceAttachmentType_ById
};

inline const AnnotationLeaderSourceAttachmentType (&EnumValuesAnnotationLeaderSourceAttachmentType())[2] {
  static const AnnotationLeaderSourceAttachmentType values[] = {
    AnnotationLeaderSourceAttachmentType_Invalid,
    AnnotationLeaderSourceAttachmentType_ById
  };
  return values;
}

inline const char * const *EnumNamesAnnotationLeaderSourceAttachmentType() {
  static const char * const names[3] = {
    "Invalid",
    "ById",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationLeaderSourceAttachmentType(AnnotationLeaderSourceAttachmentType e) {
  if (flatbuffers::IsOutRange(e, AnnotationLeaderSourceAttachmentType_Invalid, AnnotationLeaderSourceAttachmentType_ById)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationLeaderSourceAttachmentType()[index];
}

enum AnnotationLeaderTargetAttachmentType {
  AnnotationLeaderTargetAttachmentType_Invalid = 0,
  AnnotationLeaderTargetAttachmentType_ByPhysicalPoint = 1,
  AnnotationLeaderTargetAttachmentType_MIN = AnnotationLeaderTargetAttachmentType_Invalid,
  AnnotationLeaderTargetAttachmentType_MAX = AnnotationLeaderTargetAttachmentType_ByPhysicalPoint
};

inline const AnnotationLeaderTargetAttachmentType (&EnumValuesAnnotationLeaderTargetAttachmentType())[2] {
  static const AnnotationLeaderTargetAttachmentType values[] = {
    AnnotationLeaderTargetAttachmentType_Invalid,
    AnnotationLeaderTargetAttachmentType_ByPhysicalPoint
  };
  return values;
}

inline const char * const *EnumNamesAnnotationLeaderTargetAttachmentType() {
  static const char * const names[3] = {
    "Invalid",
    "ByPhysicalPoint",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnnotationLeaderTargetAttachmentType(AnnotationLeaderTargetAttachmentType e) {
  if (flatbuffers::IsOutRange(e, AnnotationLeaderTargetAttachmentType_Invalid, AnnotationLeaderTargetAttachmentType_ByPhysicalPoint)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnnotationLeaderTargetAttachmentType()[index];
}

enum TextAnnotationSeedProperty {
  TextAnnotationSeedProperty_None = 0,
  TextAnnotationSeedProperty_FrameStyleId = 1,
  TextAnnotationSeedProperty_LeaderStyleId = 2,
  TextAnnotationSeedProperty_TextStyleId = 3,
  TextAnnotationSeedProperty_MIN = TextAnnotationSeedProperty_None,
  TextAnnotationSeedProperty_MAX = TextAnnotationSeedProperty_TextStyleId
};

inline const TextAnnotationSeedProperty (&EnumValuesTextAnnotationSeedProperty())[4] {
  static const TextAnnotationSeedProperty values[] = {
    TextAnnotationSeedProperty_None,
    TextAnnotationSeedProperty_FrameStyleId,
    TextAnnotationSeedProperty_LeaderStyleId,
    TextAnnotationSeedProperty_TextStyleId
  };
  return values;
}

inline const char * const *EnumNamesTextAnnotationSeedProperty() {
  static const char * const names[5] = {
    "None",
    "FrameStyleId",
    "LeaderStyleId",
    "TextStyleId",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextAnnotationSeedProperty(TextAnnotationSeedProperty e) {
  if (flatbuffers::IsOutRange(e, TextAnnotationSeedProperty_None, TextAnnotationSeedProperty_TextStyleId)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTextAnnotationSeedProperty()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) AnnotationTextStyleSetter FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t key_;
  int32_t padding0__;
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationTextStyleSetter() {
    memset(static_cast<void *>(this), 0, sizeof(AnnotationTextStyleSetter));
  }
  AnnotationTextStyleSetter(BentleyM0200::Dgn::FB::AnnotationTextStyleProperty _key, int64_t _integerValue, double _realValue)
      : key_(flatbuffers::EndianScalar(static_cast<int32_t>(_key))),
        padding0__(0),
        integerValue_(flatbuffers::EndianScalar(_integerValue)),
        realValue_(flatbuffers::EndianScalar(_realValue)) {
    (void)padding0__;
  }
  BentleyM0200::Dgn::FB::AnnotationTextStyleProperty key() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationTextStyleProperty>(flatbuffers::EndianScalar(key_));
  }
  int64_t integerValue() const {
    return flatbuffers::EndianScalar(integerValue_);
  }
  double realValue() const {
    return flatbuffers::EndianScalar(realValue_);
  }
};
FLATBUFFERS_STRUCT_END(AnnotationTextStyleSetter, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) AnnotationTextBlockSetter FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t key_;
  int32_t padding0__;
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationTextBlockSetter() {
    memset(static_cast<void *>(this), 0, sizeof(AnnotationTextBlockSetter));
  }
  AnnotationTextBlockSetter(BentleyM0200::Dgn::FB::AnnotationTextBlockProperty _key, int64_t _integerValue, double _realValue)
      : key_(flatbuffers::EndianScalar(static_cast<int32_t>(_key))),
        padding0__(0),
        integerValue_(flatbuffers::EndianScalar(_integerValue)),
        realValue_(flatbuffers::EndianScalar(_realValue)) {
    (void)padding0__;
  }
  BentleyM0200::Dgn::FB::AnnotationTextBlockProperty key() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationTextBlockProperty>(flatbuffers::EndianScalar(key_));
  }
  int64_t integerValue() const {
    return flatbuffers::EndianScalar(integerValue_);
  }
  double realValue() const {
    return flatbuffers::EndianScalar(realValue_);
  }
};
FLATBUFFERS_STRUCT_END(AnnotationTextBlockSetter, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) AnnotationFrameStyleSetter FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t key_;
  int32_t padding0__;
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationFrameStyleSetter() {
    memset(static_cast<void *>(this), 0, sizeof(AnnotationFrameStyleSetter));
  }
  AnnotationFrameStyleSetter(BentleyM0200::Dgn::FB::AnnotationFrameStyleProperty _key, int64_t _integerValue, double _realValue)
      : key_(flatbuffers::EndianScalar(static_cast<int32_t>(_key))),
        padding0__(0),
        integerValue_(flatbuffers::EndianScalar(_integerValue)),
        realValue_(flatbuffers::EndianScalar(_realValue)) {
    (void)padding0__;
  }
  BentleyM0200::Dgn::FB::AnnotationFrameStyleProperty key() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationFrameStyleProperty>(flatbuffers::EndianScalar(key_));
  }
  int64_t integerValue() const {
    return flatbuffers::EndianScalar(integerValue_);
  }
  double realValue() const {
    return flatbuffers::EndianScalar(realValue_);
  }
};
FLATBUFFERS_STRUCT_END(AnnotationFrameStyleSetter, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) AnnotationLeaderStyleSetter FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t key_;
  int32_t padding0__;
  int64_t integerValue_;
  double realValue_;

 public:
  AnnotationLeaderStyleSetter() {
    memset(static_cast<void *>(this), 0, sizeof(AnnotationLeaderStyleSetter));
  }
  AnnotationLeaderStyleSetter(BentleyM0200::Dgn::FB::AnnotationLeaderStyleProperty _key, int64_t _integerValue, double _realValue)
      : key_(flatbuffers::EndianScalar(static_cast<int32_t>(_key))),
        padding0__(0),
        integerValue_(flatbuffers::EndianScalar(_integerValue)),
        realValue_(flatbuffers::EndianScalar(_realValue)) {
    (void)padding0__;
  }
  BentleyM0200::Dgn::FB::AnnotationLeaderStyleProperty key() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationLeaderStyleProperty>(flatbuffers::EndianScalar(key_));
  }
  int64_t integerValue() const {
    return flatbuffers::EndianScalar(integerValue_);
  }
  double realValue() const {
    return flatbuffers::EndianScalar(realValue_);
  }
};
FLATBUFFERS_STRUCT_END(AnnotationLeaderStyleSetter, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) AnnotationLeaderDPoint3d FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  AnnotationLeaderDPoint3d() {
    memset(static_cast<void *>(this), 0, sizeof(AnnotationLeaderDPoint3d));
  }
  AnnotationLeaderDPoint3d(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(AnnotationLeaderDPoint3d, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) TextAnnotationSeedSetter FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t key_;
  int32_t padding0__;
  int64_t integerValue_;
  double realValue_;

 public:
  TextAnnotationSeedSetter() {
    memset(static_cast<void *>(this), 0, sizeof(TextAnnotationSeedSetter));
  }
  TextAnnotationSeedSetter(BentleyM0200::Dgn::FB::TextAnnotationSeedProperty _key, int64_t _integerValue, double _realValue)
      : key_(flatbuffers::EndianScalar(static_cast<int32_t>(_key))),
        padding0__(0),
        integerValue_(flatbuffers::EndianScalar(_integerValue)),
        realValue_(flatbuffers::EndianScalar(_realValue)) {
    (void)padding0__;
  }
  BentleyM0200::Dgn::FB::TextAnnotationSeedProperty key() const {
    return static_cast<BentleyM0200::Dgn::FB::TextAnnotationSeedProperty>(flatbuffers::EndianScalar(key_));
  }
  int64_t integerValue() const {
    return flatbuffers::EndianScalar(integerValue_);
  }
  double realValue() const {
    return flatbuffers::EndianScalar(realValue_);
  }
};
FLATBUFFERS_STRUCT_END(TextAnnotationSeedSetter, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) TextAnnotationElementTransform FLATBUFFERS_FINAL_CLASS {
 private:
  double form3d00_;
  double form3d01_;
  double form3d02_;
  double form3d03_;
  double form3d10_;
  double form3d11_;
  double form3d12_;
  double form3d13_;
  double form3d20_;
  double form3d21_;
  double form3d22_;
  double form3d23_;

 public:
  TextAnnotationElementTransform() {
    memset(static_cast<void *>(this), 0, sizeof(TextAnnotationElementTransform));
  }
  TextAnnotationElementTransform(double _form3d00, double _form3d01, double _form3d02, double _form3d03, double _form3d10, double _form3d11, double _form3d12, double _form3d13, double _form3d20, double _form3d21, double _form3d22, double _form3d23)
      : form3d00_(flatbuffers::EndianScalar(_form3d00)),
        form3d01_(flatbuffers::EndianScalar(_form3d01)),
        form3d02_(flatbuffers::EndianScalar(_form3d02)),
        form3d03_(flatbuffers::EndianScalar(_form3d03)),
        form3d10_(flatbuffers::EndianScalar(_form3d10)),
        form3d11_(flatbuffers::EndianScalar(_form3d11)),
        form3d12_(flatbuffers::EndianScalar(_form3d12)),
        form3d13_(flatbuffers::EndianScalar(_form3d13)),
        form3d20_(flatbuffers::EndianScalar(_form3d20)),
        form3d21_(flatbuffers::EndianScalar(_form3d21)),
        form3d22_(flatbuffers::EndianScalar(_form3d22)),
        form3d23_(flatbuffers::EndianScalar(_form3d23)) {
  }
  double form3d00() const {
    return flatbuffers::EndianScalar(form3d00_);
  }
  double form3d01() const {
    return flatbuffers::EndianScalar(form3d01_);
  }
  double form3d02() const {
    return flatbuffers::EndianScalar(form3d02_);
  }
  double form3d03() const {
    return flatbuffers::EndianScalar(form3d03_);
  }
  double form3d10() const {
    return flatbuffers::EndianScalar(form3d10_);
  }
  double form3d11() const {
    return flatbuffers::EndianScalar(form3d11_);
  }
  double form3d12() const {
    return flatbuffers::EndianScalar(form3d12_);
  }
  double form3d13() const {
    return flatbuffers::EndianScalar(form3d13_);
  }
  double form3d20() const {
    return flatbuffers::EndianScalar(form3d20_);
  }
  double form3d21() const {
    return flatbuffers::EndianScalar(form3d21_);
  }
  double form3d22() const {
    return flatbuffers::EndianScalar(form3d22_);
  }
  double form3d23() const {
    return flatbuffers::EndianScalar(form3d23_);
  }
};
FLATBUFFERS_STRUCT_END(TextAnnotationElementTransform, 96);

struct AnnotationTextStyle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationTextStyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_SETTERS = 8
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *setters() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *>(VT_SETTERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_SETTERS) &&
           verifier.VerifyVector(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_setters() const { return CheckField(VT_SETTERS); }
};

struct AnnotationTextStyleBuilder {
  typedef AnnotationTextStyle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationTextStyle::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationTextStyle::VT_MINORVERSION, minorVersion, 0);
  }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> setters) {
    fbb_.AddOffset(AnnotationTextStyle::VT_SETTERS, setters);
  }
  explicit AnnotationTextStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationTextStyleBuilder &operator=(const AnnotationTextStyleBuilder &);
  flatbuffers::Offset<AnnotationTextStyle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationTextStyle>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationTextStyle> CreateAnnotationTextStyle(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> setters = 0) {
  AnnotationTextStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationTextStyle> CreateAnnotationTextStyleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter> *setters = nullptr) {
  auto setters__ = setters ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter>(*setters) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationTextStyle(
      _fbb,
      majorVersion,
      minorVersion,
      setters__);
}

struct AnnotationTextBlockRun FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationTextBlockRunBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_STYLEID = 8,
    VT_STYLEOVERRIDES = 10,
    VT_TEXT_CONTENT = 12,
    VT_FRACTION_NUMERATORCONTENT = 14,
    VT_FRACTION_DENOMINATORCONTENT = 16,
    VT_TEXT_SUBSUPERSCRIPT = 18
  };
  BentleyM0200::Dgn::FB::AnnotationTextBlockRunType type() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationTextBlockRunType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *properties() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *>(VT_PROPERTIES);
  }
  int64_t styleId() const {
    return GetField<int64_t>(VT_STYLEID, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *styleOverrides() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *>(VT_STYLEOVERRIDES);
  }
  const flatbuffers::String *text_content() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT_CONTENT);
  }
  const flatbuffers::String *fraction_numeratorContent() const {
    return GetPointer<const flatbuffers::String *>(VT_FRACTION_NUMERATORCONTENT);
  }
  const flatbuffers::String *fraction_denominatorContent() const {
    return GetPointer<const flatbuffers::String *>(VT_FRACTION_DENOMINATORCONTENT);
  }
  BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript text_subsuperscript() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript>(GetField<int32_t>(VT_TEXT_SUBSUPERSCRIPT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           VerifyField<int64_t>(verifier, VT_STYLEID) &&
           VerifyOffset(verifier, VT_STYLEOVERRIDES) &&
           verifier.VerifyVector(styleOverrides()) &&
           VerifyOffset(verifier, VT_TEXT_CONTENT) &&
           verifier.VerifyString(text_content()) &&
           VerifyOffset(verifier, VT_FRACTION_NUMERATORCONTENT) &&
           verifier.VerifyString(fraction_numeratorContent()) &&
           VerifyOffset(verifier, VT_FRACTION_DENOMINATORCONTENT) &&
           verifier.VerifyString(fraction_denominatorContent()) &&
           VerifyField<int32_t>(verifier, VT_TEXT_SUBSUPERSCRIPT) &&
           verifier.EndTable();
  }
  bool has_type() const { return CheckField(VT_TYPE); }
  bool has_properties() const { return CheckField(VT_PROPERTIES); }
  bool has_styleId() const { return CheckField(VT_STYLEID); }
  bool has_styleOverrides() const { return CheckField(VT_STYLEOVERRIDES); }
  bool has_text_content() const { return CheckField(VT_TEXT_CONTENT); }
  bool has_fraction_numeratorContent() const { return CheckField(VT_FRACTION_NUMERATORCONTENT); }
  bool has_fraction_denominatorContent() const { return CheckField(VT_FRACTION_DENOMINATORCONTENT); }
  bool has_text_subsuperscript() const { return CheckField(VT_TEXT_SUBSUPERSCRIPT); }
};

struct AnnotationTextBlockRunBuilder {
  typedef AnnotationTextBlockRun Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(BentleyM0200::Dgn::FB::AnnotationTextBlockRunType type) {
    fbb_.AddElement<int32_t>(AnnotationTextBlockRun::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties) {
    fbb_.AddOffset(AnnotationTextBlockRun::VT_PROPERTIES, properties);
  }
  void add_styleId(int64_t styleId) {
    fbb_.AddElement<int64_t>(AnnotationTextBlockRun::VT_STYLEID, styleId, 0);
  }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides) {
    fbb_.AddOffset(AnnotationTextBlockRun::VT_STYLEOVERRIDES, styleOverrides);
  }
  void add_text_content(flatbuffers::Offset<flatbuffers::String> text_content) {
    fbb_.AddOffset(AnnotationTextBlockRun::VT_TEXT_CONTENT, text_content);
  }
  void add_fraction_numeratorContent(flatbuffers::Offset<flatbuffers::String> fraction_numeratorContent) {
    fbb_.AddOffset(AnnotationTextBlockRun::VT_FRACTION_NUMERATORCONTENT, fraction_numeratorContent);
  }
  void add_fraction_denominatorContent(flatbuffers::Offset<flatbuffers::String> fraction_denominatorContent) {
    fbb_.AddOffset(AnnotationTextBlockRun::VT_FRACTION_DENOMINATORCONTENT, fraction_denominatorContent);
  }
  void add_text_subsuperscript(BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript text_subsuperscript) {
    fbb_.AddElement<int32_t>(AnnotationTextBlockRun::VT_TEXT_SUBSUPERSCRIPT, static_cast<int32_t>(text_subsuperscript), 0);
  }
  explicit AnnotationTextBlockRunBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationTextBlockRunBuilder &operator=(const AnnotationTextBlockRunBuilder &);
  flatbuffers::Offset<AnnotationTextBlockRun> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationTextBlockRun>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationTextBlockRun> CreateAnnotationTextBlockRun(
    flatbuffers::FlatBufferBuilder &_fbb,
    BentleyM0200::Dgn::FB::AnnotationTextBlockRunType type = BentleyM0200::Dgn::FB::AnnotationTextBlockRunType_Invalid,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties = 0,
    int64_t styleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides = 0,
    flatbuffers::Offset<flatbuffers::String> text_content = 0,
    flatbuffers::Offset<flatbuffers::String> fraction_numeratorContent = 0,
    flatbuffers::Offset<flatbuffers::String> fraction_denominatorContent = 0,
    BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript text_subsuperscript = BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript_Neither) {
  AnnotationTextBlockRunBuilder builder_(_fbb);
  builder_.add_styleId(styleId);
  builder_.add_text_subsuperscript(text_subsuperscript);
  builder_.add_fraction_denominatorContent(fraction_denominatorContent);
  builder_.add_fraction_numeratorContent(fraction_numeratorContent);
  builder_.add_text_content(text_content);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationTextBlockRun> CreateAnnotationTextBlockRunDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    BentleyM0200::Dgn::FB::AnnotationTextBlockRunType type = BentleyM0200::Dgn::FB::AnnotationTextBlockRunType_Invalid,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter> *properties = nullptr,
    int64_t styleId = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter> *styleOverrides = nullptr,
    const char *text_content = nullptr,
    const char *fraction_numeratorContent = nullptr,
    const char *fraction_denominatorContent = nullptr,
    BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript text_subsuperscript = BentleyM0200::Dgn::FB::AnnotationTextRunSubSuperScript_Neither) {
  auto properties__ = properties ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter>(*properties) : 0;
  auto styleOverrides__ = styleOverrides ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter>(*styleOverrides) : 0;
  auto text_content__ = text_content ? _fbb.CreateString(text_content) : 0;
  auto fraction_numeratorContent__ = fraction_numeratorContent ? _fbb.CreateString(fraction_numeratorContent) : 0;
  auto fraction_denominatorContent__ = fraction_denominatorContent ? _fbb.CreateString(fraction_denominatorContent) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationTextBlockRun(
      _fbb,
      type,
      properties__,
      styleId,
      styleOverrides__,
      text_content__,
      fraction_numeratorContent__,
      fraction_denominatorContent__,
      text_subsuperscript);
}

struct AnnotationTextBlockParagraph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationTextBlockParagraphBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4,
    VT_STYLEID = 6,
    VT_STYLEOVERRIDES = 8,
    VT_RUNS = 10
  };
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *properties() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *>(VT_PROPERTIES);
  }
  int64_t styleId() const {
    return GetField<int64_t>(VT_STYLEID, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *styleOverrides() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *>(VT_STYLEOVERRIDES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>> *runs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>> *>(VT_RUNS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           VerifyField<int64_t>(verifier, VT_STYLEID) &&
           VerifyOffset(verifier, VT_STYLEOVERRIDES) &&
           verifier.VerifyVector(styleOverrides()) &&
           VerifyOffset(verifier, VT_RUNS) &&
           verifier.VerifyVector(runs()) &&
           verifier.VerifyVectorOfTables(runs()) &&
           verifier.EndTable();
  }
  bool has_properties() const { return CheckField(VT_PROPERTIES); }
  bool has_styleId() const { return CheckField(VT_STYLEID); }
  bool has_styleOverrides() const { return CheckField(VT_STYLEOVERRIDES); }
  bool has_runs() const { return CheckField(VT_RUNS); }
};

struct AnnotationTextBlockParagraphBuilder {
  typedef AnnotationTextBlockParagraph Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties) {
    fbb_.AddOffset(AnnotationTextBlockParagraph::VT_PROPERTIES, properties);
  }
  void add_styleId(int64_t styleId) {
    fbb_.AddElement<int64_t>(AnnotationTextBlockParagraph::VT_STYLEID, styleId, 0);
  }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides) {
    fbb_.AddOffset(AnnotationTextBlockParagraph::VT_STYLEOVERRIDES, styleOverrides);
  }
  void add_runs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>>> runs) {
    fbb_.AddOffset(AnnotationTextBlockParagraph::VT_RUNS, runs);
  }
  explicit AnnotationTextBlockParagraphBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationTextBlockParagraphBuilder &operator=(const AnnotationTextBlockParagraphBuilder &);
  flatbuffers::Offset<AnnotationTextBlockParagraph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationTextBlockParagraph>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationTextBlockParagraph> CreateAnnotationTextBlockParagraph(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties = 0,
    int64_t styleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>>> runs = 0) {
  AnnotationTextBlockParagraphBuilder builder_(_fbb);
  builder_.add_styleId(styleId);
  builder_.add_runs(runs);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationTextBlockParagraph> CreateAnnotationTextBlockParagraphDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter> *properties = nullptr,
    int64_t styleId = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter> *styleOverrides = nullptr,
    const std::vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>> *runs = nullptr) {
  auto properties__ = properties ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter>(*properties) : 0;
  auto styleOverrides__ = styleOverrides ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter>(*styleOverrides) : 0;
  auto runs__ = runs ? _fbb.CreateVector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockRun>>(*runs) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationTextBlockParagraph(
      _fbb,
      properties__,
      styleId,
      styleOverrides__,
      runs__);
}

struct AnnotationTextBlock FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationTextBlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_PROPERTIES = 8,
    VT_STYLEID = 10,
    VT_STYLEOVERRIDES = 12,
    VT_PARAGRAPHS = 14
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *properties() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *> *>(VT_PROPERTIES);
  }
  int64_t styleId() const {
    return GetField<int64_t>(VT_STYLEID, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *styleOverrides() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *> *>(VT_STYLEOVERRIDES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>> *paragraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>> *>(VT_PARAGRAPHS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           VerifyField<int64_t>(verifier, VT_STYLEID) &&
           VerifyOffset(verifier, VT_STYLEOVERRIDES) &&
           verifier.VerifyVector(styleOverrides()) &&
           VerifyOffset(verifier, VT_PARAGRAPHS) &&
           verifier.VerifyVector(paragraphs()) &&
           verifier.VerifyVectorOfTables(paragraphs()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_properties() const { return CheckField(VT_PROPERTIES); }
  bool has_styleId() const { return CheckField(VT_STYLEID); }
  bool has_styleOverrides() const { return CheckField(VT_STYLEOVERRIDES); }
  bool has_paragraphs() const { return CheckField(VT_PARAGRAPHS); }
};

struct AnnotationTextBlockBuilder {
  typedef AnnotationTextBlock Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationTextBlock::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationTextBlock::VT_MINORVERSION, minorVersion, 0);
  }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties) {
    fbb_.AddOffset(AnnotationTextBlock::VT_PROPERTIES, properties);
  }
  void add_styleId(int64_t styleId) {
    fbb_.AddElement<int64_t>(AnnotationTextBlock::VT_STYLEID, styleId, 0);
  }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides) {
    fbb_.AddOffset(AnnotationTextBlock::VT_STYLEOVERRIDES, styleOverrides);
  }
  void add_paragraphs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>>> paragraphs) {
    fbb_.AddOffset(AnnotationTextBlock::VT_PARAGRAPHS, paragraphs);
  }
  explicit AnnotationTextBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationTextBlockBuilder &operator=(const AnnotationTextBlockBuilder &);
  flatbuffers::Offset<AnnotationTextBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationTextBlock>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationTextBlock> CreateAnnotationTextBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextBlockSetter *>> properties = 0,
    int64_t styleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationTextStyleSetter *>> styleOverrides = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>>> paragraphs = 0) {
  AnnotationTextBlockBuilder builder_(_fbb);
  builder_.add_styleId(styleId);
  builder_.add_paragraphs(paragraphs);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_properties(properties);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationTextBlock> CreateAnnotationTextBlockDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter> *properties = nullptr,
    int64_t styleId = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter> *styleOverrides = nullptr,
    const std::vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>> *paragraphs = nullptr) {
  auto properties__ = properties ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextBlockSetter>(*properties) : 0;
  auto styleOverrides__ = styleOverrides ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationTextStyleSetter>(*styleOverrides) : 0;
  auto paragraphs__ = paragraphs ? _fbb.CreateVector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlockParagraph>>(*paragraphs) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationTextBlock(
      _fbb,
      majorVersion,
      minorVersion,
      properties__,
      styleId,
      styleOverrides__,
      paragraphs__);
}

struct AnnotationFrameStyle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationFrameStyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_SETTERS = 8
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *> *setters() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *> *>(VT_SETTERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_SETTERS) &&
           verifier.VerifyVector(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_setters() const { return CheckField(VT_SETTERS); }
};

struct AnnotationFrameStyleBuilder {
  typedef AnnotationFrameStyle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationFrameStyle::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationFrameStyle::VT_MINORVERSION, minorVersion, 0);
  }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *>> setters) {
    fbb_.AddOffset(AnnotationFrameStyle::VT_SETTERS, setters);
  }
  explicit AnnotationFrameStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationFrameStyleBuilder &operator=(const AnnotationFrameStyleBuilder &);
  flatbuffers::Offset<AnnotationFrameStyle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationFrameStyle>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationFrameStyle> CreateAnnotationFrameStyle(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *>> setters = 0) {
  AnnotationFrameStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationFrameStyle> CreateAnnotationFrameStyleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter> *setters = nullptr) {
  auto setters__ = setters ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter>(*setters) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationFrameStyle(
      _fbb,
      majorVersion,
      minorVersion,
      setters__);
}

struct AnnotationFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_STYLEID = 8,
    VT_STYLEOVERRIDES = 10
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  int64_t styleId() const {
    return GetField<int64_t>(VT_STYLEID, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *> *styleOverrides() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *> *>(VT_STYLEOVERRIDES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyField<int64_t>(verifier, VT_STYLEID) &&
           VerifyOffset(verifier, VT_STYLEOVERRIDES) &&
           verifier.VerifyVector(styleOverrides()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_styleId() const { return CheckField(VT_STYLEID); }
  bool has_styleOverrides() const { return CheckField(VT_STYLEOVERRIDES); }
};

struct AnnotationFrameBuilder {
  typedef AnnotationFrame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationFrame::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationFrame::VT_MINORVERSION, minorVersion, 0);
  }
  void add_styleId(int64_t styleId) {
    fbb_.AddElement<int64_t>(AnnotationFrame::VT_STYLEID, styleId, 0);
  }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *>> styleOverrides) {
    fbb_.AddOffset(AnnotationFrame::VT_STYLEOVERRIDES, styleOverrides);
  }
  explicit AnnotationFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationFrameBuilder &operator=(const AnnotationFrameBuilder &);
  flatbuffers::Offset<AnnotationFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationFrame>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationFrame> CreateAnnotationFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    int64_t styleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter *>> styleOverrides = 0) {
  AnnotationFrameBuilder builder_(_fbb);
  builder_.add_styleId(styleId);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationFrame> CreateAnnotationFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    int64_t styleId = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter> *styleOverrides = nullptr) {
  auto styleOverrides__ = styleOverrides ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationFrameStyleSetter>(*styleOverrides) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationFrame(
      _fbb,
      majorVersion,
      minorVersion,
      styleId,
      styleOverrides__);
}

struct AnnotationLeaderStyle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationLeaderStyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_SETTERS = 8
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *> *setters() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *> *>(VT_SETTERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_SETTERS) &&
           verifier.VerifyVector(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_setters() const { return CheckField(VT_SETTERS); }
};

struct AnnotationLeaderStyleBuilder {
  typedef AnnotationLeaderStyle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationLeaderStyle::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationLeaderStyle::VT_MINORVERSION, minorVersion, 0);
  }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *>> setters) {
    fbb_.AddOffset(AnnotationLeaderStyle::VT_SETTERS, setters);
  }
  explicit AnnotationLeaderStyleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationLeaderStyleBuilder &operator=(const AnnotationLeaderStyleBuilder &);
  flatbuffers::Offset<AnnotationLeaderStyle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationLeaderStyle>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationLeaderStyle> CreateAnnotationLeaderStyle(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *>> setters = 0) {
  AnnotationLeaderStyleBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationLeaderStyle> CreateAnnotationLeaderStyleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter> *setters = nullptr) {
  auto setters__ = setters ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter>(*setters) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationLeaderStyle(
      _fbb,
      majorVersion,
      minorVersion,
      setters__);
}

struct AnnotationLeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationLeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_STYLEID = 8,
    VT_STYLEOVERRIDES = 10,
    VT_SOURCEATTACHMENTTYPE = 12,
    VT_SOURCEATTACHMENTID = 14,
    VT_TARGETATTACHMENTTYPE = 16,
    VT_TARGETATTACHMENTPT = 18
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  int64_t styleId() const {
    return GetField<int64_t>(VT_STYLEID, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *> *styleOverrides() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *> *>(VT_STYLEOVERRIDES);
  }
  BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType sourceAttachmentType() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType>(GetField<int32_t>(VT_SOURCEATTACHMENTTYPE, 0));
  }
  uint32_t sourceAttachmentId() const {
    return GetField<uint32_t>(VT_SOURCEATTACHMENTID, 0);
  }
  BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType targetAttachmentType() const {
    return static_cast<BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType>(GetField<int32_t>(VT_TARGETATTACHMENTTYPE, 0));
  }
  const BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d *targetAttachmentPt() const {
    return GetStruct<const BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d *>(VT_TARGETATTACHMENTPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyField<int64_t>(verifier, VT_STYLEID) &&
           VerifyOffset(verifier, VT_STYLEOVERRIDES) &&
           verifier.VerifyVector(styleOverrides()) &&
           VerifyField<int32_t>(verifier, VT_SOURCEATTACHMENTTYPE) &&
           VerifyField<uint32_t>(verifier, VT_SOURCEATTACHMENTID) &&
           VerifyField<int32_t>(verifier, VT_TARGETATTACHMENTTYPE) &&
           VerifyField<BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d>(verifier, VT_TARGETATTACHMENTPT) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_styleId() const { return CheckField(VT_STYLEID); }
  bool has_styleOverrides() const { return CheckField(VT_STYLEOVERRIDES); }
  bool has_sourceAttachmentType() const { return CheckField(VT_SOURCEATTACHMENTTYPE); }
  bool has_sourceAttachmentId() const { return CheckField(VT_SOURCEATTACHMENTID); }
  bool has_targetAttachmentType() const { return CheckField(VT_TARGETATTACHMENTTYPE); }
  bool has_targetAttachmentPt() const { return CheckField(VT_TARGETATTACHMENTPT); }
};

struct AnnotationLeaderBuilder {
  typedef AnnotationLeader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationLeader::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(AnnotationLeader::VT_MINORVERSION, minorVersion, 0);
  }
  void add_styleId(int64_t styleId) {
    fbb_.AddElement<int64_t>(AnnotationLeader::VT_STYLEID, styleId, 0);
  }
  void add_styleOverrides(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *>> styleOverrides) {
    fbb_.AddOffset(AnnotationLeader::VT_STYLEOVERRIDES, styleOverrides);
  }
  void add_sourceAttachmentType(BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType sourceAttachmentType) {
    fbb_.AddElement<int32_t>(AnnotationLeader::VT_SOURCEATTACHMENTTYPE, static_cast<int32_t>(sourceAttachmentType), 0);
  }
  void add_sourceAttachmentId(uint32_t sourceAttachmentId) {
    fbb_.AddElement<uint32_t>(AnnotationLeader::VT_SOURCEATTACHMENTID, sourceAttachmentId, 0);
  }
  void add_targetAttachmentType(BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType targetAttachmentType) {
    fbb_.AddElement<int32_t>(AnnotationLeader::VT_TARGETATTACHMENTTYPE, static_cast<int32_t>(targetAttachmentType), 0);
  }
  void add_targetAttachmentPt(const BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d *targetAttachmentPt) {
    fbb_.AddStruct(AnnotationLeader::VT_TARGETATTACHMENTPT, targetAttachmentPt);
  }
  explicit AnnotationLeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationLeaderBuilder &operator=(const AnnotationLeaderBuilder &);
  flatbuffers::Offset<AnnotationLeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnnotationLeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnnotationLeader> CreateAnnotationLeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    int64_t styleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter *>> styleOverrides = 0,
    BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType sourceAttachmentType = BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType_Invalid,
    uint32_t sourceAttachmentId = 0,
    BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType targetAttachmentType = BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType_Invalid,
    const BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d *targetAttachmentPt = 0) {
  AnnotationLeaderBuilder builder_(_fbb);
  builder_.add_styleId(styleId);
  builder_.add_targetAttachmentPt(targetAttachmentPt);
  builder_.add_targetAttachmentType(targetAttachmentType);
  builder_.add_sourceAttachmentId(sourceAttachmentId);
  builder_.add_sourceAttachmentType(sourceAttachmentType);
  builder_.add_styleOverrides(styleOverrides);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnnotationLeader> CreateAnnotationLeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    int64_t styleId = 0,
    const std::vector<BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter> *styleOverrides = nullptr,
    BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType sourceAttachmentType = BentleyM0200::Dgn::FB::AnnotationLeaderSourceAttachmentType_Invalid,
    uint32_t sourceAttachmentId = 0,
    BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType targetAttachmentType = BentleyM0200::Dgn::FB::AnnotationLeaderTargetAttachmentType_Invalid,
    const BentleyM0200::Dgn::FB::AnnotationLeaderDPoint3d *targetAttachmentPt = 0) {
  auto styleOverrides__ = styleOverrides ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::AnnotationLeaderStyleSetter>(*styleOverrides) : 0;
  return BentleyM0200::Dgn::FB::CreateAnnotationLeader(
      _fbb,
      majorVersion,
      minorVersion,
      styleId,
      styleOverrides__,
      sourceAttachmentType,
      sourceAttachmentId,
      targetAttachmentType,
      targetAttachmentPt);
}

struct TextAnnotationSeed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextAnnotationSeedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_SETTERS = 8
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<const BentleyM0200::Dgn::FB::TextAnnotationSeedSetter *> *setters() const {
    return GetPointer<const flatbuffers::Vector<const BentleyM0200::Dgn::FB::TextAnnotationSeedSetter *> *>(VT_SETTERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_SETTERS) &&
           verifier.VerifyVector(setters()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_setters() const { return CheckField(VT_SETTERS); }
};

struct TextAnnotationSeedBuilder {
  typedef TextAnnotationSeed Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotationSeed::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotationSeed::VT_MINORVERSION, minorVersion, 0);
  }
  void add_setters(flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::TextAnnotationSeedSetter *>> setters) {
    fbb_.AddOffset(TextAnnotationSeed::VT_SETTERS, setters);
  }
  explicit TextAnnotationSeedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextAnnotationSeedBuilder &operator=(const TextAnnotationSeedBuilder &);
  flatbuffers::Offset<TextAnnotationSeed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextAnnotationSeed>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextAnnotationSeed> CreateTextAnnotationSeed(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<const BentleyM0200::Dgn::FB::TextAnnotationSeedSetter *>> setters = 0) {
  TextAnnotationSeedBuilder builder_(_fbb);
  builder_.add_setters(setters);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<TextAnnotationSeed> CreateTextAnnotationSeedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<BentleyM0200::Dgn::FB::TextAnnotationSeedSetter> *setters = nullptr) {
  auto setters__ = setters ? _fbb.CreateVectorOfStructs<BentleyM0200::Dgn::FB::TextAnnotationSeedSetter>(*setters) : 0;
  return BentleyM0200::Dgn::FB::CreateTextAnnotationSeed(
      _fbb,
      majorVersion,
      minorVersion,
      setters__);
}

struct TextAnnotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextAnnotationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_DOCUMENT = 8,
    VT_FRAME = 10,
    VT_LEADERS = 12
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const BentleyM0200::Dgn::FB::AnnotationTextBlock *document() const {
    return GetPointer<const BentleyM0200::Dgn::FB::AnnotationTextBlock *>(VT_DOCUMENT);
  }
  const BentleyM0200::Dgn::FB::AnnotationFrame *frame() const {
    return GetPointer<const BentleyM0200::Dgn::FB::AnnotationFrame *>(VT_FRAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>> *leaders() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>> *>(VT_LEADERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_DOCUMENT) &&
           verifier.VerifyTable(document()) &&
           VerifyOffset(verifier, VT_FRAME) &&
           verifier.VerifyTable(frame()) &&
           VerifyOffset(verifier, VT_LEADERS) &&
           verifier.VerifyVector(leaders()) &&
           verifier.VerifyVectorOfTables(leaders()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_document() const { return CheckField(VT_DOCUMENT); }
  bool has_frame() const { return CheckField(VT_FRAME); }
  bool has_leaders() const { return CheckField(VT_LEADERS); }
};

struct TextAnnotationBuilder {
  typedef TextAnnotation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotation::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotation::VT_MINORVERSION, minorVersion, 0);
  }
  void add_document(flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlock> document) {
    fbb_.AddOffset(TextAnnotation::VT_DOCUMENT, document);
  }
  void add_frame(flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationFrame> frame) {
    fbb_.AddOffset(TextAnnotation::VT_FRAME, frame);
  }
  void add_leaders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>>> leaders) {
    fbb_.AddOffset(TextAnnotation::VT_LEADERS, leaders);
  }
  explicit TextAnnotationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextAnnotationBuilder &operator=(const TextAnnotationBuilder &);
  flatbuffers::Offset<TextAnnotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextAnnotation>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextAnnotation> CreateTextAnnotation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlock> document = 0,
    flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationFrame> frame = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>>> leaders = 0) {
  TextAnnotationBuilder builder_(_fbb);
  builder_.add_leaders(leaders);
  builder_.add_frame(frame);
  builder_.add_document(document);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<TextAnnotation> CreateTextAnnotationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationTextBlock> document = 0,
    flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationFrame> frame = 0,
    const std::vector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>> *leaders = nullptr) {
  auto leaders__ = leaders ? _fbb.CreateVector<flatbuffers::Offset<BentleyM0200::Dgn::FB::AnnotationLeader>>(*leaders) : 0;
  return BentleyM0200::Dgn::FB::CreateTextAnnotation(
      _fbb,
      majorVersion,
      minorVersion,
      document,
      frame,
      leaders__);
}

struct TextAnnotationElement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextAnnotationElementBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_SEEDID = 8,
    VT_TRANSFORM = 10
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  int64_t seedId() const {
    return GetField<int64_t>(VT_SEEDID, 0);
  }
  const BentleyM0200::Dgn::FB::TextAnnotationElementTransform *transform() const {
    return GetStruct<const BentleyM0200::Dgn::FB::TextAnnotationElementTransform *>(VT_TRANSFORM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyField<int64_t>(verifier, VT_SEEDID) &&
           VerifyField<BentleyM0200::Dgn::FB::TextAnnotationElementTransform>(verifier, VT_TRANSFORM) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_seedId() const { return CheckField(VT_SEEDID); }
  bool has_transform() const { return CheckField(VT_TRANSFORM); }
};

struct TextAnnotationElementBuilder {
  typedef TextAnnotationElement Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotationElement::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(TextAnnotationElement::VT_MINORVERSION, minorVersion, 0);
  }
  void add_seedId(int64_t seedId) {
    fbb_.AddElement<int64_t>(TextAnnotationElement::VT_SEEDID, seedId, 0);
  }
  void add_transform(const BentleyM0200::Dgn::FB::TextAnnotationElementTransform *transform) {
    fbb_.AddStruct(TextAnnotationElement::VT_TRANSFORM, transform);
  }
  explicit TextAnnotationElementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextAnnotationElementBuilder &operator=(const TextAnnotationElementBuilder &);
  flatbuffers::Offset<TextAnnotationElement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextAnnotationElement>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextAnnotationElement> CreateTextAnnotationElement(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    int64_t seedId = 0,
    const BentleyM0200::Dgn::FB::TextAnnotationElementTransform *transform = 0) {
  TextAnnotationElementBuilder builder_(_fbb);
  builder_.add_seedId(seedId);
  builder_.add_transform(transform);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace Dgn
}  // namespace BentleyM0200

#endif  // FLATBUFFERS_GENERATED_ANNOTATIONS_BENTLEYM0200_DGN_FB_H_
