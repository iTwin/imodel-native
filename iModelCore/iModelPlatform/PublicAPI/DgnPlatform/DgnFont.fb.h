//---------------------------------------------------------------------------------------------
//  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
//  See LICENSE.md in the repository root for full copyright notice.
//---------------------------------------------------------------------------------------------
// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DGNFONT_BENTLEYM0200_DGN_FB_H_
#define FLATBUFFERS_GENERATED_DGNFONT_BENTLEYM0200_DGN_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace BentleyM0200 {
namespace Dgn {
namespace FB {

struct DgnRscFont;
struct DgnRscFontBuilder;

struct DgnRscFont FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DgnRscFontBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJORVERSION = 4,
    VT_MINORVERSION = 6,
    VT_HEADER = 8,
    VT_FRACTIONMAP = 10,
    VT_GLYPHDATA = 12,
    VT_GLYPHDATAOFFSETS = 14,
    VT_GLYPHHEADERS = 16
  };
  uint8_t majorVersion() const {
    return GetField<uint8_t>(VT_MAJORVERSION, 0);
  }
  uint8_t minorVersion() const {
    return GetField<uint8_t>(VT_MINORVERSION, 0);
  }
  const flatbuffers::Vector<uint8_t> *header() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HEADER);
  }
  const flatbuffers::Vector<uint8_t> *fractionMap() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FRACTIONMAP);
  }
  const flatbuffers::Vector<uint8_t> *glyphData() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_GLYPHDATA);
  }
  const flatbuffers::Vector<uint8_t> *glyphDataOffsets() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_GLYPHDATAOFFSETS);
  }
  const flatbuffers::Vector<uint8_t> *glyphHeaders() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_GLYPHHEADERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJORVERSION) &&
           VerifyField<uint8_t>(verifier, VT_MINORVERSION) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyVector(header()) &&
           VerifyOffset(verifier, VT_FRACTIONMAP) &&
           verifier.VerifyVector(fractionMap()) &&
           VerifyOffset(verifier, VT_GLYPHDATA) &&
           verifier.VerifyVector(glyphData()) &&
           VerifyOffset(verifier, VT_GLYPHDATAOFFSETS) &&
           verifier.VerifyVector(glyphDataOffsets()) &&
           VerifyOffset(verifier, VT_GLYPHHEADERS) &&
           verifier.VerifyVector(glyphHeaders()) &&
           verifier.EndTable();
  }
  bool has_majorVersion() const { return CheckField(VT_MAJORVERSION); }
  bool has_minorVersion() const { return CheckField(VT_MINORVERSION); }
  bool has_header() const { return CheckField(VT_HEADER); }
  bool has_fractionMap() const { return CheckField(VT_FRACTIONMAP); }
  bool has_glyphData() const { return CheckField(VT_GLYPHDATA); }
  bool has_glyphDataOffsets() const { return CheckField(VT_GLYPHDATAOFFSETS); }
  bool has_glyphHeaders() const { return CheckField(VT_GLYPHHEADERS); }
};

struct DgnRscFontBuilder {
  typedef DgnRscFont Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_majorVersion(uint8_t majorVersion) {
    fbb_.AddElement<uint8_t>(DgnRscFont::VT_MAJORVERSION, majorVersion, 0);
  }
  void add_minorVersion(uint8_t minorVersion) {
    fbb_.AddElement<uint8_t>(DgnRscFont::VT_MINORVERSION, minorVersion, 0);
  }
  void add_header(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> header) {
    fbb_.AddOffset(DgnRscFont::VT_HEADER, header);
  }
  void add_fractionMap(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fractionMap) {
    fbb_.AddOffset(DgnRscFont::VT_FRACTIONMAP, fractionMap);
  }
  void add_glyphData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphData) {
    fbb_.AddOffset(DgnRscFont::VT_GLYPHDATA, glyphData);
  }
  void add_glyphDataOffsets(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphDataOffsets) {
    fbb_.AddOffset(DgnRscFont::VT_GLYPHDATAOFFSETS, glyphDataOffsets);
  }
  void add_glyphHeaders(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphHeaders) {
    fbb_.AddOffset(DgnRscFont::VT_GLYPHHEADERS, glyphHeaders);
  }
  explicit DgnRscFontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DgnRscFontBuilder &operator=(const DgnRscFontBuilder &);
  flatbuffers::Offset<DgnRscFont> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DgnRscFont>(end);
    return o;
  }
};

inline flatbuffers::Offset<DgnRscFont> CreateDgnRscFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fractionMap = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphData = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphDataOffsets = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> glyphHeaders = 0) {
  DgnRscFontBuilder builder_(_fbb);
  builder_.add_glyphHeaders(glyphHeaders);
  builder_.add_glyphDataOffsets(glyphDataOffsets);
  builder_.add_glyphData(glyphData);
  builder_.add_fractionMap(fractionMap);
  builder_.add_header(header);
  builder_.add_minorVersion(minorVersion);
  builder_.add_majorVersion(majorVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<DgnRscFont> CreateDgnRscFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t majorVersion = 0,
    uint8_t minorVersion = 0,
    const std::vector<uint8_t> *header = nullptr,
    const std::vector<uint8_t> *fractionMap = nullptr,
    const std::vector<uint8_t> *glyphData = nullptr,
    const std::vector<uint8_t> *glyphDataOffsets = nullptr,
    const std::vector<uint8_t> *glyphHeaders = nullptr) {
  auto header__ = header ? _fbb.CreateVector<uint8_t>(*header) : 0;
  auto fractionMap__ = fractionMap ? _fbb.CreateVector<uint8_t>(*fractionMap) : 0;
  auto glyphData__ = glyphData ? _fbb.CreateVector<uint8_t>(*glyphData) : 0;
  auto glyphDataOffsets__ = glyphDataOffsets ? _fbb.CreateVector<uint8_t>(*glyphDataOffsets) : 0;
  auto glyphHeaders__ = glyphHeaders ? _fbb.CreateVector<uint8_t>(*glyphHeaders) : 0;
  return BentleyM0200::Dgn::FB::CreateDgnRscFont(
      _fbb,
      majorVersion,
      minorVersion,
      header__,
      fractionMap__,
      glyphData__,
      glyphDataOffsets__,
      glyphHeaders__);
}

}  // namespace FB
}  // namespace Dgn
}  // namespace BentleyM0200

#endif  // FLATBUFFERS_GENERATED_DGNFONT_BENTLEYM0200_DGN_FB_H_
