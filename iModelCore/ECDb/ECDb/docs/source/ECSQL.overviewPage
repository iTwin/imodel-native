/*--------------------------------------------------------------------------------------+
|
|     $Source: ECDb/docs/source/ECSQL.overviewPage $
|
|  $Copyright: (c) 2014 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

    /**
    @page ECSQLOverview ECSQL

    @tableofcontents

    @b ECSQL is a text-based command language for CRUD (create, read, update, delete) operations against ECInstances in an EC repository.
    ECSQL is based on the SQL-99 standard which supports concepts also used by @ref ECObjectsGroup. Amongst other things, this
    includes boolean and date time data types, user-defined data types, collection types, and polymorphism.

    @image html ecsql_vs_sql.png

    The key difference between ECSQL and SQL is that <b>ECSQL targets the logical schema</b> (i.e. the BentleyApi::ECN::ECSchema) of a repository
    and not the underlying database's persistence schema.
    ECSQL abstracts away the details of mapping an ECClass to a database table and
    @ref BentleyApi::ECN::ECProperty "ECProperties" to database columns. Clients specify ECSQL against an ECClass
    and the @ref ECDbOverview "ECDb API" figures out how the ECSQL statement translates to a
    SQL statement in the underlying @ref ECDbFile "ECDb file".

    @section ECSqlDocAndSamples ECSQL Documentation and Examples
    A comprehensive explanation of ECSQL as implemented by @ref ECDbOverview "ECDb" can be found here:
    <a href="files/ecdb/ecsql_overview.pdf" target="_blank">ECSQL Overview (PDF)</a>

    @ref ECSQLSamples provides ECSQL @b example statements to illustrate the various features of ECSQL.

    @section ECSqlECInstanceIdDetails ECInstanceId
    The ECInstanceId is the unique identifier for an ECInstance. In @ref ECSQLOverview you use the
    reserved token @c %ECInstanceId to refer to the ECInstanceId of an instance,
    e.g. <c>SELECT * FROM myschema.Foo WHERE <b>ECInstanceId</b> = 123</c>.

    @section ECSQLGetECClassIdDetails Function GetECClassId
    The ECSQL function <c><b>GetECClassId()</b></c> returns the ECClassId of the ECClass on which
    the function was called. The BentleyApi::ECN::ECClassId is a numeric id that uniquely identifies an ECClass in the @ref ECDbFile.

    Example: <c>SELECT ECInstanceId, <b>GetECClassId()</b> FROM myschema.Foo</c>

    @section ECSQLSourceTargetConstraintDetails ECRelationship's Source and Target Constraints
    When referring to an ECRelationshipClass in an ECSQL statement, @c %SourceECInstanceId and @c %SourceECClassId refer
    to the %ECInstanceId and %ECClassId of the source ECInstance of the relationship. Likewise @c %TargetECInstanceId
    and @c %TargetECClassId refer to the %ECInstanceId and %ECClassId of the target ECInstance of the relationship.

    Example: <c>SELECT * FROM myschema.FooHasGoo<br>
    WHERE <b>SourceECInstanceId</b> = 123 AND <b>SourceECClassId</b>=1003 AND<br>
    <b>TargetECInstanceId</b> = 4432 AND <b>TargetECClassId</b>=3120</c>

    %SourceECInstanceId and %TargetECInstanceId are of the same type as @ref ECSqlECInstanceIdDetails. %SourceECClassId and %TargetECClassId
    are of the same type as the @ref ECSQLGetECClassIdDetails "GetECClassId function".

    @section ECSQLBindingParameterTokens Binding parameters ? and :name
    In an ECSQL statement @c ? or <c>:name</c> are used as placeholder for parameters that are bound to the statement via the statements binding API (see ECSqlStatement).
    @c ? refers to an unnamed parameter and <c>:name</c> refers to a named parameter.
    Examples:
    - <c>SELECT ECInstanceId FROM myschema.Foo WHERE Name = <b>?</b></c>
    - <c>SELECT ECInstanceId FROM myschema.Foo WHERE Name = <b>:fooname</b></c>


    @see @ref WorkingWithECDb

    */


    /**
    @page ECSQLSamples ECSQL Examples

    @tableofcontents

    This section provides examples of @ref ECSQLOverview to illustrate its most important features. For details
    and explanations of ECSQL see @ref ECSQLOverview "ECSQL Overview".

    All examples refer to a sample ECSchema which can be found here:
    <a href="files/ecdb/StartupCompany.01.00.ecschema.xml" target="_blank">StartupCompany.01.00.ecschema.xml</a>

    @section ECSQLSamplesBasics Basics

    SELECT AssetID FROM stco.Hardware
    WHERE HasWarranty = True AND
    WarrantyExpiryDate DATE '2014-01-01'

    SELECT count(*) FROM stco.Hardware
    WHERE HasWarranty = True AND
    WarrantyExpiryDate < DATE '2014-01-01'

    SELECT AssetID, Length * Breadth AS Area FROM stco.Desk
    WHERE Type = ?


    @section ECSQLSamplesStructs ECStructs

    SELECT FirstName, LastName, Address FROM stco.Employee

    SELECT FirstName, LastName, Address.Street, Address.City, Address.Zip FROM stco.Employee


    @section ECSQLSamplesArrays ECArrays

    SELECT EmployeeId, Certifications FROM stco.Employee


    @section ECSQLSamplesECInstanceIdECClassId ECInstanceId and ECClassId
    See section @ref ECSqlECInstanceIdDetails and @ref ECSQLGetECClassIdDetails for the
    background on ECInstanceId and ECClassId.

    SELECT ECInstanceId FROM stco.Employee

    SELECT FirstName, LastName FROM stco.Employee
    WHERE ECInstanceId IN (123, 124, 125)

    SELECT ECInstanceId, GetECClassId() FROM stco.Employee

    SELECT e.ECInstanceId, e.GetECClassId(), c.ECInstanceId, c.GetECClassId()
    FROM stco.Employee e
    JOIN stco.Company c USING stco.CompanyHasEmployees
    WHERE c.Name = ?

    Specifying the ECInstanceId in an INSERT statement is not allowed as ECDb automatically generates the ECInstanceId implicitly.
    For the exceptional case of creating an empty instance, i.e. where only the ECInstanceId is generated, and all properties are set
    to NULL, the following ECSQL has to be used:

    INSERT INTO stco.Employee (ECInstanceId) VALUES (NULL)

    This is in particular the only way to create instances for ECClasses that do not have any ECProperties defined.
    This cannot be used for ECRelationships as empty relationship instances would violate against the implicit NOT NULL
    constraints of the system properties SourceECInstanceId and TargetECInstanceId.

    @section ECSQLSamplesJoins Joins
    @subsection ECSQLSamplesJoinsConvenienceSyntax Convenience syntax JOIN USING
    - Allows for more concise ECSQL
    - Is a deviation from standard SQL
    - Cannot be used in some special scenarios (e.g. multiple join clauses with same ECClass). In that
    case you can use the standard syntax (see below)


    ECSQL|Description
    -----|-----------
    <c>SELECT h.AssetID FROM stco.Hardware h<br>JOIN stco.Employee e USING stco.HardwareUsedByEmployee<br>WHERE e.FirstName = 'John' AND e.Lastname = 'Smith'</c>|Determines all hardware items that employee John Smith uses
    <c>SELECT manager.FirstName FROM stco.Employee manager<br>JOIN stco.Employee report USING stco.ManagerReports <b>FORWARD</b><br>WHERE report.FirstName = ? AND report.LastName = ?</c>|Determines the manager for a given employee
    <c>SELECT report.FirstName FROM stco.Employee report<br>JOIN stco.Employee manager USING stco.ManagerReports <b>REVERSE</b><br>WHERE manager.FirstName = ? AND manager.LastName = ?</c>|Determines all direct reports for a given manager

    @note The last two ECSQL examples show how to use the ECSQL keywords @c @b FORWARD and @c @b REVERSE for cases where it is ambiguous
    whether the FROM or JOIN class is the source or target end of an ECN::ECRelationshipClass. In that example the manager is the source
    and the report the target constraint of the relationship @c ManagerReports
    (see <a href="files/ecdb/StartupCompany.01.00.ecschema.xml" target="_blank">StartupCompany.01.00.ecschema.xml</a>).


    @subsection ECSQLSamplesJoinsStandardSyntax Standard syntax
    @b @c SourceECInstanceId, @b @c SourceECClassId, @b @c TargetECInstanceId, and @b @c TargetECClassId are
    special tokens in ECSQL available for every @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClass".
    See also @ref ECSQLSourceTargetConstraintDetails.

    #####JOIN ON Style

    SELECT h.AssetID FROM stco.Hardware h
    INNER JOIN stco.HardwareUsedByEmployee r ON h.ECInstanceId = r.TargetECInstanceId AND
    h.GetECClassId() = r.TargetECClassId
    INNER JOIN stco.Employee e ON r.SourceECInstanceId = e.ECInstanceId AND
    r.SourceECClassId = e.GetECClassId()
    WHERE e.FirstName = 'John' AND e.Lastname = 'Smith'


    #####Theta Style

    SELECT h.AssetID FROM stco.Hardware h, stco.HardwareUsedByEmployee r, stco.Employee e
    WHERE h.ECInstanceId = r.TargetECInstanceId AND
    h.GetECClassId() = r.TargetECClassId
    r.SourceECInstanceId = e.ECInstanceId AND
    r.SourceECClassId = e.GetECClassId() AND
    e.FirstName = 'John' AND e.Lastname = 'Smith'


    @note Both examples <b>as well as the first from ECSQLSamplesJoinsConvenienceSyntax</b> are semantically equivalent.

    @section ECSQLSamplesPolymorphism Polymorphism
    - In ECSQL classes are treated polymorphically <b>by default</b>.
    - Use the keyword <c><b>ONLY</b></c> to ignore subclasses of an @ref BentleyApi::ECN::ECClass "ECClass".

    @image html ecsqlsampleschema_classhierarchy.png

    To emphasize the point of the examples, the diagram above visualizes the class hierarchy of the classes from the
    <a href="files/ecdb/StartupCompany.01.00.ecschema.xml" target="_blank">ECSQL Example ECSchema</a> used in the examples.

    ECSQL|Description
    -----|-----------
    <c>SELECT AssetID FROM stco.Asset</c>|Polymorphic query: Selects all assets including all subclasses of Asset
    <c>SELECT AssetID FROM stco.Computer</c>|Polymorphic query: Selects all computers including its subclasses, i.e. selects computers and laptops
    <c>SELECT AssetID FROM <b>ONLY</b> stco.Computer</c>|Non-polymorphic query: Selects all computers excluding its subclasses, i.e. selects computers, but no laptops
    <c>SELECT AssetID FROM stco.Desk</c>|Selects all desks and would include its subclasses, but it has none.
    <c>SELECT AssetID FROM <b>ONLY</b> stco.Desk</c>|@c ONLY does not have any effect here as @c Desk does not have any subclasses.

    @see @ref WorkingWithECDb

    */
