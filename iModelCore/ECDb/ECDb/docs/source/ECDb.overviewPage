/*--------------------------------------------------------------------------------------+
|
|     $Source: ECDb/docs/source/ECDb.overviewPage $
|
|  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

    //****** API doc main page *******
    //! @namespace BentleyApi::BeSQLite::EC Classes used to access an @ref ECDbFile.

    //! @addtogroup ECDbGroup
    //! ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file" (see @ref ECDbOverview).


    //****** ECDbOverview *******
    /**
    @page ECDbOverview ECDb Overview

    @tableofcontents

    @b %ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file".

    @section ECDbECIntro EC - Bentley's Information Modeling System
    %EC is Bentley's information modeling system. It is the self-describing business data as it can be found in i-models, DgnDb or 
    @ref ECDbFile "ECDb files" (though it is not limited to those).
    It provides standard metadata that allows <em>%EC aware</em> apps (like Navigator Mobile) to understand the business data, 
    including appropriate display labels, engineering units, UI hints, etc.
    An @ref BentleyApi::ECN::ECSchema "ECSchema" defines the EC data model. You can think of it as a namespace 
    for a set of ECClasses. ECSchemas are made up of @ref BentleyApi::ECN::ECClass "ECClasses" which in turn 
    consist of @ref BentleyApi::ECN::ECProperty "ECProperties". Relationships among ECClasses are described by 
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses". An analogy to SQL is often helpful. 
    ECClasses are like tables. ECProperties are like columns. ECRelationshipClasses act like <em>link tables</em>.
    ECProperties can be primitive, but can also be @e arrays or @e structs (think of C++ array and struct concepts). 
    ECInstances (instances of objects) are like @e rows.

    On the data side @b %ECInstances represent the business objects of a given @ref BentleyApi::ECN::ECClass "ECClass", 
    i.e. an %ECInstance is an instantiation of an ECClass.

    See @ref ECObjectsGroup for more information about an ECSchemas and ECInstances.

    @section ECDbBigPicture ECDb API Big Picture
    The @ref ECDbGroup "ECDb API" is a SQL based database API like ODBC, ADO, ADO.NET, or the SQLite API and other 
    vendor specific database APIs. They all share the following characteristic workflow:
    - Open a connection to the repository
    - Create a SQL statement
    - Execute the SQL statement
    - Iterate over the results and retrieve the data (in case of SELECT statements)
    - Close the connection

    In the @ref ECDbGroup "ECDb API" the role of SQL is taken by @ref ECSQLOverview "ECSQL".

    Putting it in a catchy way: If you know a database API you know %ECDb by 90% and if you know SQL you know 90% of ECSQL.

    @section ECDbCoreFeatures ECDb Core Features
    Core features:
    - the <b>%EC CRUD</b> API for performing Create, Read, Update, Delete operations on %ECInstances in an 
    @ref ECDbFile "ECDb file" (see @ref ECSqlStatementOverview)
    - <b>ECSchema management</b> capabilities (e.g. importing ECSchemas into an @ref ECDbFile "ECDb file", 
    retrieving ECSchema entities from an @ref ECDbFile "ECDb file" (see BentleyApi::BeSQLite::EC::ECDbSchemaManager))
    - Internally maps %EC data to SQLite tables and columns

    @section ECDbMapping ECSQL hides away the database mapping of EC data
    A key feature of @ref ECSQLOverview "ECSQL" is that it <b>targets the
    logical schema, i.e. the BentleyApi::ECN::ECSchema, of the repository and not the schema of the underlying database.</b>
    @ref ECDbGroup "ECDb" can therefore encapsulate all internal details of how the %EC content gets actually mapped to
    tables and columns in the @ref ECDbFile "ECDb file".

    @image html ecdb_encapsulation.png

    Clients of the @ref ECDbGroup "ECDb API" therefore don't need to be aware of how the %EC data is
    stored in the @ref ECDbFile "ECDb file". For example, clients neither need to know in which table
    instances of a given @ref BentleyApi::ECN::ECClass "ECClass" nor in which columns the given
    @ref BentleyApi::ECN::ECProperty "ECProperties" of the ECClass are stored. Especially 
    @ref BentleyApi::ECN::ECProperty "ECProperties" of non-primitive type (e.g. arrays, structs)
    do not simply map to a single column, but can map to multiple columns or even to another table.
    <b>Clients just author an ECSQL statement against the ECSchema of the repository.</b>

    The section @ref ECDbSchemaMappingCustomization describes how clients can customize how ECSchemas
    are mapped to the ECDb database schema.

    @section ECDbApiEntryPoints ECDb API entry points
    The main entry points of the %ECDb API are:
    - The BentleyApi::BeSQLite::EC::ECDb class. It subclasses BentleyApi::BeSQLite::Db which in turn is 
    the lowest-level wrapper around the SQLite API.
    - BentleyApi::BeSQLite::EC::ECSqlStatement for the %EC CRUD functionality
    
    @section ECDbApiFurtherReading Further Reading
    - @ref ECDbGroup "API reference"
    - @ref WorkingWithECDb : Explains concepts of the %ECDb API as well as details and <em>How To's</em> 
    for using the %ECDb API.
    - @ref ECSqlStatementOverview
    - @ref ECSQLOverview
    - @ref ECSQLSamples
    - @ref ECDbCreatingECDbFromScratch
    - @ref ECDbCodeSamples "Code examples": Illustrates typical workflows when working with business 
    data in the @ref ECDbFile "ECDb file".
    - @ref ECDbSchemaMappingCustomization

    */

    //****** WorkingWithECDb *******

    /**
    @page WorkingWithECDb Working with ECDb

    This page provides various details and hints about the %ECDb API and how to work with it.

    @li @subpage ECDbFile
    @li @subpage ECSQLOverview
    @li @subpage ECSQLSamples
    @li @subpage ECSqlStatementOverview
    @li @subpage ECDbTransactions
    @li @subpage ECDbCreatingECDbFromScratch
    @li @subpage ECDbCodeSamples
    @li @subpage ECDbSchemaMappingCustomization

    @see @ref ECDbOverview
    */

    /**
    @page ECDbFile ECDb File
    Throughout the @ref ECDbOverview "ECDb documentation", we refer to <b>%ECDb files</b>.
    An %ECDb file is a SQLite database that is set up to store %EC data (Information Modeling content). It contains
    - well-defined tables to store @ref BentleyApi::ECN::ECSchema "ECSchemas", @ref BentleyApi::ECN::ECClass "ECClasses",
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationships", @ref BentleyApi::ECN::ECProperty "ECProperties", etc.
    - well-defined tables to store the ECInstance data.

    The set of those well-defined tables is called the <b>%ECDb profile</b> of a SQLite database.

    The @ref ECDbOverview "ECDb API" is used to access the data in the %ECDb file.

    ### %ECDb files versus DgnDb files
    The @e DgnDb format includes the %ECDb profile, so often the <em>%ECDb file</em> you are using will actually be
    a <em>DgnDb file</em>. In short, every <em>DgnDb file</em> is an <em>%ECDb file</em>, but not
    every <em>%ECDb file</em> is a <em>DgnDb file</em>.

    @image html ecdb_vs_dgndb_profiles.png

    In particular, %ECDb files cannot store DGN graphics. This can only be done in a DgnDb file.
    So %ECDb files are ideal for applications that work with EC business data and without DGN content.
    The %ECDb file format is slimmer than the DgnDb file format, and you can work against the @ref ECDbOverview "ECDb API" directly.
    The DGN related technology stack is not needed in that case.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbTransactions ECDb and Transactions
    In order to be as efficient and performant as possible ECDb's data modifying operations don't do any 
    internal or implicit transaction management. So if you call a data modifying method (e.g. via 
    @ref BentleyApi::BeSQLite::EC::ECSqlStatement "ECSqlStatement" or 
    @ref BentleyApi::BeSQLite::EC::ECDbSchemaManager "ECDbSchemaManager"), ECDb does not internally 
    create a transaction for that call. <b>ECDb therefore intentionally does not grant 
    atomicity for its data modifying operations</b> (Exceptions to this rule are documented on the respective method).
    This implies, in particular, that ECDb - like SQLite - does not grant statement-level atomicity.

    What operations a transaction should encompass is mainly driven by the application's workflows anyways. So you should 
    define the transaction boundaries in your workflows and wrap the respective ECDb calls in a transaction at your discretion.

    By default, each connection to an @ref ECDbFile has an active default transaction as SQLite always needs an 
    active transaction when accessing the data. (See @ref BentleyApi::BeSQLite::StartDefaultTransaction "StartDefaultTransaction"
    if you think you need to deviate from the default.)

    You commit the transaction via @ref BentleyApi::BeSQLite::Db::SaveChanges "ECDb::SaveChanges" and
    roll it back via @ref BentleyApi::BeSQLite::Db::AbandonChanges "ECDb::AbandonChanges".
    The default transaction will be automatically restarted after having committed it or rolled it back.

    See the @ref BentleyApi::BeSQLite::Db "BeSQLite API" for details about transactions.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbSchemaMappingCustomization Customizing the ECDb schema mapping
    
    %ECDb applies a default mapping when importing an @ref BentleyApi::ECN::ECSchema "ECSchema" into the @ref ECDbFile "ECDb file". 
    However, %ECDb allows ECSchema designers to modify the default mapping by decorating the ECSchema 
    with dedicated <b>%ECDb hint custom attributes</b>, e.g. @b ECDbClassHint or @b ECDbPropertyHint. 

    See also <a href="files/ecdb/Bentley_Standard_CustomAttributes.ecschema.xml" target="_blank">Bentley_Standard_CustomAttributes.ecschema.xml</a>
    for how all available <b>%ECDb hint custom attributes</b> are defined.

    @section ECDbDefaultMappingRules ECDb Default Mapping Rules
    - Type of ECClasses that <b>are not mapped</b>.
        - CustomAttribute ECClasses
        - Non-domain ECClasses
        - Relationship ECClasses with no source/target constraints
    - Type of ECClasses that are mapped using the @b TableForThisClass strategy by default.
        - Domain ECClasses
        - Struct ECClasses
    - ECRelationshipClasses are either mapped to the table of one of the constraint ends (aka foreign key mapping or EndTable mapping)
    or to a link table.
        - ECRelationshipClasses with cardinality 1:1 or 0:N
            - If source or target constraints end-up in a single table on each side then @b EndTable mapping will be used.
            - If source or target constraints end-up in more then one table on any side then @b LinkTable mapping will be used.
            - If relationship has at least one ECProperty it will be mapped using @b LinkTable mapping
            - <em>ECDbRelationshipClassHint.PreferredDirection</em> can be use to specify which direction to optimize. This effect default indexes.
        - Relationship with cardinality N:N is always mapped using the @b LinkTable mapping.
        - A default index is created on the key columns in accordance with the cardinality. 
        - <em>ECDbRelationshipClassHint.AllowDuplicateRelationships</em> is set to false by default.
        - No referential integrity constraints are added. (See @ref ECDbRelationshipConstraintHintDescription for how to overwrite this)

    @section ECDbSchemaHintDescription Mapping Hints for ECSchemas
    
    Description of the ECDbSchemaHint properties:
    - TablePrefix: Specifies a prefix for generated tables. If not specified, the namespace prefix of the ECSchema is used. 
    The prefix should be 2-4 letters long followed by an underbar, e.g. plnt_. This setting will affect all tables that are created 
    for this ECSchema unless it is overwritten on the ECClass level via the @ref ECDbClassHintDescription "ECDbClassHint" property @b TableName.
    - DefaultPropertyStrategy (optional): Possible values: DoNotMap. <b>Not supported yet</b>
    - DefaultClassMapStrategy (optional): Possible values:
        - DoNotMap
        - TableForThisClass

    ####Example

        <ECCustomAttributes>
            <ECDbSchemaHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                <TablePrefix>sp</TablePrefix>
                <DefaultClassMapStrategy>DoNotMap</DefaultClassMapStrategy>
            </ECDbSchemaHint>
        </ECCustomAttributes>​

    @section ECDbClassHintDescription Mapping Hints for ECClasses
    
    (ECDb will only look for it in local attributes on the ECClass).
    
    Description of the ECDbClassHint properties:

    - <b>MapStrategy</b> (optional): Specifies how the ECClass is mapped to table(s). Default value is 'TableForThisClass'.    
        - <CODE>DoNotMap</CODE>: The class is not mapped to any database table. This does not affect subclasses of this ECClass.
        - <CODE>DoNotMapHierarchy</CODE>: The whole hierarchy of classes is not mapped.
        - <CODE>TableForThisClass</CODE>: This class are mapped to its own table. This does not affect subclasses of this ECClass.
        - <CODE>TablePerClass</CODE>: This class and all its subclasses are mapped to its own table.
        - <CODE>TablePerHierarchy</CODE>: This class and all its subclasses are mapped to a @em single table.
        - <CODE>MapToExistingTable</CODE>: This class is mapped to an existing table. The existing table must be specified in the @b TableName ECProperty. 
        The table must have primary key column of type INTEGER. This does not affect subclasses of this ECClass.
        - <CODE>SharedTableForThisClass</CODE>: Allows multiple classes which are not inherited from each other to reuse the same table.
        The table is created by ECDb and its name @b must be specified via the ECProperty @b TableName. This does not affect subclasses of this ECClass.
        - The above values can be combined with these options (use the "|" operator).
            - <CODE>WithReuseColumns</CODE>: This option tells ECDb that different ECProperties (from different ECClasses) are mapped to the same column.
            This can reduce the number of columns (and cells with NULL values) in the table significantly.
            This can be applied to @b TablePerHierarchy or @b SharedTableForThisClass. 
            - <CODE>WithReadonly</CODE>: This will mark the table as readonly. Can only be used with @b MapToExistingTable.
            - <CODE>WithExclusivelyStoredInThisTable</CODE> (not to combine with another MapStrategy): Apply this on a class where a base class specified WithReuseColumns. 
            It will exclude this ECClass' ECProperties from the colum reuse and therefore create separate columns for its 
            ECProperties.
    - <b>TableName</b> (optional, required for MapStrategies @em MapToExistingTable and @em SharedTableForThisClass): 
    Specify a table name for this class (instead of letting ECDb choose a name)
    - <b>Indexes</b> (optional) : List of indexes to be created for properties of this class. 
    It can be use to improve query performance or to add a unique constraint.
        - <b>Name</b> (optional): Index name. Follow EC identifier naming rules. The name must unique in database.
        - <b>IsUnique</b> (optional): If true, the index will be a unique index. Default value is @em false.
        - <b>Properties</b>: List of Names of properties that will be part of index. Only primitive properties can be used. The properties must exist
        in the ECClass or in the base classes.
        - <b>Where</b> (optional): Creates a partial index. Right now only the special value @b ECDB_NOTNULL is supported which
        creates a partial index ignoring any NULL values.
    - <b>MapToExistingTable</b> (optional, deprecated): Use MapStrategy <em>MapToExistingTable</em> instead.
    - <b>ReplaceEmptyTableWithEmptyView</b> (optional, deprecated) Do not use this anymore

    ####Examples

    #### MapStrategy DoNotMap

        <ECClass typeName="AClassThatDoesNotGetMappedToDb" isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <MapStrategy>DoNotMap</MapStrategy>
                </ECDbClassHint>
            </ECCustomAttributes>
            <ECProperty propertyName="stringFoo" typeName="string" />
        </ECClass>

    #### MapStrategy  TablePerHierarchy

        <ECClass typeName="Foo" isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <MapStrategy>TablePerHierarchy</MapStrategy>
                </ECDbClassHint>
            </ECCustomAttributes>
        ...
        </ECClass>
    
    #### Creating database indexes on ECProperties

        <ECClass typeName="Person" isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <Indexes>
                        <ECDbIndex>
                            <Name>Foo_Name_ix</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>FirstName</string>
                                <string>LastName</string>
                            </Properties>
                        </ECDbIndex>
                        <ECDbIndex>
                            <Name>Foo_Birthday_ix</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>Birthday</string>
                            </Properties>
                            <Where>ECDB_NOTNULL</Where>
                        </ECDbIndex>
                    </Indexes>
                </ECDbClassHint>
            </ECCustomAttributes>
            <ECProperty propertyName="FirstName" typeName="string"/>
            <ECProperty propertyName="LastName" typeName="string"/>
            <ECProperty propertyName="Birthday" typeName="dateTime"/>
            ...
        </ECClass>
    
    @section ECDbPropertyHintDescription Mapping Hints for ECProperty
    
    (ECDb will only look for it in local attributes on the ECProperty)
    
    Description of the ECDbPropertyHint properties:
    
    - <b>ColumnName</b> (optional): Specifies the column name. If not specified, the ECProperty name is used. The column name must
    follow EC naming rules.
    - <b>IsNullable</b> (optional): If true, values must not be NULL. Might not be honoured when multiple ECClasses are stored in a single table or depending on MapStrategy.
    - <b>IsUnique</b> (optional): If true, values must be unique for this ECProperty.
    - <b>Collate</b> (optional): Specifies the string comparison mode for this property. Possible values:
        - <CODE>BINARY</CODE>: (default): bit to bit matching.
        - <CODE>NOCASE</CODE>: The same as binary, except the 26 upper case characters of ASCII are folded to their lower case equivalents before the comparison is performed. Note that is folds only ASCII not full UTF.
        - <CODE>RTRIM</CODE>: The same as binary, except that trailing space characters are ignored.​
    - <b>MapStrategy</b> (optional, not supported yet)
    - <b>Precision</b> (optional, not supported yet): Specifies precision for ECProperties of type double. Possible values: 0-16.
    
    ###Examples
   
    #### Property custom name

        <ECProperty propertyName="Id" typeName="int">
            <ECCustomAttributes>
                <ECDbPropertyHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <ColumnName>assetid</ColumnName>
                </ECDbPropertyHint>
            </ECCustomAttributes>
        </ECProperty>
    
    #### Case-insensitive Collation

        <ECProperty propertyName="Name" typeName="string">
            <ECCustomAttributes>
                <ECDbPropertyHint xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <Collate>NoCase</Collate> 
                </ECDbPropertyHint>
            </ECCustomAttributes>
        </ECProperty>
    
    @section ECDbRelationshipClassHintDescription Mapping Hints for ECRelationshipClasses
    (ECDb will only look for it in local attributes on the ECRelationshipClass) 
    
    Description of the ECDbRelationshipClassHint properties:

    - <b>PreferredDirection</b>: Specify preferred direction in N:N and 1:1 relation will be used more often. It is use as hint to optimize querying. Possible values are as following
        - <CODE>SourceToTarget</CODE> : Optimize for source to target traversal. 
        - <CODE>Bidirectional</CODE> : Optimize for source to target and target to source traversal. 
        - <CODE>TargetToSource</CODE> : Optimize for target to source traversal.
    - <b>AllowDuplicateRelationships</b>: By default relationships need to be unique. If true, duplicate values are allowed
    The effect mapping as well. If duplication is allowed the relationship will always be mapped as LinkTable (will have its own table instead of using EndTable which use Foriegn Key).
        - 1:N will be mapped as LinkTable instead of EndTable if duplication is allowed.
    - <b>SourceECIdColumn</b> (deprecated): Use <em>ECDbRelationshipConstraintHint.ECIdColumn</em> instead.
    - <b>SourceECClassIdColumn</b> (deprecated): Use <em>ECDbRelationshipConstraintHint.ECClassIdColumn</em> instead.
    - <b>TargetECIdColumn</b> (deprecated): Use <em>ECDbRelationshipConstraintHint.ECIdColumn</em> instead.
    - <b>TargetECClassIdColumn</b> (deprecated): Use <em>ECDbRelationshipConstraintHint.ECClassIdColumn</em> instead.
    
    ####Examples
        
        <ECRelationshipClass typeName="EmployeeHardware" isDomainClass="True" strength="referencing" strengthDirection="forward">
            <ECCustomAttributes>
                <ECDbRelationshipClassHint  xmlns="Bentley_Standard_CustomAttributes.01.11">
                    <PreferredDirection>TargetToSource</PreferredDirection>
                    <AllowDuplicateRelationships>True</AllowDuplicateRelationships>
                </ECDbRelationshipClassHint>
            </ECCustomAttributes>
            <BaseClass>AssetRelationshipsBase</BaseClass>
            <BaseClass>EmployeeRelationshipsBase</BaseClass>
            <Source cardinality="(0,N)" roleLabel="Employee using hardware" polymorphic="True">
                <Class class="Employee" />
            </Source>
            <Target cardinality="(0,N)" roleLabel="Hardware assigned to employee" polymorphic="True">
                <Class class="Hardware" />
            </Target>
        </ECRelationshipClass>
    
    @section ECDbRelationshipConstraintHintDescription Mapping Hints for constraints of an ECRelationshipClass
    It allows to customize key columns, index and integrity constraints.

    - <b>ECClassIdColumn</b>: Optional. Allow user to override the default name generated by %ECDb for SourceECClassId or TargetECClassId column depending on which constraint it was applied to.
    - <b>ECIdColumn</b>: Optional. Allow user to override the default name generated by %ECDbfor SourceECInstanceId or TargetECInstanceId column depending on which constraint it was applied to.
    - <b>GenerateDefaultIndex</b>: Optional and default value is 'True'. If 'False' %ECDb will not generate database index for the this relationship.
    - <b>ForeignKeyConstraint</b>: Optional. It allow to create referential constraint at database level for the given relationship.
        - <b>EnforceReferentialIntegrityCheck</b>: This enable referential integrity. Default is 'false'.
            - <b>OnDeleteAction</b>: Optional and only used if <code>EnforceReferentialIntegrityCheck=True</code>. Possible values are <code>NoAction</code> (default) and <code>Cascade</code> which delete child rows when parent row is deleted.
            - <b>OnUpdateAction</b>: Optional and only used if <code>EnforceReferentialIntegrityCheck=True</code>. Possible values are <code>NoAction</code> (default) and <code>Cascade</code> which update child foreign key when parent primary key is updated.
            - <b>MatchType</b>: Optional default value is <code>Full</code>. This is reserved for future use.
    
    ####Examples
        
        <ECRelationshipClass typeName="SourceToTarget_Embedding" isDomainClass="True" strength="embedding" strengthDirection="forward">
            <Source cardinality="(1,1)" polymorphic="True">
                <ECCustomAttributes>
                    <ECDbRelationshipConstraintHint xmlns="Bentley_Standard_CustomAttributes.01.10">
                        <ECClassIdColumn>SourceEClassId</ECClassIdColumn>
                        <ECIdColumn>SourceECInstanceId</ECIdColumn>
                        <GenerateDefaultIndex>False</GenerateDefaultIndex>
                    </ECDbRelationshipConstraintHint>
                </ECCustomAttributes> 
                <Class class="SourceBase" />
            </Source>
            <Target cardinality="(1,N)" polymorphic="True">
                <ECCustomAttributes>
                    <ECDbRelationshipConstraintHint xmlns="Bentley_Standard_CustomAttributes.01.10">
                        <ECClassIdColumn>TargetEClassId</ECClassIdColumn>
                        <ECIdColumn>TargetECInstanceId</ECIdColumn>
                        <GenerateDefaultIndex>False</GenerateDefaultIndex>
                        <ForeignKeyConstraint>
                            <EnforceReferentialIntegrityCheck>True</EnforceReferentialIntegrityCheck>
                            <OnDeleteAction>Cascade</OnDeleteAction>
                            <OnUpdateAction>NoAction</OnUpdateAction>
                            <MatchType>Full</MatchType>
                        </ForeignKeyConstraint>
                    </ECDbRelationshipConstraintHint>
                </ECCustomAttributes>
                <Class class="TargetBase" />
            </Target>
        </ECRelationshipClass>

    @see @ref ECDbOverview
    */