/*--------------------------------------------------------------------------------------+
|
|     $Source: ECDb/docs/source/ECDb.overviewPage $
|
|  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

    //****** API doc main page *******
    //! @namespace BentleyApi::BeSQLite::EC Classes used to access an @ref ECDbFile.

    //! @addtogroup ECDbGroup
    //! ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file" (see @ref ECDbOverview).


    //****** ECDbOverview *******
    /**
    @page ECDbOverview ECDb Overview

    @tableofcontents

    @b %ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file".

    @section ECDbECIntro EC - Bentley's Information Modeling System
    %EC is Bentley's information modeling system. It is the self-describing business data as it can be found in i-models, DgnDb or 
    @ref ECDbFile "ECDb files" (though it is not limited to those).
    It provides standard metadata that allows <em>%EC aware</em> apps (like Navigator Mobile) to understand the business data, 
    including appropriate display labels, engineering units, UI hints, etc.
    An @ref BentleyApi::ECN::ECSchema "ECSchema" defines the EC data model. You can think of it as a namespace 
    for a set of ECClasses. ECSchemas are made up of @ref BentleyApi::ECN::ECClass "ECClasses" which in turn 
    consist of @ref BentleyApi::ECN::ECProperty "ECProperties". Relationships among ECClasses are described by 
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses". An analogy to SQL is often helpful. 
    ECClasses are like tables. ECProperties are like columns. ECRelationshipClasses act like <em>link tables</em>.
    ECProperties can be primitive, but can also be @e arrays or @e structs (think of C++ array and struct concepts). 
    ECInstances (instances of objects) are like @e rows.

    On the data side @b %ECInstances represent the business objects of a given @ref BentleyApi::ECN::ECClass "ECClass", 
    i.e. an %ECInstance is an instantiation of an ECClass.

    See @ref ECObjectsGroup for more information about an ECSchemas and ECInstances.

    @section ECDbBigPicture ECDb API Big Picture
    The @ref ECDbGroup "ECDb API" is a SQL based database API like ODBC, ADO, ADO.NET, or the SQLite API and other 
    vendor specific database APIs. They all share the following characteristic workflow:
    - Open a connection to the repository
    - Create a SQL statement
    - Execute the SQL statement
    - Iterate over the results and retrieve the data (in case of SELECT statements)
    - Close the connection

    In the @ref ECDbGroup "ECDb API" the role of SQL is taken by @ref ECSQLOverview "ECSQL".

    Putting it in a catchy way: If you know a database API you know %ECDb by 90% and if you know SQL you know 90% of ECSQL.

    @section ECDbCoreFeatures ECDb Core Features
    Core features:
    - the <b>%EC CRUD</b> API for performing Create, Read, Update, Delete operations on %ECInstances in an 
    @ref ECDbFile "ECDb file" (see @ref ECSqlStatementOverview)
    - <b>ECSchema management</b> capabilities (e.g. importing ECSchemas into an @ref ECDbFile "ECDb file", 
    retrieving ECSchema entities from an @ref ECDbFile "ECDb file" (see BentleyApi::BeSQLite::EC::ECDbSchemaManager))
    - Internally maps %EC data to SQLite tables and columns

    @section ECDbMapping ECSQL hides away the database mapping of EC data
    A key feature of @ref ECSQLOverview "ECSQL" is that it <b>targets the
    logical schema, i.e. the BentleyApi::ECN::ECSchema, of the repository and not the schema of the underlying database.</b>
    @ref ECDbGroup "ECDb" can therefore encapsulate all internal details of how the %EC content gets actually mapped to
    tables and columns in the @ref ECDbFile "ECDb file".

    @image html ecdb_encapsulation.png

    Clients of the @ref ECDbGroup "ECDb API" therefore don't need to be aware of how the %EC data is
    stored in the @ref ECDbFile "ECDb file". For example, clients neither need to know in which table
    instances of a given @ref BentleyApi::ECN::ECClass "ECClass" nor in which columns the given
    @ref BentleyApi::ECN::ECProperty "ECProperties" of the ECClass are stored. Especially 
    @ref BentleyApi::ECN::ECProperty "ECProperties" of non-primitive type (e.g. arrays, structs)
    do not simply map to a single column, but can map to multiple columns or even to another table.
    <b>Clients just author an ECSQL statement against the ECSchema of the repository.</b>

    @section ECDbMappingCustomization Customizing the database mapping
    %ECDb mapping refer to how ECSchemas, ECClasses and ECProperties are mapped to database tables and columns. This can be done through use 
    of customAttributes. For detail see following.
    @ref ECDbMappingStrategy "ECDb Mapping Hints"

    @section ECDbApiEntryPoints ECDb API entry points
    The main entry points of the %ECDb API are:
    - The BentleyApi::BeSQLite::EC::ECDb class. It subclasses BentleyApi::BeSQLite::Db which in turn is 
    the lowest-level wrapper around the SQLite API.
    - BentleyApi::BeSQLite::EC::ECSqlStatement for the %EC CRUD functionality
    
    @section ECDbApiFurtherReading Further Reading
    - @ref ECDbGroup "API reference"
    - @ref WorkingWithECDb : Explains concepts of the %ECDb API as well as details and <em>How To's</em> 
    for using the %ECDb API.
    - @ref ECSqlStatementOverview
    - @ref ECSQLOverview
    - @ref ECSQLSamples
    - @ref ECDbCreatingECDbFromScratch
    - @ref ECDbCodeSamples "Code examples": Illustrates typical workflows when working with business 
    data in the @ref ECDbFile "ECDb file".

    */

    //****** WorkingWithECDb *******

    /**
    @page WorkingWithECDb Working with ECDb

    This page provides various details and hints about the %ECDb API and how to work with it.

    @li @subpage ECDbFile
    @li @subpage ECSQLOverview
    @li @subpage ECSQLSamples
    @li @subpage ECSqlStatementOverview
    @li @subpage ECDbTransactions
    @li @subpage ECDbCreatingECDbFromScratch
    @li @subpage ECDbCodeSamples

    @see @ref ECDbOverview
    */

    /**
    @page ECDbFile ECDb File
    Throughout the @ref ECDbOverview "ECDb documentation", we refer to <b>%ECDb files</b>.
    An %ECDb file is a SQLite database that is set up to store %EC data (Information Modeling content). It contains
    - well-defined tables to store @ref BentleyApi::ECN::ECSchema "ECSchemas", @ref BentleyApi::ECN::ECClass "ECClasses",
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationships", @ref BentleyApi::ECN::ECProperty "ECProperties", etc.
    - well-defined tables to store the ECInstance data.

    The set of those well-defined tables is called the <b>%ECDb profile</b> of a SQLite database.

    The @ref ECDbOverview "ECDb API" is used to access the data in the %ECDb file.

    ### %ECDb files versus DgnDb files
    The @e DgnDb format includes the %ECDb profile, so often the <em>%ECDb file</em> you are using will actually be
    a <em>DgnDb file</em>. In short, every <em>DgnDb file</em> is an <em>%ECDb file</em>, but not
    every <em>%ECDb file</em> is a <em>DgnDb file</em>.

    @image html ecdb_vs_dgndb_profiles.png

    In particular, %ECDb files cannot store DGN graphics. This can only be done in a DgnDb file.
    So %ECDb files are ideal for applications that work with EC business data and without DGN content.
    The %ECDb file format is slimmer than the DgnDb file format, and you can work against the @ref ECDbOverview "ECDb API" directly.
    The DGN related technology stack is not needed in that case.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbTransactions ECDb and Transactions
    In order to be as efficient and performant as possible ECDb's data modifying operations don't do any 
    internal or implicit transaction management. So if you call a data modifying method (e.g. via 
    @ref BentleyApi::BeSQLite::EC::ECSqlStatement "ECSqlStatement" or 
    @ref BentleyApi::BeSQLite::EC::ECDbSchemaManager "ECDbSchemaManager"), ECDb does not internally 
    create a transaction for that call. <b>ECDb therefore intentionally does not grant 
    atomicity for its data modifying operations</b> (Exceptions to this rule are documented on the respective method).
    This implies, in particular, that ECDb - like SQLite - does not grant statement-level atomicity.

    What operations a transaction should encompass is mainly driven by the application's workflows anyways. So you should 
    define the transaction boundaries in your workflows and wrap the respective ECDb calls in a transaction at your discretion.

    By default, each connection to an @ref ECDbFile has an active default transaction as SQLite always needs an 
    active transaction when accessing the data. (See @ref BentleyApi::BeSQLite::StartDefaultTransaction "StartDefaultTransaction"
    if you think you need to deviate from the default.)

    You commit the transaction via @ref BentleyApi::BeSQLite::Db::SaveChanges "ECDb::SaveChanges" and
    roll it back via @ref BentleyApi::BeSQLite::Db::AbandonChanges "ECDb::AbandonChanges".
    The default transaction will be automatically restarted after having committed it or rolled it back.

    See the @ref BentleyApi::BeSQLite::Db "BeSQLite API" for details about transactions.

    @see @ref ECDbOverview
    */

      /**
    @page ECDbMappingStrategy Mapping of EC Schemas in ECDb
    %ECDb applies a default mapping when importing an BentleyApi::ECN::ECSchema into the @ref ECDbFile "ECDb file". 
    %ECDb allows ECSchema designers to modify the default mapping by decorating the ECSchema 
    with dedicated <b>%ECDb hint custom attributes</b>, e.g. @b ECDbClassHint or @b ECDbPropertyHint. 

    Please see 
    <a href="files/ecdb/Bentley_Standard_CustomAttributes.ecschema.xml" target="_blank">Bentley_Standard_CustomAttributes.ecschema.xml</a>
    for a detailed description of all available <b>%ECDb hint custom attributes</b>.

    @section ECDbDefaultMappingHints ECDb Default Mapping Rules
    - 1. Type of classes that are not mapped.
        - 1.1 CustomAttribute classes are not mapped.
        - 1.2 None-domain classes are not mapped.
        - 1.3 Relationship with no source/target constraints are not mapped.
        - 1.4 Classes which specify DoNotMap or DoNotMapHiearchy.
        - 1.5 If schema have hint ECDbSchemaHint.DefaultClassMapStrategy = DoNotMap then by default no class in schema is mapped unless class specify a MapStrategy other then DoNotMap.
    - 2. Type of classes that are mapped using TablePerClass strategy by default.
        - 2.1 Struct classes are always mapped using TablePerClass strategy.
        - 2.2 Domain classes are mapped using TablePerClass strategy.
        - 2.3 Specify ECDbClassHint.MapStrategy
            - 2.3.1 <em>DoNotMap</em> - This only effect the class that specify it. The class will not be mapped to any database table.
            - 2.3.2 <em>DoNotMapHierarchy</em> - This map strategy effect the entire hierarchy of the class that specify it. The whole hierarchy of classes will not be mapped
            - 2.3.3 <em>TableForThisClass</em> - This only effect the class that specify it. This class will be mapped to its own table.
            - 2.3.4 <em>TablePerClass</em> - This map strategy effect the entire hierarchy of the class that specify it. This will cause each class in hieararchy to have its own table.
            - 2.3.5 <em>TablePerHierarchy</em> - This map strategy effect the entire hierarchy of the class that specify it. This will cause all the classes in the hierarchy to be mapped into a single table.
            - 2.3.6 <em>MapToExistingTable</em> - This only effect the class that specify it. ECDbClassHint.TableName must be provided which must point to a table that already exist and must have a INT64 type primary key column.
            - 2.3.7 <em>SharedTableForThisClass</em> -This only effect the class that specify it. ECDbClassHint.TableName must be provided. The table will be created and the class will be mapped to it. More then one class can be clustered into a single table.
            - 2.3.8 Extend Options
                - 2.3.8.1 <em>WithReuseColumns</em> - This can be applied to TablePerHierarchy or SharedTableForThisClass. This can potentially reduce number of column needed to store all the classes.
                - 2.3.8.2 <em>WithReadonly</em> - This will mark the table a readonly. It can only be used with MapToExistingTable.
                - 2.3.8.3 <em>WithExclusivelyStoredInThisTable</em> - This can be use independently on a dervie class of a class that specify WithReuseColumns. It will exclude the columns indeeded to store class from ReuseColumn strategy option.
        - 2.4 MapStrategy that effect hierarchy can be changed at dervied class level using a different map strategy.
    - 3. Relationship is mapped either as 1) EndTable - Use forign key column to establish relationship 2) LinkTable - Use a table to link two classes. Relationship are mapped using following rules.
        - 3.1 Relationship with cardianlity 1:1 or 0:N will be mapped using EndTable mapping if possiable.
            - 3.1.1 If source or target constraints endup in a single table on each side then EndTable mapping will be used.
            - 3.1.2 If source or target constraints endup in more then one table on any side it will be mapped using LinkTable mapping.
            - 3.1.3 If relationship has atleast one property it will be mapped using LinkTable mapping
            - 3.2.4 ECDbRelationshipClassHint.PreferredDirection can be use to specify which direction to optimize. This effect default indexes.
        - 3.2 Relationship with cardinality N:N is always mapped using LinkTable mapping.
        - 3.3 Relationship can use TablePerHiearchy strategy. If TablePerHiearchy strategy is specified then the whole hiearchy of that relationship will be mapped using LinkTable mapping.
        - 3.4 Default index is created on key columns in accordance with the cardianlity. By default no duplicate relationships are allowed.
            - 3.4.1 This can be disabled using ECDbRelationshipClassHint.AllowDuplicateRelationships.
                - 3.4.1.1 Though disable does not mean it will work in all cases. It depend on mapping. 
                    - 3.4.1.1.1 If 1:1 mapping type is EndTable then it will allow 1:N dupplication.
                    - 3.4.1.1.2 If 1:N mapping type is EndTable then it will allow 1:N dupplication.
                    - 3.4.1.1.3 If mapping type is LinkTable then it will allow all type of dupplicaiton.
                - 3.4.1.2 Default index creation can completley disable using ECDbRelationshipConstraintHint.GenerateDefaultIndex.
        - 3.5 No referecial integrity constriants are added in anycase. But it can be added through ECDbRelationshipConstraintHint.ForeignKeyConstraint
        - 3.6 Renaming default key columns is possiable through following attributes
            - 3.6.1 For soure/target constraint use ECDbRelationshipConstraintHint.ECClassIdColumn to specify ECClassId column.
            - 3.6.2 For soure/target constraint use ECDbRelationshipConstraintHint.ECIdColumn to specify ECInstanceId column.
    .

    @section ECDbSchemaHint Mapping Hints for ECSchema

    Specifies a prefix for generated tables. If not specified, namespacePrefix of the ECSchema is used. (ECDb will only look for it in local attributes on the ECClass). Following properties can be set:

    TablePrefix :The prefix should be 2-4 letters followed by an underbar, e.g. plnt_. If not provided schema prefix is used by default. TablePrefix will effect all table that are created for this schema unless user used ECDbClassHint::TableName to override the table name altogether.

    Example
    
        <ECCustomAttributes>
            <ECDbSchemaHint xmlns="Bentley_Standard_CustomAttributes.01.12">
                <TablePrefix>sc</TablePrefix>
            </ECDbSchemaHint>
        </ECCustomAttributes>​
    
    @section ECDbClassHint Mapping Hints for ECClass
    Optional hint to tell how to map classes in database. (ECDb will only look for it in local attributes on the ECClass). Following Properties can be set:
    
    MapStrategy: Optional hints regarding how the ECClass is mapped to table(s). Default value is 'TableForThisClass'.
        DoNotMap: Do not map the class on which the hint is defined. 
        DoNotMapHierarchy:  Do not map the entire class hierarchy. The class on which its define and all its children will not be mapped by default.
        TableForThisClass: Use a table for this class. The resulting table will only contain instances of this class and will not be shared with anyother class. 
        TablePerClass: If ​applied to a class it and all its children will each map to there own table. 
        TablePerHierarchy: Map this class to a table and also map all its children to same table as well. The whole hierarchy of class on which its define will share the same table.
    ECIdColumn: Optionally specify custom 'primary key' column which must be a Int64.
    TableName: Optionally provide user define table name for this class
    MapToExistingTable: Optionally provide if table already exist or will be created automatically. Default value is 'False'
    ReplaceEmptyTableWithEmptyView: Optionally provide if table can be replaced by a readonly null view if table is empty. This can happen if target dgndb is only used as readonly after publishing.
    Indexes[] : Optional list of indexes on properties of this class. It can be use to improve query performance or to add unique constraint.
        Name: Optional name of the index. Follow EC identifier rules. It need to be globally unique in database. Two index with same name will cause error.
        IsUnique : Optional unique constraint. Default value is false. All keys in index must be unique
        Properties[] :List of properties that will be part of index. Only primitive type properties can be added to this array
        Where: This can be used to create Partial Indexes. The supported value right now is ECDB_NOTNULL that would create a partial index ignoring any NULL values.
        
    ​Examples
    
    Using  "DoNotMap" MapStrategy 

        <ECClass typeName="AClassThatDoesNotGetMappedToDb" isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <MapStrategy>DoNotMap</MapStrategy>
                </ECDbClassHint>
            </ECCustomAttributes>
            <ECProperty propertyName="stringFoo" typeName="string" />
        </ECClass>

    Using  "TablePerHierarchy" MapStrategy 

        <ECClass typeName="Foo"  isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <MapStrategy>TablePerHierarchy</MapStrategy>
                    <TableName>FOO_FIGHTERS</TableName>
                </ECDbClassHint>
            </ECCustomAttributes>
        ...
        </ECClass>
    
    Creating database indexes on ECProperties

        <ECClass typeName="ClassWithPrimitiveProperties" isDomainClass="True">
            <ECCustomAttributes>
                <ECDbClassHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <Indexes>
                        <ECDbIndex>
                            <Name>IDX_ON_intProp_doubleProp_stringProp</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>intProp</string>
                                <string>doubleProp</string>
                                <string>stringProp</string>
                            </Properties>
                        </ECDbIndex>
                        <ECDbIndex>
                            <Name>IDX_ON_date_time_and_binary</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>dateTimeProp</string>
                                <string>binaryProp</string>
                            </Properties>
                        </ECDbIndex>
                        <ECDbIndex>
                            <Name>IDX_ON_point2d</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>point2dProp</string>
                                <string>point3dProp</string>
                            </Properties>
                        </ECDbIndex>
                        <ECDbIndex>
                            <Name>IDX_PARTIAL</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>point2dProp</string>
                            </Properties>
                            <Where>ECDB_NOTNULL</Where>
                        </ECDbIndex>
                    </Indexes>
                </ECDbClassHint>
            </ECCustomAttributes>
            <ECProperty propertyName="intProp" typeName="int">
            </ECProperty>
        ... 
        </ECClass>
    
    @section ECDbPropertyHint Mapping Hints for ECProperty
    Optional hint to tell how to map properties to database columns. (ECDb will only look for it in local attributes on the ECProperty) Following Properties can be set:
    
    ColumnName: If not specified, the ECProperty name is used. It must follow EC Identifier specification.
    MapStrategy: Applicable to arrays and struct type properties. Value can be 'StoreInSeparateTable' or 'Blob'. By default primitive arrays are stored as blob and struct and struct arrays are stored in separate table.
        Blob: For array of primitive its the default value.
        StoreInSeparateTable: For struct array this is default value.
    IsNullable: Might not be honorable when multiple ECClasses are stored in a single table
    IsUnique: Only allow unique values for this column.
    Collate: Specify how string compare should work for this property. Following are possiable values for collate property.
        BINARY (default): bit to bit matching.
        NOCASE: The same as binary, except the 26 upper case characters of ASCII are folded to their lower case equivalents before the comparison is performed. Note that is folds only ASCII not full UTF.
        RTRIM: The same as binary, except that trailing space characters are ignored.​
​    
    Examples:
    Mapping a array to a global "ECArrayOfStrings" table instead of default blob which is store in same table as the parent ECClass of this property is mapped to
    
        <ECArrayProperty propertyName="stringArrayProp" typeName="string" minOccurs="0" maxOccurs="unbounded" >
            <ECCustomAttributes>
                <ECDbPropertyHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <MapStrategy>StoreInSeparateTable</MapStrategy>
                </ECDbPropertyHint>
            </ECCustomAttributes>
        </ECArrayProperty>
    
    Providing custom name for a property

        <ECProperty propertyName="intProp" typeName="int">
            <ECCustomAttributes>
                <ECDbPropertyHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <ColumnName>myColumn_intProp</ColumnName>
                </ECDbPropertyHint>
            </ECCustomAttributes>
        </ECProperty>
    
    Specifying Collate or case-insensitive search for a property

        <ECProperty propertyName="stringProp" typeName="string">
            <ECCustomAttributes>
                <ECDbPropertyHint xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <ColumnName>myColumn_stringProp</ColumnName>
                    <Collate>NoCase</Collate> 
                </ECDbPropertyHint>
            </ECCustomAttributes>
        </ECProperty>
    
    @section ECDbRelationshipClassHint Mapping Hints for ECRelationshipClass
    Optional hint to provide indexing information to optimize relationship querying. (ECDb will only look for it in local attributes on the ECRelationshipClass) Following Properties can be set: 
    
    PreferredDirection: Specify preferred direction in N:N and 1:1 relation will be used more often. It is use as hint to optimize quering. ​Possible values are as following
        SourceToTarget 
        Bidirectional
        TargetToSource
            AllowDuplicateRelationships: By default relationship need to be unique. The property can be set to override it and allow dupplicate values.
            SourceECIdColumn: User provided source ECInstanceId column name.
            TargetECIdColumn: User provided target ECInstanceId column name.
    ​
    Examples:
    
        <ECRelationshipClass typeName="EmployeeHardware" isDomainClass="True" strength="referencing" strengthDirection="forward">
            <ECCustomAttributes>
                <ECDbRelationshipClassHint  xmlns="Bentley_Standard_CustomAttributes.01.05">
                    <PreferredDirection>TargetToSource</PreferredDirection>
                    <SourceECIdColumn>Employee__src_0N_id</SourceECIdColumn>
                    <TargetECIdColumn>Hardware__trg_0N_id</TargetECIdColumn>
                </ECDbRelationshipClassHint>
            </ECCustomAttributes>
            <BaseClass>AssetRelationshipsBase</BaseClass>
            <BaseClass>EmployeeRelationshipsBase</BaseClass>
            <Source cardinality="(0,N)" roleLabel="Employee using hardware" polymorphic="True">
                <Class class="Employee" />
            </Source>
            <Target cardinality="(0,N)" roleLabel="Hardware assigned to employee" polymorphic="True">
                <Class class="Hardware" />
            </Target>
        </ECRelationshipClass>
    
    @see @ref ECDbOverview
    */