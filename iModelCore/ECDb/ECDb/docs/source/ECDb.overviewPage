/*--------------------------------------------------------------------------------------+
|
|     $Source: ECDb/docs/source/ECDb.overviewPage $
|
|  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
//__PUBLISH_SECTION_START__

    //****** API doc main page *******
    //! @namespace BentleyApi::BeSQLite::EC Classes used to access an @ref ECDbFile.

    //! @addtogroup ECDbGroup
    //! ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file" (see @ref ECDbOverview).


    //****** ECDbOverview *******
    /**
    @page ECDbOverview ECDb Overview

    @tableofcontents

    @b %ECDb is the API to access %EC data in an @ref ECDbFile "ECDb file".

    @section ECDbECIntro EC - Bentley's Information Modeling System
    %EC is Bentley's information modeling system. It is the self-describing business data as it can be found in i-models, DgnDb or
    @ref ECDbFile "ECDb files" (though it is not limited to those).
    It provides standard metadata that allows <em>%EC aware</em> apps (like Navigator Mobile) to understand the business data,
    including appropriate display labels, engineering units, UI hints, etc.
    An @ref BentleyApi::ECN::ECSchema "ECSchema" defines the EC data model. You can think of it as a namespace
    for a set of ECClasses. ECSchemas are made up of @ref BentleyApi::ECN::ECClass "ECClasses" which in turn
    consist of @ref BentleyApi::ECN::ECProperty "ECProperties". Relationships among ECClasses are described by
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses". An analogy to SQL is often helpful.
    ECClasses are like tables. ECProperties are like columns. ECRelationshipClasses act like <em>link tables</em>.
    ECProperties can be primitive, but can also be @e arrays or @e structs (think of C++ array and struct concepts).
    ECInstances (instances of objects) are like @e rows.

    On the data side @b %ECInstances represent the business objects of a given @ref BentleyApi::ECN::ECClass "ECClass",
    i.e. an %ECInstance is an instantiation of an ECClass.

    See @ref ECObjectsGroup for more information about an ECSchemas and ECInstances.

    @section ECDbBigPicture ECDb API Big Picture
    The @ref ECDbGroup "ECDb API" is a SQL based database API like ODBC, ADO, ADO.NET, or the SQLite API and other
    vendor specific database APIs. They all share the following characteristic workflow:
    - Open a connection to the repository
    - Create a SQL statement
    - Execute the SQL statement
    - Iterate over the results and retrieve the data (in case of SELECT statements)
    - Close the connection

    In the @ref ECDbGroup "ECDb API" the role of SQL is taken by @ref ECSQLOverview "ECSQL".

    Putting it in a catchy way: If you know a database API you know %ECDb by 90% and if you know SQL you know 90% of ECSQL.

    @section ECDbCoreFeatures ECDb Core Features
    Core features:
    - the <b>%EC CRUD</b> API for performing Create, Read, Update, Delete operations on %ECInstances in an
    @ref ECDbFile "ECDb file" (see @ref ECSqlStatementOverview)
    - <b>ECSchema management</b> capabilities (e.g. importing ECSchemas into an @ref ECDbFile "ECDb file",
    retrieving ECSchema entities from an @ref ECDbFile "ECDb file" (see BentleyApi::BeSQLite::EC::ECDbSchemaManager and @ref ECDbECSchemaRules))
    - Internally maps %EC data to SQLite tables and columns

    @section ECDbMapping ECSQL hides away the database mapping of EC data
    A key feature of @ref ECSQLOverview "ECSQL" is that it <b>targets the
    logical schema, i.e. the BentleyApi::ECN::ECSchema, of the repository and not the schema of the underlying database.</b>
    @ref ECDbGroup "ECDb" can therefore encapsulate all internal details of how the %EC content gets actually mapped to
    tables and columns in the @ref ECDbFile "ECDb file".

    @image html ecdb_encapsulation.png

    Clients of the @ref ECDbGroup "ECDb API" therefore don't need to be aware of how the %EC data is
    stored in the @ref ECDbFile "ECDb file". For example, clients neither need to know in which table
    instances of a given @ref BentleyApi::ECN::ECClass "ECClass" nor in which columns the given
    @ref BentleyApi::ECN::ECProperty "ECProperties" of the ECClass are stored. Especially
    @ref BentleyApi::ECN::ECProperty "ECProperties" of non-primitive type (e.g. arrays, structs)
    do not simply map to a single column, but can map to multiple columns or even to another table.
    <b>Clients just author an ECSQL statement against the ECSchema of the repository.</b>

    The section @ref ECDbSchemaMappingCustomization describes how clients can customize how ECSchemas
    are mapped to the ECDb database schema.

    @section ECDbApiEntryPoints ECDb API entry points
    The main entry points of the %ECDb API are:
    - The BentleyApi::BeSQLite::EC::ECDb class. It subclasses BentleyApi::BeSQLite::Db which in turn is
    the lowest-level wrapper around the SQLite API.
    - BentleyApi::BeSQLite::EC::ECSqlStatement for the %EC CRUD functionality

    @section ECDbApiFurtherReading Further Reading
    - @ref ECDbGroup "API reference"
    - @ref WorkingWithECDb : Explains concepts of the %ECDb API as well as details and <em>How To's</em>
    for using the %ECDb API.
    - @ref ECSqlStatementOverview
    - @ref ECSQLOverview
    - @ref ECSQLSamples
    - @ref ECDbCodeSamples "Code examples": Illustrates typical workflows when working with business
    data in the @ref ECDbFile "ECDb file".
    - @ref ECDbECSchemaRules
    - @ref ECDbSchemaMappingCustomization
    - @ref ECDbCreatingECDbFromScratch

    */

    //****** WorkingWithECDb *******

    /**
    @page WorkingWithECDb Working with ECDb

    This page provides various details and hints about the %ECDb API and how to work with it.

    @li @subpage ECDbFile
    @li @subpage ECSQLOverview
    @li @subpage ECSQLSamples
    @li @subpage ECSqlStatementOverview
    @li @subpage ECDbTransactions
    @li @subpage ECDbECSchemaRules
    @li @subpage ECDbRelationshipMappingRules
    @li @subpage ECDbSchemaMappingCustomization
    @li @subpage ECDbFileInfo
    @li @subpage ECDbCreatingECDbFromScratch
    @li @subpage ECDbCodeSamples

    @see @ref ECDbOverview
    */

    /**
    @page ECDbFile ECDb File
    Throughout the @ref ECDbOverview "ECDb documentation", we refer to <b>%ECDb files</b>.
    An %ECDb file is a SQLite database that is set up to store %EC data (Information Modeling content). It contains
    - well-defined tables to store @ref BentleyApi::ECN::ECSchema "ECSchemas", @ref BentleyApi::ECN::ECClass "ECClasses",
    @ref BentleyApi::ECN::ECRelationshipClass "ECRelationships", @ref BentleyApi::ECN::ECProperty "ECProperties", etc.
    - well-defined tables to store the ECInstance data.

    The set of those well-defined tables is called the <b>%ECDb profile</b> of a SQLite database.

    The @ref ECDbOverview "ECDb API" is used to access the data in the %ECDb file.

    ### %ECDb files versus DgnDb files
    The @e DgnDb format includes the %ECDb profile, so often the <em>%ECDb file</em> you are using will actually be
    a <em>DgnDb file</em>. In short, every <em>DgnDb file</em> is an <em>%ECDb file</em>, but not
    every <em>%ECDb file</em> is a <em>DgnDb file</em>.

    @image html ecdb_vs_dgndb_profiles.png

    In particular, %ECDb files cannot store DGN graphics. This can only be done in a DgnDb file.
    So %ECDb files are ideal for applications that work with EC business data and without DGN content.
    The %ECDb file format is slimmer than the DgnDb file format, and you can work against the @ref ECDbOverview "ECDb API" directly.
    The DGN related technology stack is not needed in that case.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbTransactions ECDb and Transactions
    In order to be as efficient and performant as possible ECDb's data modifying operations don't do any
    internal or implicit transaction management. So if you call a data modifying method (e.g. via
    @ref BentleyApi::BeSQLite::EC::ECSqlStatement "ECSqlStatement" or
    @ref BentleyApi::BeSQLite::EC::ECDbSchemaManager "ECDbSchemaManager"), ECDb does not internally
    create a transaction for that call. <b>ECDb therefore intentionally does not grant
    atomicity for its data modifying operations</b> (Exceptions to this rule are documented on the respective method).
    This implies, in particular, that ECDb - like SQLite - does not grant statement-level atomicity.

    What operations a transaction should encompass is mainly driven by the application's workflows anyways. So you should
    define the transaction boundaries in your workflows and wrap the respective ECDb calls in a transaction at your discretion.

    By default, each connection to an @ref ECDbFile has an active default transaction as SQLite always needs an
    active transaction when accessing the data. (See @ref BentleyApi::BeSQLite::DefaultTxn "StartDefaultTransaction"
    if you think you need to deviate from the default.)

    You commit the transaction via @ref BentleyApi::BeSQLite::Db::SaveChanges "ECDb::SaveChanges" and
    roll it back via @ref BentleyApi::BeSQLite::Db::AbandonChanges "ECDb::AbandonChanges".
    The default transaction will be automatically restarted after having committed it or rolled it back.

    See the @ref BentleyApi::BeSQLite::Db "BeSQLite API" for details about transactions.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbECSchemaRules Rules for ECSchemas supported by ECDb
    
    There are some rules creators of @ref BentleyApi::ECN::ECSchema "ECSchemas" should follow so that the 
    %ECSchema can be used in %ECDb. These rules are semantically common sense anyways and might eventually be merged into the 
    %ECSchema specification, so it should be straightforward to follow them.

    ### Naming
    Names may not differ only by case. This applies to
    - %ECSchemas
    - %ECClasses within a schema
    - %ECProperties withing a class (including inherited properties)
    
    It is suggested that you avoid names that only differ by case throughout the system

    ### Schema
    - A unique namespace prefix must be defined and the namespace prefix must be a valid ECName and must not be empty.

    ### Relationship Class
    - For non-abstract relationship classes, both relationship constraints must be well-defined.
        - At least one class must be specified for each constraint
    - For abstract relationship classes constraints must not be specified because they are not inherited.
    - Abstract relationship classes may not be instantiated or used to relate instances in a repository.
    
    @see @ref ECDbRelationshipMappingRules for more rules

    ### Properties
    - @ref BentleyApi::ECN::ECProperty "ECProperties" may not be of the same type as its @ref BentleyApi::ECN::ECClass "ECClass".
    - @ref BentleyApi::ECN::ArrayECProperty "Array ECProperties'" @b MinOccurs and @b MaxOccurs are enforced.

    ### Enumerations
    - %ECDb does not enforce @ref BentleyApi::ECN::ECEnumeration::GetIsStrict "strict" 
    @ref BentleyApi::ECN::ECEnumeration "ECEnumerations". For %ECProperties that
    have a @ref BentleyApi::ECN::ECEnumeration::GetIsStrict "strict" %ECEnumeration as property type, 
    callers have to make sure to not assign values which are not defined in the %ECEnumeration.
    
    @see @ref ECDbOverview
    */

    /**
    @page ECDbRelationshipMappingRules Rules for ECRelationshipClasses in ECDb
    The specification of @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses" allows for constructs which don't necessarily
    lead to a good database design. ECDb therefore only supports @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses" that 
    can be mapped to a reasonable database layout.

    ## ECRelationshipClass Definition Consistency
    Technically, @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses" can be defined with incompatible 
    values for cardinality, strength and strength direction. The table shows what is actually allowed.

    Cardinality | Supported Strength | Supported Strength Direction
    ----------- | ------------------ | ----------------------------
    1:1         | Any                | @ref BentleyApi::ECN::Forward "Forward" or @ref BentleyApi::ECN::Backward "Backward"
    1:N         | @ref BentleyApi::ECN::Embedding "Embedding" | @ref BentleyApi::ECN::Forward "Forward"
    &nbsp;      | @ref BentleyApi::ECN::Referencing "Referencing" or @ref BentleyApi::ECN::Holding "Holding" | @ref BentleyApi::ECN::Forward "Forward" or @ref BentleyApi::ECN::Backward "Backward"
    N:1         | @ref BentleyApi::ECN::Embedding "Embedding" | @ref BentleyApi::ECN::Backward "Backward"
    &nbsp;      | @ref BentleyApi::ECN::Referencing "Referencing" or @ref BentleyApi::ECN::Holding "Holding" | @ref BentleyApi::ECN::Forward "Forward" or @ref BentleyApi::ECN::Backward "Backward"
    M:N         | @ref BentleyApi::ECN::Referencing "Referencing" or @ref BentleyApi::ECN::Holding "Holding" | @ref BentleyApi::ECN::Forward "Forward" or @ref BentleyApi::ECN::Backward "Backward"

    ## Foreign Key mapping versus Link Table mapping
    ECDb always attempts to map an @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClass" using a 
    <b>Foreign Key</b> mapping, because this type is more performant and less complex.
    For those cases where a Foreign Key mapping is not possible (because a Link Table is required), 
    ECDb chooses the <b>Link Table</b> mapping.
    
    @b Rule:
    <b>Link Table</b> mapping is chosen if
    - the cardinality is N:N
    - ECProperties are defined for the ECRelationshipClass
    - the @b LinkTableRelationshipMap custom attribute is present on the ECRelationshipClass (see also @ref CustomRelationshipMapDescription)

    Otherwise, the <b>Foreign Key</b> mapping is chosen.

    The ECRelationshipClass is rejected
    - if it evaluates to <b>Link Table</b> mapping and
        - has the strength @em Embedding
        - has the @b ForeignKeyRelationshipMap custom attribute (see also @ref CustomRelationshipMapDescription)
    - if it evaluates to <b>Foreign Key</b> mapping and the Foreign Key is created in a <b>joined table</b> 
    (see @ref CustomClassMapDescription) and 
            - in the @b ForeignKeyRelationshipMap custom attribute the property @b OnDeleteAction is set to @b Cascade or
            - the @b ForeignKeyRelationshipMap custom attribute is not present and the strength is @b Embedding

    ## Mapping Rules
    The <b>number of tables to which the two relationship ends map to</b> is the key criterion for ECDb to decide whether
    an ECRelationshipClass is supported or not.

    <b>Rule of thumb: The ECRelationshipClass is supported, if the number of tables on either end is 1.</b>

    - Link Table mapping: Number of tables must be 1 on both ends.
    - Foreign Key mapping:
        - Number of tables on the referenced end must be 1.
        - Number of tables on the Foreign Key end
            - 1: ok
            - > 1: ok, but <b>relationship becomes read-only</b>, i.e. it cannot be used in ECSQL INSERT, UPDATE, DELETE.
            Creating relationships of that kind is possible through @ref BentleyApi::ECN::NavigationECProperty "NavigationECProperties".
        
    #### Counting the tables on the ECRelationshipClass ends
    - Count the distinct tables to which each class specified in the 
    @ref BentleyApi::ECN::ECRelationshipConstraint "ECRelationshipConstraint" maps.
    - If the @ref BentleyApi::ECN::ECRelationshipConstraint "constraint" is 
    @ref BentleyApi::ECN::ECRelationshipConstraint::GetIsPolymorphic "polymorphic", 
    you need to count the subclasses' tables, too.
    
    @note ECDb fails the schema import for unsupported ECRelationshipClasses and logs the error. If you are not sure 
    how to determine the table count on the relationship ends, you can attempt schema import dry-runs and 
    look at the logged errors.
    
    #### How to fix unsupported ECRelationshipClasses
    - For a polymorphic @ref BentleyApi::ECN::ECRelationshipConstraint "ECRelationshipConstraint" consider to apply
    the mapping strategy <b>Shared Table</b> with <c>AppliesToSubclasses=True</c> to the root class of the class hierarchy. 
    See @ref CustomClassMapDescription for details.
    - If the classes specified in the @ref BentleyApi::ECN::ECRelationshipConstraint "ECRelationshipConstraint" are not members
    of the same class hierarchy, consider to apply the mapping strategy <b>Shared Table</b> with <c>AppliesToSubclasses=False</c> to 
    each class of the constraint. See @ref CustomClassMapDescription for details.
    - If the <i>Shared Table</i> strategy cannot be applied, consider breaking the ECRelationshipClass apart into several separate
    ECRelationshipClasses.
    
    ## Referential Integrity
    ECDb enforces referential integrity via foreign key and not null constraints.
    
    ####Exceptions
    For @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses" with strength
    @ref BentleyApi::ECN::Holding "Holding" foreign key constraints exist to delete the relationship @em instances. But ECDb
    cannot delete the actual orphaned instances automatically. Instead callers must explicitly call @ref BentleyApi::BeSQLite::EC::ECDb::Purge "ECDb::Purge"
    at their discretion.

    For @ref BentleyApi::ECN::ECRelationshipClass "ECRelationshipClasses" that specify 
    @ref BentleyApi::ECN::ECRelationshipConstraintClass::GetKeys "Key properties" the <em>foreign key</em> and
    <em>not null</em> constraints cannot be created if the <em>Key property</em> is mapped to a column shared with other properties
    from other classes (see @ref CustomClassMapDescription for details on column sharing).
    
    Column sharing generally cannot be combined with per-column constraints.

    @see @ref ECDbOverview
    */

    /**
    @page ECDbSchemaMappingCustomization Customizing the ECDb schema mapping

    %ECDb applies a default mapping when importing an @ref BentleyApi::ECN::ECSchema "ECSchema" into the @ref ECDbFile "ECDb file".
    However, %ECDb allows ECSchema designers to modify the default mapping by decorating the ECSchema
    with dedicated custom attributes defined in the standard ECSchema <a href="files/ecdb/ECDbMap.ecschema.xml" target="_blank">ECDbMap.ecschema.xml</a>.

    @section ECDbDefaultMappingRules ECDb Default Mapping Rules
    - Type of ECClasses that <b>are not mapped</b>.
        - CustomAttribute ECClasses
        - Non-domain ECClasses
    - Type of ECClasses that are mapped using the @b OwnTable strategy by default.
        - Domain ECClasses
        - Struct ECClasses
    - ECRelationshipClasses are either mapped to the table of one of the constraint ends (ForeignKey mapping)
    or to a link table.
        - ECRelationshipClasses with cardinality 1:1 or 0:N
            - If source or target constraints end-up in a single table on each side then @b ForeignKey mapping will be used.
            - If source or target constraints end-up in more then one table on any side then @b LinkTable mapping will be used.
            - If relationship has at least one ECProperty it will be mapped using @b LinkTable mapping
        - Relationship with cardinality N:N is always mapped using the @b LinkTable mapping.
        - A default index is created on the key columns in accordance with the cardinality.

    @section CustomSchemaMapDescription Custom mapping or ECSchemas

    Customizing the mapping on the schema level is done by applying the @b SchemaMap custom attribute to the respective ECSchema.
    Description of the SchemaMap properties:
    - TablePrefix: Specifies a prefix for generated tables. If not specified, the namespace prefix of the ECSchema is used.
    The prefix should be 2-4 letters long followed by an underbar, e.g. plnt_. This setting will affect all tables that are created
    for this ECSchema unless it is overwritten on the ECClass level via the @ref CustomClassMapDescription "ClassMap" property @b TableName.

    ####Example

        <ECCustomAttributes>
            <SchemaMap xmlns="ECDbMap.01.00">
                <TablePrefix>sp</TablePrefix>
            </SchemaMap>
        </ECCustomAttributes>

    @section CustomClassMapDescription Custom mapping for ECClasses

    Customizing the mapping for an ECClass is done by applying the @b ClassMap custom attribute to the respective ECClass.
    (ECDb will only look for it in local attributes on the ECClass).

    Description of the ClassMap properties:

    - @b MapStrategy (optional): Specifies how the ECClass is mapped to table(s). Default strategy is 'OwnTable'.
        - Property @b Strategy (optional):
            - @c NotMapped : The class is not mapped to any database table.
            - @c OwnTable : This class is mapped to its own table.
            - @c SharedTable : This class is mapped to @em table shared by other classes as well. If @b AppliesToSubclasses is false,
            the @b TableName ECProperty must also be specified. Otherwise it is optional.
            - @c ExistingTable : This class is mapped to an existing table. The existing table must be specified in the @b TableName ECProperty.
            The table must have a primary key column of type INTEGER. This does not affect subclasses of this ECClass.
        - <b>Options</b> (optional): The above values can be combined with these options:
            - @c SharedColumns : This option tells ECDb that different ECProperties (from different ECClasses) are mapped to the same column.
            This can reduce the number of columns (and cells with NULL values) in the table significantly.
            This can only be applied to @b SharedTable.
            - @c SharedColumnsForSubclasses : Like @em SharedColumns, except that the ECProperties of the class holding the ClassMap
            custom attribute do not share columns.
            - @c DisableSharedColumns: This option disables the column sharing for the class and all its subclasses, if
            column sharing was enabled on a base class. The property @em Strategy must not be set.
            - @c JoinedTablePerDirectSubclasses : This options tells ECDb that the properties of the subclasses are mapped to an extra table joined
            to the table of the root class. Each direct subclass of this class is mapped to its own joined table. Can only be used with @b SharedTable and @b AppliesToSubclasses being true.
            - @b AppliesToSubclasses (optional): If true, the MapStrategy and options also apply to subclasses of this class.
        If false (default), the MapStrategy only applies to this class.
    - @b TableName (optional, required for MapStrategies @em ExistingTable and <i>SharedTable (non-polymorphic)</i>):
    Specify a table name for this class (instead of letting ECDb choose a name)
    - @b Indexes (optional) : List of indexes to be created for properties of this class.
    It can be use to improve query performance or to add a unique constraint.
        - @b Name (optional): Index name. Follow EC identifier naming rules. The name must unique in database.
        - @b IsUnique (optional): If true, the index will be a unique index. Default value is @em false.
        - @b Properties: List of Names of properties that will be part of index. Only primitive properties can be used. The properties must exist
        in the ECClass or in the base classes.
        - @b Where (optional): Creates a partial index. Right now only the special value <b>IndexedColumnsAreNotNull</b> is supported which
        creates a partial index ignoring any NULL values in the indexed columns.

    ####Examples

    #### MapStrategy NotMapped

        <ECEntityClass typeName="AClassThatDoesNotGetMappedToDb">
            <ECCustomAttributes>
                <ClassMap xmlns="ECDbMap.01.00">
                    <MapStrategy>
                      <Strategy>NotMapped</Strategy>
                    </MapStrategy>
                </ClassMap>
            </ECCustomAttributes>
            <ECProperty propertyName="Name" typeName="string" />
        </ECEntityClass>

    #### MapStrategy  SharedTable for class hierarchy

        <ECEntityClass typeName="Foo">
            <ECCustomAttributes>
                <ClassMap xmlns="ECDbMap.01.00">
                    <MapStrategy>
                       <Strategy>SharedTable</Strategy>
                       <AppliesToSubclasses>True</AppliesToSubclasses>
                    </MapStrategy>
                </ClassMap>
            </ECCustomAttributes>
        ...
        </ECEntityClass>

    #### Creating database indexes on ECProperties

        <ECEntityClass typeName="Person">
            <ECCustomAttributes>
                <ClassMap xmlns="ECDbMap.01.00">
                    <Indexes>
                        <DbIndex>
                            <Name>ix_Person_Name</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>FirstName</string>
                                <string>LastName</string>
                            </Properties>
                        </DbIndex>
                        <DbIndex>
                            <Name>ix_Person_Birthday</Name>
                            <IsUnique>False</IsUnique>
                            <Properties>
                                <string>Birthday</string>
                            </Properties>
                            <Where>IndexedColumnsAreNotNull</Where>
                        </DbIndex>
                    </Indexes>
                </ClassMap>
            </ECCustomAttributes>
            <ECProperty propertyName="FirstName" typeName="string"/>
            <ECProperty propertyName="LastName" typeName="string"/>
            <ECProperty propertyName="Birthday" typeName="dateTime"/>
            ...
        </ECEntityClass>

    @section CustomPropertyMapDescription Custom mapping for ECProperties

    Customizing the mapping for an ECProperty is done by applying the @b PropertyMap custom attribute to the respective ECProperty.
    (ECDb will only look for it in local attributes on the ECProperty)

    Description of the PropertyMap properties:

    - <b>ColumnName</b> (optional): Specifies the column name. If not specified, the ECProperty name is used. The column name must
    follow EC naming rules.
    - <b>IsNullable</b> (optional): If false, values must not be NULL. Might not be honoured when multiple ECClasses are stored in a single table or depending on MapStrategy.
    - <b>IsUnique</b> (optional): If true, values must be unique for this ECProperty. Might not be honoured when multiple ECClasses are stored in a single table or depending on MapStrategy.
    - <b>Collation</b> (optional): Specifies the string comparison mode for this property. Possible values:
        - <CODE>Binary</CODE>: (default): bit to bit matching.
        - <CODE>NoCase</CODE>: The same as binary, except the 26 upper case characters of ASCII are folded to their lower case equivalents before the comparison is performed. Note that is folds only ASCII not full UTF.
        - <CODE>RTrim</CODE>: The same as binary, except that trailing space characters are ignored.​

    ###Examples

    #### Property custom name

        <ECProperty propertyName="Id" typeName="int">
            <ECCustomAttributes>
                <PropertyMap xmlns="ECDbMap.01.00">
                    <ColumnName>assetid</ColumnName>
                </PropertyMap>
            </ECCustomAttributes>
        </ECProperty>

    #### Case-insensitive Collation

        <ECProperty propertyName="Name" typeName="string">
            <ECCustomAttributes>
               <PropertyMap xmlns="ECDbMap.01.00">
                    <Collation>NoCase</Collation>
               </PropertyMap>
            </ECCustomAttributes>
        </ECProperty>

    @section CustomRelationshipMapDescription Custom mapping for ECRelationshipClasses

    Please read @ref ECDbRelationshipMappingRules before.

    Customizing the mapping for an ECRelationshipClass is done by applying either the @b ForeignKeyRelationshipMap or the @b LinkTableRelationshipMap
    custom attribute to the respective ECRelationshipClass. (ECDb will only look for it in local attributes on the ECRelationshipClass)

    @note You have to decide upfront whether the relationship class should be mapped as a foreign key relationship or as a link table. Once decided you
    apply the respective custom attribute to the ECRelationshipClass.
    @note Any ECRelationship can be mapped as a link table. However not all ECRelationships can be mapped as foreign key relationships. In that
    case ECDb will fail the schema import and log the reason why it couldn't import the schema.

    Description of the @b ForeignKeyRelationshipMap properties:
    - <b>OnDeleteAction</b>: Possible values: NoAction (default), Cascade (deletes child rows when parent row is deleted), Restrict (cannot delete parent if it still has children).
    - <b>OnUpdateAction</b>: Possible values: NoAction (default) or Cascade (updates child foreign key when parent primary key is updated).
    - <b>CreateIndex</b>: If true (default), an index will be created on the foreign key column(s). If false, no index will be created.
    - <b>ForeignKeyColumn</b>: (optional) Defines the foreign key column. This should only be set if neither a 
    @ref BentleyApi::ECN::NavigationECProperty "NavigationECProperty" nor a @ref BentleyApi::ECN::ECRelationshipConstraintClass::GetKeys "Key property"
    is defined on the respective constraint class, because in that case the mapping of the Key property is considered. If this value is not set and
    neither a Key property nor a NavigationECProperty was specified, %ECDb generates a column with a default name.

    Description of the @b LinkTableRelationshipMap properties:
    - <b>SourceECInstanceIdColumn</b>: (optional) Defines the column to which the ECInstanceId of the source constraint is mapped to.
    If not set, %ECDb generates a column with a default name.
    - <b>SourceECClassIdColumn</b>: (optional) Defines the source constraint's ECClassId column. If this property is not set, %ECDb generates a column with a default name.
    In many cases a class id column is not needed at all. %ECDb will ignore this property in that case.
    - <b>TargetECInstanceIdColumn</b>: (optional) Defines the column to which the ECInstanceId of the target constraint is mapped to.
    If not set, %ECDb generates a column with a default name.
    - <b>TargetECClassIdColumn</b>: (optional) Defines the target constraint's ECClassId column. If this property is not set, %ECDb generates a column with a default name.
    In many cases a class id column is not needed at all. %ECDb will ignore this property in that case.
    - <b>AllowDuplicateRelationship</b>: (optional) If false (default), no duplicate entries for a given relationship instance
    can be inserted. If true, duplicate relationship instances can be inserted. Cardinality must not be violated though. E.g.
    there cannot be duplicate relationships with a cardinality of 1:1. @b Note: The flag is not applied to subclasses of this relationship class.

    ####Examples

        <ECRelationshipClass typeName="HardwareUsedByEmployee" strength="referencing">
            <ECCustomAttributes>
                <LinkTableRelationshipMap xmlns="ECDbMap.01.00">
                    <SourceECInstanceIdColumn>EmployeeId</SourceECInstanceIdColumn>
                    <TargetECInstanceIdColumn>HardwareId</TargetECInstanceIdColumn>
                </LinkTableRelationshipMap>
            </ECCustomAttributes>
            <Source cardinality="(0,N)" roleLabel="Employee using hardware" polymorphic="True">
                <Class class="Employee" />
            </Source>
            <Target cardinality="(0,N)" roleLabel="Hardware assigned to employee" polymorphic="True">
                <Class class="Hardware" />
            </Target>
        </ECRelationshipClass>


        <ECRelationshipClass typeName="FolderHasFiles" strength="embedding">
            <ECCustomAttributes>
                <ForeignKeyRelationshipMap xmlns="ECDbMap.01.00">
                    <OnDeleteAction>Cascade</OnDeleteAction>
                </ForeignKeyRelationshipMap>
            </ECCustomAttributes>
            <Source cardinality="(1,1)" polymorphic="True">
                <Class class="Folder" />
            </Source>
            <Target cardinality="(0,N)" polymorphic="True">
                <Class class="File" />
            </Target>
        </ECRelationshipClass>

    @see @ref ECDbOverview
    */

    /**
    @page ECDbFileInfo File-backed ECInstances
    %ECDb provides basic support for file-backed ECInstances. Every %ECDb file contains the system ECSchema
    @b ECDb_FileInfo. The ECClass @b FileInfo and its subclasses are used to describe the file to which
    an ECInstance is associated. The ECClass @b FileInfoOwnership is used to relate a @b FileInfo to its owning
    ECInstance.
    
    With the help of that ECSchema you can just use ECSQL to create or delete FileInfo instances, and 
    to relate them to its owning ECInstances.
    
    @note
    ECDb does not automatically manage any referential integrity between FileInfos and their owning
    ECInstances. You can either do that manually by deleting from the FileInfo and FileInfoOwnership ECClasses
    (via ECSQL DELETE) or you can use the method @ref BentleyApi::BeSQLite::EC::ECDb::Purge "ECDb::Purge" to clean-up 
    orphaned FileInfo instances.
    
    @see @ref ECDbOverview
    */
