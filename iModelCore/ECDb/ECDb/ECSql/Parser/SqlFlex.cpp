#line 2 "d:\\dev\\dgndb\\bim20dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "d:\\dev\\dgndb\\bim20dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void SQLyyrestart (FILE *input_file ,yyscan_t yyscanner );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void SQLyy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void SQLyy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void SQLyypop_buffer_state (yyscan_t yyscanner );

static void SQLyyensure_buffer_stack (yyscan_t yyscanner );
static void SQLyy_load_buffer_state (yyscan_t yyscanner );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *SQLyyalloc (yy_size_t ,yyscan_t yyscanner );
void *SQLyyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void SQLyyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1488] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,  131,  137,  135,  133,  132,  135,   96,  124,   96,
       88,   90,   89,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   96,  122,   96,   98,   98,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  125,
      123,  126,   96,   96,  106,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   96,  106,  135,  131,

      131,  131,  131,  129,   96,   96,   96,   96,   88,   90,
       89,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  130,   96,  133,   94,    0,   91,   93,   92,    0,
        0,    4,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,   48,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   61,   63,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       95,  100,    0,  101,   98,    0,    0,   97,   97,   97,
        4,   97,   97,   97,   97,   97,   97,   11,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   41,
       48,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   61,   63,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  121,
      111,  121,  121,  121,  106,  121,  105,  105,  105,    4,
      105,  105,  105,  105,  105,  105,   11,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,   41,   48,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
       61,   63,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  117,  121,
      121,  121,  106,  121,    0,  127,  131,  131,   94,  131,
       91,   93,   92,  131,  131,    4,  131,  131,  131,  131,
      131,  131,   11,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,   41,   48,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,   61,   63,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,   95,    0,  134,    1,    2,    3,
        5,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   44,    0,    0,    0,    0,    0,
        0,   54,   56,    0,   58,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,   72,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
      101,    0,    0,  102,   99,    1,    2,    3,    5,    6,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   28,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   44,   97,   97,   97,   97,   97,   97,   54,
       56,   97,   58,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   70,   97,   97,   72,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,    0,  114,  121,  109,
      121,  106,    0,  112,    1,    2,    3,    5,    6,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,   28,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   44,  105,  105,  105,  105,  105,  105,   54,   56,
      105,   58,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   70,  105,  105,   72,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,    0,  120,  115,  121,  121,
      106,    0,  118,  127,    0,  127,  131,  131,    1,    2,
        3,    5,    6,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   28,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,   44,  131,  131,  131,  131,

      131,  131,   54,   56,  131,   58,  131,  131,  131,  131,
      131,  131,  131,  131,  131,   70,  131,  131,   72,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,    0,
        0,    0,   10,    0,   12,   13,    0,    0,    0,    0,
       20,    0,    0,   23,    0,    0,    0,   27,    0,    0,
        0,    0,    0,    0,    0,   37,   38,    0,    0,    0,
        0,    0,    0,   47,   49,   50,   51,    0,   53,    0,
        0,   59,    0,   62,    0,    0,   66,    0,    0,    0,
       71,    0,   74,   75,   77,    0,    0,    0,    0,    0,
        0,    0,   86,    0,    0,  103,   97,   97,   97,   10,

       97,   12,   13,   97,   97,   97,   97,   20,   97,   97,
       23,   97,   97,   97,   27,   97,   97,   97,   97,   97,
       97,   97,   37,   38,   97,   97,   97,   97,   97,   97,
       47,   49,   50,   51,   97,   53,   97,   97,   59,   97,
       62,   97,   97,   66,   97,   97,   97,   71,   97,   74,
       75,   77,   97,   97,   97,   97,   97,   97,   97,   86,
       97,  114,  121,    0,  113,  106,  112,  105,  105,  105,
       10,  105,   12,   13,  105,  105,  105,  105,   20,  105,
      105,   23,  105,  105,  105,   27,  105,  105,  105,  105,
      105,  105,  105,   37,   38,  105,  105,  105,  105,  105,

      105,   47,   49,   50,   51,  105,   53,  105,  105,   59,
      105,   62,  105,  105,   66,  105,  105,  105,   71,  105,
       74,   75,   77,  105,  105,  105,  105,  105,  105,  105,
       86,  105,  120,    0,  119,  121,  106,  118,    0,  127,
      131,  131,  131,   10,  131,   12,   13,  131,  131,  131,
      131,   20,  131,  131,   23,  131,  131,  131,   27,  131,
      131,  131,  131,  131,  131,  131,   37,   38,  131,  131,
      131,  131,  131,  131,   47,   49,   50,   51,  131,   53,
      131,  131,   59,  131,   62,  131,  131,   66,  131,  131,
      131,   71,  131,   74,   75,   77,  131,  131,  131,  131,

      131,  131,  131,   86,  131,    0,    0,    0,    0,    0,
       15,   16,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,   33,   34,    0,   39,    0,   42,    0,   45,
        0,    0,   52,   55,    0,    0,   64,   65,   68,    0,
        0,    0,    0,   78,    0,    0,    0,   82,   84,    0,
       87,   97,   97,   97,   97,   97,   15,   16,   97,   97,
       97,   97,   97,   97,   97,   29,   97,   97,   33,   34,
       97,   39,   97,   42,   97,   45,   97,   97,   52,   55,
       97,   97,   64,   65,   68,   97,   97,   97,   97,   78,
       97,   97,   97,   82,   84,   97,   87,  107,  113,  105,

      105,  105,  105,  105,   15,   16,  105,  105,  105,  105,
      105,  105,  105,   29,  105,  105,   33,   34,  105,   39,
      105,   42,  105,   45,  105,  105,   52,   55,  105,  105,
       64,   65,   68,  105,  105,  105,  105,   78,  105,  105,
      105,   82,   84,  105,   87,  119,  108,    0,  128,  131,
      131,  131,  131,  131,   15,   16,  131,  131,  131,  131,
      131,  131,  131,   29,  131,  131,   33,   34,  131,   39,
      131,   42,  131,   45,  131,  131,   52,   55,  131,  131,
       64,   65,   68,  131,  131,  131,  131,   78,  131,  131,
      131,   82,   84,  131,   87,    0,    0,    9,    0,   14,

        0,    0,   22,    0,   25,    0,   30,   31,   32,    0,
       40,   43,    0,    0,    0,   60,    0,   69,   73,    0,
       79,    0,   81,   85,    0,   97,   97,    9,   97,   14,
       97,   97,   22,   97,   25,   97,   30,   31,   32,   97,
       40,   43,   97,   97,   97,   60,   97,   69,   73,   97,
       79,   97,   81,   85,   97,  121,  105,  105,    9,  105,
       14,  105,  105,   22,  105,   25,  105,   30,   31,   32,
      105,   40,   43,  105,  105,  105,   60,  105,   69,   73,
      105,   79,  105,   81,   85,  105,  121,  128,  128,  131,
      131,    9,  131,   14,  131,  131,   22,  131,   25,  131,

       30,   31,   32,  131,   40,   43,  131,  131,  131,   60,
      131,   69,   73,  131,   79,  131,   81,   85,  131,    0,
        7,    8,    0,   21,    0,    0,   35,   44,    0,   57,
        0,    0,   80,   83,   97,    7,    8,   97,   21,   97,
       97,   35,   44,   97,   57,   97,   97,   80,   83,  110,
      105,    7,    8,  105,   21,  105,  105,   35,   44,  105,
       57,  105,  105,   80,   83,  116,  128,  131,    7,    8,
      131,   21,  131,  131,   35,   44,  131,   57,  131,  131,
       80,   83,   36,    0,   24,    0,    0,   67,    0,   36,
       97,   24,   97,   97,   67,   97,   36,  105,   24,  105,

      105,   67,  105,   36,  131,   24,  131,  131,   67,  131,
        0,    0,    0,   46,   76,   97,   97,   97,   46,   76,
      105,  105,  105,   46,   76,  131,  131,  131,   46,   76,
        0,    0,    0,   97,   97,   97,  105,  105,  105,  131,
      131,  131,    0,    0,    0,   97,   97,   97,  105,  105,
      105,  131,  131,  131,   17,   18,   26,   17,   18,   26,
       17,   18,   26,   17,   18,   26,    0,   97,  105,  131,
        0,   97,  105,  131,    0,   97,  105,  131,    0,   97,
      105,  131,   19,   19,   19,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   11,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   51,   11,   80,   11,    9,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    3,    8,    1,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        9
    } ;

static yyconst flex_int16_t yy_base[1497] =
    {   0,
        0,    0,   81,    0,  162,    0,  230,  237,  244,  251,
      271,    0,  662, 3474,  351, 3474,  635, 3474, 3474,  599,
      333, 3474,  579,  321,  333,  335,  346,  380,  385,  319,
      338,  327,  329,  386,  351,  392,  431,  429,  435,  439,
      427,  348,  351,  509, 3474,  466,  496,  501,  485,  504,
      497,  516,  549,  554,  378,  397,  489,  395,    0,  565,
      513,  561,  600,  578,  605,  570,  613,  450,  445, 3474,
     3474, 3474,    0,  670,  677,  662,  682,  678,  726,  718,
      733,  436,  509,  605,  496,    0,  680,  556,  728,  761,
      776,  779,  779,  776,  523,  548,  838,  845,  424,    0,

      432,    0,  561, 3474,    0,    0,  533, 3474,  466,    0,
      504,  830,  850,  846,  894,  886,  901,  549,  612,  609,
      600,  848,  629,  896,  929,  944,  947,  947,  944,  630,
      643, 3474,  413,  657, 3474,  484, 3474, 3474, 3474,  661,
      684,  674,  679,  687,  713,  725,  729,  732, 3474,  738,
      785,  774,  775,  792,  971,  806,  824,  829,  837,  854,
      880,  896,  966,  895,  900,  907,  926,  945,  951,  949,
      988, 3474,  965,  974,  988,  979,  990,  991,  991,  993,
     1003, 1010, 1005, 1014, 1000, 1020, 1016, 1012, 1013, 1013,
     1009, 1016, 1027, 1022, 1017, 1048, 1037, 1039, 1048, 1046,

     3474, 1079, 1104, 1109, 1114, 1128,    0,    0, 1069, 1107,
     1080, 1093, 1112, 1097, 1110, 1110, 1111,    0, 1108, 1115,
     1115, 1113, 1113, 1133, 1115, 1114, 1118, 1119, 1137, 1139,
     1142, 1166, 1137, 1135, 1133, 1143, 1160, 1158, 1155, 1169,
        0, 1173, 1178, 1179, 1171, 1171, 1172, 1173, 1174, 1184,
     1191, 1187, 1196, 1183, 1204, 1200, 1196, 1215, 1196, 1192,
     1203, 1225, 1218, 1212, 1231, 1237, 1234, 1232, 1241,    0,
     1260, 1288, 1292, 1296, 1304, 1312,    0, 1236, 1288, 1271,
     1301, 1307, 1291, 1298, 1299, 1300,    0, 1297, 1304, 1303,
     1301, 1300, 1316, 1304, 1303, 1307, 1308, 1325, 1328, 1327,

     1356, 1321, 1319, 1332, 1351, 1355, 1353, 1347, 1356,    0,
     1362, 1366, 1367, 1359, 1357, 1360, 1362, 1363, 1372, 1379,
     1374, 1383, 1369, 1389, 1384, 1380, 1405, 1380, 1390, 1410,
     1419, 1413, 1406, 1419, 1425, 1422, 1420, 1428, 1471, 1455,
     1476, 1447, 1491, 1499, 1480, 1509,    0,  721,    0, 1528,
        0,    0,    0, 1467, 1486, 1494, 1491, 1497, 1492, 1500,
     1500, 1501,    0, 1498, 1509, 1503, 1502, 1501, 1542, 1504,
     1510, 1514, 1515, 1531, 1533, 1532, 1564, 1527, 1527, 1535,
     1541, 1545, 1543, 1547, 1556,    0, 1563, 1568, 1567, 1565,
     1564, 1567, 1569, 1571, 1580, 1587, 1582, 1591, 1577, 1599,

     1599, 1599, 1607, 1599, 1596, 1602, 1611, 1612, 1607, 1621,
     1627, 1624, 1624, 1629,    0,  436, 3474, 3474, 3474, 3474,
     3474, 3474, 1626, 1615, 1638, 1644, 1635, 1644, 1637, 1637,
     1633, 1635, 1650, 1657, 1664, 1667, 1652, 1671, 1657, 1672,
     3474, 1682, 1667, 1681, 1669, 1670, 1689, 1668, 1679, 1682,
     1674, 1687, 1692, 1695, 1727, 1690, 1685, 1702, 1699, 1702,
     1707, 3474, 3474, 1690, 3474, 1704, 1708, 1703, 1725, 1726,
     1723, 1733, 1731, 1739, 3474, 1741, 1738, 3474, 1734, 1744,
     1745, 1736, 1738, 1753, 1741, 1737, 1759, 1749, 1805, 1809,
     1813, 1821, 1827, 1831,    0,    0,    0,    0,    0,    0,

     1754, 1743, 1787, 1808, 1800, 1822, 1815, 1815, 1811, 1813,
     1827, 1832, 1829, 1832, 1816, 1835, 1821, 1835,    0, 1842,
     1826, 1840, 1827, 1829, 1848, 1827, 1838, 1840, 1832, 1845,
     1850, 1863, 1881, 1856, 1865, 1882, 1879, 1882, 1887,    0,
        0, 1870,    0, 1880, 1874, 1869, 1890, 1893, 1888, 1893,
     1890, 1898,    0, 1899, 1896,    0, 1892, 1902, 1903, 1894,
     1896, 1911, 1899, 1905, 1925, 1929, 1956, 1966, 1970, 1974,
     1990, 1997, 2001, 2005,    0,    0,    0,    0,    0, 1933,
     1922, 1945, 1950, 1965, 1996, 1990, 1990, 1986, 1989, 2004,
     2009, 2006, 2009, 1993, 2012, 1998, 2012,    0, 2017, 2001,

     2015, 2002, 2003, 2022, 2001, 2012, 2014, 2006, 2019, 2024,
     2030, 2064, 2023, 2040, 2056, 2053, 2056, 2062,    0,    0,
     2046,    0, 2056, 2051, 2046, 2067, 2068, 2062, 2067, 2064,
     2072,    0, 2073, 2071,    0, 2067, 2077, 2078, 2069, 2071,
     2086, 2074, 2072, 2092, 2105, 2133, 2137, 2141, 2149, 2161,
     2168, 2172, 2176, 2193, 2184, 2201, 2219,    0,    0,    0,
        0,    0,    0, 2107, 2097, 2120, 2143, 2169, 2179, 2169,
     2169, 2170, 2173, 2187, 2200, 2198, 2202, 2186, 2205, 2191,
     2204,    0, 2213, 2198, 2217, 2204, 2205, 2224, 2203, 2214,
     2217, 2210, 2224, 2234, 2235, 2252, 2227, 2222, 2239, 2239,

     2242, 2247,    0,    0, 2238,    0, 2249, 2244, 2239, 2260,
     2261, 2260, 2266, 2263, 2271,    0, 2275, 2272,    0, 2268,
     2278, 2279, 2270, 2275, 2290, 2283, 2277, 2296, 2288, 2277,
     2302, 2290, 3474, 2310, 3474, 3474, 2308, 2299, 2302, 2317,
     3474, 2302, 2304, 3474, 2316, 2318, 2320, 3474, 2317, 2309,
     2322, 2319, 2335, 2321, 2341, 3474, 3474, 2327, 2331, 2329,
     2331,  414, 2348, 3474, 3474, 3474, 3474, 2336, 3474, 2349,
     2340, 3474, 2355, 3474, 2346, 2347, 3474, 2353, 2373, 2374,
     3474, 2365, 3474, 2361, 3474, 2367, 2361, 2368, 2368, 2383,
     2386, 2384, 3474, 2391, 2405, 2421, 2378, 2398, 2387,    0,

     2402,    0,    0, 2409, 2402, 2404, 2419,    0, 2405, 2407,
        0, 2419, 2417, 2419,    0, 2417, 2410, 2421, 2418, 2434,
     2420, 2440,    0,    0, 2426, 2429, 2426, 2427,  411, 2441,
        0,    0,    0,    0, 2426,    0, 2441, 2432,    0, 2449,
        0, 2443, 2445,    0, 2445, 2474, 2477,    0, 2467,    0,
     2463,    0, 2470, 2464, 2471, 2467, 2482, 2486, 2485,    0,
     2490, 2504, 2508, 2533, 2537, 2542, 2546, 2494, 2514, 2503,
        0, 2518,    0,    0, 2533, 2523, 2525, 2540,    0, 2528,
     2531,    0, 2544, 2542, 2543,    0, 2540, 2532, 2542, 2539,
     2555, 2541, 2561,    0,    0, 2547, 2550, 2547, 2548,  363,

     2561,    0,    0,    0,    0, 2547,    0, 2561, 2552,    0,
     2570,    0, 2559, 2563,    0, 2580, 2599, 2599,    0, 2589,
        0, 2586,    0, 2593, 2588, 2596, 2592, 2606, 2609, 2607,
        0, 2611, 2625, 2629, 2633, 2654, 2661, 2665, 2669, 2686,
     2616, 2662, 2651,    0, 2665,    0,    0, 2662, 2652, 2654,
     2669,    0, 2654, 2656,    0, 2668, 2670, 2671,    0, 2668,
     2660, 2670, 2667, 2683, 2669, 2689,    0,    0, 2675, 2678,
     2675, 2676,  360, 2690,    0,    0,    0,    0, 2687,    0,
     2701, 2692,    0, 2719,    0, 2707, 2709,    0, 2708, 2727,
     2727,    0, 2717,    0, 2713,    0, 2719, 2713, 2720, 2720,

     2734, 2737, 2735,    0, 2739, 2744, 2741, 2722, 2747, 2729,
     3474, 3474, 2736, 2739, 2747, 2741, 2760, 2751, 2762, 3474,
     2748, 2763, 3474, 3474, 2765, 3474, 2778, 3474, 2766, 3474,
     2782, 2769, 3474, 3474, 2788, 2770, 3474, 3474, 3474, 2790,
     2772, 2786, 2778, 3474, 2794, 2777, 2796, 3474, 2783, 2802,
     3474, 2803, 2800, 2781, 2806, 2788,    0,    0, 2795, 2798,
     2808, 2809, 2819, 2810, 2821,    0, 2820, 2822,    0,    0,
     2825,    0, 2837,    0, 2825,    0, 2841, 2828,    0,    0,
     2847, 2829,    0,    0,    0, 2849, 2831, 2849, 2837,    0,
     2853, 2836, 2855,    0, 2842, 2861,    0,  764, 2871, 2866,

     2863, 2846, 2880, 2862,    0,    0, 2869, 2872, 2887, 2879,
     2889, 2880, 2893,    0, 2879, 2882,    0,    0, 2884,    0,
     2896,    0, 2884,    0, 2900, 2887,    0,    0, 2906, 2888,
        0,    0,    0, 2908, 2894, 2908, 2896,    0, 2912, 2895,
     2914,    0, 2901, 2924,    0, 2947,  812, 2958, 2963, 2958,
     2955, 2936, 2961, 2943,    0,    0, 2950, 2953, 2961, 2953,
     2963, 2954, 2965,    0, 2951, 2953,    0,    0, 2955,    0,
     2967,    0, 2955,    0, 2971, 2958,    0,    0, 2977, 2959,
        0,    0,    0, 2979, 2961, 2975, 2963,    0, 2979, 2962,
     2981,    0, 2968, 3016,    0, 3000, 3005, 3474, 3006, 3474,

     3001, 3002, 3474, 3020, 3474, 3008, 3474, 3474, 3474, 3021,
     3474, 3474, 3008, 3022, 3016, 3474, 3026, 3474, 3474, 3029,
     3474, 3017, 3474, 3474, 3014, 3015, 3020,    0, 3021,    0,
     3016, 3017,    0, 3035,    0, 3023,    0,    0,    0, 3036,
        0,    0, 3023, 3037, 3031,    0, 3041,    0,    0, 3044,
        0, 3061,    0,    0, 3058, 3085, 3063, 3068,    0, 3069,
        0, 3064, 3065,    0, 3083,    0, 3071,    0,    0,    0,
     3084,    0,    0, 3071, 3085, 3079,    0, 3089,    0,    0,
     3092,    0, 3080,    0,    0, 3077, 3104, 3108, 3114, 3107,
     3112,    0, 3113,    0, 3108, 3109,    0, 3127,    0, 3115,

        0,    0,    0, 3128,    0,    0, 3115, 3129, 3123,    0,
     3133,    0,    0, 3136,    0, 3124,    0,    0, 3121, 3136,
     3474, 3474,  301, 3474, 3121, 3122, 3474, 3474, 3140, 3474,
     3133, 3132, 3474, 3474, 3142,    0,    0,  213,    0, 3127,
     3128,    0,    0, 3146,    0, 3139, 3138,    0,    0, 3189,
     3181,    0,    0,  206,    0, 3166, 3167,    0,    0, 3185,
        0, 3178, 3177,    0,    0, 3199, 3203, 3195,    0,    0,
      199,    0, 3180, 3181,    0,    0, 3199,    0, 3192, 3191,
        0,    0, 3474, 3201, 3474, 3197, 3187, 3474, 3192,    0,
     3205,    0, 3201, 3191,    0, 3196,    0, 3222,    0, 3211,

     3202,    0, 3207,    0, 3223,    0, 3215, 3224,    0, 3229,
     3245, 3238, 3233, 3474, 3474, 3256, 3249, 3244,    0,    0,
     3259, 3252, 3247,    0,    0, 3262, 3255, 3250,    0,    0,
     3246, 3254, 3254, 3249, 3257, 3264, 3259, 3267, 3267, 3262,
     3270, 3270, 3280, 3295, 3282, 3297, 3298, 3285, 3300, 3301,
     3296, 3311, 3312, 3299, 3474, 3300, 3474,    0, 3301,    0,
        0, 3302,    0,    0, 3303,    0, 3303, 3304, 3305, 3306,
     3326, 3327, 3335, 3336, 3325, 3326, 3327, 3328, 3326, 3327,
     3342, 3343, 3474,    0,    0,    0, 3474, 3408, 3414, 3419,
     3428, 3437, 3446,  239, 3455, 3464

    } ;

static yyconst flex_int16_t yy_def[1497] =
    {   0,
     1487,    1, 1487,    3, 1487,    5,    5,    5,    5,    5,
     1487,   11, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1487,
     1487, 1487, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1489, 1489, 1491, 1492,

     1492, 1492, 1492, 1487, 1492, 1492, 1492, 1487, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1487, 1492, 1487, 1487, 1493, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1494, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1489, 1489,
     1489, 1489, 1489, 1489, 1491, 1491, 1492, 1492, 1492, 1495,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1494, 1488, 1488, 1488, 1488, 1488,

     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1487, 1489, 1489, 1489,
     1489, 1489, 1487, 1489, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1487, 1489, 1489, 1489, 1489,
     1489, 1487, 1489, 1491, 1487, 1491, 1495, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488,

     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1487, 1489, 1487, 1489, 1489, 1487, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1487, 1487, 1489, 1489, 1489, 1487, 1496, 1491,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1487, 1490,

     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1487, 1489, 1496, 1496, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1487, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1489, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1489, 1496, 1496, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1489, 1496, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488,
     1490, 1490, 1490, 1490, 1490, 1492, 1492, 1492, 1492, 1492,
     1487, 1487, 1487, 1488, 1488, 1488, 1490, 1490, 1490, 1492,
     1492, 1492, 1487, 1487, 1487, 1488, 1488, 1488, 1490, 1490,
     1490, 1492, 1492, 1492, 1487, 1487, 1487, 1488, 1488, 1488,
     1490, 1490, 1490, 1492, 1492, 1492, 1487, 1488, 1490, 1492,
     1487, 1488, 1490, 1492, 1487, 1488, 1490, 1492, 1487, 1488,
     1490, 1492, 1487, 1488, 1490, 1492,    0, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487

    } ;

static yyconst flex_int16_t yy_nxt[3556] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   14,
       18,   21,   22,   23,   18,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   14,   34,   35,   36,   37,
       14,   14,   38,   39,   40,   41,   42,   43,   14,   14,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   14,   34,   35,   36,   37,   14,
       14,   38,   39,   40,   41,   42,   43,   14,   14,   44,
       14,   14,   15,   16,   15,   17,   45,   14,   18,   18,
       19,   18,   18,   18,   18,   20,   46,   47,   48,   48,

       48,   18,   21,   22,   23,   18,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   59,   59,   64,   65,   66,   67,   68,   69,   59,
       59,   59,   70,   59,   71,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       59,   59,   64,   65,   66,   67,   68,   69,   59,   59,
       44,   59,   14,   15,   16,   15,   17,   14,   72,   18,
       18,   19,   18,   18,   18,   73,   20,   74,   75,   75,
       75,   75,   18,   21,   22,   23,   18,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   86,   86,   91,   92,   93,   94,   95,   96,
       86,   86,   86,   70,   14,   14,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   86,   86,   91,   92,   93,   94,   95,   96,   86,
       86,   44,   86,   97,  495,   73,   98,   98,   98,   98,
       97, 1405,   73,   98,   98,   98,   98,   18, 1398,   18,
       99,   99,   99,   99,   18, 1391,   18,   99,   99,   99,
       99,  100,  101,  102,   15,  103,  104,  100,  105,  105,
       19,  106,  106,  106,  106,  107,  106,  100,  100,  100,
      100,  108,  109,  110,  111,  108,  112,  113,  114,  115,

      116,  117,  118,  119,  120,  121,  100,  122,  123,  124,
      125,  100,  100,  126,  127,  128,  129,  130,  131,  100,
      100,  100,  132,  100,  100,  112,  113,  114,  115,  116,
      117,  118,  119,  120,  121,  100,  122,  123,  124,  125,
      100,  100,  126,  127,  128,  129,  130,  131,  100,  100,
      133,  100,  134, 1384,  134,  137,  138,  140,  144,  141,
      150,  169,  145,  170,  142,  171,  146,  143,  173,  147,
      172,  154,  148,  199,  151,  155,  177,  152, 1174,  156,
      153, 1124,  149,  200,  178,  157,  140,  144,  141,  150,
      169,  145,  170,  142,  171,  146,  143,  173,  147,  172,

      154,  148,  199,  151,  155,  177,  152,  158,  156,  153,
      164,  149,  200,  178,  157,  174,  159,  179,  160,  175,
      238,  165,  239,  161,  166,  176,  162,  167,  163, 1076,
      168,  180, 1030,  348,  242,  134,  158,  181,  417,  164,
      346,  346,  346,  346,  174,  159,  179,  160,  175,  238,
      165,  239,  161,  166,  176,  162,  167,  163,  186,  168,
      180,  182,  187,  242,  189,  196,  181,  197,  188,  183,
      198,  193,  194,  184,  190,  268,  185,  269,  307,  191,
      192,  195,  202,  202,  202,  202,  417,  186,  351,  352,
      182,  187,  415,  189,  196,  203,  197,  188,  183,  198,

      193,  194,  184,  190,  268,  185,  269,  307,  191,  192,
      195,  204,  205,  205,  205,  205,  204,  205,  205,  205,
      205,  209,  219,  210,  203,  206,  353,  240,  211,  213,
      206,  212,  241,  214,  308,  311,  220,  215,  246,  221,
      216,  223,  222,  217,  207,  224,  247,  350,  337,  225,
      209,  219,  210,  218,  206,  226,  240,  211,  213,  206,
      212,  241,  214,  308,  311,  220,  215,  246,  221,  216,
      223,  222,  217,  207,  224,  247,  227,  337,  225,  233,
      338,  315,  218,  349,  226,  228,  248,  229,  201,  316,
      234,  383,  230,  235,  243,  231,  236,  232,  244,  237,

      249,  139,  262,  263,  245,  227,  250,  255,  233,  338,
      315,  256,  264,  136,  228,  248,  229,  257,  316,  234,
      383,  230,  235,  243,  231,  236,  232,  244,  237,  249,
      251,  262,  263,  245,  258,  250,  255,  384,  252,  387,
      256,  264,  253,  309,  259,  254,  257,  385,  310,  260,
      261,  265,  386,  266,  391,  413,  267,  135,  134,  251,
      134, 1487,  392,  258, 1487, 1487,  384,  252,  387, 1487,
     1487,  253,  309,  259,  254,  414,  385,  310,  260,  261,
      265,  386,  266,  391,  413,  267,  271,  271,  271,  271,
      273,  392,  274,  275,  275,  275,  275,  418,  278,  272,

      279,  421, 1487,  288,  414,  280,  276,  282,  281,  312,
      422,  283,  419,  313,  423,  284, 1487,  289,  285,  314,
      290,  286,  348,  291,  134, 1487,  418,  278,  272,  279,
      421,  287,  288,  420,  280,  276,  282,  281,  312,  422,
      283,  419,  313,  423,  284,  296,  289,  285,  314,  290,
      286,  292,  291,  317,  297,  293,  298,  424,  302,  294,
      287,  299,  420,  425,  300,  295,  301,  318,  426,  303,
     1487,  427,  304,  319,  296,  305, 1487,  273,  306, 1256,
      292,  428,  317,  297,  293,  298,  424,  302,  294, 1487,
      299,  320,  425,  300,  295,  301,  318,  426,  303,  321,

      427,  304,  319,  322,  305,  324,  323,  306,  327,  325,
      428,  331,  332,  431,  334,  326,  335,  432,  328,  336,
      320,  333,  429,  329,  330, 1287, 1487,  342,  321, 1487,
      430, 1487,  322, 1487,  324,  323,  433,  327,  325, 1487,
      331,  332,  431,  334,  326,  335,  432,  328,  336,  437,
      333,  429,  329,  330,  339,  339,  339,  339,  341,  430,
      342,  343,  343,  343,  343,  433,  354,  340,  355,  438,
     1487,  364,  439,  356,  344,  358,  357,  388,  437,  359,
      440,  389,  441,  360, 1487,  365,  361,  390,  366,  362,
     1487,  367, 1487, 1487, 1487,  354,  340,  355,  438,  363,

      364,  439,  356,  344,  358,  357,  388,  442,  359,  440,
      389,  441,  360,  372,  365,  361,  390,  366,  362,  368,
      367,  393,  373,  369,  374,  443,  378,  370,  363,  375,
     1487,  446,  376,  371,  377,  394,  442,  379, 1487,  447,
      380,  395,  372,  381, 1487, 1487,  382, 1487,  368,  448,
      393,  373,  369,  374,  443,  378,  370, 1487,  375,  396,
      446,  376,  371,  377,  394,  449,  379,  397,  447,  380,
      395,  398,  381,  400,  399,  382,  403,  401,  448,  407,
      408,  450,  410,  402,  411, 1487,  404,  412,  396,  409,
      451,  405,  406,  444,  449,  452,  397, 1487,  456,  445,

      398,  434,  400,  399,  457,  403,  401,  435,  407,  408,
      450,  410,  402,  411,  436,  404,  412,  460,  409,  451,
      405,  406,  444,  458,  452,  459,  453,  456,  445,  463,
      434,  454,  455,  457,  461,  464,  435,  465,  462,  466,
      467,  468,  469,  436,  470,  471,  460,  472,  473,  474,
      476,  477,  458,  478,  459,  453,  479,  475,  463,  480,
      454,  455,  481,  461,  464,  484,  465,  462,  466,  467,
      468,  469,  485,  470,  471,  488,  472,  473,  474,  476,
      477,  482,  478,  483,  486,  479,  475, 1487,  480, 1487,
      487,  481, 1487, 1487,  484,  202,  202,  202,  202, 1487,

     1487,  485, 1487, 1487,  488,  496, 1487,  499,  203, 1487,
      482, 1487,  483,  486, 1487, 1487,  489, 1487,  489,  487,
      490,  490,  490,  490,  500,  491,  491,  491,  491,  204,
      205,  205,  205,  205,  496,  497,  499,  203,  492,  501,
      493,  502,  493,  206,  494,  494,  494,  494,  503,  504,
      505,  506,  507,  500,  509,  510,  498,  511,  515,  516,
      508,  517,  518,  512,  497,  519,  520,  492,  501,  513,
      502,  521,  206,  524,  525,  526,  514,  503,  504,  505,
      506,  507,  527,  509,  510,  498,  511,  515,  516,  508,
      517,  518,  512,  522,  519,  520,  528,  529,  513,  523,

      521,  530,  524,  525,  526,  514,  534,  531,  535,  538,
      541,  527,  532,  533,  536,  539,  537,  542,  543,  540,
      544,  545,  522,  546,  547,  528,  529,  548,  523,  549,
      530,  550,  551,  554,  555,  534,  531,  535,  538,  541,
      556,  532,  533,  536,  539,  537,  542,  543,  540,  544,
      545,  552,  546,  547,  557,  558,  548,  559,  549,  553,
      550,  551,  554,  555,  560,  562,  561,  563,  564,  556,
      566, 1487,  575, 1487,  565, 1487,  271,  271,  271,  271,
      552, 1487, 1487,  557,  558, 1487,  559, 1487,  553,  272,
     1487, 1487, 1487,  560,  562,  561,  563,  564,  578,  566,

      567,  575,  567,  565,  568,  568,  568,  568,  569,  569,
      569,  569,  570,  570,  570,  570,  576,  273,  272,  274,
      572,  572,  572,  572,  573,  571,  573,  578,  574,  574,
      574,  574,  579,  276,  580,  581,  582,  577,  583,  584,
      585,  586,  588,  589,  590,  576,  591,  594,  595,  587,
      596,  597,  592,  598,  571,  599,  600,  603,  604,  593,
     1487,  579,  276,  580,  581,  582,  577,  583,  584,  585,
      586,  588,  589,  590,  605,  591,  594,  595,  587,  596,
      597,  592,  598,  601,  599,  600,  603,  604,  593,  602,
      606,  607,  608,  609,  610,  613,  614,  617,  620,  611,

      612,  618,  615,  605,  616,  619,  621,  622,  623,  624,
      625,  626,  601,  627,  628,  629,  630,  633,  602,  606,
      607,  608,  609,  610,  613,  614,  617,  620,  611,  612,
      618,  615,  634,  616,  619,  621,  622,  623,  624,  625,
      626,  631,  627,  628,  629,  630,  633,  635,  636,  632,
      637,  638,  639,  641,  640,  642,  643,  645, 1487, 1487,
     1487,  634,  644,  650,  650,  650,  650,  646, 1487,  646,
      631,  647,  647,  647,  647, 1487,  635,  636,  632,  637,
      638,  639,  641,  640,  642,  643,  645,  339,  339,  339,
      339,  644,  648,  648,  648,  648,  654,  654,  654,  654,

      340, 1487, 1487,  659,  341,  649,  342,  651,  651,  651,
      651,  652,  655,  652,  660,  653,  653,  653,  653, 1487,
      344,  662,  663, 1487,  664,  656,  656,  656,  656,  340,
      658,  416,  659,  416,  649,  661,  665,  416,  666,  667,
      668,  669,  672,  660,  673,  674,  670,  678,  416,  344,
      662,  663,  416,  664,  671,  679, 1487,  680,  681,  682,
      683,  684, 1487,  687,  661,  665,  688,  666,  667,  668,
      669,  672,  675,  673,  674,  670,  678,  689,  676,  416,
      690,  691,  692,  671,  679,  677,  680,  681,  682,  683,
      684,  685,  687,  693,  694,  688,  697,  686,  698,  695,

      696,  675,  699,  701,  700,  704,  689,  676,  702,  690,
      691,  692,  703,  705,  677,  706,  707,  708,  709,  710,
      685,  711,  693,  694,  712,  697,  686,  698,  695,  696,
      713,  699,  701,  700,  704,  714,  717,  702,  718,  719,
      720,  703,  705,  715,  706,  707,  708,  709,  710,  721,
      711,  716,  722,  712,  723,  725,  724,  726,  729,  713,
      727,  730,  731,  732,  714,  717,  728,  718,  719,  720,
      733,  734,  715,  735,  737,  738,  739,  740,  721,  741,
      716,  722,  742,  723,  725,  724,  726,  729,  736,  727,
      730,  731,  732,  743,  744,  728,  745,  746,  747,  733,

      734,  748,  735,  737,  738,  739,  740,  749,  741,  750,
      751,  742,  752,  753,  754,  755,  756,  736,  757,  758,
      759,  760,  743,  744,  761,  745,  746,  747,  765,  766,
      748,  767,  768,  769,  770,  771,  749, 1487,  750,  751,
      772,  752,  753,  754,  755,  756,  762,  757,  758,  759,
      760,  773,  774,  761,  775,  776,  763,  765,  766,  777,
      767,  768,  769,  770,  771,  778,  764,  779,  780,  772,
      781,  782,  783,  784,  785,  786,  788,  787,  789,  790,
      773,  774,  791,  775,  776,  763,  792,  793,  777,  797,
      798,  794, 1487, 1487,  778,  764,  779,  780, 1487,  781,

      782,  783,  784,  785,  786,  788,  787,  789,  790, 1487,
     1487,  791,  799, 1487, 1487,  792,  793, 1487,  797,  798,
      794,  490,  490,  490,  490,  490,  490,  490,  490,  491,
      491,  491,  491,  795,  800,  795,  801,  796,  796,  796,
      796,  799,  492,  494,  494,  494,  494,  494,  494,  494,
      494,  802,  804,  805,  806,  807,  808,  809,  810,  811,
      812,  813,  814,  800,  815,  801,  803,  816,  817,  818,
      819,  492,  820,  821,  822,  823,  824,  825,  826,  827,
      802,  804,  805,  806,  807,  808,  809,  810,  811,  812,
      813,  814,  828,  815,  832,  803,  816,  817,  818,  819,

      829,  820,  821,  822,  823,  824,  825,  826,  827,  833,
      830,  834,  835,  836,  837,  838,  839,  840,  841,  842,
      831,  828,  843,  832,  844,  845,  846,  847,  848,  849,
      850,  851,  852,  853,  855,  854,  856,  857,  833,  830,
      834,  835,  836,  837,  838,  839,  840,  841,  842,  831,
      858,  843,  859,  844,  845,  846,  847,  848,  849,  850,
      851,  852,  853,  855,  854,  856,  857,  860,  868,  869,
      870,  861,  862,  862,  862,  862,  871, 1487, 1487,  858,
     1487,  859,  568,  568,  568,  568,  863,  863,  863,  863,
      570,  570,  570,  570, 1487, 1487,  860,  868,  869,  870,

      861,  872,  864,  571,  864,  871,  865,  865,  865,  865,
      273, 1487,  274,  866,  866,  866,  866,  867,  867,  867,
      867,  574,  574,  574,  574,  873,  276,  875,  876,  877,
      872,  878,  571,  879,  880,  881,  882,  883,  884,  885,
      874,  886,  887,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  873,  276,  875,  876,  877,  899,
      878,  903,  879,  880,  881,  882,  883,  884,  885,  874,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  898,  900,  904,  905,  906,  907,  899,  908,
      903,  909,  910,  901,  911,  912,  913,  914,  915,  916,

      917,  918,  919,  902,  920,  921,  922,  923,  924,  926,
      925,  927,  928,  904,  905,  906,  907,  929,  908,  930,
      909,  910,  901,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  902,  920,  921,  922,  923,  924,  926,  925,
      927,  928,  941,  931,  942,  943,  929,  932,  930,  933,
      933,  933,  933,  647,  647,  647,  647,  648,  648,  648,
      648,  934, 1487,  934, 1487,  935,  935,  935,  935,  944,
      649,  941,  931,  942,  943, 1487,  932,  936,  936,  936,
      936,  341, 1487,  342,  937,  937,  937,  937,  938,  938,
      938,  938,  653,  653,  653,  653,  655,  344,  944,  649,

      939,  939,  939,  939,  655,  945,  948,  949,  946,  654,
      654,  654,  654,  950, 1487,  951,  952,  940,  940,  940,
      940,  658,  416,  947,  416,  953,  344,  954,  416,  955,
      956,  957,  958,  959,  945,  948,  949,  946,  960,  416,
      961, 1487,  950,  416,  951,  952,  962,  963,  964,  965,
      966,  967,  947,  968,  953,  969,  954,  970,  955,  956,
      957,  958,  959,  971,  972,  976,  977,  960,  978,  961,
      416,  973,  979,  980,  981,  962,  963,  964,  965,  966,
      967,  974,  968,  982,  969,  983,  970,  984,  985,  986,
      987,  975,  971,  972,  976,  977,  988,  978,  989,  990,

      991,  979,  980,  981,  992,  993,  994,  995,  996,  997,
      974,  998,  982,  999,  983, 1000,  984,  985,  986,  987,
      975, 1001, 1002, 1003, 1006,  988, 1004,  989,  990,  991,
     1005, 1007, 1008,  992,  993,  994,  995,  996,  997, 1009,
      998, 1010,  999, 1011, 1000, 1012, 1013, 1014, 1015, 1016,
     1001, 1002, 1003, 1006, 1017, 1004, 1018, 1019, 1020, 1005,
     1007, 1008, 1021, 1022, 1023, 1024, 1025, 1026, 1009, 1027,
     1010, 1028, 1011, 1029, 1012, 1013, 1014, 1015, 1016, 1031,
     1033, 1034, 1035, 1017, 1036, 1018, 1019, 1020, 1037, 1038,
     1032, 1021, 1022, 1023, 1024, 1025, 1026, 1039, 1027, 1040,

     1028, 1041, 1029, 1042, 1043, 1044, 1045, 1046, 1031, 1033,
     1034, 1035, 1047, 1036, 1048, 1049, 1050, 1037, 1038, 1032,
     1051,  796,  796,  796,  796, 1052, 1039, 1053, 1040, 1054,
     1041, 1055, 1042, 1043, 1044, 1045, 1046,  796,  796,  796,
      796, 1047, 1056, 1048, 1049, 1050, 1057, 1058, 1059, 1051,
     1060, 1061, 1062, 1063, 1052, 1064, 1053, 1065, 1054, 1066,
     1055, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
     1079, 1056, 1077, 1080, 1081, 1057, 1058, 1059, 1082, 1060,
     1061, 1062, 1063, 1078, 1064, 1083, 1065, 1084, 1066, 1085,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1079,

     1086, 1077, 1080, 1081, 1087, 1088, 1089, 1082, 1090, 1091,
     1092, 1093, 1078, 1094, 1083, 1095, 1084, 1096, 1085, 1097,
      862,  862,  862,  862, 1098, 1098, 1098, 1098, 1487, 1086,
     1487, 1487, 1487, 1087, 1088, 1089, 1487, 1090, 1091, 1092,
     1093, 1100, 1094, 1101, 1095, 1102, 1096, 1103, 1097, 1099,
     1099, 1099, 1099,  865,  865,  865,  865,  274,  866,  866,
      866,  866,  867,  867,  867,  867, 1104, 1105, 1106, 1107,
     1100,  276, 1101, 1108, 1102, 1109, 1103, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1127, 1125, 1128, 1129, 1104, 1105, 1106, 1107, 1130,

      276, 1131, 1108, 1126, 1109, 1132, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1127, 1125, 1128, 1129, 1133, 1134, 1135, 1136, 1130, 1137,
     1131, 1138, 1126, 1139, 1132, 1140, 1141, 1142, 1143, 1144,
     1145,  933,  933,  933,  933, 1146, 1146, 1146, 1146,  935,
      935,  935,  935, 1133, 1134, 1135, 1136, 1487, 1137, 1487,
     1138, 1487, 1139, 1150, 1140, 1141, 1142, 1143, 1144, 1145,
     1147, 1147, 1147, 1147,  341, 1487, 1487,  937,  937,  937,
      937,  938,  938,  938,  938, 1149, 1149, 1149, 1149,  655,
      344, 1151, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158,

     1159, 1160,  654,  654,  654,  654, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,  344,
     1151, 1175, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1177, 1176, 1178, 1179, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1180, 1181,
     1175, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
     1177, 1176, 1178, 1179, 1191, 1192, 1193, 1194, 1195, 1196,
     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1180, 1181, 1204,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1205,
     1206, 1207, 1208, 1191, 1192, 1193, 1194, 1195, 1196, 1197,

     1198, 1199, 1200, 1201, 1202, 1203, 1209, 1210, 1204, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1205, 1206,
     1207, 1208, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1232, 1209, 1210, 1233, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1234, 1235, 1236,
     1237, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1238, 1239, 1233, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1234, 1235, 1236, 1237,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1099, 1099, 1099,
     1099, 1257, 1258, 1238, 1239, 1259, 1240, 1241, 1242, 1243,

     1244, 1245, 1246, 1247, 1248, 1260, 1261, 1262, 1263, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1264, 1265, 1266, 1267,
     1257, 1258, 1268, 1269, 1259, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1260, 1261, 1262, 1263, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1264, 1265, 1266, 1267, 1286,
     1487, 1268, 1269, 1487, 1270, 1271, 1272, 1273, 1274, 1275,
     1276, 1277, 1278, 1146, 1146, 1146, 1146, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1288, 1288, 1288, 1288, 1286, 1289,
     1289, 1289, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,

     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
     1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,

     1349, 1350, 1350, 1350, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1366, 1366, 1366, 1288, 1288, 1288, 1288, 1348, 1349,
     1367, 1367, 1367, 1367, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1368,
     1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388, 1389,
     1390, 1392, 1393, 1394, 1395, 1396, 1487, 1487, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388, 1389, 1390,

     1392, 1393, 1394, 1395, 1396, 1350, 1350, 1350, 1350, 1397,
     1399, 1400, 1401, 1402, 1403, 1366, 1366, 1366, 1366, 1288,
     1288, 1288, 1288, 1404, 1406, 1407, 1408, 1409, 1410, 1411,
     1413, 1414, 1415, 1416, 1418, 1419, 1420, 1487, 1397, 1399,
     1400, 1401, 1402, 1403, 1423, 1412, 1424, 1425, 1428, 1417,
     1421, 1426, 1404, 1406, 1407, 1408, 1409, 1410, 1411, 1413,
     1414, 1415, 1416, 1418, 1419, 1420, 1422, 1427, 1429, 1430,
     1431, 1432, 1433, 1423, 1412, 1424, 1425, 1428, 1417, 1421,
     1426, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1447, 1422, 1427, 1429, 1430, 1431,

     1432, 1433, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1447, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1475, 1476, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1463, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
     1475, 1476, 1485, 1486, 1487, 1487, 1487, 1487, 1487, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1485, 1486,  208, 1487,  208,  208,  270, 1487,  270,
     1487,  270,  277,  277,  277,  277,  277,  277,  345, 1487,
      345,  345,  345,  345,  345,  345,  345,  347, 1487, 1487,
      347,  347,  347, 1487,  347,  347,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  657,  657,  657,  657,  657,
      657,  657,  657,  657, 1148, 1487, 1148, 1148, 1148, 1148,
     1148, 1148, 1148,   13, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487
    } ;

static yyconst flex_int16_t yy_chk[3556] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7, 1494,    7,    7,    7,    7,    7,
        8, 1371,    8,    8,    8,    8,    8,    9, 1354,    9,
        9,    9,    9,    9,   10, 1338,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   15, 1323,   15,   21,   21,   24,   25,   24,
       26,   30,   25,   31,   24,   32,   25,   24,   33,   25,
       32,   27,   25,   42,   26,   27,   35,   26,  973,   27,
       26,  900,   25,   43,   35,   27,   24,   25,   24,   26,
       30,   25,   31,   24,   32,   25,   24,   33,   25,   32,

       27,   25,   42,   26,   27,   35,   26,   28,   27,   26,
       29,   25,   43,   35,   27,   34,   28,   36,   28,   34,
       55,   29,   56,   28,   29,   34,   28,   29,   28,  829,
       29,   36,  762,  101,   58,  101,   28,   36,  416,   29,
       99,   99,   99,   99,   34,   28,   36,   28,   34,   55,
       29,   56,   28,   29,   34,   28,   29,   28,   38,   29,
       36,   37,   38,   58,   39,   41,   36,   41,   38,   37,
       41,   40,   40,   37,   39,   68,   37,   69,   82,   39,
       39,   40,   46,   46,   46,   46,  136,   38,  109,  109,
       37,   38,  133,   39,   41,   46,   41,   38,   37,   41,

       40,   40,   37,   39,   68,   37,   69,   82,   39,   39,
       40,   47,   47,   47,   47,   47,   48,   48,   48,   48,
       48,   49,   51,   49,   46,   47,  111,   57,   49,   50,
       48,   49,   57,   50,   83,   85,   51,   50,   61,   51,
       50,   52,   51,   50,   47,   52,   61,  107,   95,   52,
       49,   51,   49,   50,   47,   52,   57,   49,   50,   48,
       49,   57,   50,   83,   85,   51,   50,   61,   51,   50,
       52,   51,   50,   47,   52,   61,   53,   95,   52,   54,
       96,   88,   50,  103,   52,   53,   62,   53,   44,   88,
       54,  118,   53,   54,   60,   53,   54,   53,   60,   54,

       62,   23,   66,   66,   60,   53,   62,   64,   54,   96,
       88,   64,   66,   20,   53,   62,   53,   64,   88,   54,
      118,   53,   54,   60,   53,   54,   53,   60,   54,   62,
       63,   66,   66,   60,   65,   62,   64,  119,   63,  121,
       64,   66,   63,   84,   65,   63,   64,  120,   84,   65,
       65,   67,  120,   67,  123,  130,   67,   17,  134,   63,
      134,   13,  123,   65,    0,    0,  119,   63,  121,    0,
        0,   63,   84,   65,   63,  131,  120,   84,   65,   65,
       67,  120,   67,  123,  130,   67,   74,   74,   74,   74,
       75,  123,   75,   75,   75,   75,   75,  140,   76,   74,

       76,  142,    0,   78,  131,   76,   75,   77,   76,   87,
      143,   77,  141,   87,  144,   77,    0,   78,   77,   87,
       78,   77,  348,   78,  348,    0,  140,   76,   74,   76,
      142,   77,   78,  141,   76,   75,   77,   76,   87,  143,
       77,  141,   87,  144,   77,   80,   78,   77,   87,   78,
       77,   79,   78,   89,   80,   79,   80,  145,   81,   79,
       77,   80,  141,  146,   80,   79,   80,   89,  147,   81,
        0,  148,   81,   89,   80,   81,    0, 1098,   81, 1098,
       79,  150,   89,   80,   79,   80,  145,   81,   79,    0,
       80,   90,  146,   80,   79,   80,   89,  147,   81,   90,

      148,   81,   89,   90,   81,   91,   90,   81,   92,   91,
      150,   93,   93,  152,   94,   91,   94,  153,   92,   94,
       90,   93,  151,   92,   92, 1147,    0, 1147,   90,    0,
      151,    0,   90,    0,   91,   90,  154,   92,   91,    0,
       93,   93,  152,   94,   91,   94,  153,   92,   94,  156,
       93,  151,   92,   92,   97,   97,   97,   97,   98,  151,
       98,   98,   98,   98,   98,  154,  112,   97,  112,  157,
        0,  114,  158,  112,   98,  113,  112,  122,  156,  113,
      159,  122,  160,  113,    0,  114,  113,  122,  114,  113,
        0,  114,    0,    0,    0,  112,   97,  112,  157,  113,

      114,  158,  112,   98,  113,  112,  122,  161,  113,  159,
      122,  160,  113,  116,  114,  113,  122,  114,  113,  115,
      114,  124,  116,  115,  116,  162,  117,  115,  113,  116,
        0,  164,  116,  115,  116,  124,  161,  117,    0,  165,
      117,  124,  116,  117,    0,    0,  117,    0,  115,  166,
      124,  116,  115,  116,  162,  117,  115,    0,  116,  125,
      164,  116,  115,  116,  124,  167,  117,  125,  165,  117,
      124,  125,  117,  126,  125,  117,  127,  126,  166,  128,
      128,  168,  129,  126,  129,    0,  127,  129,  125,  128,
      169,  127,  127,  163,  167,  170,  125,    0,  173,  163,

      125,  155,  126,  125,  174,  127,  126,  155,  128,  128,
      168,  129,  126,  129,  155,  127,  129,  176,  128,  169,
      127,  127,  163,  175,  170,  175,  171,  173,  163,  178,
      155,  171,  171,  174,  177,  179,  155,  180,  177,  181,
      182,  183,  184,  155,  185,  186,  176,  187,  188,  189,
      190,  191,  175,  192,  175,  171,  193,  189,  178,  194,
      171,  171,  195,  177,  179,  197,  180,  177,  181,  182,
      183,  184,  198,  185,  186,  200,  187,  188,  189,  190,
      191,  196,  192,  196,  199,  193,  189,    0,  194,    0,
      199,  195,    0,    0,  197,  202,  202,  202,  202,    0,

        0,  198,    0,    0,  200,  209,    0,  211,  202,    0,
      196,    0,  196,  199,    0,    0,  203,    0,  203,  199,
      203,  203,  203,  203,  212,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  209,  210,  211,  202,  204,  213,
      206,  214,  206,  205,  206,  206,  206,  206,  215,  216,
      217,  219,  220,  212,  221,  222,  210,  223,  225,  226,
      220,  227,  228,  224,  210,  229,  230,  204,  213,  224,
      214,  231,  205,  233,  234,  235,  224,  215,  216,  217,
      219,  220,  236,  221,  222,  210,  223,  225,  226,  220,
      227,  228,  224,  232,  229,  230,  237,  238,  224,  232,

      231,  239,  233,  234,  235,  224,  242,  240,  243,  245,
      247,  236,  240,  240,  244,  246,  244,  248,  249,  246,
      250,  251,  232,  252,  253,  237,  238,  254,  232,  255,
      239,  256,  257,  259,  260,  242,  240,  243,  245,  247,
      261,  240,  240,  244,  246,  244,  248,  249,  246,  250,
      251,  258,  252,  253,  262,  263,  254,  264,  255,  258,
      256,  257,  259,  260,  265,  266,  265,  267,  268,  261,
      269,    0,  278,    0,  268,    0,  271,  271,  271,  271,
      258,    0,    0,  262,  263,    0,  264,    0,  258,  271,
        0,    0,    0,  265,  266,  265,  267,  268,  280,  269,

      272,  278,  272,  268,  272,  272,  272,  272,  273,  273,
      273,  273,  274,  274,  274,  274,  279,  275,  271,  275,
      275,  275,  275,  275,  276,  274,  276,  280,  276,  276,
      276,  276,  281,  275,  282,  283,  284,  279,  285,  286,
      288,  289,  290,  291,  292,  279,  293,  294,  295,  289,
      296,  297,  293,  298,  274,  299,  300,  302,  303,  293,
        0,  281,  275,  282,  283,  284,  279,  285,  286,  288,
      289,  290,  291,  292,  304,  293,  294,  295,  289,  296,
      297,  293,  298,  301,  299,  300,  302,  303,  293,  301,
      305,  306,  307,  308,  309,  311,  312,  314,  316,  309,

      309,  315,  313,  304,  313,  315,  317,  318,  319,  320,
      321,  322,  301,  323,  324,  325,  326,  328,  301,  305,
      306,  307,  308,  309,  311,  312,  314,  316,  309,  309,
      315,  313,  329,  313,  315,  317,  318,  319,  320,  321,
      322,  327,  323,  324,  325,  326,  328,  330,  331,  327,
      332,  333,  334,  335,  334,  336,  337,  338,    0,    0,
        0,  329,  337,  342,  342,  342,  342,  340,    0,  340,
      327,  340,  340,  340,  340,    0,  330,  331,  327,  332,
      333,  334,  335,  334,  336,  337,  338,  339,  339,  339,
      339,  337,  341,  341,  341,  341,  345,  345,  345,  345,

      339,    0,    0,  354,  343,  341,  343,  343,  343,  343,
      343,  344,  346,  344,  355,  344,  344,  344,  344,    0,
      343,  356,  357,    0,  358,  346,  346,  346,  346,  339,
      350,  350,  354,  350,  341,  355,  359,  350,  360,  361,
      362,  364,  366,  355,  367,  368,  365,  370,  350,  343,
      356,  357,  350,  358,  365,  371,    0,  372,  373,  374,
      375,  376,    0,  378,  355,  359,  379,  360,  361,  362,
      364,  366,  369,  367,  368,  365,  370,  380,  369,  350,
      381,  382,  383,  365,  371,  369,  372,  373,  374,  375,
      376,  377,  378,  384,  385,  379,  387,  377,  388,  385,

      385,  369,  389,  390,  389,  392,  380,  369,  391,  381,
      382,  383,  391,  393,  369,  394,  395,  396,  397,  398,
      377,  399,  384,  385,  400,  387,  377,  388,  385,  385,
      401,  389,  390,  389,  392,  402,  404,  391,  405,  406,
      407,  391,  393,  403,  394,  395,  396,  397,  398,  408,
      399,  403,  409,  400,  410,  411,  410,  412,  414,  401,
      413,  423,  424,  425,  402,  404,  413,  405,  406,  407,
      426,  427,  403,  428,  429,  430,  431,  432,  408,  433,
      403,  409,  434,  410,  411,  410,  412,  414,  428,  413,
      423,  424,  425,  435,  436,  413,  437,  438,  439,  426,

      427,  440,  428,  429,  430,  431,  432,  442,  433,  443,
      444,  434,  445,  446,  447,  448,  449,  428,  450,  451,
      452,  453,  435,  436,  454,  437,  438,  439,  456,  457,
      440,  458,  459,  460,  461,  464,  442,    0,  443,  444,
      466,  445,  446,  447,  448,  449,  455,  450,  451,  452,
      453,  467,  468,  454,  469,  470,  455,  456,  457,  471,
      458,  459,  460,  461,  464,  472,  455,  473,  474,  466,
      476,  477,  479,  480,  481,  482,  483,  482,  484,  485,
      467,  468,  486,  469,  470,  455,  487,  488,  471,  501,
      502,  488,    0,    0,  472,  455,  473,  474,    0,  476,

      477,  479,  480,  481,  482,  483,  482,  484,  485,    0,
        0,  486,  503,    0,    0,  487,  488,    0,  501,  502,
      488,  489,  489,  489,  489,  490,  490,  490,  490,  491,
      491,  491,  491,  492,  504,  492,  505,  492,  492,  492,
      492,  503,  491,  493,  493,  493,  493,  494,  494,  494,
      494,  506,  507,  508,  509,  510,  511,  512,  513,  514,
      515,  516,  517,  504,  518,  505,  506,  520,  521,  522,
      523,  491,  524,  525,  526,  527,  528,  529,  530,  531,
      506,  507,  508,  509,  510,  511,  512,  513,  514,  515,
      516,  517,  532,  518,  534,  506,  520,  521,  522,  523,

      533,  524,  525,  526,  527,  528,  529,  530,  531,  535,
      533,  536,  537,  538,  539,  542,  544,  545,  546,  547,
      533,  532,  548,  534,  549,  550,  551,  552,  554,  555,
      557,  558,  559,  560,  561,  560,  562,  563,  535,  533,
      536,  537,  538,  539,  542,  544,  545,  546,  547,  533,
      564,  548,  565,  549,  550,  551,  552,  554,  555,  557,
      558,  559,  560,  561,  560,  562,  563,  566,  580,  581,
      582,  566,  567,  567,  567,  567,  583,    0,    0,  564,
        0,  565,  568,  568,  568,  568,  569,  569,  569,  569,
      570,  570,  570,  570,    0,    0,  566,  580,  581,  582,

      566,  584,  571,  570,  571,  583,  571,  571,  571,  571,
      572,    0,  572,  572,  572,  572,  572,  573,  573,  573,
      573,  574,  574,  574,  574,  585,  572,  586,  587,  588,
      584,  589,  570,  590,  591,  592,  593,  594,  595,  596,
      585,  597,  599,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  585,  572,  586,  587,  588,  611,
      589,  613,  590,  591,  592,  593,  594,  595,  596,  585,
      597,  599,  600,  601,  602,  603,  604,  605,  606,  607,
      608,  609,  610,  612,  614,  615,  616,  617,  611,  618,
      613,  621,  623,  612,  624,  625,  626,  627,  628,  629,

      630,  631,  633,  612,  634,  636,  637,  638,  639,  640,
      639,  641,  642,  614,  615,  616,  617,  643,  618,  644,
      621,  623,  612,  624,  625,  626,  627,  628,  629,  630,
      631,  633,  612,  634,  636,  637,  638,  639,  640,  639,
      641,  642,  664,  645,  665,  666,  643,  645,  644,  646,
      646,  646,  646,  647,  647,  647,  647,  648,  648,  648,
      648,  649,    0,  649,    0,  649,  649,  649,  649,  667,
      648,  664,  645,  665,  666,    0,  645,  650,  650,  650,
      650,  651,    0,  651,  651,  651,  651,  651,  652,  652,
      652,  652,  653,  653,  653,  653,  654,  651,  667,  648,

      655,  655,  655,  655,  656,  668,  670,  671,  669,  654,
      654,  654,  654,  672,    0,  673,  674,  656,  656,  656,
      656,  657,  657,  669,  657,  675,  651,  676,  657,  677,
      678,  679,  680,  681,  668,  670,  671,  669,  683,  657,
      684,    0,  672,  657,  673,  674,  685,  686,  687,  688,
      689,  690,  669,  691,  675,  692,  676,  693,  677,  678,
      679,  680,  681,  694,  695,  697,  698,  683,  699,  684,
      657,  696,  700,  701,  702,  685,  686,  687,  688,  689,
      690,  696,  691,  705,  692,  707,  693,  708,  709,  710,
      711,  696,  694,  695,  697,  698,  712,  699,  713,  714,

      715,  700,  701,  702,  717,  718,  720,  721,  722,  723,
      696,  723,  705,  724,  707,  725,  708,  709,  710,  711,
      696,  726,  727,  728,  730,  712,  729,  713,  714,  715,
      729,  731,  732,  717,  718,  720,  721,  722,  723,  734,
      723,  737,  724,  738,  725,  739,  740,  742,  743,  745,
      726,  727,  728,  730,  746,  729,  747,  749,  750,  729,
      731,  732,  751,  752,  753,  754,  755,  758,  734,  759,
      737,  760,  738,  761,  739,  740,  742,  743,  745,  763,
      768,  770,  771,  746,  773,  747,  749,  750,  775,  776,
      763,  751,  752,  753,  754,  755,  758,  778,  759,  779,

      760,  780,  761,  782,  784,  786,  787,  788,  763,  768,
      770,  771,  789,  773,  790,  791,  792,  775,  776,  763,
      794,  795,  795,  795,  795,  797,  778,  798,  779,  799,
      780,  801,  782,  784,  786,  787,  788,  796,  796,  796,
      796,  789,  804,  790,  791,  792,  805,  806,  807,  794,
      809,  810,  812,  813,  797,  814,  798,  816,  799,  817,
      801,  818,  819,  820,  821,  822,  825,  826,  827,  828,
      835,  804,  830,  837,  838,  805,  806,  807,  840,  809,
      810,  812,  813,  830,  814,  842,  816,  843,  817,  845,
      818,  819,  820,  821,  822,  825,  826,  827,  828,  835,

      846,  830,  837,  838,  847,  849,  851,  840,  853,  854,
      855,  856,  830,  857,  842,  858,  843,  859,  845,  861,
      862,  862,  862,  862,  863,  863,  863,  863,    0,  846,
        0,    0,    0,  847,  849,  851,    0,  853,  854,  855,
      856,  868,  857,  869,  858,  870,  859,  872,  861,  864,
      864,  864,  864,  865,  865,  865,  865,  866,  866,  866,
      866,  866,  867,  867,  867,  867,  875,  876,  877,  878,
      868,  866,  869,  880,  870,  881,  872,  883,  884,  885,
      887,  888,  889,  890,  891,  892,  893,  896,  897,  898,
      899,  906,  901,  908,  909,  875,  876,  877,  878,  911,

      866,  913,  880,  901,  881,  914,  883,  884,  885,  887,
      888,  889,  890,  891,  892,  893,  896,  897,  898,  899,
      906,  901,  908,  909,  916,  917,  918,  920,  911,  922,
      913,  924,  901,  925,  914,  926,  927,  928,  929,  930,
      932,  933,  933,  933,  933,  934,  934,  934,  934,  935,
      935,  935,  935,  916,  917,  918,  920,    0,  922,    0,
      924,    0,  925,  941,  926,  927,  928,  929,  930,  932,
      936,  936,  936,  936,  937,    0,    0,  937,  937,  937,
      937,  938,  938,  938,  938,  939,  939,  939,  939,  940,
      937,  942,  941,  943,  945,  948,  949,  950,  951,  953,

      954,  956,  940,  940,  940,  940,  957,  958,  960,  961,
      962,  963,  964,  965,  966,  969,  970,  971,  972,  937,
      942,  974,  943,  945,  948,  949,  950,  951,  953,  954,
      956,  979,  974,  981,  982,  957,  958,  960,  961,  962,
      963,  964,  965,  966,  969,  970,  971,  972,  984,  986,
      974,  987,  989,  990,  991,  993,  995,  997,  998,  999,
      979,  974,  981,  982, 1000, 1001, 1002, 1003, 1005, 1006,
     1007, 1008, 1009, 1010, 1013, 1014, 1015,  984,  986, 1016,
      987,  989,  990,  991,  993,  995,  997,  998,  999, 1017,
     1018, 1019, 1021, 1000, 1001, 1002, 1003, 1005, 1006, 1007,

     1008, 1009, 1010, 1013, 1014, 1015, 1022, 1025, 1016, 1027,
     1029, 1031, 1032, 1035, 1036, 1040, 1041, 1042, 1017, 1018,
     1019, 1021, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053,
     1054, 1055, 1056, 1059, 1060, 1022, 1025, 1061, 1027, 1029,
     1031, 1032, 1035, 1036, 1040, 1041, 1042, 1062, 1063, 1064,
     1065, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054,
     1055, 1056, 1059, 1060, 1067, 1068, 1061, 1071, 1073, 1075,
     1077, 1078, 1081, 1082, 1086, 1087, 1062, 1063, 1064, 1065,
     1088, 1089, 1091, 1092, 1093, 1095, 1096, 1099, 1099, 1099,
     1099, 1100, 1101, 1067, 1068, 1102, 1071, 1073, 1075, 1077,

     1078, 1081, 1082, 1086, 1087, 1103, 1104, 1107, 1108, 1088,
     1089, 1091, 1092, 1093, 1095, 1096, 1109, 1110, 1111, 1112,
     1100, 1101, 1113, 1115, 1102, 1116, 1119, 1121, 1123, 1125,
     1126, 1129, 1130, 1134, 1103, 1104, 1107, 1108, 1135, 1136,
     1137, 1139, 1140, 1141, 1143, 1109, 1110, 1111, 1112, 1144,
        0, 1113, 1115,    0, 1116, 1119, 1121, 1123, 1125, 1126,
     1129, 1130, 1134, 1146, 1146, 1146, 1146, 1135, 1136, 1137,
     1139, 1140, 1141, 1143, 1148, 1148, 1148, 1148, 1144, 1149,
     1149, 1149, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1165, 1166, 1169, 1171, 1173,

     1175, 1176, 1179, 1180, 1184, 1185, 1186, 1187, 1189, 1190,
     1191, 1193, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159,
     1160, 1161, 1162, 1163, 1165, 1166, 1169, 1171, 1173, 1175,
     1176, 1179, 1180, 1184, 1185, 1186, 1187, 1189, 1190, 1191,
     1193, 1194, 1196, 1197, 1199, 1201, 1202, 1204, 1206, 1210,
     1213, 1214, 1215, 1217, 1220, 1222, 1225, 1226, 1227, 1229,
     1231, 1232, 1234, 1236, 1240, 1243, 1244, 1245, 1247, 1250,
     1194, 1196, 1197, 1199, 1201, 1202, 1204, 1206, 1210, 1213,
     1214, 1215, 1217, 1220, 1222, 1225, 1226, 1227, 1229, 1231,
     1232, 1234, 1236, 1240, 1243, 1244, 1245, 1247, 1250, 1252,

     1255, 1256, 1256, 1256, 1256, 1257, 1258, 1260, 1262, 1263,
     1265, 1267, 1271, 1274, 1275, 1276, 1278, 1281, 1283, 1286,
     1287, 1287, 1287, 1287, 1288, 1288, 1288, 1288, 1252, 1255,
     1289, 1289, 1289, 1289, 1257, 1258, 1260, 1262, 1263, 1265,
     1267, 1271, 1274, 1275, 1276, 1278, 1281, 1283, 1286, 1290,
     1291, 1293, 1295, 1296, 1298, 1300, 1304, 1307, 1308, 1309,
     1311, 1314, 1316, 1319, 1320, 1325, 1326, 1329, 1331, 1332,
     1335, 1340, 1341, 1344, 1346, 1347,    0,    0, 1290, 1291,
     1293, 1295, 1296, 1298, 1300, 1304, 1307, 1308, 1309, 1311,
     1314, 1316, 1319, 1320, 1325, 1326, 1329, 1331, 1332, 1335,

     1340, 1341, 1344, 1346, 1347, 1350, 1350, 1350, 1350, 1351,
     1356, 1357, 1360, 1362, 1363, 1366, 1366, 1366, 1366, 1367,
     1367, 1367, 1367, 1368, 1373, 1374, 1377, 1379, 1380, 1384,
     1386, 1387, 1389, 1391, 1393, 1394, 1396,    0, 1351, 1356,
     1357, 1360, 1362, 1363, 1400, 1384, 1401, 1403, 1407, 1391,
     1398, 1405, 1368, 1373, 1374, 1377, 1379, 1380, 1384, 1386,
     1387, 1389, 1391, 1393, 1394, 1396, 1398, 1405, 1408, 1410,
     1411, 1412, 1413, 1400, 1384, 1401, 1403, 1407, 1391, 1398,
     1405, 1416, 1417, 1418, 1421, 1422, 1423, 1426, 1427, 1428,
     1431, 1432, 1433, 1434, 1435, 1398, 1405, 1408, 1410, 1411,

     1412, 1413, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1416, 1417, 1418, 1421, 1422, 1423, 1426, 1427, 1428, 1431,
     1432, 1433, 1434, 1435, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1451,
     1452, 1453, 1454, 1456, 1459, 1462, 1465, 1467, 1468, 1469,
     1470, 1471, 1472, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1451, 1452,
     1453, 1454, 1456, 1459, 1462, 1465, 1467, 1468, 1469, 1470,
     1471, 1472, 1481, 1482,    0,    0,    0,    0,    0, 1473,
     1474, 1475, 1476, 1477, 1478, 1479, 1480,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1481, 1482, 1488,    0, 1488, 1488, 1489,    0, 1489,
        0, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1491,    0,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,    0,    0,
     1492, 1492, 1492,    0, 1492, 1492, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1496,    0, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32	gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
		SQLyyget_lval(yyscanner)->pParseNode=SQLyyget_extra(yyscanner)->NewNode(text, token);	    

#define SQL_NEW_KEYWORD(token) \
		SQLyyget_lval(yyscanner)->pParseNode=SQLyyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = SQLyyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
	SQLyyget_extra(yyscanner)->SQLyyerror(msg); \
}													

//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int SQLyylex_init (yyscan_t* scanner);

int SQLyylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (yyscan_t yyscanner );

int SQLyyget_debug (yyscan_t yyscanner );

void SQLyyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE SQLyyget_extra (yyscan_t yyscanner );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *SQLyyget_in (yyscan_t yyscanner );

void SQLyyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *SQLyyget_out (yyscan_t yyscanner );

void SQLyyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t SQLyyget_leng (yyscan_t yyscanner );

char *SQLyyget_text (yyscan_t yyscanner );

int SQLyyget_lineno (yyscan_t yyscanner );

void SQLyyset_lineno (int line_number ,yyscan_t yyscanner );

int SQLyyget_column  (yyscan_t yyscanner );

void SQLyyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * SQLyyget_lval (yyscan_t yyscanner );

void SQLyyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (yyscan_t yyscanner );
#else
extern int SQLyywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int SQLyylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		SQLyy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1488 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1487 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 100:
case 101:
case 102:
case 103:
case 104:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 109:
case 110:
case 111:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 112:
case 113:
case 114:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 115:
case 116:
case 117:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 118:
case 119:
case 120:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }											 
	YY_BREAK
case 124:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }	
	YY_BREAK
case 127:
/* rule 127 can match eol */
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 133:
YY_RULE_SETUP
{}
	YY_BREAK
case 134:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( SQLyywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1488 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1488 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1487);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	SQLyy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void SQLyy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf ,yyscanner );

	SQLyyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	SQLyy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack(yyscanner);

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void SQLyypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE SQLyyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t SQLyyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *SQLyyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void SQLyyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void SQLyyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void SQLyyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void SQLyyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int SQLyyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void SQLyyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * SQLyyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void SQLyyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* SQLyylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int SQLyylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* SQLyylex_init_extra has the same functionality as SQLyylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to SQLyyalloc in
 * the yyextra field.
 */

int SQLyylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    SQLyyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    SQLyyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	SQLyyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        SQLyyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    SQLyyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr yytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput (yyscanner);
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput (yyscanner);
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	while (!checkeof(ch = yyinput(yyscanner))) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput(yyscanner)) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
        {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
        }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
	sal_Int32 nToken;
	OSL_ENSURE(SQLyyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = SQLyyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	    {
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	    }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(SQLyyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = SQLyyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		    {
		    Utf8String sStmt = SQLyyget_extra(yyscanner)->getStatement();
		    size_t nLength = strlen(text);
		    size_t nPos = SQLyyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
		    if (sStmt[nPos] == ':')
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			    nToken = SQL_TOKEN_NAME; 				
		        }
		    else
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
			    nToken = SQL_TOKEN_STRING;			
		        }
		    }
	}
	return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    SQLyylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    SQLyyset_extra(this,yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    SQLyylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
	    return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
        {
	    m_sErrorMessage.append(": ");
	    Utf8String aError;
	    static sal_Int32 BUFFERSIZE = 256;
	    static sal_Char* Buffer = 0;
	    if(!Buffer)
		    Buffer = new sal_Char[BUFFERSIZE];

	    sal_Char *s = Buffer;
	    sal_Int32 nPos = 1;
	    sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
	    *s++ = ch;
	    while (!checkeof(ch = yyinput(yyscanner))) 
	        {
		    if (ch == ' ') 
		        {
			    if ((ch = yyinput(yyscanner)) != ' ') 
			        {
				    if (!checkeof(ch))
					    unput(ch);
			        }
			    *s = '\0';
			    aError.assign(Buffer);
			    break;
		        }
		    else
		        {
			    *s++ = ch;
			    if (++nPos == BUFFERSIZE)
			        {
				    Utf8String aBuf(Buffer);
				    delete[] Buffer;
				    BUFFERSIZE *=2;
				    Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
					    *Buffer = aBuf[i];
				    s = &Buffer[nPos];
			        }
		        }
	        }

	    m_sErrorMessage += aError;
	    delete[] Buffer;
	    Buffer = NULL;
        }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }
    
//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {		
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
    }

// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(pNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(_rNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

