#line 3 "c:\\dev\\bsw\\dgndb\\06\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\dgndb\\06\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 258
#define YY_END_OF_BUFFER 259
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3616] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      253,  253,  259,  257,  255,  254,  257,  246,  219,  219,
      211,  213,  212,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  244,  219,
      221,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  247,  245,  248,  219,
      219,  228,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  219,  228,  257,
      253,  253,  253,  253,  251,  219,  219,  219,  211,  213,
      212,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  252,  253,  255,  217,    0,
      214,  216,  215,    0,    0,    0,    0,    7,    9,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,  102,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  128,
        0,    0,    0,    0,  139,    0,  142,    0,  145,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      187,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  218,  222,    0,  223,  221,    0,  220,  220,
      220,  220,  220,    7,    9,  220,  220,  220,  220,  220,
      220,   21,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,   92,  102,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  128,  220,  220,  220,  220,
      139,  220,  142,  220,  145,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  187,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  243,  233,
      243,  243,  243,  228,  243,  227,  227,  227,  227,  227,
        7,    9,  227,  227,  227,  227,  227,  227,   21,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,   92,  102,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  128,  227,  227,  227,  227,  139,  227,  142,
      227,  145,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  187,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  239,  243,  243,  243,  228,
      243,    0,  249,  253,  253,  217,  253,  214,  216,  215,
      253,  253,  253,  253,    7,    9,  253,  253,  253,  253,
      253,  253,   21,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,   92,  102,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  128,  253,  253,  253,
      253,  139,  253,  142,  253,  145,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  187,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  218,
        0,  256,    0,    2,    0,    4,    5,    0,    8,    0,
        0,   12,    0,    0,    0,    0,   18,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   51,   56,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,  104,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,  118,
        0,    0,    0,    0,  126,    0,  129,  130,    0,    0,
        0,    0,    0,    0,    0,  141,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  166,    0,    0,

        0,  173,    0,    0,    0,    0,    0,  178,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      226,  223,    0,    0,  224,  220,    2,  220,    4,    5,
      220,    8,  220,  220,   12,  220,  220,  220,  220,   18,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,   51,   56,  220,  220,  220,
      220,  220,  220,  220,  220,   67,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,   80,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,   96,  220,  104,

      105,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  116,  118,  220,  220,  220,  220,  126,  220,  129,
      130,  220,  220,  220,  220,  220,  220,  220,  141,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      166,  220,  220,  220,  173,  220,  220,  220,  220,  220,
      178,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,    0,  236,  243,  231,  243,  228,    0,  234,
      227,    2,  227,    4,    5,  227,    8,  227,  227,   12,

      227,  227,  227,  227,   18,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
       51,   56,  227,  227,  227,  227,  227,  227,  227,  227,
       67,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,   80,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,   96,  227,  104,  105,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  116,  118,  227,  227,
      227,  227,  126,  227,  129,  130,  227,  227,  227,  227,
      227,  227,  227,  141,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  166,  227,  227,  227,  173,
      227,  227,  227,  227,  227,  178,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,    0,  242,  237,
      243,  243,  228,    0,  240,  249,    0,  249,  253,  253,
      253,    2,  253,    4,    5,  253,    8,  253,  253,   12,
      253,  253,  253,  253,   18,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
       51,   56,  253,  253,  253,  253,  253,  253,  253,  253,
       67,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,   80,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,   96,  253,  104,  105,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  116,  118,  253,  253,
      253,  253,  126,  253,  129,  130,  253,  253,  253,  253,
      253,  253,  253,  141,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  166,  253,  253,  253,  173,
      253,  253,  253,  253,  253,  178,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   20,    0,   22,
       23,   24,    0,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,   61,    0,    0,   64,   65,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   85,   86,    0,    0,    0,   90,    0,    0,
        0,    0,    0,    0,    0,  101,  103,    0,  107,  109,
      110,  111,    0,    0,  114,    0,    0,    0,    0,    0,
        0,    0,    0,  127,    0,    0,  133,    0,    0,    0,
        0,  143,    0,    0,    0,    0,  149,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
        0,    0,  167,    0,    0,    0,    0,    0,  175,    0,
        0,    0,    0,  181,  182,    0,    0,    0,  190,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      203,  204,  205,    0,  207,  209,  210,    0,  225,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,   20,
      220,   22,   23,   24,  220,   28,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,   47,  220,  220,
      220,  220,  220,  220,   61,  220,  220,   64,   65,   66,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,   85,   86,  220,  220,  220,   90,
      220,  220,  220,  220,  220,  220,  220,  101,  103,  220,
      107,  109,  110,  111,  220,  220,  114,  220,  220,  220,
      220,  220,  220,  220,  220,  127,  220,  220,  133,  220,
      220,  220,  220,  143,  220,  220,  220,  220,  149,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  161,  220,
      220,  220,  220,  220,  167,  220,  220,  220,  220,  220,
      175,  220,  220,  220,  220,  181,  182,  220,  220,  220,
      190,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  203,  204,  205,  220,  207,  209,  210,  236,

      243,    0,  235,  228,  234,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,   20,  227,   22,   23,   24,
      227,   28,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,   47,  227,  227,  227,  227,  227,  227,
       61,  227,  227,   64,   65,   66,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
       85,   86,  227,  227,  227,   90,  227,  227,  227,  227,
      227,  227,  227,  101,  103,  227,  107,  109,  110,  111,
      227,  227,  114,  227,  227,  227,  227,  227,  227,  227,
      227,  127,  227,  227,  133,  227,  227,  227,  227,  143,

      227,  227,  227,  227,  149,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  161,  227,  227,  227,  227,  227,
      167,  227,  227,  227,  227,  227,  175,  227,  227,  227,
      227,  181,  182,  227,  227,  227,  190,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  203,  204,
      205,  227,  207,  209,  210,  242,    0,  241,  243,  228,
      240,    0,  249,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,   20,  253,   22,   23,   24,  253,   28,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,   47,  253,  253,  253,  253,  253,  253,   61,  253,

      253,   64,   65,   66,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,   85,   86,
      253,  253,  253,   90,  253,  253,  253,  253,  253,  253,
      253,  101,  103,  253,  107,  109,  110,  111,  253,  253,
      114,  253,  253,  253,  253,  253,  253,  253,  253,  127,
      253,  253,  133,  253,  253,  253,  253,  143,  253,  253,
      253,  253,  149,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  161,  253,  253,  253,  253,  253,  167,  253,
      253,  253,  253,  253,  175,  253,  253,  253,  253,  181,
      182,  253,  253,  253,  190,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  203,  204,  205,  253,
      207,  209,  210,    1,    3,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
        0,    0,   34,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,   74,   75,   76,   78,    0,
        0,    0,   84,    0,   88,    0,    0,   93,    0,    0,
       97,   98,    0,    0,  106,    0,  112,  113,  115,  117,
        0,  120,    0,    0,  124,  125,    0,  132,    0,  135,
        0,    0,    0,    0,    0,  146,    0,  148,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  160,    0,    0,
        0,  169,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  180,    0,    0,    0,    0,    0,  192,    0,    0,
        0,  196,  197,  201,    0,    0,    0,  206,    0,    1,
        3,  220,  220,  220,  220,   14,  220,  220,  220,  220,
      220,  220,   27,  220,  220,  220,  220,  220,   34,  220,
       36,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,   68,  220,  220,  220,
      220,   74,   75,   76,   78,  220,  220,  220,   84,  220,
       88,  220,  220,   93,  220,  220,   97,   98,  220,  220,

      106,  220,  112,  113,  115,  117,  220,  120,  220,  220,
      124,  125,  220,  132,  220,  135,  220,  220,  220,  220,
      220,  146,  220,  148,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  160,  220,  220,  220,  169,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  180,  220,  220,
      220,  220,  220,  192,  220,  220,  220,  196,  197,  201,
      220,  220,  220,  206,  220,  229,  235,    1,    3,  227,
      227,  227,  227,   14,  227,  227,  227,  227,  227,  227,
       27,  227,  227,  227,  227,  227,   34,  227,   36,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,   68,  227,  227,  227,  227,   74,
       75,   76,   78,  227,  227,  227,   84,  227,   88,  227,
      227,   93,  227,  227,   97,   98,  227,  227,  106,  227,
      112,  113,  115,  117,  227,  120,  227,  227,  124,  125,
      227,  132,  227,  135,  227,  227,  227,  227,  227,  146,
      227,  148,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  160,  227,  227,  227,  169,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  180,  227,  227,  227,  227,
      227,  192,  227,  227,  227,  196,  197,  201,  227,  227,
      227,  206,  227,  241,  230,    0,  250,    1,    3,  253,

      253,  253,  253,   14,  253,  253,  253,  253,  253,  253,
       27,  253,  253,  253,  253,  253,   34,  253,   36,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,   68,  253,  253,  253,  253,   74,
       75,   76,   78,  253,  253,  253,   84,  253,   88,  253,
      253,   93,  253,  253,   97,   98,  253,  253,  106,  253,
      112,  113,  115,  117,  253,  120,  253,  253,  124,  125,
      253,  132,  253,  135,  253,  253,  253,  253,  253,  146,
      253,  148,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  160,  253,  253,  253,  169,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  180,  253,  253,  253,  253,
      253,  192,  253,  253,  253,  196,  197,  201,  253,  253,
      253,  206,  253,    0,   10,    0,   13,    0,   17,    0,
        0,    0,    0,    0,    0,   31,    0,    0,   35,    0,
        0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,   63,   69,   70,    0,   72,    0,
        0,    0,    0,    0,    0,   89,   91,   94,    0,    0,
        0,    0,    0,  119,    0,    0,    0,    0,  134,    0,
      137,    0,  140,  144,  147,    0,    0,    0,    0,    0,
        0,    0,    0,  158,    0,    0,    0,    0,    0,    0,

      170,  171,  172,    0,    0,  179,    0,    0,    0,    0,
        0,    0,  193,    0,  195,  202,    0,    0,    0,  208,
      220,   10,  220,   13,  220,   17,  220,  220,  220,  220,
      220,  220,   31,  220,  220,   35,  220,  220,   46,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,   60,
      220,   63,   69,   70,  220,   72,  220,  220,  220,  220,
      220,  220,   89,   91,   94,  220,  220,  220,  220,  220,
      119,  220,  220,  220,  220,  134,  220,  137,  220,  140,
      144,  147,  220,  220,  220,  220,  220,  220,  220,  220,
      158,  220,  220,  220,  220,  220,  220,  170,  171,  172,

      220,  220,  179,  220,  220,  220,  220,  220,  220,  193,
      220,  195,  202,  220,  220,  220,  208,  243,  227,   10,
      227,   13,  227,   17,  227,  227,  227,  227,  227,  227,
       31,  227,  227,   35,  227,  227,   46,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,   60,  227,   63,
       69,   70,  227,   72,  227,  227,  227,  227,  227,  227,
       89,   91,   94,  227,  227,  227,  227,  227,  119,  227,
      227,  227,  227,  134,  227,  137,  227,  140,  144,  147,
      227,  227,  227,  227,  227,  227,  227,  227,  158,  227,
      227,  227,  227,  227,  227,  170,  171,  172,  227,  227,

      179,  227,  227,  227,  227,  227,  227,  193,  227,  195,
      202,  227,  227,  227,  208,  243,  250,  250,  253,   10,
      253,   13,  253,   17,  253,  253,  253,  253,  253,  253,
       31,  253,  253,   35,  253,  253,   46,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,   60,  253,   63,
       69,   70,  253,   72,  253,  253,  253,  253,  253,  253,
       89,   91,   94,  253,  253,  253,  253,  253,  119,  253,
      253,  253,  253,  134,  253,  137,  253,  140,  144,  147,
      253,  253,  253,  253,  253,  253,  253,  253,  158,  253,
      253,  253,  253,  253,  253,  170,  171,  172,  253,  253,

      179,  253,  253,  253,  253,  253,  253,  193,  253,  195,
      202,  253,  253,  253,  208,    0,    0,   15,    0,   16,
        0,    0,    0,   30,    0,   33,   44,   37,    0,    0,
        0,   52,    0,    0,    0,   57,   58,   59,    0,   71,
       73,    0,    0,   81,   82,    0,   95,   96,    0,    0,
        0,    0,    0,  123,    0,  136,    0,    0,  151,  152,
        0,    0,    0,  156,    0,  159,    0,  164,   83,    0,
        0,    0,    0,    0,    0,    0,    0,  189,    0,  194,
        0,  199,  200,  220,  220,   15,  220,   16,  220,  220,
      220,   30,  220,   33,   44,   37,  220,  220,  220,   52,

      220,  220,  220,   57,   58,   59,  220,   71,   73,  220,
      220,   81,   82,  220,   95,   96,  220,  220,  220,  220,
      220,  123,  220,  136,  220,  220,  151,  152,  220,  220,
      220,  156,  220,  159,  220,  164,   83,  220,  220,  220,
      220,  220,  220,  220,  220,  189,  220,  194,  220,  199,
      200,  232,  227,  227,   15,  227,   16,  227,  227,  227,
       30,  227,   33,   44,   37,  227,  227,  227,   52,  227,
      227,  227,   57,   58,   59,  227,   71,   73,  227,  227,
       81,   82,  227,   95,   96,  227,  227,  227,  227,  227,
      123,  227,  136,  227,  227,  151,  152,  227,  227,  227,

      156,  227,  159,  227,  164,   83,  227,  227,  227,  227,
      227,  227,  227,  227,  189,  227,  194,  227,  199,  200,
      238,  250,  253,  253,   15,  253,   16,  253,  253,  253,
       30,  253,   33,   44,   37,  253,  253,  253,   52,  253,
      253,  253,   57,   58,   59,  253,   71,   73,  253,  253,
       81,   82,  253,   95,   96,  253,  253,  253,  253,  253,
      123,  253,  136,  253,  253,  151,  152,  253,  253,  253,
      156,  253,  159,  253,  164,   83,  253,  253,  253,  253,
      253,  253,  253,  253,  189,  253,  194,  253,  199,  200,
        0,    0,    0,    0,    0,   29,   32,    0,   48,   49,

        0,    0,    0,    0,   62,    0,    0,    0,    0,  100,
        0,    0,  122,    0,    0,    0,  153,    0,    0,    0,
        0,  165,    0,  174,    0,    0,    0,    0,    0,    0,
        0,  220,  220,  220,  220,  220,   29,   32,  220,   48,
       49,  220,  220,  220,  220,   62,  220,  220,  220,  220,
      100,  220,  220,  122,  220,  220,  220,  153,  220,  220,
      220,  220,  165,  220,  174,  220,  220,  220,  220,  220,
      220,  220,  227,  227,  227,  227,  227,   29,   32,  227,
       48,   49,  227,  227,  227,  227,   62,  227,  227,  227,
      227,  100,  227,  227,  122,  227,  227,  227,  153,  227,

      227,  227,  227,  165,  227,  174,  227,  227,  227,  227,
      227,  227,  227,  253,  253,  253,  253,  253,   29,   32,
      253,   48,   49,  253,  253,  253,  253,   62,  253,  253,
      253,  253,  100,  253,  253,  122,  253,  253,  253,  153,
      253,  253,  253,  253,  165,  253,  174,  253,  253,  253,
      253,  253,  253,  253,    6,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   50,    0,   54,   55,    0,
       79,    0,   99,    0,  121,  131,    0,  150,  154,  155,
      157,    0,    0,    0,  176,  177,  183,  186,  188,  191,
      198,    6,  220,  220,   25,  220,  220,  220,  220,  220,

      220,  220,   50,  220,   54,   55,  220,   79,  220,   99,
      220,  121,  131,  220,  150,  154,  155,  157,  220,  220,
      220,  176,  177,  183,  186,  188,  191,  198,    6,  227,
      227,   25,  227,  227,  227,  227,  227,  227,  227,   50,
      227,   54,   55,  227,   79,  227,   99,  227,  121,  131,
      227,  150,  154,  155,  157,  227,  227,  227,  176,  177,
      183,  186,  188,  191,  198,    6,  253,  253,   25,  253,
      253,  253,  253,  253,  253,  253,   50,  253,   54,   55,
      253,   79,  253,   99,  253,  121,  131,  253,  150,  154,
      155,  157,  253,  253,  253,  176,  177,  183,  186,  188,

      191,  198,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,   53,    0,    0,  108,    0,  162,    0,  168,
        0,    0,  220,   19,  220,  220,  220,  220,  220,  220,
      220,  220,   53,  220,  220,  108,  220,  162,  220,  168,
      220,  220,  227,   19,  227,  227,  227,  227,  227,  227,
      227,  227,   53,  227,  227,  108,  227,  162,  227,  168,
      227,  227,  253,   19,  253,  253,  253,  253,  253,  253,
      253,  253,   53,  253,  253,  108,  253,  162,  253,  168,
      253,  253,    0,   26,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,  163,    0,    0,  220,   26,  220,

      220,  220,  220,  220,  220,  220,   77,  220,  220,  163,
      220,  220,  227,   26,  227,  227,  227,  227,  227,  227,
      227,   77,  227,  227,  163,  227,  227,  253,   26,  253,
      253,  253,  253,  253,  253,  253,   77,  253,  253,  163,
      253,  253,    0,    0,   38,    0,   41,   42,    0,    0,
       87,  138,  184,    0,  220,  220,   38,  220,   41,   42,
      220,  220,   87,  138,  184,  220,  227,  227,   38,  227,
       41,   42,  227,  227,   87,  138,  184,  227,  253,  253,
       38,  253,   41,   42,  253,  253,   87,  138,  184,  253,
       11,    0,    0,    0,    0,  185,   11,  220,  220,  220,

      220,  185,   11,  227,  227,  227,  227,  185,   11,  253,
      253,  253,  253,  185,    0,    0,   43,    0,  220,  220,
       43,  220,  227,  227,   43,  227,  253,  253,   43,  253,
       39,    0,    0,   39,  220,  220,   39,  227,  227,   39,
      253,  253,    0,    0,  220,  220,  227,  227,  253,  253,
        0,   45,  220,   45,  227,   45,  253,   45,    0,  220,
      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
        0,  220,  227,  253,    0,  220,  227,  253,    0,  220,
      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
        0,  220,  227,  253,    0,  220,  227,  253,    0,  220,

      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
       40,   40,   40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   10,   16,   16,   17,
       18,   19,   16,   20,   16,   16,   16,   21,   10,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   10,   81,   10,    1,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    3,    1,
        5,    1,    4,    1,    4,    6,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    8
    } ;

static yyconst flex_int16_t yy_base[3624] =
    {   0,
        0,    0,   82,    0,  164,    0,  234,  242,  250,  258,
      278,    0,  973, 7806,  359, 7806,  947, 7806, 7806,  949,
      341, 7806,  913,  335,  354,  350,  398,  400,  453,  343,
      345,  404,  328,  339,  454,  395,  475,  524,  513,  324,
      455,  563,  571,  401,  472,  583,  347,  851, 7806,  556,
      638,  667,  630,  682,  719,  721,  774,  432,  471,  563,
      349,  397,  661,  712,  779,  828,  772,  384,  776,  832,
      879,  632,  503,  881,    0,  401, 7806, 7806, 7806,    0,
      631,  939,  968,  931,  983, 1020, 1022, 1075,  635,  648,
      819,  394,  472,  962,  884, 1080, 1129, 1027,  461, 1077,

     1133, 1180,  722,  730, 1089,    0,  503,  959, 1209,  665,
        0,  450,    0,  907, 7806,    0,  909, 7806,  518,    0,
      893, 1238, 1181, 1233, 1231, 1281, 1334,  836,  891, 1219,
      508,  524, 1289, 1298, 1356, 1405, 1300,  514, 1336, 1409,
     1456,  894,  787, 1394,  576, 7806,  828,  541, 7806,  883,
     7806, 7806, 7806,  565,  900,  943,  569,  635,  681,  681,
      740, 1347,  988,  763,  783, 7806,  784,  838,  821, 1448,
     1017,  877,  958, 1460,  951,  960,  999, 1023, 1020, 1036,
     1056, 1055, 1464, 1050, 1059, 1081, 1119, 1344, 1122, 1127,
     1120, 1127, 1122, 1134, 1142, 1277, 7806, 1149, 1137, 1397,

     1207, 1181, 1474, 1456, 1225, 1233, 1282, 1473, 1459, 1340,
     1507, 1506, 1299, 1320, 1352, 1406, 1401, 1398, 1466, 1467,
     1487, 1515, 1503, 1513, 1518, 1522, 1524, 1514, 1536, 1523,
     1523, 1523, 1560, 1537, 1526, 1564, 1568, 1538, 1568, 1572,
     7806, 1577, 1586, 1575, 1565, 1571, 1571, 1585, 1588, 1576,
     1582, 1603, 7806, 1643, 1652, 1658, 1664, 1673,    0, 1593,
     1658, 1657, 1653, 1669, 1658, 1654, 1668, 1673, 1667, 1661,
     1668,    0, 1665, 1684, 1671, 1716, 1691, 1673, 1699, 1720,
     1702, 1706, 1716, 1730, 1715, 1732, 1735, 1735, 1761, 1730,
     1723, 1726, 1730, 1764, 1734, 1739, 1734, 1760, 1755, 1758,

     1770, 1772,    0, 1778, 1763, 1782, 1789, 1783, 1819, 1778,
     1783, 1789, 1787, 1826, 1816, 1821, 1837, 1835, 1818, 1815,
     1831, 1839, 1837, 1830, 1848, 1845, 1834, 1850, 1838, 1871,
     1882, 1857, 1859, 1851, 1892, 1879, 1880, 1887, 1893, 1898,
     1887, 1900, 1904, 1900, 1899, 1931,    0, 1936, 1939, 1935,
     1914, 1937, 1933, 1948, 1949, 1936, 1940, 1958,    0, 1998,
     2007,  909, 2013, 2021, 2030,    0, 1961, 2008, 2023, 2011,
     2027, 2016, 2013, 2027, 2030, 2021, 2023, 2024,    0, 2021,
     2041, 2028, 2072, 2046, 2027, 2056, 2085, 2034, 2033, 2063,
     2084, 2070, 2088, 2091, 2090, 2116, 2086, 2079, 2082, 2086,

     2091, 2091, 2096, 2091, 2116, 2112, 2118, 2128, 2130,    0,
     2134, 2120, 2139, 2146, 2140, 2174, 2142, 2141, 2142, 2141,
     2181, 2146, 2180, 2193, 2192, 2157, 2163, 2186, 2190, 2195,
     2188, 2205, 2202, 2191, 2208, 2196, 2206, 2236, 2217, 2219,
     2210, 2246, 2220, 2223, 2220, 2247, 2254, 2245, 2259, 2259,
     2260, 2258, 2273,    0, 2284, 2293, 2267, 2260, 2291, 2277,
     2294, 2303, 2290, 2295, 2315, 2355, 2364, 2370,  966, 2378,
     2387, 1969, 2405,    0,  617,    0, 2407,    0,    0,    0,
     2303, 2375, 2386, 2307, 2374, 2377, 2373, 2387, 2395, 2394,
     2394, 2395,    0, 2394, 2424, 2402, 2435, 2430, 2408, 2408,

     2447, 2413, 2420, 2436, 2449, 2441, 2459, 2464, 2463, 2466,
     2459, 2452, 2455, 2468, 2472, 2472, 2479, 2474, 2484, 2481,
     2484, 2492, 2507,    0, 2498, 2483, 2511, 2508, 2520, 2538,
     2520, 2496, 2503, 2504, 2537, 2540, 2528, 2557, 2555, 2515,
     2522, 2551, 2568, 2563, 2556, 2575, 2574, 2563, 2579, 2567,
     2579, 2594, 2585, 2588, 2577, 2618, 2593, 2598, 2594, 2603,
     2606, 2609, 2624, 2628, 2624, 2628, 2644,    0, 2655, 2656,
     2630, 2634, 2656, 2655, 2656, 2668, 2657, 2661, 2679,    0,
      880, 7806, 2676, 7806, 2677, 7806, 7806, 2682, 7806, 2671,
     2680, 7806, 2676, 2683, 2672, 2697,  829, 2697, 2688, 2696,

     2686, 2704, 2712, 2703, 2706, 2706, 2703, 2708, 2725, 2712,
     2731, 2727, 2723, 2730, 2733, 2735, 2738, 2726, 2751, 2740,
     2749, 2753, 7806, 2758, 2744, 2760, 2754, 2756, 2757, 2774,
     2761, 2780, 2771, 2784, 2770, 2777, 2780, 2788, 2774, 2787,
     2779, 2783, 2794, 2795, 2837, 2790, 7806, 7806, 2801, 2791,
     2810, 2796, 2812, 2811, 2830, 2827, 2830, 2835, 7806, 2818,
     2821, 2838, 2847, 2835, 7806, 2831, 7806, 7806,  828, 2841,
     2842, 2850, 2851, 2852, 2839, 7806, 2836, 2853, 2860, 2861,
     2864, 2854, 2853, 2860, 2866, 2875, 2876, 2889, 2881, 2878,
     2890, 2887, 2895, 2889, 2901, 2900, 2897, 2891, 2906, 2897,

     2908, 7806, 2902, 2910, 2896, 2908, 2901, 7806, 2911, 2910,
     2908, 2925, 2917, 2925, 2928, 2921, 2933, 2933, 2950, 2949,
     2941, 2936, 2964, 2935, 2952, 2950, 2961, 2959, 2953, 2326,
     3010, 3015, 3030, 3020, 3035, 3011,    0, 3026,    0,    0,
     3031,    0, 3020, 3026,    0, 3020, 3027, 3014, 3037,  823,
     3037, 3028, 3036, 3024, 3040, 3042, 3034, 3035, 3035, 3030,
     3037, 3052, 3035, 3070, 3050, 3043, 3081, 3077, 3086, 3089,
     3074, 3093, 3080, 3089, 3093,    0, 3098, 3082, 3096, 3083,
     3086, 3086, 3103, 3090, 3109, 3099, 3109, 3098, 3100, 3103,
     3111, 3115, 3137, 3129, 3133, 3144, 3146, 3157, 3139,    0,

        0, 3147, 3135, 3152, 3137, 3153, 3150, 3159, 3156, 3159,
     3164,    0, 3147, 3149, 3181, 3169, 3156,    0, 3154,    0,
        0,  777, 3167, 3169, 3189, 3199, 3200, 3187,    0, 3182,
     3200, 3206, 3207, 3208, 3196, 3195, 3202, 3208, 3215, 3207,
     3218, 3210, 3206, 3218, 3214, 3222, 3212, 3224, 3222, 3220,
     3220, 3232, 3237, 3255,    0, 3250, 3258, 3244, 3256, 3248,
        0, 3257, 3256, 3252, 3267, 3259, 3267, 3270, 3261, 3262,
     3264, 3279, 3277, 3269, 3263, 3285, 3262, 3275, 3304, 3282,
     3284, 3279, 3336, 3341, 3349, 3361, 3370, 3379, 3384, 3394,
     3315,    0, 3316,    0,    0, 3367,    0, 3367, 3373,    0,

     3367, 3374, 3367, 3390,  773, 3390, 3381, 3394, 3376, 3393,
     3396, 3388, 3389, 3389, 3383, 3390, 3405, 3388, 3420, 3403,
     3401, 3437, 3417, 3421, 3437, 3421, 3440, 3432, 3442, 3446,
        0, 3451, 3436, 3451, 3438, 3440, 3440, 3457, 3442, 3461,
     3452, 3461, 3451, 3459, 3461, 3469, 3455, 3473, 3478, 3482,
     3493, 3494, 3514, 3490,    0,    0, 3499, 3488, 3506, 3492,
     3510, 3507, 3516, 3511, 3515, 3518,    0, 3501, 3503, 3515,
     3529, 3516,    0, 3512,    0,    0,  769, 3522, 3526, 3535,
     3537, 3549, 3536,    0, 3531, 3548, 3557, 3559, 3561, 3550,
     3550, 3558, 3564, 3571, 3562, 3573, 3565, 3560, 3572, 3568,

     3576, 3566, 3582, 3580, 3577, 3593, 3585, 3579, 3591,    0,
     3586, 3595, 3593, 3605, 3596,    0, 3608, 3608, 3605, 3621,
     3614, 3623, 3626, 3617, 3618, 3620, 3635, 3632, 3624, 3618,
     3644, 3622, 3637, 3636, 3644, 3645, 3640, 3697, 3702, 3708,
     3717, 3723, 3731, 3736, 3746, 3753, 3758, 3764, 3782,    0,
     3673,    0, 3700,    0,    0, 3732,    0, 3722, 3746,    0,
     3752, 3759, 3746, 3769,  743, 3769, 3760, 3768, 3756, 3772,
     3774, 3765, 3767, 3768, 3764, 3771, 3786, 3770, 3803, 3785,
     3780, 3816, 3790, 3806, 3809, 3806, 3825, 3813, 3822, 3826,
        0, 3831, 3815, 3830, 3815, 3819, 3819, 3836, 3824, 3843,

     3833, 3842, 3832, 3835, 3837, 3847, 3832, 3860, 3852, 3864,
     3875, 3880, 3891, 3869,    0,    0, 3880, 3868, 3885, 3870,
     3886, 3883, 3892, 3888, 3892, 3898,    0, 3881, 3883, 3902,
     3903, 3890,    0, 3887,    0,    0,  733, 3898, 3901, 3910,
     3922, 3923, 3918,    0, 3913, 3932, 3938, 3940, 3941, 3929,
     3928, 3935, 3941, 3948, 3940, 3951, 3943, 3940, 3952, 3948,
     3956, 3946, 3958, 3956, 3953, 3967, 3963, 3954, 3966,    0,
     3961, 3976, 3965, 3987, 3980,    0, 3989, 3989, 3985, 4000,
     3992, 4000, 4003, 3994, 3996, 3998, 4015, 4012, 4004, 3998,
     4018, 3999, 4012, 4013, 4016, 4015, 4011, 4021, 4026, 4029,

     4048, 4044, 4043, 4048, 4058, 4046, 4053, 7806, 4061, 7806,
     7806, 4068, 4059, 7806, 4066, 4073, 4066, 4067, 4072, 4058,
     4059, 4061, 4080, 4077, 4069, 4097, 4084, 4081, 4076, 4096,
     4081, 4092, 7806, 4106, 4108, 7806, 7806, 7806, 4105, 4097,
     4107, 4103, 4105, 4126, 4123, 4121, 4112, 4113, 4119, 4126,
     4135, 4133, 7806, 7806, 4135, 4123, 4126, 7806, 4124, 4125,
     4127, 4142,  767,  764, 4152, 7806, 7806, 4150,  727, 7806,
     7806, 7806, 4140, 4161, 7806, 4157, 4169, 4158, 4171, 4165,
     4163, 4164, 4181, 7806, 4163, 4181, 4178, 4172, 4188, 4172,
     4188, 7806, 4179, 4177, 4178, 4180, 7806, 4191, 4181, 4183,

     4208, 4204, 4213, 4219, 4211, 4228, 7806, 4217, 4231, 4219,
     4218, 4237, 7806, 4226, 4228, 4229, 4241, 4233, 7806, 4243,
     4235, 4230, 4246, 7806, 7806, 4233, 4234, 4247, 7806, 4235,
     4244, 4238, 4246, 4243, 4253, 4268, 4271, 4277, 4281, 4282,
     7806, 7806, 7806, 4288, 4285, 7806, 7806, 4304, 4315, 4283,
     4284, 4278, 4302, 4297, 4295, 4300, 4311, 4299, 4307,    0,
     4316,    0,    0, 4323, 4314,    0, 4321, 4326, 4319, 4320,
     4328, 4314, 4315, 4317, 4336, 4333, 4324, 4355, 4343, 4341,
     4336, 4351, 4339, 4341,    0, 4360, 4358,    0,    0,    0,
     4355, 4347, 4358, 4358, 4360, 4381, 4378, 4376, 4365, 4366,

     4372, 4382, 4391, 4389,    0,    0, 4391, 4379, 4382,    0,
     4379, 4384, 4387, 4402,  762,  758, 4410,    0,    0, 4405,
      720,    0,    0,    0, 4398, 4407,    0, 4409, 4421, 4410,
     4424, 4418, 4417, 4419, 4436,    0, 4418, 4436, 4433, 4425,
     4441, 4425, 4444,    0, 4435, 4433, 4435, 4436,    0, 4446,
     4440, 4443, 4481, 4464, 4463, 4466, 4456, 4472,    0, 4467,
     4482, 4470, 4471, 4491,    0, 4481, 4483, 4484, 4496, 4488,
        0, 4496, 4488, 4483, 4502,    0,    0, 4489, 4490, 4503,
        0, 4491, 4499, 4497, 4506, 4503, 4508, 4526, 4529, 4526,
     4535, 4535,    0,    0,    0, 4540, 4537,    0,    0, 4565,

     4574, 4585, 4590, 4596, 4601, 4552, 4553, 4572, 4589, 4587,
     4585, 4590, 4600, 4588, 4595,    0, 4603,    0,    0, 4610,
     4599,    0, 4607, 4612, 4605, 4606, 4611, 4597, 4598, 4600,
     4619, 4616, 4607, 4648, 4623, 4619, 4615, 4628, 4634, 4636,
        0, 4650, 4648,    0,    0,    0, 4645, 4637, 4647, 4643,
     4645, 4665, 4662, 4661, 4651, 4652, 4658, 4665, 4674, 4672,
        0,    0, 4674, 4662, 4665,    0, 4662, 4664, 4665, 4681,
      754,  750, 4703,    0,    0, 4682,  683,    0,    0,    0,
     4693, 4702,    0, 4699, 4710, 4699, 4712, 4707, 4705, 4706,
     4723,    0, 4704, 4722, 4719, 4711, 4727, 4711, 4727,    0,

     4718, 4716, 4717, 4718,    0, 4728, 4720, 4721, 4763, 4743,
     4740, 4762, 4755, 4771,    0, 4759, 4773, 4761, 4760, 4779,
        0, 4768, 4770, 4770, 4782, 4774,    0, 4782, 4774, 4769,
     4785,    0,    0, 4772, 4773, 4786,    0, 4774, 4782, 4777,
     4784, 4782, 4785, 4819, 4824, 4821, 4825, 4825,    0,    0,
        0, 4830, 4827,    0,    0, 4846, 4851, 4856, 4875, 4883,
     4888, 4898, 4905, 4838, 4839, 4847, 4864, 4872, 4876, 4881,
     4898, 4886, 4893,    0, 4901,    0,    0, 4908, 4897,    0,
     4905, 4910, 4903, 4904, 4909, 4895, 4898, 4900, 4919, 4916,
     4907, 4941, 4924, 4920, 4914, 4927, 4908, 4910,    0, 4922,

     4934,    0,    0,    0, 4936, 4928, 4946, 4943, 4945, 4965,
     4962, 4960, 4949, 4950, 4956, 4963, 4972, 4972,    0,    0,
     4974, 4962, 4965,    0, 4962, 4965, 4966, 4980,  717,  710,
     4997,    0,    0, 4982,  670,    0,    0,    0, 4968, 4977,
        0, 4985, 5002, 4991, 5011, 5005, 5003, 5004, 5021,    0,
     5002, 5020, 5017, 5009, 5025, 5009, 5025,    0, 5016, 5016,
     5017, 5019,    0, 5029, 5021, 5022, 5038, 5044, 5041, 5052,
     5042, 5063,    0, 5051, 5068, 5059, 5058, 5077,    0, 5066,
     5068, 5068, 5080, 5072,    0, 5080, 5072, 5067, 5083,    0,
        0, 5070, 5074, 5087,    0, 5074, 5082, 5078, 5085, 5081,

     5085, 5097, 5100, 5110, 5112, 5117,    0,    0,    0, 5122,
     5122,    0,    0, 7806, 7806,  665, 5132, 5118, 5132, 7806,
     5133, 5114, 5135, 5140, 5139, 5131, 7806, 5125, 5125, 5126,
     5133, 5132, 7806, 5146, 7806, 5132, 5139, 5136, 5148, 5149,
     5158, 5148, 5171, 5161, 5145, 5165, 5173, 5171, 5184, 5188,
     7806, 5175, 5193, 5179, 5196, 7806, 7806,  633, 7806, 5177,
     5194, 5184, 7806, 5200, 7806, 5197, 5200, 7806, 5188, 5208,
     7806, 7806, 5205, 5193, 7806, 5189, 7806, 7806, 7806, 7806,
     5211, 5203, 5205, 5219, 7806, 7806, 5220, 7806, 5229, 7806,
     5227, 5222,  626, 5223, 5233, 7806, 5232, 7806, 5232,  529,

     5244, 5250, 5236, 5238, 5253, 5255, 5254, 7806, 5255, 5258,
     5243, 7806, 5262, 5245, 5266, 5264, 5249, 5261, 5260, 5267,
     5257, 7806, 5257, 5277, 5267, 5288, 5280, 7806, 5295, 5278,
     5300, 7806, 7806, 5290, 5296, 5310, 5298, 7806, 5299,    0,
        0,  619, 5311, 5297, 5311,    0, 5312, 5293, 5314, 5319,
     5318, 5312,    0, 5306, 5306, 5307, 5314, 5313,    0, 5327,
        0, 5313, 5321, 5318, 5328, 5342, 5351, 5345, 5346, 5362,
     5349, 5356, 5365, 5358, 5368, 5369,    0, 5355, 5372, 5358,
     5375,    0,    0,  616,    0, 5356, 5375, 5365,    0, 5381,
        0, 5378, 5381,    0, 5369, 5389,    0,    0, 5386, 5402,

        0, 5371,    0,    0,    0,    0, 5389, 5395, 5396, 5415,
        0,    0, 5416,    0, 5419,    0, 5417, 5407,  613, 5408,
     5415,    0, 5411,    0, 5411,  561, 5423, 5429, 5415, 5417,
     5432, 5434, 5435,    0, 5436, 5439, 5424,    0, 5443, 5426,
     5447, 5445, 5431, 5443, 5454, 5461, 5456,    0, 5455, 5478,
     5470, 5478, 5470,    0, 5480, 5463, 5482,    0,    0, 5469,
     5475, 5489, 5477,    0, 5478,  612, 5507,    0,    0,  609,
     5490, 5476, 5490,    0, 5500, 5481, 5502, 5508, 5507, 5513,
        0, 5507, 5507, 5508, 5515, 5512,    0, 5526,    0, 5512,
     5519, 5519, 5531, 5532, 5541, 5530, 5540, 5543, 5527, 5534,

     5542, 5534, 5544, 5545,    0, 5531, 5548, 5545, 5564,    0,
        0,  606,    0, 5545, 5576, 5566,    0, 5582,    0, 5579,
     5582,    0, 5568, 5588,    0,    0, 5585, 5576,    0, 5569,
        0,    0,    0,    0, 5594, 5586, 5587, 5601,    0,    0,
     5602,    0, 5598,    0, 5596, 5586,  591, 5587, 5594,    0,
     5590,    0, 5590,  611, 5602, 5617, 5603, 5605, 5621, 5623,
     5636,    0, 5637, 5640, 5625,    0, 5644, 5625, 5646, 5644,
     5629, 5644, 5643, 5650, 5640,    0, 5639, 5659, 5649, 5657,
     5649,    0, 5659, 5642, 5661,    0,    0, 5648, 5654, 5668,
     5665,    0, 5666, 5708,  662, 5719, 5724,    0,    0,  565,

     5701, 5687, 5701,    0, 5702, 5695, 5716, 5721, 5720, 5712,
        0, 5706, 5706, 5707, 5714, 5711,    0, 5725,    0, 5711,
     5718, 5719, 5729, 5730, 5739, 5728, 5749, 5741, 5726, 5734,
     5742, 5734, 5758, 5759,    0, 5745, 5774, 5760, 5777,    0,
        0,  534,    0, 5758, 5775, 5765,    0, 5781,    0, 5778,
     5781,    0, 5767, 5787,    0,    0, 5784, 5776,    0, 5768,
        0,    0,    0,    0, 5791, 5783, 5785, 5799,    0,    0,
     5801,    0, 5798,    0, 5796, 5786,  511, 5800, 5807,    0,
     5803,    0, 5803,  714, 5821, 5828, 5817, 5819, 5834, 5836,
     5835,    0, 5836, 5839, 5824,    0, 5843, 5824, 5845, 5843,

     5828, 5844, 5841, 5848, 5838,    0, 5837, 5857, 5848, 5857,
     5849,    0, 5859, 5855, 5874,    0,    0, 5861, 5867, 5887,
     5876,    0, 5880, 5894, 7806, 5887, 7806, 5883, 7806, 5884,
     5885, 5880, 5896, 5899, 5898, 7806, 5883, 5885, 7806, 5901,
     5891, 7806, 5906, 5900, 5902, 5910, 5901, 5913, 5915, 5909,
     5917, 5916, 7806, 5934, 7806, 7806, 7806, 5933, 7806, 5919,
     5924, 5939, 5938, 5949, 5942, 7806, 7806, 7806, 5951, 5938,
     5952, 5957, 5958, 7806, 5959, 5960, 5950, 5951, 7806, 5961,
     7806, 5957, 7806, 7806, 7806, 5961, 5967, 5968, 5958, 5965,
     5967, 5953, 5958, 7806, 5962, 5980, 5975, 5991, 5994, 5991,

     7806, 7806, 7806, 5992, 6005, 7806, 6002, 6011, 6001, 6013,
     5997, 6012, 7806, 6003, 7806, 7806, 6017, 6001, 6013, 7806,
     6020,    0, 6013,    0, 6013,    0, 6014, 6015, 6010, 6026,
     6029, 6029,    0, 6015, 6017,    0, 6033, 6032,    0, 6047,
     6041, 6043, 6057, 6049, 6063, 6064, 6058, 6066, 6052,    0,
     6070,    0,    0,    0, 6069,    0, 6055, 6054, 6068, 6064,
     6075, 6068,    0,    0,    0, 6081, 6068, 6082, 6087, 6088,
        0, 6089, 6091, 6082, 6083,    0, 6093,    0, 6098,    0,
        0,    0, 6102, 6108, 6109, 6105, 6113, 6117, 6102, 6107,
        0, 6111, 6116, 6111, 6127, 6130, 6121,    0,    0,    0,

     6121, 6131,    0, 6128, 6137, 6131, 6143, 6127, 6142,    0,
     6133,    0,    0, 6147, 6132, 6145,    0, 6191, 6167,    0,
     6160,    0, 6156,    0, 6157, 6164, 6160, 6182, 6185, 6184,
        0, 6169, 6171,    0, 6187, 6173,    0, 6188, 6182, 6184,
     6196, 6187, 6198, 6199, 6193, 6201, 6188,    0, 6207,    0,
        0,    0, 6206,    0, 6192, 6191, 6205, 6201, 6222, 6215,
        0,    0,    0, 6224, 6211, 6231, 6237, 6244,    0, 6245,
     6246, 6236, 6237,    0, 6247,    0, 6239,    0,    0,    0,
     6243, 6249, 6250, 6244, 6251, 6252, 6237, 6242,    0, 6246,
     6252, 6248, 6264, 6267, 6258,    0,    0,    0, 6258, 6268,

        0, 6275, 6284, 6274, 6286, 6276, 6292,    0, 6289,    0,
        0, 6303, 6287, 6299,    0, 6316, 6326, 6335, 6311,    0,
     6313,    0, 6310,    0, 6317, 6322, 6317, 6333, 6336, 6335,
        0, 6321, 6323,    0, 6339, 6325,    0, 6340, 6334, 6336,
     6344, 6335, 6347, 6349, 6343, 6351, 6337,    0, 6355,    0,
        0,    0, 6354,    0, 6341, 6340, 6354, 6350, 6366, 6368,
        0,    0,    0, 6378, 6371, 6389, 6394, 6395,    0, 6396,
     6397, 6388, 6389,    0, 6399,    0, 6391,    0,    0,    0,
     6395, 6401, 6402, 6392, 6399, 6401, 6387, 6392,    0, 6396,
     6401, 6396, 6412, 6416, 6407,    0,    0,    0, 6407, 6417,

        0, 6419, 6437, 6428, 6446, 6434, 6449,    0, 6440,    0,
        0, 6454, 6438, 6451,    0, 6452, 6434, 7806, 6454, 7806,
     6457, 6449, 6459, 7806, 6460, 7806, 7806,  504, 6460, 6463,
     6449, 7806, 6457, 6467, 6472, 7806, 7806, 7806, 6454, 7806,
     7806, 6474, 6463, 7806, 7806, 6477, 7806, 7806, 6476, 6468,
     6474, 6483, 6486, 7806, 6484, 7806, 6505, 6496, 7806, 7806,
     6498, 6499, 6499, 7806, 6498, 7806, 6514, 7806, 7806, 6507,
     6517, 6500, 6507, 6508, 6510, 6503, 6506, 7806, 6523, 7806,
     6511, 7806, 7806, 6523, 6505,    0, 6525,    0, 6528, 6521,
     6531,    0, 6532,    0,    0,  485, 6532, 6539, 6533,    0,

     6542, 6558, 6567,    0,    0,    0, 6549,    0,    0, 6569,
     6557,    0,    0, 6571,    0,    0, 6571, 6563, 6564, 6564,
     6566,    0, 6558,    0, 6575, 6566,    0,    0, 6568, 6570,
     6571,    0, 6569,    0, 6585,    0,    0, 6578, 6588, 6571,
     6579, 6580, 6582, 6575, 6582,    0, 6607,    0, 6596,    0,
        0, 6635, 6614, 6606,    0, 6626,    0, 6629, 6621, 6631,
        0, 6632,    0,    0,  447, 6632, 6634, 6619,    0, 6628,
     6639, 6644,    0,    0,    0, 6626,    0,    0, 6646, 6634,
        0,    0, 6648,    0,    0, 6648, 6640, 6641, 6641, 6643,
        0, 6635,    0, 6652, 6643,    0,    0, 6645, 6646, 6655,

        0, 6654,    0, 6676,    0,    0, 6679, 6689, 6672, 6679,
     6680, 6682, 6675, 6677,    0, 6693,    0, 6682,    0,    0,
     6711, 6718, 6700, 6688,    0, 6708,    0, 6711, 6703, 6713,
        0, 6723,    0,    0,  439, 6724, 6726, 6711,    0, 6719,
     6729, 6734,    0,    0,    0, 6717,    0,    0, 6737, 6725,
        0,    0, 6739,    0,    0, 6738, 6730, 6736, 6736, 6738,
        0, 6730,    0, 6747, 6738,    0,    0, 6740, 6741, 6741,
        0, 6740,    0, 6762,    0,    0, 6761, 6771, 6754, 6761,
     6762, 6773, 6767, 6769,    0, 6785,    0, 6773,    0,    0,
     6785, 6792, 6775, 6778, 6790, 7806, 7806, 6824, 7806, 7806,

     6795, 6786, 6796, 6790, 7806, 6797, 6803, 6793, 6796, 7806,
     6802, 6825, 7806, 6826, 6818, 6819, 7806, 6827, 6832, 6842,
     6844, 7806, 6843, 7806, 6830, 6844, 6838, 6850, 6853, 6860,
     6840, 6859, 6866, 6848, 6852, 6867,    0,    0, 6882,    0,
        0, 6876, 6868, 6878, 6872,    0, 6879, 6885, 6885, 6885,
        0, 6885, 6902,    0, 6903, 6895, 6897,    0, 6905, 6899,
     6911, 6917,    0, 6918,    0, 6904, 6918, 6912, 6927, 6934,
     6939, 6919, 6939, 6946, 6928, 6931, 6943,    0,    0, 6966,
        0,    0, 6953, 6939, 6949, 6944,    0, 6951, 6957, 6946,
     6946,    0, 6946, 6966,    0, 6969, 6966, 6967,    0, 6976,

     6976, 6992, 6996,    0, 6997,    0, 6984, 6999, 6991, 7003,
     7011, 7013, 6993, 7013, 7020, 7002, 7005, 7017,    0,    0,
     7024,    0,    0, 7020, 7009, 7021, 7020,    0, 7027, 7034,
     7029, 7035,    0, 7038, 7055,    0, 7057, 7049, 7050,    0,
     7058, 7052, 7069, 7070,    0, 7071,    0, 7058, 7073, 7065,
     7077, 7078, 7081, 7061, 7806, 7067, 7082,  433, 7076, 7096,
     7097, 7098, 7085, 7098, 7097, 7806, 7105, 7806, 7806, 7096,
     7806, 7099, 7806, 7115, 7806, 7806, 7114, 7806, 7806, 7806,
     7806, 7103, 7109, 7106, 7806, 7806, 7132, 7806, 7806, 7806,
     7806,    0, 7112, 7126,  429, 7117, 7137, 7138, 7139, 7126,

     7141, 7136,    0, 7140,    0,    0, 7133,    0, 7136,    0,
     7151,    0,    0, 7150,    0,    0,    0,    0, 7139, 7145,
     7142,    0,    0, 7174,    0,    0,    0,    0,    0, 7144,
     7163,  398, 7156, 7178, 7189, 7179, 7166, 7179, 7182,    0,
     7184,    0,    0, 7174,    0, 7177,    0, 7192,    0,    0,
     7191,    0,    0,    0,    0, 7180, 7187, 7184,    0,    0,
     7202,    0,    0,    0,    0,    0, 7192, 7205,  393, 7194,
     7214, 7217, 7215, 7202, 7226, 7224,    0, 7226,    0,    0,
     7215,    0, 7218,    0, 7233,    0,    0, 7232,    0,    0,
        0,    0, 7221, 7234, 7231,    0,    0, 7249,    0,    0,

        0,    0, 7243, 7806, 7246, 7235, 7236, 7251, 7239, 7248,
     7253, 7251, 7806, 7265, 7262, 7806, 7252, 7806, 7266, 7806,
     7270, 7266, 7267,    0, 7272, 7267, 7271, 7286, 7274, 7283,
     7288, 7284,    0, 7293, 7297,    0, 7287,    0, 7301,    0,
     7306, 7302, 7303,    0, 7305, 7294, 7295, 7311, 7298, 7307,
     7314, 7315,    0, 7324, 7321,    0, 7311,    0, 7325,    0,
     7329, 7325, 7329,    0, 7337, 7329, 7330, 7346, 7333, 7342,
     7347, 7343,    0, 7359, 7356,    0, 7346,    0, 7361,    0,
     7365, 7361, 7356, 7806, 7371, 7368, 7374, 7368, 7372, 7375,
     7381, 7806, 7383, 7380, 7806, 7385, 7384, 7376,    0, 7391,

     7391, 7402, 7399, 7403, 7405, 7406,    0, 7408, 7405,    0,
     7410, 7416, 7408,    0, 7423, 7421, 7426, 7420, 7424, 7425,
     7426,    0, 7429, 7426,    0, 7431, 7432, 7429,    0, 7444,
     7441, 7446, 7440, 7444, 7445, 7449,    0, 7457, 7457,    0,
     7462, 7462, 7455, 7458, 7806, 7450, 7806, 7806, 7459, 7461,
     7806, 7806, 7806, 7475, 7468, 7472,    0, 7464,    0,    0,
     7473, 7468,    0,    0,    0, 7482, 7475, 7479,    0, 7471,
        0,    0, 7480, 7477,    0,    0,    0, 7496, 7489, 7492,
        0, 7484,    0,    0, 7493, 7488,    0,    0,    0, 7502,
     7806, 7497, 7507, 7522, 7504, 7806,    0, 7511, 7515, 7527,

     7509,    0,    0, 7515, 7526, 7538, 7520,    0,    0, 7527,
     7531, 7543, 7525,    0, 7539, 7527, 7806, 7548, 7543, 7531,
        0, 7553, 7553, 7541,    0, 7561, 7556, 7544,    0, 7564,
     7806,  339, 7553,    0,  322, 7557,    0,  314, 7564,    0,
      309, 7568, 7562, 7568, 7565, 7570, 7567, 7572, 7576, 7581,
     7580, 7806, 7582,    0, 7583,    0, 7584,    0, 7602, 7603,
     7604, 7606, 7594, 7595, 7598, 7604, 7600, 7601, 7602, 7603,
     7617, 7618, 7622, 7629, 7624, 7625, 7627, 7628, 7626, 7627,
     7628, 7636, 7642, 7643, 7645, 7646,  219,  211,  203,  195,
     7653, 7654, 7655, 7656, 7647, 7648, 7649, 7652, 7661, 7662,

     7663, 7664, 7659, 7660, 7661, 7665, 7677, 7681, 7682, 7684,
     7806,    0,    0,    0, 7806, 7749, 7754, 7757, 7765, 7773,
     7781, 7789, 7797
    } ;

static yyconst flex_int16_t yy_def[3624] =
    {   0,
     3615,    1, 3615,    3, 3615,    5,    5,    5,    5,    5,
     3615,   11, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3615, 3615, 3615, 3617,
     3617, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3617, 3617, 3619,
     3620, 3620, 3620, 3620, 3615, 3620, 3620, 3615, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3615, 3620, 3615, 3615, 3621,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3617,
     3617, 3617, 3617, 3617, 3617, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3617, 3617, 3617, 3617, 3617,
     3617, 3619, 3619, 3620, 3620, 3620, 3622, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3621, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3615, 3617, 3617, 3617, 3617, 3617, 3615, 3617,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3615, 3617, 3617,
     3617, 3617, 3617, 3615, 3617, 3619, 3615, 3619, 3622, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3615,

     3617, 3615, 3617, 3617, 3615, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3615, 3615, 3617, 3617, 3617,
     3615, 3623, 3619, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3617, 3615, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3615, 3617, 3623, 3623, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3617, 3623, 3623, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3617, 3623, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616,

     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620,
     3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3616, 3616, 3616, 3618, 3618, 3618, 3620,
     3620, 3620, 3615, 3615, 3616, 3616, 3618, 3618, 3620, 3620,
     3615, 3615, 3616, 3616, 3618, 3618, 3620, 3620, 3615, 3616,
     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616,
     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616,

     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620,    0, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615
    } ;

static yyconst flex_int16_t yy_nxt[7889] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   14,   18,   19,
       19,   19,   19,   20,   19,   14,   14,   14,   14,   14,
       19,   21,   22,   23,   19,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       48,   14,   14,   15,   16,   15,   17,   49,   14,   14,
       18,   19,   19,   19,   19,   20,   50,   51,   51,   51,

       51,   51,   19,   21,   22,   23,   19,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   75,   77,   75,   78,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   75,   48,   75,   14,   15,   16,   15,   17,   14,
       79,   14,   18,   19,   19,   19,   80,   20,   81,   82,
       82,   82,   82,   82,   19,   21,   22,   23,   19,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  106,   77,   14,   14,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  106,   48,  106,  108, 3594,   80,  109,
      109,  109,  109,  109,  108, 3593,   80,  109,  109,  109,
      109,  109,   19, 3592,   19,  110,  110,  110,  110,  110,
       19, 3591,   19,  110,  110,  110,  110,  110,  111,  112,
      113,   15,  114,  115,  111,  111,   18,  116,  116,  116,
      116,  117,  116,  111,  111,  111,  111,  111,  118,  119,

      120,  121,  118,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  111,  145,  111,  146,
      111,  111,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  111,  145,  111,  147,  111,
      148, 3549,  148,  151,  152,  154, 3547,  198,  199,  227,
      193,  155,  191,  156, 3545,  167,  252,  157,  158,  159,
      160,  161,  168,  162,  194,  192,  169,  163,  304,  170,
      164, 3543,  171,  165,  154,  172,  198,  199,  227,  193,

      155,  191,  156,  166,  167,  252,  157,  158,  159,  160,
      161,  168,  162,  194,  192,  169,  163,  304,  170,  164,
      204,  171,  165,  173,  172,  178,  305,  174,  205,  333,
      358,  175,  166,  411,  206,  195,  179,  176,  180,  243,
      177,  244,  196,  181,  245, 2210,  182,  197,  183,  204,
     2080,  475,  173,  148,  178,  305,  174,  205,  333,  358,
      175,  297,  411,  206,  195,  179,  176,  180,  243,  177,
      244,  196,  181,  245,  298,  182,  197,  183,  184,  200,
      228, 1952,  185,  201,  229, 1826,  186,  202,  230,  187,
      297, 3121,  188,  203,  231,  189,  299,  246,  190, 3080,

      207,  412,  208,  298,  209,  247,  440,  184,  200,  228,
      300,  185,  201,  229,  210,  186,  202,  230,  187,  211,
      212,  188,  203,  231,  189,  299,  246,  190,  352,  207,
      412,  208,  465,  209,  247,  440,  353, 3039,  223,  300,
      478,  479,  148,  210,  148, 2387, 2388,  525,  211,  212,
      213,  214,  224,  526,  215,  225, 2998,  352,  226,  554,
      216,  465,  217, 2677,  218,  353,  219,  223,  220,  221,
      222,  254,  254,  254,  254,  254,  525, 2484, 2485,  213,
      214,  224,  526,  215,  225,  255, 2656,  226,  554,  216,
      232,  217,  233,  218,  301,  219,  238,  220,  221,  222,

      234,  302,  235,  239,  240,  579,  303,  236,  237,  583,
      241,  588,  248,  242,  255,  249,  250, 2619,  475,  232,
      148,  233,  251,  301,  362,  238, 2518, 2582, 2583,  234,
      302,  235,  239,  240,  579,  303,  236,  237,  583,  241,
      588,  248,  242, 2577,  249,  250,  360,  360,  360,  360,
      360,  251,  256,  257,  257,  257,  257,  257, 2556,  268,
      361, 2519,  589,  269,  404, 2479,  270,  258, 2458,  271,
      349, 2421,  350,  406, 2616,  351,  469,  405, 2382,  272,
      473,  473,  473,  473,  473, 2361,  306,  407,  268,  361,
      307,  589,  269,  404,  308,  270,  258,  260,  271,  349,

      309,  350,  406,  261,  351,  262,  405,  273,  272,  263,
      264,  265,  266,  267,  274,  306,  407, 2324,  275,  307,
      590,  276, 2260,  308,  277,  591,  260,  278, 2256,  309,
     2682, 2683,  261, 2255,  262, 2130,  273,  310,  263,  264,
      265,  266,  267,  274,  279,  311,  284,  275,  280,  590,
      276,  312,  281,  277,  591,  459,  278,  285,  282,  286,
      456,  283,  457,  460,  287,  458,  310,  288, 2126,  289,
     2125,  592, 2002,  279,  311,  284, 1998,  280, 1997, 1876,
      312,  281, 1872, 1871,  459, 1751,  285,  282,  286,  456,
      283,  457,  460,  287,  458, 1673,  288,  329,  289,  290,

      592,  334,  598,  291,  313,  335,  314,  292,  315,  336,
      293,  330,  573,  294,  331,  337,  295,  332,  316,  296,
      574, 1593,  599,  317,  318, 1515,  329,  600,  290, 1437,
      334,  598,  291,  313,  335,  314,  292,  315,  336,  293,
      330,  573,  294,  331,  337,  295,  332,  316,  296,  574,
      408,  599,  317,  318,  319,  320,  600,  409,  321,  338,
      603,  339,  410,  601,  322,  518,  323,  602,  324,  340,
      325,  341,  326,  327,  328, 1359,  342,  343,  519,  408,
     1285, 1207,  582,  319,  320,  582,  409,  321,  338,  603,
      339,  410,  601,  322,  518,  323,  602,  324,  340,  325,

      341,  326,  327,  328,  344,  342,  343,  519,  580,  417,
      354,  345,  346,  355,  356,  480,  520,  418,  347,  611,
      357,  348,  477,  419,  885,  885,  885,  885,  885,  476,
      521,  253,  570,  344,  571,  153,  584,  572,  417,  354,
      345,  346,  355,  356,  585,  520,  418,  347,  611,  357,
      348,  362,  419,  363,  364,  364,  364,  364,  364,  521,
      375,  570,  150,  571,  376,  584,  572,  377,  365,  149,
      378,  586, 3615,  585,  466,  466,  466,  466,  466, 3615,
      379, 1042, 1042, 1042, 1042, 1042, 3615,  413,  467,  375,
     3615,  414,  587,  376,  618,  415,  377,  365,  367,  378,

      586,  416,  612, 3615,  368,  619,  369,  613,  380,  379,
      370,  371,  372,  373,  374,  381,  413,  467, 3615,  382,
      414,  587,  383,  618,  415,  384,  596,  367,  385, 3615,
      416,  612,  597,  368,  619,  369,  613,  380,  620,  370,
      371,  372,  373,  374,  381,  386,  609,  391,  382,  387,
      621,  383,  436,  388,  384,  596,  610,  385,  392,  389,
      393,  597,  390,  622,  623,  394,  437,  620,  395,  438,
      396, 3615,  439, 3615,  386,  609,  391, 3615,  387,  621,
     3615,  436,  388,  624,  625,  610,  629,  392,  389,  393,
     3615,  390,  622,  623,  394,  437, 3615,  395,  438,  396,

      397,  439,  441,  630,  398,  420,  442,  421,  399,  422,
      443,  400,  624,  625,  401,  629,  444,  402,  461,  423,
      403,  462,  463,  631,  424,  425, 3615, 3615,  464,  397,
     3615,  441,  630,  398,  420,  442,  421,  399,  422,  443,
      400, 3615, 3615,  401, 3615,  444,  402,  461,  423,  403,
      462,  463,  631,  424,  425,  426,  427,  464,  632,  428,
      445,  636,  446,  637,  638,  429,  639,  430,  640,  431,
      447,  432,  448,  433,  434,  435, 3615,  449,  450,  641,
      642, 3615,  646, 3615,  426,  427,  647,  632,  428,  445,
      636,  446,  637,  638,  429,  639,  430,  640,  431,  447,

      432,  448,  433,  434,  435,  451,  449,  450,  641,  642,
      489,  646,  452,  453,  490,  647,  653,  491,  654,  454,
      492,  468,  455,  469,  470,  470,  470,  470,  470, 3615,
      493, 3615,  651, 3615,  451, 3615, 3615,  652,  471,  489,
     3615,  452,  453,  490, 3615,  653,  491,  654,  454,  492,
      522,  455, 3615, 3615, 3615, 3615,  500,  523,  494,  493,
      501,  651,  524,  660,  502,  495,  652,  471,  481,  496,
      503,  661,  497,  504,  482,  498,  483, 3615,  499,  522,
      484,  485,  486,  487,  488,  500,  523,  494, 3615,  501,
     3615,  524,  660,  502,  495, 3615, 3615,  481,  496,  503,

      661,  497,  504,  482,  498,  483,  505,  499, 3615,  484,
      485,  486,  487,  488,  527,  643, 3615,  506,  528,  507,
      644,  645,  529,  531,  508,  550,  662,  509,  530,  510,
     3615,  532, 3615,  673, 3615,  505, 3615,  533, 3615,  551,
     3615, 3615,  552,  527,  643,  553,  506,  528,  507,  644,
      645,  529,  531,  508,  550,  662,  509,  530,  510,  511,
      532,  555,  673,  512,  674,  556,  533,  513,  551,  557,
      514,  552, 3615,  515,  553,  558,  516,  593,  594,  517,
      633,  534,  675,  535,  667,  536,  634,  668,  511,  635,
      555,  595,  512,  674,  556,  537,  513, 3615,  557,  514,

      538,  539,  515, 3615,  558,  516,  593,  594,  517,  633,
      534,  675,  535,  667,  536,  634,  668, 3615,  635, 3615,
      595, 3615, 3615,  575,  537, 3615,  576,  577,  648,  538,
      539,  540,  541,  578,  676,  542,  559,  677,  560,  649,
      650,  543,  678,  544, 3615,  545,  561,  546,  562,  547,
      548,  549,  575,  563,  564,  576,  577,  648, 3615, 3615,
      540,  541,  578,  676,  542,  559,  677,  560,  649,  650,
      543,  678,  544,  604,  545,  561,  546,  562,  547,  548,
      549,  565,  563,  564,  605,  606,  607,  614,  566,  567,
      615,  626, 3615,  608,  679,  568,  616,  627,  569,  680,

      658,  655,  604,  617,  659,  663,  665,  666,  628,  664,
      565, 3615,  656,  605,  606,  607,  614,  566,  567,  615,
      626,  657,  608,  679,  568,  616,  627,  569,  680,  658,
      655,  681,  617,  659,  663,  665,  666,  628,  664,  669,
      670,  656,  671,  672,  682,  683,  684,  686,  689,  690,
      657,  687,  691, 3615,  696,  699,  685,  688, 3615,  697,
      681,  692,  703,  704,  709, 3615,  693, 3615,  669,  670,
      698,  671,  672,  682,  683,  684,  686,  689,  690,  694,
      687,  691,  695,  696,  699,  685,  688,  700,  697,  705,
      692,  703,  704,  709,  707,  693,  701,  710,  721,  698,

      724,  711,  713,  719,  702,  708,  706,  722,  694,  712,
      714,  695,  716,  723,  725,  720,  700,  726,  705,  717,
      727,  718,  715,  707,  728,  701,  710,  721,  729,  724,
      711,  713,  719,  702,  708,  706,  722,  736,  712,  714,
     3615,  716,  723,  725,  720, 3615,  726, 3615,  717,  727,
      718,  715, 3615,  728, 3615, 3615, 3615,  729,  254,  254,
      254,  254,  254,  730, 3615,  730,  736,  731,  731,  731,
      731,  731,  255,  732,  732,  732,  732,  732,  256,  257,
      257,  257,  257,  257,  734,  739,  734,  733,  735,  735,
      735,  735,  735,  258,  737,  741,  742,  743,  744,  745,

      751,  255,  738,  746,  747,  749,  740,  752,  753,  754,
      756,  750, 3615,  755,  739,  764,  733,  748, 3615, 3615,
      762, 3615,  258,  737,  741,  742,  743,  744,  745,  751,
      763,  738,  746,  747,  749,  740,  752,  753,  754,  756,
      750,  757,  755,  765,  764,  771,  748,  767,  766,  762,
      768,  772,  758,  759,  760,  773,  769,  774,  775,  763,
      776,  761,  777,  770,  778, 3615,  782,  783,  784,  785,
      757, 3615,  765,  789,  771,  790,  767,  766,  791,  768,
      772,  758,  759,  760,  773,  769,  774,  775,  779,  776,
      761,  777,  770,  778,  780,  782,  783,  784,  785,  792,

      786,  793,  789,  794,  790,  781,  787,  791,  795,  788,
      796,  799,  800,  801,  804,  797,  798,  779,  806,  805,
      807,  813,  811,  780,  802,  803,  812,  814,  792,  786,
      793,  815,  794, 3615,  781,  787, 3615,  795,  788,  796,
      799,  800,  801,  804,  797,  798,  808,  806,  805,  807,
      813,  811,  826,  802,  803,  812,  814,  809,  816,  827,
      815,  828,  817,  818,  819,  820,  810,  829,  821,  822,
      823,  824,  825,  830,  831,  808,  832,  833,  834,  835,
      836,  826, 3615,  842,  843, 3615,  809,  816,  827,  844,
      828,  817,  818,  819,  820,  810,  829,  821,  822,  823,

      824,  825,  830,  831,  837,  832,  833,  834,  835,  836,
      849,  839,  842,  843,  838,  840,  850,  845,  844,  852,
      853,  841,  846,  856,  857,  858,  862,  851,  863,  854,
      860, 3615, 3615,  837, 3615,  847, 3615,  855,  848,  849,
      839,  861,  859,  838,  840,  850,  845,  874,  852,  853,
      841,  846,  856,  857,  858,  862,  851,  863,  854,  860,
      864,  866,  877,  872,  847,  869,  855,  848,  865,  867,
      861,  859,  870,  875,  871,  873,  874,  878,  879,  876,
      880,  868,  881,  882, 1046, 1046, 1046, 1046, 1046,  864,
      866,  877,  872, 3615,  869, 3615, 3615,  865,  867, 3615,

     3615,  870,  875,  871,  873,  891,  878,  879,  876,  880,
      868,  881,  882,  360,  360,  360,  360,  360,  883, 3615,
      883, 3615,  884,  884,  884,  884,  884,  361,  886,  886,
      886,  886,  886,  362,  891,  363,  888,  888,  888,  888,
      888,  889,  887,  889,  892,  890,  890,  890,  890,  890,
      365,  894,  893,  896,  897,  898,  361,  899,  900,  904,
      901,  902,  906,  907,  908,  905,  909,  911, 3615,  919,
      910,  887,  895,  892,  903,  917, 3615,  926,  927,  365,
      894,  893,  896,  897,  898,  918,  899,  900,  904,  901,
      902,  906,  907,  908,  905,  909,  911,  912,  919,  910,

      920,  895,  928,  903,  917,  921,  926,  927,  913,  914,
      915,  929,  922,  930,  918,  923,  931,  916,  932,  933,
     3615,  924,  937,  938,  939,  940,  912,  941,  925,  920,
      944,  928,  945,  942,  921,  946,  943,  913,  914,  915,
      929,  922,  930,  934,  923,  931,  916,  932,  933,  935,
      924,  937,  938,  939,  940,  947,  941,  925,  948,  944,
      936,  945,  942,  949,  946,  943,  950,  954,  951,  955,
      956,  959,  934,  952,  953,  961,  960,  962,  935,  968,
      969,  957,  958, 3615,  947,  970,  966,  948, 3615,  936,
      967,  981,  949,  973,  974,  950,  954,  951,  955,  956,

      959,  963,  952,  953,  961,  960,  962,  982,  968,  969,
      957,  958,  964,  971,  970,  966,  983,  972,  984,  967,
      981,  965,  973,  974,  975,  977,  978,  976,  979,  980,
      963,  985,  986,  987,  988,  989,  982,  990,  991,  992,
     3615,  964,  971,  997,  998,  983,  972,  984,  999,  993,
      965, 1004, 1007,  975,  977,  978,  976,  979,  980, 1005,
      985,  986,  987,  988,  989,  994,  990,  991,  992,  995,
     1006, 1000,  997,  998, 1008,  996, 1001,  999,  993, 1011,
     1004, 1007, 1012, 1009, 1013, 1015, 1017, 1018, 1005, 1002,
     3615, 1010, 1003, 1029,  994, 1027, 1016, 3615,  995, 1006,

     1000, 1014, 1019, 1008,  996, 1001, 1032, 1028, 1011, 1021,
     1020, 1012, 1009, 1013, 1015, 1017, 1018, 1022, 1002, 1024,
     1010, 1003, 1029, 1033, 1027, 1016, 1025, 1030, 1026, 1023,
     1014, 1019, 1034, 1031, 1035, 1032, 1028, 1036, 1021, 1020,
     1037,  731,  731,  731,  731,  731, 1022, 1051, 1024, 1056,
     3615, 3615, 1033, 3615, 3615, 1025, 1030, 1026, 1023, 3615,
     3615, 1034, 1031, 1035, 3615, 3615, 1036, 3615, 3615, 1037,
      466,  466,  466,  466,  466, 1038, 1051, 1038, 1056, 1039,
     1039, 1039, 1039, 1039,  467, 1040, 1040, 1040, 1040, 1040,
      468, 3615,  469, 1043, 1043, 1043, 1043, 1043, 1044, 1041,

     1044, 1057, 1045, 1045, 1045, 1045, 1045,  471, 1047, 1050,
      581, 1052,  581,  467, 1054,  581, 1058, 1059, 1060, 1053,
     1048, 1048, 1048, 1048, 1048, 1061, 1062,  581, 1041, 3615,
     1057,  581, 1064, 1066, 1067, 1055,  471, 1068, 1065, 1063,
     1052, 1071, 3615, 1054, 3615, 1058, 1059, 1060, 1053, 1069,
     1079, 3615, 1080, 1070, 1061, 1062, 1086, 1081,  581, 1077,
     1072, 1064, 1066, 1067, 1055, 1087, 1068, 1065, 1063, 1078,
     1071, 1073, 1074, 1075, 1082, 1088, 1089, 1083, 1069, 1079,
     1076, 1080, 1070, 1084, 1090, 1086, 1081, 1091, 1077, 1072,
     1085, 1092, 1093, 1094, 1087, 1097, 1098, 1099, 1078, 1095,

     1073, 1074, 1075, 1082, 1088, 1089, 1083, 1100, 1101, 1076,
     1096, 1104, 1084, 1090, 1102, 1105, 1091, 1103, 1106, 1085,
     1092, 1093, 1094, 1107, 1097, 1098, 1099, 1108, 1095, 1109,
     1110, 1114, 1115, 1119, 1128, 3615, 1100, 1101, 1120, 1096,
     1104, 1129, 1116, 1102, 1105, 1111, 1103, 1106, 1130, 1141,
     1112, 1113, 1107, 1117, 1118, 1121, 1108, 1122, 1109, 1110,
     1114, 1115, 1119, 1128, 1126, 1123, 1142, 1120, 1127, 1131,
     1129, 1116, 1135, 1132, 1111, 1136, 1124, 1130, 1141, 1112,
     1113, 1143, 1117, 1118, 1121, 1125, 1122, 1133, 1134, 1137,
     1138, 1139, 1140, 1126, 1123, 1142, 1144, 1127, 1131, 1145,

     1146, 1135, 1132, 1147, 1136, 1124, 1148, 1149, 1150, 1151,
     1143, 1157, 1152, 1158, 1125, 1159, 1133, 1134, 1137, 1138,
     1139, 1140, 1153, 1154, 1164, 1144, 1167, 1155, 1145, 1146,
     1168, 1171, 1147, 1156, 1165, 1148, 1149, 1150, 1151, 1169,
     1157, 1152, 1158, 1160, 1159, 1166, 1172, 1170, 1161, 1173,
     1177, 1153, 1154, 1164, 1175, 1167, 1155, 1178, 1187, 1168,
     1171, 1162, 1156, 1165, 1163, 1176, 1174, 1189, 1169, 3615,
     1188, 3615, 1160, 1179, 1166, 1172, 1170, 1161, 1173, 1177,
     1181, 1180, 1184, 1175, 1192, 1193, 1178, 1187, 1182, 1185,
     1162, 1186, 1190, 1163, 1176, 1174, 1189, 1194, 1191, 1188,

     1183, 1195, 1179, 1196, 1197, 1198, 1199, 1200, 1201, 1181,
     1180, 1184, 1202, 1192, 1193, 1203, 1204, 1182, 1185, 1205,
     1186, 1190, 1206, 1208, 1209, 1210, 1194, 1191, 1212, 1183,
     1195, 1213, 1196, 1197, 1198, 1199, 1200, 1201, 1214, 1215,
     1211, 1202, 1216, 1217, 1203, 1204, 1220, 1218, 1205, 1219,
     1221, 1206, 1208, 1209, 1210, 1222, 1226, 1212, 1231, 1223,
     1213, 1227, 1228, 1229, 1232, 1233, 1230, 1214, 1215, 1211,
     1234, 1216, 1217, 1224, 1225, 1220, 1218, 1235, 1219, 1221,
     1236, 1237, 1238, 1239, 1222, 1226, 1240, 1231, 1223, 1241,
     1227, 1228, 1229, 1232, 1233, 1230, 1242, 1243, 1244, 1234,

     1245, 1246, 1224, 1225, 1247, 1248, 1235, 1249, 1252, 1236,
     1237, 1238, 1239, 1250, 1253, 1240, 1254, 1255, 1241, 1256,
     1257, 1258, 1259, 1260, 1261, 1242, 1243, 1244, 1267, 1245,
     1246, 1251, 1268, 1247, 1248, 1269, 1249, 1252, 1270, 1262,
     1271, 1272, 1250, 1253, 1273, 1254, 1255, 3615, 1256, 1257,
     1258, 1259, 1260, 1261, 1263, 1274, 1264, 1267, 1275, 1276,
     1251, 1268, 1277, 1278, 1269, 1279, 1265, 1270, 1262, 1271,
     1272, 1280, 1282, 1273, 1283, 1284, 1266, 1286, 1287, 1288,
     1289, 1290, 1291, 1281, 1274, 1292, 1293, 1275, 1276, 1294,
     1295, 1277, 1278, 1296, 1279, 1265, 1297, 1298, 1299, 1300,

     1280, 1282, 1301, 1283, 1284, 1266, 1286, 1287, 1288, 1289,
     1290, 1291, 1281, 1302, 1292, 1293, 1303, 1304, 1294, 1295,
     1305, 1306, 1296, 1307, 1308, 1297, 1298, 1299, 1300, 1309,
     1310, 1301, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1302, 1314, 1322, 1303, 1304, 1323, 1324, 1305,
     1306, 1325, 1307, 1308, 1326, 1327, 1328, 1329, 1309, 1310,
     1330, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1333, 1331, 1322, 1332, 1334, 1323, 1324, 1335, 1336,
     1325, 1337, 1341, 1326, 1327, 1328, 1329, 1342, 1343, 1330,
     1338, 1339, 1344, 1345, 1346, 1347, 3615, 3615, 3615, 3615,

     1333, 1331, 3615, 1332, 1334, 3615, 3615, 1335, 1336, 3615,
     1337, 1341, 3615, 1340, 3615, 3615, 1342, 1343, 3615, 1338,
     1339, 1344, 1345, 1346, 1347,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  735,  735,  735,  735,  735,
     1350, 1348, 1340, 1348,  733, 1349, 1349, 1349, 1349, 1349,
      735,  735,  735,  735,  735, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1360, 1361, 1362, 1364, 1365, 1366, 1350,
     1367, 1368, 1369,  733, 1370, 1372, 1371, 1373, 1374, 1378,
     1363, 1379, 1380, 3615, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1360, 1361, 1362, 1364, 1365, 1366, 1375, 1367,

     1368, 1369, 1383, 1370, 1372, 1371, 1373, 1374, 1378, 1363,
     1379, 1380, 1376, 1377, 1381, 1384, 1385, 1382, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1395, 1375, 1396, 1397,
     1398, 1383, 1394, 1399, 1400, 1401, 1404, 1405, 1402, 1406,
     1407, 1376, 1377, 1381, 1384, 1385, 1382, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1395, 1403, 1396, 1397, 1398,
     1408, 1394, 1399, 1400, 1401, 1404, 1405, 1402, 1406, 1407,
     1409, 1410, 1411, 1412, 1415, 1413, 1416, 1419, 1420, 1421,
     1422, 1423, 1424, 1425, 1426, 1403, 1417, 1427, 1428, 1408,
     1414, 1429, 1430, 1431, 1434, 1435, 1418, 3615, 1436, 1409,

     1410, 1411, 1412, 1438, 1413, 1439, 1419, 1420, 1421, 1422,
     1423, 1424, 1425, 1426, 1432, 1417, 1427, 1428, 1440, 1414,
     1429, 1430, 1431, 1434, 1435, 1418, 1433, 1436, 1441, 1442,
     1443, 1444, 1438, 1445, 1439, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1432, 1454, 1455, 1456, 1440, 1457, 1458,
     1459, 1460, 1461, 1462, 1463, 1433, 1464, 1441, 1442, 1443,
     1444, 1467, 1445, 1465, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1453, 1466, 1454, 1455, 1456, 1468, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1469, 1464, 1470, 1471, 1472, 1473,
     1467, 1474, 1465, 1475, 1476, 1477, 1478, 1479, 1480, 1481,

     1482, 1483, 1485, 1484, 1486, 1468, 1487, 1488, 1489, 1493,
     1494, 1490, 1491, 1469, 1497, 1470, 1471, 1472, 1473, 1498,
     1474, 1499, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1485, 1484, 1486, 1492, 1487, 1488, 1489, 1493, 1494,
     1490, 1491, 1495, 1497, 1506, 1507, 1496, 3615, 1498, 3615,
     1499, 1500, 1500, 1500, 1500, 1500,  884,  884,  884,  884,
      884, 3615, 3615, 1492, 1501, 1501, 1501, 1501, 1501, 3615,
     3615, 1495, 3615, 1506, 1507, 1496,  886,  886,  886,  886,
      886, 1502, 3615, 1502, 3615, 1503, 1503, 1503, 1503, 1503,
      887,  362, 1508,  363, 1504, 1504, 1504, 1504, 1504, 1505,

     1505, 1505, 1505, 1505, 1509, 1510, 1511, 1512,  365,  890,
      890,  890,  890,  890, 1513, 1514, 1516, 1517, 1520,  887,
     1521, 1508, 1522, 1518, 1523, 1524, 1525, 1526, 1528, 1527,
     1529, 1530, 1534, 1509, 1510, 1511, 1512,  365, 1519, 1535,
     1536, 3615, 1539, 1513, 1514, 1516, 1517, 1520, 1531, 1521,
     1540, 1522, 1518, 1523, 1524, 1525, 1526, 1528, 1527, 1529,
     1530, 1534, 1532, 1533, 1541, 1542, 1543, 1519, 1535, 1536,
     1537, 1539, 1544, 1538, 1545, 1546, 1547, 1531, 1548, 1540,
     1549, 1551, 1552, 1553, 1554, 1555, 1556, 1550, 1557, 1560,
     1558, 1532, 1533, 1541, 1542, 1543, 1561, 1562, 1563, 1537,

     1564, 1544, 1538, 1545, 1546, 1547, 1565, 1548, 1559, 1549,
     1551, 1552, 1553, 1554, 1555, 1556, 1550, 1557, 1560, 1558,
     1566, 1567, 1568, 1569, 3615, 1561, 1562, 1563, 1575, 1564,
     1576, 1571, 1577, 1572, 1578, 1565, 1579, 1559, 1570, 1580,
     1581, 1582, 1583, 1573, 1584, 1585, 1586, 1587, 1588, 1566,
     1567, 1568, 1569, 1574, 1590, 1591, 1592, 1575, 1594, 1576,
     1589, 1577, 1595, 1578, 1596, 1579, 1597, 1570, 1580, 1581,
     1582, 1583, 1573, 1584, 1585, 1586, 1587, 1588, 1598, 1599,
     1600, 1601, 1574, 1590, 1591, 1592, 1602, 1594, 1603, 1589,
     1604, 1595, 1605, 1596, 1606, 1597, 1607, 1608, 1609, 1610,

     1611, 1612, 1613, 1614, 1615, 1616, 1617, 1598, 1599, 1600,
     1601, 1618, 1619, 1620, 1623, 1602, 3615, 1603, 1624, 1604,
     1625, 1605, 1626, 1606, 1627, 1607, 1608, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1621, 1628, 1629, 1630,
     1618, 1619, 1620, 1623, 1631, 1622, 1632, 1624, 1633, 1625,
     1634, 1626, 1635, 1627, 1636, 1637, 1638, 1639, 1641, 1640,
     1642, 1643, 1644, 1645, 3615, 1621, 1628, 1629, 1630, 1649,
     1646, 1647, 1650, 1631, 1651, 1632, 1653, 1633, 1652, 1634,
     1654, 1635, 1655, 1636, 1637, 1638, 1639, 1641, 1640, 1642,
     1643, 1644, 1645, 1648, 3615, 3615, 3615, 3615, 1649, 1646,

     1647, 1650, 1664, 1651, 3615, 1653, 3615, 1652, 3615, 1654,
     3615, 1655, 1656, 1656, 1656, 1656, 1656, 1039, 1039, 1039,
     1039, 1039, 1648, 1040, 1040, 1040, 1040, 1040, 1657, 1665,
     1657, 1664, 1658, 1658, 1658, 1658, 1658, 1041, 1659, 1659,
     1659, 1659, 1659,  468, 3615,  469, 1660, 1660, 1660, 1660,
     1660, 1661, 1661, 1661, 1661, 1661, 1047, 1666, 1665, 1667,
      471, 1045, 1045, 1045, 1045, 1045, 1041, 1047, 1046, 1046,
     1046, 1046, 1046, 1662, 1662, 1662, 1662, 1662, 1668, 1663,
     1663, 1663, 1663, 1663, 1050,  581, 1666,  581, 1667,  471,
      581, 1669, 1670, 1671, 1672, 1674, 1675, 1676, 1678, 1679,

     1680, 1681,  581, 1682, 3615, 1683,  581, 1668, 1684, 1686,
     1685, 1687, 1677, 1688, 1692, 1697, 3615, 3615, 1693, 1694,
     1669, 1670, 1671, 1672, 1674, 1675, 1676, 1678, 1679, 1680,
     1681, 1689, 1682,  581, 1683, 1698, 1699, 1684, 1686, 1685,
     1687, 1677, 1688, 1692, 1697, 1690, 1691, 1693, 1694, 1695,
     1700, 1701, 1696, 1702, 1703, 1704, 1705, 1706, 1709, 1707,
     1689, 1710, 1711, 1712, 1698, 1699, 1708, 1713, 1714, 1715,
     1718, 1716, 1719, 1720, 1690, 1691, 1721, 1722, 1695, 1700,
     1701, 1696, 1702, 1703, 1704, 1705, 1706, 1709, 1707, 1717,
     1710, 1711, 1712, 1723, 1724, 1708, 1713, 1714, 1715, 1718,

     1716, 1719, 1720, 1725, 1726, 1721, 1722, 1733, 1729, 1727,
     1730, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1717, 1741,
     1731, 1742, 1723, 1724, 1728, 1743, 1744, 1745, 1748, 1749,
     1732, 1750, 1725, 1726, 1752, 1746, 1733, 1753, 1727, 1754,
     1734, 1735, 1736, 1737, 1738, 1739, 1740, 1747, 1741, 1731,
     1742, 1755, 1756, 1728, 1743, 1744, 1745, 1748, 1749, 1732,
     1750, 1757, 1758, 1752, 1746, 1759, 1753, 1760, 1754, 1761,
     1762, 1763, 1764, 1765, 1766, 1767, 1747, 1768, 1769, 1770,
     1755, 1756, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
     1757, 1758, 1781, 1782, 1759, 1783, 1760, 1784, 1761, 1762,

     1763, 1764, 1765, 1766, 1767, 1785, 1768, 1769, 1770, 1786,
     1779, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1780,
     1787, 1781, 1782, 1788, 1783, 1789, 1784, 1790, 1791, 1792,
     1793, 1794, 1795, 1796, 1785, 1797, 1799, 1798, 1786, 1779,
     1800, 1801, 1802, 1803, 1804, 1805, 1807, 1808, 1811, 1787,
     1812, 1809, 1788, 1813, 1789, 1810, 1790, 1791, 1792, 1793,
     1794, 1795, 1796, 1814, 1797, 1799, 1798, 1806, 1815, 1800,
     1801, 1802, 1803, 1804, 1805, 1807, 1808, 1811, 1816, 1812,
     1809, 1817, 1813, 1818, 1810, 1819, 1820, 1821, 1822, 1823,
     1824, 3615, 1814, 1825, 1827, 1828, 1806, 1815, 1829, 1830,

     1831, 1832, 1833, 1834, 1835, 1836, 1837, 1816, 1838, 1842,
     1817, 1843, 1818, 1844, 1819, 1820, 1821, 1822, 1823, 1824,
     1826, 1845, 1825, 1827, 1828, 1839, 1846, 1829, 1830, 1831,
     1832, 1833, 1834, 1835, 1836, 1837, 1847, 1838, 1842, 1848,
     1843, 1840, 1844, 1841, 1849, 1850, 1851, 1852, 1853, 1854,
     1845, 1855, 1856, 1857, 1839, 1846, 1858, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1866, 1847, 1867, 1868, 1848, 1869,
     1840, 1870, 1841, 1849, 1850, 1851, 1852, 1853, 1854, 1875,
     1855, 1856, 1857, 1873, 1877, 1858, 1859, 1860, 1861, 1862,
     1863, 1864, 1865, 1866, 1874, 1867, 1868, 1878, 1869, 1879,

     1870, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1875, 1887,
     1888, 1889, 1873, 1877, 1891, 1892, 1893, 1894, 1895, 1896,
     1897, 1890, 1898, 1874, 1899, 1900, 1878, 1901, 1879, 1904,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1902, 1887, 1888,
     1889, 1903, 1905, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
     1890, 1898, 1906, 1899, 1900, 1907, 1901, 1908, 1904, 1909,
     1910, 1911, 1912, 1913, 1914, 1915, 1902, 1916, 1917, 1918,
     1903, 1905, 1919, 1920, 1921, 1922, 1923, 1925, 1926, 1924,
     1927, 1906, 1928, 1929, 1907, 1930, 1908, 1931, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1932, 1916, 1917, 1918, 1933,

     1934, 1919, 1920, 1921, 1922, 1923, 1925, 1926, 1924, 1927,
     1935, 1928, 1929, 1936, 1930, 1937, 1931, 1938, 1939, 1349,
     1349, 1349, 1349, 1349, 1932, 1940, 1941, 1942, 1933, 1934,
     1349, 1349, 1349, 1349, 1349, 1943, 1944, 1945, 1946, 1935,
     1947, 1948, 1936, 1949, 1937, 1950, 1938, 1939, 1951, 1953,
     1954, 1955, 1956, 1957, 1940, 1941, 1942, 1958, 1959, 1960,
     1961, 1962, 1963, 1964, 1943, 1944, 1945, 1946, 1968, 1947,
     1948, 1969, 1949, 1970, 1950, 1952, 1971, 1951, 1953, 1954,
     1955, 1956, 1957, 1965, 1972, 1973, 1958, 1959, 1960, 1961,
     1962, 1963, 1964, 1974, 1975, 1976, 1977, 1968, 1978, 1966,

     1969, 1967, 1970, 1979, 1980, 1971, 1981, 1982, 1983, 1984,
     1985, 1986, 1965, 1972, 1973, 1987, 1988, 1989, 1990, 1991,
     1992, 1993, 1974, 1975, 1976, 1977, 1994, 1978, 1966, 1995,
     1967, 1996, 1979, 1980, 2001, 1981, 1982, 1983, 1984, 1985,
     1986, 1999, 2003, 2004, 1987, 1988, 1989, 1990, 1991, 1992,
     1993, 2005, 2000, 2006, 2007, 1994, 2008, 2009, 1995, 2010,
     1996, 2011, 2012, 2001, 2013, 2014, 2015, 2017, 2018, 2019,
     1999, 2003, 2004, 2020, 2021, 2022, 2016, 2023, 2024, 2025,
     2005, 2000, 2006, 2007, 2026, 2008, 2009, 2027, 2010, 2030,
     2011, 2012, 2031, 2013, 2014, 2015, 2017, 2018, 2019, 2032,

     2033, 2034, 2020, 2021, 2022, 2016, 2023, 2024, 2025, 2035,
     2028, 2036, 2037, 2026, 2029, 2038, 2027, 2039, 2030, 2040,
     2041, 2031, 2042, 2043, 2044, 2045, 2046, 2047, 2032, 2033,
     2034, 2048, 2049, 2051, 2052, 2050, 2053, 2054, 2035, 2028,
     2036, 2037, 2055, 2029, 2038, 2056, 2039, 2057, 2040, 2041,
     2058, 2042, 2043, 2044, 2045, 2046, 2047, 2059, 2060, 2061,
     2048, 2049, 2051, 2052, 2050, 2053, 2054, 2062, 2063, 2064,
     2065, 2055, 3615, 3615, 2056, 3615, 2057, 3615, 3615, 2058,
     1500, 1500, 1500, 1500, 1500, 3615, 2059, 2060, 2061, 2066,
     2066, 2066, 2066, 2066, 2068, 2069, 2062, 2063, 2064, 2065,

     2067, 2067, 2067, 2067, 2067, 1503, 1503, 1503, 1503, 1503,
      363, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 2070, 2071, 2068, 2069,  365, 2072, 2073, 2074, 2075,
     2076, 2077, 2078, 3615, 2081, 2079, 2082, 2083, 2084, 2085,
     2086, 2087, 2088, 2089, 2090, 2091, 2092, 3615, 2096, 2097,
     2070, 2071, 2098, 2099,  365, 2072, 2073, 2074, 2075, 2076,
     2077, 2078, 2080, 2081, 2079, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2096, 2097, 2100,
     2101, 2098, 2099, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2094, 2111, 2095, 2112, 2113, 2114, 2115, 2116,

     2117, 2118, 2119, 2120, 2121, 2093, 2122, 2123, 2100, 2101,
     2124, 2129, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
     2110, 2094, 2111, 2095, 2112, 2113, 2114, 2115, 2116, 2117,
     2118, 2119, 2120, 2121, 2127, 2122, 2123, 2131, 2132, 2124,
     2129, 2133, 2134, 2135, 2136, 2128, 2137, 2138, 2139, 2140,
     2141, 2142, 2143, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
     2152, 2153, 2144, 2127, 2154, 2155, 2131, 2132, 2158, 2159,
     2133, 2134, 2135, 2136, 2128, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2144, 2156, 2154, 2155, 2160, 2157, 2158, 2159, 2161,

     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2179, 2180, 2178, 2181,
     2182, 2156, 2183, 2184, 2160, 2157, 2185, 2186, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2174, 2175, 2176, 2177, 2179, 2180, 2178, 2181, 2182,
     2187, 2183, 2184, 2188, 2189, 2185, 2186, 2190, 2191, 2192,
     2193, 1656, 1656, 1656, 1656, 1656, 2194, 2194, 2194, 2194,
     2194, 1658, 1658, 1658, 1658, 1658, 3615, 3615, 3615, 2187,
     2198, 2199, 2188, 2189, 3615, 3615, 2190, 2191, 2192, 2193,
     2195, 2195, 2195, 2195, 2195,  468, 2200, 2201, 1660, 1660,

     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1047, 2198,
     2199, 2202,  471, 2197, 2197, 2197, 2197, 2197, 2203, 2204,
     1046, 1046, 1046, 1046, 1046, 2200, 2201, 2205, 2206, 2207,
     2208, 3615, 2211, 2209, 2212, 2213, 2214, 2215, 2216, 2217,
     2202,  471, 2218, 2219, 2220, 2221, 2222, 2203, 2204, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2205, 2206, 2207, 2208,
     2210, 2211, 2209, 2212, 2213, 2214, 2215, 2216, 2217, 2223,
     2233, 2218, 2219, 2220, 2221, 2222, 2234, 2235, 2226, 2227,
     2228, 2229, 2230, 2231, 2232, 2224, 2236, 2225, 2237, 2238,
     2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2223, 2233,

     2247, 2248, 2249, 2250, 2251, 2234, 2235, 2252, 2253, 2254,
     3615, 2259, 2261, 2262, 2224, 2236, 2225, 2237, 2238, 2239,
     2240, 2241, 2242, 2243, 2244, 2245, 2246, 2263, 2257, 2247,
     2248, 2249, 2250, 2251, 2264, 2265, 2252, 2253, 2254, 2258,
     2259, 2261, 2262, 2266, 2267, 2268, 2269, 2270, 2271, 2272,
     2273, 2275, 2276, 2277, 2278, 2279, 2263, 2257, 2280, 2281,
     2274, 2282, 2283, 2264, 2265, 2284, 2285, 2286, 2258, 2288,
     2289, 2287, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273,
     2275, 2276, 2277, 2278, 2279, 2290, 2291, 2280, 2281, 2274,
     2282, 2283, 2292, 2293, 2284, 2285, 2286, 2294, 2288, 2289,

     2287, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303,
     2304, 2305, 2306, 2307, 2290, 2291, 2308, 2309, 2310, 2311,
     2312, 2292, 2293, 2313, 2314, 2315, 2294, 2316, 2317, 2318,
     2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304,
     2305, 2306, 2307, 2319, 2320, 2308, 2309, 2310, 2311, 2312,
     2321, 2322, 2313, 2314, 2315, 2323, 2316, 2317, 2318, 2325,
     2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335,
     2336, 2337, 2319, 2320, 2338, 2339, 2340, 2341, 2342, 2321,
     2322, 2343, 2344, 2345, 2323, 2346, 2350, 2351, 2325, 2326,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,

     2337, 2352, 2353, 2338, 2339, 2340, 2341, 2342, 2347, 2354,
     2343, 2344, 2345, 2355, 2346, 2350, 2351, 2356, 2348, 2357,
     2349, 2358, 2359, 2360, 2362, 2363, 2364, 2365, 2366, 2367,
     2352, 2353, 2368, 2369, 2370, 2373, 2371, 2347, 2354, 2372,
     2374, 2375, 2355, 2376, 2377, 2378, 2356, 2348, 2357, 2349,
     2358, 2359, 2360, 2362, 2363, 2364, 2365, 2366, 2367, 2379,
     2380, 2368, 2369, 2370, 2373, 2371, 2381, 2383, 2372, 2374,
     2375, 2384, 2376, 2377, 2378, 2385, 2386, 2389, 2390, 2391,
     2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2379, 2380,
     2400, 2401, 2402, 2403, 2404, 2381, 2383, 2405, 2406, 2407,

     2384, 2408, 2409, 2410, 2385, 2386, 2389, 2390, 2391, 2392,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2411, 2412, 2400,
     2401, 2402, 2403, 2404, 2413, 2414, 2405, 2406, 2407, 2415,
     2408, 2409, 2410, 2416, 2417, 2418, 2419, 2420, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2411, 2412, 2430, 2431,
     2432, 2433, 2434, 2413, 2414, 2435, 2436, 2437, 2415, 2438,
     2439, 2440, 2416, 2417, 2418, 2419, 2420, 2422, 2423, 2424,
     2425, 2426, 2427, 2428, 2429, 2441, 2442, 2430, 2431, 2432,
     2433, 2434, 2443, 2444, 2435, 2436, 2437, 2447, 2438, 2439,
     2440, 2448, 2449, 2445, 2450, 2446, 2451, 2452, 2453, 2454,

     2455, 2456, 2457, 2459, 2441, 2442, 2460, 2461, 2462, 2463,
     2464, 2443, 2444, 2465, 2466, 2467, 2447, 2470, 2471, 3615,
     2448, 2449, 2445, 2450, 2446, 2451, 2452, 2453, 2454, 2455,
     2456, 2457, 2459, 2472, 2473, 2460, 2461, 2462, 2463, 2464,
     2474, 2475, 2465, 2466, 2467, 2468, 2470, 2471, 2469, 2476,
     2477, 2478, 2480, 2481, 2482, 2483, 2486, 2487, 2488, 2489,
     2490, 2491, 2472, 2473, 2492, 2493, 2494, 2495, 2496, 2474,
     2475, 2497, 2498, 2499, 2468, 2500, 2501, 2469, 2476, 2477,
     2478, 2480, 2481, 2482, 2483, 2486, 2487, 2488, 2489, 2490,
     2491, 2502, 2503, 2492, 2493, 2494, 2495, 2496, 2504, 2505,

     2497, 2498, 2499, 2506, 2500, 2501, 2507, 2508, 2509, 2510,
     2511, 2512, 2513, 2514, 2515, 2516, 2517, 2520, 2521, 2522,
     2502, 2503, 2067, 2067, 2067, 2067, 2067, 2504, 2505, 2523,
     2524, 2525, 2506, 2526, 2527, 2507, 2508, 2509, 2510, 2511,
     2512, 2513, 2514, 2515, 2516, 2517, 2520, 2521, 2522, 2528,
     2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2523, 2524,
     2525, 2537, 2526, 2527, 2538, 2539, 2540, 2541, 2545, 2546,
     2547, 2548, 2549, 2550, 2551, 2552, 2553, 2542, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2543, 2554, 2544,
     2537, 2555, 2557, 2538, 2539, 2540, 2541, 2545, 2546, 2547,

     2548, 2549, 2550, 2551, 2552, 2553, 2542, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2568, 2543, 2554, 2544, 2566,
     2555, 2557, 2567, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
     2576, 2578, 2579, 2580, 2581, 2584, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2568, 2585, 2586, 2587, 2566, 2588,
     2589, 2567, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576,
     2578, 2579, 2580, 2581, 2584, 2590, 2591, 2592, 2593, 2594,
     2595, 2596, 2597, 2598, 2585, 2586, 2587, 2599, 2588, 2589,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2590, 2591, 2592, 2593, 2594, 2595,

     2596, 2597, 2598, 2614, 2615, 3615, 2599, 3615, 3615, 2600,
     2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
     2611, 2612, 2613, 2194, 2194, 2194, 2194, 2194, 2620, 2621,
     2622, 2623, 2614, 2615, 2617, 2617, 2617, 2617, 2617, 2618,
     2618, 2618, 2618, 2618, 2624, 2625, 2626, 2627, 2628, 2629,
     2630, 2631, 2632, 2633, 2634, 2635, 2636, 2620, 2621, 2622,
     2623, 2637, 2638, 2639, 2640, 2641, 2645, 3615, 2646, 3615,
     2647, 2648, 2649, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2635, 2636, 2642, 2650, 2651, 2652,
     2637, 2638, 2639, 2640, 2641, 2645, 2643, 2646, 2644, 2647,

     2648, 2649, 2653, 2654, 2655, 2657, 2658, 2659, 2660, 2661,
     2662, 2663, 2664, 2665, 2668, 2642, 2650, 2651, 2652, 2666,
     2669, 2670, 2667, 2671, 2672, 2643, 2673, 2644, 2674, 2675,
     2676, 2653, 2654, 2655, 2657, 2658, 2659, 2660, 2661, 2662,
     2663, 2664, 2665, 2668, 2678, 2679, 2680, 2681, 2666, 2669,
     2670, 2667, 2671, 2672, 2684, 2673, 2685, 2674, 2675, 2676,
     2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695,
     2696, 2697, 2698, 2678, 2679, 2680, 2681, 2699, 2700, 2701,
     2702, 2703, 2704, 2684, 2705, 2685, 2706, 2707, 2708, 2686,
     2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696,

     2697, 2698, 2709, 2710, 2711, 2712, 2699, 2700, 2701, 2702,
     2703, 2704, 2713, 2705, 2714, 2706, 2707, 2708, 2715, 2716,
     2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726,
     2727, 2709, 2710, 2711, 2712, 2728, 2729, 2730, 2731, 2732,
     2733, 2713, 2734, 2714, 2735, 2736, 2737, 2715, 2716, 2717,
     2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,
     2738, 2739, 2740, 2741, 2728, 2729, 2730, 2731, 2732, 2733,
     2742, 2734, 2743, 2735, 2736, 2737, 2744, 2745, 2746, 2747,
     2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2738,
     2739, 2740, 2741, 2757, 2758, 2759, 2760, 2761, 2762, 2742,

     2763, 2743, 2764, 2765, 2766, 2744, 2745, 2746, 2747, 2748,
     2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2767, 2768,
     2769, 2770, 2757, 2758, 2759, 2760, 2761, 2762, 2771, 2763,
     2772, 2764, 2765, 2766, 2773, 2774, 2775, 2776, 2777, 2778,
     2779, 2780, 2781, 2782, 2783, 2784, 2785, 2767, 2768, 2769,
     2770, 2786, 2787, 2788, 2789, 2790, 2791, 2771, 2792, 2772,
     2793, 2794, 2795, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2781, 2782, 2783, 2784, 2785, 2796, 2797, 2798, 2799,
     2786, 2787, 2788, 2789, 2790, 2791, 2800, 2792, 2801, 2793,
     2794, 2795, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,

     2810, 2811, 2812, 2813, 2814, 2796, 2797, 2798, 2799, 2815,
     2816, 2817, 2818, 2819, 2820, 2800, 2821, 2801, 2822, 2823,
     2824, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810,
     2811, 2812, 2813, 2814, 2825, 2826, 2827, 2828, 2815, 2816,
     2817, 2818, 2819, 2820, 2829, 2821, 2830, 2822, 2823, 2824,
     2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840,
     2841, 2842, 2843, 2825, 2826, 2827, 2828, 2844, 2845, 2846,
     2847, 2848, 2849, 2829, 2850, 2830, 2851, 3615, 3615, 2831,
     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841,
     2842, 2843, 2853, 2854, 2855, 2856, 2844, 2845, 2846, 2847,

     2848, 2849, 2857, 2850, 2858, 2851, 2852, 2852, 2852, 2852,
     2852, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867,
     2868, 2853, 2854, 2855, 2856, 2869, 2870, 2871, 2872, 2873,
     2874, 2857, 2875, 2858, 2876, 2877, 2878, 2879, 2880, 2881,
     2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868,
     2882, 2883, 2884, 2885, 2869, 2870, 2871, 2872, 2873, 2874,
     2886, 2875, 2887, 2876, 2877, 2878, 2879, 2880, 2881, 2888,
     2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2882,
     2883, 2884, 2885, 2898, 2899, 2900, 2901, 2902, 2903, 2886,
     2904, 2887, 2905, 2906, 2907, 2908, 2909, 2910, 2888, 2889,

     2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2911, 2912,
     2913, 2914, 2898, 2899, 2900, 2901, 2902, 2903, 2915, 2904,
     2916, 2905, 2906, 2907, 2908, 2909, 2910, 2917, 2918, 2919,
     2920, 2921, 2921, 2921, 2921, 2921, 2923, 2911, 2912, 2913,
     2914, 2617, 2617, 2617, 2617, 2617, 2924, 2915, 2925, 2916,
     2922, 2922, 2922, 2922, 2922, 2926, 2917, 2918, 2919, 2920,
     2927, 2928, 2929, 2930, 2931, 2923, 2932, 2933, 2934, 2935,
     2936, 2937, 2938, 2939, 2940, 2924, 2941, 2925, 2942, 2943,
     2944, 2945, 2946, 2947, 2926, 2948, 2949, 2950, 2951, 2927,
     2928, 2929, 2930, 2931, 2952, 2932, 2933, 2934, 2935, 2936,

     2937, 2938, 2939, 2940, 2953, 2941, 2954, 2942, 2943, 2944,
     2945, 2946, 2947, 2955, 2948, 2949, 2950, 2951, 2956, 2957,
     2958, 2959, 2960, 2952, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2953, 2970, 2954, 2971, 2972, 2973, 2974,
     2975, 2976, 2955, 2977, 2978, 2979, 2980, 2956, 2957, 2958,
     2959, 2960, 2981, 2961, 2962, 2963, 2964, 2965, 2966, 2967,
     2968, 2969, 2982, 2970, 2983, 2971, 2972, 2973, 2974, 2975,
     2976, 2984, 2977, 2978, 2979, 2980, 2985, 2986, 2987, 2988,
     2989, 2981, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,
     2999, 2982, 3000, 2983, 3001, 3002, 3003, 3004, 3005, 3006,

     2984, 3007, 3008, 3009, 3010, 2985, 2986, 2987, 2988, 2989,
     3011, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2999,
     3012, 3000, 3013, 3001, 3002, 3003, 3004, 3005, 3006, 3014,
     3007, 3008, 3009, 3010, 3015, 3016, 3017, 3018, 3019, 3011,
     3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3012,
     3029, 3013, 3030, 3031, 3032, 3033, 3034, 3035, 3014, 3036,
     3037, 3038, 3040, 3015, 3016, 3017, 3018, 3019, 3041, 3020,
     3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3042, 3029,
     3043, 3030, 3031, 3032, 3033, 3034, 3035, 3044, 3036, 3037,
     3038, 3040, 3045, 3046, 3047, 3048, 3049, 3041, 3050, 3051,

     3052, 3053, 3054, 3055, 3056, 3057, 3058, 3042, 3059, 3043,
     3060, 3061, 3062, 3063, 3064, 3065, 3044, 3066, 3067, 3068,
     3069, 3045, 3046, 3047, 3048, 3049, 3070, 3050, 3051, 3052,
     3053, 3054, 3055, 3056, 3057, 3058, 3071, 3059, 3072, 3060,
     3061, 3062, 3063, 3064, 3065, 3073, 3066, 3067, 3068, 3069,
     2852, 2852, 2852, 2852, 2852, 3070, 3074, 3075, 3076, 3077,
     3078, 3079, 3081, 3082, 3083, 3071, 3084, 3072, 3085, 3086,
     3087, 3088, 3089, 3090, 3073, 3091, 3092, 3093, 3094, 3095,
     3096, 3097, 3098, 3099, 3100, 3074, 3075, 3076, 3077, 3078,
     3079, 3081, 3082, 3083, 3101, 3084, 3102, 3085, 3086, 3087,

     3088, 3089, 3090, 3103, 3091, 3092, 3093, 3094, 3095, 3096,
     3097, 3098, 3099, 3100, 3104, 3105, 3106, 3107, 3108, 3109,
     3110, 3111, 3112, 3101, 3113, 3102, 2921, 2921, 2921, 2921,
     2921, 3114, 3103, 2617, 2617, 2617, 2617, 2617, 3115, 3116,
     3117, 3118, 3119, 3104, 3105, 3106, 3107, 3108, 3109, 3110,
     3111, 3112, 3120, 3113, 3122, 3123, 3124, 3125, 3126, 3127,
     3114, 3128, 3129, 3130, 3131, 3132, 3133, 3115, 3116, 3117,
     3118, 3119, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141,
     3142, 3120, 3143, 3122, 3123, 3124, 3125, 3126, 3127, 3144,
     3128, 3129, 3130, 3131, 3132, 3133, 3145, 3146, 3147, 3148,

     3149, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142,
     3150, 3143, 3151, 3152, 3153, 3154, 3155, 3156, 3144, 3157,
     3158, 3159, 3615, 3615, 3166, 3145, 3146, 3147, 3148, 3149,
     3167, 3168, 3169, 3170, 3171, 3615, 3172, 3615, 3615, 3150,
     3173, 3151, 3152, 3153, 3154, 3155, 3156, 3174, 3157, 3158,
     3159, 3160, 3161, 3166, 3175, 3176, 3177, 3178, 3179, 3167,
     3168, 3169, 3170, 3171, 3162, 3172, 3163, 3164, 3165, 3173,
     3180, 3181, 3184, 3182, 3185, 3186, 3174, 3183, 3187, 3188,
     3160, 3161, 3189, 3175, 3176, 3177, 3178, 3179, 3190, 3191,
     3192, 3193, 3194, 3162, 3195, 3163, 3164, 3165, 3196, 3180,

     3181, 3184, 3182, 3185, 3186, 3203, 3183, 3187, 3188, 3197,
     3198, 3189, 3204, 3205, 3206, 3207, 3208, 3190, 3191, 3192,
     3193, 3194, 3199, 3195, 3200, 3201, 3202, 3196, 3209, 3210,
     3211, 3212, 3213, 3214, 3203, 3215, 3216, 3217, 3197, 3198,
     3218, 3204, 3205, 3206, 3207, 3208, 3219, 3221, 3222, 3223,
     3220, 3199, 3224, 3200, 3201, 3202, 3225, 3209, 3210, 3211,
     3212, 3213, 3214, 3226, 3215, 3216, 3217, 3227, 3228, 3218,
     3229, 3230, 3231, 3232, 3233, 3219, 3221, 3222, 3223, 3220,
     3615, 3224, 3240, 3241, 3242, 3225, 3243, 3244, 3245, 3246,
     3247, 3248, 3226, 3234, 3235, 3249, 3227, 3228, 3250, 3229,

     3230, 3231, 3232, 3233, 3251, 3252, 3236, 3253, 3237, 3238,
     3239, 3240, 3241, 3242, 3254, 3243, 3244, 3245, 3246, 3247,
     3248, 3255, 3234, 3235, 3249, 3256, 3258, 3250, 3259, 3257,
     3260, 3261, 3262, 3251, 3252, 3236, 3253, 3237, 3238, 3239,
     3263, 3264, 3265, 3254, 3266, 3267, 3268, 3269, 3270, 3277,
     3255, 3271, 3272, 3278, 3256, 3258, 3279, 3259, 3257, 3260,
     3261, 3262, 3280, 3281, 3273, 3282, 3274, 3275, 3276, 3263,
     3264, 3265, 3283, 3266, 3267, 3268, 3269, 3270, 3277, 3284,
     3271, 3272, 3278, 3285, 3286, 3279, 3287, 3288, 3289, 3290,
     3291, 3280, 3281, 3273, 3282, 3274, 3275, 3276, 3292, 3293,

     3295, 3283, 3296, 3294, 3297, 3298, 3299, 3300, 3284, 3301,
     3302, 3303, 3285, 3286, 3304, 3287, 3288, 3289, 3290, 3291,
     3305, 3306, 3307, 3309, 3310, 3311, 3308, 3292, 3293, 3295,
     3312, 3296, 3294, 3297, 3298, 3299, 3300, 3313, 3301, 3302,
     3303, 3314, 3315, 3304, 3316, 3317, 3318, 3319, 3320, 3305,
     3306, 3307, 3309, 3310, 3311, 3308, 3323, 3321, 3324, 3312,
     3322, 3325, 3326, 3327, 3329, 3330, 3313, 3328, 3331, 3332,
     3314, 3315, 3333, 3316, 3317, 3318, 3319, 3320, 3334, 3335,
     3336, 3337, 3338, 3339, 3340, 3323, 3321, 3324, 3343, 3322,
     3325, 3326, 3327, 3329, 3330, 3344, 3328, 3331, 3332, 3341,

     3345, 3333, 3342, 3346, 3349, 3350, 3351, 3334, 3335, 3336,
     3337, 3338, 3339, 3340, 3347, 3352, 3353, 3343, 3348, 3354,
     3355, 3356, 3357, 3358, 3344, 3359, 3360, 3361, 3341, 3345,
     3362, 3342, 3346, 3349, 3350, 3351, 3363, 3364, 3365, 3366,
     3369, 3370, 3367, 3347, 3352, 3353, 3368, 3348, 3354, 3355,
     3356, 3357, 3358, 3371, 3359, 3360, 3361, 3372, 3373, 3362,
     3374, 3375, 3376, 3377, 3378, 3363, 3364, 3365, 3366, 3369,
     3370, 3367, 3379, 3380, 3381, 3368, 3383, 3382, 3384, 3385,
     3386, 3387, 3371, 3388, 3389, 3390, 3372, 3373, 3391, 3374,
     3375, 3376, 3377, 3378, 3392, 3393, 3394, 3395, 3396, 3397,

     3398, 3379, 3380, 3381, 3399, 3383, 3382, 3384, 3385, 3386,
     3387, 3400, 3388, 3389, 3390, 3401, 3402, 3391, 3403, 3404,
     3405, 3406, 3407, 3392, 3393, 3394, 3395, 3396, 3397, 3398,
     3408, 3409, 3410, 3399, 3411, 3412, 3413, 3414, 3415, 3416,
     3400, 3417, 3418, 3419, 3401, 3402, 3420, 3403, 3404, 3405,
     3406, 3407, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3408,
     3409, 3410, 3428, 3411, 3412, 3413, 3414, 3415, 3416, 3429,
     3417, 3418, 3419, 3430, 3431, 3420, 3432, 3433, 3434, 3435,
     3436, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3437, 3438,
     3439, 3428, 3440, 3441, 3442, 3443, 3444, 3445, 3429, 3446,

     3447, 3448, 3430, 3431, 3449, 3432, 3433, 3434, 3435, 3436,
     3450, 3451, 3452, 3453, 3454, 3455, 3456, 3437, 3438, 3439,
     3457, 3440, 3441, 3442, 3443, 3444, 3445, 3458, 3446, 3447,
     3448, 3459, 3460, 3449, 3461, 3462, 3463, 3464, 3465, 3450,
     3451, 3452, 3453, 3454, 3455, 3456, 3466, 3467, 3468, 3457,
     3469, 3470, 3471, 3472, 3473, 3474, 3458, 3475, 3476, 3477,
     3459, 3460, 3478, 3461, 3462, 3463, 3464, 3465, 3479, 3480,
     3481, 3482, 3483, 3484, 3485, 3466, 3467, 3468, 3486, 3469,
     3470, 3471, 3472, 3473, 3474, 3487, 3475, 3476, 3477, 3488,
     3489, 3478, 3490, 3491, 3492, 3493, 3494, 3479, 3480, 3481,

     3482, 3483, 3484, 3485, 3495, 3496, 3497, 3486, 3498, 3499,
     3500, 3501, 3502, 3503, 3487, 3504, 3505, 3506, 3488, 3489,
     3507, 3490, 3491, 3492, 3493, 3494, 3508, 3509, 3510, 3511,
     3512, 3513, 3514, 3495, 3496, 3497, 3515, 3498, 3499, 3500,
     3501, 3502, 3503, 3516, 3504, 3505, 3506, 3517, 3518, 3507,
     3519, 3520, 3521, 3522, 3523, 3508, 3509, 3510, 3511, 3512,
     3513, 3514, 3524, 3525, 3526, 3515, 3527, 3528, 3529, 3530,
     3531, 3532, 3516, 3533, 3534, 3535, 3517, 3518, 3536, 3519,
     3520, 3521, 3522, 3523, 3537, 3538, 3539, 3540, 3541, 3542,
     3544, 3524, 3525, 3526, 3546, 3527, 3528, 3529, 3530, 3531,

     3532, 3548, 3533, 3534, 3535, 3550, 3551, 3536, 3552, 3553,
     3554, 3555, 3556, 3537, 3538, 3539, 3540, 3541, 3542, 3544,
     3557, 3558, 3559, 3546, 3560, 3561, 3562, 3563, 3564, 3565,
     3548, 3566, 3567, 3568, 3550, 3551, 3569, 3552, 3553, 3554,
     3555, 3556, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3557,
     3558, 3559, 3577, 3560, 3561, 3562, 3563, 3564, 3565, 3578,
     3566, 3567, 3568, 3579, 3580, 3569, 3581, 3582, 3583, 3584,
     3585, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3586, 3587,
     3588, 3577, 3589, 3590, 3595, 3596, 3597, 3598, 3578, 3599,
     3600, 3601, 3579, 3580, 3602, 3581, 3582, 3583, 3584, 3585,

     3603, 3604, 3605, 3606, 3607, 3608, 3609, 3586, 3587, 3588,
     3610, 3589, 3590, 3595, 3596, 3597, 3598, 3611, 3599, 3600,
     3601, 3612, 3613, 3602, 3614, 3615, 3615, 3615, 3615, 3603,
     3604, 3605, 3606, 3607, 3608, 3609, 3615, 3615, 3615, 3610,
     3615, 3615, 3615, 3615, 3615, 3615, 3611, 3615, 3615, 3615,
     3612, 3613, 3615, 3614,  259, 3615,  259,  359, 3615,  359,
      366,  366,  366,  366,  366,  472, 3615,  472,  472,  472,
      472,  472,  472,  474, 3615, 3615,  474,  474,  474, 3615,
      474,  581,  581,  581,  581,  581,  581,  581,  581, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 2196, 3615, 2196,

     2196, 2196, 2196, 2196, 2196,   13, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615
    } ;

static yyconst flex_int16_t yy_chk[7889] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 3590,    7,    7,
        7,    7,    7,    7,    8, 3589,    8,    8,    8,    8,
        8,    8,    9, 3588,    9,    9,    9,    9,    9,    9,
       10, 3587,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15, 3541,   15,   21,   21,   24, 3538,   33,   34,   40,
       31,   24,   30,   24, 3535,   26,   47,   24,   24,   24,
       24,   24,   26,   25,   31,   30,   26,   25,   61,   26,
       25, 3532,   26,   25,   24,   26,   33,   34,   40,   31,

       24,   30,   24,   25,   26,   47,   24,   24,   24,   24,
       24,   26,   25,   31,   30,   26,   25,   61,   26,   25,
       36,   26,   25,   27,   26,   28,   62,   27,   36,   68,
       76,   27,   25,   92,   36,   32,   28,   27,   28,   44,
       27,   44,   32,   28,   44, 3269,   28,   32,   28,   36,
     3232,  112,   27,  112,   28,   62,   27,   36,   68,   76,
       27,   58,   92,   36,   32,   28,   27,   28,   44,   27,
       44,   32,   28,   44,   58,   28,   32,   28,   29,   35,
       41, 3195,   29,   35,   41, 3158,   29,   35,   41,   29,
       58, 2935,   29,   35,   41,   29,   59,   45,   29, 2865,

       37,   93,   37,   58,   37,   45,   99,   29,   35,   41,
       59,   29,   35,   41,   37,   29,   35,   41,   29,   37,
       37,   29,   35,   41,   29,   59,   45,   29,   73,   37,
       93,   37,  107,   37,   45,   99,   73, 2796,   39,   59,
      119,  119,  148,   37,  148, 1900, 1900,  131,   37,   37,
       38,   38,   39,  132,   38,   39, 2728,   73,   39,  138,
       38,  107,   38, 2277,   38,   73,   38,   39,   38,   38,
       38,   50,   50,   50,   50,   50,  131, 2026, 2026,   38,
       38,   39,  132,   38,   39,   50, 2242,   39,  138,   38,
       42,   38,   42,   38,   60,   38,   43,   38,   38,   38,

       42,   60,   42,   43,   43,  145,   60,   42,   42,  154,
       43,  157,   46,   43,   50,   46,   46, 2200,  475,   42,
      475,   42,   46,   60, 2066,   43, 2066, 2154, 2154,   42,
       60,   42,   43,   43,  145,   60,   42,   42,  154,   43,
      157,   46,   43, 2147,   46,   46,   81,   81,   81,   81,
       81,   46,   51,   51,   51,   51,   51,   51, 2112,   53,
       81, 2070,  158,   53,   89, 2019,   53,   51, 1984,   53,
       72, 1942,   72,   90, 2195,   72, 2195,   89, 1893,   53,
      110,  110,  110,  110,  110, 1858,   63,   90,   53,   81,
       63,  158,   53,   89,   63,   53,   51,   52,   53,   72,

       63,   72,   90,   52,   72,   52,   89,   54,   53,   52,
       52,   52,   52,   52,   54,   63,   90, 1816,   54,   63,
      159,   54, 1735,   63,   54,  160,   52,   54, 1730,   63,
     2284, 2284,   52, 1729,   52, 1577,   54,   64,   52,   52,
       52,   52,   52,   54,   55,   64,   56,   54,   55,  159,
       54,   64,   55,   54,  160,  104,   54,   56,   55,   56,
      103,   55,  103,  104,   56,  103,   64,   56, 1572,   56,
     1571,  161, 1421,   55,   64,   56, 1416,   55, 1415, 1269,
       64,   55, 1264, 1263,  104, 1137,   56,   55,   56,  103,
       55,  103,  104,   56,  103, 1065,   56,   67,   56,   57,

      161,   69,  164,   57,   65,   69,   65,   57,   65,   69,
       57,   67,  143,   57,   67,   69,   57,   67,   65,   57,
      143,  977,  165,   65,   65,  905,   67,  167,   57,  822,
       69,  164,   57,   65,   69,   65,   57,   65,   69,   57,
       67,  143,   57,   67,   69,   57,   67,   65,   57,  143,
       91,  165,   65,   65,   66,   66,  167,   91,   66,   70,
      169,   70,   91,  168,   66,  128,   66,  168,   66,   70,
       66,   70,   66,   66,   66,  750,   70,   70,  128,   91,
      669,  597,  581,   66,   66,  150,   91,   66,   70,  169,
       70,   91,  168,   66,  128,   66,  168,   66,   70,   66,

       70,   66,   66,   66,   71,   70,   70,  128,  147,   95,
       74,   71,   71,   74,   74,  121,  129,   95,   71,  172,
       74,   71,  117,   95,  362,  362,  362,  362,  362,  114,
      129,   48,  142,   71,  142,   23,  155,  142,   95,   74,
       71,   71,   74,   74,  155,  129,   95,   71,  172,   74,
       71,   82,   95,   82,   82,   82,   82,   82,   82,  129,
       84,  142,   20,  142,   84,  155,  142,   84,   82,   17,
       84,  156,   13,  155,  108,  108,  108,  108,  108,    0,
       84,  469,  469,  469,  469,  469,    0,   94,  108,   84,
        0,   94,  156,   84,  175,   94,   84,   82,   83,   84,

      156,   94,  173,    0,   83,  176,   83,  173,   85,   84,
       83,   83,   83,   83,   83,   85,   94,  108,    0,   85,
       94,  156,   85,  175,   94,   85,  163,   83,   85,    0,
       94,  173,  163,   83,  176,   83,  173,   85,  177,   83,
       83,   83,   83,   83,   85,   86,  171,   87,   85,   86,
      178,   85,   98,   86,   85,  163,  171,   85,   87,   86,
       87,  163,   86,  179,  180,   87,   98,  177,   87,   98,
       87,    0,   98,    0,   86,  171,   87,    0,   86,  178,
        0,   98,   86,  181,  182,  171,  184,   87,   86,   87,
        0,   86,  179,  180,   87,   98,    0,   87,   98,   87,

       88,   98,  100,  185,   88,   96,  100,   96,   88,   96,
      100,   88,  181,  182,   88,  184,  100,   88,  105,   96,
       88,  105,  105,  186,   96,   96,    0,    0,  105,   88,
        0,  100,  185,   88,   96,  100,   96,   88,   96,  100,
       88,    0,    0,   88,    0,  100,   88,  105,   96,   88,
      105,  105,  186,   96,   96,   97,   97,  105,  187,   97,
      101,  189,  101,  190,  191,   97,  192,   97,  193,   97,
      101,   97,  101,   97,   97,   97,    0,  101,  101,  194,
      195,    0,  198,    0,   97,   97,  199,  187,   97,  101,
      189,  101,  190,  191,   97,  192,   97,  193,   97,  101,

       97,  101,   97,   97,   97,  102,  101,  101,  194,  195,
      123,  198,  102,  102,  123,  199,  202,  123,  202,  102,
      123,  109,  102,  109,  109,  109,  109,  109,  109,    0,
      123,    0,  201,    0,  102,    0,    0,  201,  109,  123,
        0,  102,  102,  123,    0,  202,  123,  202,  102,  123,
      130,  102,    0,    0,    0,    0,  125,  130,  124,  123,
      125,  201,  130,  205,  125,  124,  201,  109,  122,  124,
      125,  206,  124,  125,  122,  124,  122,    0,  124,  130,
      122,  122,  122,  122,  122,  125,  130,  124,    0,  125,
        0,  130,  205,  125,  124,    0,    0,  122,  124,  125,

      206,  124,  125,  122,  124,  122,  126,  124,    0,  122,
      122,  122,  122,  122,  133,  196,    0,  126,  133,  126,
      196,  196,  133,  134,  126,  137,  207,  126,  133,  126,
        0,  134,    0,  213,    0,  126,    0,  134,    0,  137,
        0,    0,  137,  133,  196,  137,  126,  133,  126,  196,
      196,  133,  134,  126,  137,  207,  126,  133,  126,  127,
      134,  139,  213,  127,  214,  139,  134,  127,  137,  139,
      127,  137,    0,  127,  137,  139,  127,  162,  162,  127,
      188,  135,  215,  135,  210,  135,  188,  210,  127,  188,
      139,  162,  127,  214,  139,  135,  127,    0,  139,  127,

      135,  135,  127,    0,  139,  127,  162,  162,  127,  188,
      135,  215,  135,  210,  135,  188,  210,    0,  188,    0,
      162,    0,    0,  144,  135,    0,  144,  144,  200,  135,
      135,  136,  136,  144,  216,  136,  140,  217,  140,  200,
      200,  136,  218,  136,    0,  136,  140,  136,  140,  136,
      136,  136,  144,  140,  140,  144,  144,  200,    0,    0,
      136,  136,  144,  216,  136,  140,  217,  140,  200,  200,
      136,  218,  136,  170,  136,  140,  136,  140,  136,  136,
      136,  141,  140,  140,  170,  170,  170,  174,  141,  141,
      174,  183,    0,  170,  219,  141,  174,  183,  141,  220,

      204,  203,  170,  174,  204,  208,  209,  209,  183,  208,
      141,    0,  203,  170,  170,  170,  174,  141,  141,  174,
      183,  203,  170,  219,  141,  174,  183,  141,  220,  204,
      203,  221,  174,  204,  208,  209,  209,  183,  208,  211,
      211,  203,  212,  212,  222,  223,  224,  225,  226,  227,
      203,  225,  228,    0,  230,  232,  224,  225,    0,  231,
      221,  229,  234,  235,  238,    0,  229,    0,  211,  211,
      231,  212,  212,  222,  223,  224,  225,  226,  227,  229,
      225,  228,  229,  230,  232,  224,  225,  233,  231,  236,
      229,  234,  235,  238,  237,  229,  233,  239,  245,  231,

      247,  240,  242,  244,  233,  237,  236,  246,  229,  240,
      242,  229,  243,  246,  248,  244,  233,  249,  236,  243,
      250,  243,  242,  237,  251,  233,  239,  245,  252,  247,
      240,  242,  244,  233,  237,  236,  246,  260,  240,  242,
        0,  243,  246,  248,  244,    0,  249,    0,  243,  250,
      243,  242,    0,  251,    0,    0,    0,  252,  254,  254,
      254,  254,  254,  255,    0,  255,  260,  255,  255,  255,
      255,  255,  254,  256,  256,  256,  256,  256,  257,  257,
      257,  257,  257,  257,  258,  262,  258,  256,  258,  258,
      258,  258,  258,  257,  261,  263,  264,  265,  266,  267,

      270,  254,  261,  268,  268,  269,  262,  271,  273,  274,
      275,  269,    0,  274,  262,  278,  256,  268,    0,    0,
      277,    0,  257,  261,  263,  264,  265,  266,  267,  270,
      277,  261,  268,  268,  269,  262,  271,  273,  274,  275,
      269,  276,  274,  279,  278,  281,  268,  280,  279,  277,
      280,  282,  276,  276,  276,  283,  280,  284,  285,  277,
      286,  276,  287,  280,  288,    0,  290,  291,  292,  293,
      276,    0,  279,  295,  281,  296,  280,  279,  297,  280,
      282,  276,  276,  276,  283,  280,  284,  285,  289,  286,
      276,  287,  280,  288,  289,  290,  291,  292,  293,  298,

      294,  299,  295,  300,  296,  289,  294,  297,  301,  294,
      302,  304,  305,  306,  307,  302,  302,  289,  308,  307,
      308,  311,  310,  289,  306,  306,  310,  312,  298,  294,
      299,  313,  300,    0,  289,  294,    0,  301,  294,  302,
      304,  305,  306,  307,  302,  302,  309,  308,  307,  308,
      311,  310,  319,  306,  306,  310,  312,  309,  314,  320,
      313,  321,  314,  315,  315,  316,  309,  322,  316,  317,
      317,  318,  318,  323,  324,  309,  325,  326,  327,  328,
      329,  319,    0,  332,  333,    0,  309,  314,  320,  334,
      321,  314,  315,  315,  316,  309,  322,  316,  317,  317,

      318,  318,  323,  324,  330,  325,  326,  327,  328,  329,
      336,  331,  332,  333,  330,  331,  337,  335,  334,  338,
      339,  331,  335,  340,  341,  342,  344,  337,  345,  339,
      343,    0,    0,  330,    0,  335,    0,  339,  335,  336,
      331,  343,  342,  330,  331,  337,  335,  351,  338,  339,
      331,  335,  340,  341,  342,  344,  337,  345,  339,  343,
      346,  348,  353,  350,  335,  349,  339,  335,  346,  348,
      343,  342,  349,  352,  349,  350,  351,  354,  355,  352,
      356,  348,  357,  358,  472,  472,  472,  472,  472,  346,
      348,  353,  350,    0,  349,    0,    0,  346,  348,    0,

        0,  349,  352,  349,  350,  367,  354,  355,  352,  356,
      348,  357,  358,  360,  360,  360,  360,  360,  361,    0,
      361,    0,  361,  361,  361,  361,  361,  360,  363,  363,
      363,  363,  363,  364,  367,  364,  364,  364,  364,  364,
      364,  365,  363,  365,  368,  365,  365,  365,  365,  365,
      364,  369,  368,  370,  371,  372,  360,  373,  374,  376,
      375,  375,  377,  378,  380,  376,  381,  382,    0,  385,
      381,  363,  369,  368,  375,  384,    0,  388,  389,  364,
      369,  368,  370,  371,  372,  384,  373,  374,  376,  375,
      375,  377,  378,  380,  376,  381,  382,  383,  385,  381,

      386,  369,  390,  375,  384,  386,  388,  389,  383,  383,
      383,  391,  387,  392,  384,  387,  393,  383,  394,  395,
        0,  387,  397,  398,  399,  400,  383,  401,  387,  386,
      402,  390,  403,  401,  386,  404,  401,  383,  383,  383,
      391,  387,  392,  396,  387,  393,  383,  394,  395,  396,
      387,  397,  398,  399,  400,  405,  401,  387,  406,  402,
      396,  403,  401,  407,  404,  401,  408,  411,  409,  412,
      413,  414,  396,  409,  409,  415,  414,  415,  396,  418,
      419,  413,  413,    0,  405,  420,  417,  406,    0,  396,
      417,  426,  407,  422,  422,  408,  411,  409,  412,  413,

      414,  416,  409,  409,  415,  414,  415,  427,  418,  419,
      413,  413,  416,  421,  420,  417,  428,  421,  429,  417,
      426,  416,  422,  422,  423,  424,  424,  423,  425,  425,
      416,  430,  431,  432,  433,  434,  427,  435,  436,  437,
        0,  416,  421,  439,  440,  428,  421,  429,  441,  437,
      416,  443,  445,  423,  424,  424,  423,  425,  425,  444,
      430,  431,  432,  433,  434,  438,  435,  436,  437,  438,
      444,  442,  439,  440,  446,  438,  442,  441,  437,  447,
      443,  445,  448,  446,  449,  450,  451,  452,  444,  442,
        0,  446,  442,  458,  438,  457,  450,    0,  438,  444,

      442,  449,  453,  446,  438,  442,  460,  457,  447,  455,
      453,  448,  446,  449,  450,  451,  452,  455,  442,  456,
      446,  442,  458,  461,  457,  450,  456,  459,  456,  455,
      449,  453,  462,  459,  463,  460,  457,  464,  455,  453,
      465,  730,  730,  730,  730,  730,  455,  481,  456,  484,
        0,    0,  461,    0,    0,  456,  459,  456,  455,    0,
        0,  462,  459,  463,    0,    0,  464,    0,    0,  465,
      466,  466,  466,  466,  466,  467,  481,  467,  484,  467,
      467,  467,  467,  467,  466,  468,  468,  468,  468,  468,
      470,    0,  470,  470,  470,  470,  470,  470,  471,  468,

      471,  485,  471,  471,  471,  471,  471,  470,  473,  477,
      477,  482,  477,  466,  483,  477,  486,  487,  488,  482,
      473,  473,  473,  473,  473,  489,  489,  477,  468,    0,
      485,  477,  490,  491,  492,  483,  470,  494,  490,  489,
      482,  496,    0,  483,    0,  486,  487,  488,  482,  495,
      499,    0,  500,  495,  489,  489,  502,  500,  477,  498,
      497,  490,  491,  492,  483,  503,  494,  490,  489,  498,
      496,  497,  497,  497,  501,  504,  505,  501,  495,  499,
      497,  500,  495,  501,  506,  502,  500,  507,  498,  497,
      501,  508,  509,  510,  503,  511,  512,  513,  498,  510,

      497,  497,  497,  501,  504,  505,  501,  514,  515,  497,
      510,  516,  501,  506,  515,  517,  507,  515,  518,  501,
      508,  509,  510,  519,  511,  512,  513,  520,  510,  521,
      522,  525,  526,  528,  532,    0,  514,  515,  528,  510,
      516,  533,  527,  515,  517,  523,  515,  518,  534,  540,
      523,  523,  519,  527,  527,  529,  520,  529,  521,  522,
      525,  526,  528,  532,  531,  530,  541,  528,  531,  535,
      533,  527,  537,  535,  523,  537,  530,  534,  540,  523,
      523,  542,  527,  527,  529,  530,  529,  536,  536,  538,
      538,  539,  539,  531,  530,  541,  543,  531,  535,  544,

      545,  537,  535,  546,  537,  530,  547,  548,  549,  550,
      542,  553,  551,  554,  530,  555,  536,  536,  538,  538,
      539,  539,  551,  552,  557,  543,  559,  552,  544,  545,
      560,  561,  546,  552,  558,  547,  548,  549,  550,  560,
      553,  551,  554,  556,  555,  558,  562,  560,  556,  563,
      565,  551,  552,  557,  564,  559,  552,  566,  571,  560,
      561,  556,  552,  558,  556,  564,  563,  572,  560,    0,
      571,    0,  556,  567,  558,  562,  560,  556,  563,  565,
      569,  567,  570,  564,  574,  575,  566,  571,  569,  570,
      556,  570,  573,  556,  564,  563,  572,  576,  573,  571,

      569,  577,  567,  578,  579,  583,  585,  588,  590,  569,
      567,  570,  591,  574,  575,  593,  594,  569,  570,  595,
      570,  573,  596,  598,  599,  600,  576,  573,  601,  569,
      577,  602,  578,  579,  583,  585,  588,  590,  603,  604,
      600,  591,  605,  606,  593,  594,  608,  607,  595,  607,
      609,  596,  598,  599,  600,  610,  612,  601,  615,  611,
      602,  613,  613,  614,  616,  617,  614,  603,  604,  600,
      618,  605,  606,  611,  611,  608,  607,  619,  607,  609,
      620,  621,  622,  624,  610,  612,  625,  615,  611,  626,
      613,  613,  614,  616,  617,  614,  626,  627,  628,  618,

      629,  630,  611,  611,  631,  632,  619,  633,  635,  620,
      621,  622,  624,  634,  636,  625,  637,  638,  626,  639,
      640,  641,  642,  643,  644,  626,  627,  628,  646,  629,
      630,  634,  649,  631,  632,  650,  633,  635,  651,  644,
      652,  653,  634,  636,  654,  637,  638,    0,  639,  640,
      641,  642,  643,  644,  645,  655,  645,  646,  656,  657,
      634,  649,  658,  660,  650,  661,  645,  651,  644,  652,
      653,  662,  663,  654,  664,  666,  645,  670,  671,  672,
      673,  674,  675,  662,  655,  677,  678,  656,  657,  679,
      680,  658,  660,  681,  661,  645,  682,  683,  684,  685,

      662,  663,  686,  664,  666,  645,  670,  671,  672,  673,
      674,  675,  662,  687,  677,  678,  688,  689,  679,  680,
      690,  691,  681,  692,  693,  682,  683,  684,  685,  694,
      695,  686,  696,  697,  698,  699,  700,  701,  703,  704,
      705,  706,  687,  698,  707,  688,  689,  709,  710,  690,
      691,  711,  692,  693,  712,  713,  714,  715,  694,  695,
      716,  696,  697,  698,  699,  700,  701,  703,  704,  705,
      706,  718,  717,  707,  717,  719,  709,  710,  720,  721,
      711,  722,  724,  712,  713,  714,  715,  725,  726,  716,
      723,  723,  726,  727,  728,  729,    0,    0,    0,    0,

      718,  717,    0,  717,  719,    0,    0,  720,  721,    0,
      722,  724,    0,  723,    0,    0,  725,  726,    0,  723,
      723,  726,  727,  728,  729,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  734,  734,  734,  734,  734,
      736,  733,  723,  733,  732,  733,  733,  733,  733,  733,
      735,  735,  735,  735,  735,  738,  741,  743,  744,  746,
      747,  748,  749,  751,  752,  753,  754,  755,  756,  736,
      757,  758,  759,  732,  760,  761,  760,  762,  763,  765,
      753,  766,  766,    0,  738,  741,  743,  744,  746,  747,
      748,  749,  751,  752,  753,  754,  755,  756,  764,  757,

      758,  759,  768,  760,  761,  760,  762,  763,  765,  753,
      766,  766,  764,  764,  767,  769,  770,  767,  771,  772,
      773,  774,  775,  777,  778,  779,  780,  764,  781,  782,
      783,  768,  779,  784,  785,  786,  788,  789,  787,  790,
      791,  764,  764,  767,  769,  770,  767,  771,  772,  773,
      774,  775,  777,  778,  779,  780,  787,  781,  782,  783,
      792,  779,  784,  785,  786,  788,  789,  787,  790,  791,
      793,  794,  795,  796,  798,  797,  798,  799,  802,  803,
      804,  805,  806,  807,  808,  787,  798,  809,  810,  792,
      797,  811,  813,  814,  816,  817,  798,    0,  819,  793,

      794,  795,  796,  823,  797,  824,  799,  802,  803,  804,
      805,  806,  807,  808,  815,  798,  809,  810,  825,  797,
      811,  813,  814,  816,  817,  798,  815,  819,  826,  827,
      828,  830,  823,  831,  824,  832,  833,  834,  835,  836,
      837,  838,  839,  815,  840,  841,  842,  825,  843,  844,
      845,  846,  847,  848,  849,  815,  850,  826,  827,  828,
      830,  852,  831,  851,  832,  833,  834,  835,  836,  837,
      838,  839,  851,  840,  841,  842,  853,  843,  844,  845,
      846,  847,  848,  849,  854,  850,  856,  857,  858,  859,
      852,  860,  851,  862,  863,  864,  865,  866,  867,  868,

      869,  870,  871,  870,  872,  853,  873,  874,  875,  877,
      878,  876,  876,  854,  880,  856,  857,  858,  859,  881,
      860,  882,  862,  863,  864,  865,  866,  867,  868,  869,
      870,  871,  870,  872,  876,  873,  874,  875,  877,  878,
      876,  876,  879,  880,  891,  893,  879,    0,  881,    0,
      882,  883,  883,  883,  883,  883,  884,  884,  884,  884,
      884,    0,    0,  876,  885,  885,  885,  885,  885,    0,
        0,  879,    0,  891,  893,  879,  886,  886,  886,  886,
      886,  887,    0,  887,    0,  887,  887,  887,  887,  887,
      886,  888,  896,  888,  888,  888,  888,  888,  888,  889,

      889,  889,  889,  889,  898,  899,  901,  902,  888,  890,
      890,  890,  890,  890,  903,  904,  906,  907,  909,  886,
      910,  896,  911,  908,  912,  913,  914,  915,  916,  915,
      917,  918,  920,  898,  899,  901,  902,  888,  908,  921,
      921,    0,  923,  903,  904,  906,  907,  909,  919,  910,
      924,  911,  908,  912,  913,  914,  915,  916,  915,  917,
      918,  920,  919,  919,  925,  926,  927,  908,  921,  921,
      922,  923,  928,  922,  929,  930,  932,  919,  933,  924,
      934,  935,  936,  937,  938,  939,  940,  934,  941,  943,
      942,  919,  919,  925,  926,  927,  944,  945,  946,  922,

      947,  928,  922,  929,  930,  932,  948,  933,  942,  934,
      935,  936,  937,  938,  939,  940,  934,  941,  943,  942,
      949,  950,  951,  952,    0,  944,  945,  946,  954,  947,
      957,  953,  958,  953,  959,  948,  960,  942,  952,  961,
      962,  963,  964,  953,  965,  966,  968,  969,  970,  949,
      950,  951,  952,  953,  971,  972,  974,  954,  978,  957,
      970,  958,  979,  959,  980,  960,  981,  952,  961,  962,
      963,  964,  953,  965,  966,  968,  969,  970,  982,  983,
      985,  986,  953,  971,  972,  974,  987,  978,  988,  970,
      989,  979,  990,  980,  991,  981,  992,  993,  994,  995,

      996,  997,  998,  999, 1000, 1001, 1002,  982,  983,  985,
      986, 1003, 1004, 1005, 1007,  987,    0,  988, 1008,  989,
     1009,  990, 1011,  991, 1012,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001, 1002, 1006, 1013, 1014, 1015,
     1003, 1004, 1005, 1007, 1017, 1006, 1018, 1008, 1019, 1009,
     1020, 1011, 1021, 1012, 1022, 1023, 1024, 1025, 1026, 1025,
     1027, 1028, 1029, 1030,    0, 1006, 1013, 1014, 1015, 1032,
     1031, 1031, 1033, 1017, 1034, 1018, 1035, 1019, 1034, 1020,
     1036, 1021, 1037, 1022, 1023, 1024, 1025, 1026, 1025, 1027,
     1028, 1029, 1030, 1031,    0,    0,    0,    0, 1032, 1031,

     1031, 1033, 1051, 1034,    0, 1035,    0, 1034,    0, 1036,
        0, 1037, 1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039,
     1039, 1039, 1031, 1040, 1040, 1040, 1040, 1040, 1041, 1053,
     1041, 1051, 1041, 1041, 1041, 1041, 1041, 1040, 1042, 1042,
     1042, 1042, 1042, 1043,    0, 1043, 1043, 1043, 1043, 1043,
     1043, 1044, 1044, 1044, 1044, 1044, 1046, 1056, 1053, 1058,
     1043, 1045, 1045, 1045, 1045, 1045, 1040, 1048, 1046, 1046,
     1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1059, 1048,
     1048, 1048, 1048, 1048, 1049, 1049, 1056, 1049, 1058, 1043,
     1049, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070,

     1071, 1072, 1049, 1073,    0, 1074, 1049, 1059, 1075, 1076,
     1075, 1077, 1068, 1078, 1080, 1083,    0,    0, 1081, 1081,
     1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1079, 1073, 1049, 1074, 1084, 1085, 1075, 1076, 1075,
     1077, 1068, 1078, 1080, 1083, 1079, 1079, 1081, 1081, 1082,
     1086, 1087, 1082, 1088, 1089, 1090, 1092, 1093, 1095, 1094,
     1079, 1096, 1097, 1098, 1084, 1085, 1094, 1099, 1100, 1101,
     1103, 1102, 1104, 1105, 1079, 1079, 1106, 1107, 1082, 1086,
     1087, 1082, 1088, 1089, 1090, 1092, 1093, 1095, 1094, 1102,
     1096, 1097, 1098, 1108, 1109, 1094, 1099, 1100, 1101, 1103,

     1102, 1104, 1105, 1110, 1111, 1106, 1107, 1114, 1113, 1112,
     1113, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1102, 1124,
     1113, 1125, 1108, 1109, 1112, 1126, 1128, 1129, 1131, 1132,
     1113, 1134, 1110, 1111, 1138, 1130, 1114, 1139, 1112, 1140,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1130, 1124, 1113,
     1125, 1141, 1142, 1112, 1126, 1128, 1129, 1131, 1132, 1113,
     1134, 1143, 1145, 1138, 1130, 1146, 1139, 1147, 1140, 1148,
     1149, 1150, 1151, 1152, 1153, 1154, 1130, 1155, 1156, 1157,
     1141, 1142, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1143, 1145, 1167, 1168, 1146, 1169, 1147, 1171, 1148, 1149,

     1150, 1151, 1152, 1153, 1154, 1172, 1155, 1156, 1157, 1173,
     1166, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1174, 1167, 1168, 1175, 1169, 1177, 1171, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1172, 1185, 1186, 1185, 1173, 1166,
     1187, 1188, 1189, 1190, 1191, 1191, 1192, 1193, 1195, 1174,
     1196, 1194, 1175, 1197, 1177, 1194, 1178, 1179, 1180, 1181,
     1182, 1183, 1184, 1198, 1185, 1186, 1185, 1191, 1199, 1187,
     1188, 1189, 1190, 1191, 1191, 1192, 1193, 1195, 1200, 1196,
     1194, 1201, 1197, 1202, 1194, 1203, 1204, 1205, 1206, 1207,
     1209,    0, 1198, 1212, 1213, 1215, 1191, 1199, 1216, 1217,

     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1200, 1225, 1227,
     1201, 1228, 1202, 1229, 1203, 1204, 1205, 1206, 1207, 1209,
     1212, 1230, 1212, 1213, 1215, 1226, 1231, 1216, 1217, 1218,
     1219, 1220, 1221, 1222, 1223, 1224, 1232, 1225, 1227, 1234,
     1228, 1226, 1229, 1226, 1235, 1239, 1240, 1241, 1242, 1243,
     1230, 1244, 1245, 1246, 1226, 1231, 1247, 1248, 1249, 1250,
     1251, 1252, 1255, 1256, 1257, 1232, 1259, 1260, 1234, 1261,
     1226, 1262, 1226, 1235, 1239, 1240, 1241, 1242, 1243, 1268,
     1244, 1245, 1246, 1265, 1273, 1247, 1248, 1249, 1250, 1251,
     1252, 1255, 1256, 1257, 1265, 1259, 1260, 1274, 1261, 1276,

     1262, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1268, 1285,
     1286, 1287, 1265, 1273, 1288, 1289, 1290, 1291, 1293, 1294,
     1295, 1287, 1296, 1265, 1298, 1299, 1274, 1300, 1276, 1302,
     1277, 1278, 1279, 1280, 1281, 1282, 1283, 1301, 1285, 1286,
     1287, 1301, 1303, 1288, 1289, 1290, 1291, 1293, 1294, 1295,
     1287, 1296, 1304, 1298, 1299, 1305, 1300, 1306, 1302, 1308,
     1309, 1310, 1311, 1312, 1314, 1315, 1301, 1316, 1317, 1318,
     1301, 1303, 1320, 1321, 1322, 1323, 1326, 1327, 1328, 1326,
     1330, 1304, 1331, 1332, 1305, 1333, 1306, 1334, 1308, 1309,
     1310, 1311, 1312, 1314, 1315, 1335, 1316, 1317, 1318, 1336,

     1337, 1320, 1321, 1322, 1323, 1326, 1327, 1328, 1326, 1330,
     1338, 1331, 1332, 1339, 1333, 1340, 1334, 1344, 1345, 1348,
     1348, 1348, 1348, 1348, 1335, 1350, 1351, 1352, 1336, 1337,
     1349, 1349, 1349, 1349, 1349, 1353, 1354, 1355, 1356, 1338,
     1357, 1358, 1339, 1359, 1340, 1361, 1344, 1345, 1364, 1365,
     1367, 1368, 1369, 1370, 1350, 1351, 1352, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1353, 1354, 1355, 1356, 1379, 1357,
     1358, 1380, 1359, 1381, 1361, 1364, 1382, 1364, 1365, 1367,
     1368, 1369, 1370, 1378, 1383, 1384, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1386, 1387, 1391, 1392, 1379, 1393, 1378,

     1380, 1378, 1381, 1394, 1395, 1382, 1396, 1397, 1398, 1399,
     1400, 1401, 1378, 1383, 1384, 1402, 1403, 1404, 1407, 1408,
     1409, 1411, 1386, 1387, 1391, 1392, 1412, 1393, 1378, 1413,
     1378, 1414, 1394, 1395, 1420, 1396, 1397, 1398, 1399, 1400,
     1401, 1417, 1425, 1426, 1402, 1403, 1404, 1407, 1408, 1409,
     1411, 1428, 1417, 1429, 1430, 1412, 1431, 1432, 1413, 1433,
     1414, 1434, 1435, 1420, 1437, 1438, 1439, 1440, 1441, 1442,
     1417, 1425, 1426, 1443, 1445, 1446, 1439, 1447, 1448, 1450,
     1428, 1417, 1429, 1430, 1451, 1431, 1432, 1452, 1433, 1454,
     1434, 1435, 1455, 1437, 1438, 1439, 1440, 1441, 1442, 1456,

     1457, 1458, 1443, 1445, 1446, 1439, 1447, 1448, 1450, 1460,
     1453, 1461, 1462, 1451, 1453, 1463, 1452, 1464, 1454, 1466,
     1467, 1455, 1468, 1469, 1470, 1472, 1473, 1474, 1456, 1457,
     1458, 1475, 1478, 1479, 1480, 1478, 1482, 1483, 1460, 1453,
     1461, 1462, 1484, 1453, 1463, 1485, 1464, 1486, 1466, 1467,
     1487, 1468, 1469, 1470, 1472, 1473, 1474, 1488, 1489, 1490,
     1475, 1478, 1479, 1480, 1478, 1482, 1483, 1491, 1492, 1496,
     1497, 1484,    0,    0, 1485,    0, 1486,    0,    0, 1487,
     1500, 1500, 1500, 1500, 1500,    0, 1488, 1489, 1490, 1501,
     1501, 1501, 1501, 1501, 1506, 1507, 1491, 1492, 1496, 1497,

     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 1508, 1509, 1506, 1507, 1504, 1510, 1511, 1512, 1513,
     1514, 1515, 1517,    0, 1521, 1520, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1533,    0, 1535, 1536,
     1508, 1509, 1537, 1538, 1504, 1510, 1511, 1512, 1513, 1514,
     1515, 1517, 1520, 1521, 1520, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1539,
     1540, 1537, 1538, 1542, 1543, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1534, 1554, 1534, 1555, 1556, 1557, 1558, 1559,

     1560, 1563, 1564, 1565, 1567, 1534, 1568, 1569, 1539, 1540,
     1570, 1576, 1542, 1543, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1534, 1554, 1534, 1555, 1556, 1557, 1558, 1559, 1560,
     1563, 1564, 1565, 1567, 1573, 1568, 1569, 1581, 1582, 1570,
     1576, 1584, 1585, 1586, 1587, 1573, 1588, 1589, 1590, 1591,
     1593, 1594, 1595, 1596, 1597, 1598, 1599, 1601, 1602, 1603,
     1604, 1606, 1595, 1573, 1607, 1608, 1581, 1582, 1610, 1611,
     1584, 1585, 1586, 1587, 1573, 1588, 1589, 1590, 1591, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1601, 1602, 1603, 1604,
     1606, 1595, 1609, 1607, 1608, 1612, 1609, 1610, 1611, 1613,

     1614, 1616, 1617, 1618, 1619, 1620, 1622, 1623, 1624, 1625,
     1626, 1628, 1629, 1630, 1631, 1634, 1635, 1636, 1634, 1638,
     1639, 1609, 1640, 1641, 1612, 1609, 1642, 1643, 1613, 1614,
     1616, 1617, 1618, 1619, 1620, 1622, 1623, 1624, 1625, 1626,
     1628, 1629, 1630, 1631, 1634, 1635, 1636, 1634, 1638, 1639,
     1644, 1640, 1641, 1645, 1646, 1642, 1643, 1647, 1648, 1652,
     1653, 1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1658,    0,    0,    0, 1644,
     1664, 1665, 1645, 1646,    0,    0, 1647, 1648, 1652, 1653,
     1659, 1659, 1659, 1659, 1659, 1660, 1666, 1667, 1660, 1660,

     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1663, 1664,
     1665, 1668, 1660, 1662, 1662, 1662, 1662, 1662, 1669, 1670,
     1663, 1663, 1663, 1663, 1663, 1666, 1667, 1671, 1672, 1673,
     1675,    0, 1679, 1678, 1681, 1682, 1683, 1684, 1685, 1686,
     1668, 1660, 1687, 1688, 1689, 1690, 1691, 1669, 1670, 1693,
     1694, 1695, 1696, 1697, 1698, 1700, 1671, 1672, 1673, 1675,
     1678, 1679, 1678, 1681, 1682, 1683, 1684, 1685, 1686, 1692,
     1701, 1687, 1688, 1689, 1690, 1691, 1705, 1706, 1693, 1694,
     1695, 1696, 1697, 1698, 1700, 1692, 1707, 1692, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1692, 1701,

     1718, 1721, 1722, 1723, 1725, 1705, 1706, 1726, 1727, 1728,
        0, 1734, 1739, 1740, 1692, 1707, 1692, 1708, 1709, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1742, 1731, 1718,
     1721, 1722, 1723, 1725, 1743, 1744, 1726, 1727, 1728, 1731,
     1734, 1739, 1740, 1745, 1746, 1747, 1748, 1749, 1751, 1752,
     1753, 1754, 1755, 1756, 1757, 1759, 1742, 1731, 1760, 1761,
     1753, 1762, 1764, 1743, 1744, 1765, 1766, 1767, 1731, 1768,
     1769, 1767, 1745, 1746, 1747, 1748, 1749, 1751, 1752, 1753,
     1754, 1755, 1756, 1757, 1759, 1770, 1771, 1760, 1761, 1753,
     1762, 1764, 1772, 1774, 1765, 1766, 1767, 1775, 1768, 1769,

     1767, 1776, 1777, 1778, 1780, 1781, 1782, 1783, 1784, 1786,
     1787, 1788, 1789, 1792, 1770, 1771, 1792, 1793, 1794, 1796,
     1797, 1772, 1774, 1798, 1799, 1800, 1775, 1801, 1802, 1803,
     1776, 1777, 1778, 1780, 1781, 1782, 1783, 1784, 1786, 1787,
     1788, 1789, 1792, 1804, 1805, 1792, 1793, 1794, 1796, 1797,
     1806, 1810, 1798, 1799, 1800, 1811, 1801, 1802, 1803, 1817,
     1818, 1819, 1821, 1822, 1823, 1824, 1825, 1826, 1828, 1829,
     1830, 1831, 1804, 1805, 1832, 1834, 1836, 1837, 1838, 1806,
     1810, 1839, 1840, 1841, 1811, 1842, 1844, 1845, 1817, 1818,
     1819, 1821, 1822, 1823, 1824, 1825, 1826, 1828, 1829, 1830,

     1831, 1846, 1847, 1832, 1834, 1836, 1837, 1838, 1843, 1848,
     1839, 1840, 1841, 1849, 1842, 1844, 1845, 1850, 1843, 1852,
     1843, 1853, 1854, 1855, 1860, 1861, 1862, 1864, 1866, 1867,
     1846, 1847, 1869, 1870, 1873, 1876, 1874, 1843, 1848, 1874,
     1881, 1882, 1849, 1883, 1884, 1887, 1850, 1843, 1852, 1843,
     1853, 1854, 1855, 1860, 1861, 1862, 1864, 1866, 1867, 1889,
     1891, 1869, 1870, 1873, 1876, 1874, 1892, 1894, 1874, 1881,
     1882, 1895, 1883, 1884, 1887, 1897, 1899, 1901, 1902, 1903,
     1904, 1905, 1906, 1907, 1909, 1910, 1911, 1913, 1889, 1891,
     1914, 1915, 1916, 1917, 1918, 1892, 1894, 1919, 1920, 1921,

     1895, 1923, 1924, 1925, 1897, 1899, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1909, 1910, 1911, 1913, 1926, 1927, 1914,
     1915, 1916, 1917, 1918, 1929, 1930, 1919, 1920, 1921, 1931,
     1923, 1924, 1925, 1934, 1935, 1936, 1937, 1939, 1943, 1944,
     1945, 1947, 1948, 1949, 1950, 1951, 1926, 1927, 1952, 1954,
     1955, 1956, 1957, 1929, 1930, 1958, 1960, 1962, 1931, 1963,
     1964, 1965, 1934, 1935, 1936, 1937, 1939, 1943, 1944, 1945,
     1947, 1948, 1949, 1950, 1951, 1966, 1967, 1952, 1954, 1955,
     1956, 1957, 1968, 1969, 1958, 1960, 1962, 1970, 1963, 1964,
     1965, 1971, 1972, 1969, 1973, 1969, 1974, 1975, 1976, 1978,

     1979, 1980, 1981, 1986, 1966, 1967, 1987, 1988, 1990, 1992,
     1993, 1968, 1969, 1995, 1996, 1999, 1970, 2002, 2007,    0,
     1971, 1972, 1969, 1973, 1969, 1974, 1975, 1976, 1978, 1979,
     1980, 1981, 1986, 2008, 2009, 1987, 1988, 1990, 1992, 1993,
     2010, 2013, 1995, 1996, 1999, 2000, 2002, 2007, 2000, 2015,
     2017, 2018, 2020, 2021, 2023, 2025, 2027, 2028, 2029, 2030,
     2031, 2032, 2008, 2009, 2033, 2035, 2036, 2037, 2039, 2010,
     2013, 2040, 2041, 2042, 2000, 2043, 2044, 2000, 2015, 2017,
     2018, 2020, 2021, 2023, 2025, 2027, 2028, 2029, 2030, 2031,
     2032, 2045, 2046, 2033, 2035, 2036, 2037, 2039, 2047, 2049,

     2040, 2041, 2042, 2050, 2043, 2044, 2051, 2052, 2053, 2055,
     2056, 2057, 2060, 2061, 2062, 2063, 2065, 2071, 2072, 2073,
     2045, 2046, 2067, 2067, 2067, 2067, 2067, 2047, 2049, 2075,
     2076, 2077, 2050, 2078, 2079, 2051, 2052, 2053, 2055, 2056,
     2057, 2060, 2061, 2062, 2063, 2065, 2071, 2072, 2073, 2080,
     2082, 2083, 2084, 2085, 2086, 2088, 2090, 2091, 2075, 2076,
     2077, 2092, 2078, 2079, 2093, 2094, 2095, 2096, 2098, 2099,
     2100, 2101, 2102, 2103, 2104, 2106, 2107, 2097, 2080, 2082,
     2083, 2084, 2085, 2086, 2088, 2090, 2091, 2097, 2108, 2097,
     2092, 2109, 2114, 2093, 2094, 2095, 2096, 2098, 2099, 2100,

     2101, 2102, 2103, 2104, 2106, 2107, 2097, 2115, 2116, 2118,
     2120, 2121, 2123, 2124, 2127, 2130, 2097, 2108, 2097, 2128,
     2109, 2114, 2128, 2135, 2136, 2137, 2138, 2141, 2143, 2145,
     2146, 2148, 2149, 2151, 2153, 2155, 2115, 2116, 2118, 2120,
     2121, 2123, 2124, 2127, 2130, 2156, 2157, 2158, 2128, 2159,
     2160, 2128, 2135, 2136, 2137, 2138, 2141, 2143, 2145, 2146,
     2148, 2149, 2151, 2153, 2155, 2161, 2163, 2164, 2165, 2167,
     2168, 2169, 2170, 2171, 2156, 2157, 2158, 2172, 2159, 2160,
     2173, 2174, 2175, 2177, 2178, 2179, 2180, 2181, 2183, 2184,
     2185, 2188, 2189, 2190, 2161, 2163, 2164, 2165, 2167, 2168,

     2169, 2170, 2171, 2191, 2193,    0, 2172,    0,    0, 2173,
     2174, 2175, 2177, 2178, 2179, 2180, 2181, 2183, 2184, 2185,
     2188, 2189, 2190, 2194, 2194, 2194, 2194, 2194, 2201, 2202,
     2203, 2205, 2191, 2193, 2196, 2196, 2196, 2196, 2196, 2197,
     2197, 2197, 2197, 2197, 2206, 2207, 2208, 2209, 2210, 2212,
     2213, 2214, 2215, 2216, 2218, 2220, 2221, 2201, 2202, 2203,
     2205, 2222, 2223, 2224, 2225, 2226, 2228,    0, 2229,    0,
     2230, 2231, 2232, 2206, 2207, 2208, 2209, 2210, 2212, 2213,
     2214, 2215, 2216, 2218, 2220, 2221, 2227, 2233, 2234, 2236,
     2222, 2223, 2224, 2225, 2226, 2228, 2227, 2229, 2227, 2230,

     2231, 2232, 2237, 2238, 2239, 2244, 2245, 2246, 2248, 2250,
     2251, 2253, 2254, 2257, 2260, 2227, 2233, 2234, 2236, 2258,
     2265, 2266, 2258, 2267, 2268, 2227, 2271, 2227, 2273, 2275,
     2276, 2237, 2238, 2239, 2244, 2245, 2246, 2248, 2250, 2251,
     2253, 2254, 2257, 2260, 2278, 2279, 2281, 2283, 2258, 2265,
     2266, 2258, 2267, 2268, 2285, 2271, 2286, 2273, 2275, 2276,
     2287, 2288, 2289, 2290, 2291, 2293, 2294, 2295, 2297, 2298,
     2299, 2300, 2301, 2278, 2279, 2281, 2283, 2302, 2303, 2304,
     2305, 2307, 2308, 2285, 2309, 2286, 2310, 2311, 2313, 2287,
     2288, 2289, 2290, 2291, 2293, 2294, 2295, 2297, 2298, 2299,

     2300, 2301, 2314, 2315, 2318, 2319, 2302, 2303, 2304, 2305,
     2307, 2308, 2320, 2309, 2321, 2310, 2311, 2313, 2323, 2324,
     2326, 2328, 2330, 2331, 2332, 2333, 2334, 2335, 2337, 2338,
     2340, 2314, 2315, 2318, 2319, 2341, 2343, 2344, 2345, 2346,
     2347, 2320, 2348, 2321, 2349, 2350, 2351, 2323, 2324, 2326,
     2328, 2330, 2331, 2332, 2333, 2334, 2335, 2337, 2338, 2340,
     2352, 2354, 2358, 2360, 2341, 2343, 2344, 2345, 2346, 2347,
     2361, 2348, 2362, 2349, 2350, 2351, 2363, 2364, 2365, 2369,
     2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2352,
     2354, 2358, 2360, 2382, 2386, 2387, 2388, 2389, 2390, 2361,

     2391, 2362, 2392, 2393, 2395, 2363, 2364, 2365, 2369, 2370,
     2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2396, 2397,
     2398, 2399, 2382, 2386, 2387, 2388, 2389, 2390, 2400, 2391,
     2404, 2392, 2393, 2395, 2405, 2407, 2408, 2409, 2410, 2411,
     2412, 2414, 2417, 2418, 2419, 2421, 2423, 2396, 2397, 2398,
     2399, 2425, 2427, 2428, 2429, 2430, 2431, 2400, 2432, 2404,
     2434, 2435, 2437, 2405, 2407, 2408, 2409, 2410, 2411, 2412,
     2414, 2417, 2418, 2419, 2421, 2423, 2438, 2440, 2441, 2442,
     2425, 2427, 2428, 2429, 2430, 2431, 2443, 2432, 2444, 2434,
     2435, 2437, 2445, 2446, 2447, 2448, 2449, 2451, 2455, 2457,

     2458, 2459, 2460, 2461, 2462, 2438, 2440, 2441, 2442, 2466,
     2467, 2468, 2469, 2470, 2472, 2443, 2473, 2444, 2474, 2475,
     2477, 2445, 2446, 2447, 2448, 2449, 2451, 2455, 2457, 2458,
     2459, 2460, 2461, 2462, 2479, 2483, 2484, 2485, 2466, 2467,
     2468, 2469, 2470, 2472, 2486, 2473, 2487, 2474, 2475, 2477,
     2488, 2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2501,
     2502, 2504, 2505, 2479, 2483, 2484, 2485, 2506, 2507, 2508,
     2509, 2511, 2514, 2486, 2515, 2487, 2516,    0,    0, 2488,
     2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2501, 2502,
     2504, 2505, 2519, 2521, 2523, 2525, 2506, 2507, 2508, 2509,

     2511, 2514, 2526, 2515, 2527, 2516, 2518, 2518, 2518, 2518,
     2518, 2528, 2529, 2530, 2532, 2533, 2535, 2536, 2538, 2539,
     2540, 2519, 2521, 2523, 2525, 2541, 2542, 2543, 2544, 2545,
     2546, 2526, 2547, 2527, 2549, 2553, 2555, 2556, 2557, 2558,
     2528, 2529, 2530, 2532, 2533, 2535, 2536, 2538, 2539, 2540,
     2559, 2560, 2564, 2565, 2541, 2542, 2543, 2544, 2545, 2546,
     2566, 2547, 2567, 2549, 2553, 2555, 2556, 2557, 2558, 2568,
     2570, 2571, 2572, 2573, 2575, 2577, 2581, 2582, 2583, 2559,
     2560, 2564, 2565, 2584, 2585, 2586, 2587, 2588, 2590, 2566,
     2591, 2567, 2592, 2593, 2594, 2595, 2599, 2600, 2568, 2570,

     2571, 2572, 2573, 2575, 2577, 2581, 2582, 2583, 2602, 2603,
     2604, 2605, 2584, 2585, 2586, 2587, 2588, 2590, 2606, 2591,
     2607, 2592, 2593, 2594, 2595, 2599, 2600, 2609, 2612, 2613,
     2614, 2616, 2616, 2616, 2616, 2616, 2619, 2602, 2603, 2604,
     2605, 2617, 2617, 2617, 2617, 2617, 2621, 2606, 2623, 2607,
     2618, 2618, 2618, 2618, 2618, 2625, 2609, 2612, 2613, 2614,
     2626, 2627, 2628, 2629, 2630, 2619, 2632, 2633, 2635, 2636,
     2638, 2639, 2640, 2641, 2642, 2621, 2643, 2623, 2644, 2645,
     2646, 2647, 2649, 2653, 2625, 2655, 2656, 2657, 2658, 2626,
     2627, 2628, 2629, 2630, 2659, 2632, 2633, 2635, 2636, 2638,

     2639, 2640, 2641, 2642, 2660, 2643, 2664, 2644, 2645, 2646,
     2647, 2649, 2653, 2665, 2655, 2656, 2657, 2658, 2666, 2667,
     2668, 2670, 2671, 2659, 2672, 2673, 2675, 2677, 2681, 2682,
     2683, 2684, 2685, 2660, 2686, 2664, 2687, 2688, 2690, 2691,
     2692, 2693, 2665, 2694, 2695, 2699, 2700, 2666, 2667, 2668,
     2670, 2671, 2702, 2672, 2673, 2675, 2677, 2681, 2682, 2683,
     2684, 2685, 2703, 2686, 2704, 2687, 2688, 2690, 2691, 2692,
     2693, 2705, 2694, 2695, 2699, 2700, 2706, 2707, 2709, 2712,
     2713, 2702, 2714, 2716, 2717, 2719, 2721, 2722, 2723, 2725,
     2729, 2703, 2730, 2704, 2731, 2733, 2734, 2735, 2739, 2742,

     2705, 2743, 2746, 2749, 2750, 2706, 2707, 2709, 2712, 2713,
     2751, 2714, 2716, 2717, 2719, 2721, 2722, 2723, 2725, 2729,
     2752, 2730, 2753, 2731, 2733, 2734, 2735, 2739, 2742, 2755,
     2743, 2746, 2749, 2750, 2757, 2758, 2761, 2762, 2763, 2751,
     2765, 2767, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2752,
     2777, 2753, 2779, 2781, 2784, 2785, 2787, 2789, 2755, 2790,
     2791, 2793, 2797, 2757, 2758, 2761, 2762, 2763, 2798, 2765,
     2767, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2799, 2777,
     2801, 2779, 2781, 2784, 2785, 2787, 2789, 2802, 2790, 2791,
     2793, 2797, 2803, 2807, 2810, 2811, 2814, 2798, 2817, 2818,

     2819, 2820, 2821, 2823, 2825, 2826, 2829, 2799, 2830, 2801,
     2831, 2833, 2835, 2838, 2839, 2840, 2802, 2841, 2842, 2843,
     2844, 2803, 2807, 2810, 2811, 2814, 2845, 2817, 2818, 2819,
     2820, 2821, 2823, 2825, 2826, 2829, 2847, 2830, 2849, 2831,
     2833, 2835, 2838, 2839, 2840, 2853, 2841, 2842, 2843, 2844,
     2852, 2852, 2852, 2852, 2852, 2845, 2854, 2856, 2858, 2859,
     2860, 2862, 2866, 2867, 2868, 2847, 2870, 2849, 2871, 2872,
     2876, 2879, 2880, 2883, 2853, 2886, 2887, 2888, 2889, 2890,
     2892, 2894, 2895, 2898, 2899, 2854, 2856, 2858, 2859, 2860,
     2862, 2866, 2867, 2868, 2900, 2870, 2902, 2871, 2872, 2876,

     2879, 2880, 2883, 2904, 2886, 2887, 2888, 2889, 2890, 2892,
     2894, 2895, 2898, 2899, 2907, 2908, 2909, 2910, 2911, 2912,
     2913, 2914, 2916, 2900, 2918, 2902, 2921, 2921, 2921, 2921,
     2921, 2923, 2904, 2922, 2922, 2922, 2922, 2922, 2924, 2926,
     2928, 2929, 2930, 2907, 2908, 2909, 2910, 2911, 2912, 2913,
     2914, 2916, 2932, 2918, 2936, 2937, 2938, 2940, 2941, 2942,
     2923, 2946, 2949, 2950, 2953, 2956, 2957, 2924, 2926, 2928,
     2929, 2930, 2958, 2959, 2960, 2962, 2964, 2965, 2968, 2969,
     2970, 2932, 2972, 2936, 2937, 2938, 2940, 2941, 2942, 2974,
     2946, 2949, 2950, 2953, 2956, 2957, 2977, 2978, 2979, 2980,

     2981, 2958, 2959, 2960, 2962, 2964, 2965, 2968, 2969, 2970,
     2982, 2972, 2983, 2984, 2986, 2988, 2991, 2992, 2974, 2993,
     2994, 2995,    0,    0, 3001, 2977, 2978, 2979, 2980, 2981,
     3002, 3003, 3004, 3006, 3007,    0, 3008,    0,    0, 2982,
     3009, 2983, 2984, 2986, 2988, 2991, 2992, 3011, 2993, 2994,
     2995, 2998, 2998, 3001, 3012, 3014, 3015, 3016, 3018, 3002,
     3003, 3004, 3006, 3007, 2998, 3008, 2998, 2998, 2998, 3009,
     3019, 3020, 3023, 3021, 3025, 3026, 3011, 3021, 3027, 3028,
     2998, 2998, 3029, 3012, 3014, 3015, 3016, 3018, 3030, 3031,
     3032, 3033, 3034, 2998, 3035, 2998, 2998, 2998, 3036, 3019,

     3020, 3023, 3021, 3025, 3026, 3042, 3021, 3027, 3028, 3039,
     3039, 3029, 3043, 3044, 3045, 3047, 3048, 3030, 3031, 3032,
     3033, 3034, 3039, 3035, 3039, 3039, 3039, 3036, 3049, 3050,
     3052, 3053, 3055, 3056, 3042, 3057, 3059, 3060, 3039, 3039,
     3061, 3043, 3044, 3045, 3047, 3048, 3062, 3064, 3066, 3067,
     3062, 3039, 3068, 3039, 3039, 3039, 3069, 3049, 3050, 3052,
     3053, 3055, 3056, 3070, 3057, 3059, 3060, 3071, 3072, 3061,
     3073, 3074, 3075, 3076, 3077, 3062, 3064, 3066, 3067, 3062,
        0, 3068, 3083, 3084, 3085, 3069, 3086, 3088, 3089, 3090,
     3091, 3093, 3070, 3080, 3080, 3094, 3071, 3072, 3096, 3073,

     3074, 3075, 3076, 3077, 3097, 3098, 3080, 3100, 3080, 3080,
     3080, 3083, 3084, 3085, 3101, 3086, 3088, 3089, 3090, 3091,
     3093, 3102, 3080, 3080, 3094, 3103, 3105, 3096, 3107, 3103,
     3108, 3109, 3110, 3097, 3098, 3080, 3100, 3080, 3080, 3080,
     3111, 3112, 3113, 3101, 3114, 3115, 3116, 3117, 3118, 3124,
     3102, 3121, 3121, 3125, 3103, 3105, 3126, 3107, 3103, 3108,
     3109, 3110, 3127, 3129, 3121, 3130, 3121, 3121, 3121, 3111,
     3112, 3113, 3131, 3114, 3115, 3116, 3117, 3118, 3124, 3132,
     3121, 3121, 3125, 3134, 3135, 3126, 3137, 3138, 3139, 3141,
     3142, 3127, 3129, 3121, 3130, 3121, 3121, 3121, 3143, 3144,

     3146, 3131, 3148, 3144, 3149, 3150, 3151, 3152, 3132, 3153,
     3154, 3156, 3134, 3135, 3157, 3137, 3138, 3139, 3141, 3142,
     3159, 3160, 3161, 3162, 3163, 3164, 3161, 3143, 3144, 3146,
     3165, 3148, 3144, 3149, 3150, 3151, 3152, 3167, 3153, 3154,
     3156, 3170, 3172, 3157, 3174, 3177, 3182, 3183, 3184, 3159,
     3160, 3161, 3162, 3163, 3164, 3161, 3193, 3187, 3194, 3165,
     3187, 3196, 3197, 3198, 3199, 3200, 3167, 3198, 3201, 3202,
     3170, 3172, 3204, 3174, 3177, 3182, 3183, 3184, 3207, 3209,
     3211, 3214, 3219, 3220, 3221, 3193, 3187, 3194, 3230, 3187,
     3196, 3197, 3198, 3199, 3200, 3231, 3198, 3201, 3202, 3224,

     3233, 3204, 3224, 3234, 3236, 3237, 3238, 3207, 3209, 3211,
     3214, 3219, 3220, 3221, 3235, 3239, 3241, 3230, 3235, 3244,
     3246, 3248, 3251, 3256, 3231, 3257, 3258, 3261, 3224, 3233,
     3261, 3224, 3234, 3236, 3237, 3238, 3267, 3268, 3270, 3271,
     3273, 3274, 3272, 3235, 3239, 3241, 3272, 3235, 3244, 3246,
     3248, 3251, 3256, 3275, 3257, 3258, 3261, 3276, 3278, 3261,
     3281, 3283, 3285, 3288, 3293, 3267, 3268, 3270, 3271, 3273,
     3274, 3272, 3294, 3295, 3298, 3272, 3303, 3298, 3305, 3306,
     3307, 3308, 3275, 3309, 3310, 3311, 3276, 3278, 3312, 3281,
     3283, 3285, 3288, 3293, 3314, 3315, 3317, 3319, 3321, 3322,

     3323, 3294, 3295, 3298, 3325, 3303, 3298, 3305, 3306, 3307,
     3308, 3326, 3309, 3310, 3311, 3327, 3328, 3312, 3329, 3330,
     3331, 3332, 3334, 3314, 3315, 3317, 3319, 3321, 3322, 3323,
     3335, 3337, 3339, 3325, 3341, 3342, 3343, 3345, 3346, 3347,
     3326, 3348, 3349, 3350, 3327, 3328, 3351, 3329, 3330, 3331,
     3332, 3334, 3352, 3354, 3355, 3357, 3359, 3361, 3362, 3335,
     3337, 3339, 3363, 3341, 3342, 3343, 3345, 3346, 3347, 3365,
     3348, 3349, 3350, 3366, 3367, 3351, 3368, 3369, 3370, 3371,
     3372, 3352, 3354, 3355, 3357, 3359, 3361, 3362, 3374, 3375,
     3377, 3363, 3379, 3381, 3382, 3383, 3385, 3386, 3365, 3387,

     3388, 3389, 3366, 3367, 3390, 3368, 3369, 3370, 3371, 3372,
     3391, 3393, 3394, 3396, 3397, 3398, 3400, 3374, 3375, 3377,
     3401, 3379, 3381, 3382, 3383, 3385, 3386, 3402, 3387, 3388,
     3389, 3403, 3404, 3390, 3405, 3406, 3408, 3409, 3411, 3391,
     3393, 3394, 3396, 3397, 3398, 3400, 3412, 3413, 3415, 3401,
     3416, 3417, 3418, 3419, 3420, 3421, 3402, 3423, 3424, 3426,
     3403, 3404, 3427, 3405, 3406, 3408, 3409, 3411, 3428, 3430,
     3431, 3432, 3433, 3434, 3435, 3412, 3413, 3415, 3436, 3416,
     3417, 3418, 3419, 3420, 3421, 3438, 3423, 3424, 3426, 3439,
     3441, 3427, 3442, 3443, 3444, 3446, 3449, 3428, 3430, 3431,

     3432, 3433, 3434, 3435, 3450, 3454, 3455, 3436, 3456, 3458,
     3461, 3462, 3466, 3467, 3438, 3468, 3470, 3473, 3439, 3441,
     3474, 3442, 3443, 3444, 3446, 3449, 3478, 3479, 3480, 3482,
     3485, 3486, 3490, 3450, 3454, 3455, 3492, 3456, 3458, 3461,
     3462, 3466, 3467, 3493, 3468, 3470, 3473, 3494, 3495, 3474,
     3498, 3499, 3500, 3501, 3504, 3478, 3479, 3480, 3482, 3485,
     3486, 3490, 3505, 3506, 3507, 3492, 3510, 3511, 3512, 3513,
     3515, 3516, 3493, 3518, 3519, 3520, 3494, 3495, 3522, 3498,
     3499, 3500, 3501, 3504, 3523, 3524, 3526, 3527, 3528, 3530,
     3533, 3505, 3506, 3507, 3536, 3510, 3511, 3512, 3513, 3515,

     3516, 3539, 3518, 3519, 3520, 3542, 3543, 3522, 3544, 3545,
     3546, 3547, 3548, 3523, 3524, 3526, 3527, 3528, 3530, 3533,
     3549, 3550, 3551, 3536, 3553, 3555, 3557, 3559, 3560, 3561,
     3539, 3562, 3563, 3564, 3542, 3543, 3565, 3544, 3545, 3546,
     3547, 3548, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3549,
     3550, 3551, 3573, 3553, 3555, 3557, 3559, 3560, 3561, 3574,
     3562, 3563, 3564, 3575, 3576, 3565, 3577, 3578, 3579, 3580,
     3581, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3582, 3583,
     3584, 3573, 3585, 3586, 3591, 3592, 3593, 3594, 3574, 3595,
     3596, 3597, 3575, 3576, 3598, 3577, 3578, 3579, 3580, 3581,

     3599, 3600, 3601, 3602, 3603, 3604, 3605, 3582, 3583, 3584,
     3606, 3585, 3586, 3591, 3592, 3593, 3594, 3607, 3595, 3596,
     3597, 3608, 3609, 3598, 3610,    0,    0,    0,    0, 3599,
     3600, 3601, 3602, 3603, 3604, 3605,    0,    0,    0, 3606,
        0,    0,    0,    0,    0,    0, 3607,    0,    0,    0,
     3608, 3609,    0, 3610, 3616,    0, 3616, 3617,    0, 3617,
     3618, 3618, 3618, 3618, 3618, 3619,    0, 3619, 3619, 3619,
     3619, 3619, 3619, 3620,    0,    0, 3620, 3620, 3620,    0,
     3620, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3622,
     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3623,    0, 3623,

     3623, 3623, 3623, 3623, 3623, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3616 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3615 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 220:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 221:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 222:
case 223:
case 224:
case 225:
case 226:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 227:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 228:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 231:
case 232:
case 233:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 234:
case 235:
case 236:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 237:
case 238:
case 239:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 240:
case 241:
case 242:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 243:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 244:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 249:
/* rule 249 can match eol */
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 251:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 255:
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 257:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 258:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3616 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3616 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3615);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8StringBuffer sBuffer (256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (delim);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (delim);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (ch);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8StringBuffer sBuffer(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer.charAt(i)) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									{
									if (checkForSign)
										{
										if (sBuffer.charAt(i) == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer.makeStringAndClear(), isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(ch);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(ch);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

