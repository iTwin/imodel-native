#line 2 "D:\\bsw\\git-native4\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1544] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      139,  139,  145,  143,  141,  140,  143,  104,  101,  132,
      104,   91,   93,   92,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  100,   99,  130,  104,  106,  106,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  133,  131,  134,  104,  104,  114,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  104,  114,

      143,  139,  139,  139,  139,  137,  104,  101,  104,  104,
      104,   91,   93,   92,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  138,  100,   99,  141,   97,    0,
      102,   94,   96,   95,  103,    0,    0,    4,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   41,   48,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   98,  108,
      109,  106,    0,    0,  105,  105,  105,    4,  105,  105,
      105,  105,  105,  105,   11,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,   41,   48,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,   61,
       63,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  129,  119,
      129,  129,  129,  114,  129,  113,  113,  113,    4,  113,
      113,  113,  113,  113,  113,   11,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,   41,   48,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       61,   63,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  125,
      129,  129,  129,  114,  129,    0,  135,  139,  139,   97,
      139,  102,   94,   96,   95,  103,  139,  139,    4,  139,
      139,  139,  139,  139,  139,   11,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,   41,   48,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       61,   63,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   98,
        0,  142,    1,    2,    3,    5,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   75,    0,    0,
       44,    0,    0,    0,    0,    0,    0,   54,   56,    0,
       58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,    0,   73,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  109,    0,    0,
      110,  107,    1,    2,    3,    5,    6,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   28,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,   75,  105,  105,
       44,  105,  105,  105,  105,  105,  105,   54,   56,  105,
       58,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   71,  105,  105,   73,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,    0,  122,  129,  117,
      129,  114,    0,  120,    1,    2,    3,    5,    6,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,   28,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,   75,
      113,  113,   44,  113,  113,  113,  113,  113,  113,   54,
       56,  113,   58,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,   71,  113,  113,   73,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,    0,  128,
      123,  129,  129,  114,    0,  126,  135,    0,  135,  139,
      139,    1,    2,    3,    5,    6,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,   28,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,   75,  139,  139,   44,
      139,  139,  139,  139,  139,  139,   54,   56,  139,   58,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       71,  139,  139,   73,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,    0,    0,    0,   10,    0,
       12,   13,    0,    0,    0,    0,   20,    0,    0,   23,
        0,    0,    0,   27,    0,    0,    0,    0,    0,    0,
        0,   37,   38,    0,    0,    0,    0,    0,    0,   47,
       49,   50,   51,    0,   53,    0,    0,   59,    0,   62,

        0,    0,   66,    0,    0,    0,    0,   72,    0,   76,
       77,   79,    0,    0,    0,    0,    0,    0,    0,   89,
        0,   88,    0,  112,    0,  111,  105,  105,  105,   10,
      105,   12,   13,  105,  105,  105,  105,   20,  105,  105,
       23,  105,  105,  105,   27,  105,  105,  105,  105,  105,
      105,  105,   37,   38,  105,  105,  105,  105,  105,  105,
       47,   49,   50,   51,  105,   53,  105,  105,   59,  105,
       62,  105,  105,   66,  105,  105,  105,  105,   72,  105,
       76,   77,   79,  105,  105,  105,  105,  105,  105,  105,
       89,  105,   88,  122,  129,    0,  121,  114,  120,  113,

      113,  113,   10,  113,   12,   13,  113,  113,  113,  113,
       20,  113,  113,   23,  113,  113,  113,   27,  113,  113,
      113,  113,  113,  113,  113,   37,   38,  113,  113,  113,
      113,  113,  113,   47,   49,   50,   51,  113,   53,  113,
      113,   59,  113,   62,  113,  113,   66,  113,  113,  113,
      113,   72,  113,   76,   77,   79,  113,  113,  113,  113,
      113,  113,  113,   89,  113,   88,  128,    0,  127,  129,
      114,  126,    0,  135,  139,  139,  139,   10,  139,   12,
       13,  139,  139,  139,  139,   20,  139,  139,   23,  139,
      139,  139,   27,  139,  139,  139,  139,  139,  139,  139,

       37,   38,  139,  139,  139,  139,  139,  139,   47,   49,
       50,   51,  139,   53,  139,  139,   59,  139,   62,  139,
      139,   66,  139,  139,  139,  139,   72,  139,   76,   77,
       79,  139,  139,  139,  139,  139,  139,  139,   89,  139,
       88,    0,    0,    0,    0,    0,   15,   16,    0,    0,
        0,    0,    0,    0,    0,   29,    0,    0,   33,   34,
        0,   39,    0,   42,    0,   45,    0,    0,   52,   55,
        0,    0,   64,   65,    0,   69,    0,    0,    0,    0,
       80,    0,    0,    0,   84,   86,    0,   90,  105,  105,
      105,  105,  105,   15,   16,  105,  105,  105,  105,  105,

      105,  105,   29,  105,  105,   33,   34,  105,   39,  105,
       42,  105,   45,  105,  105,   52,   55,  105,  105,   64,
       65,  105,   69,  105,  105,  105,  105,   80,  105,  105,
      105,   84,   86,  105,   90,  115,  121,  113,  113,  113,
      113,  113,   15,   16,  113,  113,  113,  113,  113,  113,
      113,   29,  113,  113,   33,   34,  113,   39,  113,   42,
      113,   45,  113,  113,   52,   55,  113,  113,   64,   65,
      113,   69,  113,  113,  113,  113,   80,  113,  113,  113,
       84,   86,  113,   90,  127,  116,    0,  136,  139,  139,
      139,  139,  139,   15,   16,  139,  139,  139,  139,  139,

      139,  139,   29,  139,  139,   33,   34,  139,   39,  139,
       42,  139,   45,  139,  139,   52,   55,  139,  139,   64,
       65,  139,   69,  139,  139,  139,  139,   80,  139,  139,
      139,   84,   86,  139,   90,    0,    0,    9,    0,   14,
        0,    0,   22,    0,   25,    0,   30,   31,   32,    0,
       40,   43,    0,    0,    0,   60,    0,    0,   70,   74,
        0,   81,    0,   83,   87,    0,  105,  105,    9,  105,
       14,  105,  105,   22,  105,   25,  105,   30,   31,   32,
      105,   40,   43,  105,  105,  105,   60,  105,  105,   70,
       74,  105,   81,  105,   83,   87,  105,  129,  113,  113,

        9,  113,   14,  113,  113,   22,  113,   25,  113,   30,
       31,   32,  113,   40,   43,  113,  113,  113,   60,  113,
      113,   70,   74,  113,   81,  113,   83,   87,  113,  129,
      136,  136,  139,  139,    9,  139,   14,  139,  139,   22,
      139,   25,  139,   30,   31,   32,  139,   40,   43,  139,
      139,  139,   60,  139,  139,   70,   74,  139,   81,  139,
       83,   87,  139,    0,    7,    8,    0,   21,    0,    0,
       35,   44,    0,   57,    0,    0,    0,   82,   85,  105,
        7,    8,  105,   21,  105,  105,   35,   44,  105,   57,
      105,  105,  105,   82,   85,  118,  113,    7,    8,  113,

       21,  113,  113,   35,   44,  113,   57,  113,  113,  113,
       82,   85,  124,  136,  139,    7,    8,  139,   21,  139,
      139,   35,   44,  139,   57,  139,  139,  139,   82,   85,
       36,    0,   24,    0,    0,    0,   68,    0,   36,  105,
       24,  105,  105,  105,   68,  105,   36,  113,   24,  113,
      113,  113,   68,  113,   36,  139,   24,  139,  139,  139,
       68,  139,    0,    0,    0,   46,   67,   78,  105,  105,
      105,   46,   67,   78,  113,  113,  113,   46,   67,   78,
      139,  139,  139,   46,   67,   78,    0,    0,    0,  105,
      105,  105,  113,  113,  113,  139,  139,  139,    0,    0,

        0,  105,  105,  105,  113,  113,  113,  139,  139,  139,
       17,   18,   26,   17,   18,   26,   17,   18,   26,   17,
       18,   26,    0,  105,  113,  139,    0,  105,  113,  139,
        0,  105,  113,  139,    0,  105,  113,  139,   19,   19,
       19,   19,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   11,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   51,   11,   80,   11,   81,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static const YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    3,    8,    1,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        1,    9
    } ;

static const flex_int16_t yy_base[1553] =
    {   0,
        0,    0,   82,    0,  164,    0,  233,  240,  247,  254,
      274,    0,  604, 3565,  355, 3565,  573, 3565, 3565, 3565,
      548,  338, 3565,  340,  328,  340,  342,  353,  387,  392,
      326,  345,  386,  333,  393,  350,  402,  435,  439,  440,
      449,  449,  352,  442,  426, 3565, 3565,  506,  511,  516,
      500,  519,  512,  531,  564,  569,  338,  366,  563,  399,
        0,  580,  517,  579,  614,  593,  621,  625,  631,  417,
      584, 3565, 3565, 3565,    0,  688,  695,  680,  700,  696,
      744,  736,  751,  441,  461,  689,  449,    0,  742,  528,
      741,  788,  788,  795,  630,  798,  465,  698,  855,  862,

      659,    0,  387,    0,  478, 3565,    0,    0,    0,  485,
     3565,  661,    0,  417,  847,  867,  863,  911,  903,  918,
      505,  524,  856,  524,  909,  766,  908,  955,  955,  962,
      963,  972,  573,  799, 3565,  417,    0,  492, 3565,  448,
     3565, 3565, 3565, 3565, 3565,  628,  786,  641,  639,  653,
      646,  677,  689,  755, 3565,  786,  953,  798,  815,  838,
      973,  852,  852,  855,  909,  930,  972,  973, 1010,  968,
      972,  976,  982, 1006, 1007, 1002, 1019, 1013, 3565, 1019,
     1023, 1023, 1016, 1011, 1023, 1018, 1019, 1028, 1035, 1031,
     1040, 1025, 1049, 1039, 1037, 1064, 1058, 1059, 1067, 1077,

     1070, 1064, 1077, 1083, 1080, 1078, 1086, 1072, 3565, 1134,
     1138, 1143, 1109,    0,    0, 1081, 1119, 1092, 1133, 1138,
     1122, 1131, 1131, 1132,    0, 1130, 1137, 1136, 1135, 1134,
     1178, 1137, 1136, 1140, 1141, 1158, 1160, 1159, 1191, 1154,
     1152, 1163, 1183, 1187, 1186, 1180, 1197, 1192,    0, 1195,
     1199, 1196, 1194, 1194, 1201, 1196, 1197, 1208, 1215, 1210,
     1220, 1205, 1254, 1232, 1230, 1236, 1239, 1240, 1246, 1255,
     1248, 1241, 1254, 1260, 1257, 1255, 1264, 1250,    0, 1311,
     1319, 1325, 1329, 1336, 1345,    0, 1260, 1311, 1276, 1290,
     1329, 1322, 1329, 1331, 1332,    0, 1329, 1336, 1335, 1333,

     1332, 1347, 1335, 1334, 1337, 1339, 1356, 1359, 1359, 1364,
     1356, 1354, 1356, 1375, 1380, 1379, 1377, 1394, 1387,    0,
     1395, 1399, 1397, 1395, 1391, 1398, 1393, 1394, 1404, 1411,
     1406, 1416, 1402, 1423, 1418, 1415, 1438, 1418, 1414, 1435,
     1447, 1444, 1438, 1453, 1459, 1456, 1454, 1462, 1448, 1510,
     1481, 1514, 1490, 1529, 1537, 1518, 1547,    0,  538,    0,
     1568,    0,    0,    0,    0,    0, 1458, 1512, 1511, 1521,
     1530, 1516, 1524, 1535, 1536,    0, 1533, 1548, 1539, 1537,
     1536, 1570, 1539, 1538, 1551, 1552, 1568, 1570, 1569, 1583,
     1563, 1562, 1560, 1576, 1581, 1579, 1574, 1591, 1594,    0,

     1600, 1604, 1606, 1598, 1604, 1602, 1607, 1609, 1618, 1625,
     1620, 1629, 1614, 1646, 1628, 1624, 1632, 1627, 1632, 1638,
     1649, 1642, 1645, 1659, 1663, 1662, 1670, 1667, 1654,    0,
      447, 3565, 3565, 3565, 3565, 3565, 3565, 1664, 1654, 1684,
     1684, 1675, 1685, 1676, 1677, 1673, 1675, 1689, 1697, 1697,
     1704, 1688, 1707, 1693, 1707, 3565, 1712, 1706, 1720, 1707,
     1709, 1728, 1707, 1719, 1721, 1714, 1731, 3565, 1738, 1739,
     1751, 1731, 1727, 1743, 1740, 1743, 1748, 3565, 3565, 1731,
     3565, 1748, 1744, 1740, 1762, 1763, 1758, 1750, 1767, 1770,
     1778, 3565, 1779, 1777, 3565, 1773, 1783, 1785, 1776, 1784,

     1800, 1788, 1782, 1802, 1792, 1799, 1850, 1854, 1862, 1831,
     1868,    0,    0,    0,    0,    0,    0, 1797, 1806, 1840,
     1849, 1841, 1859, 1852, 1852, 1848, 1850, 1864, 1870, 1867,
     1870, 1854, 1873, 1859, 1872,    0, 1877, 1863, 1878, 1865,
     1866, 1885, 1864, 1876, 1878, 1870, 1883,    0, 1894, 1904,
     1922, 1897, 1902, 1918, 1915, 1918, 1923,    0,    0, 1908,
        0, 1918, 1912, 1907, 1928, 1929, 1923, 1915, 1931, 1929,
     1937,    0, 1938, 1935,    0, 1931, 1941, 1942, 1933, 1935,
     1956, 1953, 1948, 1977, 1967, 1974, 1995, 1999, 2007, 2011,
     2025, 2032, 2036, 2040,    0,    0,    0,    0,    0, 1972,

     1984, 2021, 2036, 2027, 2035, 2028, 2028, 2024, 2026, 2041,
     2046, 2043, 2046, 2030, 2050, 2036, 2049,    0, 2055, 2039,
     2053, 2040, 2041, 2060, 2039, 2050, 2052, 2044, 2065,    0,
     2075, 2090, 2101, 2083, 2078, 2094, 2091, 2094, 2099,    0,
        0, 2083,    0, 2093, 2088, 2083, 2105, 2106, 2100, 2092,
     2106, 2103, 2112,    0, 2113, 2110,    0, 2106, 2116, 2117,
     2108, 2118, 2137, 2139, 2134, 2153, 2144, 2149, 2171, 2176,
     2183, 2202, 2206, 2213, 2217, 2221, 2240, 2228, 2245, 2263,
        0,    0,    0,    0,    0,    0, 2149, 2151, 2224, 2224,
     2215, 2223, 2216, 2217, 2217, 2227, 2241, 2248, 2245, 2248,

     2232, 2251, 2245, 2259,    0, 2265, 2249, 2263, 2250, 2251,
     2270, 2250, 2263, 2265, 2262, 2275,    0, 2280, 2281, 2306,
     2273, 2268, 2284, 2285, 2296, 2301,    0,    0, 2286,    0,
     2296, 2290, 2285, 2314, 2315, 2310, 2303, 2317, 2314, 2322,
        0, 2323, 2320,    0, 2316, 2326, 2329, 2326, 2321, 2341,
     2330, 2324, 2343, 2347, 2339, 2329, 2357, 2348, 3565, 2362,
     3565, 3565, 2359, 2349, 2358, 2373, 3565, 2358, 2360, 3565,
     2373, 2371, 2372, 3565, 2369, 2361, 2371, 2368, 2384, 2372,
     2392, 3565, 3565, 2383, 2386, 2383, 2384,  427, 2416, 3565,
     3565, 3565, 3565, 2383, 3565, 2396, 2392, 3565, 2414, 3565,

     2402, 2406, 3565, 2407, 2406, 2425, 2432, 3565, 2422, 3565,
     2418, 3565, 2424, 2419, 2426, 2422, 2436, 2439, 2437, 3565,
     2441, 3565, 2465, 2484, 2488, 2492, 2438, 2457, 2450,    0,
     2483,    0,    0, 2480, 2472, 2474, 2489,    0, 2474, 2476,
        0, 2489, 2487, 2488,    0, 2485, 2477, 2487, 2484, 2500,
     2486, 2506,    0,    0, 2492, 2495, 2492, 2493,  426, 2508,
        0,    0,    0,    0, 2492,    0, 2505, 2496,    0, 2511,
        0, 2501, 2502,    0, 2528, 2527, 2548, 2548,    0, 2538,
        0, 2534,    0, 2540, 2535, 2542, 2538, 2552, 2555, 2553,
        0, 2557,    0, 2571, 2575, 2579, 2600, 2605, 2609, 2554,

     2573, 2566,    0, 2600,    0,    0, 2599, 2589, 2592, 2607,
        0, 2593, 2595,    0, 2607, 2605, 2606,    0, 2603, 2595,
     2605, 2602, 2618, 2604, 2624,    0,    0, 2610, 2613, 2610,
     2611,  418, 2624,    0,    0,    0,    0, 2610,    0, 2624,
     2615,    0, 2630,    0, 2618, 2645,    0, 2648, 2647, 2666,
     2666,    0, 2656,    0, 2653,    0, 2659, 2653, 2660, 2656,
     2670, 2673, 2671,    0, 2675,    0, 2689, 2693, 2718, 2722,
     2729, 2733, 2737, 2754, 2667, 2686, 2717,    0, 2731,    0,
        0, 2728, 2718, 2720, 2735,    0, 2720, 2722,    0, 2734,
     2732, 2733,    0, 2734, 2726, 2736, 2733, 2749, 2735, 2755,

        0,    0, 2741, 2744, 2741, 2742,  367, 2783,    0,    0,
        0,    0, 2742,    0, 2767, 2758,    0, 2772,    0, 2760,
     2774,    0, 2775, 2774, 2793, 2793,    0, 2783,    0, 2779,
        0, 2785, 2779, 2787, 2783, 2801, 2804, 2802,    0, 2806,
        0, 2811, 2808, 2789, 2814, 2796, 3565, 3565, 2803, 2806,
     2815, 2819, 2829, 2820, 2831, 3565, 2828, 2831, 3565, 3565,
     2833, 3565, 2845, 3565, 2833, 3565, 2849, 2836, 3565, 3565,
     2855, 2837, 3565, 3565, 2839, 3565, 2858, 2840, 2854, 2846,
     3565, 2862, 2845, 2864, 3565, 2851, 2870, 3565, 2871, 2868,
     2849, 2874, 2856,    0,    0, 2864, 2879, 2887, 2879, 2889,

     2891, 2903,    0, 2889, 2891,    0,    0, 2893,    0, 2905,
        0, 2893,    0, 2909, 2896,    0,    0, 2915, 2897,    0,
        0, 2899,    0, 2918, 2904, 2918, 2906,    0, 2922, 2905,
     2924,    0, 2911, 2930,    0,  727, 2957, 2931, 2928, 2909,
     2935, 2944,    0,    0, 2952, 2955, 2963, 2955, 2965, 2956,
     2967,    0, 2953, 2955,    0,    0, 2957,    0, 2969,    0,
     2957,    0, 2973, 2960,    0,    0, 2979, 2961,    0,    0,
     2963,    0, 2982, 2964, 2978, 2966,    0, 2982, 2965, 2984,
        0, 2971, 2990,    0, 3029,  829, 3033, 3037, 3032, 3029,
     3010, 3035, 3017,    0,    0, 3024, 3027, 3035, 3027, 3037,

     3028, 3039,    0, 3025, 3027,    0,    0, 3029,    0, 3041,
        0, 3029,    0, 3045, 3032,    0,    0, 3051, 3033,    0,
        0, 3035,    0, 3054, 3036, 3050, 3038,    0, 3054, 3037,
     3056,    0, 3072, 3091,    0, 3075, 3080, 3565, 3081, 3565,
     3076, 3077, 3565, 3095, 3565, 3083, 3565, 3565, 3565, 3096,
     3565, 3565, 3083, 3097, 3091, 3565, 3095, 3102, 3565, 3565,
     3105, 3565, 3093, 3565, 3565, 3090, 3091, 3096,    0, 3097,
        0, 3092, 3093,    0, 3111,    0, 3099,    0,    0,    0,
     3112,    0,    0, 3099, 3113, 3107,    0, 3140, 3147,    0,
        0, 3150,    0, 3138,    0,    0, 3135, 3162, 3140, 3145,

        0, 3146,    0, 3141, 3142,    0, 3160,    0, 3148,    0,
        0,    0, 3161,    0,    0, 3148, 3162, 3156,    0, 3160,
     3167,    0,    0, 3170,    0, 3158,    0,    0, 3155, 3182,
     3191, 3211, 3189, 3194,    0, 3195,    0, 3190, 3191,    0,
     3209,    0, 3197,    0,    0,    0, 3210,    0,    0, 3197,
     3211, 3205,    0, 3209, 3216,    0,    0, 3219,    0, 3207,
        0,    0, 3204, 3219, 3565, 3565,  305, 3565, 3204, 3205,
     3565, 3565, 3223, 3565, 3205, 3217, 3216, 3565, 3565, 3226,
        0,    0,  216,    0, 3211, 3212,    0,    0, 3230,    0,
     3212, 3224, 3252,    0,    0, 3274, 3266,    0,    0,  209,

        0, 3251, 3252,    0,    0, 3270,    0, 3252, 3264, 3263,
        0,    0, 3285, 3289, 3281,    0,    0,  202,    0, 3266,
     3267,    0,    0, 3285,    0, 3267, 3279, 3278,    0,    0,
     3565, 3288, 3565, 3284, 3275, 3291, 3565, 3281,    0, 3303,
        0, 3289, 3286, 3304,    0, 3294,    0, 3308,    0, 3302,
     3293, 3324,    0, 3314,    0, 3327,    0, 3323, 3313, 3329,
        0, 3327, 3343, 3336, 3331, 3565, 3565, 3565, 3347, 3340,
     3335,    0,    0,    0, 3350, 3344, 3339,    0,    0,    0,
     3354, 3347, 3349,    0,    0,    0, 3345, 3353, 3353, 3348,
     3356, 3356, 3351, 3368, 3372, 3367, 3375, 3375, 3385, 3386,

     3373, 3396, 3397, 3384, 3399, 3400, 3387, 3402, 3403, 3390,
     3565, 3392, 3565,    0, 3393,    0,    0, 3394,    0,    0,
     3395,    0, 3402, 3403, 3404, 3405, 3425, 3426, 3427, 3428,
     3426, 3431, 3432, 3433, 3431, 3432, 3433, 3434, 3565,    0,
        0,    0, 3565, 3499, 3505, 3510, 3519, 3528, 3537,  242,
     3546, 3555
    } ;

static const flex_int16_t yy_def[1553] =
    {   0,
     1543,    1, 1543,    3, 1543,    5,    5,    5,    5,    5,
     1543,   11, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1543, 1543, 1543, 1545, 1545, 1545, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1545, 1545,

     1547, 1548, 1548, 1548, 1548, 1543, 1548, 1548, 1548, 1548,
     1543, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1543, 1548, 1548, 1543, 1543, 1549,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1550, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1545,
     1545, 1545, 1545, 1545, 1545, 1547, 1547, 1548, 1548, 1548,
     1551, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1549, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1550, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1543, 1545, 1545, 1545,
     1545, 1545, 1543, 1545, 1546, 1546, 1546, 1546, 1546, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1543, 1545,
     1545, 1545, 1545, 1545, 1543, 1545, 1547, 1543, 1547, 1551,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1543, 1545, 1543, 1545, 1545, 1543, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1543, 1543, 1545, 1545,
     1545, 1543, 1552, 1547, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1545, 1543, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1543, 1545, 1552, 1552, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1546, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1545,
     1552, 1552, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1545, 1546, 1546, 1546, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1545, 1552, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544,
     1544, 1544, 1544, 1544, 1546, 1546, 1546, 1546, 1546, 1546,
     1548, 1548, 1548, 1548, 1548, 1548, 1543, 1543, 1543, 1544,
     1544, 1544, 1546, 1546, 1546, 1548, 1548, 1548, 1543, 1543,

     1543, 1544, 1544, 1544, 1546, 1546, 1546, 1548, 1548, 1548,
     1543, 1543, 1543, 1544, 1544, 1544, 1546, 1546, 1546, 1548,
     1548, 1548, 1543, 1544, 1546, 1548, 1543, 1544, 1546, 1548,
     1543, 1544, 1546, 1548, 1543, 1544, 1546, 1548, 1543, 1544,
     1546, 1548,    0, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543
    } ;

static const flex_int16_t yy_nxt[3648] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       18,   18,   18,   18,   21,   18,   14,   14,   14,   14,
       18,   22,   23,   24,   18,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   14,   35,   36,   37,   38,
       14,   14,   39,   40,   41,   42,   43,   44,   14,   14,
       14,   14,   14,   14,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   14,   35,   36,   37,   38,   14,
       14,   39,   40,   41,   42,   43,   44,   14,   14,   45,
       46,   14,   14,   15,   16,   15,   17,   47,   14,   18,
       19,   20,   18,   18,   18,   18,   21,   48,   49,   50,

       50,   50,   18,   22,   23,   24,   18,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   61,   61,   66,   67,   68,   69,   70,   71,
       61,   61,   61,   72,   61,   73,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   61,   61,   66,   67,   68,   69,   70,   71,   61,
       61,   45,   46,   61,   14,   15,   16,   15,   17,   14,
       74,   18,   19,   20,   18,   18,   18,   75,   21,   76,
       77,   77,   77,   77,   18,   22,   23,   24,   18,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   88,   88,   93,   94,   95,   96,
       97,   98,   88,   88,   88,   72,   14,   14,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   88,   88,   93,   94,   95,   96,   97,
       98,   88,   88,   45,   46,   88,   99,  512,   75,  100,
      100,  100,  100,   99, 1456,   75,  100,  100,  100,  100,
       18, 1448,   18,  101,  101,  101,  101,   18, 1440,   18,
      101,  101,  101,  101,  102,  103,  104,   15,  105,  106,
      102,  107,  108,   20,  109,  109,  109,  109,  110,  109,
      102,  102,  102,  102,  111,  112,  113,  114,  111,  115,

      116,  117,  118,  119,  120,  121,  122,  123,  124,  102,
      125,  126,  127,  128,  102,  102,  129,  130,  131,  132,
      133,  134,  102,  102,  102,  135,  102,  102,  115,  116,
      117,  118,  119,  120,  121,  122,  123,  124,  102,  125,
      126,  127,  128,  102,  102,  129,  130,  131,  132,  133,
      134,  102,  102,  136,  137,  102,  138, 1432,  138,  141,
      142,  143,  144,  145,  146,  150,  147,  156,  175,  151,
      176,  148,  180,  152,  149,  184,  153,  206,  160,  154,
      245,  157,  161,  185,  158, 1213,  162,  159,  359,  155,
      138,  246,  163,  146,  150,  147,  156,  175,  151,  176,

      148,  180,  152,  149,  184,  153,  206,  160,  154,  245,
      157,  161,  185,  158,  164,  162,  159,  170,  155,  177,
      246,  163,  181,  165,  178,  166,  182,  186,  171,  179,
      167,  172,  183,  168,  173,  169, 1162,  174,  250,  365,
      366,  187,  276,  164, 1113, 1066,  170,  188,  177,  432,
      432,  181,  165,  178,  166,  182,  186,  171,  179,  167,
      172,  183,  168,  173,  169,  189,  174,  250,  193,  196,
      187,  276,  194,  190,  207,  208,  188,  191,  195,  197,
      192,  200,  201,  316,  198,  199,  317,  203,  321,  204,
      347,  202,  205,  138,  189,  138,  430,  193,  196,  361,

      360,  194,  190,  207,  208,  209,  191,  195,  197,  192,
      200,  201,  316,  198,  199,  317,  203,  321,  204,  347,
      202,  205,  210,  210,  210,  210,  211,  212,  212,  212,
      212,  211,  212,  212,  212,  212,  216,  226,  217,  359,
      213,  138,  254,  218,  220,  213,  219,  396,  221,  397,
      255,  227,  222,  325,  228,  223,  230,  229,  224,  214,
      231,  326,  140,  401,  232,  216,  226,  217,  225,  213,
      233,  254,  218,  220,  213,  219,  396,  221,  397,  255,
      227,  222,  325,  228,  223,  230,  229,  224,  214,  231,
      326,  234,  401,  232,  240,  139,  247,  225,  427,  233,

      235,  248,  236, 1543,  256,  241,  249,  237,  242,  251,
      238,  243,  239,  252,  244, 1543,  277,  278,  257,  253,
      234, 1543,  263,  240,  258,  247,  264,  427, 1543,  235,
      248,  236,  265,  256,  241,  249,  237,  242,  251,  238,
      243,  239,  252,  244,  259,  277,  278,  257,  253, 1543,
      266,  263,  260,  258, 1543,  264,  261,  270,  271,  262,
      267,  265,  341,  342,  433,  268,  269,  272,  436,  273,
      437,  274,  343,  259,  275,  357,  357,  357,  357,  266,
      438,  260,  362,  363,  364,  261,  270,  271,  262,  267,
      439,  341,  342,  433,  268,  269,  272,  436,  273,  437,

      274,  343, 1543,  275,  280,  280,  280,  280,  282,  438,
      283,  284,  284,  284,  284,  440,  287,  281,  288,  439,
     1543,  297,  318,  289,  285,  291,  290,  319,  441,  292,
      348,  349,  320,  293, 1543,  298,  294, 1543,  299,  295,
      282,  300, 1298, 1543,  440,  287,  281,  288, 1543,  296,
      297,  318,  289,  285,  291,  290,  319,  441,  292,  348,
      349,  320,  293,  305,  298,  294,  327,  299,  295,  301,
      300,  322,  306,  302,  307,  323,  311,  303,  296,  308,
      328,  324,  309,  304,  310, 1543,  329,  312, 1543, 1543,
      313,  405,  305,  314,  442,  327,  315, 1543,  301,  406,

      322,  306,  302,  307,  323,  311,  303, 1543,  308,  328,
      324,  309,  304,  310,  434,  329,  312,  334,  330,  313,
      405,  335,  314,  442,  337,  315,  331,  336,  406,  443,
      332,  428,  429,  333,  338,  435,  344,  446,  345,  339,
      340,  346, 1330,  434,  353, 1543,  334,  330, 1543, 1543,
      335, 1543, 1543,  337, 1543,  331,  336,  447,  443,  332,
      428,  429,  333,  338,  435,  344,  446,  345,  339,  340,
      346,  350,  350,  350,  350,  352, 1543,  353,  354,  354,
      354,  354,  448,  367,  351,  368,  447, 1543,  377,  398,
      369,  355,  371,  370,  399,  452,  372,  453,  454,  400,

      373, 1543,  378,  374, 1543,  379,  375, 1543,  380, 1543,
     1543,  448,  367,  351,  368, 1543,  376,  377,  398,  369,
      355,  371,  370,  399,  452,  372,  453,  454,  400,  373,
      385,  378,  374,  407,  379,  375,  381,  380,  402,  386,
      382,  387,  403,  391,  383,  376,  388,  408,  404,  389,
      384,  390,  455,  409,  392, 1543, 1543,  393,  456,  385,
      394, 1543,  407,  395, 1543,  381, 1543,  402,  386,  382,
      387,  403,  391,  383, 1543,  388,  408,  404,  389,  384,
      390,  455,  409,  392,  414,  410,  393,  456,  415,  394,
      444,  417,  395,  411,  416,  421,  422,  412,  445,  457,

      413,  418,  458,  449,  461,  423,  419,  420, 1543,  450,
      424,  462,  425,  414,  410,  426,  451,  415,  463,  444,
      417,  464,  411,  416,  421,  422,  412,  445,  457,  413,
      418,  458,  449,  461,  423,  419,  420,  459,  450,  424,
      462,  425,  465,  460,  426,  451,  466,  463,  467,  468,
      464,  469,  472,  473,  476,  477,  470,  471,  474,  478,
      475,  479,  480,  481,  482,  483,  459,  484,  485,  486,
      489,  465,  460,  490,  487,  466,  488,  467,  468, 1543,
      469,  472,  473,  476,  477,  470,  471,  474,  478,  475,
      479,  480,  481,  482,  483,  493,  484,  485,  486,  489,

      491,  494,  490,  487,  495,  488,  496,  497,  492,  498,
      499,  501,  500,  502,  503,  505,  506,  513, 1543,  516,
      504,  510, 1543,  510,  493,  511,  511,  511,  511,  491,
      494, 1543, 1543,  495, 1543,  496,  497,  492,  498,  499,
      501,  500,  502,  503,  505,  506,  513,  514,  516,  504,
      210,  210,  210,  210,  508,  508,  508,  508,  211,  212,
      212,  212,  212,  507,  517,  518,  519,  509,  515,  520,
      521,  522,  213,  523,  524,  526,  514,  527,  528, 1543,
      532,  533,  525,  534,  535, 1543,  536,  537,  538, 1543,
      541,  542,  507,  517,  518,  519,  509,  515,  520,  521,

      522,  213,  523,  524,  526,  543,  527,  528,  529,  532,
      533,  525,  534,  535,  530,  536,  537,  538,  539,  541,
      542,  531,  544,  545,  540,  546,  547,  548,  552,  553,
      549,  554,  556,  555,  543,  550,  551,  529,  557,  559,
      560,  561,  558,  530,  562,  563,  564,  539,  565,  566,
      531,  544,  545,  540,  546,  547,  548,  552,  553,  549,
      554,  556,  555,  569,  550,  551,  570,  557,  559,  560,
      561,  558,  571,  562,  563,  564,  573,  565,  566,  567,
      572,  568,  574,  575,  576,  577,  578,  579,  581,  580,
      582,  583,  569,  585,  586,  570,  595,  584, 1543, 1543,

     1543,  571, 1543,  598, 1543,  573, 1543, 1543,  567,  572,
      568,  574,  575,  576,  577,  578,  579,  581,  580,  582,
      583,  599,  585,  586, 1543,  595,  584,  280,  280,  280,
      280,  587,  598,  587, 1543,  588,  588,  588,  588,  596,
      281,  589,  589,  589,  589,  590,  590,  590,  590,  282,
      599,  283,  592,  592,  592,  592,  600,  593,  591,  593,
      597,  594,  594,  594,  594,  285,  601,  602,  596,  281,
      603,  604,  605,  606,  608,  609,  610,  611,  614,  615,
      616,  607,  617,  612,  618,  600,  619,  591,  620,  597,
      613,  621,  623,  624,  285,  601,  602,  622,  625,  603,

      604,  605,  606,  608,  609,  610,  611,  614,  615,  616,
      607,  617,  612,  618,  626,  619,  627,  620,  628,  613,
      621,  623,  624,  629,  630,  631,  622,  625,  634,  635,
      632,  633,  636,  638,  637,  639,  641,  642,  643,  640,
      644,  645,  646,  626,  647,  627,  648,  628,  649,  651,
      650,  652,  629,  630,  631,  655,  656,  634,  635,  632,
      633,  636,  638,  637,  639,  641,  642,  643,  640,  644,
      645,  646,  657,  647,  653,  648,  658,  649,  651,  650,
      652,  659,  654,  660,  655,  656,  661,  663,  662,  664,
      665,  667,  668,  669,  682,  669,  666,  670,  670,  670,

      670,  657, 1543,  653, 1543,  658,  673,  673,  673,  673,
      659,  654,  660, 1543, 1543,  661,  663,  662,  664,  665,
      667,  668, 1543,  682, 1543,  666,  350,  350,  350,  350,
      671,  671,  671,  671,  677,  677,  677,  677,  685,  351,
      683, 1543,  352,  672,  353,  674,  674,  674,  674,  675,
      678,  675,  686,  676,  676,  676,  676,  687,  355, 1543,
      688,  684,  689,  679,  679,  679,  679,  685,  351,  683,
      681,  431,  672,  431,  690,  691,  692,  431,  695,  696,
      697,  686,  701,  702, 1543,  693,  687,  355,  431,  688,
      684,  689,  431,  694,  703,  704,  705,  706,  707,  710,

      698,  711,  712,  690,  691,  692,  699,  695,  696,  697,
      708,  701,  702,  700,  693,  713,  709,  714,  715,  431,
      716,  717,  694,  703,  704,  705,  706,  707,  710,  698,
      711,  712,  718,  721,  722,  699,  725,  719,  720,  708,
      728,  723,  700,  724,  713,  709,  714,  715,  726,  716,
      717,  729,  727,  730,  731,  732,  733,  734,  735,  738,
      739,  718,  721,  722,  742,  725,  719,  720,  740,  728,
      723,  736,  724,  737,  743,  744,  741,  726,  745,  746,
      729,  727,  730,  731,  732,  733,  734,  735,  738,  739,
      747,  750,  748,  742,  749,  751,  754,  740,  755,  756,

      736,  757,  737,  743,  744,  741,  752,  745,  746,  758,
      759,  760,  753,  763,  761,  764,  765,  766,  767,  747,
      750,  748,  768,  749,  751,  754,  769,  755,  756,  762,
      757,  770,  771,  772,  773,  752,  774,  775,  758,  759,
      760,  753,  763,  761,  764,  765,  766,  767,  776,  777,
      778,  768,  779,  780,  781,  769,  782,  783,  762,  784,
      770,  771,  772,  773,  785,  774,  775,  786,  787,  791,
      788,  792,  793,  794,  795,  796,  797,  776,  777,  778,
      789,  779,  780,  781,  798,  782,  783,  799,  784,  800,
      790,  801,  802,  785,  803,  804,  786,  787,  791,  805,

      792,  793,  794,  795,  796,  797,  806,  807,  808,  789,
      809,  810,  811,  798,  812,  813,  799,  814,  800,  790,
      801,  802,  815,  803,  804,  816,  817,  818,  805,  819,
      820,  822,  827, 1543,  821,  806,  807,  808, 1543,  809,
      810,  811, 1543,  812,  813, 1543,  814,  511,  511,  511,
      511,  815, 1543,  828,  816,  817,  818, 1543,  819,  820,
      822,  827,  823,  821,  823,  829,  824,  824,  824,  824,
      508,  508,  508,  508,  825,  830,  825,  831,  826,  826,
      826,  826,  828,  509,  511,  511,  511,  511,  832,  834,
      835,  836,  837,  838,  829,  839,  840,  841,  842,  843,

      844,  845,  846,  833,  830,  847,  831,  848,  849,  850,
      851,  852,  509,  853,  854,  855,  856,  832,  834,  835,
      836,  837,  838,  857,  839,  840,  841,  842,  843,  844,
      845,  846,  833,  858,  847,  862,  848,  849,  850,  851,
      852,  859,  853,  854,  855,  856,  863,  864,  865,  866,
      867,  860,  857,  868,  869,  870,  871,  872,  873,  874,
      875,  861,  858,  876,  862,  877,  878,  879,  880,  881,
      882,  883,  884,  886,  885,  863,  864,  865,  866,  867,
      860,  887,  868,  869,  870,  871,  872,  873,  874,  875,
      861,  888,  876,  889,  877,  878,  879,  880,  881,  882,

      883,  884,  886,  885,  890,  891,  893,  900, 1543,  892,
      887,  894,  894,  894,  894,  588,  588,  588,  588, 1543,
      888, 1543,  889,  895,  895,  895,  895,  590,  590,  590,
      590,  901, 1543,  890,  891,  893,  900,  896,  892,  896,
      591,  897,  897,  897,  897,  282,  902,  283,  898,  898,
      898,  898,  899,  899,  899,  899,  594,  594,  594,  594,
      901,  285,  903,  904,  905,  907,  908,  909,  910,  591,
      911,  912,  913,  914,  915,  902,  916,  917,  918,  906,
      919,  920,  921,  922,  923,  924,  925,  926,  927,  928,
      285,  903,  904,  905,  907,  908,  909,  910,  929,  911,

      912,  913,  914,  915,  930,  916,  917,  918,  906,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  931,
      932,  935,  936,  937,  938,  939,  940,  929,  941,  942,
      933,  943,  944,  930,  945,  946,  947,  948,  949,  950,
      934,  951,  952,  953,  954,  955,  956,  957,  931,  958,
      935,  936,  937,  938,  939,  940,  959,  941,  942,  933,
      943,  944,  960,  945,  946,  947,  948,  949,  950,  934,
      951,  952,  953,  954,  955,  956,  957,  961,  958,  962,
      963,  966,  964, 1543,  975,  959,  965,  967,  967,  967,
      967,  960,  670,  670,  670,  670, 1543, 1543,  976,  671,

      671,  671,  671, 1543, 1543, 1543,  961, 1543,  962,  963,
      966,  964,  672,  975,  968,  965,  968, 1543,  969,  969,
      969,  969,  970,  970,  970,  970,  352,  976,  353,  971,
      971,  971,  971,  972,  972,  972,  972,  676,  676,  676,
      676,  672,  355,  678,  973,  973,  973,  973,  678,  977,
      978,  979,  980,  982, 1543,  983,  677,  677,  677,  677,
      984,  974,  974,  974,  974,  681,  431,  981,  431,  985,
      986,  355,  431,  987,  988,  989,  990,  991,  977,  978,
      979,  980,  982,  431,  983, 1543,  992,  431,  993,  984,
      994,  995,  996,  997,  998,  999,  981, 1000,  985,  986,

     1001, 1002,  987,  988,  989,  990,  991, 1003, 1004, 1005,
     1006, 1010, 1011, 1012,  431,  992, 1543,  993, 1013,  994,
      995,  996,  997,  998,  999, 1007, 1000, 1014, 1015, 1001,
     1002, 1016, 1017, 1018, 1019, 1008, 1003, 1004, 1005, 1006,
     1010, 1011, 1012, 1020, 1021, 1009, 1022, 1013, 1023, 1024,
     1025, 1026, 1027, 1028, 1029, 1030, 1014, 1015, 1031, 1034,
     1016, 1017, 1018, 1019, 1008, 1032, 1035, 1033, 1036, 1037,
     1038, 1041, 1020, 1021, 1009, 1022, 1042, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1039, 1043, 1031, 1034, 1040,
     1044, 1045, 1046, 1047, 1032, 1035, 1033, 1036, 1037, 1038,

     1041, 1048, 1049, 1050, 1051, 1042, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1039, 1043, 1060, 1061, 1040, 1044,
     1045, 1046, 1047, 1062, 1063, 1064, 1065, 1069, 1070, 1543,
     1048, 1049, 1050, 1051, 1071, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1072, 1073, 1060, 1061, 1067, 1074, 1075,
     1076, 1077, 1062, 1063, 1064, 1065, 1069, 1070, 1068, 1078,
     1079, 1080, 1081, 1071, 1082, 1083, 1084, 1085, 1086, 1087,
     1088, 1543, 1072, 1073, 1543, 1543, 1067, 1074, 1075, 1076,
     1077,  824,  824,  824,  824, 1089, 1090, 1068, 1078, 1079,
     1080, 1081, 1091, 1082, 1083, 1084, 1085, 1086, 1087, 1088,

      824,  824,  824,  824,  826,  826,  826,  826,  826,  826,
      826,  826, 1092, 1093, 1089, 1090, 1094, 1095, 1096, 1097,
     1098, 1091, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1116, 1117, 1118, 1114,
     1119, 1092, 1093, 1120, 1121, 1094, 1095, 1096, 1097, 1098,
     1115, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1111, 1112, 1116, 1117, 1118, 1114, 1119,
     1122, 1123, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1115,
     1129, 1130, 1131, 1132, 1133, 1134, 1135,  894,  894,  894,
      894, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1122,

     1123, 1138, 1139, 1124, 1125, 1126, 1127, 1128, 1140, 1129,
     1130, 1131, 1132, 1133, 1134, 1135,  897,  897,  897,  897,
      283,  898,  898,  898,  898,  899,  899,  899,  899, 1141,
     1138, 1139, 1142, 1143,  285, 1144, 1145, 1140, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
     1158, 1159, 1160, 1161, 1165, 1163, 1166, 1167, 1141, 1168,
     1169, 1142, 1143,  285, 1144, 1145, 1164, 1146, 1147, 1148,
     1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1165, 1163, 1166, 1167, 1170, 1168, 1169,
     1171, 1172, 1173, 1174, 1175, 1164, 1176, 1177, 1178, 1179,

     1180, 1181, 1182, 1183, 1184,  967,  967,  967,  967, 1185,
     1185, 1185, 1185, 1543, 1189, 1190, 1170, 1543, 1543, 1171,
     1172, 1173, 1174, 1175, 1543, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184,  969,  969,  969,  969, 1186, 1186,
     1186, 1186,  352, 1189, 1190,  971,  971,  971,  971,  972,
      972,  972,  972, 1188, 1188, 1188, 1188,  678,  355, 1191,
     1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
      677,  677,  677,  677, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1543, 1216,  355, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1217,

     1218, 1219, 1220, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1214, 1216, 1221, 1222, 1223, 1224,
     1225, 1226, 1227, 1228, 1229, 1215, 1230, 1231, 1217, 1218,
     1219, 1220, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1214, 1243, 1221, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1215, 1230, 1231, 1244, 1245, 1246,
     1247, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1248, 1243, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1260, 1244, 1245, 1246, 1247,
     1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,

     1271, 1248, 1272, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1273, 1274, 1275, 1276, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1277, 1272, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1273, 1274, 1275, 1276, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1277,
     1302, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
     1287, 1288, 1289, 1137, 1137, 1137, 1137, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1303, 1302,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,

     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1543, 1303, 1543, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
     1325, 1326, 1327, 1328, 1329, 1185, 1185, 1185, 1185, 1331,
     1331, 1331, 1331, 1332, 1332, 1332, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,

     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1396,
     1396, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1413,

     1413, 1413, 1391, 1392, 1393, 1394, 1395, 1331, 1331, 1331,
     1331, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1414, 1414, 1414,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1445,
     1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1434, 1435,
     1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1445, 1446,
     1396, 1396, 1396, 1396, 1447, 1449, 1450, 1451, 1452, 1453,

     1454, 1413, 1413, 1413, 1413, 1331, 1331, 1331, 1331, 1455,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1465, 1446, 1466,
     1467, 1468, 1471, 1447, 1449, 1450, 1451, 1452, 1453, 1454,
     1472, 1469, 1464, 1473, 1474, 1477, 1475, 1478, 1455, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1465, 1470, 1466, 1467,
     1468, 1471, 1476, 1479, 1480, 1481, 1483, 1484, 1485, 1472,
     1469, 1464, 1473, 1474, 1477, 1475, 1478, 1486, 1487, 1488,
     1489, 1482, 1490, 1491, 1492, 1493, 1470, 1494, 1495, 1496,
     1497, 1476, 1479, 1480, 1481, 1483, 1484, 1485, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1505, 1486, 1487, 1488, 1489,

     1482, 1490, 1491, 1492, 1493, 1506, 1494, 1495, 1496, 1497,
     1507, 1508, 1509, 1510, 1511, 1512, 1513, 1498, 1499, 1500,
     1501, 1502, 1503, 1504, 1505, 1514, 1515, 1516, 1517, 1518,
     1519, 1520, 1521, 1522, 1506, 1523, 1524, 1525, 1526, 1507,
     1508, 1509, 1510, 1511, 1512, 1513, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1535, 1523, 1524, 1525, 1526, 1536, 1537,
     1538, 1539, 1540, 1541, 1542, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1535, 1543, 1543, 1543, 1543, 1536, 1537, 1538,

     1539, 1540, 1541, 1542,  215, 1543,  215,  215,  279, 1543,
      279, 1543,  279,  286,  286,  286,  286,  286,  286,  356,
     1543,  356,  356,  356,  356,  356,  356,  356,  358, 1543,
     1543,  358,  358,  358, 1543,  358,  358,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  680,  680,  680,  680,
      680,  680,  680,  680,  680, 1187, 1543, 1187, 1187, 1187,
     1187, 1187, 1187, 1187,   13, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543
    } ;

static const flex_int16_t yy_chk[3648] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 1550,    7,    7,
        7,    7,    7,    8, 1418,    8,    8,    8,    8,    8,
        9, 1400,    9,    9,    9,    9,    9,   10, 1383,   10,
       10,   10,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   15, 1367,   15,   22,
       22,   22,   24,   24,   25,   26,   25,   27,   31,   26,
       32,   25,   34,   26,   25,   36,   26,   43,   28,   26,
       57,   27,   28,   36,   27, 1007,   28,   27,  103,   26,
      103,   58,   28,   25,   26,   25,   27,   31,   26,   32,

       25,   34,   26,   25,   36,   26,   43,   28,   26,   57,
       27,   28,   36,   27,   29,   28,   27,   30,   26,   33,
       58,   28,   35,   29,   33,   29,   35,   37,   30,   33,
       29,   30,   35,   29,   30,   29,  932,   30,   60,  114,
      114,   37,   70,   29,  859,  788,   30,   37,   33,  431,
      140,   35,   29,   33,   29,   35,   37,   30,   33,   29,
       30,   35,   29,   30,   29,   38,   30,   60,   39,   40,
       37,   70,   39,   38,   44,   44,   37,   38,   39,   40,
       38,   41,   41,   84,   40,   40,   85,   42,   87,   42,
       97,   41,   42,  138,   38,  138,  136,   39,   40,  110,

      105,   39,   38,   44,   44,   45,   38,   39,   40,   38,
       41,   41,   84,   40,   40,   85,   42,   87,   42,   97,
       41,   42,   48,   48,   48,   48,   49,   49,   49,   49,
       49,   50,   50,   50,   50,   50,   51,   53,   51,  359,
       49,  359,   63,   51,   52,   50,   51,  121,   52,  122,
       63,   53,   52,   90,   53,   52,   54,   53,   52,   49,
       54,   90,   21,  124,   54,   51,   53,   51,   52,   49,
       54,   63,   51,   52,   50,   51,  121,   52,  122,   63,
       53,   52,   90,   53,   52,   54,   53,   52,   49,   54,
       90,   55,  124,   54,   56,   17,   59,   52,  133,   54,

       55,   59,   55,   13,   64,   56,   59,   55,   56,   62,
       55,   56,   55,   62,   56,    0,   71,   71,   64,   62,
       55,    0,   66,   56,   64,   59,   66,  133,    0,   55,
       59,   55,   66,   64,   56,   59,   55,   56,   62,   55,
       56,   55,   62,   56,   65,   71,   71,   64,   62,    0,
       67,   66,   65,   64,    0,   66,   65,   68,   68,   65,
       67,   66,   95,   95,  146,   67,   67,   68,  148,   69,
      149,   69,   95,   65,   69,  101,  101,  101,  101,   67,
      150,   65,  112,  112,  112,   65,   68,   68,   65,   67,
      151,   95,   95,  146,   67,   67,   68,  148,   69,  149,

       69,   95,    0,   69,   76,   76,   76,   76,   77,  150,
       77,   77,   77,   77,   77,  152,   78,   76,   78,  151,
        0,   80,   86,   78,   77,   79,   78,   86,  153,   79,
       98,   98,   86,   79,    0,   80,   79,    0,   80,   79,
     1136,   80, 1136,    0,  152,   78,   76,   78,    0,   79,
       80,   86,   78,   77,   79,   78,   86,  153,   79,   98,
       98,   86,   79,   82,   80,   79,   91,   80,   79,   81,
       80,   89,   82,   81,   82,   89,   83,   81,   79,   82,
       91,   89,   82,   81,   82,    0,   91,   83,    0,    0,
       83,  126,   82,   83,  154,   91,   83,    0,   81,  126,

       89,   82,   81,   82,   89,   83,   81,    0,   82,   91,
       89,   82,   81,   82,  147,   91,   83,   93,   92,   83,
      126,   93,   83,  154,   94,   83,   92,   93,  126,  156,
       92,  134,  134,   92,   94,  147,   96,  158,   96,   94,
       94,   96, 1186,  147, 1186,    0,   93,   92,    0,    0,
       93,    0,    0,   94,    0,   92,   93,  159,  156,   92,
      134,  134,   92,   94,  147,   96,  158,   96,   94,   94,
       96,   99,   99,   99,   99,  100,    0,  100,  100,  100,
      100,  100,  160,  115,   99,  115,  159,    0,  117,  123,
      115,  100,  116,  115,  123,  162,  116,  163,  164,  123,

      116,    0,  117,  116,    0,  117,  116,    0,  117,    0,
        0,  160,  115,   99,  115,    0,  116,  117,  123,  115,
      100,  116,  115,  123,  162,  116,  163,  164,  123,  116,
      119,  117,  116,  127,  117,  116,  118,  117,  125,  119,
      118,  119,  125,  120,  118,  116,  119,  127,  125,  119,
      118,  119,  165,  127,  120,    0,    0,  120,  166,  119,
      120,    0,  127,  120,    0,  118,    0,  125,  119,  118,
      119,  125,  120,  118,    0,  119,  127,  125,  119,  118,
      119,  165,  127,  120,  129,  128,  120,  166,  129,  120,
      157,  130,  120,  128,  129,  131,  131,  128,  157,  167,

      128,  130,  168,  161,  170,  131,  130,  130,    0,  161,
      132,  171,  132,  129,  128,  132,  161,  129,  172,  157,
      130,  173,  128,  129,  131,  131,  128,  157,  167,  128,
      130,  168,  161,  170,  131,  130,  130,  169,  161,  132,
      171,  132,  174,  169,  132,  161,  175,  172,  176,  177,
      173,  178,  180,  181,  183,  184,  178,  178,  182,  184,
      182,  185,  186,  187,  188,  189,  169,  190,  191,  192,
      194,  174,  169,  195,  193,  175,  193,  176,  177,    0,
      178,  180,  181,  183,  184,  178,  178,  182,  184,  182,
      185,  186,  187,  188,  189,  197,  190,  191,  192,  194,

      196,  198,  195,  193,  199,  193,  200,  201,  196,  202,
      203,  204,  203,  205,  206,  207,  208,  216,    0,  218,
      206,  213,    0,  213,  197,  213,  213,  213,  213,  196,
      198,    0,    0,  199,    0,  200,  201,  196,  202,  203,
      204,  203,  205,  206,  207,  208,  216,  217,  218,  206,
      210,  210,  210,  210,  211,  211,  211,  211,  212,  212,
      212,  212,  212,  210,  219,  220,  221,  211,  217,  222,
      223,  224,  212,  226,  227,  228,  217,  229,  230,    0,
      232,  233,  227,  234,  235,    0,  236,  237,  238,    0,
      240,  241,  210,  219,  220,  221,  211,  217,  222,  223,

      224,  212,  226,  227,  228,  242,  229,  230,  231,  232,
      233,  227,  234,  235,  231,  236,  237,  238,  239,  240,
      241,  231,  243,  244,  239,  245,  246,  247,  250,  251,
      248,  252,  253,  252,  242,  248,  248,  231,  254,  255,
      256,  257,  254,  231,  258,  259,  260,  239,  261,  262,
      231,  243,  244,  239,  245,  246,  247,  250,  251,  248,
      252,  253,  252,  264,  248,  248,  265,  254,  255,  256,
      257,  254,  266,  258,  259,  260,  267,  261,  262,  263,
      266,  263,  268,  269,  270,  271,  272,  273,  274,  273,
      275,  276,  264,  277,  278,  265,  287,  276,    0,    0,

        0,  266,    0,  289,    0,  267,    0,    0,  263,  266,
      263,  268,  269,  270,  271,  272,  273,  274,  273,  275,
      276,  290,  277,  278,    0,  287,  276,  280,  280,  280,
      280,  281,  289,  281,    0,  281,  281,  281,  281,  288,
      280,  282,  282,  282,  282,  283,  283,  283,  283,  284,
      290,  284,  284,  284,  284,  284,  291,  285,  283,  285,
      288,  285,  285,  285,  285,  284,  292,  293,  288,  280,
      294,  295,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  298,  306,  302,  307,  291,  308,  283,  309,  288,
      302,  310,  311,  312,  284,  292,  293,  310,  313,  294,

      295,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      298,  306,  302,  307,  314,  308,  315,  309,  316,  302,
      310,  311,  312,  317,  318,  319,  310,  313,  321,  322,
      319,  319,  323,  324,  323,  325,  326,  327,  328,  325,
      329,  330,  331,  314,  332,  315,  333,  316,  334,  335,
      334,  336,  317,  318,  319,  338,  339,  321,  322,  319,
      319,  323,  324,  323,  325,  326,  327,  328,  325,  329,
      330,  331,  340,  332,  337,  333,  341,  334,  335,  334,
      336,  342,  337,  343,  338,  339,  344,  345,  344,  346,
      347,  348,  349,  351,  367,  351,  347,  351,  351,  351,

      351,  340,    0,  337,    0,  341,  353,  353,  353,  353,
      342,  337,  343,    0,    0,  344,  345,  344,  346,  347,
      348,  349,    0,  367,    0,  347,  350,  350,  350,  350,
      352,  352,  352,  352,  356,  356,  356,  356,  369,  350,
      368,    0,  354,  352,  354,  354,  354,  354,  354,  355,
      357,  355,  370,  355,  355,  355,  355,  371,  354,    0,
      372,  368,  373,  357,  357,  357,  357,  369,  350,  368,
      361,  361,  352,  361,  374,  375,  377,  361,  379,  380,
      381,  370,  383,  384,    0,  378,  371,  354,  361,  372,
      368,  373,  361,  378,  385,  386,  387,  388,  389,  391,

      382,  392,  393,  374,  375,  377,  382,  379,  380,  381,
      390,  383,  384,  382,  378,  394,  390,  395,  396,  361,
      397,  398,  378,  385,  386,  387,  388,  389,  391,  382,
      392,  393,  399,  401,  402,  382,  404,  399,  399,  390,
      406,  403,  382,  403,  394,  390,  395,  396,  405,  397,
      398,  407,  405,  408,  409,  410,  411,  412,  413,  415,
      416,  399,  401,  402,  418,  404,  399,  399,  417,  406,
      403,  414,  403,  414,  419,  420,  417,  405,  421,  422,
      407,  405,  408,  409,  410,  411,  412,  413,  415,  416,
      423,  425,  424,  418,  424,  426,  428,  417,  429,  438,

      414,  439,  414,  419,  420,  417,  427,  421,  422,  440,
      441,  442,  427,  444,  443,  445,  446,  447,  448,  423,
      425,  424,  449,  424,  426,  428,  450,  429,  438,  443,
      439,  451,  452,  453,  454,  427,  455,  457,  440,  441,
      442,  427,  444,  443,  445,  446,  447,  448,  458,  459,
      460,  449,  461,  462,  463,  450,  464,  465,  443,  466,
      451,  452,  453,  454,  467,  455,  457,  469,  470,  472,
      471,  473,  474,  475,  476,  477,  480,  458,  459,  460,
      471,  461,  462,  463,  482,  464,  465,  483,  466,  484,
      471,  485,  486,  467,  487,  488,  469,  470,  472,  489,

      473,  474,  475,  476,  477,  480,  490,  491,  493,  471,
      494,  496,  497,  482,  498,  499,  483,  499,  484,  471,
      485,  486,  500,  487,  488,  501,  502,  503,  489,  504,
      505,  506,  518,    0,  505,  490,  491,  493,    0,  494,
      496,  497,    0,  498,  499,    0,  499,  510,  510,  510,
      510,  500,    0,  519,  501,  502,  503,    0,  504,  505,
      506,  518,  507,  505,  507,  520,  507,  507,  507,  507,
      508,  508,  508,  508,  509,  521,  509,  522,  509,  509,
      509,  509,  519,  508,  511,  511,  511,  511,  523,  524,
      525,  526,  527,  528,  520,  529,  530,  531,  532,  533,

      534,  535,  537,  523,  521,  538,  522,  539,  540,  541,
      542,  543,  508,  544,  545,  546,  547,  523,  524,  525,
      526,  527,  528,  549,  529,  530,  531,  532,  533,  534,
      535,  537,  523,  550,  538,  552,  539,  540,  541,  542,
      543,  551,  544,  545,  546,  547,  553,  554,  555,  556,
      557,  551,  549,  560,  562,  563,  564,  565,  566,  567,
      568,  551,  550,  569,  552,  570,  571,  573,  574,  576,
      577,  578,  579,  580,  579,  553,  554,  555,  556,  557,
      551,  581,  560,  562,  563,  564,  565,  566,  567,  568,
      551,  582,  569,  583,  570,  571,  573,  574,  576,  577,

      578,  579,  580,  579,  584,  585,  586,  600,    0,  585,
      581,  587,  587,  587,  587,  588,  588,  588,  588,    0,
      582,    0,  583,  589,  589,  589,  589,  590,  590,  590,
      590,  601,    0,  584,  585,  586,  600,  591,  585,  591,
      590,  591,  591,  591,  591,  592,  602,  592,  592,  592,
      592,  592,  593,  593,  593,  593,  594,  594,  594,  594,
      601,  592,  603,  604,  605,  606,  607,  608,  609,  590,
      610,  611,  612,  613,  614,  602,  615,  616,  617,  605,
      619,  620,  621,  622,  623,  624,  625,  626,  627,  628,
      592,  603,  604,  605,  606,  607,  608,  609,  629,  610,

      611,  612,  613,  614,  631,  615,  616,  617,  605,  619,
      620,  621,  622,  623,  624,  625,  626,  627,  628,  632,
      633,  634,  635,  636,  637,  638,  639,  629,  642,  644,
      633,  645,  646,  631,  647,  648,  649,  650,  651,  652,
      633,  653,  655,  656,  658,  659,  660,  661,  632,  661,
      634,  635,  636,  637,  638,  639,  662,  642,  644,  633,
      645,  646,  663,  647,  648,  649,  650,  651,  652,  633,
      653,  655,  656,  658,  659,  660,  661,  664,  661,  665,
      666,  668,  667,    0,  687,  662,  667,  669,  669,  669,
      669,  663,  670,  670,  670,  670,    0,    0,  688,  671,

      671,  671,  671,    0,    0,    0,  664,    0,  665,  666,
      668,  667,  671,  687,  672,  667,  672,    0,  672,  672,
      672,  672,  673,  673,  673,  673,  674,  688,  674,  674,
      674,  674,  674,  675,  675,  675,  675,  676,  676,  676,
      676,  671,  674,  677,  678,  678,  678,  678,  679,  689,
      690,  691,  692,  693,    0,  694,  677,  677,  677,  677,
      695,  679,  679,  679,  679,  680,  680,  692,  680,  696,
      697,  674,  680,  698,  699,  700,  701,  702,  689,  690,
      691,  692,  693,  680,  694,    0,  703,  680,  704,  695,
      706,  707,  708,  709,  710,  711,  692,  712,  696,  697,

      713,  714,  698,  699,  700,  701,  702,  715,  716,  718,
      719,  721,  722,  723,  680,  703,    0,  704,  724,  706,
      707,  708,  709,  710,  711,  720,  712,  725,  726,  713,
      714,  729,  731,  732,  733,  720,  715,  716,  718,  719,
      721,  722,  723,  734,  735,  720,  736,  724,  737,  738,
      739,  740,  742,  743,  745,  746,  725,  726,  747,  749,
      729,  731,  732,  733,  720,  748,  750,  748,  751,  752,
      753,  755,  734,  735,  720,  736,  756,  737,  738,  739,
      740,  742,  743,  745,  746,  754,  757,  747,  749,  754,
      758,  760,  763,  764,  748,  750,  748,  751,  752,  753,

      755,  765,  766,  768,  769,  756,  771,  772,  773,  775,
      776,  777,  778,  779,  754,  757,  780,  781,  754,  758,
      760,  763,  764,  784,  785,  786,  787,  794,  796,    0,
      765,  766,  768,  769,  797,  771,  772,  773,  775,  776,
      777,  778,  779,  799,  801,  780,  781,  789,  802,  804,
      805,  806,  784,  785,  786,  787,  794,  796,  789,  807,
      809,  811,  813,  797,  814,  815,  816,  817,  818,  819,
      821,    0,  799,  801,    0,    0,  789,  802,  804,  805,
      806,  823,  823,  823,  823,  827,  828,  789,  807,  809,
      811,  813,  829,  814,  815,  816,  817,  818,  819,  821,

      824,  824,  824,  824,  825,  825,  825,  825,  826,  826,
      826,  826,  831,  834,  827,  828,  835,  836,  837,  839,
      840,  829,  842,  843,  844,  846,  847,  848,  849,  850,
      851,  852,  855,  856,  857,  858,  865,  867,  868,  860,
      870,  831,  834,  872,  873,  835,  836,  837,  839,  840,
      860,  842,  843,  844,  846,  847,  848,  849,  850,  851,
      852,  855,  856,  857,  858,  865,  867,  868,  860,  870,
      875,  876,  872,  873,  877,  878,  880,  882,  884,  860,
      885,  886,  887,  888,  889,  890,  892,  894,  894,  894,
      894,  895,  895,  895,  895,  896,  896,  896,  896,  875,

      876,  900,  901,  877,  878,  880,  882,  884,  902,  885,
      886,  887,  888,  889,  890,  892,  897,  897,  897,  897,
      898,  898,  898,  898,  898,  899,  899,  899,  899,  904,
      900,  901,  907,  908,  898,  909,  910,  902,  912,  913,
      915,  916,  917,  919,  920,  921,  922,  923,  924,  925,
      928,  929,  930,  931,  938,  933,  940,  941,  904,  943,
      945,  907,  908,  898,  909,  910,  933,  912,  913,  915,
      916,  917,  919,  920,  921,  922,  923,  924,  925,  928,
      929,  930,  931,  938,  933,  940,  941,  946,  943,  945,
      948,  949,  950,  951,  953,  933,  955,  957,  958,  959,

      960,  961,  962,  963,  965,  967,  967,  967,  967,  968,
      968,  968,  968,    0,  975,  976,  946,    0,    0,  948,
      949,  950,  951,  953,    0,  955,  957,  958,  959,  960,
      961,  962,  963,  965,  969,  969,  969,  969,  970,  970,
      970,  970,  971,  975,  976,  971,  971,  971,  971,  972,
      972,  972,  972,  973,  973,  973,  973,  974,  971,  977,
      979,  982,  983,  984,  985,  987,  988,  990,  991,  992,
      974,  974,  974,  974,  994,  995,  996,  997,  998,  999,
     1000, 1003, 1004, 1005, 1006,    0, 1013,  971,  977,  979,
      982,  983,  984,  985,  987,  988,  990,  991,  992, 1015,

     1016, 1018, 1020,  994,  995,  996,  997,  998,  999, 1000,
     1003, 1004, 1005, 1006, 1008, 1013, 1021, 1023, 1024, 1025,
     1026, 1028, 1030, 1032, 1033, 1008, 1034, 1035, 1015, 1016,
     1018, 1020, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045,
     1046, 1049, 1050, 1008, 1051, 1021, 1023, 1024, 1025, 1026,
     1028, 1030, 1032, 1033, 1008, 1034, 1035, 1052, 1053, 1054,
     1055, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046,
     1049, 1050, 1057, 1051, 1058, 1061, 1063, 1065, 1067, 1068,
     1071, 1072, 1075, 1077, 1078, 1079, 1052, 1053, 1054, 1055,
     1080, 1082, 1083, 1084, 1086, 1087, 1089, 1090, 1091, 1092,

     1093, 1057, 1096, 1058, 1061, 1063, 1065, 1067, 1068, 1071,
     1072, 1075, 1077, 1078, 1079, 1097, 1098, 1099, 1100, 1080,
     1082, 1083, 1084, 1086, 1087, 1089, 1090, 1091, 1092, 1093,
     1101, 1096, 1102, 1104, 1105, 1108, 1110, 1112, 1114, 1115,
     1118, 1119, 1122, 1124, 1097, 1098, 1099, 1100, 1125, 1126,
     1127, 1129, 1130, 1131, 1133, 1134, 1138, 1139, 1140, 1101,
     1141, 1102, 1104, 1105, 1108, 1110, 1112, 1114, 1115, 1118,
     1119, 1122, 1124, 1137, 1137, 1137, 1137, 1125, 1126, 1127,
     1129, 1130, 1131, 1133, 1134, 1138, 1139, 1140, 1142, 1141,
     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1157,

     1159, 1161, 1163, 1164, 1167, 1168, 1171, 1173, 1174, 1175,
     1176, 1178, 1179, 1180, 1182, 1183,    0, 1142,    0, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1157, 1159,
     1161, 1163, 1164, 1167, 1168, 1171, 1173, 1174, 1175, 1176,
     1178, 1179, 1180, 1182, 1183, 1185, 1185, 1185, 1185, 1187,
     1187, 1187, 1187, 1188, 1188, 1188, 1188, 1189, 1190, 1191,
     1192, 1193, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204,
     1205, 1208, 1210, 1212, 1214, 1215, 1218, 1219, 1222, 1224,
     1225, 1226, 1227, 1229, 1230, 1231, 1189, 1190, 1191, 1192,
     1193, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205,

     1208, 1210, 1212, 1214, 1215, 1218, 1219, 1222, 1224, 1225,
     1226, 1227, 1229, 1230, 1231, 1233, 1234, 1236, 1237, 1239,
     1241, 1242, 1244, 1246, 1250, 1253, 1254, 1255, 1257, 1258,
     1261, 1263, 1266, 1267, 1268, 1270, 1272, 1273, 1275, 1277,
     1281, 1284, 1285, 1286, 1233, 1234, 1236, 1237, 1239, 1241,
     1242, 1244, 1246, 1250, 1253, 1254, 1255, 1257, 1258, 1261,
     1263, 1266, 1267, 1268, 1270, 1272, 1273, 1275, 1277, 1281,
     1284, 1285, 1286, 1288, 1289, 1292, 1294, 1297, 1298, 1298,
     1298, 1298, 1299, 1300, 1302, 1304, 1305, 1307, 1309, 1313,
     1316, 1317, 1318, 1320, 1321, 1324, 1326, 1329, 1330, 1330,

     1330, 1330, 1288, 1289, 1292, 1294, 1297, 1331, 1331, 1331,
     1331, 1299, 1300, 1302, 1304, 1305, 1307, 1309, 1313, 1316,
     1317, 1318, 1320, 1321, 1324, 1326, 1329, 1332, 1332, 1332,
     1332, 1333, 1334, 1336, 1338, 1339, 1341, 1343, 1347, 1350,
     1351, 1352, 1354, 1355, 1358, 1360, 1363, 1364, 1369, 1370,
     1373, 1375, 1376, 1377, 1380, 1385, 1386, 1389, 1391, 1392,
     1333, 1334, 1336, 1338, 1339, 1341, 1343, 1347, 1350, 1351,
     1352, 1354, 1355, 1358, 1360, 1363, 1364, 1369, 1370, 1373,
     1375, 1376, 1377, 1380, 1385, 1386, 1389, 1391, 1392, 1393,
     1396, 1396, 1396, 1396, 1397, 1402, 1403, 1406, 1408, 1409,

     1410, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1415,
     1420, 1421, 1424, 1426, 1427, 1428, 1432, 1434, 1393, 1435,
     1436, 1438, 1442, 1397, 1402, 1403, 1406, 1408, 1409, 1410,
     1443, 1440, 1432, 1444, 1446, 1450, 1448, 1451, 1415, 1420,
     1421, 1424, 1426, 1427, 1428, 1432, 1434, 1440, 1435, 1436,
     1438, 1442, 1448, 1452, 1454, 1456, 1458, 1459, 1460, 1443,
     1440, 1432, 1444, 1446, 1450, 1448, 1451, 1462, 1463, 1464,
     1465, 1456, 1469, 1470, 1471, 1475, 1440, 1476, 1477, 1481,
     1482, 1448, 1452, 1454, 1456, 1458, 1459, 1460, 1483, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1462, 1463, 1464, 1465,

     1456, 1469, 1470, 1471, 1475, 1494, 1476, 1477, 1481, 1482,
     1495, 1496, 1497, 1498, 1499, 1500, 1501, 1483, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1502, 1503, 1504, 1505, 1506,
     1507, 1508, 1509, 1510, 1494, 1512, 1515, 1518, 1521, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1531, 1512, 1515, 1518, 1521, 1532, 1533,
     1534, 1535, 1536, 1537, 1538, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1531,    0,    0,    0,    0, 1532, 1533, 1534,

     1535, 1536, 1537, 1538, 1544,    0, 1544, 1544, 1545,    0,
     1545,    0, 1545, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
        0, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1548,    0,
        0, 1548, 1548, 1548,    0, 1548, 1548, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1552,    0, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1544 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1543 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 108:
case 109:
case 110:
case 111:
case 112:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 117:
case 118:
case 119:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 120:
case 121:
case 122:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 123:
case 124:
case 125:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 126:
case 127:
case 128:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 135:
/* rule 135 can match eol */
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 141:
YY_RULE_SETUP
{}
	YY_BREAK
case 142:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 143:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 144:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1544 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1544 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1543);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(pNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(_rNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

