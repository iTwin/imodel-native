#line 3 "d:\\dev\\dgndb\\bim20dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "d:\\dev\\dgndb\\bim20dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 253
#define YY_END_OF_BUFFER 254
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3557] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      248,  248,  254,  252,  250,  249,  252,  214,  241,  214,
      206,  208,  207,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  214,  239,  214,
      216,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  242,  240,  243,  214,
      214,  223,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  214,  223,  252,
      248,  248,  248,  248,  246,  214,  214,  214,  214,  206,
      208,  207,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  247,  214,  250,  212,
        0,  209,  211,  210,    0,    0,    0,    0,    7,    9,
        0,    0,    0,    0,    0,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,  100,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  126,    0,    0,    0,    0,  136,    0,  139,    0,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  182,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  213,  217,    0,  218,  216,    0,
      215,  215,  215,  215,  215,    7,    9,  215,  215,  215,
      215,  215,  215,  215,   21,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,   91,  100,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  126,  215,
      215,  215,  215,  136,  215,  139,  215,  142,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  182,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  238,  228,  238,  238,  238,  223,  238,  222,  222,
      222,  222,  222,    7,    9,  222,  222,  222,  222,  222,
      222,  222,   21,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   91,  100,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  126,  222,  222,  222,
      222,  136,  222,  139,  222,  142,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  182,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  234,
      238,  238,  238,  223,  238,    0,  244,  248,  248,  212,
      248,  209,  211,  210,  248,  248,  248,  248,    7,    9,
      248,  248,  248,  248,  248,  248,  248,   21,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,   91,  100,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  126,  248,  248,  248,  248,  136,  248,  139,  248,
      142,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  182,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  213,    0,  251,    0,    2,    0,
        4,    5,    0,    8,    0,    0,   12,    0,    0,    0,

        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   50,   55,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   80,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
        0,  102,  103,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  114,  116,    0,    0,    0,    0,  124,
        0,  127,  128,    0,    0,    0,    0,    0,    0,    0,
      138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      161,    0,    0,    0,  168,    0,    0,    0,    0,    0,
      173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  221,  218,    0,    0,  219,  215,    2,
      215,    4,    5,  215,    8,  215,  215,   12,  215,  215,
      215,  215,  215,   18,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,   50,   55,
      215,  215,  215,  215,  215,  215,  215,  215,  215,   67,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
       80,  215,  215,  215,  215,  215,  215,  215,  215,  215,

       95,  215,  102,  103,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  114,  116,  215,  215,  215,  215,
      124,  215,  127,  128,  215,  215,  215,  215,  215,  215,
      215,  138,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  161,  215,  215,  215,  168,  215,  215,  215,  215,
      215,  173,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,    0,  231,  238,  226,  238,  223,    0,
      229,  222,    2,  222,    4,    5,  222,    8,  222,  222,

       12,  222,  222,  222,  222,  222,   18,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,   50,   55,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   67,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,   80,  222,  222,  222,  222,  222,  222,
      222,  222,  222,   95,  222,  102,  103,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  114,  116,  222,
      222,  222,  222,  124,  222,  127,  128,  222,  222,  222,
      222,  222,  222,  222,  138,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  161,  222,  222,  222,  168,  222,
      222,  222,  222,  222,  173,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,    0,  237,  232,  238,
      238,  223,    0,  235,  244,    0,  244,  248,  248,  248,
        2,  248,    4,    5,  248,    8,  248,  248,   12,  248,
      248,  248,  248,  248,   18,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,   50,
       55,  248,  248,  248,  248,  248,  248,  248,  248,  248,
       67,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,   80,  248,  248,  248,  248,  248,  248,  248,  248,
      248,   95,  248,  102,  103,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  114,  116,  248,  248,  248,
      248,  124,  248,  127,  128,  248,  248,  248,  248,  248,
      248,  248,  138,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  161,  248,  248,  248,  168,  248,  248,  248,
      248,  248,  173,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   20,    0,   22,   23,   24,
        0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,    0,    0,   60,
        0,    0,   63,   64,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,   86,    0,    0,   89,    0,    0,    0,    0,    0,
        0,   99,  101,    0,  105,  107,  108,  109,    0,    0,
      112,    0,    0,    0,    0,    0,    0,    0,    0,  125,
        0,    0,  131,    0,    0,    0,    0,  140,    0,    0,
        0,    0,  146,    0,    0,    0,    0,    0,    0,    0,

        0,  156,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,  170,    0,    0,    0,    0,  176,  177,    0,
        0,    0,  185,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  199,  200,    0,  202,  204,
      205,    0,  220,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,   20,  215,   22,   23,   24,  215,
       28,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,   46,  215,  215,  215,  215,  215,  215,   60,  215,
      215,   63,   64,  215,   66,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,   85,

       86,  215,  215,   89,  215,  215,  215,  215,  215,  215,
       99,  101,  215,  105,  107,  108,  109,  215,  215,  112,
      215,  215,  215,  215,  215,  215,  215,  215,  125,  215,
      215,  131,  215,  215,  215,  215,  140,  215,  215,  215,
      215,  146,  215,  215,  215,  215,  215,  215,  215,  215,
      156,  215,  215,  215,  215,  162,  215,  215,  215,  215,
      215,  170,  215,  215,  215,  215,  176,  177,  215,  215,
      215,  185,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  198,  199,  200,  215,  202,  204,  205,
      231,  238,    0,  230,  223,  229,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,   20,  222,   22,
       23,   24,  222,   28,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,   46,  222,  222,  222,  222,  222,
      222,   60,  222,  222,   63,   64,  222,   66,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   85,   86,  222,  222,   89,  222,  222,  222,
      222,  222,  222,   99,  101,  222,  105,  107,  108,  109,
      222,  222,  112,  222,  222,  222,  222,  222,  222,  222,
      222,  125,  222,  222,  131,  222,  222,  222,  222,  140,
      222,  222,  222,  222,  146,  222,  222,  222,  222,  222,

      222,  222,  222,  156,  222,  222,  222,  222,  162,  222,
      222,  222,  222,  222,  170,  222,  222,  222,  222,  176,
      177,  222,  222,  222,  185,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  198,  199,  200,  222,
      202,  204,  205,  237,    0,  236,  238,  223,  235,    0,
      244,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,   20,  248,   22,   23,   24,  248,   28,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,   46,
      248,  248,  248,  248,  248,  248,   60,  248,  248,   63,
       64,  248,   66,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,   85,   86,  248,
      248,   89,  248,  248,  248,  248,  248,  248,   99,  101,
      248,  105,  107,  108,  109,  248,  248,  112,  248,  248,
      248,  248,  248,  248,  248,  248,  125,  248,  248,  131,
      248,  248,  248,  248,  140,  248,  248,  248,  248,  146,
      248,  248,  248,  248,  248,  248,  248,  248,  156,  248,
      248,  248,  248,  162,  248,  248,  248,  248,  248,  170,
      248,  248,  248,  248,  176,  177,  248,  248,  248,  185,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  198,  199,  200,  248,  202,  204,  205,    1,    3,

        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,   27,    0,    0,    0,    0,   33,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,
        0,   74,   75,   76,   78,    0,    0,    0,   84,   87,
        0,    0,   92,    0,    0,   96,    0,    0,  104,    0,
      110,  111,  113,  115,    0,  118,    0,    0,  122,  123,
        0,  130,  132,    0,    0,    0,    0,    0,  143,    0,
      145,    0,    0,    0,    0,    0,    0,    0,    0,  155,
        0,    0,  164,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  175,    0,    0,    0,    0,    0,  187,    0,
        0,    0,  191,  192,  196,    0,    0,    0,  201,    0,
        1,    3,  215,  215,  215,  215,  215,   14,  215,  215,
      215,  215,  215,  215,   27,  215,  215,  215,  215,   33,
      215,   35,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,   68,  215,
      215,  215,  215,   74,   75,   76,   78,  215,  215,  215,
       84,   87,  215,  215,   92,  215,  215,   96,  215,  215,
      104,  215,  110,  111,  113,  115,  215,  118,  215,  215,
      122,  123,  215,  130,  132,  215,  215,  215,  215,  215,

      143,  215,  145,  215,  215,  215,  215,  215,  215,  215,
      215,  155,  215,  215,  164,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  175,  215,  215,  215,  215,  215,
      187,  215,  215,  215,  191,  192,  196,  215,  215,  215,
      201,  215,  224,  230,    1,    3,  222,  222,  222,  222,
      222,   14,  222,  222,  222,  222,  222,  222,   27,  222,
      222,  222,  222,   33,  222,   35,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   68,  222,  222,  222,  222,   74,   75,   76,
       78,  222,  222,  222,   84,   87,  222,  222,   92,  222,

      222,   96,  222,  222,  104,  222,  110,  111,  113,  115,
      222,  118,  222,  222,  122,  123,  222,  130,  132,  222,
      222,  222,  222,  222,  143,  222,  145,  222,  222,  222,
      222,  222,  222,  222,  222,  155,  222,  222,  164,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  175,  222,
      222,  222,  222,  222,  187,  222,  222,  222,  191,  192,
      196,  222,  222,  222,  201,  222,  236,  225,    0,  245,
        1,    3,  248,  248,  248,  248,  248,   14,  248,  248,
      248,  248,  248,  248,   27,  248,  248,  248,  248,   33,
      248,   35,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,   68,  248,
      248,  248,  248,   74,   75,   76,   78,  248,  248,  248,
       84,   87,  248,  248,   92,  248,  248,   96,  248,  248,
      104,  248,  110,  111,  113,  115,  248,  118,  248,  248,
      122,  123,  248,  130,  132,  248,  248,  248,  248,  248,
      143,  248,  145,  248,  248,  248,  248,  248,  248,  248,
      248,  155,  248,  248,  164,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  175,  248,  248,  248,  248,  248,
      187,  248,  248,  248,  191,  192,  196,  248,  248,  248,
      201,  248,    0,   10,    0,    0,   13,    0,   17,    0,

        0,    0,    0,    0,   30,    0,    0,   34,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   59,    0,   62,    0,   69,   70,    0,   72,    0,
        0,    0,    0,    0,   88,   90,   93,    0,    0,    0,
        0,    0,  117,    0,    0,    0,    0,    0,  134,    0,
      137,  141,  144,    0,    0,    0,    0,    0,    0,  153,
        0,    0,    0,    0,    0,  165,  166,  167,    0,    0,
      174,    0,    0,    0,    0,    0,    0,  188,    0,  190,
      197,    0,    0,    0,  203,  215,   10,  215,  215,   13,
      215,   17,  215,  215,  215,  215,  215,   30,  215,  215,

       34,  215,  215,   45,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,   59,  215,   62,  215,   69,   70,
      215,   72,  215,  215,  215,  215,  215,   88,   90,   93,
      215,  215,  215,  215,  215,  117,  215,  215,  215,  215,
      215,  134,  215,  137,  141,  144,  215,  215,  215,  215,
      215,  215,  153,  215,  215,  215,  215,  215,  165,  166,
      167,  215,  215,  174,  215,  215,  215,  215,  215,  215,
      188,  215,  190,  197,  215,  215,  215,  203,  238,  222,
       10,  222,  222,   13,  222,   17,  222,  222,  222,  222,
      222,   30,  222,  222,   34,  222,  222,   45,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,   59,  222,
       62,  222,   69,   70,  222,   72,  222,  222,  222,  222,
      222,   88,   90,   93,  222,  222,  222,  222,  222,  117,
      222,  222,  222,  222,  222,  134,  222,  137,  141,  144,
      222,  222,  222,  222,  222,  222,  153,  222,  222,  222,
      222,  222,  165,  166,  167,  222,  222,  174,  222,  222,
      222,  222,  222,  222,  188,  222,  190,  197,  222,  222,
      222,  203,  238,  245,  245,  248,   10,  248,  248,   13,
      248,   17,  248,  248,  248,  248,  248,   30,  248,  248,
       34,  248,  248,   45,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,   59,  248,   62,  248,   69,   70,
      248,   72,  248,  248,  248,  248,  248,   88,   90,   93,
      248,  248,  248,  248,  248,  117,  248,  248,  248,  248,
      248,  134,  248,  137,  141,  144,  248,  248,  248,  248,
      248,  248,  153,  248,  248,  248,  248,  248,  165,  166,
      167,  248,  248,  174,  248,  248,  248,  248,  248,  248,
      188,  248,  190,  197,  248,  248,  248,  203,    0,    0,
        0,   15,    0,   16,    0,    0,   29,    0,   32,   43,
       36,    0,    0,    0,   51,    0,    0,    0,   56,   57,
       58,    0,    0,   71,   73,    0,    0,   81,   82,   94,

       95,    0,    0,    0,    0,    0,  121,    0,  133,    0,
        0,    0,    0,    0,  151,    0,  154,    0,  159,    0,
        0,    0,    0,    0,    0,    0,    0,  184,    0,  189,
        0,  194,  195,  215,  215,  215,   15,  215,   16,  215,
      215,   29,  215,   32,   43,   36,  215,  215,  215,   51,
      215,  215,  215,   56,   57,   58,  215,  215,   71,   73,
      215,  215,   81,   82,   94,   95,  215,  215,  215,  215,
      215,  121,  215,  133,  215,  215,  215,  215,  215,  151,
      215,  154,  215,  159,  215,  215,  215,  215,  215,  215,
      215,  215,  184,  215,  189,  215,  194,  195,  227,  222,

      222,  222,   15,  222,   16,  222,  222,   29,  222,   32,
       43,   36,  222,  222,  222,   51,  222,  222,  222,   56,
       57,   58,  222,  222,   71,   73,  222,  222,   81,   82,
       94,   95,  222,  222,  222,  222,  222,  121,  222,  133,
      222,  222,  222,  222,  222,  151,  222,  154,  222,  159,
      222,  222,  222,  222,  222,  222,  222,  222,  184,  222,
      189,  222,  194,  195,  233,  245,  248,  248,  248,   15,
      248,   16,  248,  248,   29,  248,   32,   43,   36,  248,
      248,  248,   51,  248,  248,  248,   56,   57,   58,  248,
      248,   71,   73,  248,  248,   81,   82,   94,   95,  248,

      248,  248,  248,  248,  121,  248,  133,  248,  248,  248,
      248,  248,  151,  248,  154,  248,  159,  248,  248,  248,
      248,  248,  248,  248,  248,  184,  248,  189,  248,  194,
      195,    0,    0,   83,    0,    0,    0,   31,    0,   47,
       48,    0,    0,    0,    0,   61,    0,    0,    0,    0,
       98,    0,    0,  120,    0,    0,    0,  148,    0,    0,
        0,    0,  160,    0,  169,    0,    0,    0,    0,    0,
        0,    0,  215,  215,   83,  215,  215,  215,   31,  215,
       47,   48,  215,  215,  215,  215,   61,  215,  215,  215,
      215,   98,  215,  215,  120,  215,  215,  215,  148,  215,

      215,  215,  215,  160,  215,  169,  215,  215,  215,  215,
      215,  215,  215,  222,  222,   83,  222,  222,  222,   31,
      222,   47,   48,  222,  222,  222,  222,   61,  222,  222,
      222,  222,   98,  222,  222,  120,  222,  222,  222,  148,
      222,  222,  222,  222,  160,  222,  169,  222,  222,  222,
      222,  222,  222,  222,  248,  248,   83,  248,  248,  248,
       31,  248,   47,   48,  248,  248,  248,  248,   61,  248,
      248,  248,  248,   98,  248,  248,  120,  248,  248,  248,
      148,  248,  248,  248,  248,  160,  248,  169,  248,  248,
      248,  248,  248,  248,  248,    6,    0,    0,   25,    0,

        0,    0,    0,    0,    0,    0,   49,    0,   53,   54,
        0,    0,   79,   97,    0,  119,  129,    0,  147,  149,
      150,  152,    0,    0,    0,  171,  172,  178,  181,  183,
      186,  193,    6,  215,  215,   25,  215,  215,  215,  215,
      215,  215,  215,   49,  215,   53,   54,  215,  215,   79,
       97,  215,  119,  129,  215,  147,  149,  150,  152,  215,
      215,  215,  171,  172,  178,  181,  183,  186,  193,    6,
      222,  222,   25,  222,  222,  222,  222,  222,  222,  222,
       49,  222,   53,   54,  222,  222,   79,   97,  222,  119,
      129,  222,  147,  149,  150,  152,  222,  222,  222,  171,

      172,  178,  181,  183,  186,  193,    6,  248,  248,   25,
      248,  248,  248,  248,  248,  248,  248,   49,  248,   53,
       54,  248,  248,   79,   97,  248,  119,  129,  248,  147,
      149,  150,  152,  248,  248,  248,  171,  172,  178,  181,
      183,  186,  193,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,  106,    0,  157,    0,
      163,    0,    0,  215,   19,  215,  215,  215,  215,  215,
      215,  215,  215,   52,  215,  215,  106,  215,  157,  215,
      163,  215,  215,  222,   19,  222,  222,  222,  222,  222,
      222,  222,  222,   52,  222,  222,  106,  222,  157,  222,

      163,  222,  222,  248,   19,  248,  248,  248,  248,  248,
      248,  248,  248,   52,  248,  248,  106,  248,  157,  248,
      163,  248,  248,    0,   26,    0,    0,    0,    0,    0,
        0,    0,    0,   77,    0,  158,    0,    0,  215,   26,
      215,  215,  215,  215,  215,  215,  215,  215,   77,  215,
      158,  215,  215,  222,   26,  222,  222,  222,  222,  222,
      222,  222,  222,   77,  222,  158,  222,  222,  248,   26,
      248,  248,  248,  248,  248,  248,  248,  248,   77,  248,
      158,  248,  248,    0,    0,   37,    0,   40,   41,    0,
        0,   65,  135,  179,    0,  215,  215,   37,  215,   40,

       41,  215,  215,   65,  135,  179,  215,  222,  222,   37,
      222,   40,   41,  222,  222,   65,  135,  179,  222,  248,
      248,   37,  248,   40,   41,  248,  248,   65,  135,  179,
      248,   11,    0,    0,    0,    0,  180,   11,  215,  215,
      215,  215,  180,   11,  222,  222,  222,  222,  180,   11,
      248,  248,  248,  248,  180,    0,    0,   42,    0,  215,
      215,   42,  215,  222,  222,   42,  222,  248,  248,   42,
      248,   38,    0,    0,   38,  215,  215,   38,  222,  222,
       38,  248,  248,    0,    0,  215,  215,  222,  222,  248,
      248,    0,   44,  215,   44,  222,   44,  248,   44,    0,

      215,  222,  248,    0,  215,  222,  248,    0,  215,  222,
      248,    0,  215,  222,  248,    0,  215,  222,  248,    0,
      215,  222,  248,    0,  215,  222,  248,    0,  215,  222,
      248,    0,  215,  222,  248,    0,  215,  222,  248,    0,
      215,  222,  248,    0,  215,  222,  248,    0,  215,  222,
      248,   39,   39,   39,   39,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   17,   17,
       17,   18,   17,   19,   17,   17,   17,   20,   11,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,    1,    1,    1,   52,   53,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   11,   80,   11,    9,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    3,
        1,    1,    1,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    6,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        8
    } ;

static yyconst flex_int16_t yy_base[3565] =
    {   0,
        0,    0,   81,    0,  162,    0,  230,  236,  242,  248,
      267,    0, 1004, 7494,  347, 7494,  970, 7494, 7494,  950,
      330, 7494,  923,  324,  351,  376,  378,  426,  479,  308,
      334,  396,  317,  328,  432,  427,  484,  533,  477,  318,
      481,  537,  584,  527,  381,  586,  335,  864, 7494,  459,
      611,  640,  638,  685,  693,  740,  793,  323,  529,  593,
      336,  352,  704,  695,  746,  842,  735,  380,  798,  846,
      893,  621,  472,  895,    0,  397, 7494, 7494, 7494,    0,
      639,  922,  951,  949,  996,  904, 1046, 1099,  396,  612,
      790,  419,  441, 1004,  762, 1052, 1148, 1062,  451, 1123,

     1181, 1199,  741,  587,  944,    0,  478,  950, 1030,  405,
        0,  370,    0,  920, 7494,    0,    0,  891, 7494,  355,
        0,  878, 1241, 1239, 1286, 1294, 1341, 1394,  485,  684,
     1055,  493,  526, 1143,  809, 1347, 1443, 1092,  517, 1305,
     1447, 1392,  836,  588, 1201,  543, 7494,  819,  429, 7494,
      886, 7494, 7494, 7494,  541,  887,  691,  591,  616,  634,
      631,  648,  698,  940,  996,  702,  729, 7494,  739,  961,
      786, 1191,  962,  794,  987, 1299,  798,  836,  853,  866,
      887,  996, 1017, 1024, 1025, 1247, 1020, 1032, 1048, 1075,
     1333, 1090, 1104, 1103, 1104, 1106, 1116, 1394, 7494, 1154,

     1157, 1339, 1251, 1348, 1484, 1378, 1176, 1206, 1222, 1439,
     1381, 1277, 1445, 1458, 1298, 1336, 1405, 1415, 1444, 1446,
     1468, 1465, 1457, 1498, 1486, 1486, 1503, 1507, 1509, 1497,
     1516, 1506, 1502, 1507, 1545, 1519, 1508, 1544, 1550, 1522,
     1521, 1553, 7494, 1558, 1559, 1556, 1547, 1557, 1566, 1568,
     1571, 1558, 1562, 1581, 7494, 1619, 1233, 1622, 1626, 1639,
        0, 1573, 1617, 1619, 1588, 1607, 1610, 1606, 1629, 1635,
     1639, 1627, 1625, 1627,    0, 1624, 1656, 1633, 1666, 1676,
     1645, 1664, 1692, 1645, 1647, 1668, 1682, 1675, 1677, 1695,
     1697, 1696, 1712, 1690, 1685, 1688, 1702, 1724, 1704, 1710,

     1711, 1715, 1717, 1725, 1733,    0, 1732, 1718, 1766, 1748,
     1746, 1766, 1738, 1749, 1750, 1755, 1782, 1772, 1777, 1797,
     1795, 1789, 1781, 1797, 1806, 1799, 1792, 1811, 1808, 1797,
     1815, 1803, 1803, 1833, 1825, 1830, 1819, 1846, 1836, 1841,
     1846, 1854, 1854, 1845, 1860, 1857, 1861, 1863, 1891,    0,
     1897, 1899, 1869, 1871, 1893, 1886, 1895, 1907, 1893, 1897,
     1915,    0, 1955, 1928,  466, 1958, 1964, 1973,    0, 1906,
     1953, 1957, 1925, 1943, 1955, 1951, 1967, 1973, 1971, 1965,
     1965, 1966,    0, 1964, 1983, 1971, 1983, 2013, 1969, 2002,
     2026, 1982, 1998, 2006, 2020, 2012, 2015, 2031, 2033, 2032,

     2050, 2027, 2020, 2024, 2028, 2063, 2029, 2037, 2039, 2040,
     2055, 2063, 2066,    0, 2070, 2062, 2082, 2089, 2081, 2108,
     2083, 2082, 2083, 2078, 2125, 2111, 2097, 2130, 2129, 2118,
     2123, 2138, 2141, 2135, 2128, 2146, 2144, 2133, 2149, 2137,
     2137, 2160, 2156, 2158, 2147, 2190, 2171, 2174, 2181, 2190,
     2191, 2182, 2198, 2198, 2199, 2198, 2200,    0, 2226, 2235,
     2232, 2203, 2231, 2218, 2228, 2245, 2231, 2235, 2253, 2264,
     2295, 2298,  826, 2307, 2315,  877, 2301,    0,  471,    0,
     2334,    0,    0,    0, 2287, 2299, 2313, 2297, 2315, 2306,
     2302, 2316, 2321, 2319, 2313, 2313, 2314,    0, 2312, 2344,

     2320, 2358, 2354, 2319, 2355, 2370, 2344, 2344, 2362, 2378,
     2364, 2365, 2381, 2383, 2382, 2387, 2379, 2373, 2377, 2382,
     2409, 2388, 2405, 2408, 2406, 2408, 2417, 2419,    0, 2425,
     2410, 2430, 2439, 2430, 2462, 2431, 2428, 2430, 2433, 2467,
     2463, 2468, 2481, 2480, 2444, 2461, 2489, 2492, 2485, 2478,
     2495, 2492, 2481, 2497, 2485, 2487, 2528, 2505, 2508, 2497,
     2533, 2505, 2530, 2536, 2544, 2544, 2533, 2547, 2547, 2548,
     2546, 2554,    0, 2582, 2588, 2553, 2546, 2583, 2553, 2587,
     2595, 2582, 2586, 2604,    0,  856, 7494, 2601, 7494, 2602,
     7494, 7494, 2607, 7494, 2596, 2602, 7494, 2600, 2598, 2605,

     2592, 2615,  801, 2615, 2606, 2636, 2604, 2620, 2623, 2636,
     2636, 2633, 2636, 2656, 2639, 2655, 2655, 2647, 2654, 2663,
     2660, 2664, 2648, 2667, 2655, 2664, 2658, 2671, 7494, 2679,
     2663, 2694, 2664, 2689, 2689, 2708, 2694, 2713, 2703, 2711,
     2703, 2705, 2707, 2699, 2712, 2704, 2708, 2719, 2721, 2759,
     2713, 7494, 7494, 2722, 2710, 2727, 2712, 2728, 2729, 2738,
     2750, 2760, 2763, 7494, 2748, 2751, 2763, 2772, 2760, 7494,
     2756, 7494, 7494,  797, 2765, 2766, 2774, 2775, 2776, 2763,
     7494, 2758, 2776, 2782, 2783, 2784, 2772, 2771, 2783, 2793,
     2784, 2796, 2803, 2804, 2816, 2812, 2822, 2813, 2822, 2819,

     2813, 2828, 2819, 2830, 7494, 2824, 2832, 2818, 2830, 2821,
     7494, 2830, 2829, 2826, 2841, 2833, 2841, 2844, 2835, 2840,
     2840, 2869, 2868, 2866, 2860, 2886, 2862, 2876, 2876, 2883,
     2881, 2875,  931, 1181, 2902, 2935, 1423, 1535, 2893,    0,
     2898,    0,    0, 2903,    0, 2892, 2898,    0, 2897, 2897,
     2904, 2892, 2924,  794, 2929, 2926, 2938, 2921, 2942, 2944,
     2935, 2935, 2929, 2936, 2951, 2934, 2951, 2951, 2947, 2954,
     2956, 2954, 2961, 2945, 2969, 2957, 2975, 2972, 2991,    0,
     2996, 2983, 2998, 2985, 2987, 2987, 3004, 2989, 3008, 2999,
     3008, 3000, 3002, 3004, 2996, 3010, 3002, 3006, 3017, 3036,

     3052, 3009,    0,    0, 3017, 3009, 3050, 3035, 3054, 3052,
     3061, 3056, 3059, 3062,    0, 3045, 3048, 3060, 3070, 3057,
        0, 3053,    0,    0,  788, 3062, 3063, 3071, 3072, 3073,
     3060,    0, 3055, 3073, 3082, 3084, 3094, 3094, 3093, 3105,
     3112, 3104, 3116, 3108, 3103, 3115, 3111, 3119, 3109, 3118,
     3115, 3110, 3125, 3116, 3127,    0, 3121, 3129, 3115, 3127,
     3118,    0, 3127, 3126, 3126, 3142, 3143, 3160, 3165, 3156,
     3158, 3158, 3176, 3173, 3165, 3159, 3180, 3158, 3173, 3171,
     3179, 3177, 3172, 1656, 3198, 3227, 3230, 3237, 3246, 3249,
     3252, 3193,    0, 3224,    0,    0, 3232,    0, 3224, 3240,

        0, 3238, 3235, 3243, 3230, 3253,  787, 3253, 3244, 3252,
     3241, 3257, 3259, 3251, 3252, 3247, 3254, 3269, 3252, 3287,
     3268, 3260, 3298, 3286, 3288, 3292, 3288, 3307, 3295, 3304,
     3296, 3309,    0, 3314, 3299, 3313, 3300, 3303, 3304, 3323,
     3308, 3327, 3317, 3326, 3316, 3319, 3321, 3324, 3342, 3335,
     3348, 3359, 3361, 3370, 3353,    0,    0, 3361, 3349, 3366,
     3351, 3367, 3364, 3375, 3370, 3374, 3380,    0, 3363, 3366,
     3382, 3386, 3373,    0, 3369,    0,    0,  747, 3378, 3382,
     3402, 3404, 3406, 3402,    0, 3397, 3415, 3420, 3421, 3422,
     3410, 3409, 3421, 3428, 3420, 3431, 3423, 3419, 3432, 3429,

     3437, 3427, 3436, 3433, 3433, 3441, 3432, 3443,    0, 3437,
     3460, 3447, 3460, 3460,    0, 3468, 3468, 3464, 3479, 3471,
     3479, 3482, 3473, 3474, 3476, 3491, 3488, 3481, 3476, 3498,
     3476, 3491, 3489, 3496, 3494, 3488, 3544, 3547, 3550, 3565,
     3553, 3571, 3556, 3574, 3577, 3580, 3597, 3599,    0, 3548,
        0, 3575,    0,    0, 3582,    0, 3573, 3579,    0, 3577,
     3574, 3584, 3571, 3595,  746, 3596, 3588, 3599, 3583, 3599,
     3601, 3594, 3594, 3588, 3597, 3612, 3595, 3634, 3615, 3630,
     3638, 3627, 3629, 3638, 3626, 3649, 3638, 3647, 3639, 3653,
        0, 3658, 3642, 3656, 3643, 3646, 3646, 3663, 3650, 3670,

     3660, 3673, 3663, 3673, 3680, 3678, 3693, 3685, 3689, 3700,
     3703, 3714, 3696,    0,    0, 3704, 3692, 3709, 3694, 3711,
     3708, 3717, 3713, 3717, 3721,    0, 3705, 3707, 3729, 3729,
     3720,    0, 3716,    0,    0,  741, 3732, 3742, 3752, 3755,
     3756, 3743,    0, 3738, 3757, 3763, 3764, 3765, 3753, 3752,
     3765, 3772, 3763, 3774, 3766, 3762, 3774, 3770, 3779, 3769,
     3779, 3776, 3774, 3789, 3781, 3803,    0, 3800, 3810, 3798,
     3810, 3801,    0, 3809, 3810, 3807, 3822, 3814, 3822, 3825,
     3816, 3817, 3819, 3834, 3831, 3824, 3818, 3849, 3817, 3831,
     3852, 3835, 3835, 3836, 3855, 3858, 3852, 3869, 3864, 3859,

     3866, 3871, 3881, 3869, 3876, 7494, 3884, 7494, 7494, 3891,
     3880, 7494, 3892, 3885, 3887, 3892, 3878, 3880, 3882, 3903,
     3904, 3895, 3920, 3911, 3922, 3918, 3931, 3913, 3915, 7494,
     3927, 3925, 7494, 7494, 3931, 7494, 3928, 3920, 3930, 3926,
     3928, 3948, 3945, 3943, 3932, 3934, 3940, 3947, 3957, 3955,
     7494, 7494, 3946, 3953, 7494, 3950, 3952, 3964, 3981,  774,
     3982, 7494, 7494, 3985,  693, 7494, 7494, 7494, 3972, 3981,
     7494, 3976, 3987, 3978, 3993, 3987, 3985, 3986, 4003, 7494,
     3984, 4002, 3989, 3991, 4007, 3992, 4008, 7494, 3999, 3998,
     3999, 4002, 7494, 4016, 4006, 4035, 4027, 4042, 4039, 4030,

     4046, 7494, 4034, 4048, 4036, 4056, 7494, 4045, 4047, 4047,
     4059, 4051, 7494, 4059, 4051, 4046, 4062, 7494, 7494, 4049,
     4051, 4065, 7494, 4053, 4061, 4057, 4068, 4064, 4068, 4091,
     4097, 4096, 4098, 4099, 7494, 7494, 7494, 4104, 4101, 7494,
     7494, 4123, 4126, 4093, 4096, 4097, 4114, 4109, 4102, 4108,
     4114, 4124, 4112, 4120,    0, 4128,    0,    0, 4135, 4130,
        0, 4141, 4135, 4136, 4141, 4127, 4128, 4130, 4149, 4151,
     4145, 4160, 4165, 4161, 4155, 4168, 4151, 4161,    0, 4174,
     4172,    0,    0, 4174,    0, 4171, 4163, 4174, 4170, 4172,
     4193, 4194, 4192, 4182, 4183, 4189, 4196, 4205, 4203,    0,

        0, 4192, 4200,    0, 4200, 4204, 4206, 4220,  726, 4220,
        0,    0, 4221,  690,    0,    0,    0, 4210, 4227,    0,
     4222, 4233, 4222, 4236, 4230, 4228, 4230, 4247,    0, 4228,
     4247, 4238, 4240, 4257, 4241, 4257,    0, 4248, 4246, 4247,
     4248,    0, 4263, 4256, 4275, 4281, 4278, 4276, 4268, 4291,
        0, 4279, 4293, 4279, 4298,    0, 4288, 4290, 4290, 4303,
     4295,    0, 4303, 4296, 4295, 4311,    0,    0, 4299, 4300,
     4313,    0, 4301, 4309, 4303, 4315, 4314, 4320, 4333, 4336,
     4333, 4335, 4337,    0,    0,    0, 4349, 4346,    0,    0,
     4363, 4367, 4371, 4383, 4387, 4392, 4350, 4355, 4349, 4379,

     4374, 4367, 4373, 4379, 4389, 4377, 4384,    0, 4393,    0,
        0, 4398, 4389,    0, 4400, 4395, 4396, 4401, 4387, 4388,
     4390, 4409, 4406, 4397, 4427, 4412, 4408, 4402, 4415, 4411,
     4426,    0, 4439, 4438,    0,    0, 4439,    0, 4436, 4428,
     4438, 4434, 4436, 4456, 4453, 4451, 4442, 4443, 4449, 4456,
     4465, 4463,    0,    0, 4452, 4455,    0, 4452, 4453, 4454,
     4468,  718, 4496,    0,    0, 4484,  679,    0,    0,    0,
     4470, 4492,    0, 4487, 4498, 4487, 4500, 4494, 4492, 4493,
     4510,    0, 4491, 4510, 4497, 4499, 4517, 4501, 4517,    0,
     4508, 4506, 4507, 4508,    0, 4518, 4508, 4553, 4529, 4526,

     4538, 4528, 4556,    0, 4545, 4559, 4545, 4564,    0, 4553,
     4555, 4555, 4567, 4559,    0, 4567, 4559, 4554, 4570,    0,
        0, 4559, 4560, 4573,    0, 4561, 4569, 4563, 4570, 4566,
     4570, 4582, 4600, 4597, 4608, 4610,    0,    0,    0, 4615,
     4612,    0,    0, 4629, 4632, 4635, 4638, 4646, 4649, 4659,
     4666, 4619, 4620, 4622, 4646, 4641, 4634, 4640, 4648, 4658,
     4646, 4653,    0, 4663,    0,    0, 4668, 4659,    0, 4670,
     4663, 4664, 4669, 4655, 4657, 4659, 4678, 4676, 4667, 4701,
     4682, 4682, 4676, 4689, 4674, 4689,    0, 4704, 4702,    0,
        0, 4703,    0, 4700, 4695, 4706, 4704, 4706, 4726, 4723,

     4721, 4710, 4711, 4717, 4724, 4734, 4732,    0,    0, 4721,
     4725,    0, 4722, 4723, 4728, 4742,  683, 4756,    0,    0,
     4743,  646,    0,    0,    0, 4733, 4755,    0, 4753, 4764,
     4753, 4770, 4764, 4762, 4763, 4781,    0, 4762, 4780, 4767,
     4769, 4785, 4769, 4785,    0, 4776, 4775, 4776, 4777,    0,
     4788, 4778, 4816, 4798, 4799, 4796, 4786, 4806,    0, 4811,
     4825, 4811, 4830,    0, 4822, 4824, 4824, 4836, 4829,    0,
     4837, 4829, 4824, 4840,    0,    0, 4827, 4828, 4841,    0,
     4830, 4838, 4832, 4840, 4836, 4839, 4855, 4858, 4855, 4861,
     4870,    0,    0,    0, 4878, 4878,    0,    0, 7494, 7494,

      643, 4885, 4871, 4889, 4889, 7494, 4890, 4871, 4892, 4898,
     4897, 4889, 7494, 4882, 4883, 4890, 4887, 7494, 4901, 7494,
     4887, 4895, 4892, 4902, 4904, 4913, 4902, 4924, 4920, 4904,
     4915, 4936, 4931, 4941, 4933, 4947, 7494, 4933, 4950, 4936,
     4954, 7494, 7494,  642, 7494, 4935, 4952, 4942, 7494, 7494,
     4954, 4957, 7494, 4943, 4963, 7494, 4960, 4949, 7494, 4945,
     7494, 7494, 7494, 7494, 4964, 4958, 4959, 4978, 7494, 7494,
     4979, 7494, 7494, 4976, 4975,  629, 4979, 4989, 7494, 4985,
     7494, 4985, 4997, 5003, 4991, 4993, 5008, 5010, 5010, 7494,
     5011, 5014, 7494, 5017, 4998, 5019, 5017, 5002, 5014, 5012,

     5019, 5009, 7494, 5009, 5029, 5019, 5032, 5024, 7494, 5038,
     5030, 5052, 7494, 7494, 5042, 5048, 5062, 5050, 7494, 5051,
        0,    0,  587, 5065, 5051, 5069, 5066,    0, 5068, 5049,
     5070, 5075, 5074, 5066,    0, 5059, 5060, 5067, 5065,    0,
     5079,    0, 5065, 5073, 5070, 5080, 5086, 5095, 5088, 5098,
     5114, 5101, 5108, 5117, 5112, 5122, 5113, 5124,    0, 5111,
     5128, 5114, 5131,    0,    0,  583,    0, 5112, 5129, 5119,
        0,    0, 5131, 5134,    0, 5121, 5141,    0, 5138, 5154,
        0, 5123,    0,    0,    0,    0, 5141, 5139, 5140, 5158,
        0,    0, 5168,    0,    0, 5168, 5158,  570, 5159, 5166,

        0, 5162,    0, 5164, 5176, 5182, 5168, 5171, 5186, 5188,
     5187,    0, 5188, 5191,    0, 5194, 5175, 5196, 5195, 5180,
     5192, 5190, 5197, 5193,    0, 5192, 5216, 5215, 5226, 5220,
        0, 5230, 5213, 5232,    0,    0, 5219, 5225, 5241, 5229,
        0, 5230,  618, 5254,    0,    0,  538, 5242, 5232, 5250,
     5247,    0, 5248, 5229, 5250, 5256, 5255, 5247,    0, 5241,
     5242, 5255, 5252,    0, 5270,    0, 5256, 5263, 5260, 5276,
     5280, 5291, 5280, 5287, 5293, 5277, 5284, 5292, 5287, 5297,
     5288, 5303,    0, 5289, 5307, 5294, 5312,    0,    0,  535,
        0, 5293, 5310, 5301,    0,    0, 5313, 5322,    0, 5308,

     5332,    0, 5329, 5328,    0, 5313,    0,    0,    0,    0,
     5331, 5329, 5337, 5351,    0,    0, 5352,    0,    0, 5345,
     5335,  534, 5338, 5345,    0, 5341,    0, 5341, 5357, 5363,
     5349, 5351, 5366, 5368, 5368,    0, 5369, 5372,    0, 5376,
     5357, 5384, 5382, 5371, 5383, 5380, 5387, 5383,    0, 5385,
     5407, 5397, 5405, 5397,    0, 5407, 5390, 5411,    0,    0,
     5398, 5404, 5418, 5410,    0, 5411, 5433,  675, 5438, 5456,
        0,    0,  528, 5426, 5417, 5435, 5438,    0, 5439, 5427,
     5450, 5455, 5454, 5447,    0, 5440, 5441, 5448, 5445,    0,
     5461,    0, 5447, 5454, 5451, 5461, 5462, 5473, 5462, 5488,

     5475, 5459, 5466, 5474, 5466, 5478, 5472, 5488,    0, 5474,
     5498, 5491, 5511,    0,    0,  494,    0, 5492, 5510, 5500,
        0,    0, 5512, 5515,    0, 5501, 5523,    0, 5520, 5507,
        0, 5505,    0,    0,    0,    0, 5523, 5518, 5519, 5533,
        0,    0, 5534,    0,    0, 5527, 5517,  478, 5518, 5527,
        0, 5526,    0, 5531, 5543, 5555, 5541, 5550, 5565, 5568,
     5567,    0, 5568, 5572,    0, 5575, 5556, 5577, 5575, 5562,
     5574, 5571, 5578, 5568,    0, 5567, 5589, 5579, 5587, 5579,
        0, 5589, 5572, 5591,    0,    0, 5580, 5589, 5608, 5596,
        0, 5603, 5617, 7494, 5617, 5609, 7494, 5615, 7494, 5616,

     5617, 5613, 5629, 5630, 7494, 5615, 5617, 7494, 5635, 5621,
     7494, 5636, 5630, 5632, 5640, 5633, 5644, 5645, 5639, 5647,
     5633, 7494, 5651, 7494, 5641, 7494, 7494, 5656, 7494, 5647,
     5646, 5666, 5662, 5680, 7494, 7494, 7494, 5681, 5669, 5683,
     5688, 5690, 7494, 5691, 5692, 5682, 5683, 5695, 7494, 5687,
     7494, 7494, 7494, 5691, 5686, 5693, 5694, 5681, 5686, 7494,
     5690, 5695, 5690, 5708, 5699, 7494, 7494, 7494, 5701, 5714,
     7494, 5716, 5725, 5721, 5733, 5724, 5739, 7494, 5731, 7494,
     7494, 5745, 5729, 5742, 7494, 5749,    0, 5742, 5734,    0,
     5739,    0, 5742, 5743, 5738, 5754, 5755,    0, 5740, 5744,

        0, 5760, 5746,    0, 5761, 5755, 5757, 5765, 5758, 5772,
     5778, 5772, 5786, 5772,    0, 5797,    0, 5785,    0,    0,
     5798,    0, 5784, 5783, 5798, 5794, 5805,    0,    0,    0,
     5806, 5793, 5809, 5814, 5815,    0, 5816, 5817, 5807, 5810,
     5820,    0, 5812,    0,    0,    0, 5816, 5811, 5818, 5819,
     5806, 5814,    0, 5823, 5828, 5829, 5847, 5845,    0,    0,
        0, 5845, 5856,    0, 5853, 5862, 5853, 5865, 5849, 5864,
        0, 5855,    0,    0, 5871, 5855, 5867,    0, 5882, 5879,
        0, 5872, 5864,    0, 5869,    0, 5870, 5871, 5866, 5884,
     5888,    0, 5878, 5880,    0, 5899, 5885,    0, 5900, 5894,

     5896, 5911, 5902, 5914, 5915, 5909, 5918, 5904,    0, 5922,
        0, 5910,    0,    0, 5922,    0, 5910, 5909, 5923, 5924,
     5935,    0,    0,    0, 5936, 5923, 5937, 5942, 5943,    0,
     5946, 5950, 5945, 5946, 5959,    0, 5951,    0,    0,    0,
     5955, 5950, 5957, 5965, 5950, 5956,    0, 5960, 5965, 5961,
     5979, 5970,    0,    0,    0, 5970, 5980,    0, 5979, 5988,
     5978, 5995, 5979, 5994,    0, 5985,    0,    0, 5999, 5983,
     5995,    0, 6027, 6039, 6042, 6008,    0, 6006, 5998,    0,
     6009,    0, 6010, 6025, 6020, 6036, 6037,    0, 6022, 6026,
        0, 6042, 6028,    0, 6043, 6037, 6039, 6049, 6040, 6051,

     6052, 6046, 6054, 6040,    0, 6058,    0, 6046,    0,    0,
     6058,    0, 6044, 6043, 6057, 6053, 6069,    0,    0,    0,
     6070, 6063, 6077, 6096, 6097,    0, 6098, 6099, 6089, 6092,
     6102,    0, 6094,    0,    0,    0, 6098, 6093, 6100, 6103,
     6088, 6093,    0, 6097, 6102, 6097, 6115, 6106,    0,    0,
        0, 6106, 6116,    0, 6113, 6122, 6112, 6124, 6113, 6128,
        0, 6125,    0,    0, 6139, 6137, 6149,    0, 6150, 6132,
     6155, 7494, 6155, 7494, 6158, 6150, 7494, 6160, 7494, 7494,
      440, 6160, 6162, 6149, 7494, 6157, 6167, 6172, 7494, 7494,
     7494, 6154, 6155, 7494, 7494, 6175, 6163, 7494, 7494, 7494,

     7494, 6175, 6167, 6168, 6168, 6170, 7494, 6162, 7494, 6184,
     6175, 6183, 6184, 6198, 7494, 6196, 7494, 6212, 7494, 6205,
     6215, 6200, 6207, 6208, 6210, 6203, 6205, 7494, 6223, 7494,
     6211, 7494, 7494, 6223, 6205, 6228,    0, 6226,    0, 6229,
     6221,    0, 6231,    0,    0,  427, 6231, 6233, 6218,    0,
     6226, 6236, 6246,    0,    0,    0, 6228, 6235,    0,    0,
     6255, 6257,    0,    0,    0,    0, 6269, 6261, 6262, 6262,
     6266,    0, 6258,    0, 6275, 6266, 6268, 6269, 6271,    0,
     6269,    0, 6285,    0, 6278, 6288, 6271, 6278, 6279, 6281,
     6274, 6276,    0, 6292,    0, 6280,    0,    0, 6335, 6298,

     6280, 6309,    0, 6307,    0, 6326, 6318,    0, 6328,    0,
        0,  407, 6330, 6332, 6317,    0, 6325, 6335, 6340,    0,
        0,    0, 6324, 6325,    0,    0, 6345, 6333,    0,    0,
        0,    0, 6345, 6337, 6338, 6338, 6340,    0, 6332,    0,
     6349, 6340, 6342, 6343, 6343,    0, 6341,    0, 6360,    0,
     6353, 6369, 6352, 6375, 6376, 6378, 6373, 6375,    0, 6391,
        0, 6379,    0,    0, 6409, 6412, 6391, 6373, 6404,    0,
     6402,    0, 6405, 6397,    0, 6407,    0,    0,  396, 6407,
     6409, 6394,    0, 6402, 6412, 6420,    0,    0,    0, 6402,
     6409,    0,    0, 6429, 6417,    0,    0,    0,    0, 6429,

     6421, 6422, 6422, 6424,    0, 6426,    0, 6443, 6434, 6438,
     6439, 6439,    0, 6437,    0, 6453,    0, 6446, 6464, 6447,
     6454, 6455, 6457, 6450, 6452,    0, 6468,    0, 6456,    0,
        0, 6468, 6478, 7494, 6460, 6469, 6481, 7494, 6502, 7494,
     7494, 6485, 6474, 6496, 6492, 7494, 6502, 6500, 6506, 6494,
     7494, 6494, 6519, 7494, 6520, 6512, 6513, 7494, 6521, 6515,
     6525, 6528, 7494, 6526, 7494, 6512, 6531, 6529, 6541, 6543,
     6548, 6538, 6557, 6564,    0, 6548, 6551, 6563,    0, 6568,
        0,    0, 6568, 6556, 6567, 6561,    0, 6571, 6570, 6576,
     6565,    0, 6568, 6585,    0, 6586, 6581, 6582,    0, 6596,

     6590, 6601, 6617,    0, 6605,    0, 6601, 6616, 6611, 6623,
     6624, 6626, 6606, 6627, 6635,    0, 6617, 6620, 6633,    0,
     6658,    0,    0, 6636, 6622, 6632, 6626,    0, 6637, 6641,
     6647, 6644,    0, 6647, 6674,    0, 6675, 6667, 6670,    0,
     6678, 6672, 6682, 6683,    0, 6684,    0, 6674, 6688, 6680,
     6693, 6694, 6696, 6676, 6695, 6703,    0, 6691, 6694, 6712,
        0, 6731,    0,    0, 6721, 6712, 6725, 6719,    0, 6729,
     6727, 6735, 6723,    0, 6723, 6740,    0, 6741, 6738, 6739,
        0, 6747, 6742, 6752, 6753,    0, 6754,    0, 6740, 6762,
     6754, 6772, 6779, 6786, 6767, 7494, 6773, 6786,  393, 6775,

     6795, 6796, 6799, 6787, 6800, 6795, 7494, 6797, 7494, 7494,
     6792, 6787, 7494, 7494, 6804, 7494, 7494, 6803, 7494, 7494,
     7494, 7494, 6792, 6798, 6796, 7494, 7494, 6814, 7494, 7494,
     7494, 7494,    0, 6796, 6809,  390, 6800, 6826, 6847, 6827,
     6820, 6839, 6841,    0, 6843,    0,    0, 6838, 6833,    0,
        0, 6850,    0,    0, 6851,    0,    0,    0,    0, 6840,
     6846, 6843,    0,    0, 6861,    0,    0,    0,    0,    0,
     6843, 6858,  376, 6847, 6867, 6868, 6869, 6857, 6871, 6866,
        0, 6868,    0,    0, 6863, 6864,    0,    0, 6881,    0,
        0, 6886,    0,    0,    0,    0, 6881, 6892, 6890,    0,

        0, 6908,    0,    0,    0,    0,    0, 6890, 6903,  330,
     6893, 6915, 6916, 6917, 6904, 6917, 6914,    0, 6916,    0,
        0, 6910, 6905,    0,    0, 6922,    0,    0, 6921,    0,
        0,    0,    0, 6911, 6917, 6914,    0,    0, 6932,    0,
        0,    0,    0, 6925, 7494, 6935, 6924, 6931, 6952, 6944,
     6954, 6959, 6955, 7494, 6955, 6965, 7494, 6951, 7494, 6967,
     7494, 6971, 6967, 6968,    0, 6970, 6959, 6961, 6976, 6963,
     6972, 6977, 6973,    0, 6974, 6984,    0, 6970,    0, 6984,
        0, 6988, 6985, 6992,    0, 6994, 6989, 6996, 7016, 7004,
     7013, 7018, 7014,    0, 7014, 7024,    0, 7012,    0, 7026,

        0, 7030, 7026, 7027,    0, 7029, 7019, 7020, 7035, 7022,
     7031, 7036, 7033,    0, 7033, 7043,    0, 7029,    0, 7043,
        0, 7048, 7050, 7045, 7494, 7066, 7069, 7079, 7074, 7078,
     7079, 7080, 7067, 7494, 7079, 7494, 7086, 7085, 7077,    0,
     7092, 7089, 7094, 7089, 7093, 7094, 7095, 7082,    0, 7094,
        0, 7100, 7099, 7091,    0, 7106, 7103, 7109, 7109, 7113,
     7120, 7127, 7119,    0, 7132,    0, 7137, 7136, 7128,    0,
     7143, 7140, 7147, 7141, 7145, 7146, 7147, 7134,    0, 7147,
        0, 7152, 7151, 7144, 7147, 7494, 7139, 7494, 7494, 7149,
     7144, 7494, 7494, 7494, 7158, 7151, 7154,    0, 7147,    0,

        0, 7162, 7157,    0,    0,    0, 7177, 7176, 7184,    0,
     7177,    0,    0, 7186, 7181,    0,    0,    0, 7195, 7188,
     7191,    0, 7185,    0,    0, 7194, 7189,    0,    0,    0,
     7203, 7494, 7195, 7199, 7212, 7194, 7494,    0, 7200, 7204,
     7216, 7198,    0,    0, 7205, 7209, 7221, 7203,    0,    0,
     7209, 7214, 7232, 7214,    0, 7234, 7228, 7494, 7253, 7249,
     7237,    0, 7257, 7252, 7240,    0, 7260, 7257, 7245,    0,
     7265, 7494,  319, 7254,    0,  309, 7255,    0,  306, 7256,
        0,  303, 7258, 7252, 7257, 7254, 7259, 7256, 7262, 7259,
     7264, 7263, 7494, 7264,    0, 7266,    0, 7273,    0, 7291,

     7298, 7305, 7311, 7300, 7301, 7302, 7303, 7299, 7300, 7303,
     7304, 7318, 7319, 7320, 7321, 7314, 7315, 7316, 7317, 7315,
     7316, 7318, 7319, 7325, 7326, 7327, 7329,  211,  205,  199,
      193, 7342, 7343, 7350, 7357, 7352, 7354, 7355, 7356, 7360,
     7361, 7362, 7365, 7360, 7361, 7362, 7363, 7369, 7371, 7372,
     7373, 7494,    0,    0,    0, 7494, 7437, 7442, 7445, 7453,
     7461, 7469, 7477, 7485
    } ;

static yyconst flex_int16_t yy_def[3565] =
    {   0,
     3556,    1, 3556,    3, 3556,    5,    5,    5,    5,    5,
     3556,   11, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3556, 3556, 3556, 3558,
     3558, 3558, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3558, 3558, 3560,
     3561, 3561, 3561, 3561, 3556, 3561, 3561, 3561, 3556, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3556, 3561, 3556, 3556,
     3562, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3558,
     3558, 3558, 3558, 3558, 3558, 3560, 3560, 3561, 3561, 3561,
     3563, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3562, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3556, 3558, 3558, 3558, 3558, 3558, 3556,
     3558, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3556, 3558, 3558, 3558,
     3558, 3558, 3556, 3558, 3560, 3556, 3560, 3563, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3556, 3558, 3556, 3558, 3558, 3556, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3556, 3556, 3558, 3558, 3558, 3556, 3564,
     3560, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3558, 3556, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3556, 3558, 3564, 3564,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3558, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3558, 3564, 3564, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3558, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3558, 3564, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,

     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3559, 3559, 3559, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,

     3559, 3559, 3559, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3557, 3557,
     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557, 3557,
     3557, 3557, 3557, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3561, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3561, 3561, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3557, 3557, 3557, 3557, 3557,

     3557, 3557, 3557, 3557, 3557, 3557, 3557, 3559, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3561,
     3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3561, 3556, 3556, 3556, 3556, 3556, 3556, 3557, 3557, 3557,
     3557, 3557, 3557, 3559, 3559, 3559, 3559, 3559, 3559, 3561,
     3561, 3561, 3561, 3561, 3561, 3556, 3556, 3556, 3556, 3557,
     3557, 3557, 3557, 3559, 3559, 3559, 3559, 3561, 3561, 3561,
     3561, 3556, 3556, 3556, 3557, 3557, 3557, 3559, 3559, 3559,
     3561, 3561, 3561, 3556, 3556, 3557, 3557, 3559, 3559, 3561,
     3561, 3556, 3556, 3557, 3557, 3559, 3559, 3561, 3561, 3556,

     3557, 3559, 3561, 3556, 3557, 3559, 3561, 3556, 3557, 3559,
     3561, 3556, 3557, 3559, 3561, 3556, 3557, 3559, 3561, 3556,
     3557, 3559, 3561, 3556, 3557, 3559, 3561, 3556, 3557, 3559,
     3561, 3556, 3557, 3559, 3561, 3556, 3557, 3559, 3561, 3556,
     3557, 3559, 3561, 3556, 3557, 3559, 3561, 3556, 3557, 3559,
     3561, 3556, 3557, 3559, 3561,    0, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556
    } ;

static yyconst flex_int16_t yy_nxt[7576] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   18,
       21,   22,   23,   18,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       14,   14,   14,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   14,   47,   14,   48,
       14,   14,   15,   16,   15,   17,   49,   14,   18,   18,
       19,   18,   18,   18,   18,   20,   50,   51,   51,   51,

       18,   21,   22,   23,   18,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       75,   77,   75,   78,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   75,
       48,   75,   14,   15,   16,   15,   17,   14,   79,   18,
       18,   19,   18,   18,   18,   80,   20,   81,   82,   82,
       82,   18,   21,   22,   23,   18,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,

       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  106,   77,   14,   14,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      106,   48,  106,  108, 3535,   80,  109,  109,  109,  108,
     3534,   80,  109,  109,  109,   18, 3533,   18,  110,  110,
      110,   18, 3532,   18,  110,  110,  110,  111,  112,  113,
       15,  114,  115,  111,  116,  116,   19,  117,  117,  117,
      117,  118,  117,  111,  111,  111,  119,  120,  121,  122,
      119,  123,  124,  125,  126,  127,  128,  129,  130,  131,

      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  145,  111,  146,  111,  147,  111,  111,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  111,  146,  111,  148,  111,  149,  194,
      149,  152,  153,  155, 3490,  200,  201, 3488,  195,  156,
     3486,  157,  229,  254,  301,  158,  159,  160,  161,  162,
     3484,  479,  196,  149,  307,  163,  482,  483,  194,  164,
      308, 2184,  155,  165,  200,  201,  166,  195,  156,  167,
      157,  229,  254,  301,  158,  159,  160,  161,  162,  168,

      169,  196,  175,  307,  163,  248,  176,  170,  164,  308,
      177,  171,  165,  249,  172,  166,  178,  173,  167,  179,
      174,  477,  477,  477,  336,  361,  197, 2058,  168,  169,
      149,  175,  149,  198,  248,  176,  170,  409,  199,  177,
      171, 1934,  249,  172, 1812,  178,  173, 3062,  179,  174,
      180,  206,  181,  336,  361,  197,  202,  415, 3021,  207,
      203,  182,  198,  183,  204,  208,  409,  199,  184,  416,
      205,  185,  479,  186,  149,  256,  256,  256, 2980,  180,
      206,  181,  886,  886,  886,  202,  415,  257,  207,  203,
      182, 2939,  183,  204,  208,  444,  355,  184,  416,  205,

      185,  225,  186,  187,  356,  230,  469,  188,  209,  231,
      210,  189,  211,  232,  190,  226,  257,  191,  227,  233,
      192,  228,  212,  193,  444,  355,  524,  213,  214, 2633,
      225,  530,  187,  356,  230,  469,  188,  209,  231,  210,
      189,  211,  232,  190,  226, 2614,  191,  227,  233,  192,
      228,  212,  193,  302,  531,  524,  213,  214,  215,  216,
      530,  559,  217,  234,  245,  235,  246,  303,  218,  247,
      219,  584,  220,  236,  221,  237,  222,  223,  224, 2576,
      238,  239,  302,  531,  588, 2537, 2518,  215,  216, 2480,
      559,  217,  234,  245,  235,  246,  303,  218,  247,  219,

      584,  220,  236,  221,  237,  222,  223,  224,  240,  238,
      239,  463,  578,  588,  250,  241,  242,  251,  252,  464,
      579, 2443,  243,  304,  253,  244,  258,  259,  259,  259,
      305,  365,  593, 2479, 2424,  306,  410,  240, 2386,  260,
      463,  578,  594,  250,  241,  242,  251,  252,  464,  579,
      411,  243,  304,  253,  244,  363,  363,  363,  352,  305,
      353,  593,  270,  354,  306,  410,  271,  364,  260,  262,
      272,  594,  595,  273,  596,  263,  274,  264,  597,  411,
     2350,  265,  266,  267,  268,  269,  275,  352, 2573,  353,
      473,  270,  354, 2331, 2293,  271,  364, 2232,  262,  272,

     2228,  595,  273,  596,  263,  274,  264,  597,  525,  276,
      265,  266,  267,  268,  269,  275,  277,  282,  591,  313,
      278,  283,  526,  279,  598,  284,  280,  314,  309,  281,
     2106,  285,  310,  315,  286, 2102,  311,  525,  276,  592,
      604, 1982,  312, 1978, 1860,  277,  282,  591,  313,  278,
      283,  526,  279,  598,  284,  280,  314,  309,  281,  332,
      285,  310,  315,  286,  287,  311,  288,  605,  592,  604,
      316,  312,  317,  333,  318,  289,  334,  290,  460,  335,
      461,  606,  291,  462,  319,  292,  421,  293,  332,  320,
      321, 1856, 1738,  287,  422,  288,  605, 1662, 1583,  316,

      423,  317,  333,  318,  289,  334,  290,  460,  335,  461,
      606,  291,  462,  319,  292,  421,  293,  294,  320,  321,
      412,  295,  337,  422,  609,  296,  338,  413,  297,  423,
      339,  298,  414,  536,  299,  616,  340,  300, 1507, 1430,
      623,  537, 1041, 1041, 1041, 1354,  294,  538, 1281,  412,
      295,  337, 1205,  609,  296,  338,  413,  297,  587,  339,
      298,  414,  536,  299,  616,  340,  300,  322,  323,  623,
      537,  324,  341,  575,  342,  576,  538,  325,  577,  326,
      624,  327,  343,  328,  344,  329,  330,  331,  587,  345,
      346,  625,  626, 1045, 1045, 1045,  322,  323,  585,  484,

      324,  341,  575,  342,  576,  481,  325,  577,  326,  624,
      327,  343,  328,  344,  329,  330,  331,  347,  345,  346,
      625,  626,  589,  357,  348,  349,  358,  359,  390,  627,
      590,  350,  391,  360,  351,  365,  392,  366,  367,  367,
      367,  480,  393,  255,  154,  394,  347,  734,  734,  734,
      368,  589,  357,  348,  349,  358,  359,  390,  627,  590,
      350,  391,  360,  351,  151,  392,  470,  470,  470,  599,
      600,  393,  465,  378,  394,  466,  467,  379,  471,  368,
      370,  380,  468,  601,  381,  607,  371,  382,  372,  608,
      614,  150,  373,  374,  375,  376,  377,  383,  599,  600,

      615,  465,  378, 3556,  466,  467,  379,  471, 3556,  370,
      380,  468,  601,  381,  607,  371,  382,  372,  608,  614,
      384,  373,  374,  375,  376,  377,  383,  385,  417,  615,
      617,  386,  418,  602,  387,  618,  419,  388,  628,  603,
      389, 3556,  420,  472,  629,  473,  474,  474,  474,  384,
      630, 3556, 3556,  631, 3556,  635,  385,  417,  475,  617,
      386,  418,  602,  387,  618,  419,  388,  628,  603,  389,
      395,  420,  396,  629, 3556,  636,  424, 3556,  425,  630,
      426,  397,  631,  398,  635,  527,  440,  475,  399,  637,
      427,  400,  528,  401, 3556,  428,  429,  529, 3556,  395,

      441,  396, 3556,  442,  636,  424,  443,  425, 3556,  426,
      397, 3556,  398,  638,  527,  440,  555,  399,  637,  427,
      400,  528,  401,  402,  428,  429,  529,  403,  642,  441,
      556,  404,  442,  557,  405,  443,  558,  406, 3556,  643,
      407,  644,  638,  408, 3556,  555, 3556,  445, 3556,  645,
      646,  446,  402,  647, 3556,  447,  403,  642, 3556,  556,
      404,  448,  557,  405, 3556,  558,  406,  532,  643,  407,
      644,  533,  408,  430,  431,  534,  445,  432,  645,  646,
      446,  535,  647,  433,  447,  434,  651,  435, 3556,  436,
      448,  437,  438,  439, 3556, 3556,  532,  734,  734,  734,

      533, 3556,  430,  431,  534,  652,  432,  449, 3556,  450,
      535, 3556,  433,  665,  434,  651,  435,  451,  436,  452,
      437,  438,  439,  455,  453,  454,  610,  611,  612,  580,
      456,  457,  581,  582,  652,  613,  449,  458,  450,  583,
      459, 3556,  665,  666, 3556,  733,  451,  733,  452,  734,
      734,  734,  455,  453,  454,  610,  611,  612,  580,  456,
      457,  581,  582,  493,  613,  667,  458,  494,  583,  459,
      485,  495,  666,  632,  496,  656,  486,  497,  487,  633,
      657, 3556,  488,  489,  490,  491,  492,  498, 3556, 3556,
      634, 3556,  493, 3556,  667, 3556,  494, 3556, 3556,  485,

      495, 3556,  632,  496,  656,  486,  497,  487,  633,  657,
      499,  488,  489,  490,  491,  492,  498,  500,  505,  634,
      672,  501,  506,  673,  502,  619,  507,  503,  620,  560,
      504,  678,  508,  561,  621,  509, 3556,  562, 3556,  499,
     3556,  622, 3556,  563, 3556, 3556,  500,  505, 3556,  672,
      501,  506,  673,  502,  619,  507,  503,  620,  560,  504,
      678,  508,  561,  621,  509,  510,  562,  511,  639,  653,
      622,  539,  563,  540,  640,  541,  512,  641,  513,  679,
      654,  655,  658,  514,  659,  542,  515, 3556,  516, 3556,
      543,  544, 3556, 3556,  510, 3556,  511,  639,  653, 3556,

      539, 3556,  540,  640,  541,  512,  641,  513,  679,  654,
      655,  658,  514,  659,  542,  515,  570,  516,  517,  543,
      544,  663,  518,  571,  572,  664,  519,  670,  671,  520,
      573,  648,  521,  574,  680,  522,  649,  650,  523,  738,
      738,  738,  681, 3556, 3556,  570, 3556,  517, 3556, 3556,
      663,  518,  571,  572,  664,  519,  670,  671,  520,  573,
      648,  521,  574,  680,  522,  649,  650,  523,  545,  546,
      668,  681,  547,  564,  669,  565,  674,  675,  548,  682,
      549, 3556,  550,  566,  551,  567,  552,  553,  554,  683,
      568,  569, 3556,  676,  677,  684,  685,  545,  546,  668,

      686,  547,  564,  669,  565,  674,  675,  548,  682,  549,
      660,  550,  566,  551,  567,  552,  553,  554,  683,  568,
      569,  661,  676,  677,  684,  685,  687,  688,  689,  686,
      662,  690,  693,  694,  695,  691,  699,  700,  702,  660,
      696,  692, 3556,  706,  707,  697, 3556,  712,  701,  713,
      661,  738,  738,  738, 3556,  687,  688,  689,  698,  662,
      690,  693,  694,  695,  691,  699,  700,  702,  708,  696,
      692,  703,  706,  707,  697,  710,  712,  701,  713,  724,
      704,  714,  716,  722,  719,  709,  711,  698,  705,  715,
      717,  720,  725,  721,  727,  723,  728,  708,  726,  729,

      703,  730,  718,  731,  710,  732, 3556, 3556,  724,  704,
      714,  716,  722,  719,  709,  711,  739,  705,  715,  717,
      720,  725,  721,  727,  723,  728, 3556,  726,  729,  744,
      730,  718,  731,  745,  732,  256,  256,  256,  735,  735,
      735,  258,  259,  259,  259,  739,  742,  257,  746,  747,
      736,  737,  740,  737,  260,  738,  738,  738,  744,  748,
      741,  749,  745,  755,  753,  756,  757,  743,  750,  751,
      754,  760, 1491, 1491, 1491,  742,  257,  746,  747,  736,
      758,  740,  752,  260,  759, 3556,  767,  774,  748,  741,
      749,  775,  755,  753,  756,  757,  743,  750,  751,  754,

      760,  761,  762,  763,  765, 3556,  776,  768,  777,  758,
      764,  752,  769,  759,  766,  767,  774,  778,  770,  779,
      775,  771,  780,  781,  782,  786, 3556,  772,  787,  788,
      761,  762,  763,  765,  773,  776,  768,  777,  783,  764,
      789,  769,  793,  766,  784,  794,  778,  770,  779,  795,
      771,  780,  781,  782,  786,  785,  772,  787,  788,  790,
      796,  797,  798,  773,  802,  791,  803,  783,  792,  789,
      799,  793,  807,  784,  794,  800,  801,  808,  795, 3556,
      809,  814,  810, 3556,  785,  815,  816,  817,  790,  796,
      797,  798,  811,  802,  791,  803,  804,  792,  818,  799,

     3556,  807, 3556,  812,  800,  801,  808,  805,  806,  809,
      814,  810,  813,  819,  815,  816,  817,  820,  821,  822,
      823,  811,  829,  824,  830,  804,  831,  818,  825,  826,
      827,  828,  812,  832,  833,  834,  805,  806,  835,  836,
      837,  813,  819,  838,  839,  840,  820,  821,  822,  823,
      844,  829,  824,  830,  845,  831,  846,  825,  826,  827,
      828,  841,  832,  833,  834,  842,  850,  835,  836,  837,
      847,  843,  838,  839,  840,  848,  851,  853,  857,  844,
      854,  858,  861,  845,  859,  846,  863,  852,  849,  855,
      841,  864, 3556,  862,  842,  850,  873,  856, 3556,  847,

      843,  860, 3556,  875,  848,  851,  853,  857,  874,  854,
      858,  861, 3556,  859,  878,  863,  852,  849,  855,  865,
      864,  867,  862,  879,  870,  873,  856,  866,  876,  868,
      860,  871,  875,  872,  877,  880,  881,  874,  882,  883,
      884,  869,  884,  878,  885,  885,  885, 3556,  865,  892,
      867, 3556,  879,  870, 3556, 3556,  866,  876,  868, 3556,
      871, 3556,  872,  877,  880,  881,  897,  882,  883,  898,
      869,  363,  363,  363,  887,  887,  887,  365,  892,  366,
      889,  889,  889,  364,  895,  890,  888,  890,  893,  891,
      891,  891,  368,  899,  900,  897,  894,  901,  898,  902,

      903,  904,  906,  908,  909,  896,  910,  911,  907,  913,
      920,  912,  364,  895,  905,  888, 3556,  893,  914,  915,
      916,  368,  899,  900,  927,  894,  901,  917,  902,  903,
      904,  906,  908,  909,  896,  910,  911,  907,  913,  920,
      912,  918,  928,  905,  929,  921,  930,  914,  915,  916,
      922,  919,  923,  927,  931,  924,  917,  932,  933,  934,
      935,  925,  939,  940, 3556,  941,  942,  946,  926, 3556,
      918,  928,  947,  929,  921,  930,  936,  948, 3556,  922,
      919,  923,  937,  931,  924,  949,  932,  933,  934,  935,
      925,  939,  940,  938,  941,  942,  946,  926,  943,  950,

      951,  947,  955,  952,  944,  936,  948,  945,  953,  954,
      956,  937,  957,  960,  949,  962, 3556,  963,  961,  969,
      970,  971,  938,  958,  959, 3556,  967,  943,  950,  951,
      968,  955,  952,  944,  964, 3556,  945,  953,  954,  956,
      976,  957,  960,  977,  962,  965,  963,  961,  969,  970,
      971,  982,  958,  959,  966,  967,  972,  974,  975,  968,
      973,  978,  979,  964,  980,  981,  983,  984,  985,  976,
      986,  987,  977,  988,  965,  989,  990,  991,  992,  993,
      982,  997,  998,  966,  999,  972,  974,  975,  994,  973,
      978,  979,  995,  980,  981,  983,  984,  985,  996,  986,

      987, 1003,  988, 3556,  989,  990,  991,  992,  993, 1004,
      997,  998, 1006,  999, 1000, 1010, 1007,  994, 1011, 1001,
     1005,  995, 1012, 1014, 1016, 1008, 1017,  996, 1018, 3556,
     1003, 3556, 1002, 1009, 1015, 1028, 1019, 3556, 1004, 1013,
     3556, 1006, 3556, 1000, 1010, 1007, 1031, 1011, 1001, 1005,
     1020, 1012, 1014, 1016, 1008, 1017, 1032, 1018, 1021, 1026,
     1023, 1002, 1009, 1015, 1028, 1019, 1029, 1024, 1013, 1025,
     1022, 1027, 1030, 1033, 1034, 1031, 1035, 1036, 3556, 1020,
      470,  470,  470, 3556, 3556, 1032, 3556, 1021, 1026, 1023,
     3556, 3556,  471, 3556, 3556, 1029, 1024, 3556, 1025, 1022,

     1027, 1030, 1033, 1034, 1046, 1035, 1036, 1037, 3556, 1037,
     3556, 1038, 1038, 1038, 1039, 1039, 1039, 1047, 1047, 1047,
      472,  471,  473, 1042, 1042, 1042, 1040, 1043, 3556, 1043,
     1050, 1044, 1044, 1044, 1051,  475, 1049,  586, 1055,  586,
     1053, 1056, 1052,  586, 1057, 1058, 1059, 1060, 1061, 1062,
     1064, 1066, 1067,  586, 1068, 1040, 1065,  586, 1071, 1050,
     1078, 1054, 1063, 1051,  475, 3556, 3556, 1055, 1069, 1053,
     1056, 1052, 1070, 1057, 1058, 1059, 1060, 1061, 1062, 1064,
     1066, 1067, 1076, 1068,  586, 1065, 1085, 1071, 1086, 1078,
     1054, 1063, 1077, 1072, 1073, 1074, 1081, 1069, 1079, 1082,

     1087, 1070, 1075, 1080, 1088, 1083, 1089, 1090, 1091, 1092,
     1093, 1076, 1084, 1094, 1097, 1085, 1098, 1086, 1099, 1095,
     1100, 1077, 1072, 1073, 1074, 1081, 1104, 1079, 1082, 1087,
     1096, 1075, 1080, 1088, 1083, 1089, 1090, 1091, 1092, 1093,
     1105, 1084, 1094, 1097, 1101, 1098, 1106, 1099, 1095, 1100,
     1102, 1107, 1108, 1103, 1109, 1104, 1110, 1113, 1114, 1096,
     1115, 1111, 1112, 1118, 1120, 1127, 1121, 1128, 1119, 1105,
     3556, 1116, 1117, 1101, 1125, 1106, 1129, 1140, 1126, 1102,
     1107, 1108, 1103, 1109, 3556, 1110, 1113, 1114, 1122, 1115,
     1111, 1112, 1118, 1120, 1127, 1121, 1128, 1119, 1130, 1123,

     1116, 1117, 1131, 1125, 1141, 1129, 1140, 1126, 1124, 1132,
     1133, 1134, 1136, 1137, 1135, 1138, 1139, 1122, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1130, 1123, 1151,
     1155, 1131, 1156, 1141, 1157, 1161, 3556, 1124, 1132, 1133,
     1134, 1136, 1137, 1135, 1138, 1139, 3556, 1142, 1143, 1144,
     1145, 1146, 1147, 1148, 1149, 1150, 1152, 1158, 1151, 1155,
     1153, 1156, 1159, 1157, 1161, 1162, 1154, 1164, 1168, 1169,
     1165, 1170, 1172, 1174, 1175, 1160, 1163, 3556, 1186, 1166,
     1184, 1189, 1176, 1173, 3556, 1152, 1158, 1167, 1171, 1153,
     1177, 1159, 1185, 3556, 1162, 1154, 1164, 1168, 1169, 1165,

     1170, 1172, 1174, 1175, 1160, 1163, 1178, 1186, 1166, 1184,
     1189, 1176, 1173, 1181, 1179, 1190, 1167, 1171, 1187, 1177,
     1182, 1185, 1183, 1191, 1188, 1192, 1180, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1200, 1178, 1201, 1202, 1203, 1204,
     1206, 1207, 1181, 1179, 1190, 1210, 1211, 1187, 1212, 1182,
     3556, 1183, 1191, 1188, 1192, 1180, 1193, 1194, 1195, 1196,
     1197, 1198, 1199, 1200, 1208, 1201, 1202, 1203, 1204, 1206,
     1207, 1213, 1214, 1217, 1210, 1211, 1215, 1212, 1216, 1209,
     1218, 1219, 1220, 1223, 1224, 1225, 1226, 1228, 1229, 1227,
     1230, 1231, 1232, 1208, 1233, 1234, 1221, 1222, 1235, 1236,

     1213, 1214, 1217, 1237, 1238, 1215, 1241, 1216, 1209, 1218,
     1219, 1220, 1223, 1224, 1225, 1226, 1228, 1229, 1227, 1230,
     1231, 1232, 1239, 1233, 1234, 1221, 1222, 1235, 1236, 1240,
     1242, 1243, 1237, 1238, 1244, 1241, 1245, 1246, 1247, 1248,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 3556, 1258,
     1263, 1239, 1264, 1265, 1266, 1267, 1268, 1249, 1240, 1242,
     1243, 1269, 1270, 1244, 1259, 1245, 1246, 1247, 1248, 1250,
     1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1258, 1263,
     1271, 1264, 1265, 1266, 1267, 1268, 1249, 1261, 1272, 1273,
     1269, 1270, 1274, 1259, 1275, 1276, 1278, 1262, 1279, 1280,

     1282, 1283, 1284, 1285, 1286, 1287, 1288, 1277, 1289, 1271,
     1290, 1291, 1292, 1293, 1294, 1295, 1261, 1272, 1273, 1296,
     1297, 1274, 1298, 1275, 1276, 1278, 1262, 1279, 1280, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1277, 1289, 1299, 1290,
     1291, 1292, 1293, 1294, 1295, 1300, 1301, 1302, 1296, 1297,
     1303, 1298, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1308, 1317, 1318, 1299, 1319, 1320,
     1321, 1322, 1323, 1324, 1300, 1301, 1302, 1327, 1325, 1303,
     1326, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1328, 1317, 1318, 1329, 1319, 1320, 1321,

     1322, 1323, 1324, 1330, 1331, 3556, 1327, 1325, 1335, 1326,
     1336, 1332, 1333, 1337, 1339, 1340, 1341, 1338,  735,  735,
      735, 1344, 1328, 3556, 3556, 1329, 1345, 1346, 1347, 1348,
      736, 1349, 1330, 1331, 1334, 1350, 1351, 1335, 1352, 1336,
     1332, 1333, 1337, 1339, 1340, 1341, 1338, 1342, 1353, 1342,
     1344, 1343, 1343, 1343, 1355, 1345, 1346, 1347, 1348,  736,
     1349, 1356, 1359, 1334, 1350, 1351, 1357, 1352, 1360, 1361,
     1362, 1363, 1364, 1366, 1365, 1367, 1368, 1353, 1369, 1372,
     1377, 1358, 1378, 1355, 1373, 1374, 1375, 1379, 1380, 1376,
     1356, 1359, 1370, 1371, 1381, 1357, 1382, 1360, 1361, 1362,

     1363, 1364, 1366, 1365, 1367, 1368, 1383, 1369, 1372, 1377,
     1358, 1378, 1384, 1373, 1374, 1375, 1379, 1380, 1376, 1385,
     1386, 1370, 1371, 1381, 1387, 1382, 1388, 1390, 1391, 1392,
     1393, 1394, 1395, 1389, 1396, 1383, 1397, 1399, 1400, 1401,
     1402, 1384, 1403, 1404, 1405, 1406, 1412, 1413, 1385, 1386,
     3556, 3556, 1414, 1387, 1398, 1388, 1390, 1391, 1392, 1393,
     1394, 1395, 1389, 1396, 1407, 1397, 1399, 1400, 1401, 1402,
     1409, 1403, 1404, 1405, 1406, 1412, 1413, 1415, 1416, 1408,
     1410, 1414, 1417, 1398, 1418, 1419, 1420, 1421, 1422, 1423,
     1411, 1424, 1425, 1407, 1427, 1428, 1429, 1431, 1432, 1433,

     1434, 1435, 1436, 1437, 1426, 1438, 1415, 1416, 1408, 1410,
     1439, 1417, 1440, 1418, 1419, 1420, 1421, 1422, 1423, 1411,
     1424, 1425, 1441, 1427, 1428, 1429, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1426, 1438, 1442, 1443, 1444, 1445, 1439,
     1446, 1440, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
     1455, 1441, 1456, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
     1465, 1457, 1466, 1467, 1442, 1443, 1444, 1445, 1468, 1446,
     1469, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1470, 1456, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1471, 1466, 1467, 1472, 1473, 1476, 1474, 1468, 1475, 1469,

     1477, 1478, 1479, 1480, 1484, 1481, 1482, 1485, 1486, 1470,
     1488, 1489, 1487, 1490,  885,  885,  885, 3556, 3556, 1471,
     3556, 1497, 1472, 1473, 1476, 1474, 3556, 1475, 1483, 1477,
     1478, 1479, 1480, 1484, 1481, 1482, 1485, 1486, 3556, 1488,
     1489, 1487, 1490, 1492, 1492, 1492,  887,  887,  887, 1493,
     1497, 1493, 1498, 1494, 1494, 1494, 1499, 1483,  888,  365,
     1500,  366, 1495, 1495, 1495, 1496, 1496, 1496,  891,  891,
      891, 1501, 1502, 1503,  368, 1504, 1505, 1506, 1508, 1509,
     1510, 1498, 1512, 1513, 1514, 1499, 1515,  888, 1516, 1500,
     1517, 1519, 1518, 1520, 1521, 1511, 1525, 1526, 1527, 3556,

     1501, 1502, 1503,  368, 1504, 1505, 1506, 1508, 1509, 1510,
     1530, 1512, 1513, 1514, 1522, 1515, 1531, 1516, 1532, 1517,
     1519, 1518, 1520, 1521, 1511, 1525, 1526, 1527, 1523, 1524,
     1528, 1533, 1534, 1529, 1535, 1536, 1537, 1538, 1539, 1530,
     1540, 1541, 1543, 1522, 1544, 1531, 1545, 1532, 1542, 1546,
     1547, 1548, 1549, 1552, 1550, 1553, 1554, 1523, 1524, 1528,
     1533, 1534, 1529, 1535, 1536, 1537, 1538, 1539, 1555, 1540,
     1541, 1543, 1551, 1544, 1556, 1545, 1557, 1542, 1546, 1547,
     1548, 1549, 1552, 1550, 1553, 1554, 1558, 1559, 1562, 1560,
     1565, 1566, 1567, 1568, 1569, 1570, 1571, 1555, 1563, 1572,

     1573, 1551, 1574, 1556, 1561, 1557, 1575, 1576, 1564, 1577,
     1580, 1581, 1582, 1584, 1578, 1558, 1559, 1585, 1560, 1565,
     1566, 1567, 1568, 1569, 1570, 1571, 1579, 1563, 1572, 1573,
     1586, 1574, 1587, 1561, 1588, 1575, 1576, 1564, 1577, 1580,
     1581, 1582, 1584, 1578, 1589, 1590, 1585, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1579, 1599, 1600, 1601, 1586,
     1602, 1587, 1603, 1588, 1604, 1605, 1606, 1607, 1608, 1611,
     1612, 1613, 1614, 1589, 1590, 1609, 1591, 1592, 1593, 1594,
     1595, 1596, 1597, 1598, 1610, 1599, 1600, 1601, 1615, 1602,
     1616, 1603, 1617, 1604, 1605, 1606, 1607, 1608, 1611, 1612,

     1613, 1614, 1618, 1619, 1609, 1620, 1621, 1622, 1623, 1624,
     1625, 1626, 1627, 1629, 1628, 1630, 1631, 1615, 1632, 1616,
     1633, 1617, 1637, 1634, 1635, 1638, 1639, 1641, 1642, 1643,
     1640, 1618, 1619, 3556, 1620, 1621, 1622, 1623, 1624, 1625,
     1626, 1627, 1629, 1628, 1630, 1631, 1636, 1632, 3556, 1633,
     3556, 1637, 1634, 1635, 1638, 1639, 1641, 1642, 1643, 1640,
     1644, 1644, 1644, 1038, 1038, 1038, 1039, 1039, 1039, 1647,
     1647, 1647, 1649, 1649, 1649, 1636, 1652, 1645, 1040, 1645,
     1046, 1646, 1646, 1646,  472, 3556,  473, 1648, 1648, 1648,
     1044, 1044, 1044, 1045, 1045, 1045, 1650, 1650, 1650,  475,

     1046, 1049,  586, 1653,  586, 1652, 1654, 1040,  586, 1655,
     1656, 1657, 1658, 1651, 1651, 1651, 1659, 1660,  586, 1661,
     3556, 1663,  586, 1664, 1667, 1668, 1669, 1665,  475, 1670,
     1671, 1672, 1653, 1673, 1674, 1654, 1675, 1676, 1655, 1656,
     1657, 1658, 1666, 1680, 3556, 1659, 1660, 3556, 1661,  586,
     1663, 1685, 1664, 1667, 1668, 1669, 1665, 1686, 1670, 1671,
     1672, 1677, 1673, 1674, 1687, 1675, 1676, 1681, 1682, 1688,
     1683, 1666, 1680, 1684, 1689, 1678, 1679, 1690, 1691, 1692,
     1685, 1693, 1694, 1695, 1696, 1698, 1686, 1699, 1700, 1701,
     1677, 1697, 1702, 1687, 1703, 1704, 1681, 1682, 1688, 1683,

     1707, 1705, 1684, 1689, 1678, 1679, 1690, 1691, 1692, 1708,
     1693, 1694, 1695, 1696, 1698, 1709, 1699, 1700, 1701, 1706,
     1697, 1702, 1710, 1703, 1704, 1711, 1712, 1713, 1714, 1707,
     1705, 1715, 1717, 1720, 1721, 1722, 1723, 1724, 1708, 1725,
     1726, 1727, 1718, 1728, 1709, 1729, 1716, 1730, 1706, 1731,
     1732, 1710, 1719, 1735, 1711, 1712, 1713, 1714, 1736, 1737,
     1715, 1733, 1720, 1721, 1722, 1723, 1724, 1739, 1725, 1726,
     1727, 1718, 1728, 1734, 1729, 1716, 1730, 1740, 1731, 1732,
     1741, 1719, 1735, 1742, 1743, 1744, 1745, 1736, 1737, 1746,
     1733, 1747, 1748, 1749, 1750, 1751, 1739, 1752, 1753, 1754,

     1755, 1756, 1734, 1757, 1758, 1759, 1740, 1760, 1761, 1741,
     1762, 1763, 1742, 1743, 1744, 1745, 1764, 1766, 1746, 1767,
     1747, 1748, 1749, 1750, 1751, 1765, 1752, 1753, 1754, 1755,
     1756, 1768, 1757, 1758, 1759, 1769, 1760, 1761, 1770, 1762,
     1763, 1771, 1772, 1773, 1774, 1764, 1766, 1775, 1767, 1776,
     1777, 1778, 1779, 1780, 1781, 1782, 1784, 1783, 1785, 1786,
     1768, 1787, 1788, 1792, 1769, 1793, 1796, 1770, 3556, 1797,
     1771, 1772, 1773, 1774, 1789, 1790, 1775, 1798, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1784, 1783, 1785, 1786, 1794,
     1787, 1788, 1792, 1795, 1793, 1796, 1799, 1791, 1797, 1800,

     1801, 1802, 1803, 1789, 1790, 1804, 1798, 1805, 1806, 1807,
     1808, 1809, 1810, 3556, 1813, 1811, 1814, 1815, 1794, 1816,
     1817, 1818, 1795, 1819, 1820, 1799, 1791, 1821, 1800, 1801,
     1802, 1803, 1822, 1823, 1804, 1827, 1805, 1806, 1807, 1808,
     1809, 1810, 1812, 1813, 1811, 1814, 1815, 1824, 1816, 1817,
     1818, 1828, 1819, 1820, 1829, 1830, 1821, 1831, 1832, 1833,
     1834, 1822, 1823, 1825, 1827, 1826, 1835, 1836, 1837, 1838,
     1839, 1840, 1841, 1842, 1843, 1844, 1824, 1845, 1846, 1847,
     1828, 1848, 1849, 1829, 1830, 1850, 1831, 1832, 1833, 1834,
     1851, 1852, 1825, 1853, 1826, 1835, 1836, 1837, 1838, 1839,

     1840, 1841, 1842, 1843, 1844, 1854, 1845, 1846, 1847, 1855,
     1848, 1849, 1857, 1859, 1850, 1861, 1862, 1863, 1864, 1851,
     1852, 1865, 1853, 1858, 1866, 1867, 1868, 1869, 1870, 1871,
     1872, 1873, 1874, 1875, 1854, 1876, 1877, 1878, 1855, 1879,
     1880, 1857, 1859, 1881, 1861, 1862, 1863, 1864, 1882, 1883,
     1865, 1886, 1858, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
     1873, 1874, 1875, 1884, 1876, 1877, 1878, 1885, 1879, 1880,
     1887, 1888, 1881, 1889, 1890, 1891, 1892, 1882, 1883, 1893,
     1886, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
     1903, 1904, 1884, 1906, 1905, 1907, 1885, 1908, 1909, 1887,

     1888, 1910, 1889, 1890, 1891, 1892, 1911, 1912, 1893, 1913,
     1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
     1904, 1914, 1906, 1905, 1907, 1915, 1908, 1909, 1916, 1917,
     1910, 1918, 1919, 1920, 1921, 1911, 1912, 1922, 1913, 1343,
     1343, 1343, 1343, 1343, 1343, 1923, 1924, 1925, 1926, 1927,
     1914, 1928, 1929, 1930, 1915, 1931, 1932, 1916, 1917, 1933,
     1918, 1919, 1920, 1921, 1935, 1936, 1922, 1937, 1938, 1939,
     1940, 1941, 1942, 1943, 1923, 1924, 1925, 1926, 1927, 1944,
     1928, 1929, 1930, 1945, 1931, 1932, 1934, 1946, 1933, 1949,
     1950, 1951, 1952, 1935, 1936, 1953, 1937, 1938, 1939, 1940,

     1941, 1942, 1943, 1947, 1954, 1948, 1955, 1956, 1944, 1957,
     1958, 1959, 1945, 1960, 1961, 1962, 1946, 1963, 1949, 1950,
     1951, 1952, 1964, 1965, 1953, 1966, 1967, 1968, 1969, 1970,
     1971, 1972, 1947, 1954, 1948, 1955, 1956, 1973, 1957, 1958,
     1959, 1974, 1960, 1961, 1962, 1975, 1963, 1976, 1977, 1981,
     1979, 1964, 1965, 1983, 1966, 1967, 1968, 1969, 1970, 1971,
     1972, 1980, 1984, 1985, 1986, 1987, 1973, 1988, 1989, 1990,
     1974, 1991, 1992, 1993, 1975, 1994, 1976, 1977, 1981, 1979,
     1995, 1996, 1983, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
     1980, 1984, 1985, 1986, 1987, 2004, 1988, 1989, 1990, 2005,

     1991, 1992, 1993, 2006, 1994, 2008, 2009, 2007, 2010, 1995,
     1996, 2011, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2012,
     2013, 2014, 2015, 2016, 2004, 2017, 2018, 2019, 2005, 2020,
     2021, 2022, 2006, 2023, 2008, 2009, 2007, 2010, 2024, 2025,
     2011, 2026, 2028, 2029, 2027, 2030, 2031, 2032, 2012, 2013,
     2014, 2015, 2016, 2033, 2017, 2018, 2019, 2034, 2020, 2021,
     2022, 2035, 2023, 2036, 2037, 2038, 2039, 2024, 2025, 2040,
     2026, 2028, 2029, 2027, 2030, 2031, 2032, 2041, 2042, 1491,
     1491, 1491, 2033, 2043, 2043, 2043, 2034, 2044, 2044, 2044,
     2035, 2045, 2036, 2037, 2038, 2039, 2046, 2047, 2040, 1494,

     1494, 1494,  366, 1495, 1495, 1495, 2041, 2042, 1496, 1496,
     1496, 2048, 2049, 2050, 2051,  368, 2052, 2053, 2054, 2055,
     2045, 2056, 2057, 2059, 2060, 2046, 2047, 2061, 2062, 2063,
     2064, 2065, 2066, 2067, 2068, 2069, 2073, 2074, 2075, 2076,
     2048, 2049, 2050, 2051,  368, 2052, 2053, 2054, 2055, 2058,
     2056, 2057, 2059, 2060, 2070, 2077, 2061, 2062, 2063, 2064,
     2065, 2066, 2067, 2068, 2069, 2073, 2074, 2075, 2076, 2078,
     2071, 2079, 2072, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2070, 2077, 2090, 2091, 2092, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 2100, 2101, 3556, 2078, 2071,

     2079, 2072, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
     2088, 2089, 2105, 2107, 2090, 2091, 2092, 2093, 2094, 2095,
     2096, 2097, 2098, 2099, 2100, 2101, 2103, 2108, 2109, 2110,
     2111, 2112, 2113, 2114, 2115, 2116, 2117, 2104, 2118, 2119,
     2120, 2105, 2107, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
     2128, 2129, 3556, 2132, 2133, 2103, 2108, 2109, 2110, 2111,
     2112, 2113, 2114, 2115, 2116, 2117, 2104, 2118, 2119, 2120,
     2134, 2135, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
     2129, 2130, 2132, 2133, 2136, 2131, 2137, 2138, 2139, 2140,
     2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2134,

     2135, 2150, 2152, 2153, 2151, 2154, 2155, 2156, 2157, 2158,
     2130, 2159, 2160, 2136, 2131, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2161, 2162,
     2150, 2152, 2153, 2151, 2154, 2155, 2156, 2157, 2158, 2163,
     2159, 2160, 2164, 2165, 2166, 1644, 1644, 1644, 2167, 2167,
     2167, 1646, 1646, 1646, 2168, 2168, 2168, 2161, 2162,  472,
     2171, 2172, 1648, 1648, 1648, 1649, 1649, 1649, 2163, 1046,
     2173, 2164, 2165, 2166,  475, 2170, 2170, 2170, 2174, 2175,
     2176, 2177, 1045, 1045, 1045, 2178, 2179, 2180, 2181, 2171,
     2172, 2182, 2183, 2185, 2186, 2187, 2188, 2189, 2190, 2173,

     2191, 2192, 2193,  475, 2194, 2195, 2199, 2174, 2175, 2176,
     2177, 2200, 2201, 2202, 2178, 2179, 2180, 2181, 2203, 2184,
     2182, 2183, 2185, 2186, 2187, 2188, 2189, 2190, 2196, 2191,
     2192, 2193, 2204, 2194, 2195, 2199, 2205, 2206, 2207, 2208,
     2200, 2201, 2202, 2209, 2197, 2210, 2198, 2203, 2211, 2212,
     2213, 2214, 2215, 2216, 2217, 2218, 2219, 2196, 2220, 2221,
     2222, 2204, 2223, 2224, 2225, 2205, 2206, 2207, 2208, 2226,
     2227, 2231, 2209, 2197, 2210, 2198, 2233, 2211, 2212, 2213,
     2214, 2215, 2216, 2217, 2218, 2219, 2229, 2220, 2221, 2222,
     2234, 2223, 2224, 2225, 2235, 2236, 2237, 2230, 2226, 2227,

     2231, 2238, 2239, 2240, 2241, 2233, 2242, 2243, 2244, 2245,
     2246, 2247, 2248, 2249, 2250, 2229, 2251, 2252, 2253, 2234,
     2254, 2255, 2258, 2235, 2236, 2237, 2230, 2259, 2260, 2261,
     2238, 2239, 2240, 2241, 2262, 2242, 2243, 2244, 2245, 2246,
     2247, 2248, 2249, 2250, 2256, 2251, 2252, 2253, 2257, 2254,
     2255, 2258, 2263, 2264, 2265, 2266, 2259, 2260, 2261, 2267,
     2268, 2269, 2270, 2262, 2271, 2272, 2273, 2274, 2275, 2276,
     2278, 2279, 2277, 2256, 2280, 2281, 2282, 2257, 2283, 2284,
     2285, 2263, 2264, 2265, 2266, 2286, 2287, 2288, 2267, 2268,
     2269, 2270, 2289, 2271, 2272, 2273, 2274, 2275, 2276, 2278,

     2279, 2277, 2290, 2280, 2281, 2282, 2291, 2283, 2284, 2285,
     2292, 2294, 2295, 2296, 2286, 2287, 2288, 2297, 2298, 2299,
     2300, 2289, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
     2309, 2290, 2310, 2311, 2312, 2291, 2313, 2314, 2315, 2292,
     2294, 2295, 2296, 3556, 2319, 2320, 2297, 2298, 2299, 2300,
     2321, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,
     2316, 2310, 2311, 2312, 2322, 2313, 2314, 2315, 2323, 2324,
     2317, 2325, 2318, 2319, 2320, 2326, 2327, 2328, 2329, 2321,
     2330, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2316,
     2342, 2340, 2343, 2322, 2341, 2344, 2345, 2323, 2324, 2317,

     2325, 2318, 2346, 2347, 2326, 2327, 2328, 2329, 2348, 2330,
     2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2349, 2342,
     2340, 2343, 2351, 2341, 2344, 2345, 2352, 2353, 2354, 2355,
     2356, 2346, 2347, 2357, 2358, 2359, 2360, 2348, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2368, 2369, 2349, 2370, 2371,
     2372, 2351, 2373, 2374, 2375, 2352, 2353, 2354, 2355, 2356,
     2376, 2377, 2357, 2358, 2359, 2360, 2378, 2361, 2362, 2363,
     2364, 2365, 2366, 2367, 2368, 2369, 2379, 2370, 2371, 2372,
     2380, 2373, 2374, 2375, 2381, 2382, 2383, 2384, 2385, 2376,
     2377, 2387, 2388, 2389, 2390, 2378, 2391, 2392, 2393, 2394,

     2395, 2396, 2397, 2398, 2399, 2379, 2400, 2401, 2402, 2380,
     2403, 2404, 2405, 2381, 2382, 2383, 2384, 2385, 2406, 2407,
     2387, 2388, 2389, 2390, 2408, 2391, 2392, 2393, 2394, 2395,
     2396, 2397, 2398, 2399, 2409, 2400, 2401, 2402, 2412, 2403,
     2404, 2405, 2413, 2414, 2410, 2415, 2411, 2406, 2407, 2416,
     2417, 2418, 2419, 2408, 2420, 2421, 2422, 2423, 2425, 2426,
     2427, 2428, 2429, 2409, 2430, 2431, 2432, 2412, 2435, 2436,
     3556, 2413, 2414, 2410, 2415, 2411, 2437, 2438, 2416, 2417,
     2418, 2419, 2439, 2420, 2421, 2422, 2423, 2425, 2426, 2427,
     2428, 2429, 2440, 2430, 2431, 2432, 2433, 2435, 2436, 2434,

     2441, 2442, 2444, 2445, 2446, 2437, 2438, 2447, 2448, 2449,
     2450, 2439, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458,
     2459, 2440, 2460, 2461, 2462, 2433, 2463, 2464, 2434, 2441,
     2442, 2444, 2445, 2446, 2465, 2466, 2447, 2448, 2449, 2450,
     2467, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459,
     2468, 2460, 2461, 2462, 2469, 2463, 2464, 2470, 2471, 2472,
     2473, 2474, 2475, 2465, 2466, 2476, 2477, 2478, 2481, 2467,
     2044, 2044, 2044, 2482, 2483, 2484, 2485, 2486, 2487, 2468,
     2488, 2489, 2490, 2469, 2491, 2492, 2470, 2471, 2472, 2473,
     2474, 2475, 2493, 2494, 2476, 2477, 2478, 2481, 2495, 2496,

     2497, 2498, 2482, 2483, 2484, 2485, 2486, 2487, 2499, 2488,
     2489, 2490, 2500, 2491, 2492, 2501, 2502, 2506, 2507, 2508,
     2509, 2493, 2494, 2503, 2510, 2511, 2512, 2495, 2496, 2497,
     2498, 2513, 2514, 2504, 2515, 2505, 2516, 2499, 2517, 2519,
     2520, 2500, 2521, 2522, 2501, 2502, 2506, 2507, 2508, 2509,
     2523, 2524, 2503, 2510, 2511, 2512, 2525, 2526, 2529, 2530,
     2513, 2514, 2504, 2515, 2505, 2516, 2531, 2517, 2519, 2520,
     2527, 2521, 2522, 2528, 2532, 2533, 2534, 2535, 2536, 2523,
     2524, 2538, 2539, 2540, 2541, 2525, 2526, 2529, 2530, 2542,
     2543, 2544, 2545, 2546, 2547, 2531, 2548, 2549, 2550, 2527,

     2551, 2552, 2528, 2532, 2533, 2534, 2535, 2536, 2553, 2554,
     2538, 2539, 2540, 2541, 2555, 2556, 2557, 2558, 2542, 2543,
     2544, 2545, 2546, 2547, 2559, 2548, 2549, 2550, 2560, 2551,
     2552, 2561, 2562, 2563, 2564, 2565, 2566, 2553, 2554, 2567,
     2568, 2569, 2570, 2555, 2556, 2557, 2558, 2571, 2572, 2167,
     2167, 2167, 2577, 2559, 2574, 2574, 2574, 2560, 2578, 2579,
     2561, 2562, 2563, 2564, 2565, 2566, 2580, 2581, 2567, 2568,
     2569, 2570, 2575, 2575, 2575, 2582, 2571, 2572, 2583, 2584,
     2585, 2577, 2586, 2587, 2588, 2589, 2590, 2578, 2579, 2591,
     2592, 2593, 2594, 2595, 2596, 2580, 2581, 2597, 2598, 2602,

     2603, 2604, 2605, 2606, 2582, 3556, 2607, 2583, 2584, 2585,
     2608, 2586, 2587, 2588, 2589, 2590, 2609, 2610, 2591, 2592,
     2593, 2594, 2595, 2596, 2599, 2611, 2597, 2598, 2602, 2603,
     2604, 2605, 2606, 2612, 2600, 2607, 2601, 2613, 2615, 2608,
     2616, 2617, 2618, 2619, 2620, 2609, 2610, 2621, 2622, 2623,
     2625, 2626, 2624, 2599, 2611, 2627, 2628, 2629, 2630, 2631,
     2632, 2634, 2612, 2600, 2635, 2601, 2613, 2615, 2636, 2616,
     2617, 2618, 2619, 2620, 2637, 2638, 2621, 2622, 2623, 2625,
     2626, 2624, 2639, 2640, 2627, 2628, 2629, 2630, 2631, 2632,
     2634, 2641, 2642, 2635, 2643, 2644, 2645, 2636, 2646, 2647,

     2648, 2649, 2650, 2637, 2638, 2651, 2652, 2653, 2654, 2655,
     2656, 2639, 2640, 2657, 2658, 2659, 2660, 2661, 2662, 2663,
     2641, 2642, 2664, 2643, 2644, 2645, 2665, 2646, 2647, 2648,
     2649, 2650, 2666, 2667, 2651, 2652, 2653, 2654, 2655, 2656,
     2668, 2669, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2670,
     2671, 2664, 2672, 2673, 2674, 2665, 2675, 2676, 2677, 2678,
     2679, 2666, 2667, 2680, 2681, 2682, 2683, 2684, 2685, 2668,
     2669, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2670, 2671,
     2693, 2672, 2673, 2674, 2694, 2675, 2676, 2677, 2678, 2679,
     2695, 2696, 2680, 2681, 2682, 2683, 2684, 2685, 2697, 2698,

     2686, 2687, 2688, 2689, 2690, 2691, 2692, 2699, 2700, 2693,
     2701, 2702, 2703, 2694, 2704, 2705, 2706, 2707, 2708, 2695,
     2696, 2709, 2710, 2711, 2712, 2713, 2714, 2697, 2698, 2715,
     2716, 2717, 2718, 2719, 2720, 2721, 2699, 2700, 2722, 2701,
     2702, 2703, 2723, 2704, 2705, 2706, 2707, 2708, 2724, 2725,
     2709, 2710, 2711, 2712, 2713, 2714, 2726, 2727, 2715, 2716,
     2717, 2718, 2719, 2720, 2721, 2728, 2729, 2722, 2730, 2731,
     2732, 2723, 2733, 2734, 2735, 2736, 2737, 2724, 2725, 2738,
     2739, 2740, 2741, 2742, 2743, 2726, 2727, 2744, 2745, 2746,
     2747, 2748, 2749, 2750, 2728, 2729, 2751, 2730, 2731, 2732,

     2752, 2733, 2734, 2735, 2736, 2737, 2753, 2754, 2738, 2739,
     2740, 2741, 2742, 2743, 2755, 2756, 2744, 2745, 2746, 2747,
     2748, 2749, 2750, 2757, 2758, 2751, 2759, 2760, 2761, 2752,
     2762, 2763, 2764, 2765, 2766, 2753, 2754, 2767, 2768, 2769,
     2770, 2771, 2772, 2755, 2756, 2773, 2774, 2775, 2776, 2777,
     2778, 2779, 2757, 2758, 2780, 2759, 2760, 2761, 2781, 2762,
     2763, 2764, 2765, 2766, 2782, 2783, 2767, 2768, 2769, 2770,
     2771, 2772, 2784, 2785, 2773, 2774, 2775, 2776, 2777, 2778,
     2779, 2786, 2787, 2780, 2788, 2789, 2790, 2781, 2791, 2792,
     2793, 2794, 2795, 2782, 2783, 2796, 2797, 2798, 2799, 2799,

     2799, 2784, 2785, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
     2786, 2787, 2807, 2788, 2789, 2790, 2808, 2791, 2792, 2793,
     2794, 2795, 2809, 2810, 2796, 2797, 2798, 2811, 2812, 2813,
     2814, 2815, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2816,
     2817, 2807, 2818, 2819, 2820, 2808, 2821, 2822, 2823, 2824,
     2825, 2809, 2810, 2826, 2827, 2828, 2811, 2812, 2813, 2814,
     2815, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2816, 2817,
     2836, 2818, 2819, 2820, 2837, 2821, 2822, 2823, 2824, 2825,
     2838, 2839, 2826, 2827, 2828, 2840, 2841, 2842, 2843, 2844,
     2829, 2830, 2831, 2832, 2833, 2834, 2835, 2845, 2846, 2836,

     2847, 2848, 2849, 2837, 2850, 2851, 2852, 2853, 2854, 2838,
     2839, 2855, 2856, 2857, 2840, 2841, 2842, 2843, 2844, 2858,
     2859, 2860, 2861, 2862, 2863, 2864, 2845, 2846, 3556, 2847,
     2848, 2849, 2867, 2850, 2851, 2852, 2853, 2854, 2868, 2869,
     2855, 2856, 2857, 2865, 2865, 2865, 2870, 2871, 2858, 2859,
     2860, 2861, 2862, 2863, 2864, 2574, 2574, 2574, 2866, 2866,
     2866, 2867, 2872, 2873, 2874, 2875, 2876, 2868, 2869, 2877,
     2878, 2879, 2880, 2881, 2882, 2870, 2871, 2883, 2884, 2885,
     2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895,
     2896, 2872, 2873, 2874, 2875, 2876, 2897, 2898, 2877, 2878,

     2879, 2880, 2881, 2882, 2899, 2900, 2883, 2884, 2885, 2886,
     2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896,
     2901, 2902, 2903, 2904, 2905, 2897, 2898, 2906, 2907, 2908,
     2909, 2910, 2911, 2899, 2900, 2912, 2913, 2914, 2915, 2916,
     2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2901,
     2902, 2903, 2904, 2905, 2926, 2927, 2906, 2907, 2908, 2909,
     2910, 2911, 2928, 2929, 2912, 2913, 2914, 2915, 2916, 2917,
     2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2930, 2931,
     2932, 2933, 2934, 2926, 2927, 2935, 2936, 2937, 2938, 2940,
     2941, 2928, 2929, 2942, 2943, 2944, 2945, 2946, 2947, 2948,

     2949, 2950, 2951, 2952, 2953, 2954, 2955, 2930, 2931, 2932,
     2933, 2934, 2956, 2957, 2935, 2936, 2937, 2938, 2940, 2941,
     2958, 2959, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
     2950, 2951, 2952, 2953, 2954, 2955, 2960, 2961, 2962, 2963,
     2964, 2956, 2957, 2965, 2966, 2967, 2968, 2969, 2970, 2958,
     2959, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979,
     2981, 2982, 2983, 2984, 2985, 2960, 2961, 2962, 2963, 2964,
     2986, 2987, 2965, 2966, 2967, 2968, 2969, 2970, 2988, 2989,
     2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2981,
     2982, 2983, 2984, 2985, 2990, 2991, 2992, 2993, 2994, 2986,

     2987, 2995, 2996, 2997, 2998, 2999, 3000, 2988, 2989, 3001,
     3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011,
     3012, 3013, 3556, 2990, 2991, 2992, 2993, 2994, 3014, 3015,
     2995, 2996, 2997, 2998, 2999, 3000, 3016, 3017, 3001, 3002,
     3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012,
     3013, 2799, 2799, 2799, 3018, 3019, 3020, 3014, 3015, 3022,
     3023, 3024, 3025, 3026, 3027, 3016, 3017, 3028, 3029, 3030,
     3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040,
     3041, 3042, 3043, 3018, 3019, 3020, 3044, 3045, 3022, 3023,
     3024, 3025, 3026, 3027, 3046, 3047, 3028, 3029, 3030, 3031,

     3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041,
     3042, 3043, 3048, 3049, 3050, 3044, 3045, 3051, 3052, 3053,
     3054, 3055, 3056, 3046, 3047, 2865, 2865, 2865, 2574, 2574,
     2574, 3057, 3058, 3059, 3060, 3061, 3063, 3064, 3065, 3066,
     3067, 3048, 3049, 3050, 3068, 3069, 3051, 3052, 3053, 3054,
     3055, 3056, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077,
     3057, 3058, 3059, 3060, 3061, 3063, 3064, 3065, 3066, 3067,
     3078, 3079, 3080, 3068, 3069, 3081, 3082, 3083, 3084, 3085,
     3086, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3087,
     3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3078,

     3079, 3080, 3097, 3098, 3081, 3082, 3083, 3084, 3085, 3086,
     3099, 3100, 3556, 3107, 3556, 3556, 3556, 3108, 3087, 3088,
     3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3101, 3102,
     3109, 3097, 3098, 3110, 3111, 3112, 3113, 3114, 3115, 3099,
     3100, 3103, 3107, 3104, 3105, 3106, 3108, 3116, 3117, 3118,
     3119, 3120, 3121, 3122, 3125, 3126, 3123, 3101, 3102, 3109,
     3124, 3127, 3110, 3111, 3112, 3113, 3114, 3115, 3128, 3129,
     3103, 3130, 3104, 3105, 3106, 3131, 3116, 3117, 3118, 3119,
     3120, 3121, 3122, 3125, 3126, 3123, 3132, 3133, 3134, 3124,
     3127, 3135, 3136, 3137, 3138, 3139, 3144, 3128, 3129, 3145,

     3130, 3146, 3147, 3148, 3131, 3149, 3150, 3140, 3151, 3141,
     3142, 3143, 3152, 3153, 3154, 3132, 3133, 3134, 3155, 3156,
     3135, 3136, 3137, 3138, 3139, 3144, 3157, 3158, 3145, 3159,
     3146, 3147, 3148, 3162, 3149, 3150, 3140, 3151, 3141, 3142,
     3143, 3152, 3153, 3154, 3163, 3160, 3164, 3155, 3156, 3161,
     3165, 3166, 3167, 3168, 3169, 3157, 3158, 3170, 3159, 3171,
     3172, 3173, 3162, 3174, 3181, 3182, 3183, 3184, 3556, 3185,
     3556, 3556, 3556, 3163, 3160, 3164, 3186, 3187, 3161, 3165,
     3166, 3167, 3168, 3169, 3175, 3176, 3170, 3188, 3171, 3172,
     3173, 3189, 3174, 3181, 3182, 3183, 3184, 3177, 3185, 3178,

     3179, 3180, 3190, 3191, 3192, 3186, 3187, 3193, 3194, 3195,
     3196, 3197, 3199, 3175, 3176, 3198, 3188, 3200, 3201, 3202,
     3189, 3203, 3204, 3205, 3206, 3207, 3177, 3208, 3178, 3179,
     3180, 3190, 3191, 3192, 3209, 3210, 3193, 3194, 3195, 3196,
     3197, 3199, 3211, 3556, 3198, 3556, 3200, 3201, 3202, 3218,
     3203, 3204, 3205, 3206, 3207, 3219, 3208, 3212, 3213, 3220,
     3221, 3222, 3223, 3209, 3210, 3224, 3225, 3226, 3227, 3228,
     3214, 3211, 3215, 3216, 3217, 3229, 3230, 3231, 3218, 3232,
     3233, 3234, 3236, 3237, 3219, 3235, 3212, 3213, 3220, 3221,
     3222, 3223, 3238, 3239, 3224, 3225, 3226, 3227, 3228, 3214,

     3240, 3215, 3216, 3217, 3229, 3230, 3231, 3241, 3232, 3233,
     3234, 3236, 3237, 3242, 3235, 3243, 3244, 3245, 3246, 3247,
     3248, 3238, 3239, 3250, 3249, 3251, 3252, 3253, 3254, 3240,
     3255, 3256, 3257, 3258, 3259, 3260, 3241, 3261, 3262, 3264,
     3265, 3263, 3242, 3266, 3243, 3244, 3245, 3246, 3247, 3248,
     3267, 3270, 3250, 3249, 3251, 3252, 3253, 3254, 3271, 3255,
     3256, 3257, 3258, 3259, 3260, 3272, 3261, 3262, 3264, 3265,
     3263, 3268, 3266, 3273, 3274, 3269, 3275, 3276, 3277, 3267,
     3270, 3278, 3279, 3280, 3281, 3282, 3284, 3271, 3283, 3285,
     3286, 3287, 3288, 3290, 3272, 3291, 3289, 3292, 3293, 3294,

     3268, 3295, 3273, 3274, 3269, 3275, 3276, 3277, 3296, 3297,
     3278, 3279, 3280, 3281, 3282, 3284, 3298, 3283, 3285, 3286,
     3287, 3288, 3290, 3299, 3291, 3289, 3292, 3293, 3294, 3300,
     3295, 3301, 3302, 3304, 3305, 3303, 3306, 3296, 3297, 3307,
     3308, 3310, 3311, 3312, 3309, 3298, 3313, 3314, 3315, 3316,
     3317, 3318, 3299, 3319, 3320, 3321, 3322, 3324, 3300, 3323,
     3301, 3302, 3304, 3305, 3303, 3306, 3325, 3326, 3307, 3308,
     3310, 3311, 3312, 3309, 3327, 3313, 3314, 3315, 3316, 3317,
     3318, 3328, 3319, 3320, 3321, 3322, 3324, 3329, 3323, 3330,
     3331, 3332, 3333, 3334, 3335, 3325, 3326, 3336, 3337, 3338,

     3339, 3340, 3341, 3327, 3342, 3343, 3344, 3345, 3346, 3347,
     3328, 3348, 3349, 3350, 3351, 3352, 3329, 3353, 3330, 3331,
     3332, 3333, 3334, 3335, 3354, 3355, 3336, 3337, 3338, 3339,
     3340, 3341, 3356, 3342, 3343, 3344, 3345, 3346, 3347, 3357,
     3348, 3349, 3350, 3351, 3352, 3358, 3353, 3359, 3360, 3361,
     3362, 3363, 3364, 3354, 3355, 3365, 3366, 3367, 3368, 3369,
     3370, 3356, 3371, 3372, 3373, 3374, 3375, 3376, 3357, 3377,
     3378, 3379, 3380, 3381, 3358, 3382, 3359, 3360, 3361, 3362,
     3363, 3364, 3383, 3384, 3365, 3366, 3367, 3368, 3369, 3370,
     3385, 3371, 3372, 3373, 3374, 3375, 3376, 3386, 3377, 3378,

     3379, 3380, 3381, 3387, 3382, 3388, 3389, 3390, 3391, 3392,
     3393, 3383, 3384, 3394, 3395, 3396, 3397, 3398, 3399, 3385,
     3400, 3401, 3402, 3403, 3404, 3405, 3386, 3406, 3407, 3408,
     3409, 3410, 3387, 3411, 3388, 3389, 3390, 3391, 3392, 3393,
     3412, 3413, 3394, 3395, 3396, 3397, 3398, 3399, 3414, 3400,
     3401, 3402, 3403, 3404, 3405, 3415, 3406, 3407, 3408, 3409,
     3410, 3416, 3411, 3417, 3418, 3419, 3420, 3421, 3422, 3412,
     3413, 3423, 3424, 3425, 3426, 3427, 3428, 3414, 3429, 3430,
     3431, 3432, 3433, 3434, 3415, 3435, 3436, 3437, 3438, 3439,
     3416, 3440, 3417, 3418, 3419, 3420, 3421, 3422, 3441, 3442,

     3423, 3424, 3425, 3426, 3427, 3428, 3443, 3429, 3430, 3431,
     3432, 3433, 3434, 3444, 3435, 3436, 3437, 3438, 3439, 3445,
     3440, 3446, 3447, 3448, 3449, 3450, 3451, 3441, 3442, 3452,
     3453, 3454, 3455, 3456, 3457, 3443, 3458, 3459, 3460, 3461,
     3462, 3463, 3444, 3464, 3465, 3466, 3467, 3468, 3445, 3469,
     3446, 3447, 3448, 3449, 3450, 3451, 3470, 3471, 3452, 3453,
     3454, 3455, 3456, 3457, 3472, 3458, 3459, 3460, 3461, 3462,
     3463, 3473, 3464, 3465, 3466, 3467, 3468, 3474, 3469, 3475,
     3476, 3477, 3478, 3479, 3480, 3470, 3471, 3481, 3482, 3483,
     3485, 3487, 3489, 3472, 3491, 3492, 3493, 3494, 3495, 3496,

     3473, 3497, 3498, 3499, 3500, 3501, 3474, 3502, 3475, 3476,
     3477, 3478, 3479, 3480, 3503, 3504, 3481, 3482, 3483, 3485,
     3487, 3489, 3505, 3491, 3492, 3493, 3494, 3495, 3496, 3506,
     3497, 3498, 3499, 3500, 3501, 3507, 3502, 3508, 3509, 3510,
     3511, 3512, 3513, 3503, 3504, 3514, 3515, 3516, 3517, 3518,
     3519, 3505, 3520, 3521, 3522, 3523, 3524, 3525, 3506, 3526,
     3527, 3528, 3529, 3530, 3507, 3531, 3508, 3509, 3510, 3511,
     3512, 3513, 3536, 3537, 3514, 3515, 3516, 3517, 3518, 3519,
     3538, 3520, 3521, 3522, 3523, 3524, 3525, 3539, 3526, 3527,
     3528, 3529, 3530, 3540, 3531, 3541, 3542, 3543, 3544, 3545,

     3546, 3536, 3537, 3547, 3548, 3549, 3550, 3551, 3552, 3538,
     3553, 3554, 3555, 3556, 3556, 3556, 3539, 3556, 3556, 3556,
     3556, 3556, 3540, 3556, 3541, 3542, 3543, 3544, 3545, 3546,
     3556, 3556, 3547, 3548, 3549, 3550, 3551, 3552, 3556, 3553,
     3554, 3555,  261, 3556,  261,  362, 3556,  362,  369,  369,
      369,  369,  369,  476, 3556,  476,  476,  476,  476,  476,
      476,  478, 3556, 3556,  478,  478,  478, 3556,  478,  586,
      586,  586,  586,  586,  586,  586,  586, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 2169, 3556, 2169, 2169, 2169,
     2169, 2169, 2169,   13, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556
    } ;

static yyconst flex_int16_t yy_chk[7576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7, 3531,    7,    7,    7,    7,    8,
     3530,    8,    8,    8,    8,    9, 3529,    9,    9,    9,
        9,   10, 3528,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   15,   30,
       15,   21,   21,   24, 3482,   33,   34, 3479,   31,   24,
     3476,   24,   40,   47,   58,   24,   24,   24,   24,   24,
     3473,  112,   31,  112,   61,   25,  120,  120,   30,   25,
       62, 3210,   24,   25,   33,   34,   25,   31,   24,   25,
       24,   40,   47,   58,   24,   24,   24,   24,   24,   25,

       26,   31,   27,   61,   25,   45,   27,   26,   25,   62,
       27,   26,   25,   45,   26,   25,   27,   26,   25,   27,
       26,  110,  110,  110,   68,   76,   32, 3173,   25,   26,
      149,   27,  149,   32,   45,   27,   26,   89,   32,   27,
       26, 3136,   45,   26, 3099,   27,   26, 2879,   27,   26,
       28,   36,   28,   68,   76,   32,   35,   92, 2812,   36,
       35,   28,   32,   28,   35,   36,   89,   32,   28,   93,
       35,   28,  479,   28,  479,   50,   50,   50, 2746,   28,
       36,   28,  365,  365,  365,   35,   92,   50,   36,   35,
       28, 2681,   28,   35,   36,   99,   73,   28,   93,   35,

       28,   39,   28,   29,   73,   41,  107,   29,   37,   41,
       37,   29,   37,   41,   29,   39,   50,   29,   39,   41,
       29,   39,   37,   29,   99,   73,  129,   37,   37, 2248,
       39,  132,   29,   73,   41,  107,   29,   37,   41,   37,
       29,   37,   41,   29,   39, 2216,   29,   39,   41,   29,
       39,   37,   29,   59,  133,  129,   37,   37,   38,   38,
      132,  139,   38,   42,   44,   42,   44,   59,   38,   44,
       38,  146,   38,   42,   38,   42,   38,   38,   38, 2173,
       42,   42,   59,  133,  155, 2122, 2090,   38,   38, 2047,
      139,   38,   42,   44,   42,   44,   59,   38,   44,   38,

      146,   38,   42,   38,   42,   38,   38,   38,   43,   42,
       42,  104,  144,  155,   46,   43,   43,   46,   46,  104,
      144, 1998,   43,   60,   46,   43,   51,   51,   51,   51,
       60, 2043,  158, 2043, 1966,   60,   90,   43, 1923,   51,
      104,  144,  159,   46,   43,   43,   46,   46,  104,  144,
       90,   43,   60,   46,   43,   81,   81,   81,   72,   60,
       72,  158,   53,   72,   60,   90,   53,   81,   51,   52,
       53,  159,  160,   53,  161,   52,   53,   52,  162,   90,
     1876,   52,   52,   52,   52,   52,   53,   72, 2168,   72,
     2168,   53,   72, 1844, 1801,   53,   81, 1722,   52,   53,

     1717,  160,   53,  161,   52,   53,   52,  162,  130,   54,
       52,   52,   52,   52,   52,   53,   54,   55,  157,   64,
       54,   55,  130,   54,  163,   55,   54,   64,   63,   54,
     1567,   55,   63,   64,   55, 1562,   63,  130,   54,  157,
      166, 1414,   63, 1409, 1265,   54,   55,  157,   64,   54,
       55,  130,   54,  163,   55,   54,   64,   63,   54,   67,
       55,   63,   64,   55,   56,   63,   56,  167,  157,  166,
       65,   63,   65,   67,   65,   56,   67,   56,  103,   67,
      103,  169,   56,  103,   65,   56,   95,   56,   67,   65,
       65, 1260, 1136,   56,   95,   56,  167, 1065,  978,   65,

       95,   65,   67,   65,   56,   67,   56,  103,   67,  103,
      169,   56,  103,   65,   56,   95,   56,   57,   65,   65,
       91,   57,   69,   95,  171,   57,   69,   91,   57,   95,
       69,   57,   91,  135,   57,  174,   69,   57,  907,  825,
      177,  135,  473,  473,  473,  754,   57,  135,  674,   91,
       57,   69,  603,  171,   57,   69,   91,   57,  586,   69,
       57,   91,  135,   57,  174,   69,   57,   66,   66,  177,
      135,   66,   70,  143,   70,  143,  135,   66,  143,   66,
      178,   66,   70,   66,   70,   66,   66,   66,  151,   70,
       70,  179,  180,  476,  476,  476,   66,   66,  148,  122,

       66,   70,  143,   70,  143,  118,   66,  143,   66,  178,
       66,   70,   66,   70,   66,   66,   66,   71,   70,   70,
      179,  180,  156,   74,   71,   71,   74,   74,   86,  181,
      156,   71,   86,   74,   71,   82,   86,   82,   82,   82,
       82,  114,   86,   48,   23,   86,   71,  733,  733,  733,
       82,  156,   74,   71,   71,   74,   74,   86,  181,  156,
       71,   86,   74,   71,   20,   86,  108,  108,  108,  164,
      164,   86,  105,   84,   86,  105,  105,   84,  108,   82,
       83,   84,  105,  164,   84,  170,   83,   84,   83,  170,
      173,   17,   83,   83,   83,   83,   83,   84,  164,  164,

      173,  105,   84,   13,  105,  105,   84,  108,    0,   83,
       84,  105,  164,   84,  170,   83,   84,   83,  170,  173,
       85,   83,   83,   83,   83,   83,   84,   85,   94,  173,
      175,   85,   94,  165,   85,  175,   94,   85,  182,  165,
       85,    0,   94,  109,  183,  109,  109,  109,  109,   85,
      184,    0,    0,  185,    0,  187,   85,   94,  109,  175,
       85,   94,  165,   85,  175,   94,   85,  182,  165,   85,
       87,   94,   87,  183,    0,  188,   96,    0,   96,  184,
       96,   87,  185,   87,  187,  131,   98,  109,   87,  189,
       96,   87,  131,   87,    0,   96,   96,  131,    0,   87,

       98,   87,    0,   98,  188,   96,   98,   96,    0,   96,
       87,    0,   87,  190,  131,   98,  138,   87,  189,   96,
       87,  131,   87,   88,   96,   96,  131,   88,  192,   98,
      138,   88,   98,  138,   88,   98,  138,   88,    0,  193,
       88,  194,  190,   88,    0,  138,    0,  100,    0,  195,
      196,  100,   88,  197,    0,  100,   88,  192,    0,  138,
       88,  100,  138,   88,    0,  138,   88,  134,  193,   88,
      194,  134,   88,   97,   97,  134,  100,   97,  195,  196,
      100,  134,  197,   97,  100,   97,  200,   97,    0,   97,
      100,   97,   97,   97,    0,    0,  134,  734,  734,  734,

      134,    0,   97,   97,  134,  201,   97,  101,    0,  101,
      134,    0,   97,  207,   97,  200,   97,  101,   97,  101,
       97,   97,   97,  102,  101,  101,  172,  172,  172,  145,
      102,  102,  145,  145,  201,  172,  101,  102,  101,  145,
      102,    0,  207,  208,    0,  257,  101,  257,  101,  257,
      257,  257,  102,  101,  101,  172,  172,  172,  145,  102,
      102,  145,  145,  124,  172,  209,  102,  124,  145,  102,
      123,  124,  208,  186,  124,  203,  123,  124,  123,  186,
      203,    0,  123,  123,  123,  123,  123,  124,    0,    0,
      186,    0,  124,    0,  209,    0,  124,    0,    0,  123,

      124,    0,  186,  124,  203,  123,  124,  123,  186,  203,
      125,  123,  123,  123,  123,  123,  124,  125,  126,  186,
      212,  125,  126,  212,  125,  176,  126,  125,  176,  140,
      125,  215,  126,  140,  176,  126,    0,  140,    0,  125,
        0,  176,    0,  140,    0,    0,  125,  126,    0,  212,
      125,  126,  212,  125,  176,  126,  125,  176,  140,  125,
      215,  126,  140,  176,  126,  127,  140,  127,  191,  202,
      176,  136,  140,  136,  191,  136,  127,  191,  127,  216,
      202,  202,  204,  127,  204,  136,  127,    0,  127,    0,
      136,  136,    0,    0,  127,    0,  127,  191,  202,    0,

      136,    0,  136,  191,  136,  127,  191,  127,  216,  202,
      202,  204,  127,  204,  136,  127,  142,  127,  128,  136,
      136,  206,  128,  142,  142,  206,  128,  211,  211,  128,
      142,  198,  128,  142,  217,  128,  198,  198,  128,  737,
      737,  737,  218,    0,    0,  142,    0,  128,    0,    0,
      206,  128,  142,  142,  206,  128,  211,  211,  128,  142,
      198,  128,  142,  217,  128,  198,  198,  128,  137,  137,
      210,  218,  137,  141,  210,  141,  213,  213,  137,  219,
      137,    0,  137,  141,  137,  141,  137,  137,  137,  220,
      141,  141,    0,  214,  214,  221,  222,  137,  137,  210,

      223,  137,  141,  210,  141,  213,  213,  137,  219,  137,
      205,  137,  141,  137,  141,  137,  137,  137,  220,  141,
      141,  205,  214,  214,  221,  222,  224,  225,  226,  223,
      205,  227,  228,  229,  230,  227,  232,  233,  234,  205,
      231,  227,    0,  236,  237,  231,    0,  240,  233,  241,
      205,  738,  738,  738,    0,  224,  225,  226,  231,  205,
      227,  228,  229,  230,  227,  232,  233,  234,  238,  231,
      227,  235,  236,  237,  231,  239,  240,  233,  241,  247,
      235,  242,  244,  246,  245,  238,  239,  231,  235,  242,
      244,  245,  248,  245,  249,  246,  250,  238,  248,  251,

      235,  252,  244,  253,  239,  254,    0,    0,  247,  235,
      242,  244,  246,  245,  238,  239,  262,  235,  242,  244,
      245,  248,  245,  249,  246,  250,    0,  248,  251,  265,
      252,  244,  253,  266,  254,  256,  256,  256,  258,  258,
      258,  259,  259,  259,  259,  262,  264,  256,  267,  268,
      258,  260,  263,  260,  259,  260,  260,  260,  265,  269,
      263,  270,  266,  273,  272,  274,  276,  264,  271,  271,
      272,  278,  884,  884,  884,  264,  256,  267,  268,  258,
      277,  263,  271,  259,  277,    0,  281,  284,  269,  263,
      270,  285,  273,  272,  274,  276,  264,  271,  271,  272,

      278,  279,  279,  279,  280,    0,  286,  282,  287,  277,
      279,  271,  282,  277,  280,  281,  284,  288,  283,  289,
      285,  283,  290,  291,  292,  294,    0,  283,  295,  296,
      279,  279,  279,  280,  283,  286,  282,  287,  293,  279,
      297,  282,  299,  280,  293,  300,  288,  283,  289,  301,
      283,  290,  291,  292,  294,  293,  283,  295,  296,  298,
      302,  303,  304,  283,  307,  298,  308,  293,  298,  297,
      305,  299,  310,  293,  300,  305,  305,  310,  301,    0,
      311,  313,  311,    0,  293,  313,  314,  315,  298,  302,
      303,  304,  312,  307,  298,  308,  309,  298,  316,  305,

        0,  310,    0,  312,  305,  305,  310,  309,  309,  311,
      313,  311,  312,  317,  313,  314,  315,  317,  318,  318,
      319,  312,  322,  319,  323,  309,  324,  316,  320,  320,
      321,  321,  312,  325,  326,  327,  309,  309,  328,  329,
      330,  312,  317,  331,  332,  333,  317,  318,  318,  319,
      335,  322,  319,  323,  336,  324,  337,  320,  320,  321,
      321,  334,  325,  326,  327,  334,  339,  328,  329,  330,
      338,  334,  331,  332,  333,  338,  340,  341,  343,  335,
      342,  344,  346,  336,  345,  337,  347,  340,  338,  342,
      334,  348,    0,  346,  334,  339,  353,  342,    0,  338,

      334,  345,    0,  354,  338,  340,  341,  343,  353,  342,
      344,  346,    0,  345,  356,  347,  340,  338,  342,  349,
      348,  351,  346,  357,  352,  353,  342,  349,  355,  351,
      345,  352,  354,  352,  355,  358,  359,  353,  360,  361,
      364,  351,  364,  356,  364,  364,  364,    0,  349,  370,
      351,    0,  357,  352,    0,    0,  349,  355,  351,    0,
      352,    0,  352,  355,  358,  359,  373,  360,  361,  374,
      351,  363,  363,  363,  366,  366,  366,  367,  370,  367,
      367,  367,  367,  363,  372,  368,  366,  368,  371,  368,
      368,  368,  367,  375,  376,  373,  371,  377,  374,  378,

      379,  379,  380,  381,  382,  372,  384,  385,  380,  386,
      389,  385,  363,  372,  379,  366,    0,  371,  387,  387,
      387,  367,  375,  376,  392,  371,  377,  387,  378,  379,
      379,  380,  381,  382,  372,  384,  385,  380,  386,  389,
      385,  388,  393,  379,  394,  390,  395,  387,  387,  387,
      390,  388,  391,  392,  396,  391,  387,  397,  398,  399,
      400,  391,  402,  403,    0,  404,  405,  407,  391,    0,
      388,  393,  408,  394,  390,  395,  401,  409,    0,  390,
      388,  391,  401,  396,  391,  410,  397,  398,  399,  400,
      391,  402,  403,  401,  404,  405,  407,  391,  406,  411,

      412,  408,  415,  413,  406,  401,  409,  406,  413,  413,
      416,  401,  417,  418,  410,  419,    0,  419,  418,  422,
      423,  424,  401,  417,  417,    0,  421,  406,  411,  412,
      421,  415,  413,  406,  420,    0,  406,  413,  413,  416,
      427,  417,  418,  427,  419,  420,  419,  418,  422,  423,
      424,  430,  417,  417,  420,  421,  425,  426,  426,  421,
      425,  428,  428,  420,  429,  429,  431,  432,  433,  427,
      434,  435,  427,  436,  420,  437,  438,  439,  440,  441,
      430,  443,  444,  420,  445,  425,  426,  426,  442,  425,
      428,  428,  442,  429,  429,  431,  432,  433,  442,  434,

      435,  447,  436,    0,  437,  438,  439,  440,  441,  448,
      443,  444,  449,  445,  446,  451,  450,  442,  452,  446,
      448,  442,  453,  454,  455,  450,  456,  442,  457,    0,
      447,    0,  446,  450,  454,  462,  457,    0,  448,  453,
        0,  449,    0,  446,  451,  450,  464,  452,  446,  448,
      459,  453,  454,  455,  450,  456,  465,  457,  459,  461,
      460,  446,  450,  454,  462,  457,  463,  460,  453,  460,
      459,  461,  463,  466,  467,  464,  468,  469,    0,  459,
      470,  470,  470,    0,    0,  465,    0,  459,  461,  460,
        0,    0,  470,    0,    0,  463,  460,    0,  460,  459,

      461,  463,  466,  467,  477,  468,  469,  471,    0,  471,
        0,  471,  471,  471,  472,  472,  472,  477,  477,  477,
      474,  470,  474,  474,  474,  474,  472,  475,    0,  475,
      485,  475,  475,  475,  486,  474,  481,  481,  488,  481,
      487,  489,  486,  481,  490,  491,  492,  493,  494,  494,
      495,  496,  497,  481,  499,  472,  495,  481,  501,  485,
      504,  487,  494,  486,  474,    0,    0,  488,  500,  487,
      489,  486,  500,  490,  491,  492,  493,  494,  494,  495,
      496,  497,  503,  499,  481,  495,  507,  501,  508,  504,
      487,  494,  503,  502,  502,  502,  506,  500,  505,  506,

      509,  500,  502,  505,  510,  506,  511,  512,  513,  514,
      515,  503,  506,  516,  517,  507,  518,  508,  519,  516,
      520,  503,  502,  502,  502,  506,  522,  505,  506,  509,
      516,  502,  505,  510,  506,  511,  512,  513,  514,  515,
      523,  506,  516,  517,  521,  518,  524,  519,  516,  520,
      521,  525,  526,  521,  527,  522,  528,  530,  531,  516,
      532,  528,  528,  533,  534,  537,  534,  538,  533,  523,
        0,  532,  532,  521,  536,  524,  539,  545,  536,  521,
      525,  526,  521,  527,    0,  528,  530,  531,  535,  532,
      528,  528,  533,  534,  537,  534,  538,  533,  540,  535,

      532,  532,  540,  536,  546,  539,  545,  536,  535,  541,
      541,  542,  543,  543,  542,  544,  544,  535,  547,  548,
      549,  550,  551,  552,  553,  554,  555,  540,  535,  556,
      558,  540,  559,  546,  560,  562,    0,  535,  541,  541,
      542,  543,  543,  542,  544,  544,    0,  547,  548,  549,
      550,  551,  552,  553,  554,  555,  557,  561,  556,  558,
      557,  559,  561,  560,  562,  563,  557,  564,  566,  567,
      565,  568,  569,  570,  571,  561,  563,    0,  577,  565,
      576,  579,  572,  569,    0,  557,  561,  565,  568,  557,
      572,  561,  576,    0,  563,  557,  564,  566,  567,  565,

      568,  569,  570,  571,  561,  563,  574,  577,  565,  576,
      579,  572,  569,  575,  574,  580,  565,  568,  578,  572,
      575,  576,  575,  581,  578,  582,  574,  583,  584,  588,
      590,  593,  595,  596,  598,  574,  599,  600,  601,  602,
      604,  605,  575,  574,  580,  607,  608,  578,  609,  575,
        0,  575,  581,  578,  582,  574,  583,  584,  588,  590,
      593,  595,  596,  598,  606,  599,  600,  601,  602,  604,
      605,  610,  611,  613,  607,  608,  612,  609,  612,  606,
      614,  615,  616,  617,  618,  618,  619,  620,  621,  619,
      622,  623,  624,  606,  625,  626,  616,  616,  627,  628,

      610,  611,  613,  630,  631,  612,  633,  612,  606,  614,
      615,  616,  617,  618,  618,  619,  620,  621,  619,  622,
      623,  624,  632,  625,  626,  616,  616,  627,  628,  632,
      634,  635,  630,  631,  636,  633,  637,  638,  639,  640,
      641,  642,  643,  644,  645,  646,  647,  648,    0,  649,
      651,  632,  654,  655,  656,  657,  658,  640,  632,  634,
      635,  659,  660,  636,  649,  637,  638,  639,  640,  641,
      642,  643,  644,  645,  646,  647,  648,  650,  649,  651,
      661,  654,  655,  656,  657,  658,  640,  650,  662,  663,
      659,  660,  665,  649,  666,  667,  668,  650,  669,  671,

      675,  676,  677,  678,  679,  680,  682,  667,  683,  661,
      684,  685,  686,  687,  688,  689,  650,  662,  663,  690,
      691,  665,  692,  666,  667,  668,  650,  669,  671,  675,
      676,  677,  678,  679,  680,  682,  667,  683,  693,  684,
      685,  686,  687,  688,  689,  694,  695,  696,  690,  691,
      697,  692,  698,  699,  700,  701,  702,  703,  704,  706,
      707,  708,  709,  710,  701,  712,  713,  693,  714,  715,
      716,  717,  718,  719,  694,  695,  696,  721,  720,  697,
      720,  698,  699,  700,  701,  702,  703,  704,  706,  707,
      708,  709,  710,  722,  712,  713,  723,  714,  715,  716,

      717,  718,  719,  724,  725,    0,  721,  720,  727,  720,
      728,  726,  726,  729,  730,  731,  732,  729,  735,  735,
      735,  739,  722,    0,    0,  723,  741,  744,  746,  747,
      735,  749,  724,  725,  726,  750,  751,  727,  752,  728,
      726,  726,  729,  730,  731,  732,  729,  736,  753,  736,
      739,  736,  736,  736,  755,  741,  744,  746,  747,  735,
      749,  756,  758,  726,  750,  751,  757,  752,  759,  760,
      761,  762,  763,  764,  763,  765,  766,  753,  767,  768,
      771,  757,  772,  755,  769,  769,  770,  773,  774,  770,
      756,  758,  767,  767,  775,  757,  776,  759,  760,  761,

      762,  763,  764,  763,  765,  766,  777,  767,  768,  771,
      757,  772,  778,  769,  769,  770,  773,  774,  770,  779,
      781,  767,  767,  775,  782,  776,  783,  784,  785,  786,
      787,  788,  789,  783,  790,  777,  791,  792,  793,  794,
      795,  778,  796,  797,  798,  799,  802,  805,  779,  781,
        0,    0,  806,  782,  791,  783,  784,  785,  786,  787,
      788,  789,  783,  790,  800,  791,  792,  793,  794,  795,
      801,  796,  797,  798,  799,  802,  805,  807,  808,  800,
      801,  806,  809,  791,  810,  811,  812,  813,  814,  816,
      801,  817,  818,  800,  819,  820,  822,  826,  827,  828,

      829,  830,  831,  833,  818,  834,  807,  808,  800,  801,
      835,  809,  836,  810,  811,  812,  813,  814,  816,  801,
      817,  818,  837,  819,  820,  822,  826,  827,  828,  829,
      830,  831,  833,  818,  834,  838,  839,  840,  841,  835,
      842,  836,  843,  844,  845,  846,  847,  848,  849,  850,
      851,  837,  852,  853,  854,  855,  857,  858,  859,  860,
      861,  852,  863,  864,  838,  839,  840,  841,  865,  842,
      866,  843,  844,  845,  846,  847,  848,  849,  850,  851,
      867,  852,  853,  854,  855,  857,  858,  859,  860,  861,
      868,  863,  864,  869,  870,  872,  871,  865,  871,  866,

      873,  874,  875,  876,  878,  877,  877,  879,  880,  867,
      881,  882,  880,  883,  885,  885,  885,    0,    0,  868,
        0,  892,  869,  870,  872,  871,    0,  871,  877,  873,
      874,  875,  876,  878,  877,  877,  879,  880,    0,  881,
      882,  880,  883,  886,  886,  886,  887,  887,  887,  888,
      892,  888,  894,  888,  888,  888,  897,  877,  887,  889,
      899,  889,  889,  889,  889,  890,  890,  890,  891,  891,
      891,  900,  902,  903,  889,  904,  905,  906,  908,  909,
      910,  894,  911,  912,  913,  897,  914,  887,  915,  899,
      916,  917,  916,  918,  919,  910,  921,  922,  922,    0,

      900,  902,  903,  889,  904,  905,  906,  908,  909,  910,
      924,  911,  912,  913,  920,  914,  925,  915,  926,  916,
      917,  916,  918,  919,  910,  921,  922,  922,  920,  920,
      923,  927,  928,  923,  929,  930,  931,  932,  934,  924,
      935,  936,  937,  920,  938,  925,  939,  926,  936,  940,
      941,  942,  943,  945,  944,  946,  947,  920,  920,  923,
      927,  928,  923,  929,  930,  931,  932,  934,  948,  935,
      936,  937,  944,  938,  949,  939,  950,  936,  940,  941,
      942,  943,  945,  944,  946,  947,  951,  952,  954,  953,
      955,  958,  959,  960,  961,  962,  963,  948,  954,  964,

      965,  944,  966,  949,  953,  950,  967,  969,  954,  970,
      972,  973,  975,  979,  971,  951,  952,  980,  953,  955,
      958,  959,  960,  961,  962,  963,  971,  954,  964,  965,
      981,  966,  982,  953,  983,  967,  969,  954,  970,  972,
      973,  975,  979,  971,  984,  986,  980,  987,  988,  989,
      990,  991,  992,  993,  994,  971,  995,  996,  997,  981,
      998,  982,  999,  983, 1000, 1001, 1002, 1003, 1004, 1006,
     1007, 1008, 1010,  984,  986, 1005,  987,  988,  989,  990,
      991,  992,  993,  994, 1005,  995,  996,  997, 1011,  998,
     1012,  999, 1013, 1000, 1001, 1002, 1003, 1004, 1006, 1007,

     1008, 1010, 1014, 1016, 1005, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1025, 1024, 1026, 1027, 1011, 1028, 1012,
     1029, 1013, 1031, 1030, 1030, 1032, 1033, 1034, 1035, 1036,
     1033, 1014, 1016,    0, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1024, 1026, 1027, 1030, 1028,    0, 1029,
        0, 1031, 1030, 1030, 1032, 1033, 1034, 1035, 1036, 1033,
     1037, 1037, 1037, 1038, 1038, 1038, 1039, 1039, 1039, 1041,
     1041, 1041, 1043, 1043, 1043, 1030, 1050, 1040, 1039, 1040,
     1045, 1040, 1040, 1040, 1042,    0, 1042, 1042, 1042, 1042,
     1044, 1044, 1044, 1045, 1045, 1045, 1046, 1046, 1046, 1042,

     1047, 1048, 1048, 1052, 1048, 1050, 1055, 1039, 1048, 1057,
     1058, 1060, 1061, 1047, 1047, 1047, 1062, 1063, 1048, 1064,
        0, 1066, 1048, 1067, 1069, 1070, 1071, 1068, 1042, 1072,
     1073, 1074, 1052, 1074, 1075, 1055, 1076, 1077, 1057, 1058,
     1060, 1061, 1068, 1079,    0, 1062, 1063,    0, 1064, 1048,
     1066, 1082, 1067, 1069, 1070, 1071, 1068, 1083, 1072, 1073,
     1074, 1078, 1074, 1075, 1084, 1076, 1077, 1080, 1080, 1085,
     1081, 1068, 1079, 1081, 1086, 1078, 1078, 1087, 1088, 1089,
     1082, 1090, 1092, 1093, 1094, 1095, 1083, 1096, 1097, 1098,
     1078, 1094, 1099, 1084, 1100, 1101, 1080, 1080, 1085, 1081,

     1103, 1102, 1081, 1086, 1078, 1078, 1087, 1088, 1089, 1104,
     1090, 1092, 1093, 1094, 1095, 1105, 1096, 1097, 1098, 1102,
     1094, 1099, 1106, 1100, 1101, 1107, 1108, 1109, 1110, 1103,
     1102, 1111, 1112, 1113, 1116, 1117, 1118, 1119, 1104, 1120,
     1121, 1122, 1112, 1123, 1105, 1124, 1111, 1125, 1102, 1127,
     1128, 1106, 1112, 1130, 1107, 1108, 1109, 1110, 1131, 1133,
     1111, 1129, 1113, 1116, 1117, 1118, 1119, 1137, 1120, 1121,
     1122, 1112, 1123, 1129, 1124, 1111, 1125, 1138, 1127, 1128,
     1139, 1112, 1130, 1140, 1141, 1142, 1144, 1131, 1133, 1145,
     1129, 1146, 1147, 1148, 1149, 1150, 1137, 1151, 1152, 1153,

     1154, 1155, 1129, 1156, 1157, 1158, 1138, 1159, 1160, 1139,
     1161, 1162, 1140, 1141, 1142, 1144, 1163, 1164, 1145, 1165,
     1146, 1147, 1148, 1149, 1150, 1163, 1151, 1152, 1153, 1154,
     1155, 1166, 1156, 1157, 1158, 1168, 1159, 1160, 1169, 1161,
     1162, 1170, 1171, 1172, 1174, 1163, 1164, 1175, 1165, 1176,
     1177, 1178, 1179, 1180, 1181, 1182, 1183, 1182, 1184, 1185,
     1166, 1186, 1187, 1189, 1168, 1190, 1192, 1169,    0, 1193,
     1170, 1171, 1172, 1174, 1188, 1188, 1175, 1194, 1176, 1177,
     1178, 1179, 1180, 1181, 1182, 1183, 1182, 1184, 1185, 1191,
     1186, 1187, 1189, 1191, 1190, 1192, 1195, 1188, 1193, 1196,

     1197, 1198, 1199, 1188, 1188, 1200, 1194, 1201, 1202, 1203,
     1204, 1205, 1207,    0, 1211, 1210, 1213, 1214, 1191, 1215,
     1216, 1217, 1191, 1218, 1219, 1195, 1188, 1220, 1196, 1197,
     1198, 1199, 1221, 1222, 1200, 1224, 1201, 1202, 1203, 1204,
     1205, 1207, 1210, 1211, 1210, 1213, 1214, 1223, 1215, 1216,
     1217, 1225, 1218, 1219, 1226, 1227, 1220, 1228, 1229, 1231,
     1232, 1221, 1222, 1223, 1224, 1223, 1235, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1223, 1246, 1247, 1248,
     1225, 1249, 1250, 1226, 1227, 1253, 1228, 1229, 1231, 1232,
     1254, 1256, 1223, 1257, 1223, 1235, 1237, 1238, 1239, 1240,

     1241, 1242, 1243, 1244, 1245, 1258, 1246, 1247, 1248, 1259,
     1249, 1250, 1261, 1264, 1253, 1269, 1270, 1272, 1273, 1254,
     1256, 1274, 1257, 1261, 1275, 1276, 1277, 1278, 1279, 1281,
     1282, 1283, 1284, 1285, 1258, 1286, 1287, 1289, 1259, 1290,
     1291, 1261, 1264, 1292, 1269, 1270, 1272, 1273, 1294, 1295,
     1274, 1297, 1261, 1275, 1276, 1277, 1278, 1279, 1281, 1282,
     1283, 1284, 1285, 1296, 1286, 1287, 1289, 1296, 1290, 1291,
     1298, 1299, 1292, 1300, 1301, 1303, 1304, 1294, 1295, 1305,
     1297, 1306, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316,
     1317, 1320, 1296, 1321, 1320, 1322, 1296, 1324, 1325, 1298,

     1299, 1326, 1300, 1301, 1303, 1304, 1327, 1328, 1305, 1329,
     1306, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317,
     1320, 1330, 1321, 1320, 1322, 1331, 1324, 1325, 1332, 1333,
     1326, 1334, 1338, 1339, 1344, 1327, 1328, 1345, 1329, 1342,
     1342, 1342, 1343, 1343, 1343, 1346, 1347, 1348, 1349, 1350,
     1330, 1351, 1352, 1353, 1331, 1354, 1356, 1332, 1333, 1359,
     1334, 1338, 1339, 1344, 1360, 1362, 1345, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1346, 1347, 1348, 1349, 1350, 1370,
     1351, 1352, 1353, 1371, 1354, 1356, 1359, 1372, 1359, 1373,
     1374, 1375, 1376, 1360, 1362, 1377, 1363, 1364, 1365, 1366,

     1367, 1368, 1369, 1372, 1378, 1372, 1380, 1381, 1370, 1384,
     1386, 1387, 1371, 1388, 1389, 1390, 1372, 1391, 1373, 1374,
     1375, 1376, 1392, 1393, 1377, 1394, 1395, 1396, 1397, 1398,
     1399, 1402, 1372, 1378, 1372, 1380, 1381, 1403, 1384, 1386,
     1387, 1405, 1388, 1389, 1390, 1406, 1391, 1407, 1408, 1413,
     1410, 1392, 1393, 1418, 1394, 1395, 1396, 1397, 1398, 1399,
     1402, 1410, 1419, 1421, 1422, 1423, 1403, 1424, 1425, 1426,
     1405, 1427, 1428, 1430, 1406, 1431, 1407, 1408, 1413, 1410,
     1432, 1433, 1418, 1434, 1435, 1436, 1438, 1439, 1440, 1441,
     1410, 1419, 1421, 1422, 1423, 1443, 1424, 1425, 1426, 1444,

     1427, 1428, 1430, 1445, 1431, 1446, 1447, 1445, 1448, 1432,
     1433, 1449, 1434, 1435, 1436, 1438, 1439, 1440, 1441, 1450,
     1452, 1453, 1454, 1455, 1443, 1457, 1458, 1459, 1444, 1460,
     1461, 1463, 1445, 1464, 1446, 1447, 1445, 1448, 1465, 1466,
     1449, 1469, 1470, 1471, 1469, 1473, 1474, 1475, 1450, 1452,
     1453, 1454, 1455, 1476, 1457, 1458, 1459, 1477, 1460, 1461,
     1463, 1478, 1464, 1479, 1480, 1481, 1482, 1465, 1466, 1483,
     1469, 1470, 1471, 1469, 1473, 1474, 1475, 1487, 1488, 1491,
     1491, 1491, 1476, 1492, 1492, 1492, 1477, 1493, 1493, 1493,
     1478, 1497, 1479, 1480, 1481, 1482, 1498, 1499, 1483, 1494,

     1494, 1494, 1495, 1495, 1495, 1495, 1487, 1488, 1496, 1496,
     1496, 1500, 1501, 1502, 1503, 1495, 1504, 1505, 1506, 1507,
     1497, 1509, 1512, 1513, 1515, 1498, 1499, 1516, 1517, 1518,
     1519, 1520, 1521, 1522, 1523, 1524, 1526, 1527, 1528, 1529,
     1500, 1501, 1502, 1503, 1495, 1504, 1505, 1506, 1507, 1512,
     1509, 1512, 1513, 1515, 1525, 1530, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1526, 1527, 1528, 1529, 1531,
     1525, 1533, 1525, 1534, 1537, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1525, 1530, 1547, 1548, 1549, 1550, 1551,
     1552, 1555, 1556, 1558, 1559, 1560, 1561,    0, 1531, 1525,

     1533, 1525, 1534, 1537, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1566, 1571, 1547, 1548, 1549, 1550, 1551, 1552,
     1555, 1556, 1558, 1559, 1560, 1561, 1563, 1572, 1574, 1575,
     1576, 1577, 1578, 1579, 1580, 1581, 1583, 1563, 1584, 1585,
     1586, 1566, 1571, 1587, 1588, 1589, 1591, 1592, 1593, 1594,
     1596, 1597,    0, 1599, 1600, 1563, 1572, 1574, 1575, 1576,
     1577, 1578, 1579, 1580, 1581, 1583, 1563, 1584, 1585, 1586,
     1601, 1602, 1587, 1588, 1589, 1591, 1592, 1593, 1594, 1596,
     1597, 1598, 1599, 1600, 1603, 1598, 1605, 1606, 1607, 1608,
     1610, 1611, 1612, 1613, 1614, 1616, 1617, 1618, 1619, 1601,

     1602, 1622, 1623, 1624, 1622, 1626, 1627, 1628, 1629, 1630,
     1598, 1631, 1632, 1603, 1598, 1605, 1606, 1607, 1608, 1610,
     1611, 1612, 1613, 1614, 1616, 1617, 1618, 1619, 1633, 1634,
     1622, 1623, 1624, 1622, 1626, 1627, 1628, 1629, 1630, 1635,
     1631, 1632, 1636, 1640, 1641, 1644, 1644, 1644, 1645, 1645,
     1645, 1646, 1646, 1646, 1647, 1647, 1647, 1633, 1634, 1648,
     1652, 1653, 1648, 1648, 1648, 1649, 1649, 1649, 1635, 1651,
     1654, 1636, 1640, 1641, 1648, 1650, 1650, 1650, 1655, 1656,
     1657, 1658, 1651, 1651, 1651, 1659, 1660, 1661, 1662, 1652,
     1653, 1664, 1667, 1668, 1670, 1671, 1672, 1673, 1674, 1654,

     1675, 1676, 1677, 1648, 1678, 1679, 1681, 1655, 1656, 1657,
     1658, 1682, 1683, 1684, 1659, 1660, 1661, 1662, 1685, 1667,
     1664, 1667, 1668, 1670, 1671, 1672, 1673, 1674, 1680, 1675,
     1676, 1677, 1686, 1678, 1679, 1681, 1688, 1689, 1692, 1694,
     1682, 1683, 1684, 1695, 1680, 1696, 1680, 1685, 1697, 1698,
     1699, 1700, 1701, 1702, 1703, 1704, 1705, 1680, 1706, 1707,
     1710, 1686, 1711, 1713, 1714, 1688, 1689, 1692, 1694, 1715,
     1716, 1721, 1695, 1680, 1696, 1680, 1726, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1705, 1718, 1706, 1707, 1710,
     1727, 1711, 1713, 1714, 1729, 1730, 1731, 1718, 1715, 1716,

     1721, 1732, 1733, 1734, 1735, 1726, 1736, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1746, 1718, 1747, 1748, 1749, 1727,
     1751, 1752, 1754, 1729, 1730, 1731, 1718, 1755, 1756, 1757,
     1732, 1733, 1734, 1735, 1758, 1736, 1738, 1739, 1740, 1741,
     1742, 1743, 1744, 1746, 1753, 1747, 1748, 1749, 1753, 1751,
     1752, 1754, 1760, 1761, 1762, 1763, 1755, 1756, 1757, 1765,
     1766, 1767, 1768, 1758, 1769, 1771, 1772, 1773, 1774, 1777,
     1778, 1779, 1777, 1753, 1781, 1782, 1783, 1753, 1784, 1785,
     1786, 1760, 1761, 1762, 1763, 1787, 1788, 1789, 1765, 1766,
     1767, 1768, 1790, 1769, 1771, 1772, 1773, 1774, 1777, 1778,

     1779, 1777, 1791, 1781, 1782, 1783, 1795, 1784, 1785, 1786,
     1796, 1802, 1803, 1804, 1787, 1788, 1789, 1805, 1807, 1808,
     1809, 1790, 1810, 1811, 1812, 1814, 1815, 1816, 1817, 1819,
     1821, 1791, 1822, 1823, 1824, 1795, 1825, 1826, 1827, 1796,
     1802, 1803, 1804,    0, 1829, 1830, 1805, 1807, 1808, 1809,
     1831, 1810, 1811, 1812, 1814, 1815, 1816, 1817, 1819, 1821,
     1828, 1822, 1823, 1824, 1832, 1825, 1826, 1827, 1833, 1834,
     1828, 1835, 1828, 1829, 1830, 1836, 1838, 1839, 1840, 1831,
     1841, 1846, 1847, 1848, 1851, 1852, 1854, 1855, 1857, 1828,
     1860, 1858, 1865, 1832, 1858, 1866, 1867, 1833, 1834, 1828,

     1835, 1828, 1868, 1871, 1836, 1838, 1839, 1840, 1874, 1841,
     1846, 1847, 1848, 1851, 1852, 1854, 1855, 1857, 1875, 1860,
     1858, 1865, 1877, 1858, 1866, 1867, 1878, 1880, 1882, 1883,
     1884, 1868, 1871, 1885, 1886, 1887, 1888, 1874, 1889, 1891,
     1892, 1894, 1895, 1896, 1897, 1898, 1899, 1875, 1900, 1901,
     1902, 1877, 1904, 1905, 1906, 1878, 1880, 1882, 1883, 1884,
     1907, 1908, 1885, 1886, 1887, 1888, 1910, 1889, 1891, 1892,
     1894, 1895, 1896, 1897, 1898, 1899, 1911, 1900, 1901, 1902,
     1912, 1904, 1905, 1906, 1915, 1916, 1917, 1918, 1920, 1907,
     1908, 1924, 1925, 1926, 1927, 1910, 1929, 1930, 1931, 1932,

     1933, 1934, 1936, 1937, 1938, 1911, 1939, 1941, 1943, 1912,
     1944, 1945, 1946, 1915, 1916, 1917, 1918, 1920, 1947, 1948,
     1924, 1925, 1926, 1927, 1949, 1929, 1930, 1931, 1932, 1933,
     1934, 1936, 1937, 1938, 1950, 1939, 1941, 1943, 1951, 1944,
     1945, 1946, 1952, 1953, 1950, 1954, 1950, 1947, 1948, 1955,
     1956, 1957, 1958, 1949, 1960, 1961, 1962, 1963, 1968, 1969,
     1970, 1973, 1974, 1950, 1976, 1977, 1979, 1951, 1982, 1987,
        0, 1952, 1953, 1950, 1954, 1950, 1988, 1989, 1955, 1956,
     1957, 1958, 1990, 1960, 1961, 1962, 1963, 1968, 1969, 1970,
     1973, 1974, 1993, 1976, 1977, 1979, 1980, 1982, 1987, 1980,

     1996, 1997, 1999, 2000, 2002, 1988, 1989, 2004, 2005, 2006,
     2007, 1990, 2008, 2009, 2010, 2011, 2013, 2014, 2016, 2017,
     2018, 1993, 2019, 2020, 2021, 1980, 2022, 2023, 1980, 1996,
     1997, 1999, 2000, 2002, 2024, 2026, 2004, 2005, 2006, 2007,
     2027, 2008, 2009, 2010, 2011, 2013, 2014, 2016, 2017, 2018,
     2028, 2019, 2020, 2021, 2029, 2022, 2023, 2030, 2032, 2033,
     2034, 2037, 2038, 2024, 2026, 2039, 2040, 2042, 2048, 2027,
     2044, 2044, 2044, 2049, 2050, 2051, 2053, 2054, 2055, 2028,
     2056, 2057, 2058, 2029, 2060, 2061, 2030, 2032, 2033, 2034,
     2037, 2038, 2062, 2063, 2039, 2040, 2042, 2048, 2065, 2067,

     2068, 2069, 2049, 2050, 2051, 2053, 2054, 2055, 2070, 2056,
     2057, 2058, 2071, 2060, 2061, 2072, 2073, 2075, 2076, 2077,
     2078, 2062, 2063, 2074, 2079, 2080, 2081, 2065, 2067, 2068,
     2069, 2082, 2084, 2074, 2085, 2074, 2086, 2070, 2087, 2092,
     2093, 2071, 2094, 2097, 2072, 2073, 2075, 2076, 2077, 2078,
     2098, 2100, 2074, 2079, 2080, 2081, 2101, 2103, 2106, 2111,
     2082, 2084, 2074, 2085, 2074, 2086, 2112, 2087, 2092, 2093,
     2104, 2094, 2097, 2104, 2113, 2114, 2117, 2120, 2121, 2098,
     2100, 2123, 2124, 2126, 2128, 2101, 2103, 2106, 2111, 2129,
     2130, 2131, 2132, 2133, 2134, 2112, 2135, 2137, 2138, 2104,

     2140, 2141, 2104, 2113, 2114, 2117, 2120, 2121, 2142, 2143,
     2123, 2124, 2126, 2128, 2144, 2145, 2146, 2147, 2129, 2130,
     2131, 2132, 2133, 2134, 2148, 2135, 2137, 2138, 2150, 2140,
     2141, 2151, 2152, 2153, 2154, 2156, 2157, 2142, 2143, 2158,
     2161, 2162, 2163, 2144, 2145, 2146, 2147, 2164, 2166, 2167,
     2167, 2167, 2174, 2148, 2169, 2169, 2169, 2150, 2175, 2176,
     2151, 2152, 2153, 2154, 2156, 2157, 2177, 2179, 2158, 2161,
     2162, 2163, 2170, 2170, 2170, 2180, 2164, 2166, 2181, 2182,
     2183, 2174, 2184, 2186, 2187, 2188, 2189, 2175, 2176, 2191,
     2193, 2194, 2195, 2196, 2197, 2177, 2179, 2198, 2199, 2201,

     2202, 2203, 2204, 2205, 2180,    0, 2206, 2181, 2182, 2183,
     2207, 2184, 2186, 2187, 2188, 2189, 2208, 2210, 2191, 2193,
     2194, 2195, 2196, 2197, 2200, 2211, 2198, 2199, 2201, 2202,
     2203, 2204, 2205, 2212, 2200, 2206, 2200, 2213, 2218, 2207,
     2219, 2220, 2223, 2224, 2226, 2208, 2210, 2227, 2229, 2230,
     2232, 2237, 2230, 2200, 2211, 2238, 2239, 2240, 2243, 2246,
     2247, 2249, 2212, 2200, 2250, 2200, 2213, 2218, 2252, 2219,
     2220, 2223, 2224, 2226, 2254, 2255, 2227, 2229, 2230, 2232,
     2237, 2230, 2256, 2257, 2238, 2239, 2240, 2243, 2246, 2247,
     2249, 2258, 2259, 2250, 2260, 2261, 2263, 2252, 2264, 2266,

     2267, 2268, 2269, 2254, 2255, 2270, 2271, 2272, 2273, 2274,
     2276, 2256, 2257, 2277, 2278, 2279, 2280, 2282, 2283, 2284,
     2258, 2259, 2287, 2260, 2261, 2263, 2288, 2264, 2266, 2267,
     2268, 2269, 2289, 2290, 2270, 2271, 2272, 2273, 2274, 2276,
     2292, 2293, 2277, 2278, 2279, 2280, 2282, 2283, 2284, 2295,
     2296, 2287, 2298, 2300, 2301, 2288, 2302, 2303, 2304, 2306,
     2307, 2289, 2290, 2309, 2310, 2312, 2313, 2314, 2315, 2292,
     2293, 2316, 2317, 2318, 2319, 2320, 2321, 2323, 2295, 2296,
     2325, 2298, 2300, 2301, 2328, 2302, 2303, 2304, 2306, 2307,
     2330, 2331, 2309, 2310, 2312, 2313, 2314, 2315, 2332, 2333,

     2316, 2317, 2318, 2319, 2320, 2321, 2323, 2334, 2338, 2325,
     2339, 2340, 2341, 2328, 2342, 2344, 2345, 2346, 2347, 2330,
     2331, 2348, 2350, 2354, 2355, 2356, 2357, 2332, 2333, 2358,
     2359, 2361, 2362, 2363, 2364, 2365, 2334, 2338, 2369, 2339,
     2340, 2341, 2370, 2342, 2344, 2345, 2346, 2347, 2372, 2373,
     2348, 2350, 2354, 2355, 2356, 2357, 2374, 2375, 2358, 2359,
     2361, 2362, 2363, 2364, 2365, 2376, 2377, 2369, 2379, 2382,
     2383, 2370, 2384, 2386, 2388, 2389, 2391, 2372, 2373, 2393,
     2394, 2395, 2396, 2397, 2399, 2374, 2375, 2400, 2402, 2403,
     2405, 2406, 2407, 2408, 2376, 2377, 2409, 2379, 2382, 2383,

     2410, 2384, 2386, 2388, 2389, 2391, 2411, 2412, 2393, 2394,
     2395, 2396, 2397, 2399, 2413, 2414, 2400, 2402, 2403, 2405,
     2406, 2407, 2408, 2416, 2418, 2409, 2421, 2423, 2424, 2410,
     2425, 2426, 2427, 2431, 2432, 2411, 2412, 2433, 2434, 2435,
     2437, 2438, 2439, 2413, 2414, 2440, 2441, 2443, 2447, 2448,
     2449, 2450, 2416, 2418, 2451, 2421, 2423, 2424, 2452, 2425,
     2426, 2427, 2431, 2432, 2454, 2455, 2433, 2434, 2435, 2437,
     2438, 2439, 2456, 2457, 2440, 2441, 2443, 2447, 2448, 2449,
     2450, 2458, 2462, 2451, 2463, 2465, 2466, 2452, 2467, 2468,
     2469, 2470, 2472, 2454, 2455, 2475, 2476, 2477, 2479, 2479,

     2479, 2456, 2457, 2480, 2482, 2483, 2485, 2487, 2488, 2489,
     2458, 2462, 2490, 2463, 2465, 2466, 2491, 2467, 2468, 2469,
     2470, 2472, 2493, 2494, 2475, 2476, 2477, 2496, 2497, 2499,
     2500, 2501, 2480, 2482, 2483, 2485, 2487, 2488, 2489, 2502,
     2503, 2490, 2504, 2505, 2506, 2491, 2507, 2508, 2510, 2512,
     2515, 2493, 2494, 2517, 2518, 2519, 2496, 2497, 2499, 2500,
     2501, 2520, 2521, 2525, 2526, 2527, 2528, 2529, 2502, 2503,
     2531, 2504, 2505, 2506, 2532, 2507, 2508, 2510, 2512, 2515,
     2533, 2534, 2517, 2518, 2519, 2535, 2537, 2541, 2542, 2543,
     2520, 2521, 2525, 2526, 2527, 2528, 2529, 2544, 2545, 2531,

     2546, 2548, 2549, 2532, 2550, 2551, 2552, 2556, 2557, 2533,
     2534, 2559, 2560, 2561, 2535, 2537, 2541, 2542, 2543, 2562,
     2563, 2564, 2566, 2569, 2570, 2571, 2544, 2545,    0, 2546,
     2548, 2549, 2576, 2550, 2551, 2552, 2556, 2557, 2578, 2579,
     2559, 2560, 2561, 2573, 2573, 2573, 2581, 2583, 2562, 2563,
     2564, 2566, 2569, 2570, 2571, 2574, 2574, 2574, 2575, 2575,
     2575, 2576, 2584, 2585, 2586, 2587, 2589, 2578, 2579, 2590,
     2592, 2593, 2595, 2596, 2597, 2581, 2583, 2598, 2599, 2600,
     2601, 2602, 2603, 2604, 2606, 2608, 2611, 2613, 2614, 2615,
     2616, 2584, 2585, 2586, 2587, 2589, 2617, 2621, 2590, 2592,

     2593, 2595, 2596, 2597, 2622, 2623, 2598, 2599, 2600, 2601,
     2602, 2603, 2604, 2606, 2608, 2611, 2613, 2614, 2615, 2616,
     2624, 2625, 2627, 2628, 2629, 2617, 2621, 2630, 2631, 2633,
     2637, 2638, 2639, 2622, 2623, 2640, 2641, 2642, 2644, 2645,
     2646, 2647, 2648, 2652, 2653, 2655, 2656, 2657, 2658, 2624,
     2625, 2627, 2628, 2629, 2659, 2660, 2630, 2631, 2633, 2637,
     2638, 2639, 2662, 2665, 2640, 2641, 2642, 2644, 2645, 2646,
     2647, 2648, 2652, 2653, 2655, 2656, 2657, 2658, 2666, 2667,
     2669, 2670, 2671, 2659, 2660, 2673, 2675, 2676, 2678, 2682,
     2683, 2662, 2665, 2684, 2686, 2687, 2688, 2692, 2693, 2696,

     2697, 2702, 2703, 2704, 2705, 2706, 2708, 2666, 2667, 2669,
     2670, 2671, 2710, 2711, 2673, 2675, 2676, 2678, 2682, 2683,
     2712, 2713, 2684, 2686, 2687, 2688, 2692, 2693, 2696, 2697,
     2702, 2703, 2704, 2705, 2706, 2708, 2714, 2716, 2718, 2720,
     2721, 2710, 2711, 2722, 2723, 2724, 2725, 2726, 2727, 2712,
     2713, 2729, 2731, 2734, 2735, 2736, 2738, 2740, 2741, 2743,
     2747, 2748, 2749, 2751, 2752, 2714, 2716, 2718, 2720, 2721,
     2753, 2757, 2722, 2723, 2724, 2725, 2726, 2727, 2758, 2761,
     2729, 2731, 2734, 2735, 2736, 2738, 2740, 2741, 2743, 2747,
     2748, 2749, 2751, 2752, 2762, 2767, 2768, 2769, 2770, 2753,

     2757, 2771, 2773, 2775, 2776, 2777, 2778, 2758, 2761, 2779,
     2781, 2783, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792,
     2794, 2796,    0, 2762, 2767, 2768, 2769, 2770, 2800, 2801,
     2771, 2773, 2775, 2776, 2777, 2778, 2802, 2804, 2779, 2781,
     2783, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2794,
     2796, 2799, 2799, 2799, 2806, 2807, 2809, 2800, 2801, 2813,
     2814, 2815, 2817, 2818, 2819, 2802, 2804, 2823, 2824, 2827,
     2828, 2833, 2834, 2835, 2836, 2837, 2839, 2841, 2842, 2843,
     2844, 2845, 2847, 2806, 2807, 2809, 2849, 2851, 2813, 2814,
     2815, 2817, 2818, 2819, 2852, 2853, 2823, 2824, 2827, 2828,

     2833, 2834, 2835, 2836, 2837, 2839, 2841, 2842, 2843, 2844,
     2845, 2847, 2854, 2855, 2856, 2849, 2851, 2857, 2858, 2860,
     2862, 2867, 2868, 2852, 2853, 2865, 2865, 2865, 2866, 2866,
     2866, 2869, 2871, 2873, 2874, 2876, 2880, 2881, 2882, 2884,
     2885, 2854, 2855, 2856, 2886, 2890, 2857, 2858, 2860, 2862,
     2867, 2868, 2891, 2894, 2895, 2900, 2901, 2902, 2903, 2904,
     2869, 2871, 2873, 2874, 2876, 2880, 2881, 2882, 2884, 2885,
     2906, 2908, 2909, 2886, 2890, 2910, 2911, 2912, 2914, 2916,
     2918, 2891, 2894, 2895, 2900, 2901, 2902, 2903, 2904, 2919,
     2920, 2921, 2922, 2923, 2924, 2925, 2927, 2929, 2932, 2906,

     2908, 2909, 2933, 2935, 2910, 2911, 2912, 2914, 2916, 2918,
     2936, 2937,    0, 2942,    0,    0,    0, 2943, 2919, 2920,
     2921, 2922, 2923, 2924, 2925, 2927, 2929, 2932, 2939, 2939,
     2944, 2933, 2935, 2945, 2947, 2948, 2949, 2950, 2952, 2936,
     2937, 2939, 2942, 2939, 2939, 2939, 2943, 2953, 2955, 2956,
     2957, 2959, 2960, 2961, 2964, 2966, 2962, 2939, 2939, 2944,
     2962, 2967, 2945, 2947, 2948, 2949, 2950, 2952, 2968, 2969,
     2939, 2970, 2939, 2939, 2939, 2971, 2953, 2955, 2956, 2957,
     2959, 2960, 2961, 2964, 2966, 2962, 2972, 2973, 2974, 2962,
     2967, 2976, 2977, 2978, 2980, 2980, 2983, 2968, 2969, 2984,

     2970, 2985, 2986, 2988, 2971, 2989, 2990, 2980, 2991, 2980,
     2980, 2980, 2993, 2994, 2996, 2972, 2973, 2974, 2997, 2998,
     2976, 2977, 2978, 2980, 2980, 2983, 3000, 3001, 2984, 3002,
     2985, 2986, 2988, 3005, 2989, 2990, 2980, 2991, 2980, 2980,
     2980, 2993, 2994, 2996, 3007, 3003, 3008, 2997, 2998, 3003,
     3009, 3010, 3011, 3012, 3013, 3000, 3001, 3014, 3002, 3015,
     3017, 3018, 3005, 3019, 3024, 3025, 3026, 3027,    0, 3029,
        0,    0,    0, 3007, 3003, 3008, 3030, 3031, 3003, 3009,
     3010, 3011, 3012, 3013, 3021, 3021, 3014, 3032, 3015, 3017,
     3018, 3034, 3019, 3024, 3025, 3026, 3027, 3021, 3029, 3021,

     3021, 3021, 3035, 3037, 3038, 3030, 3031, 3039, 3041, 3042,
     3043, 3044, 3046, 3021, 3021, 3044, 3032, 3048, 3049, 3050,
     3034, 3051, 3052, 3053, 3054, 3055, 3021, 3056, 3021, 3021,
     3021, 3035, 3037, 3038, 3058, 3059, 3039, 3041, 3042, 3043,
     3044, 3046, 3060,    0, 3044,    0, 3048, 3049, 3050, 3065,
     3051, 3052, 3053, 3054, 3055, 3066, 3056, 3062, 3062, 3067,
     3068, 3070, 3071, 3058, 3059, 3072, 3073, 3075, 3076, 3078,
     3062, 3060, 3062, 3062, 3062, 3079, 3080, 3082, 3065, 3083,
     3084, 3085, 3087, 3089, 3066, 3085, 3062, 3062, 3067, 3068,
     3070, 3071, 3090, 3091, 3072, 3073, 3075, 3076, 3078, 3062,

     3092, 3062, 3062, 3062, 3079, 3080, 3082, 3093, 3083, 3084,
     3085, 3087, 3089, 3094, 3085, 3095, 3097, 3098, 3100, 3101,
     3102, 3090, 3091, 3103, 3102, 3104, 3105, 3106, 3108, 3092,
     3111, 3112, 3115, 3118, 3123, 3124, 3093, 3125, 3128, 3134,
     3135, 3128, 3094, 3137, 3095, 3097, 3098, 3100, 3101, 3102,
     3138, 3140, 3103, 3102, 3104, 3105, 3106, 3108, 3141, 3111,
     3112, 3115, 3118, 3123, 3124, 3142, 3125, 3128, 3134, 3135,
     3128, 3139, 3137, 3143, 3145, 3139, 3148, 3149, 3152, 3138,
     3140, 3155, 3160, 3161, 3162, 3165, 3171, 3141, 3165, 3172,
     3174, 3175, 3176, 3177, 3142, 3178, 3176, 3179, 3180, 3182,

     3139, 3185, 3143, 3145, 3139, 3148, 3149, 3152, 3186, 3189,
     3155, 3160, 3161, 3162, 3165, 3171, 3192, 3165, 3172, 3174,
     3175, 3176, 3177, 3197, 3178, 3176, 3179, 3180, 3182, 3198,
     3185, 3199, 3202, 3208, 3209, 3202, 3211, 3186, 3189, 3212,
     3213, 3214, 3215, 3216, 3213, 3192, 3217, 3219, 3222, 3223,
     3226, 3229, 3197, 3234, 3235, 3236, 3239, 3244, 3198, 3239,
     3199, 3202, 3208, 3209, 3202, 3211, 3246, 3247, 3212, 3213,
     3214, 3215, 3216, 3213, 3248, 3217, 3219, 3222, 3223, 3226,
     3229, 3249, 3234, 3235, 3236, 3239, 3244, 3250, 3239, 3251,
     3252, 3253, 3255, 3256, 3258, 3246, 3247, 3260, 3262, 3263,

     3264, 3266, 3267, 3248, 3268, 3269, 3270, 3271, 3272, 3273,
     3249, 3275, 3276, 3278, 3280, 3282, 3250, 3283, 3251, 3252,
     3253, 3255, 3256, 3258, 3284, 3286, 3260, 3262, 3263, 3264,
     3266, 3267, 3287, 3268, 3269, 3270, 3271, 3272, 3273, 3288,
     3275, 3276, 3278, 3280, 3282, 3289, 3283, 3290, 3291, 3292,
     3293, 3295, 3296, 3284, 3286, 3298, 3300, 3302, 3303, 3304,
     3306, 3287, 3307, 3308, 3309, 3310, 3311, 3312, 3288, 3313,
     3315, 3316, 3318, 3320, 3289, 3322, 3290, 3291, 3292, 3293,
     3295, 3296, 3323, 3324, 3298, 3300, 3302, 3303, 3304, 3306,
     3326, 3307, 3308, 3309, 3310, 3311, 3312, 3327, 3313, 3315,

     3316, 3318, 3320, 3328, 3322, 3329, 3330, 3331, 3332, 3333,
     3335, 3323, 3324, 3337, 3338, 3339, 3341, 3342, 3343, 3326,
     3344, 3345, 3346, 3347, 3348, 3350, 3327, 3352, 3353, 3354,
     3356, 3357, 3328, 3358, 3329, 3330, 3331, 3332, 3333, 3335,
     3359, 3360, 3337, 3338, 3339, 3341, 3342, 3343, 3361, 3344,
     3345, 3346, 3347, 3348, 3350, 3362, 3352, 3353, 3354, 3356,
     3357, 3363, 3358, 3365, 3367, 3368, 3369, 3371, 3372, 3359,
     3360, 3373, 3374, 3375, 3376, 3377, 3378, 3361, 3380, 3382,
     3383, 3384, 3385, 3387, 3362, 3390, 3391, 3395, 3396, 3397,
     3363, 3399, 3365, 3367, 3368, 3369, 3371, 3372, 3402, 3403,

     3373, 3374, 3375, 3376, 3377, 3378, 3407, 3380, 3382, 3383,
     3384, 3385, 3387, 3408, 3390, 3391, 3395, 3396, 3397, 3409,
     3399, 3411, 3414, 3415, 3419, 3420, 3421, 3402, 3403, 3423,
     3426, 3427, 3431, 3433, 3434, 3407, 3435, 3436, 3439, 3440,
     3441, 3442, 3408, 3445, 3446, 3447, 3448, 3451, 3409, 3452,
     3411, 3414, 3415, 3419, 3420, 3421, 3453, 3454, 3423, 3426,
     3427, 3431, 3433, 3434, 3456, 3435, 3436, 3439, 3440, 3441,
     3442, 3457, 3445, 3446, 3447, 3448, 3451, 3459, 3452, 3460,
     3461, 3463, 3464, 3465, 3467, 3453, 3454, 3468, 3469, 3471,
     3474, 3477, 3480, 3456, 3483, 3484, 3485, 3486, 3487, 3488,

     3457, 3489, 3490, 3491, 3492, 3494, 3459, 3496, 3460, 3461,
     3463, 3464, 3465, 3467, 3498, 3500, 3468, 3469, 3471, 3474,
     3477, 3480, 3501, 3483, 3484, 3485, 3486, 3487, 3488, 3502,
     3489, 3490, 3491, 3492, 3494, 3503, 3496, 3504, 3505, 3506,
     3507, 3508, 3509, 3498, 3500, 3510, 3511, 3512, 3513, 3514,
     3515, 3501, 3516, 3517, 3518, 3519, 3520, 3521, 3502, 3522,
     3523, 3524, 3525, 3526, 3503, 3527, 3504, 3505, 3506, 3507,
     3508, 3509, 3532, 3533, 3510, 3511, 3512, 3513, 3514, 3515,
     3534, 3516, 3517, 3518, 3519, 3520, 3521, 3535, 3522, 3523,
     3524, 3525, 3526, 3536, 3527, 3537, 3538, 3539, 3540, 3541,

     3542, 3532, 3533, 3543, 3544, 3545, 3546, 3547, 3548, 3534,
     3549, 3550, 3551,    0,    0,    0, 3535,    0,    0,    0,
        0,    0, 3536,    0, 3537, 3538, 3539, 3540, 3541, 3542,
        0,    0, 3543, 3544, 3545, 3546, 3547, 3548,    0, 3549,
     3550, 3551, 3557,    0, 3557, 3558,    0, 3558, 3559, 3559,
     3559, 3559, 3559, 3560,    0, 3560, 3560, 3560, 3560, 3560,
     3560, 3561,    0,    0, 3561, 3561, 3561,    0, 3561, 3562,
     3562, 3562, 3562, 3562, 3562, 3562, 3562, 3563, 3563, 3563,
     3563, 3563, 3563, 3563, 3563, 3564,    0, 3564, 3564, 3564,
     3564, 3564, 3564, 3556, 3556, 3556, 3556, 3556, 3556, 3556,

     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
     3556, 3556, 3556, 3556, 3556
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3557 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3556 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 207:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 208:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 209:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 210:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 211:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 215:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 216:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 217:
case 218:
case 219:
case 220:
case 221:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 222:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 223:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 224:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 225:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 226:
case 227:
case 228:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 229:
case 230:
case 231:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 232:
case 233:
case 234:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 235:
case 236:
case 237:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 238:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 239:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 240:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 241:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 242:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 243:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 244:
/* rule 244 can match eol */
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 250:
YY_RULE_SETUP
{}
	YY_BREAK
case 251:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 252:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", SQLyytext[0], SQLyytext[0], (uint64_t) SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 253:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3557 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3557 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3556);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

