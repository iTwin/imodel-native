#line 2 "F:\\gitmodel-native\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1644] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,  146,  152,  150,  148,  147,  150,   96,  111,  108,
      139,  111,   97,   99,   98,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  107,  106,  137,  111,
      113,  113,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  140,  138,  141,  111,  111,  121,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  111,  121,  150,  146,  146,  146,  146,  144,
       96,  111,  108,  111,  111,  111,   97,   99,   98,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      145,  107,  106,  148,  103,    0,  105,  109,  100,  102,
      101,  110,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   50,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,   66,   68,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  104,  115,  116,  113,
        0,    0,  112,  112,  112,    4,  112,  112,  112,  112,
      112,  112,   12,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,   43,   50,  112,  112,  112,
      112,  112,  112,  112,   61,  112,  112,   66,   68,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  136,  126,  136,
      136,  136,  121,  136,  120,  120,  120,    4,  120,  120,

      120,  120,  120,  120,   12,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   43,   50,  120,
      120,  120,  120,  120,  120,  120,   61,  120,  120,   66,
       68,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  132,
      136,  136,  136,  121,  136,    0,  142,  146,  146,  103,
      146,  105,  109,  100,  102,  101,  110,  146,  146,    4,
      146,  146,  146,  146,  146,  146,   12,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,   43,
       50,  146,  146,  146,  146,  146,  146,  146,   61,  146,
      146,   66,   68,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  104,    0,  149,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   29,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,   42,
        0,    0,   46,    0,    0,    0,    0,    0,    0,   57,
       58,    0,    0,    0,   63,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   77,    0,    0,   80,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,    0,    0,  117,  114,    1,    2,    3,
        5,    6,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       29,  112,  112,  112,  112,  112,  112,   36,  112,  112,
      112,  112,   42,  112,  112,   46,  112,  112,  112,  112,
      112,  112,   57,   58,  112,  112,  112,   63,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   77,
      112,  112,   80,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,    0,  129,  136,  124,  136,  121,
        0,  127,    1,    2,    3,    5,    6,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,   29,  120,  120,  120,  120,
      120,  120,   36,  120,  120,  120,  120,   42,  120,  120,
       46,  120,  120,  120,  120,  120,  120,   57,   58,  120,
      120,  120,   63,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   77,  120,  120,   80,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,    0,
      135,  130,  136,  136,  121,    0,  133,  142,    0,  142,

      146,  146,    1,    2,    3,    5,    6,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   29,  146,  146,  146,  146,
      146,  146,   36,  146,  146,  146,  146,   42,  146,  146,
       46,  146,  146,  146,  146,  146,  146,   57,   58,  146,
      146,  146,   63,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   77,  146,  146,   80,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
        0,    0,   10,    0,   13,   14,    0,    0,    0,    0,
       21,    0,    0,   24,    0,    0,    0,   28,    0,    0,

        0,    0,    0,    0,    0,   38,   39,    0,    0,    0,
        0,    0,    0,   49,   51,   52,   53,    0,   55,    0,
        0,    0,    0,   64,    0,   67,    0,    0,    0,   72,
        0,    0,    0,    0,   78,    0,   81,   82,   84,    0,
        0,    0,    0,    0,    0,    0,   93,    0,   95,    0,
      119,    0,  118,  112,  112,  112,   10,  112,   13,   14,
      112,  112,  112,  112,   21,  112,  112,   24,  112,  112,
      112,   28,  112,  112,  112,  112,  112,  112,  112,   38,
       39,  112,  112,  112,  112,  112,  112,   49,   51,   52,
       53,  112,   55,  112,  112,  112,  112,   64,  112,   67,

      112,  112,  112,   72,  112,  112,  112,  112,   78,  112,
       81,   82,   84,  112,  112,  112,  112,  112,  112,  112,
       93,  112,   95,  129,  136,    0,  128,  121,  127,  120,
      120,  120,   10,  120,   13,   14,  120,  120,  120,  120,
       21,  120,  120,   24,  120,  120,  120,   28,  120,  120,
      120,  120,  120,  120,  120,   38,   39,  120,  120,  120,
      120,  120,  120,   49,   51,   52,   53,  120,   55,  120,
      120,  120,  120,   64,  120,   67,  120,  120,  120,   72,
      120,  120,  120,  120,   78,  120,   81,   82,   84,  120,
      120,  120,  120,  120,  120,  120,   93,  120,   95,  135,

        0,  134,  136,  121,  133,    0,  142,  146,  146,  146,
       10,  146,   13,   14,  146,  146,  146,  146,   21,  146,
      146,   24,  146,  146,  146,   28,  146,  146,  146,  146,
      146,  146,  146,   38,   39,  146,  146,  146,  146,  146,
      146,   49,   51,   52,   53,  146,   55,  146,  146,  146,
      146,   64,  146,   67,  146,  146,  146,   72,  146,  146,
      146,  146,   78,  146,   81,   82,   84,  146,  146,  146,
      146,  146,  146,  146,   93,  146,   95,    0,    0,    0,
        0,    0,   16,   17,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,   34,   35,    0,   40,    0,   44,

        0,   47,    0,    0,   54,   56,    0,    0,    0,    0,
       69,   70,    0,    0,   74,    0,    0,    0,    0,   85,
        0,    0,    0,   89,   90,    0,   94,  112,  112,  112,
      112,  112,   16,   17,  112,  112,  112,  112,  112,  112,
      112,   31,  112,  112,   34,   35,  112,   40,  112,   44,
      112,   47,  112,  112,   54,   56,  112,  112,  112,  112,
       69,   70,  112,  112,   74,  112,  112,  112,  112,   85,
      112,  112,  112,   89,   90,  112,   94,  122,  128,  120,
      120,  120,  120,  120,   16,   17,  120,  120,  120,  120,
      120,  120,  120,   31,  120,  120,   34,   35,  120,   40,

      120,   44,  120,   47,  120,  120,   54,   56,  120,  120,
      120,  120,   69,   70,  120,  120,   74,  120,  120,  120,
      120,   85,  120,  120,  120,   89,   90,  120,   94,  134,
      123,    0,  143,  146,  146,  146,  146,  146,   16,   17,
      146,  146,  146,  146,  146,  146,  146,   31,  146,  146,
       34,   35,  146,   40,  146,   44,  146,   47,  146,  146,
       54,   56,  146,  146,  146,  146,   69,   70,  146,  146,
       74,  146,  146,  146,  146,   85,  146,  146,  146,   89,
       90,  146,   94,    0,    0,    9,    0,   15,    0,    0,
       23,    0,   26,    0,   30,   32,   33,    0,   41,   45,

        0,    0,    0,    0,   62,   65,   71,    0,    0,   76,
       79,    0,   86,    0,   88,   91,    0,  112,  112,    9,
      112,   15,  112,  112,   23,  112,   26,  112,   30,   32,
       33,  112,   41,   45,  112,  112,  112,  112,   62,   65,
       71,  112,  112,   76,   79,  112,   86,  112,   88,   91,
      112,  136,  120,  120,    9,  120,   15,  120,  120,   23,
      120,   26,  120,   30,   32,   33,  120,   41,   45,  120,
      120,  120,  120,   62,   65,   71,  120,  120,   76,   79,
      120,   86,  120,   88,   91,  120,  136,  143,  143,  146,
      146,    9,  146,   15,  146,  146,   23,  146,   26,  146,

       30,   32,   33,  146,   41,   45,  146,  146,  146,  146,
       62,   65,   71,  146,  146,   76,   79,  146,   86,  146,
       88,   91,  146,    0,    8,   11,    0,   22,    0,    0,
       37,   46,    0,   59,    0,    0,    0,    0,   87,   92,
      112,    8,   11,  112,   22,  112,  112,   37,   46,  112,
       59,  112,  112,  112,  112,   87,   92,  125,  120,    8,
       11,  120,   22,  120,  120,   37,   46,  120,   59,  120,
      120,  120,  120,   87,   92,  131,  143,  146,    8,   11,
      146,   22,  146,  146,   37,   46,  146,   59,  146,  146,
      146,  146,   87,   92,    7,    0,   25,    0,    0,    0,

        0,   75,    0,    7,  112,   25,  112,  112,  112,  112,
       75,  112,    7,  120,   25,  120,  120,  120,  120,   75,
      120,    7,  146,   25,  146,  146,  146,  146,   75,  146,
        0,    0,    0,   48,    0,   73,   83,  112,  112,  112,
       48,  112,   73,   83,  120,  120,  120,   48,  120,   73,
       83,  146,  146,  146,   48,  146,   73,   83,    0,    0,
        0,    0,  112,  112,  112,  112,  120,  120,  120,  120,
      146,  146,  146,  146,    0,    0,    0,    0,  112,  112,
      112,  112,  120,  120,  120,  120,  146,  146,  146,  146,
       18,   19,   27,    0,   18,   19,   27,  112,   18,   19,

       27,  120,   18,   19,   27,  146,    0,    0,  112,  112,
      120,  120,  146,  146,    0,    0,  112,  112,  120,  120,
      146,  146,    0,    0,  112,  112,  120,  120,  146,  146,
        0,   60,  112,   60,  120,   60,  146,   60,   20,   20,
       20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1653] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  611, 3726,  359, 3726,  575, 3726, 3726, 3726,
     3726,  346,  341, 3726,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  398,  410,  401,  440,  350,
      438,  444,  448,  436,  459,  454,  510, 3726, 3726,  475,
      505,  510,  494,  513,  506,  525,  558,  563,  462,  511,
      557,  502,    0,  574,  522,  573,  608,  501,  587,  615,
      619,  625,  519,  578, 3726, 3726, 3726,    0,  682,  689,
      674,  694,  690,  738,  730,  745,  515,  567,  683,  604,
        0,  736,  623,  735,  782,  615,  782,  789,  790,  799,

      633,  663,  856,  863,  870,    0,  393,    0,  534, 3726,
        0,    0,    0,    0,  375, 3726,  648,    0,  422,  855,
      870,  871,  879,  913,  918,  620,  639,  792,  635,  929,
      869,  925,  964,  642,  942,  969,  934,  977,  684,  721,
     3726,  456,    0,  495, 3726,  500, 3726, 3726, 3726, 3726,
     3726, 3726,  686,  789,  752,  754,  799,  785,  793,  797,
      809, 3726,  854,  870,  861,  863,  873,  982,  910,  910,
      931,  958,  979,  984,  987,  995,  983,  982,  982,  987,
      993,  993,  987, 1004, 1021, 3726, 1006, 1022, 1032, 1018,
     1022, 1022, 1027, 1047, 1036, 1045, 1040, 1049, 1034, 1054,

     1055, 1052, 1048, 1074, 1049, 1045, 1053, 1063, 1060, 1069,
     1089, 1089, 1090, 1089, 1098, 1084, 3726, 1116, 1146, 1151,
     1165,    0,    0, 1093, 1143, 1103, 1113, 1122, 1117, 1134,
     1137, 1146,    0, 1143, 1150, 1149, 1147, 1147, 1163, 1151,
     1151, 1154, 1155, 1174, 1176, 1178, 1186, 1172, 1171, 1169,
     1173, 1193, 1191, 1187, 1204, 1200,    0, 1212, 1216, 1212,
     1212, 1207, 1214, 1210, 1226, 1221, 1230, 1225, 1236, 1221,
     1241, 1244, 1237, 1241, 1252, 1250, 1249, 1255, 1272, 1265,
     1258, 1272, 1276, 1275, 1273, 1281, 1267,    0, 1329, 1310,
     1333, 1337, 1344, 1353,    0, 1276, 1286, 1286, 1337, 1347,

     1331, 1338, 1338, 1339,    0, 1336, 1343, 1342, 1340, 1339,
     1355, 1341, 1341, 1346, 1347, 1364, 1366, 1365, 1397, 1360,
     1360, 1358, 1377, 1390, 1392, 1386, 1403, 1396,    0, 1402,
     1406, 1406, 1399, 1394, 1406, 1402, 1430, 1411, 1419, 1414,
     1423, 1408, 1429, 1431, 1451, 1448, 1452, 1452, 1448, 1454,
     1463, 1456, 1449, 1462, 1470, 1466, 1464, 1472, 1458, 1520,
     1528, 1534, 1491, 1541, 1550, 1555, 1563,    0,  676,    0,
     1582,    0,    0,    0,    0,    0,    0, 1468, 1547, 1478,
     1481, 1487, 1488, 1510, 1537, 1546,    0, 1544, 1552, 1549,
     1548, 1549, 1564, 1552, 1553, 1558, 1560, 1580, 1582, 1581,

     1588, 1575, 1573, 1571, 1581, 1592, 1592, 1588, 1605, 1608,
        0, 1610, 1615, 1618, 1609, 1610, 1610, 1615, 1629, 1626,
     1635, 1630, 1639, 1624, 1644, 1674, 1640, 1642, 1667, 1642,
     1644, 1652, 1663, 1656, 1659, 1677, 1677, 1673, 1677, 1680,
     1670,    0,  497, 3726, 3726, 3726, 3726, 3726, 3726, 1681,
     1670, 1695, 1697, 1688, 1700, 1688, 1688, 1684, 1689, 1707,
     1712, 1718, 1723, 1707, 1731, 1718, 1732, 3726, 1737, 1721,
     1735, 1724, 1725, 1744, 1723, 1734, 1736, 1729, 1742, 3726,
     1748, 1749, 1766, 1743, 1738, 1754, 1751, 1756, 1762, 3726,
     3726, 1749, 1769, 1783, 3726, 1773, 1771, 1766, 1788, 1790,

     1789, 1785, 1777, 1793, 1790, 1798, 3726, 1799, 1796, 3726,
     1792, 1803, 1804, 1800, 1797, 1811, 1802, 1797, 1818, 1825,
     1815, 1861, 1865, 1881, 1869, 1885,    0,    0,    0,    0,
        0,    0, 1825, 1843, 1866, 1879, 1870, 1878, 1871, 1871,
     1867, 1869, 1883, 1888, 1885, 1888, 1872, 1891, 1877, 1892,
        0, 1899, 1883, 1897, 1884, 1885, 1904, 1883, 1894, 1896,
     1888, 1915,    0, 1920, 1923, 1944, 1926, 1921, 1937, 1934,
     1937, 1942,    0,    0, 1925, 1938, 1947,    0, 1938, 1932,
     1927, 1950, 1951, 1951, 1948, 1940, 1954, 1951, 1959,    0,
     1960, 1957,    0, 1953, 1963, 1977, 1983, 1969, 1985, 1985,

     1980, 1999, 1989, 1996, 2024, 2028, 2045, 2049, 2057, 2064,
     2068, 2072,    0,    0,    0,    0,    0, 1994, 1983, 2045,
     2046, 2056, 2065, 2058, 2058, 2054, 2056, 2071, 2077, 2074,
     2077, 2061, 2080, 2067, 2081,    0, 2086, 2070, 2084, 2071,
     2072, 2091, 2070, 2081, 2083, 2075, 2095,    0, 2101, 2107,
     2131, 2113, 2108, 2124, 2121, 2124, 2129,    0,    0, 2113,
     2128, 2137,    0, 2127, 2121, 2117, 2138, 2139, 2138, 2135,
     2127, 2141, 2138, 2146,    0, 2147, 2144,    0, 2140, 2150,
     2157, 2170, 2150, 2169, 2172, 2167, 2186, 2176, 2184, 2203,
     2208, 2215, 2234, 2238, 2245, 2249, 2253, 2273, 2260, 2278,

     2284,    0,    0,    0,    0,    0,    0, 2195, 2234, 2257,
     2257, 2248, 2258, 2261, 2261, 2257, 2259, 2276, 2282, 2280,
     2287, 2271, 2291, 2277, 2290,    0, 2295, 2279, 2293, 2280,
     2281, 2300, 2279, 2295, 2297, 2292, 2306,    0, 2311, 2312,
     2338, 2304, 2301, 2327, 2325, 2328, 2333,    0,    0, 2318,
     2331, 2340,    0, 2336, 2330, 2326, 2347, 2349, 2348, 2344,
     2336, 2350, 2347, 2355,    0, 2357, 2357,    0, 2353, 2366,
     2368, 2359, 2361, 2378, 2376, 2371, 2390, 2380, 2389, 2376,
     2396, 2388, 3726, 2402, 3726, 3726, 2400, 2390, 2392, 2407,
     3726, 2392, 2394, 3726, 2406, 2404, 2405, 3726, 2402, 2395,

     2408, 2405, 2424, 2411, 2431, 3726, 3726, 2417, 2420, 2419,
     2430,  436, 2449, 3726, 3726, 3726, 3726, 2430, 3726, 2443,
     2434, 2448, 2438, 3726, 2454, 3726, 2446, 2447, 2455, 3726,
     2451, 2450, 2469, 2469, 3726, 2459, 3726, 2455, 3726, 2461,
     2455, 2463, 2462, 2476, 2482, 2481, 3726, 2485, 3726, 2528,
     2532, 2536, 2540, 2485, 2504, 2492,    0, 2508,    0,    0,
     2505, 2495, 2498, 2531,    0, 2519, 2521,    0, 2536, 2535,
     2536,    0, 2533, 2525, 2535, 2532, 2548, 2534, 2554,    0,
        0, 2540, 2543, 2540, 2541,  432, 2553,    0,    0,    0,
        0, 2541,    0, 2554, 2545, 2557, 2547,    0, 2562,    0,

     2550, 2554, 2560,    0, 2557, 2574, 2596, 2596,    0, 2589,
        0, 2586,    0, 2592, 2586, 2593, 2589, 2603, 2606, 2604,
        0, 2608,    0, 2622, 2626, 2651, 2655, 2660, 2664, 2608,
     2628, 2643,    0, 2658,    0,    0, 2655, 2646, 2648, 2663,
        0, 2648, 2650,    0, 2662, 2660, 2661,    0, 2658, 2650,
     2660, 2657, 2673, 2659, 2679,    0,    0, 2665, 2668, 2665,
     2666,  431, 2707,    0,    0,    0,    0, 2666,    0, 2679,
     2670, 2682, 2672,    0, 2714,    0, 2703, 2704, 2710,    0,
     2706, 2706, 2725, 2725,    0, 2715,    0, 2711,    0, 2717,
     2711, 2718, 2714, 2728, 2731, 2729,    0, 2733,    0, 2747,

     2752, 2776, 2780, 2787, 2791, 2795, 2813, 2726, 2788, 2776,
        0, 2790,    0,    0, 2787, 2777, 2779, 2794,    0, 2779,
     2781,    0, 2793, 2791, 2792,    0, 2793, 2785, 2795, 2792,
     2808, 2794, 2814,    0,    0, 2800, 2803, 2800, 2801,  423,
     2842,    0,    0,    0,    0, 2814,    0, 2827, 2818, 2830,
     2831,    0, 2846,    0, 2834, 2835, 2841,    0, 2837, 2836,
     2855, 2855,    0, 2845,    0, 2842,    0, 2848, 2846, 2853,
     2849, 2863, 2866, 2864,    0, 2868,    0, 2873, 2870, 2851,
     2876, 2872, 3726, 3726, 2879, 2882, 2890, 2893, 2903, 2894,
     2905, 3726, 2891, 2893, 3726, 3726, 2895, 3726, 2907, 3726,

     2895, 3726, 2911, 2898, 3726, 3726, 2917, 2918, 2915, 2905,
     3726, 3726, 2925, 2908, 3726, 2927, 2909, 2923, 2911, 3726,
     2927, 2910, 2929, 3726, 2916, 2949, 3726, 2950, 2947, 2928,
     2964, 2946,    0,    0, 2953, 2956, 2964, 2956, 2966, 2957,
     2968,    0, 2954, 2956,    0,    0, 2958,    0, 2970,    0,
     2958,    0, 2978, 2965,    0,    0, 2984, 2985, 2982, 2968,
        0,    0, 2988, 2971,    0, 2990, 2972, 2986, 2988,    0,
     3004, 2987, 3006,    0, 3004, 3023,    0,  721, 3033, 3028,
     3025, 3006, 3031, 3013,    0,    0, 3020, 3023, 3031, 3027,
     3037, 3028, 3039,    0, 3025, 3027,    0,    0, 3029,    0,

     3041,    0, 3029,    0, 3045, 3032,    0,    0, 3053, 3054,
     3051, 3037,    0,    0, 3065, 3048,    0, 3067, 3049, 3074,
     3062,    0, 3082, 3065, 3084,    0, 3071, 3090,    0, 3107,
      778, 3111, 3120, 3091, 3088, 3069, 3106, 3088,    0,    0,
     3095, 3112, 3120, 3112, 3122, 3113, 3124,    0, 3110, 3112,
        0,    0, 3114,    0, 3126,    0, 3114,    0, 3130, 3120,
        0,    0, 3139, 3140, 3137, 3123,    0,    0, 3143, 3126,
        0, 3145, 3127, 3141, 3129,    0, 3145, 3128, 3147,    0,
     3146, 3165,    0, 3149, 3168, 3726, 3169, 3726, 3164, 3165,
     3726, 3183, 3726, 3171, 3726, 3726, 3726, 3184, 3726, 3726,

     3171, 3185, 3179, 3172, 3726, 3726, 3726, 3184, 3194, 3726,
     3726, 3197, 3726, 3185, 3726, 3726, 3182, 3183, 3188,    0,
     3189,    0, 3184, 3185,    0, 3203,    0, 3191,    0,    0,
        0, 3204,    0,    0, 3191, 3205, 3211, 3204,    0,    0,
        0, 3216, 3237,    0,    0, 3240,    0, 3228,    0,    0,
     3225, 3252, 3230, 3235,    0, 3236,    0, 3231, 3235,    0,
     3253,    0, 3241,    0,    0,    0, 3254,    0,    0, 3241,
     3255, 3249, 3242,    0,    0,    0, 3254, 3261,    0,    0,
     3264,    0, 3252,    0,    0, 3249, 3281, 3305, 3309, 3263,
     3268,    0, 3269,    0, 3285, 3286,    0, 3304,    0, 3292,

        0,    0,    0, 3305,    0,    0, 3295, 3309, 3303, 3296,
        0,    0,    0, 3308, 3315,    0,    0, 3318,    0, 3306,
        0,    0, 3303, 3318, 3726, 3726,  386, 3726, 3303, 3304,
     3726, 3726, 3322, 3726, 3317, 3305, 3317, 3316, 3726, 3726,
     3326,    0,    0,  342,    0, 3311, 3312,    0,    0, 3330,
        0, 3330, 3318, 3330, 3350,    0,    0, 3372, 3367,    0,
        0,  338,    0, 3352, 3353,    0,    0, 3371,    0, 3366,
     3354, 3366, 3365,    0,    0, 3387, 3391, 3383,    0,    0,
      332,    0, 3368, 3369,    0,    0, 3387,    0, 3382, 3371,
     3383, 3382,    0,    0, 3726, 3392, 3726, 3388, 3378, 3384,

     3403, 3726, 3393,    0, 3409,    0, 3401, 3391, 3399, 3410,
        0, 3405,    0, 3426,    0, 3422, 3412, 3418, 3429,    0,
     3419,    0, 3432,    0, 3436, 3427, 3433, 3444,    0, 3435,
     3452, 3445, 3440, 3726, 3442, 3726, 3726, 3456, 3457, 3452,
        0, 3454,    0,    0, 3468, 3461, 3456,    0, 3458,    0,
        0, 3472, 3470, 3472,    0, 3474,    0,    0, 3469, 3477,
     3477,  315, 3472, 3480, 3480,  218, 3483, 3491, 3491,  211,
     3486, 3494, 3495,  204, 3505, 3506, 3493, 3491, 3509, 3510,
     3505, 3503, 3521, 3522, 3509, 3507, 3525, 3526, 3518, 3523,
     3726, 3527, 3726, 3546,    0, 3529,    0, 3548,    0, 3531,

        0, 3550,    0, 3533,    0, 3560, 3542, 3551, 3544, 3553,
     3547, 3556, 3549, 3558, 3570, 3551, 3572, 3561, 3582, 3563,
     3584, 3565, 3574, 3583, 3576, 3590, 3590, 3599, 3592, 3601,
     3591, 3726, 3592,    0, 3593,    0, 3594,    0, 3726,    0,
        0,    0, 3726, 3660, 3666, 3671, 3680, 3689, 3698,  245,
     3707, 3716
    } ;

static const flex_int16_t yy_def[1653] =
    {   0,
     1643,    1, 1643,    3, 1643,    5,    5,    5,    5,    5,
     1643,   11, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1643, 1643, 1643, 1645, 1645, 1645,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1645, 1645, 1647, 1648, 1648, 1648, 1648, 1643,
     1648, 1648, 1648, 1648, 1648, 1643, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1643, 1648, 1648, 1643, 1643, 1649, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1650, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1645,
     1645, 1645, 1645, 1645, 1645, 1647, 1647, 1648, 1648, 1648,
     1651, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1649, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1650, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 1644, 1643, 1645, 1645, 1645, 1645, 1645,
     1643, 1645, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1643,
     1645, 1645, 1645, 1645, 1645, 1643, 1645, 1647, 1643, 1647,

     1651, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1643, 1645, 1643, 1645, 1645, 1643, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1643,

     1643, 1645, 1645, 1645, 1643, 1652, 1647, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1643, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1643,
     1645, 1652, 1652, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1645, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1645, 1652, 1652, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1645, 1652, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1643, 1643,
     1643, 1643, 1644, 1644, 1644, 1644, 1646, 1646, 1646, 1646,
     1648, 1648, 1648, 1648, 1643, 1643, 1643, 1643, 1644, 1644,
     1644, 1644, 1646, 1646, 1646, 1646, 1648, 1648, 1648, 1648,
     1643, 1643, 1643, 1643, 1644, 1644, 1644, 1644, 1646, 1646,

     1646, 1646, 1648, 1648, 1648, 1648, 1643, 1643, 1644, 1644,
     1646, 1646, 1648, 1648, 1643, 1643, 1644, 1644, 1646, 1646,
     1648, 1648, 1643, 1643, 1644, 1644, 1646, 1646, 1648, 1648,
     1643, 1643, 1644, 1644, 1646, 1646, 1648, 1648, 1643, 1644,
     1646, 1648,    0, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643
    } ;

static const flex_int16_t yy_nxt[3810] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      527,   78,  104,  104,  104,  104,  103, 1590,   78,  104,
      104,  104,  104,   19, 1586,   19,  105,  105,  105,  105,
       19, 1582,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1578,  153,
      147,  154,  163,  157,  167,  182,  155,  158,  168,  156,
      183,  159,  169,  187,  160, 1523,  164,  161,  170,  165,
      371, 1514,  166,  200,  369, 1505,  144,  162,  153,  372,

      154,  163,  157,  167,  182,  155,  158,  168,  156,  183,
      159,  169,  187,  160,  171,  164,  161,  170,  165,  184,
      177,  166,  200,  172,  185,  173,  162,  193,  188,  186,
      174,  178,  189,  175,  179,  176,  191,  180,  190, 1496,
      181,  194, 1258,  171,  192,  376,  377,  195,  184,  177,
     1204, 1152,  172,  185,  173, 1102,  193,  188,  186,  174,
      178,  189,  175,  179,  176,  191,  180,  190,  201,  181,
      194,  196,  202,  192,  204,  211,  195,  212,  203,  197,
      213,  208,  209,  198,  205,  214,  199,  215,  216,  206,
      207,  210,  218,  218,  218,  218,  144,  201,  144,  444,

      196,  202,  444,  204,  211,  253,  212,  203,  197,  213,
      208,  209,  198,  205,  214,  199,  215,  216,  206,  207,
      210,  219,  220,  220,  220,  220,  219,  220,  220,  220,
      220,  224,  234,  225,  253,  221,  442,  254,  226,  228,
      221,  227,  258,  229,  271,  285,  235,  230,  262,  236,
      231,  238,  237,  232,  222,  239,  263,  370,  325,  240,
      224,  234,  225,  233,  221,  241,  254,  226,  228,  221,
      227,  258,  229,  271,  285,  235,  230,  262,  236,  231,
      238,  237,  232,  222,  239,  263,  242,  325,  240,  248,
      217,  255,  233,  326,  241,  243,  256,  244,  145,  264,

      249,  257,  245,  250,  259,  246,  251,  247,  260,  252,
     1643,  286,  287,  265,  261,  242, 1643,  272,  248,  266,
      255,  273,  326, 1643,  243,  256,  244,  274,  264,  249,
      257,  245,  250,  259,  246,  251,  247,  260,  252,  267,
      286,  287,  265,  261,  330,  275,  272,  268,  266,  334,
      273,  269,  279,  280,  270,  276,  274,  335,  343,  357,
      277,  278,  281,  407,  282,  408,  283, 1643,  267,  284,
      373,  374,  375,  330,  275,  412,  268,  369,  334,  144,
      269,  279,  280,  270,  276,  425,  335,  343,  357,  277,
      278,  281,  407,  282,  408,  283,  358,  359,  284,  289,

      289,  289,  289,  291,  412,  292,  293,  293,  293,  293,
      439,  296,  290,  297,  425, 1643,  306,  327,  298,  294,
      300,  299,  328,  445,  301,  358,  359,  329,  302, 1643,
      307,  303, 1643,  308,  304,  291,  309, 1352, 1643,  439,
      296,  290,  297, 1643,  305,  306,  327,  298,  294,  300,
      299,  328,  445,  301,  440,  441,  329,  302,  314,  307,
      303,  336,  308,  304,  310,  309,  331,  315,  311,  316,
      332,  320,  312,  305,  317,  337,  333,  318,  313,  319,
      448,  338,  321,  440,  441,  322,  449,  314,  323, 1643,
      336,  324, 1387,  310,  363,  331,  315,  311,  316,  332,

      320,  312, 1643,  317,  337,  333,  318,  313,  319,  448,
      338,  321,  344,  339,  322,  449,  345,  323,  446,  347,
      324,  340,  346,  351,  352,  341,  409,  450,  342,  348,
      451,  410,  452,  353,  349,  350,  411,  453,  354,  447,
      355,  344,  339,  356, 1643,  345, 1643,  446,  347,  454,
      340,  346,  351,  352,  341,  409,  450,  342,  348,  451,
      410,  452,  353,  349,  350,  411,  453,  354,  447,  355,
     1643, 1643,  356,  360,  360,  360,  360,  362,  454,  363,
      364,  364,  364,  364, 1643, 1643,  361,  367,  367,  367,
      367, 1643,  378,  365,  379,  416,  382,  388,  455,  380,

      383,  458,  381,  417,  384,  392,  459,  385,  456,  393,
      386,  389, 1643,  394,  390,  361,  457,  391,  460,  395,
      387,  378,  365,  379,  416,  382,  388,  455,  380,  383,
      458,  381,  417,  384,  392,  459,  385,  456,  393,  386,
      389,  396,  394,  390,  402,  457,  391,  460,  395,  387,
      397,  418,  398, 1643,  464,  403,  465,  399,  404,  413,
      400,  405,  401,  414,  406,  419, 1643,  433,  434,  415,
      396,  420,  426,  402, 1643,  466,  427,  435, 1643,  397,
      418,  398,  428,  464,  403,  465,  399,  404,  413,  400,
      405,  401,  414,  406,  419,  421,  433,  434,  415,  429,

      420,  426,  467,  422,  466,  427,  435,  423,  468,  430,
      424,  428,  469,  461,  431,  432,  436,  470,  437,  462,
      473,  438,  474,  471,  421,  475,  463,  476,  429,  472,
      477,  467,  422,  478,  479,  480,  423,  468,  430,  424,
      484,  469,  461,  431,  432,  436,  470,  437,  462,  473,
      438,  474,  471,  485,  475,  463,  476,  488,  472,  477,
      481,  491,  478,  479,  480,  482,  483,  489,  486,  484,
      487,  490,  492,  496,  493,  494,  497,  498,  499,  500,
      501,  502,  485,  503,  504,  505,  488,  508,  509,  481,
      491,  510,  495,  511,  482,  483,  489,  486,  512,  487,

      490,  492,  496,  493,  494,  497,  498,  499,  500,  501,
      502,  506,  503,  504,  505,  513,  508,  509,  516,  507,
      510,  495,  511,  514,  517,  515,  518,  512,  520,  521,
      528,  531,  519,  218,  218,  218,  218, 1643, 1643, 1643,
      506, 1643, 1643, 1643,  513,  532,  522,  516,  507, 1643,
      533, 1643,  514,  517,  515,  518, 1643,  520,  521,  528,
      531,  519,  534,  523,  523,  523,  523,  219,  220,  220,
      220,  220,  529,  535,  532,  522,  524,  536,  525,  533,
      525,  221,  526,  526,  526,  526,  537,  538,  539,  541,
      542,  534,  543,  530,  544,  547,  540,  548,  549,  550,

      545,  529,  535,  551,  552,  524,  536,  546,  553,  556,
      221,  557,  558,  559,  554,  537,  538,  539,  541,  542,
      555,  543,  530,  544,  547,  540,  548,  549,  550,  545,
      560,  561,  551,  552,  562,  563,  546,  553,  556,  564,
      557,  558,  559,  554,  565,  566,  567,  568,  569,  555,
      570,  571,  572,  574,  577,  575,  573,  576,  579,  560,
      561,  580,  581,  562,  563,  582,  583,  584,  564,  587,
      585,  578,  586,  565,  566,  567,  568,  569,  588,  570,
      571,  572,  574,  577,  575,  573,  576,  579,  591,  589,
      580,  581,  592,  593,  582,  583,  584,  590,  587,  585,

      578,  586,  594,  595,  596,  599,  597,  588,  598,  600,
      601,  603,  604,  613,  616,  614,  602,  591,  589, 1643,
     1643,  592,  593,  605, 1643,  605,  590,  606,  606,  606,
      606,  594,  595,  596,  599,  597,  615,  598,  600,  601,
      603,  604,  613,  616,  614,  602,  289,  289,  289,  289,
      607,  607,  607,  607,  608,  608,  608,  608,  291,  290,
      292,  610,  610,  610,  610,  615,  611,  609,  611,  617,
      612,  612,  612,  612,  294,  618,  619,  620,  621,  622,
      623,  624,  626,  627,  628,  632,  629,  633,  290,  625,
      634,  635,  630,  636,  637,  638,  609,  641,  617,  631,

      642,  643, 1643,  294,  618,  619,  620,  621,  622,  623,
      624,  626,  627,  628,  632,  629,  633,  644,  625,  634,
      635,  630,  636,  637,  638,  639,  641,  645,  631,  642,
      643,  640,  646,  647,  648,  649,  652,  653,  656,  657,
      650,  651,  654,  658,  655,  659,  644,  660,  664,  661,
      665,  666,  667,  668,  639,  669,  645,  670,  662,  671,
      640,  646,  647,  648,  649,  652,  653,  656,  657,  650,
      651,  654,  658,  655,  659,  663,  660,  664,  661,  665,
      666,  667,  668,  672,  669,  673,  670,  662,  671,  674,
      676,  677,  678,  679,  680,  681,  682,  675,  683,  684,

      685,  686,  688,  689,  663,  703,  706,  687,  694,  694,
      694,  694,  672,  707,  673,  708, 1643, 1643,  674,  676,
      677,  678,  679,  680,  681,  682,  675,  683,  684,  685,
      686,  688,  689,  709,  703,  706,  687,  360,  360,  360,
      360,  690,  707,  690,  708,  691,  691,  691,  691,  710,
      361,  692,  692,  692,  692,  362, 1643,  363,  695,  695,
      695,  695,  709,  696,  693,  696,  699,  697,  697,  697,
      697,  365,  698,  698,  698,  698,  704,  711,  710,  361,
      700,  700,  700,  700,  702,  443,  712,  443,  713,  716,
      714,  717,  443,  693,  718,  719,  722,  705,  715,  723,

      365,  720,  724,  443,  725,  704,  711,  443,  721,  726,
      727,  728,  731,  732,  733,  712,  729,  713,  716,  714,
      717,  734,  730,  718,  719,  722,  705,  715,  723,  735,
      720,  724,  736,  725,  443,  737,  738,  721,  726,  727,
      728,  731,  732,  733,  742,  729,  743,  739,  746,  749,
      734,  730,  740,  741,  744,  747,  745,  752,  735,  748,
      750,  736,  751,  754,  737,  738,  755,  756,  757,  758,
      759, 1643,  762,  742,  753,  743,  739,  746,  749,  763,
      766,  740,  741,  744,  747,  745,  752,  767,  748,  750,
      768,  751,  754,  769,  770,  755,  756,  757,  758,  759,

      760,  762,  761,  753,  764,  771,  774,  775,  763,  766,
      778,  772,  765,  773,  776,  779,  767,  780,  781,  768,
      777,  782,  769,  770,  783,  784,  787,  788,  789,  760,
      785,  761,  790,  764,  771,  774,  775,  791,  792,  778,
      772,  765,  773,  776,  779,  786,  780,  781,  793,  777,
      782,  794,  795,  783,  784,  787,  788,  789,  796,  785,
      797,  790,  798,  799,  800,  801,  791,  792,  802,  803,
      804,  805,  806,  807,  786,  808,  809,  793,  810,  811,
      794,  795,  815,  816,  817,  818,  812,  796,  819,  797,
      820,  798,  799,  800,  801,  821,  813,  802,  803,  804,

      805,  806,  807,  822,  808,  809,  814,  810,  811,  823,
      824,  815,  816,  817,  818,  825,  826,  819,  827,  820,
      828,  829,  830,  831,  821,  813,  832,  833,  834,  835,
      836,  837,  822,  838,  839,  814,  842,  843,  823,  824,
      840,  844,  841,  845,  825,  826,  846,  827,  849,  828,
      829,  830,  831, 1643, 1643,  832,  833,  834,  835,  836,
      837,  854,  838,  839,  847,  842,  843, 1643,  848,  840,
      844,  841,  845, 1643,  850,  846,  850,  849,  851,  851,
      851,  851,  523,  523,  523,  523,  526,  526,  526,  526,
      854,  855,  856,  847,  852,  524,  852,  848,  853,  853,

      853,  853,  526,  526,  526,  526,  857,  858,  859,  861,
      862,  863,  864,  865,  866,  867,  868,  869,  870,  871,
      855,  856,  872,  860,  524,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  882,  857,  858,  859,  861,  862,
      863,  864,  865,  866,  867,  868,  869,  870,  871,  883,
      884,  872,  860,  885,  873,  874,  875,  876,  877,  878,
      879,  880,  881,  882,  886,  889,  890,  891,  892,  893,
      894,  895,  896,  897,  887,  898,  899,  900,  883,  884,
      901,  902,  885,  903,  888,  904,  905,  906,  907,  908,
      909,  910,  911,  912,  889,  890,  891,  892,  893,  894,

      895,  896,  897,  887,  898,  899,  900,  913,  916,  901,
      902,  917,  903,  888,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  914,  918,  915,  919,  920,  921,  923,
      930,  931,  922, 1643, 1643, 1643,  913,  916, 1643, 1643,
      917,  924,  924,  924,  924,  606,  606,  606,  606, 1643,
     1643, 1643,  914,  918,  915,  919,  920,  921,  923,  930,
      931,  922,  925,  925,  925,  925,  608,  608,  608,  608,
      926,  932,  926,  933,  927,  927,  927,  927,  291,  609,
      292,  928,  928,  928,  928,  929,  929,  929,  929,  612,
      612,  612,  612,  934,  294,  935,  937,  938,  939,  940,

      932,  941,  933,  942,  943,  944,  945,  946,  609,  947,
      936,  948,  949,  950,  951,  952,  953,  954,  955,  956,
      957,  958,  934,  294,  935,  937,  938,  939,  940,  959,
      941,  960,  942,  943,  944,  945,  946,  961,  947,  936,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  962,  965,  966,  967,  968,  969,  970,  959,  971,
      960,  963,  972,  973,  974,  975,  961,  976,  977,  978,
      979,  964,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  965,  966,  967,  968,  969,  970,  989,  971,  992,
      963,  972,  973,  974,  975,  993,  976,  977,  978,  979,

      964,  980,  981,  982,  983,  984,  985,  986,  987,  988,
      990,  994,  991,  995,  996,  997,  989,  999,  992,  998,
     1000, 1000, 1000, 1000,  993,  691,  691,  691,  691, 1643,
     1643, 1008,  692,  692,  692,  692, 1643, 1643, 1643,  990,
      994,  991,  995,  996,  997,  693,  999, 1001,  998, 1001,
     1643, 1002, 1002, 1002, 1002, 1003, 1003, 1003, 1003,  362,
     1008,  363, 1004, 1004, 1004, 1004, 1005, 1005, 1005, 1005,
      697,  697,  697,  697,  693,  365,  699, 1006, 1006, 1006,
     1006,  699, 1009, 1010, 1011, 1012,  702,  443, 1013,  443,
      698,  698,  698,  698,  443, 1007, 1007, 1007, 1007, 1015,

     1016, 1017, 1018, 1014,  365,  443, 1019, 1643, 1020,  443,
     1021, 1009, 1010, 1011, 1012, 1022, 1023, 1013, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1015, 1016,
     1017, 1018, 1014, 1034, 1035, 1019,  443, 1020, 1036, 1021,
     1037, 1038, 1039, 1043, 1022, 1023, 1044, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1045, 1040, 1046,
     1047, 1048, 1034, 1035, 1049, 1050, 1051, 1036, 1041, 1037,
     1038, 1039, 1043, 1052, 1053, 1044, 1054, 1055, 1042, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1045, 1063, 1046, 1047,
     1048, 1064, 1065, 1049, 1050, 1051, 1066, 1041, 1067, 1068,

     1070, 1069, 1052, 1053, 1071, 1054, 1055, 1042, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1072, 1063, 1073, 1074, 1075,
     1064, 1065, 1077, 1076, 1078, 1066, 1079, 1067, 1068, 1070,
     1069, 1080, 1081, 1071, 1082, 1083, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1072, 1092, 1073, 1074, 1075, 1093,
     1094, 1077, 1076, 1078, 1095, 1079, 1096, 1097, 1098, 1099,
     1080, 1081, 1100, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1101, 1092, 1105, 1106, 1107, 1093, 1094,
     1108, 1103, 1109, 1095, 1110, 1096, 1097, 1098, 1099, 1111,
     1112, 1100, 1104, 1113, 1114, 1115, 1116, 1117, 1118, 1119,

     1120, 1121, 1101, 1122, 1105, 1106, 1107, 1123, 1124, 1108,
     1103, 1109, 1125, 1110, 1126, 1127, 1643, 1643, 1111, 1112,
     1643, 1104, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
     1121, 1643, 1122, 1128, 1129, 1130, 1123, 1124, 1131, 1132,
     1133, 1125, 1134, 1126, 1127,  851,  851,  851,  851,  851,
      851,  851,  851,  853,  853,  853,  853,  853,  853,  853,
      853, 1135, 1128, 1129, 1130, 1136, 1137, 1131, 1132, 1133,
     1138, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1153, 1155, 1156, 1157, 1158,
     1135, 1159, 1160, 1161, 1136, 1137, 1154, 1162, 1163, 1138,

     1164, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1153, 1155, 1156, 1157, 1158, 1165,
     1159, 1160, 1161, 1166, 1167, 1154, 1162, 1163, 1168, 1164,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,  924,
      924,  924,  924, 1178, 1178, 1178, 1178, 1643, 1165, 1643,
     1643, 1643, 1166, 1167, 1643, 1643, 1180, 1168, 1181, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1179,
     1179, 1179,  927,  927,  927,  927,  292,  928,  928,  928,
      928,  929,  929,  929,  929, 1180, 1182, 1181, 1183, 1184,
      294, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,

     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1643, 1207, 1208, 1209, 1210, 1182, 1211, 1183, 1184,  294,
     1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205,
     1207, 1208, 1209, 1210, 1212, 1211, 1213, 1214, 1215, 1216,
     1206, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1000, 1000, 1000, 1000, 1205, 1230,
     1230, 1230, 1230, 1212, 1234, 1213, 1214, 1215, 1216, 1206,
     1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1228, 1229, 1002, 1002, 1002, 1002, 1231, 1231, 1231,

     1231,  362, 1643, 1234, 1004, 1004, 1004, 1004, 1005, 1005,
     1005, 1005, 1233, 1233, 1233, 1233,  699,  365, 1235, 1236,
     1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
      698,  698,  698,  698, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1643,  365, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1261,
     1262, 1263, 1264, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1259, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1260, 1275, 1276, 1261, 1262,
     1263, 1264, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,

     1285, 1286, 1287, 1259, 1265, 1266, 1267, 1268, 1269, 1270,
     1271, 1272, 1273, 1274, 1260, 1275, 1276, 1288, 1289, 1290,
     1291, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1288, 1289, 1290, 1291,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1317, 1318, 1319, 1320, 1306,
     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,

     1331, 1332, 1333, 1334, 1317, 1318, 1319, 1320, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1321,
     1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
     1332, 1333, 1334, 1346, 1347, 1348, 1349, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1350, 1351,
     1179, 1179, 1179, 1179, 1353, 1354, 1355, 1356, 1357, 1358,
     1359, 1360, 1346, 1347, 1348, 1349, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1350, 1351, 1372,
     1373, 1374, 1375, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1376, 1377, 1378, 1379, 1361, 1362, 1363, 1364, 1365,

     1366, 1367, 1368, 1369, 1370, 1371, 1380, 1381, 1372, 1373,
     1374, 1375, 1382, 1383, 1384, 1385, 1386, 1390, 1391, 1392,
     1376, 1377, 1378, 1379, 1230, 1230, 1230, 1230, 1388, 1388,
     1388, 1388, 1393, 1394, 1395, 1380, 1381, 1389, 1389, 1389,
     1389, 1382, 1383, 1384, 1385, 1386, 1390, 1391, 1392, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1393, 1394, 1395, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1422, 1423, 1424, 1408, 1409, 1410, 1411, 1412, 1413, 1414,

     1415, 1416, 1417, 1418, 1419, 1420, 1421, 1425, 1426, 1427,
     1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1422,
     1423, 1424, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1447, 1448, 1449, 1450, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1451, 1452,
     1453, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1448, 1449, 1450, 1454, 1455, 1456, 1457, 1458,
     1458, 1458, 1458, 1459, 1460, 1461, 1462, 1451, 1452, 1453,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1643, 1454, 1455, 1456, 1457, 1476, 1476,

     1476, 1476, 1459, 1460, 1461, 1462, 1478, 1479, 1480, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1475, 1388, 1388, 1388, 1388, 1477, 1477, 1477, 1477,
     1481, 1482, 1483, 1484, 1485, 1478, 1479, 1480, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1497, 1498,
     1499, 1500, 1501, 1502, 1503, 1504, 1506, 1507, 1508, 1481,
     1482, 1483, 1484, 1485, 1509, 1510, 1511, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1506, 1507, 1508, 1512, 1458,
     1458, 1458, 1458, 1509, 1510, 1511, 1513, 1515, 1516, 1517,

     1518, 1519, 1520, 1521, 1476, 1476, 1476, 1476, 1388, 1388,
     1388, 1388, 1522, 1524, 1525, 1526, 1527, 1512, 1528, 1529,
     1530, 1531, 1533, 1534, 1535, 1513, 1515, 1516, 1517, 1518,
     1519, 1520, 1521, 1536, 1537, 1540, 1541, 1532, 1538, 1542,
     1543, 1522, 1524, 1525, 1526, 1527, 1544, 1528, 1529, 1530,
     1531, 1533, 1534, 1535, 1539, 1545, 1547, 1548, 1549, 1550,
     1551, 1552, 1536, 1537, 1540, 1541, 1532, 1538, 1542, 1543,
     1554, 1546, 1555, 1556, 1557, 1544, 1558, 1553, 1559, 1560,
     1561, 1562, 1563, 1539, 1545, 1547, 1548, 1549, 1550, 1551,
     1552, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1554,

     1546, 1555, 1556, 1557, 1572, 1558, 1553, 1559, 1560, 1561,
     1562, 1563, 1573, 1574, 1575, 1576, 1577, 1579, 1580, 1581,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1583, 1584,
     1585, 1587, 1588, 1572, 1589, 1591, 1592, 1593, 1594, 1595,
     1596, 1573, 1574, 1575, 1576, 1577, 1579, 1580, 1581, 1597,
     1598, 1599, 1600, 1601, 1602, 1603, 1604, 1583, 1584, 1585,
     1587, 1588, 1605, 1589, 1591, 1592, 1593, 1594, 1595, 1596,
     1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1614, 1615, 1616, 1617,
     1618, 1605, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1606,

     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1626, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1614, 1615, 1616, 1617, 1618,
     1634, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1626, 1627, 1628, 1629,
     1630, 1631, 1632, 1633, 1643, 1643, 1643, 1643, 1643, 1634,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1635, 1636, 1637,
     1638, 1639, 1640, 1641, 1642,  223, 1643,  223,  223,  288,
     1643,  288, 1643,  288,  295,  295,  295,  295,  295,  295,
      366, 1643,  366,  366,  366,  366,  366,  366,  366,  368,
     1643, 1643,  368,  368,  368, 1643,  368,  368,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  701,  701,  701,
      701,  701,  701,  701,  701,  701, 1232, 1643, 1232, 1232,
     1232, 1232, 1232, 1232, 1232,   13, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643
    } ;

static const flex_int16_t yy_chk[3810] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1650,    7,    7,    7,    7,    7,    8, 1574,    8,    8,
        8,    8,    8,    9, 1570,    9,    9,    9,    9,    9,
       10, 1566,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1562,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1481,   28,   27,   29,   28,
      115, 1462,   28,   40,  107, 1444,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,   38,   36,   34,
       30,   31,   36,   30,   31,   30,   37,   31,   36, 1427,
       31,   38, 1040,   30,   37,  119,  119,   38,   34,   31,
      962,  886,   30,   34,   30,  812,   38,   36,   34,   30,
       31,   36,   30,   31,   30,   37,   31,   36,   41,   31,
       38,   39,   41,   37,   42,   44,   38,   44,   41,   39,
       44,   43,   43,   39,   42,   45,   39,   46,   46,   42,
       42,   43,   50,   50,   50,   50,  144,   41,  144,  443,

       39,   41,  146,   42,   44,   59,   44,   41,   39,   44,
       43,   43,   39,   42,   45,   39,   46,   46,   42,   42,
       43,   51,   51,   51,   51,   51,   52,   52,   52,   52,
       52,   53,   55,   53,   59,   51,  142,   60,   53,   54,
       52,   53,   62,   54,   68,   73,   55,   54,   65,   55,
       54,   56,   55,   54,   51,   56,   65,  109,   87,   56,
       53,   55,   53,   54,   51,   56,   60,   53,   54,   52,
       53,   62,   54,   68,   73,   55,   54,   65,   55,   54,
       56,   55,   54,   51,   56,   65,   57,   87,   56,   58,
       47,   61,   54,   88,   56,   57,   61,   57,   17,   66,

       58,   61,   57,   58,   64,   57,   58,   57,   64,   58,
       13,   74,   74,   66,   64,   57,    0,   69,   58,   66,
       61,   69,   88,    0,   57,   61,   57,   69,   66,   58,
       61,   57,   58,   64,   57,   58,   57,   64,   58,   67,
       74,   74,   66,   64,   90,   70,   69,   67,   66,   93,
       69,   67,   71,   71,   67,   70,   69,   93,   96,  101,
       70,   70,   71,  126,   72,  127,   72,    0,   67,   72,
      117,  117,  117,   90,   70,  129,   67,  369,   93,  369,
       67,   71,   71,   67,   70,  134,   93,   96,  101,   70,
       70,   71,  126,   72,  127,   72,  102,  102,   72,   79,

       79,   79,   79,   80,  129,   80,   80,   80,   80,   80,
      139,   81,   79,   81,  134,    0,   83,   89,   81,   80,
       82,   81,   89,  153,   82,  102,  102,   89,   82,    0,
       83,   82,    0,   83,   82, 1178,   83, 1178,    0,  139,
       81,   79,   81,    0,   82,   83,   89,   81,   80,   82,
       81,   89,  153,   82,  140,  140,   89,   82,   85,   83,
       82,   94,   83,   82,   84,   83,   92,   85,   84,   85,
       92,   86,   84,   82,   85,   94,   92,   85,   84,   85,
      155,   94,   86,  140,  140,   86,  156,   85,   86,    0,
       94,   86, 1231,   84, 1231,   92,   85,   84,   85,   92,

       86,   84,    0,   85,   94,   92,   85,   84,   85,  155,
       94,   86,   97,   95,   86,  156,   97,   86,  154,   98,
       86,   95,   97,   99,   99,   95,  128,  157,   95,   98,
      158,  128,  159,   99,   98,   98,  128,  160,  100,  154,
      100,   97,   95,  100,    0,   97,    0,  154,   98,  161,
       95,   97,   99,   99,   95,  128,  157,   95,   98,  158,
      128,  159,   99,   98,   98,  128,  160,  100,  154,  100,
        0,    0,  100,  103,  103,  103,  103,  104,  161,  104,
      104,  104,  104,  104,    0,    0,  103,  105,  105,  105,
      105,    0,  120,  104,  120,  131,  121,  122,  163,  120,

      121,  165,  120,  131,  121,  123,  166,  121,  164,  123,
      121,  122,    0,  123,  122,  103,  164,  122,  167,  123,
      121,  120,  104,  120,  131,  121,  122,  163,  120,  121,
      165,  120,  131,  121,  123,  166,  121,  164,  123,  121,
      122,  124,  123,  122,  125,  164,  122,  167,  123,  121,
      124,  132,  124,    0,  169,  125,  170,  124,  125,  130,
      124,  125,  124,  130,  125,  132,    0,  137,  137,  130,
      124,  132,  135,  125,    0,  171,  135,  137,    0,  124,
      132,  124,  135,  169,  125,  170,  124,  125,  130,  124,
      125,  124,  130,  125,  132,  133,  137,  137,  130,  136,

      132,  135,  172,  133,  171,  135,  137,  133,  173,  136,
      133,  135,  174,  168,  136,  136,  138,  175,  138,  168,
      177,  138,  178,  176,  133,  179,  168,  180,  136,  176,
      181,  172,  133,  182,  183,  184,  133,  173,  136,  133,
      187,  174,  168,  136,  136,  138,  175,  138,  168,  177,
      138,  178,  176,  188,  179,  168,  180,  190,  176,  181,
      185,  192,  182,  183,  184,  185,  185,  191,  189,  187,
      189,  191,  193,  195,  193,  194,  196,  197,  198,  199,
      200,  201,  188,  201,  202,  203,  190,  205,  206,  185,
      192,  207,  194,  208,  185,  185,  191,  189,  209,  189,

      191,  193,  195,  193,  194,  196,  197,  198,  199,  200,
      201,  204,  201,  202,  203,  210,  205,  206,  212,  204,
      207,  194,  208,  211,  213,  211,  214,  209,  215,  216,
      224,  226,  214,  218,  218,  218,  218,    0,    0,    0,
      204,    0,    0,    0,  210,  227,  218,  212,  204,    0,
      228,    0,  211,  213,  211,  214,    0,  215,  216,  224,
      226,  214,  229,  219,  219,  219,  219,  220,  220,  220,
      220,  220,  225,  230,  227,  218,  219,  231,  221,  228,
      221,  220,  221,  221,  221,  221,  232,  234,  235,  236,
      237,  229,  238,  225,  239,  240,  235,  241,  242,  243,

      239,  225,  230,  244,  245,  219,  231,  239,  246,  248,
      220,  249,  250,  251,  247,  232,  234,  235,  236,  237,
      247,  238,  225,  239,  240,  235,  241,  242,  243,  239,
      252,  253,  244,  245,  254,  255,  239,  246,  248,  256,
      249,  250,  251,  247,  256,  256,  258,  259,  260,  247,
      260,  261,  262,  263,  265,  264,  262,  264,  266,  252,
      253,  267,  268,  254,  255,  269,  270,  271,  256,  273,
      272,  265,  272,  256,  256,  258,  259,  260,  274,  260,
      261,  262,  263,  265,  264,  262,  264,  266,  276,  275,
      267,  268,  277,  278,  269,  270,  271,  275,  273,  272,

      265,  272,  279,  280,  281,  283,  282,  274,  282,  284,
      285,  286,  287,  296,  298,  297,  285,  276,  275,    0,
        0,  277,  278,  290,    0,  290,  275,  290,  290,  290,
      290,  279,  280,  281,  283,  282,  297,  282,  284,  285,
      286,  287,  296,  298,  297,  285,  289,  289,  289,  289,
      291,  291,  291,  291,  292,  292,  292,  292,  293,  289,
      293,  293,  293,  293,  293,  297,  294,  292,  294,  299,
      294,  294,  294,  294,  293,  300,  301,  302,  303,  304,
      306,  307,  308,  309,  310,  312,  311,  313,  289,  307,
      314,  315,  311,  316,  317,  318,  292,  320,  299,  311,

      321,  322,    0,  293,  300,  301,  302,  303,  304,  306,
      307,  308,  309,  310,  312,  311,  313,  323,  307,  314,
      315,  311,  316,  317,  318,  319,  320,  324,  311,  321,
      322,  319,  325,  326,  327,  328,  330,  331,  333,  334,
      328,  328,  332,  334,  332,  335,  323,  336,  338,  336,
      339,  340,  341,  342,  319,  343,  324,  344,  337,  344,
      319,  325,  326,  327,  328,  330,  331,  333,  334,  328,
      328,  332,  334,  332,  335,  337,  336,  338,  336,  339,
      340,  341,  342,  345,  343,  346,  344,  337,  344,  347,
      348,  349,  350,  351,  352,  353,  354,  347,  354,  355,

      356,  357,  358,  359,  337,  378,  380,  357,  363,  363,
      363,  363,  345,  381,  346,  382,    0,    0,  347,  348,
      349,  350,  351,  352,  353,  354,  347,  354,  355,  356,
      357,  358,  359,  383,  378,  380,  357,  360,  360,  360,
      360,  361,  381,  361,  382,  361,  361,  361,  361,  384,
      360,  362,  362,  362,  362,  364,    0,  364,  364,  364,
      364,  364,  383,  365,  362,  365,  367,  365,  365,  365,
      365,  364,  366,  366,  366,  366,  379,  385,  384,  360,
      367,  367,  367,  367,  371,  371,  386,  371,  388,  390,
      389,  391,  371,  362,  392,  393,  394,  379,  389,  395,

      364,  393,  396,  371,  397,  379,  385,  371,  393,  398,
      399,  400,  402,  403,  404,  386,  401,  388,  390,  389,
      391,  405,  401,  392,  393,  394,  379,  389,  395,  406,
      393,  396,  407,  397,  371,  408,  409,  393,  398,  399,
      400,  402,  403,  404,  412,  401,  413,  410,  415,  417,
      405,  401,  410,  410,  414,  416,  414,  419,  406,  416,
      418,  407,  418,  420,  408,  409,  421,  422,  423,  424,
      425,    0,  427,  412,  419,  413,  410,  415,  417,  428,
      430,  410,  410,  414,  416,  414,  419,  431,  416,  418,
      432,  418,  420,  433,  434,  421,  422,  423,  424,  425,

      426,  427,  426,  419,  429,  435,  437,  438,  428,  430,
      440,  436,  429,  436,  439,  441,  431,  450,  451,  432,
      439,  452,  433,  434,  453,  454,  456,  457,  458,  426,
      455,  426,  459,  429,  435,  437,  438,  460,  461,  440,
      436,  429,  436,  439,  441,  455,  450,  451,  462,  439,
      452,  463,  464,  453,  454,  456,  457,  458,  465,  455,
      466,  459,  467,  469,  470,  471,  460,  461,  472,  473,
      474,  475,  476,  477,  455,  478,  479,  462,  481,  482,
      463,  464,  484,  485,  486,  487,  483,  465,  488,  466,
      489,  467,  469,  470,  471,  492,  483,  472,  473,  474,

      475,  476,  477,  493,  478,  479,  483,  481,  482,  494,
      496,  484,  485,  486,  487,  497,  498,  488,  499,  489,
      500,  501,  502,  503,  492,  483,  504,  505,  506,  508,
      509,  511,  493,  512,  513,  483,  515,  516,  494,  496,
      514,  517,  514,  518,  497,  498,  519,  499,  521,  500,
      501,  502,  503,    0,    0,  504,  505,  506,  508,  509,
      511,  533,  512,  513,  520,  515,  516,    0,  520,  514,
      517,  514,  518,    0,  522,  519,  522,  521,  522,  522,
      522,  522,  523,  523,  523,  523,  525,  525,  525,  525,
      533,  534,  535,  520,  524,  523,  524,  520,  524,  524,

      524,  524,  526,  526,  526,  526,  536,  537,  538,  539,
      540,  541,  542,  543,  544,  545,  546,  547,  548,  549,
      534,  535,  550,  538,  523,  552,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  562,
      564,  550,  538,  565,  552,  553,  554,  555,  556,  557,
      558,  559,  560,  561,  566,  567,  568,  569,  570,  571,
      572,  575,  576,  577,  566,  579,  580,  581,  562,  564,
      582,  583,  565,  584,  566,  585,  586,  587,  588,  589,
      591,  592,  594,  595,  567,  568,  569,  570,  571,  572,

      575,  576,  577,  566,  579,  580,  581,  596,  598,  582,
      583,  599,  584,  566,  585,  586,  587,  588,  589,  591,
      592,  594,  595,  597,  600,  597,  601,  602,  603,  604,
      618,  619,  603,    0,    0,    0,  596,  598,    0,    0,
      599,  605,  605,  605,  605,  606,  606,  606,  606,    0,
        0,    0,  597,  600,  597,  601,  602,  603,  604,  618,
      619,  603,  607,  607,  607,  607,  608,  608,  608,  608,
      609,  620,  609,  621,  609,  609,  609,  609,  610,  608,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  612,
      612,  612,  612,  622,  610,  623,  624,  625,  626,  627,

      620,  628,  621,  629,  630,  631,  632,  633,  608,  634,
      623,  635,  637,  638,  639,  640,  641,  642,  643,  644,
      645,  646,  622,  610,  623,  624,  625,  626,  627,  647,
      628,  649,  629,  630,  631,  632,  633,  650,  634,  623,
      635,  637,  638,  639,  640,  641,  642,  643,  644,  645,
      646,  651,  652,  653,  654,  655,  656,  657,  647,  660,
      649,  651,  661,  662,  664,  665,  650,  666,  667,  668,
      669,  651,  670,  671,  672,  673,  674,  676,  677,  679,
      680,  652,  653,  654,  655,  656,  657,  681,  660,  683,
      651,  661,  662,  664,  665,  684,  666,  667,  668,  669,

      651,  670,  671,  672,  673,  674,  676,  677,  679,  680,
      682,  685,  682,  686,  687,  688,  681,  689,  683,  688,
      690,  690,  690,  690,  684,  691,  691,  691,  691,    0,
        0,  708,  692,  692,  692,  692,    0,    0,    0,  682,
      685,  682,  686,  687,  688,  692,  689,  693,  688,  693,
        0,  693,  693,  693,  693,  694,  694,  694,  694,  695,
      708,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      697,  697,  697,  697,  692,  695,  698,  699,  699,  699,
      699,  700,  709,  710,  711,  712,  701,  701,  713,  701,
      698,  698,  698,  698,  701,  700,  700,  700,  700,  714,

      715,  716,  717,  713,  695,  701,  718,    0,  719,  701,
      720,  709,  710,  711,  712,  721,  722,  713,  723,  724,
      725,  727,  728,  729,  730,  731,  732,  733,  714,  715,
      716,  717,  713,  734,  735,  718,  701,  719,  736,  720,
      737,  739,  740,  742,  721,  722,  743,  723,  724,  725,
      727,  728,  729,  730,  731,  732,  733,  744,  741,  745,
      746,  747,  734,  735,  750,  751,  752,  736,  741,  737,
      739,  740,  742,  754,  755,  743,  756,  757,  741,  758,
      759,  760,  761,  762,  763,  764,  744,  766,  745,  746,
      747,  767,  769,  750,  751,  752,  770,  741,  771,  772,

      773,  772,  754,  755,  774,  756,  757,  741,  758,  759,
      760,  761,  762,  763,  764,  775,  766,  776,  777,  778,
      767,  769,  779,  778,  780,  770,  781,  771,  772,  773,
      772,  782,  784,  774,  787,  788,  789,  790,  792,  793,
      795,  796,  797,  799,  775,  800,  776,  777,  778,  801,
      802,  779,  778,  780,  803,  781,  804,  805,  808,  809,
      782,  784,  810,  787,  788,  789,  790,  792,  793,  795,
      796,  797,  799,  811,  800,  818,  820,  821,  801,  802,
      822,  813,  823,  803,  825,  804,  805,  808,  809,  827,
      828,  810,  813,  829,  831,  832,  833,  834,  836,  838,

      840,  841,  811,  842,  818,  820,  821,  843,  844,  822,
      813,  823,  845,  825,  846,  848,    0,    0,  827,  828,
        0,  813,  829,  831,  832,  833,  834,  836,  838,  840,
      841,    0,  842,  854,  855,  856,  843,  844,  858,  861,
      862,  845,  863,  846,  848,  850,  850,  850,  850,  851,
      851,  851,  851,  852,  852,  852,  852,  853,  853,  853,
      853,  864,  854,  855,  856,  866,  867,  858,  861,  862,
      869,  863,  870,  871,  873,  874,  875,  876,  877,  878,
      879,  882,  883,  884,  885,  887,  892,  894,  895,  896,
      864,  897,  899,  901,  866,  867,  887,  902,  903,  869,

      905,  870,  871,  873,  874,  875,  876,  877,  878,  879,
      882,  883,  884,  885,  887,  892,  894,  895,  896,  906,
      897,  899,  901,  907,  908,  887,  902,  903,  910,  905,
      912,  914,  915,  916,  917,  918,  919,  920,  922,  924,
      924,  924,  924,  925,  925,  925,  925,    0,  906,    0,
        0,    0,  907,  908,    0,    0,  930,  910,  931,  912,
      914,  915,  916,  917,  918,  919,  920,  922,  926,  926,
      926,  926,  927,  927,  927,  927,  928,  928,  928,  928,
      928,  929,  929,  929,  929,  930,  932,  931,  934,  937,
      928,  938,  939,  940,  942,  943,  945,  946,  947,  949,

      950,  951,  952,  953,  954,  955,  958,  959,  960,  961,
        0,  968,  970,  971,  972,  932,  973,  934,  937,  928,
      938,  939,  940,  942,  943,  945,  946,  947,  949,  950,
      951,  952,  953,  954,  955,  958,  959,  960,  961,  963,
      968,  970,  971,  972,  975,  973,  977,  978,  979,  981,
      963,  982,  983,  984,  986,  988,  990,  991,  992,  993,
      994,  995,  996,  998, 1000, 1000, 1000, 1000,  963, 1001,
     1001, 1001, 1001,  975, 1008,  977,  978,  979,  981,  963,
      982,  983,  984,  986,  988,  990,  991,  992,  993,  994,
      995,  996,  998, 1002, 1002, 1002, 1002, 1003, 1003, 1003,

     1003, 1004,    0, 1008, 1004, 1004, 1004, 1004, 1005, 1005,
     1005, 1005, 1006, 1006, 1006, 1006, 1007, 1004, 1009, 1010,
     1012, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025,
     1007, 1007, 1007, 1007, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1036, 1037, 1038, 1039,    0, 1004, 1009, 1010, 1012,
     1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1046,
     1048, 1049, 1050, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1036, 1037, 1038, 1039, 1041, 1051, 1053, 1055, 1056, 1057,
     1059, 1060, 1061, 1062, 1064, 1041, 1066, 1068, 1046, 1048,
     1049, 1050, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078,

     1079, 1080, 1081, 1041, 1051, 1053, 1055, 1056, 1057, 1059,
     1060, 1061, 1062, 1064, 1041, 1066, 1068, 1082, 1085, 1086,
     1087, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079,
     1080, 1081, 1088, 1089, 1090, 1091, 1093, 1094, 1097, 1099,
     1101, 1103, 1104, 1107, 1108, 1109, 1082, 1085, 1086, 1087,
     1110, 1113, 1114, 1116, 1117, 1118, 1119, 1121, 1122, 1123,
     1125, 1088, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1101,
     1103, 1104, 1107, 1108, 1109, 1126, 1128, 1129, 1130, 1110,
     1113, 1114, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1125,
     1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143,

     1144, 1147, 1149, 1151, 1126, 1128, 1129, 1130, 1153, 1154,
     1157, 1158, 1159, 1160, 1163, 1164, 1166, 1167, 1168, 1131,
     1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144,
     1147, 1149, 1151, 1169, 1171, 1172, 1173, 1153, 1154, 1157,
     1158, 1159, 1160, 1163, 1164, 1166, 1167, 1168, 1175, 1176,
     1179, 1179, 1179, 1179, 1180, 1181, 1182, 1183, 1184, 1187,
     1188, 1189, 1169, 1171, 1172, 1173, 1190, 1191, 1192, 1193,
     1195, 1196, 1199, 1201, 1203, 1205, 1206, 1175, 1176, 1209,
     1210, 1211, 1212, 1180, 1181, 1182, 1183, 1184, 1187, 1188,
     1189, 1215, 1216, 1218, 1219, 1190, 1191, 1192, 1193, 1195,

     1196, 1199, 1201, 1203, 1205, 1206, 1220, 1221, 1209, 1210,
     1211, 1212, 1223, 1224, 1225, 1227, 1228, 1234, 1235, 1236,
     1215, 1216, 1218, 1219, 1230, 1230, 1230, 1230, 1232, 1232,
     1232, 1232, 1237, 1238, 1241, 1220, 1221, 1233, 1233, 1233,
     1233, 1223, 1224, 1225, 1227, 1228, 1234, 1235, 1236, 1242,
     1243, 1244, 1245, 1246, 1247, 1249, 1250, 1253, 1255, 1257,
     1259, 1237, 1238, 1241, 1260, 1263, 1264, 1265, 1266, 1269,
     1270, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1242, 1243,
     1244, 1245, 1246, 1247, 1249, 1250, 1253, 1255, 1257, 1259,
     1281, 1282, 1284, 1260, 1263, 1264, 1265, 1266, 1269, 1270,

     1272, 1273, 1274, 1275, 1277, 1278, 1279, 1285, 1287, 1289,
     1290, 1292, 1294, 1298, 1301, 1302, 1303, 1304, 1308, 1281,
     1282, 1284, 1309, 1312, 1314, 1317, 1318, 1319, 1321, 1323,
     1324, 1326, 1328, 1332, 1335, 1336, 1285, 1287, 1289, 1290,
     1292, 1294, 1298, 1301, 1302, 1303, 1304, 1308, 1337, 1338,
     1342, 1309, 1312, 1314, 1317, 1318, 1319, 1321, 1323, 1324,
     1326, 1328, 1332, 1335, 1336, 1343, 1346, 1348, 1351, 1352,
     1352, 1352, 1352, 1353, 1354, 1356, 1358, 1337, 1338, 1342,
     1359, 1361, 1363, 1367, 1370, 1371, 1372, 1373, 1377, 1378,
     1381, 1383, 1386,    0, 1343, 1346, 1348, 1351, 1387, 1387,

     1387, 1387, 1353, 1354, 1356, 1358, 1390, 1391, 1393, 1359,
     1361, 1363, 1367, 1370, 1371, 1372, 1373, 1377, 1378, 1381,
     1383, 1386, 1388, 1388, 1388, 1388, 1389, 1389, 1389, 1389,
     1395, 1396, 1398, 1400, 1404, 1390, 1391, 1393, 1407, 1408,
     1409, 1410, 1414, 1415, 1418, 1420, 1423, 1424, 1429, 1430,
     1433, 1435, 1436, 1437, 1438, 1441, 1446, 1447, 1450, 1395,
     1396, 1398, 1400, 1404, 1452, 1453, 1454, 1407, 1408, 1409,
     1410, 1414, 1415, 1418, 1420, 1423, 1424, 1429, 1430, 1433,
     1435, 1436, 1437, 1438, 1441, 1446, 1447, 1450, 1455, 1458,
     1458, 1458, 1458, 1452, 1453, 1454, 1459, 1464, 1465, 1468,

     1470, 1471, 1472, 1473, 1476, 1476, 1476, 1476, 1477, 1477,
     1477, 1477, 1478, 1483, 1484, 1487, 1489, 1455, 1490, 1491,
     1492, 1496, 1498, 1499, 1500, 1459, 1464, 1465, 1468, 1470,
     1471, 1472, 1473, 1501, 1503, 1507, 1508, 1496, 1505, 1509,
     1510, 1478, 1483, 1484, 1487, 1489, 1512, 1490, 1491, 1492,
     1496, 1498, 1499, 1500, 1505, 1514, 1516, 1517, 1518, 1519,
     1521, 1523, 1501, 1503, 1507, 1508, 1496, 1505, 1509, 1510,
     1525, 1514, 1526, 1527, 1528, 1512, 1530, 1523, 1531, 1532,
     1533, 1535, 1538, 1505, 1514, 1516, 1517, 1518, 1519, 1521,
     1523, 1539, 1540, 1542, 1545, 1546, 1547, 1549, 1552, 1525,

     1514, 1526, 1527, 1528, 1553, 1530, 1523, 1531, 1532, 1533,
     1535, 1538, 1554, 1556, 1559, 1560, 1561, 1563, 1564, 1565,
     1539, 1540, 1542, 1545, 1546, 1547, 1549, 1552, 1567, 1568,
     1569, 1571, 1572, 1553, 1573, 1575, 1576, 1577, 1578, 1579,
     1580, 1554, 1556, 1559, 1560, 1561, 1563, 1564, 1565, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1567, 1568, 1569,
     1571, 1572, 1589, 1573, 1575, 1576, 1577, 1578, 1579, 1580,
     1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1606, 1607, 1608, 1609,
     1610, 1589, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1590,

     1592, 1594, 1596, 1598, 1600, 1602, 1604, 1618, 1619, 1620,
     1621, 1622, 1623, 1624, 1625, 1606, 1607, 1608, 1609, 1610,
     1626, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1627, 1628,
     1629, 1630, 1631, 1633, 1635, 1637, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1625,    0,    0,    0,    0,    0, 1626,
        0,    0,    0,    0,    0,    0,    0, 1627, 1628, 1629,
     1630, 1631, 1633, 1635, 1637, 1644,    0, 1644, 1644, 1645,
        0, 1645,    0, 1645, 1646, 1646, 1646, 1646, 1646, 1646,
     1647,    0, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1648,
        0,    0, 1648, 1648, 1648,    0, 1648, 1648, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1652,    0, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1644 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1643 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NAVIGATION_VALUE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 115:
case 116:
case 117:
case 118:
case 119:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 124:
case 125:
case 126:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 127:
case 128:
case 129:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 130:
case 131:
case 132:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 133:
case 134:
case 135:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 148:
YY_RULE_SETUP
{}
	YY_BREAK
case 149:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 150:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1644 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1644 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1643);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

