#line 2 "ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2136] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  182,  180,  178,  177,  180,  126,  141,  138,
      169,  141,  127,  129,  128,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  137,  136,  167,  141,
      143,  143,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  170,  168,  171,  141,  141,  151,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  141,  151,  180,  176,  176,  176,  176,  174,
      126,  141,  138,  141,  141,  141,  127,  129,  128,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      175,  137,  136,  178,  133,    0,  135,  139,  130,  132,
      131,  140,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   62,    0,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,   82,

        0,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  134,  145,  146,
      143,    0,    0,  142,  142,  142,    4,  142,  142,  142,
      142,  142,  142,   12,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   55,   62,  142,
      142,  142,  142,  142,  142,  142,  142,   75,  142,  142,
      142,   82,  142,   84,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  166,
      156,  166,  166,  166,  151,  166,  150,  150,  150,    4,
      150,  150,  150,  150,  150,  150,   12,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
       55,   62,  150,  150,  150,  150,  150,  150,  150,  150,
       75,  150,  150,  150,   82,  150,   84,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  162,  166,  166,  166,  151,  166,    0,  172,

      176,  176,  133,  176,  135,  139,  130,  132,  131,  140,
      176,  176,    4,  176,  176,  176,  176,  176,  176,   12,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,   55,   62,  176,  176,  176,  176,  176,
      176,  176,  176,   75,  176,  176,  176,   82,  176,   84,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  134,    0,  179,    1,    2,
        3,    5,    6,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,   54,    0,    0,
       58,    0,   64,    0,    0,    0,    0,    0,    0,    0,
       72,   73,    0,    0,   77,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,  103,    0,    0,  106,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  146,    0,    0,  147,
      144,    1,    2,    3,    5,    6,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   32,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   46,  142,  142,  142,  142,
       54,  142,  142,   58,  142,   64,  142,  142,  142,  142,
      142,  142,  142,   72,   73,  142,  142,   77,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,   98,  142,  142,  103,
      142,  142,  106,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,    0,  159,
      166,  154,  166,  151,    0,  157,    1,    2,    3,    5,

        6,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
       32,  150,  150,  150,  150,  150,  150,  150,  150,  150,
       46,  150,  150,  150,  150,   54,  150,  150,   58,  150,
       64,  150,  150,  150,  150,  150,  150,  150,   72,   73,
      150,  150,   77,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   98,  150,  150,  103,  150,  150,  106,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,    0,  165,  160,  166,  166,  151,    0,

      163,  172,    0,  172,  176,  176,    1,    2,    3,    5,
        6,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
       32,  176,  176,  176,  176,  176,  176,  176,  176,  176,
       46,  176,  176,  176,  176,   54,  176,  176,   58,  176,
       64,  176,  176,  176,  176,  176,  176,  176,   72,   73,
      176,  176,   77,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   98,  176,  176,  103,  176,  176,  106,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,    0,    0,    0,   10,    0,   13,   14,
        0,    0,    0,    0,    0,   23,    0,    0,   26,    0,
        0,    0,   31,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   48,   49,    0,    0,    0,    0,
        0,    0,   61,   63,   41,   66,   67,   68,    0,   70,
        0,    0,    0,    0,    0,   80,    0,   83,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,   94,   95,
        0,    0,   99,    0,    0,    0,  104,    0,  107,  108,
      109,    0,  112,    0,    0,    0,    0,    0,    0,    0,
        0,  122,    0,    0,  124,    0,  149,    0,  148,  142,

      142,  142,   10,  142,   13,   14,  142,  142,  142,  142,
      142,   23,  142,  142,   26,  142,  142,  142,   31,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       48,   49,  142,  142,  142,  142,  142,  142,   61,   63,
       41,   66,   67,   68,  142,   70,  142,  142,  142,  142,
      142,   80,  142,   83,  142,  142,  142,  142,   88,  142,
      142,  142,  142,  142,   94,   95,  142,  142,   99,  142,
      142,  142,  104,  142,  107,  108,  109,  142,  112,  142,
      142,  142,  142,  142,  142,  142,  142,  122,  142,  142,
      124,  159,  166,    0,  158,  151,  157,  150,  150,  150,

       10,  150,   13,   14,  150,  150,  150,  150,  150,   23,
      150,  150,   26,  150,  150,  150,   31,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,   48,   49,
      150,  150,  150,  150,  150,  150,   61,   63,   41,   66,
       67,   68,  150,   70,  150,  150,  150,  150,  150,   80,
      150,   83,  150,  150,  150,  150,   88,  150,  150,  150,
      150,  150,   94,   95,  150,  150,   99,  150,  150,  150,
      104,  150,  107,  108,  109,  150,  112,  150,  150,  150,
      150,  150,  150,  150,  150,  122,  150,  150,  124,  165,
        0,  164,  166,  151,  163,    0,  172,  176,  176,  176,

       10,  176,   13,   14,  176,  176,  176,  176,  176,   23,
      176,  176,   26,  176,  176,  176,   31,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,   48,   49,
      176,  176,  176,  176,  176,  176,   61,   63,   41,   66,
       67,   68,  176,   70,  176,  176,  176,  176,  176,   80,
      176,   83,  176,  176,  176,  176,   88,  176,  176,  176,
      176,  176,   94,   95,  176,  176,   99,  176,  176,  176,
      104,  176,  107,  108,  109,  176,  112,  176,  176,  176,
      176,  176,  176,  176,  176,  122,  176,  176,  124,    0,
        0,    0,    0,    0,   16,   17,    0,    0,    0,    0,

        0,    0,    0,    0,   34,    0,    0,    0,   38,    0,
       40,   39,    0,    0,   50,    0,   56,    0,   59,    0,
        0,    0,   69,   71,    0,    0,    0,   79,   42,    0,
        0,   85,    0,   87,    0,    0,    0,    0,   93,    0,
       97,    0,  101,    0,    0,    0,  111,    0,  114,    0,
        0,    0,  118,  119,    0,  123,    0,  142,  142,  142,
      142,  142,   16,   17,  142,  142,  142,  142,  142,  142,
      142,  142,   34,  142,  142,  142,   38,  142,   40,   39,
      142,  142,   50,  142,   56,  142,   59,  142,  142,  142,
       69,   71,  142,  142,  142,   79,   42,  142,  142,   85,

      142,   87,  142,  142,  142,  142,   93,  142,   97,  142,
      101,  142,  142,  142,  111,  142,  114,  142,  142,  142,
      118,  119,  142,  123,  142,  152,  158,  150,  150,  150,
      150,  150,   16,   17,  150,  150,  150,  150,  150,  150,
      150,  150,   34,  150,  150,  150,   38,  150,   40,   39,
      150,  150,   50,  150,   56,  150,   59,  150,  150,  150,
       69,   71,  150,  150,  150,   79,   42,  150,  150,   85,
      150,   87,  150,  150,  150,  150,   93,  150,   97,  150,
      101,  150,  150,  150,  111,  150,  114,  150,  150,  150,
      118,  119,  150,  123,  150,  164,  153,    0,  173,  176,

      176,  176,  176,  176,   16,   17,  176,  176,  176,  176,
      176,  176,  176,  176,   34,  176,  176,  176,   38,  176,
       40,   39,  176,  176,   50,  176,   56,  176,   59,  176,
      176,  176,   69,   71,  176,  176,  176,   79,   42,  176,
      176,   85,  176,   87,  176,  176,  176,  176,   93,  176,
       97,  176,  101,  176,  176,  176,  111,  176,  114,  176,
      176,  176,  118,  119,  176,  123,  176,    0,    0,    9,
        0,    0,    0,    0,   24,    0,    0,   28,    0,   33,
       35,    0,   37,   43,    0,    0,    0,   52,    0,   53,
       57,    0,    0,    0,    0,   76,    0,   81,    0,   86,

        0,    0,   91,    0,    0,    0,  102,  105,    0,    0,
      115,    0,  117,  120,    0,  125,  142,  142,    9,  142,
      142,  142,  142,   24,  142,  142,   28,  142,   33,   35,
      142,   37,   43,  142,  142,  142,   52,  142,   53,   57,
      142,  142,  142,  142,   76,  142,   81,  142,   86,  142,
      142,   91,  142,  142,  142,  102,  105,  142,  142,  115,
      142,  117,  120,  142,  125,  166,  150,  150,    9,  150,
      150,  150,  150,   24,  150,  150,   28,  150,   33,   35,
      150,   37,   43,  150,  150,  150,   52,  150,   53,   57,
      150,  150,  150,  150,   76,  150,   81,  150,   86,  150,

      150,   91,  150,  150,  150,  102,  105,  150,  150,  115,
      150,  117,  120,  150,  125,  166,  173,  173,  176,  176,
        9,  176,  176,  176,  176,   24,  176,  176,   28,  176,
       33,   35,  176,   37,   43,  176,  176,  176,   52,  176,
       53,   57,  176,  176,  176,  176,   76,  176,   81,  176,
       86,  176,  176,   91,  176,  176,  176,  102,  105,  176,
      176,  115,  176,  117,  120,  176,  125,    0,    8,   11,
       15,    0,   19,    0,    0,    0,   36,    0,    0,   47,
        0,   58,    0,    0,   74,    0,   30,    0,    0,    0,
        0,    0,    0,    0,  116,  121,  142,    8,   11,   15,

      142,   19,  142,  142,  142,   36,  142,  142,   47,  142,
       58,  142,  142,   74,  142,   30,  142,  142,  142,  142,
      142,  142,  142,  116,  121,  155,  150,    8,   11,   15,
      150,   19,  150,  150,  150,   36,  150,  150,   47,  150,
       58,  150,  150,   74,  150,   30,  150,  150,  150,  150,
      150,  150,  150,  116,  121,  161,  173,  176,    8,   11,
       15,  176,   19,  176,  176,  176,   36,  176,  176,   47,
      176,   58,  176,  176,   74,  176,   30,  176,  176,  176,
      176,  176,  176,  176,  116,  121,    7,    0,    0,    0,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    7,  142,  142,  142,   27,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,    7,  150,  150,  150,   27,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,    7,  176,  176,  176,   27,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,   18,    0,    0,    0,    0,    0,   45,    0,
       60,    0,   78,   89,    0,   92,   96,    0,  110,  113,
       18,  142,  142,  142,  142,  142,   45,  142,   60,  142,
       78,   89,  142,   92,   96,  142,  110,  113,   18,  150,

      150,  150,  150,  150,   45,  150,   60,  150,   78,   89,
      150,   92,   96,  150,  110,  113,   18,  176,  176,  176,
      176,  176,   45,  176,   60,  176,   78,   89,  176,   92,
       96,  176,  110,  113,    0,    0,   25,    0,    0,    0,
       65,    0,  100,  142,  142,   25,  142,  142,  142,   65,
      142,  100,  150,  150,   25,  150,  150,  150,   65,  150,
      100,  176,  176,   25,  176,  176,  176,   65,  176,  100,
        0,    0,    0,   44,    0,    0,  142,  142,  142,   44,
      142,  142,  150,  150,  150,   44,  150,  150,  176,  176,
      176,   44,  176,  176,   20,   21,   29,   51,   90,   20,

       21,   29,   51,   90,   20,   21,   29,   51,   90,   20,
       21,   29,   51,   90,    0,  142,  150,  176,    0,  142,
      150,  176,    0,  142,  150,  176,    0,  142,  150,  176,
       22,   22,   22,   22,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2145] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  829, 4707,  359, 4707,  802, 4707, 4707, 4707,
     4707,  346,  341, 4707,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  441,  486,  425,
      479,  461,  449,  500,  367,  460,  739, 4707, 4707,  532,
      547,  562,  546,  561,  562,  573,  607,  615,  389,  415,
      599,  405,    0,  662,  521,  631,  701,  639,  667,  693,
      694,  710,  421,  725, 4707, 4707, 4707,    0,  772,  779,
      706,  774,  775,  786,  820,  828,  456,  482,  783,  474,
        0,  850,  560,  861,  906,  780,  899,  881,  898,  944,

      514,  909,  972,  979,  696,    0,  393,    0,  763, 4707,
        0,    0,    0,    0,  375, 4707,  480,    0,  415,  940,
      985,  978,  855, 1018, 1026,  502,  545,  966,  535, 1048,
      563, 1059, 1104,  977, 1097, 1079, 1096, 1142,  584, 1008,
     4707,  705,    0,  487, 4707,  779, 4707, 4707, 4707, 4707,
     4707, 4707,  608,  755,  622,  628,  638,  646,  696,  725,
      763, 4707,  763,  833,  823, 1030,  828, 1138,  831,  871,
      884,  890,  936,  973,  997, 1049, 1021, 1089, 1021, 1126,
     1039, 1056, 1075, 1094, 1131, 1145, 4707, 1133, 1141, 1162,
     1159, 1148, 1154, 1155, 1155, 1180, 1187, 1164, 1174, 1170,

     1164, 1198, 1198, 1188, 1205, 1196, 1197, 1215, 1203, 1218,
     1211, 1199, 1205, 1214, 1214, 1210, 1217, 1227, 1228, 1216,
     1217, 1262, 1236, 1244, 1242, 1253, 1252, 4707, 1283, 1304,
     1313, 1331,    0,    0, 1262, 1287, 1278, 1277, 1282, 1266,
     1297, 1301, 1307,    0, 1308, 1316, 1314, 1317, 1311, 1320,
     1314, 1315, 1323, 1324, 1340, 1343, 1343, 1346, 1338, 1358,
     1337, 1362, 1338, 1342, 1352, 1347, 1379, 1372,    0, 1378,
     1381, 1388, 1382, 1376, 1377, 1388, 1384, 1405, 1398, 1398,
     1405, 1400, 1393, 1423, 1420, 1412, 1429, 1420, 1425, 1443,
     1431, 1446, 1439, 1427, 1433, 1440, 1440, 1437, 1445, 1454,

     1457, 1444, 1444, 1481, 1462, 1459, 1484, 1464, 1486,    0,
     1515, 1523, 1544, 1548, 1563, 1571,    0, 1473, 1497, 1500,
     1497, 1502, 1524, 1531, 1531, 1532,    0, 1529, 1548, 1535,
     1549, 1550, 1566, 1552, 1551, 1562, 1564, 1580, 1583, 1582,
     1585, 1578, 1590, 1577, 1593, 1578, 1583, 1588, 1582, 1600,
     1606,    0, 1609, 1620, 1635, 1617, 1615, 1618, 1629, 1624,
     1642, 1642, 1634, 1642, 1640, 1633, 1656, 1653, 1643, 1659,
     1648, 1651, 1682, 1662, 1683, 1671, 1662, 1670, 1682, 1683,
     1679, 1686, 1695, 1696, 1683, 1683, 1709, 1702, 1699, 1709,
     1705, 1722, 1759, 1767, 1774, 1751, 1781, 1790, 1795, 1803,

        0,  497,    0, 1814,    0,    0,    0,    0,    0,    0,
     1707, 1796, 1731, 1770, 1798, 1782, 1789, 1789, 1790,    0,
     1788, 1797, 1796, 1804, 1793, 1825, 1797, 1798, 1801, 1804,
     1820, 1822, 1821, 1853, 1816, 1846, 1828, 1847, 1845, 1849,
     1848, 1845, 1863, 1856,    0, 1862, 1867, 1876, 1867, 1865,
     1877, 1867, 1863, 1899, 1905, 1883, 1910, 1905, 1898, 1916,
     1913, 1902, 1918, 1907, 1909, 1927, 1915, 1932, 1927, 1913,
     1919, 1947, 1926, 1922, 1928, 1939, 1966, 1933, 1934, 1972,
     1956, 1963, 1968, 1970, 1971,    0,  768, 4707, 4707, 4707,
     4707, 4707, 4707, 1965, 1954, 1977, 1985, 1978, 1993, 1980,

     1979, 1975, 1990, 1979, 1994, 1997, 1992, 2014, 1998, 2023,
     2012, 2025, 4707, 2031, 2015, 2029, 2016, 2017, 2017, 2019,
     2038, 2031, 2021, 2032, 2036, 2028, 2041, 4707, 2046, 2047,
     2080, 2039, 4707, 2035, 2053, 2040, 2064, 2062, 2069, 2080,
     4707, 4707, 2066, 2087, 4707,  707, 2078, 2079, 2073, 2068,
     2085, 2091, 2092, 2094, 2083, 2082, 2100, 2097, 2103, 2100,
     2096, 2088, 2102, 2099, 2104, 2110, 4707, 2124, 2125, 4707,
     2127, 2124, 2140, 2145, 2143, 2134, 2135, 2137, 2152, 2140,
     2134, 2153, 2143, 2155, 2152, 2174, 2199, 2207, 2213, 2217,
        0,    0,    0,    0,    0,    0, 2176, 2173, 2197, 2201,

     2201, 2209, 2203, 2203, 2199, 2214, 2202, 2216, 2217, 2204,
     2221, 2206, 2226, 2213, 2226,    0, 2233, 2217, 2233, 2217,
     2218, 2219, 2221, 2240, 2242, 2233, 2248, 2250, 2250, 2263,
        0, 2268, 2270, 2281, 2263,    0, 2258, 2275, 2260, 2276,
     2273, 2277, 2284,    0,    0, 2267, 2288,    0,  702, 2280,
     2281, 2275, 2270, 2288, 2293, 2294, 2298, 2287, 2292, 2311,
     2312, 2317, 2322, 2318, 2310, 2327, 2317, 2328, 2333,    0,
     2334, 2331,    0, 2328, 2325, 2341, 2346, 2345, 2336, 2337,
     2339, 2354, 2342, 2336, 2358, 2356, 2359, 2364, 2401, 2412,
     2416, 2420, 2428, 2435, 2439, 2443,    0,    0,    0,    0,

        0, 2377, 2396, 2438, 2439, 2430, 2438, 2432, 2431, 2427,
     2442, 2431, 2445, 2446, 2433, 2450, 2435, 2454, 2440, 2454,
        0, 2459, 2443, 2486, 2444, 2445, 2445, 2447, 2466, 2465,
     2460, 2484, 2487, 2479, 2492,    0, 2497, 2498, 2509, 2491,
        0, 2487, 2504, 2489, 2505, 2502, 2506, 2512,    0,    0,
     2495, 2516,    0,  676, 2506, 2507, 2502, 2497, 2514, 2520,
     2528, 2530, 2523, 2529, 2552, 2549, 2554, 2552, 2546, 2539,
     2553, 2546, 2557, 2562,    0, 2563, 2560,    0, 2557, 2553,
     2568, 2574, 2571, 2562, 2564, 2566, 2581, 2569, 2570, 2590,
     2585, 2603, 2605, 2622, 2631, 2645, 2653, 2659, 2666, 2670,

     2674, 2692, 2680, 2698, 2703,    0,    0,    0,    0,    0,
        0, 2616, 2626, 2676, 2680, 2677, 2689, 2683, 2682, 2678,
     2693, 2684, 2699, 2700, 2688, 2705, 2690, 2710, 2696, 2709,
        0, 2714, 2698, 2716, 2698, 2700, 2700, 2703, 2728, 2720,
     2712, 2727, 2735, 2731, 2744,    0, 2749, 2750, 2765, 2742,
        0, 2739, 2758, 2743, 2760, 2757, 2760, 2765,    0,    0,
     2750, 2771,    0,  671, 2761, 2762, 2756, 2752, 2769, 2774,
     2781, 2782, 2771, 2770, 2790, 2791, 2802, 2803, 2799, 2791,
     2805, 2798, 2811, 2816,    0, 2818, 2815,    0, 2811, 2809,
     2824, 2829, 2826, 2817, 2818, 2822, 2836, 2824, 2823, 2842,

     2833, 2844, 2847, 2833, 2858, 2850, 4707, 2864, 4707, 4707,
     2869, 2851, 2853,  666, 2870, 4707, 2858, 2874, 4707, 2872,
     2870, 2871, 4707, 2870, 2862, 2872, 2868, 2870, 2886, 2888,
     2874, 2875, 2881, 2901, 4707, 4707, 2887, 2891, 2888, 2891,
      699, 2919, 4707, 4707,  656, 4707, 4707, 4707, 2893, 4707,
     2906, 2903, 2908, 2906, 2924, 2911, 2928, 4707, 2921, 2921,
     2922, 2923, 4707, 2935, 2940, 2933, 2942, 2943, 4707, 4707,
     2931, 2931, 4707, 2938, 2940, 2951, 4707, 2946, 4707, 4707,
     2942, 2951, 4707, 2943, 2953, 2950, 2957, 2959, 2977, 2980,
     2978, 4707, 2982, 2973, 4707, 3010, 3017, 3026, 3030, 2974,

     2993, 2981,    0, 3001,    0,    0, 3006, 3009, 3011,  651,
     3026,    0, 3012, 3028,    0, 3025, 3025, 3026,    0, 3023,
     3015, 3025, 3021, 3023, 3039, 3040, 3026, 3027, 3033, 3048,
        0,    0, 3034, 3037, 3034, 3035,  684, 3047,    0,    0,
      646,    0,    0,    0, 3035,    0, 3048, 3039, 3045, 3065,
     3083, 3070, 3085,    0, 3076, 3074, 3077, 3078,    0, 3088,
     3093, 3086, 3095, 3096,    0,    0, 3084, 3083,    0, 3090,
     3092, 3103,    0, 3093,    0,    0, 3089, 3097,    0, 3089,
     3097, 3091, 3098, 3094, 3108, 3117, 3115,    0, 3140, 3131,
        0, 3155, 3161, 3165, 3169, 3174, 3178, 3153, 3172, 3160,

        0, 3175,    0,    0, 3180, 3162, 3164,  615, 3179,    0,
     3165, 3181,    0, 3178, 3176, 3177,    0, 3174, 3166, 3176,
     3172, 3174, 3190, 3191, 3177, 3178, 3184, 3199,    0,    0,
     3185, 3188, 3185, 3186,  644, 3227,    0,    0,  606,    0,
        0,    0, 3215,    0, 3228, 3219, 3219, 3217, 3235, 3222,
     3237,    0, 3228, 3226, 3228, 3229,    0, 3239, 3244, 3237,
     3246, 3247,    0,    0, 3235, 3234,    0, 3241, 3243, 3254,
        0, 3244,    0,    0, 3240, 3248,    0, 3240, 3248, 3271,
     3278, 3274, 3288, 3291, 3289,    0, 3293, 3284,    0, 3308,
     3312, 3316, 3320, 3340, 3324, 3344, 3362, 3297, 3325, 3313,

        0, 3336,    0,    0, 3341, 3323, 3325,  600, 3341,    0,
     3327, 3343,    0, 3341, 3339, 3340,    0, 3337, 3333, 3345,
     3341, 3343, 3359, 3360, 3346, 3347, 3353, 3368,    0,    0,
     3362, 3369, 3366, 3367,  629, 3381,    0,    0,  594,    0,
        0,    0, 3366,    0, 3381, 3382, 3382, 3380, 3398, 3385,
     3400,    0, 3391, 3390, 3391, 3392,    0, 3402, 3411, 3406,
     3415, 3416,    0,    0, 3404, 3403,    0, 3410, 3412, 3423,
        0, 3413,    0,    0, 3417, 3429,    0, 3421, 3429, 3423,
     3431, 3427, 3450, 3453, 3451,    0, 3455, 3446,    0, 3461,
     3458, 3439, 3465, 3447, 4707, 4707, 3464, 3455, 3469,  576,

     3463, 3473, 3464, 3475, 4707, 3461, 3478, 3464, 4707, 3466,
      556, 4707, 3462, 3476, 3496, 3492, 4707, 3480, 4707, 3496,
     3483, 3482, 4707, 4707, 3504, 3511, 3516, 4707, 4707, 3498,
     3505, 4707, 3501, 4707, 3501, 3508, 3524, 3522, 4707, 3508,
     4707, 3511, 4707, 3515, 3529, 3517, 4707, 3524, 4707, 3534,
     3517, 3536, 4707, 3523, 3542, 4707, 3529, 3552, 3552, 3533,
     3558, 3540,    0,    0, 3558, 3549, 3568,  519, 3560, 3570,
     3561, 3572,    0, 3558, 3575, 3561,    0, 3565,  473,    0,
     3561, 3567, 3571, 3586,    0, 3574,    0, 3590, 3577, 3575,
        0,    0, 3597, 3595, 3600,    0,    0, 3590, 3597,    0,

     3596,    0, 3596, 3603, 3617, 3616,    0, 3602,    0, 3607,
        0, 3611, 3625, 3613,    0, 3620,    0, 3630, 3613, 3632,
        0, 3619, 3640,    0, 3619,  543, 3659, 3642, 3643, 3630,
     3655, 3638,    0,    0, 3655, 3654, 3664,  442, 3659, 3669,
     3660, 3671,    0, 3658, 3675, 3661,    0, 3663,  425,    0,
     3659, 3665, 3667, 3682,    0, 3670,    0, 3686, 3673, 3671,
        0,    0, 3693, 3691, 3698,    0,    0, 3680, 3687,    0,
     3687,    0, 3693, 3700, 3715, 3713,    0, 3705,    0, 3705,
        0, 3707, 3724, 3712,    0, 3719,    0, 3729, 3713, 3732,
        0, 3719, 3738,    0, 3717, 3755,  694, 3778, 3782, 3750,

     3747, 3729, 3756, 3738,    0,    0, 3755, 3750, 3773,  424,
     3765, 3777, 3769, 3780,    0, 3769, 3786, 3772,    0, 3774,
      419,    0, 3771, 3777, 3777, 3790,    0, 3778,    0, 3794,
     3781, 3779,    0,    0, 3801, 3798, 3803,    0,    0, 3786,
     3795,    0, 3791,    0, 3792, 3801, 3815, 3813,    0, 3803,
        0, 3813,    0, 3816, 3830, 3820,    0, 3828,    0, 3838,
     3824, 3843,    0, 3830, 3849,    0, 3829, 3835, 3840, 4707,
     3841, 3851, 3848, 3838, 4707, 3841, 3857, 4707, 3845, 4707,
     4707, 3857, 4707, 4707, 3842, 3858, 3864, 4707, 3867, 4707,
     4707, 3855, 3869, 3874, 3868, 4707, 3880, 4707, 3875, 4707,

     3886, 3878, 4707, 3891, 3892, 3892, 4707, 4707, 3905, 3903,
     4707, 3894, 4707, 4707, 3892, 4707, 3893, 3898,    0, 3899,
     3909, 3906, 3896,    0, 3899, 3915,    0, 3903,    0,    0,
     3915,    0,    0, 3900, 3916, 3922,    0, 3925,    0,    0,
     3913, 3927, 3932, 3926,    0, 3938,    0, 3933,    0, 3944,
     3936,    0, 3949, 3950, 3950,    0,    0, 3963, 3961,    0,
     3952,    0,    0, 3950,    0, 3977, 3955, 3960,    0, 3961,
     3971, 3968, 3958,    0, 3962, 3980,    0, 3968,    0,    0,
     3981,    0,    0, 3967, 3981, 3987,    0, 3993,    0,    0,
     3980, 3994, 3999, 3989,    0, 3996,    0, 3991,    0, 4002,

     3994,    0, 4007, 4008, 4008,    0,    0, 4021, 4019,    0,
     4010,    0,    0, 4008,    0, 4039, 4064, 4068, 4017, 4022,
        0, 4024, 4036, 4033, 4024,    0, 4029, 4045,    0, 4033,
        0,    0, 4049,    0,    0, 4044, 4059, 4065,    0, 4069,
        0,    0, 4056, 4070, 4078, 4068,    0, 4069,    0, 4063,
        0, 4075, 4065,    0, 4077, 4078, 4075,    0,    0, 4088,
     4086,    0, 4077,    0,    0, 4074,    0, 4089, 4707, 4707,
     4707, 4075,  374, 4095, 4079, 4080, 4707, 4101, 4091, 4707,
     4091, 4707, 4104, 4100, 4707, 4103, 4707, 4111,  342, 4113,
     4108, 4130, 4120, 4132, 4707, 4707, 4134,    0,    0,    0,

     4120,  338, 4139, 4122, 4123,    0, 4143, 4131,    0, 4131,
        0, 4144, 4136,    0, 4128,    0, 4135,  332, 4137, 4130,
     4152, 4144, 4153,    0,    0, 4196, 4159,    0,    0,    0,
     4145,  315, 4164, 4150, 4162,    0, 4183, 4171,    0, 4180,
        0, 4193, 4185,    0, 4177,    0, 4185,  218, 4187, 4180,
     4201, 4191, 4200,    0,    0, 4214, 4223, 4206,    0,    0,
        0, 4193,  211, 4218, 4200, 4201,    0, 4221, 4209,    0,
     4213,    0, 4232, 4224,    0, 4216,    0, 4223,  204, 4226,
     4220, 4241, 4231, 4240,    0,    0, 4707, 4226, 4243, 4239,
     4707, 4245, 4243, 4249, 4244, 4239, 4239, 4256, 4248, 4250,

     4263, 4272, 4273, 4263, 4276,    0, 4261, 4282, 4279,    0,
     4285, 4283, 4289, 4284, 4280, 4280, 4298, 4290, 4287, 4304,
     4307, 4308, 4298, 4312,    0, 4297, 4315, 4304,    0, 4311,
     4309, 4319, 4314, 4316, 4316, 4333, 4325, 4326, 4344, 4347,
     4348, 4338, 4352,    0, 4338, 4355, 4346,    0, 4352, 4350,
     4356, 4355, 4350, 4350, 4367, 4360, 4358, 4370, 4373, 4374,
     4368, 4382, 4707, 4392, 4385, 4384, 4381, 4376, 4707, 4399,
     4707, 4404, 4707, 4707, 4409, 4707, 4707, 4393, 4707, 4707,
        0, 4411, 4405, 4405, 4402, 4397,    0, 4416,    0, 4415,
        0,    0, 4420,    0,    0, 4409,    0,    0,    0, 4427,

     4420, 4419, 4417, 4412,    0, 4431,    0, 4430,    0,    0,
     4435,    0,    0, 4419,    0,    0,    0, 4441, 4435, 4440,
     4437, 4432,    0, 4451,    0, 4450,    0,    0, 4459,    0,
        0, 4449,    0,    0, 4448, 4456, 4707, 4456, 4467, 4473,
     4707, 4461, 4707, 4456, 4464,    0, 4464, 4474, 4484,    0,
     4472,    0, 4467, 4475,    0, 4476, 4486, 4491,    0, 4479,
        0, 4474, 4482,    0, 4486, 4497, 4508,    0, 4496,    0,
     4506, 4507, 4494, 4707, 4498, 4514, 4521, 4522, 4509,    0,
     4510, 4521, 4528, 4529, 4516,    0, 4516, 4526, 4538, 4539,
     4526,    0, 4526, 4537, 4707, 4530, 4707, 4707, 4707,    0,

     4531,    0,    0,    0,    0, 4532,    0,    0,    0,    0,
     4533,    0,    0,    0, 4533, 4538, 4540, 4547, 4567, 4568,
     4569, 4570, 4563, 4570, 4571, 4572, 4570, 4572, 4574, 4575,
     4707,    0,    0,    0, 4707, 4641, 4647, 4652, 4661, 4670,
     4679,  245, 4688, 4697
    } ;

static const flex_int16_t yy_def[2145] =
    {   0,
     2135,    1, 2135,    3, 2135,    5,    5,    5,    5,    5,
     2135,   11, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2135, 2135, 2135, 2137, 2137, 2137,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,

     2138, 2138, 2137, 2137, 2139, 2140, 2140, 2140, 2140, 2135,
     2140, 2140, 2140, 2140, 2140, 2135, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2135, 2140, 2140, 2135, 2135, 2141, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2142, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,

     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2137,
     2137, 2137, 2137, 2137, 2137, 2137, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2137, 2137, 2137, 2137, 2137, 2137, 2139, 2139,

     2140, 2140, 2140, 2143, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2141, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2142, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,

     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2135, 2137,
     2137, 2137, 2137, 2137, 2135, 2137, 2138, 2138, 2138, 2138,

     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2135, 2137, 2137, 2137, 2137, 2137, 2135,

     2137, 2139, 2135, 2139, 2143, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,

     2140, 2140, 2140, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2136,

     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2135, 2137, 2135, 2137, 2137, 2135, 2138, 2138, 2138,

     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2135,
     2135, 2137, 2137, 2137, 2135, 2144, 2139, 2140, 2140, 2140,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,

     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2137, 2135, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2135, 2137, 2144, 2144, 2140,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2137, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,

     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2137, 2144, 2144, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2136, 2136, 2136, 2136,

     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2137, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2137, 2144, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

     2135, 2135, 2135, 2135, 2135, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2138, 2138,

     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2135, 2135, 2135, 2135, 2135, 2135, 2136, 2136, 2136, 2136,
     2136, 2136, 2138, 2138, 2138, 2138, 2138, 2138, 2140, 2140,
     2140, 2140, 2140, 2140, 2135, 2135, 2135, 2135, 2135, 2136,

     2136, 2136, 2136, 2136, 2138, 2138, 2138, 2138, 2138, 2140,
     2140, 2140, 2140, 2140, 2135, 2136, 2138, 2140, 2135, 2136,
     2138, 2140, 2135, 2136, 2138, 2140, 2135, 2136, 2138, 2140,
     2135, 2136, 2138, 2140,    0, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135
    } ;

static const flex_int16_t yy_nxt[4791] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      591,   78,  104,  104,  104,  104,  103, 1957,   78,  104,
      104,  104,  104,   19, 1946,   19,  105,  105,  105,  105,
       19, 1938,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1927,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1919,  164,  161,  170,  165,
      404, 1908,  166,  225,  402, 1900,  144,  162,  153,  405,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  225,  172,  186,  173,  162, 1889,  178,  187,
      174,  179,  265,  175,  180,  176,  193,  181,  409,  410,
      182,  266,  189,  171,  194,  270,  190,  307,  185,  177,
      191,  206,  172,  186,  173,  207,  192,  178,  187,  174,
      179,  265,  175,  180,  176,  193,  181,  195,  208,  182,
      266,  189, 1736,  194,  270,  190,  307, 1727, 1684,  191,
      206,  196,  218,  219,  207,  192,  197,  198,  144,  220,
      144,  214,  221,  226,  227, 1675,  195,  208,  402,  348,

      144,  215,  406,  407,  408,  209,  216,  217,  349,  210,
      196,  218,  219,  211,  353,  197,  198,  199,  220,  212,
      214,  221,  226,  227,  213,  200, 1634,  201,  348,  202,
      215,  203,  204,  205,  209,  216,  217,  349,  210,  222,
      390,  223,  211,  353,  224,  441,  199,  275,  212,  229,
      229,  229,  229,  213,  200,  276,  201,  313,  202, 1666,
      203,  204,  205,  230,  231,  231,  231,  231,  222,  390,
      223,  442, 1625,  224,  441,  446,  275,  232,  230,  231,
      231,  231,  231,  235,  276,  236,  358,  239,  245,  451,
      237,  240,  232,  238,  359,  241,  233,  452,  242,  249,

      442,  243,  246,  250,  446,  247,  232,  251,  248, 1585,
      483,  244,  235,  252,  236,  358,  239,  245,  451,  237,
      240,  232,  238,  359,  241,  233,  452,  242,  249, 1576,
      243,  246,  250,  267,  247,  253,  251,  248,  268,  483,
      244,  259,  252,  269,  254,  489,  255, 1532, 1529,  260,
      492,  256,  261, 1507,  257,  262,  258,  277,  263, 1460,
      493,  264,  267, 1457,  253,  288,  494,  268, 1435,  289,
      259,  278,  269,  254,  489,  255,  279,  280,  260,  492,
      256,  261,  290,  257,  262,  258,  277,  263,  271,  493,
      264,  495,  272,  291,  288,  494,  273,  292,  289, 1390,

      278,  293,  274, 1387, 1365,  279,  280,  294, 1716, 1322,
      396,  290,  295,  400,  400,  400,  400,  271, 1319, 1297,
      495,  272,  291,  296, 1248,  273,  292,  300,  301, 1148,
      293,  274,  281,  297,  302,  496,  294,  303,  298,  299,
      282,  295,  283,  318,  284,  319,  285,  286,  287,  304,
      320,  305,  296,  321,  306, 1050,  300,  301,  308,  309,
      954,  281,  297,  302,  496,  497,  303,  298,  299,  282,
      488,  283,  318,  284,  319,  285,  286,  287,  304,  320,
      305,  488,  321,  306,  490,  486,  403,  308,  309,  311,
      311,  311,  311,  313,  497,  314,  315,  315,  315,  315,

      322,  328,  312,  498,  323,  491,  371,  499,  324,  316,
      372,  325,  332,  490,  326,  329,  333,  350,  330,  228,
      334,  331,  351,  373,  327,  145,  335,  352, 2135,  322,
      328,  312,  498,  323,  491,  371,  499,  324,  316,  372,
      325,  332, 2135,  326,  329,  333,  350,  330,  336,  334,
      331,  351,  373,  327,  342,  335,  352,  337, 2135,  338,
     2135, 2135,  343,  502,  339,  344, 2135,  340,  345,  341,
      500,  346, 2135,  505,  347,  509,  354,  336, 2135,  501,
      355,  425, 2135,  342,  356,  426,  337,  360,  338,  427,
      357,  343,  502,  339,  344,  428,  340,  345,  341,  500,

      346,  361,  505,  347,  509,  354,  362,  363,  501,  355,
      425,  379, 2135,  356,  426, 2135,  360,  510,  427,  357,
     2135,  380, 2135, 2135,  428,  374,  381,  382,  511,  375,
      361,  383,  384,  376,  512,  362,  363,  364,  385,  377,
      379,  386,  391,  392,  378,  365,  510,  366, 2135,  367,
      380,  368,  369,  370,  374,  381,  382,  511,  375, 2135,
      383,  384,  376,  512, 2135,  513,  364,  385,  377, 2135,
      386,  391,  392,  378,  365, 2135,  366,  411,  367,  412,
      368,  369,  370,  387,  413,  388, 2135,  414,  389,  393,
      393,  393,  393,  395,  513,  396,  397,  397,  397,  397,

      443,  514,  394,  464,  421,  444,  411,  465,  412,  398,
      445,  415,  387,  413,  388,  416,  414,  389,  422,  417,
      466,  423,  418, 2135,  424,  419, 2135,  515, 2135,  443,
      514,  394,  464,  421,  444,  420,  465, 2135,  398,  445,
      415,  484,  485, 2135,  416, 2135,  429,  422,  417,  466,
      423,  418,  435,  424,  419,  430,  515,  431,  518, 2135,
      436,  521,  432,  437,  420,  433,  438,  434,  503,  439,
      484,  485,  440,  504,  447,  429, 2135,  516,  448,  524,
     2135,  435,  449,  517,  430,  453,  431,  518,  450,  436,
      521,  432,  437,  525,  433,  438,  434,  503,  439,  454,

     2135,  440,  504,  447,  455,  456,  516,  448,  524,  472,
     2135,  449,  517, 2135,  453,  526, 2135,  450, 2135,  473,
     2135, 2135,  525,  467,  474,  475,  519,  468,  454,  476,
      477,  469,  520,  455,  456,  457,  478,  470,  472,  479,
     2135,  527,  471,  458,  526,  459, 2135,  460,  473,  461,
      462,  463,  467,  474,  475,  519,  468, 2135,  476,  477,
      469,  520,  528,  522,  457,  478,  470,  532,  479,  523,
      527,  471,  458,  533,  459,  506,  460,  507,  461,  462,
      463,  480,  508,  481,  529,  534,  482,  539,  535,  530,
      531,  528,  522,  536,  542,  537,  532,  538,  523,  540,

      543,  548,  533,  541,  506,  549,  507,  550,  544,  551,
      480,  508,  481,  529,  534,  482,  539,  535,  530,  531,
      546,  547,  536,  542,  537,  545,  538,  552,  540,  543,
      548,  553,  541,  554,  549,  555,  550,  544,  551,  556,
      557,  558,  560,  563,  561,  559,  562,  564,  565,  546,
      547,  566,  568,  569,  545,  570,  552,  571,  572,  567,
      553,  574,  554,  575,  555,  579,  573, 2135,  556,  557,
      558,  560,  563,  561,  559,  562,  564,  565,  580,  581,
      566,  568,  569,  583,  570,  582,  571,  572,  567,  576,
      574,  584,  575, 2135,  579,  573,  577,  585,  578,  592,

      229,  229,  229,  229, 2135, 2135,  595,  580,  581,  596,
      597,  598,  583,  586,  582, 2135,  593, 2135,  576, 2135,
      584,  587,  587,  587,  587,  577,  585,  578,  592,  230,
      231,  231,  231,  231,  588,  595,  599,  594,  596,  597,
      598,  600,  586,  232,  589,  593,  589,  601,  590,  590,
      590,  590,  602,  603,  605,  606,  608,  609,  612,  610,
      607,  613,  604,  588,  611,  599,  594,  614,  615,  616,
      600,  617,  232,  618,  619,  621,  601,  624,  627,  628,
      620,  602,  603,  605,  606,  608,  609,  612,  610,  607,
      613,  604,  629,  611,  630,  622,  614,  615,  616,  625,

      617,  623,  618,  619,  621,  626,  624,  627,  628,  620,
      631,  632,  635,  636,  638,  642,  633,  634,  640,  639,
      641,  629,  643,  630,  622,  637,  644,  645,  625,  646,
      623,  649,  650,  647,  626,  651,  652,  653,  654,  631,
      632,  635,  636,  638,  642,  633,  634,  640,  639,  641,
      648,  643,  655,  656,  637,  644,  645,  657,  646,  658,
      649,  650,  647,  659,  651,  652,  653,  654,  660,  661,
      663,  666,  664,  662,  665,  667,  668,  669,  671,  648,
      672,  655,  656,  673,  674,  670,  657,  675,  658,  677,
      678,  682,  659,  683,  686,  676, 2135,  660,  661,  663,

      666,  664,  662,  665,  667,  668,  669,  671,  679,  672,
      697, 2135,  673,  674,  670,  680,  675,  681,  677,  678,
      682,  684,  683,  686,  676,  687,  698,  685,  700,  701,
      702,  688,  311,  311,  311,  311,  689,  679,  689,  697,
      690,  690,  690,  690,  680,  312,  681,  699, 2135, 2135,
      684, 2135, 2135, 2135,  687,  698,  685,  700,  701,  702,
      688,  691,  691,  691,  691,  692,  692,  692,  692,  703,
      704,  705,  706,  707,  312,  710,  699,  313,  693,  314,
      694,  694,  694,  694,  695,  708,  695,  711,  696,  696,
      696,  696,  712,  316,  709,  713,  717,  718,  703,  704,

      705,  706,  707,  714,  710,  715,  719,  693,  720,  721,
      716,  722,  723,  724,  708,  726,  711,  729,  732,  725,
      733,  712,  316,  709,  713,  717,  718,  727,  734,  735,
      730,  736,  714,  728,  715,  719,  731,  720,  721,  716,
      722,  723,  724,  740,  726,  737,  729,  732,  725,  733,
      738,  739,  741,  745,  747,  746,  727,  734,  735,  730,
      736,  743,  728,  748,  742,  731,  744,  749,  750,  751,
      752,  756,  740,  757,  737,  754,  755,  758,  759,  738,
      739,  741,  745,  747,  746,  760,  761,  753,  762,  763,
      743,  764,  748,  742,  765,  744,  749,  750,  751,  752,

      756,  768,  757,  771,  754,  755,  758,  759,  766,  769,
      772,  770,  767,  773,  760,  761,  753,  762,  763,  774,
      764,  776,  777,  765,  778,  779,  780,  775,  782,  783,
      768,  787,  771,  788,  781,  791,  784,  766,  769,  772,
      770,  767,  773,  785,  807,  786,  789, 2135,  774, 2135,
      776,  777,  790,  778,  779,  780,  775,  782,  783,  810,
      787,  792,  788,  781,  791,  784, 2135,  793,  798,  798,
      798,  798,  785,  807,  786,  789,  393,  393,  393,  393,
      794,  790,  794, 2135,  795,  795,  795,  795,  810,  394,
      792,  796,  796,  796,  796,  395,  793,  396,  799,  799,

      799,  799,  811,  800,  797,  800,  803,  801,  801,  801,
      801,  398,  802,  802,  802,  802,  806,  487,  394,  487,
      804,  804,  804,  804,  487,  808,  812,  813,  814,  815,
      816,  811,  817,  797,  818,  487,  820, 2135,  823,  487,
      398,  827,  821,  819,  828,  829,  809,  822,  830,  831,
      832,  833, 2135,  836,  808,  812,  813,  814,  815,  816,
     2135,  817,  824,  818,  825,  820,  487,  823,  839,  826,
      827,  821,  819,  828,  829,  809,  822,  830,  831,  832,
      833,  834,  836,  837,  840,  842,  843,  835,  844,  838,
      841,  824,  845,  825,  846,  847,  850,  839,  826,  851,

      848,  849,  853,  855,  857,  856,  860,  854,  861, 2135,
      834,  852,  837,  840,  842,  843,  835,  844,  838,  841,
      866,  845,  858,  846,  847,  850,  859,  862,  851,  848,
      849,  853,  855,  857,  856,  860,  854,  861,  864,  865,
      852,  867,  868,  869,  863,  870,  871,  872,  873,  866,
      874,  858,  875,  876,  878,  859,  862,  877,  879,  881,
      880,  882,  883, 2135,  886,  887,  888,  864,  865,  889,
      867,  868,  869,  863,  870,  871,  872,  873,  892,  874,
      893,  875,  876,  878,  884,  897,  877,  879,  881,  880,
      882,  883,  885,  886,  887,  888,  890,  898,  889,  894,

      901,  904,  905,  906,  891,  899,  895,  892,  896,  893,
      902,  900,  907,  884,  897,  908,  903,  911,  912,  913,
      914,  885,  915,  909,  916,  890,  898,  917,  894,  901,
      904,  905,  906,  891,  899,  895,  918,  896,  910,  902,
      900,  907,  919,  920,  908,  903,  911,  912,  913,  914,
      921,  915,  909,  916,  922,  923,  917,  924,  925,  926,
      928,  929,  930,  931,  932,  918,  927,  910,  933,  934,
      935,  919,  920,  936,  937,  938,  939,  940,  944,  921,
      945, 2135,  946,  922,  923,  947,  924,  925,  926,  928,
      929,  930,  931,  932,  948,  927,  949,  933,  934,  935,

      941,  950,  936,  937,  938,  939,  940,  944,  951,  945,
      942,  946,  952,  953,  947,  955,  956,  957,  958,  959,
      943,  960,  961,  948,  962,  949,  963,  964,  965,  966,
      950,  967,  968,  970,  971,  972,  969,  951,  975,  942,
      976,  952,  953,  973,  955,  956,  957,  958,  959,  943,
      960,  961,  974,  962,  977,  963,  964,  965,  966,  978,
      967,  968,  970,  971,  972,  969,  979,  975,  980,  976,
      981,  982,  973,  983,  984,  985,  987,  986,  988,  989,
      990,  991,  992,  977,  994,  995,  993,  996,  978,  996,
     2135,  997,  997,  997,  997,  979, 2135,  980, 2135,  981,

      982, 2135,  983,  984,  985,  987,  986,  988,  989,  990,
      991,  992, 1000,  994,  995,  993,  587,  587,  587,  587,
      998, 1001,  998, 1002,  999,  999,  999,  999, 1003,  588,
      590,  590,  590,  590,  590,  590,  590,  590, 1004, 1005,
     1007, 1000, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1001, 1016, 1002, 1017, 1006, 1018, 1019, 1003,  588, 1020,
     1021, 1024, 1025, 1022, 1026, 1027, 1028, 1004, 1005, 1007,
     1023, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1029,
     1016, 1030, 1017, 1006, 1018, 1019, 1031, 1032, 1020, 1021,
     1024, 1025, 1022, 1026, 1027, 1028, 1033, 1034, 1035, 1023,

     1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1029, 1046,
     1030, 1038, 1047, 1048, 1049, 1031, 1032, 1051, 1052, 1053,
     1054, 1039, 1055, 1056, 1057, 1033, 1034, 1035, 1058, 1036,
     1059, 1040, 1041, 1042, 1043, 1044, 1045, 1060, 1046, 1061,
     1038, 1047, 1048, 1049, 1062, 1063, 1051, 1052, 1053, 1054,
     1039, 1055, 1056, 1057, 1064, 1066, 1067, 1058, 1065, 1059,
     1068, 1069, 1071, 1072, 1073, 1074, 1060, 1075, 1061, 1076,
     1070, 1077, 1078, 1062, 1063, 1079, 1080, 1081, 1083, 1082,
     1084, 1085, 1086, 1064, 1066, 1067, 1087, 1065, 1090, 1068,
     1069, 1071, 1072, 1073, 1074, 1088, 1075, 1091, 1076, 1089,

     1077, 1078, 2135, 2135, 1079, 1080, 1081, 1083, 1082, 1084,
     1085, 1086, 2135, 1098, 2135, 1087, 2135, 1090, 1092, 1092,
     1092, 1092, 2135, 2135, 1088, 2135, 1091, 2135, 1089,  690,
      690,  690,  690, 1093, 1093, 1093, 1093,  692,  692,  692,
      692, 1094, 1098, 1094, 1099, 1095, 1095, 1095, 1095,  313,
      693,  314, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097,
      696,  696,  696,  696, 1100,  316, 1101, 1102, 1103, 1105,
     1106, 1107, 1108, 1099, 1109, 1110, 1111, 1112, 1113,  693,
     1114, 1115, 1116, 1104, 1117, 1118, 1119, 2135, 1122, 1123,
     1124, 1125, 1126, 1100,  316, 1101, 1102, 1103, 1105, 1106,

     1107, 1108, 1127, 1109, 1110, 1111, 1112, 1113, 1128, 1114,
     1115, 1116, 1104, 1117, 1118, 1119, 1120, 1122, 1123, 1124,
     1125, 1126, 1129, 1121, 1130, 1131, 1132, 1133, 1134, 1135,
     1138, 1127, 1139, 1140, 1141, 1142, 1143, 1128, 1144, 1136,
     1145, 1146, 1147, 1149, 1150, 1120, 1151, 1152, 1153, 1137,
     1154, 1129, 1121, 1130, 1131, 1132, 1133, 1134, 1155, 1138,
     1156, 1139, 1140, 1141, 1142, 1143, 1157, 1144, 1136, 1145,
     1146, 1147, 1149, 1150, 1158, 1151, 1152, 1153, 1137, 1154,
     1159, 1160, 1161, 1164, 1162, 1165, 1166, 1155, 1163, 1156,
     1167, 1169, 1170, 1171, 1172, 1157, 1173, 1174, 1175, 1168,

     1176, 1177, 1178, 1158, 1179, 1181, 1180, 1182, 1183, 1159,
     1160, 1161, 1164, 1162, 1165, 1166, 1184, 1163, 1185, 1167,
     1169, 1170, 1171, 1172, 1186, 1173, 1174, 1175, 1187, 1176,
     1177, 1178, 1188, 1179, 1181, 1180, 1182, 1183, 1189, 1190,
     1190, 1190, 1190, 2135, 2135, 1184, 2135, 1185,  795,  795,
      795,  795, 1198, 1186, 2135, 2135, 2135, 1187, 2135, 2135,
     2135, 1188,  796,  796,  796,  796, 1191, 1189, 1191, 2135,
     1192, 1192, 1192, 1192, 1199,  797, 1193, 1193, 1193, 1193,
      395, 1198,  396, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195,  801,  801,  801,  801,  803,  398, 1196, 1196, 1196,

     1196,  803, 1200, 1199,  797,  806,  487, 1201,  487,  802,
      802,  802,  802,  487, 1202, 1197, 1197, 1197, 1197, 1203,
     1205, 1206, 1207, 1208,  487,  398, 2135, 1209,  487, 1210,
     1211, 1200, 1212, 1213, 1204, 1214, 1201, 1215, 1216, 1217,
     1218, 1219, 1222, 1202, 1223, 1224, 1220, 1225, 1203, 1205,
     1206, 1207, 1208, 1221, 1226,  487, 1209, 1227, 1210, 1211,
     1228, 1212, 1213, 1204, 1214, 1229, 1215, 1216, 1217, 1218,
     1219, 1222, 1230, 1223, 1224, 1220, 1225, 1231, 1232, 1233,
     1234, 1238, 1221, 1226, 1239, 1235, 1227, 1240, 1241, 1228,
     1242, 1243, 1244, 1245, 1229, 1236, 1246, 1247, 1249, 1250,

     1251, 1230, 1252, 1253, 1254, 1237, 1231, 1232, 1233, 1234,
     1238, 1255, 1256, 1239, 1257, 1258, 1240, 1241, 1259, 1242,
     1243, 1244, 1245, 1260, 1236, 1246, 1247, 1249, 1250, 1251,
     1261, 1252, 1253, 1254, 1237, 1262, 1264, 1265, 1266, 1263,
     1255, 1256, 1267, 1257, 1258, 1269, 1270, 1259, 1271, 1272,
     1273, 1268, 1260, 1274, 1275, 1276, 1277, 1278, 1279, 1261,
     1280, 1281, 1282, 1283, 1262, 1264, 1265, 1266, 1263, 1284,
     1285, 1267, 1286, 1288, 1269, 1270, 1287, 1271, 1272, 1273,
     1289, 1290, 1274, 1275, 1276, 1277, 1278, 1279, 1291, 1280,
     1281, 1282, 1283, 1292, 1293, 1294, 1295, 1296, 1284, 1285,

     1298, 1286, 1288, 1299, 1300, 1287, 1301, 1302, 1303, 1289,
     1290, 1304, 1305, 1306, 1307, 1308, 1309, 1291, 1310, 1311,
     1312, 1313, 1292, 1293, 1294, 1295, 1296, 1314, 1315, 1298,
     1316, 1317, 1299, 1300, 1318, 1301, 1302, 1303, 1323, 1324,
     1304, 1305, 1306, 1307, 1308, 1309, 1325, 1310, 1311, 1312,
     1313, 1320, 1326, 1327, 1328, 1329, 1314, 1315, 1330, 1316,
     1317, 1331, 1321, 1318, 1332, 1333, 1334, 1323, 1324, 1335,
     1336, 1337, 1338, 1339, 1340, 1325, 1341, 1342, 1343, 1344,
     1320, 1326, 1327, 1328, 1329, 1345, 1346, 1330, 1347, 1348,
     1331, 1321, 1349, 1332, 1333, 1334, 1350, 1351, 1335, 1336,

     1337, 1338, 1339, 1340, 1352, 1341, 1342, 1343, 1344, 1353,
     1354, 1355, 1356, 1357, 1345, 1346, 2135, 1347, 1348, 2135,
     2135, 1349, 1358, 1359, 1360, 1350, 1351,  997,  997,  997,
      997, 1361, 1362, 1352,  997,  997,  997,  997, 1353, 1354,
     1355, 1356, 1357,  999,  999,  999,  999,  999,  999,  999,
      999, 1358, 1359, 1360, 1363, 1364, 1366, 1367, 1368, 1369,
     1361, 1362, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1388,
     1391, 1392, 1393, 1363, 1364, 1366, 1367, 1368, 1369, 1394,
     1389, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,

     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1388, 1391,
     1392, 1393, 1395, 1396, 1397, 1398, 1399, 1400, 1394, 1389,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1395, 1396, 1397, 1398, 1399, 1400, 1422, 1423, 1401,
     1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
     1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
     1424, 1425, 1092, 1092, 1092, 1092, 1422, 1423, 1426, 1426,
     1426, 1426, 1427, 1427, 1427, 1427, 1095, 1095, 1095, 1095,
      314, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1424,

     1425, 1428, 1429, 1430,  316, 1431, 1432, 1433, 1434, 1436,
     1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1428, 1429, 1430,  316, 1431, 1432, 1433, 1434, 1436, 1437,
     1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1458,
     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1459, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1458, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1459,

     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1494, 1495, 1190, 1190, 1190, 1190, 1496,
     1496, 1496, 1496, 1192, 1192, 1192, 1192, 1497, 1497, 1497,
     1497, 1195, 1195, 1195, 1195, 1500, 1488, 1489, 1490, 1491,
     1492, 1493, 1494, 1495,  395, 1501, 1502, 1194, 1194, 1194,
     1194, 1499, 1499, 1499, 1499,  803, 1503, 1504, 1505, 1506,
      398, 1508, 1509, 1510, 1500, 1511, 1512, 1513, 1514,  802,
      802,  802,  802, 1515, 1501, 1502, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1503, 1504, 1505, 1506,  398,

     1508, 1509, 1510, 1525, 1511, 1512, 1513, 1514, 1526, 1527,
     1528, 1533, 1515, 1530, 1534, 1516, 1517, 1518, 1519, 1520,
     1521, 1522, 1523, 1524, 1531, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1525, 1542, 1543, 1544, 1545, 1526, 1527, 1528,
     1533, 1546, 1530, 1534, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1531, 1535, 1536, 1537, 1538, 1539, 1540,
     1541, 1556, 1542, 1543, 1544, 1545, 1557, 1558, 1559, 1560,
     1546, 1561, 1562, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
     1554, 1555, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
     1556, 1571, 1572, 1573, 1574, 1557, 1558, 1559, 1560, 1575,

     1561, 1562, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
     1586, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1587,
     1571, 1572, 1573, 1574, 1590, 1591, 1592, 1593, 1575, 1594,
     1595, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1586,
     1588, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1587, 1589,
     1603, 1604, 1605, 1590, 1591, 1592, 1593, 1606, 1594, 1595,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1588,
     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1616, 1617, 1603,
     1604, 1605, 1618, 1619, 1620, 1621, 1606, 1622, 1623, 1607,
     1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1624, 1626,

     1627, 1628, 1629, 1630, 1631, 1632, 1616, 1617, 1633, 1635,
     1636, 1618, 1619, 1620, 1621, 1637, 1622, 1623, 1639, 1640,
     1641, 1642, 1643, 1644, 1638, 1645, 1646, 1624, 1626, 1627,
     1628, 1629, 1630, 1631, 1632, 1647, 1648, 1633, 1635, 1636,
     1649, 1650, 1651, 1652, 1637, 1653, 1654, 1639, 1640, 1641,
     1642, 1643, 1644, 1655, 1645, 1646, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1647, 1648, 1664, 1665, 1667, 1649,
     1650, 1651, 1652, 1668, 1653, 1654, 1427, 1427, 1427, 1427,
     1669, 1670, 1655, 1671, 1672, 1656, 1657, 1658, 1659, 1660,
     1661, 1662, 1663, 1673, 1674, 1664, 1665, 1667, 1676, 1677,

     1678, 1679, 1668, 1680, 1681, 1682, 1683, 1685, 1686, 1669,
     1670, 1687, 1671, 1672, 1689, 1690, 1691, 1692, 1693, 1694,
     1688, 1695, 1673, 1674, 1696, 1697, 1698, 1676, 1677, 1678,
     1679, 1699, 1680, 1681, 1682, 1683, 1685, 1686, 1700, 1701,
     1687, 1702, 1703, 1689, 1690, 1691, 1692, 1693, 1694, 1704,
     1695, 1705, 1706, 1696, 1697, 1698, 1707, 1708, 1709, 1710,
     1699, 1711, 1712, 1713, 1714, 1715, 2135, 1700, 1701, 2135,
     1702, 1703, 1496, 1496, 1496, 1496, 1719, 1720, 1704, 1721,
     1705, 1706, 1722, 1723, 1724, 1707, 1708, 1709, 1710, 1725,
     1711, 1712, 1713, 1714, 1715, 1717, 1717, 1717, 1717, 1718,

     1718, 1718, 1718, 1726, 1728, 1719, 1720, 1729, 1721, 1730,
     1731, 1722, 1723, 1724, 1732, 1733, 1734, 1735, 1725, 1737,
     1738, 1739, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
     1740, 1749, 1726, 1728, 1750, 1751, 1729, 1752, 1730, 1731,
     1753, 1754, 1755, 1732, 1733, 1734, 1735, 1756, 1737, 1738,
     1739, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1757,
     1749, 1758, 1759, 1750, 1751, 1760, 1752, 1761, 1762, 1753,
     1754, 1755, 1763, 1764, 1765, 1766, 1756, 1767, 1768, 1769,
     1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1757, 1778,
     1758, 1759, 1779, 1780, 1760, 1781, 1761, 1762, 1782, 1783,

     1784, 1763, 1764, 1765, 1766, 1785, 1767, 1768, 1769, 1770,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1786, 1778, 1787,
     1788, 1779, 1780, 1789, 1781, 1790, 1791, 1782, 1783, 1784,
     1792, 1793, 1794, 1795, 1785, 1796, 1797, 1798, 1799, 1800,
     1801, 1802, 1803, 1804, 1805, 1806, 1786, 1807, 1787, 1788,
     1808, 1809, 1789, 1810, 1790, 1791, 1811, 1812, 1813, 1792,
     1793, 1794, 1795, 1814, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1815, 1807, 1816, 1817, 1808,
     1809, 1818, 1810, 1819, 1820, 1811, 1812, 1813, 1821, 1822,
     1823, 1824, 1814, 1825, 1826, 1826, 1826, 1826, 1827, 1828,

     1829, 1830, 1831, 1832, 1815, 1833, 1816, 1817, 1834, 1835,
     1818, 1836, 1819, 1820, 1837, 1838, 1839, 1821, 1822, 1823,
     1824, 1840, 1825, 1841, 1842, 1843, 1844, 1827, 1828, 1829,
     1830, 1831, 1832, 1845, 1833, 1846, 1847, 1834, 1835, 1848,
     1836, 1849, 1850, 1837, 1838, 1839, 1851, 1852, 1853, 1854,
     1840, 1855, 1841, 1842, 1843, 1844, 1856, 1856, 1856, 1856,
     1858, 1859, 1845, 1860, 1846, 1847, 1861, 1862, 1848, 1863,
     1849, 1850, 1864, 1865, 1866, 1851, 1852, 1853, 1854, 1867,
     1855, 1717, 1717, 1717, 1717, 1857, 1857, 1857, 1857, 1858,
     1859, 1868, 1860, 1869, 1870, 1861, 1862, 1871, 1863, 1872,

     1873, 1864, 1865, 1866, 1874, 1875, 1876, 1877, 1867, 1878,
     1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
     1868, 1890, 1869, 1870, 1891, 1892, 1871, 1893, 1872, 1873,
     1894, 1895, 1896, 1874, 1875, 1876, 1877, 1897, 1878, 1879,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1898,
     1890, 1899, 1901, 1891, 1892, 1902, 1893, 1903, 1904, 1894,
     1895, 1896, 1905, 1906, 1907, 1909, 1897, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1920, 1921, 1898, 1922,
     1899, 1901, 1923, 1924, 1902, 2135, 1903, 1904, 1925, 1926,
     1928, 1905, 1906, 1907, 1909, 1929, 1910, 1911, 1912, 1913,

     1914, 1915, 1916, 1917, 1918, 1920, 1921, 1930, 1922, 1931,
     1932, 1923, 1924, 1826, 1826, 1826, 1826, 1925, 1926, 1928,
     1933, 1934, 1935, 1936, 1929, 1937, 1939, 1940, 1941, 1942,
     1943, 1856, 1856, 1856, 1856, 1944, 1930, 1945, 1931, 1932,
     1717, 1717, 1717, 1717, 1947, 1948, 1949, 1950, 1951, 1933,
     1934, 1935, 1936, 1952, 1937, 1939, 1940, 1941, 1942, 1943,
     1953, 1954, 1955, 1956, 1944, 1958, 1945, 1959, 1960, 1961,
     1962, 1963, 1964, 1947, 1948, 1949, 1950, 1951, 1966, 1967,
     1968, 1969, 1952, 1970, 1971, 1972, 1973, 1974, 1965, 1953,
     1954, 1955, 1956, 1975, 1958, 1976, 1959, 1960, 1961, 1962,

     1963, 1964, 1977, 1978, 1979, 1980, 1981, 1966, 1967, 1968,
     1969, 1982, 1970, 1971, 1972, 1973, 1974, 1965, 1984, 1985,
     1986, 1987, 1975, 1988, 1976, 1989, 1990, 1983, 1991, 1992,
     1993, 1977, 1978, 1979, 1980, 1981, 1994, 1995, 1996, 1997,
     1982, 1998, 1999, 2002, 2000, 2003, 2004, 1984, 1985, 1986,
     1987, 2005, 1988, 2006, 1989, 1990, 1983, 1991, 1992, 1993,
     2001, 2007, 2008, 2009, 2010, 1994, 1995, 1996, 1997, 2011,
     1998, 1999, 2002, 2000, 2003, 2004, 2012, 2013, 2014, 2015,
     2005, 2016, 2006, 2017, 2018, 2020, 2021, 2022, 2023, 2001,
     2007, 2008, 2009, 2010, 2024, 2025, 2026, 2027, 2011, 2028,

     2019, 2029, 2030, 2031, 2032, 2012, 2013, 2014, 2015, 2033,
     2016, 2034, 2017, 2018, 2020, 2021, 2022, 2023, 2035, 2036,
     2037, 2038, 2039, 2024, 2025, 2026, 2027, 2040, 2028, 2019,
     2029, 2030, 2031, 2032, 2041, 2042, 2043, 2044, 2033, 2045,
     2034, 2046, 2047, 2048, 2049, 2050, 2051, 2035, 2036, 2037,
     2038, 2039, 2052, 2053, 2054, 2055, 2040, 2056, 2057, 2058,
     2059, 2060, 2061, 2041, 2042, 2043, 2044, 2062, 2045, 2063,
     2046, 2047, 2048, 2049, 2050, 2051, 2064, 2065, 2066, 2067,
     2068, 2052, 2053, 2054, 2055, 2069, 2056, 2057, 2058, 2059,
     2060, 2061, 2070, 2071, 2072, 2073, 2062, 2074, 2063, 2075,

     2076, 2077, 2078, 2079, 2080, 2064, 2065, 2066, 2067, 2068,
     2081, 2082, 2083, 2084, 2069, 2085, 2086, 2087, 2088, 2089,
     2090, 2070, 2071, 2072, 2073, 2091, 2074, 2092, 2075, 2076,
     2077, 2078, 2079, 2080, 2093, 2094, 2095, 2096, 2097, 2081,
     2082, 2083, 2084, 2098, 2085, 2086, 2087, 2088, 2089, 2090,
     2099, 2100, 2101, 2102, 2091, 2103, 2092, 2104, 2105, 2106,
     2107, 2108, 2109, 2093, 2094, 2095, 2096, 2097, 2110, 2111,
     2112, 2113, 2098, 2114, 2115, 2116, 2117, 2118, 2119, 2099,
     2100, 2101, 2102, 2120, 2103, 2121, 2104, 2105, 2106, 2107,
     2108, 2109, 2122, 2123, 2124, 2125, 2126, 2110, 2111, 2112,

     2113, 2127, 2114, 2115, 2116, 2117, 2118, 2119, 2128, 2129,
     2130, 2131, 2120, 2132, 2121, 2133, 2134, 2135, 2135, 2135,
     2135, 2122, 2123, 2124, 2125, 2126, 2135, 2135, 2135, 2135,
     2127, 2135, 2135, 2135, 2135, 2135, 2135, 2128, 2129, 2130,
     2131, 2135, 2132, 2135, 2133, 2134,  234, 2135,  234,  234,
      310, 2135,  310, 2135,  310,  317,  317,  317,  317,  317,
      317,  399, 2135,  399,  399,  399,  399,  399,  399,  399,
      401, 2135, 2135,  401,  401,  401, 2135,  401,  401,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  805,  805,
      805,  805,  805,  805,  805,  805,  805, 1498, 2135, 1498,

     1498, 1498, 1498, 1498, 1498, 1498,   13, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135
    } ;

static const flex_int16_t yy_chk[4791] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2142,    7,    7,    7,    7,    7,    8, 1879,    8,    8,
        8,    8,    8,    9, 1863,    9,    9,    9,    9,    9,
       10, 1848,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1832,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1818,   28,   27,   29,   28,
      115, 1802,   28,   45,  107, 1789,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   45,   30,   34,   30,   27, 1773,   31,   34,
       30,   31,   59,   30,   31,   30,   37,   31,  119,  119,
       31,   60,   36,   30,   37,   62,   36,   73,   34,   31,
       36,   40,   30,   34,   30,   40,   36,   31,   34,   30,
       31,   59,   30,   31,   30,   37,   31,   38,   40,   31,
       60,   36, 1521,   37,   62,   36,   73, 1510, 1449,   36,
       40,   38,   43,   43,   40,   36,   38,   38,  144,   43,
      144,   42,   43,   46,   46, 1438,   38,   40,  402,   87,

      402,   42,  117,  117,  117,   41,   42,   42,   88,   41,
       38,   43,   43,   41,   90,   38,   38,   39,   43,   41,
       42,   43,   46,   46,   41,   39, 1379,   39,   87,   39,
       42,   39,   39,   39,   41,   42,   42,   88,   41,   44,
      101,   44,   41,   90,   44,  126,   39,   65,   41,   50,
       50,   50,   50,   41,   39,   65,   39, 1426,   39, 1426,
       39,   39,   39,   51,   51,   51,   51,   51,   44,  101,
       44,  127, 1368,   44,  126,  129,   65,   51,   52,   52,
       52,   52,   52,   53,   65,   53,   93,   54,   55,  131,
       53,   54,   52,   53,   93,   54,   51,  131,   54,   56,

      127,   54,   55,   56,  129,   55,   51,   56,   55, 1311,
      139,   54,   53,   56,   53,   93,   54,   55,  131,   53,
       54,   52,   53,   93,   54,   51,  131,   54,   56, 1300,
       54,   55,   56,   61,   55,   57,   56,   55,   61,  139,
       54,   58,   56,   61,   57,  153,   57, 1239, 1235,   58,
      155,   57,   58, 1208,   57,   58,   57,   66,   58, 1139,
      156,   58,   61, 1135,   57,   68,  157,   61, 1108,   68,
       58,   66,   61,   57,  153,   57,   66,   66,   58,  155,
       57,   58,   68,   57,   58,   57,   66,   58,   64,  156,
       58,  158,   64,   69,   68,  157,   64,   69,   68, 1041,

       66,   69,   64, 1037, 1010,   66,   66,   69, 1497,  945,
     1497,   68,   69,  105,  105,  105,  105,   64,  941,  914,
      158,   64,   69,   70,  864,   64,   69,   71,   71,  754,
       69,   64,   67,   70,   71,  159,   69,   71,   70,   70,
       67,   69,   67,   81,   67,   81,   67,   67,   67,   72,
       81,   72,   70,   81,   72,  649,   71,   71,   74,   74,
      546,   67,   70,   71,  159,  160,   71,   70,   70,   67,
      487,   67,   81,   67,   81,   67,   67,   67,   72,   81,
       72,  146,   81,   72,  154,  142,  109,   74,   74,   79,
       79,   79,   79,   80,  160,   80,   80,   80,   80,   80,

       82,   83,   79,  161,   82,  154,   96,  163,   82,   80,
       96,   82,   84,  154,   82,   83,   84,   89,   83,   47,
       84,   83,   89,   96,   82,   17,   84,   89,   13,   82,
       83,   79,  161,   82,  154,   96,  163,   82,   80,   96,
       82,   84,    0,   82,   83,   84,   89,   83,   85,   84,
       83,   89,   96,   82,   86,   84,   89,   85,    0,   85,
        0,    0,   86,  165,   85,   86,    0,   85,   86,   85,
      164,   86,    0,  167,   86,  169,   92,   85,    0,  164,
       92,  123,    0,   86,   92,  123,   85,   94,   85,  123,
       92,   86,  165,   85,   86,  123,   85,   86,   85,  164,

       86,   94,  167,   86,  169,   92,   94,   94,  164,   92,
      123,   98,    0,   92,  123,    0,   94,  170,  123,   92,
        0,   98,    0,    0,  123,   97,   98,   98,  171,   97,
       94,   99,   99,   97,  172,   94,   94,   95,   99,   97,
       98,   99,  102,  102,   97,   95,  170,   95,    0,   95,
       98,   95,   95,   95,   97,   98,   98,  171,   97,    0,
       99,   99,   97,  172,    0,  173,   95,   99,   97,    0,
       99,  102,  102,   97,   95,    0,   95,  120,   95,  120,
       95,   95,   95,  100,  120,  100,    0,  120,  100,  103,
      103,  103,  103,  104,  173,  104,  104,  104,  104,  104,

      128,  174,  103,  134,  122,  128,  120,  134,  120,  104,
      128,  121,  100,  120,  100,  121,  120,  100,  122,  121,
      134,  122,  121,    0,  122,  121,    0,  175,    0,  128,
      174,  103,  134,  122,  128,  121,  134,    0,  104,  128,
      121,  140,  140,    0,  121,    0,  124,  122,  121,  134,
      122,  121,  125,  122,  121,  124,  175,  124,  177,    0,
      125,  179,  124,  125,  121,  124,  125,  124,  166,  125,
      140,  140,  125,  166,  130,  124,    0,  176,  130,  181,
        0,  125,  130,  176,  124,  132,  124,  177,  130,  125,
      179,  124,  125,  182,  124,  125,  124,  166,  125,  132,

        0,  125,  166,  130,  132,  132,  176,  130,  181,  136,
        0,  130,  176,    0,  132,  183,    0,  130,    0,  136,
        0,    0,  182,  135,  136,  136,  178,  135,  132,  137,
      137,  135,  178,  132,  132,  133,  137,  135,  136,  137,
        0,  184,  135,  133,  183,  133,    0,  133,  136,  133,
      133,  133,  135,  136,  136,  178,  135,    0,  137,  137,
      135,  178,  185,  180,  133,  137,  135,  188,  137,  180,
      184,  135,  133,  189,  133,  168,  133,  168,  133,  133,
      133,  138,  168,  138,  186,  189,  138,  192,  190,  186,
      186,  185,  180,  190,  194,  191,  188,  191,  180,  193,

      195,  198,  189,  193,  168,  199,  168,  200,  196,  201,
      138,  168,  138,  186,  189,  138,  192,  190,  186,  186,
      197,  197,  190,  194,  191,  196,  191,  202,  193,  195,
      198,  203,  193,  204,  199,  205,  200,  196,  201,  206,
      207,  208,  209,  211,  210,  208,  210,  212,  213,  197,
      197,  214,  215,  216,  196,  217,  202,  218,  219,  214,
      203,  220,  204,  221,  205,  223,  219,    0,  206,  207,
      208,  209,  211,  210,  208,  210,  212,  213,  224,  225,
      214,  215,  216,  226,  217,  225,  218,  219,  214,  222,
      220,  227,  221,    0,  223,  219,  222,  227,  222,  235,

      229,  229,  229,  229,    0,    0,  237,  224,  225,  238,
      239,  240,  226,  229,  225,    0,  236,    0,  222,    0,
      227,  230,  230,  230,  230,  222,  227,  222,  235,  231,
      231,  231,  231,  231,  230,  237,  241,  236,  238,  239,
      240,  242,  229,  231,  232,  236,  232,  243,  232,  232,
      232,  232,  245,  246,  247,  248,  249,  250,  251,  250,
      248,  252,  246,  230,  250,  241,  236,  253,  254,  255,
      242,  256,  231,  257,  258,  259,  243,  261,  263,  264,
      258,  245,  246,  247,  248,  249,  250,  251,  250,  248,
      252,  246,  265,  250,  266,  260,  253,  254,  255,  262,

      256,  260,  257,  258,  259,  262,  261,  263,  264,  258,
      267,  268,  270,  271,  272,  274,  268,  268,  273,  272,
      273,  265,  275,  266,  260,  271,  275,  276,  262,  277,
      260,  279,  279,  278,  262,  280,  281,  282,  283,  267,
      268,  270,  271,  272,  274,  268,  268,  273,  272,  273,
      278,  275,  284,  285,  271,  275,  276,  286,  277,  287,
      279,  279,  278,  288,  280,  281,  282,  283,  289,  290,
      291,  293,  292,  290,  292,  294,  295,  296,  297,  278,
      298,  284,  285,  299,  300,  296,  286,  301,  287,  302,
      303,  305,  288,  306,  308,  301,    0,  289,  290,  291,

      293,  292,  290,  292,  294,  295,  296,  297,  304,  298,
      318,    0,  299,  300,  296,  304,  301,  304,  302,  303,
      305,  307,  306,  308,  301,  309,  319,  307,  320,  321,
      322,  309,  311,  311,  311,  311,  312,  304,  312,  318,
      312,  312,  312,  312,  304,  311,  304,  319,    0,    0,
      307,    0,    0,    0,  309,  319,  307,  320,  321,  322,
      309,  313,  313,  313,  313,  314,  314,  314,  314,  323,
      324,  325,  326,  328,  311,  330,  319,  315,  314,  315,
      315,  315,  315,  315,  316,  329,  316,  331,  316,  316,
      316,  316,  331,  315,  329,  332,  334,  335,  323,  324,

      325,  326,  328,  333,  330,  333,  336,  314,  337,  338,
      333,  339,  340,  341,  329,  342,  331,  344,  346,  341,
      347,  331,  315,  329,  332,  334,  335,  343,  348,  349,
      345,  350,  333,  343,  333,  336,  345,  337,  338,  333,
      339,  340,  341,  353,  342,  351,  344,  346,  341,  347,
      351,  351,  354,  356,  357,  356,  343,  348,  349,  345,
      350,  355,  343,  358,  354,  345,  355,  358,  359,  360,
      361,  363,  353,  364,  351,  362,  362,  365,  366,  351,
      351,  354,  356,  357,  356,  367,  368,  361,  369,  370,
      355,  371,  358,  354,  372,  355,  358,  359,  360,  361,

      363,  374,  364,  376,  362,  362,  365,  366,  373,  375,
      377,  375,  373,  378,  367,  368,  361,  369,  370,  379,
      371,  380,  381,  372,  382,  383,  384,  379,  385,  386,
      374,  388,  376,  389,  384,  391,  387,  373,  375,  377,
      375,  373,  378,  387,  411,  387,  390,    0,  379,    0,
      380,  381,  390,  382,  383,  384,  379,  385,  386,  413,
      388,  392,  389,  384,  391,  387,    0,  392,  396,  396,
      396,  396,  387,  411,  387,  390,  393,  393,  393,  393,
      394,  390,  394,    0,  394,  394,  394,  394,  413,  393,
      392,  395,  395,  395,  395,  397,  392,  397,  397,  397,

      397,  397,  414,  398,  395,  398,  400,  398,  398,  398,
      398,  397,  399,  399,  399,  399,  404,  404,  393,  404,
      400,  400,  400,  400,  404,  412,  415,  416,  417,  418,
      419,  414,  421,  395,  422,  404,  423,    0,  425,  404,
      397,  427,  424,  422,  428,  429,  412,  424,  430,  431,
      432,  433,    0,  435,  412,  415,  416,  417,  418,  419,
        0,  421,  426,  422,  426,  423,  404,  425,  437,  426,
      427,  424,  422,  428,  429,  412,  424,  430,  431,  432,
      433,  434,  435,  436,  438,  439,  440,  434,  441,  436,
      438,  426,  442,  426,  443,  444,  446,  437,  426,  447,

      444,  444,  448,  449,  450,  449,  452,  448,  453,    0,
      434,  447,  436,  438,  439,  440,  434,  441,  436,  438,
      456,  442,  451,  443,  444,  446,  451,  454,  447,  444,
      444,  448,  449,  450,  449,  452,  448,  453,  455,  455,
      447,  457,  458,  459,  454,  460,  461,  462,  463,  456,
      464,  451,  465,  466,  467,  451,  454,  466,  468,  469,
      468,  470,  471,    0,  473,  474,  475,  455,  455,  476,
      457,  458,  459,  454,  460,  461,  462,  463,  478,  464,
      479,  465,  466,  467,  472,  481,  466,  468,  469,  468,
      470,  471,  472,  473,  474,  475,  477,  482,  476,  480,

      484,  494,  495,  496,  477,  483,  480,  478,  480,  479,
      485,  483,  497,  472,  481,  498,  485,  500,  501,  502,
      503,  472,  504,  499,  505,  477,  482,  506,  480,  484,
      494,  495,  496,  477,  483,  480,  507,  480,  499,  485,
      483,  497,  508,  509,  498,  485,  500,  501,  502,  503,
      510,  504,  499,  505,  511,  512,  506,  514,  515,  516,
      517,  518,  519,  520,  521,  507,  516,  499,  522,  523,
      524,  508,  509,  525,  526,  527,  529,  530,  532,  510,
      534,    0,  535,  511,  512,  536,  514,  515,  516,  517,
      518,  519,  520,  521,  537,  516,  538,  522,  523,  524,

      531,  539,  525,  526,  527,  529,  530,  532,  540,  534,
      531,  535,  543,  544,  536,  547,  548,  549,  550,  551,
      531,  552,  553,  537,  554,  538,  555,  556,  557,  558,
      539,  559,  560,  561,  562,  563,  560,  540,  565,  531,
      566,  543,  544,  564,  547,  548,  549,  550,  551,  531,
      552,  553,  564,  554,  568,  555,  556,  557,  558,  569,
      559,  560,  561,  562,  563,  560,  571,  565,  572,  566,
      573,  574,  564,  575,  576,  577,  578,  577,  579,  580,
      581,  582,  583,  568,  584,  585,  583,  586,  569,  586,
        0,  586,  586,  586,  586,  571,    0,  572,    0,  573,

      574,    0,  575,  576,  577,  578,  577,  579,  580,  581,
      582,  583,  597,  584,  585,  583,  587,  587,  587,  587,
      588,  598,  588,  599,  588,  588,  588,  588,  600,  587,
      589,  589,  589,  589,  590,  590,  590,  590,  601,  602,
      603,  597,  604,  605,  606,  607,  608,  609,  610,  611,
      598,  612,  599,  613,  602,  614,  615,  600,  587,  617,
      618,  620,  621,  619,  622,  623,  624,  601,  602,  603,
      619,  604,  605,  606,  607,  608,  609,  610,  611,  625,
      612,  626,  613,  602,  614,  615,  627,  628,  617,  618,
      620,  621,  619,  622,  623,  624,  629,  630,  632,  619,

      633,  634,  635,  637,  638,  639,  640,  641,  625,  642,
      626,  634,  643,  646,  647,  627,  628,  650,  651,  652,
      653,  634,  654,  655,  656,  629,  630,  632,  657,  633,
      658,  635,  637,  638,  639,  640,  641,  659,  642,  660,
      634,  643,  646,  647,  661,  662,  650,  651,  652,  653,
      634,  654,  655,  656,  663,  664,  665,  657,  663,  658,
      666,  667,  668,  669,  671,  672,  659,  674,  660,  675,
      667,  676,  677,  661,  662,  678,  679,  680,  681,  680,
      682,  683,  684,  663,  664,  665,  685,  663,  687,  666,
      667,  668,  669,  671,  672,  686,  674,  688,  675,  686,

      676,  677,    0,    0,  678,  679,  680,  681,  680,  682,
      683,  684,    0,  702,    0,  685,    0,  687,  689,  689,
      689,  689,    0,    0,  686,    0,  688,    0,  686,  690,
      690,  690,  690,  691,  691,  691,  691,  692,  692,  692,
      692,  693,  702,  693,  703,  693,  693,  693,  693,  694,
      692,  694,  694,  694,  694,  694,  695,  695,  695,  695,
      696,  696,  696,  696,  704,  694,  705,  706,  707,  708,
      709,  710,  711,  703,  712,  713,  714,  715,  716,  692,
      717,  718,  719,  707,  720,  722,  723,    0,  725,  726,
      727,  728,  729,  704,  694,  705,  706,  707,  708,  709,

      710,  711,  730,  712,  713,  714,  715,  716,  731,  717,
      718,  719,  707,  720,  722,  723,  724,  725,  726,  727,
      728,  729,  732,  724,  733,  734,  735,  737,  738,  739,
      740,  730,  742,  743,  744,  745,  746,  731,  747,  739,
      748,  751,  752,  755,  756,  724,  757,  758,  759,  739,
      760,  732,  724,  733,  734,  735,  737,  738,  761,  740,
      762,  742,  743,  744,  745,  746,  763,  747,  739,  748,
      751,  752,  755,  756,  764,  757,  758,  759,  739,  760,
      765,  766,  767,  769,  768,  770,  771,  761,  768,  762,
      772,  773,  774,  776,  777,  763,  779,  780,  781,  772,

      782,  783,  784,  764,  785,  786,  785,  787,  788,  765,
      766,  767,  769,  768,  770,  771,  789,  768,  790,  772,
      773,  774,  776,  777,  791,  779,  780,  781,  791,  782,
      783,  784,  792,  785,  786,  785,  787,  788,  793,  794,
      794,  794,  794,    0,    0,  789,    0,  790,  795,  795,
      795,  795,  812,  791,    0,    0,    0,  791,    0,    0,
        0,  792,  796,  796,  796,  796,  797,  793,  797,    0,
      797,  797,  797,  797,  813,  796,  798,  798,  798,  798,
      799,  812,  799,  799,  799,  799,  799,  800,  800,  800,
      800,  801,  801,  801,  801,  802,  799,  803,  803,  803,

      803,  804,  814,  813,  796,  805,  805,  815,  805,  802,
      802,  802,  802,  805,  816,  804,  804,  804,  804,  817,
      818,  819,  820,  821,  805,  799,    0,  822,  805,  823,
      824,  814,  825,  826,  817,  827,  815,  828,  829,  830,
      832,  833,  835,  816,  836,  837,  834,  838,  817,  818,
      819,  820,  821,  834,  839,  805,  822,  840,  823,  824,
      841,  825,  826,  817,  827,  842,  828,  829,  830,  832,
      833,  835,  843,  836,  837,  834,  838,  844,  845,  847,
      848,  850,  834,  839,  852,  849,  840,  853,  854,  841,
      855,  856,  857,  858,  842,  849,  861,  862,  865,  866,

      867,  843,  868,  869,  870,  849,  844,  845,  847,  848,
      850,  871,  872,  852,  873,  874,  853,  854,  875,  855,
      856,  857,  858,  876,  849,  861,  862,  865,  866,  867,
      877,  868,  869,  870,  849,  878,  879,  880,  881,  878,
      871,  872,  882,  873,  874,  883,  884,  875,  886,  887,
      889,  882,  876,  890,  891,  892,  893,  894,  895,  877,
      895,  896,  897,  898,  878,  879,  880,  881,  878,  899,
      900,  882,  901,  902,  883,  884,  901,  886,  887,  889,
      903,  904,  890,  891,  892,  893,  894,  895,  905,  895,
      896,  897,  898,  906,  908,  911,  912,  913,  899,  900,

      915,  901,  902,  917,  918,  901,  920,  921,  922,  903,
      904,  924,  925,  926,  927,  928,  929,  905,  930,  931,
      932,  933,  906,  908,  911,  912,  913,  934,  937,  915,
      938,  939,  917,  918,  940,  920,  921,  922,  949,  951,
      924,  925,  926,  927,  928,  929,  952,  930,  931,  932,
      933,  942,  953,  954,  955,  956,  934,  937,  957,  938,
      939,  959,  942,  940,  960,  961,  962,  949,  951,  964,
      965,  966,  967,  968,  971,  952,  972,  974,  975,  976,
      942,  953,  954,  955,  956,  978,  981,  957,  982,  984,
      959,  942,  985,  960,  961,  962,  986,  987,  964,  965,

      966,  967,  968,  971,  988,  972,  974,  975,  976,  989,
      990,  991,  993,  994,  978,  981,    0,  982,  984,    0,
        0,  985, 1000, 1001, 1002,  986,  987,  996,  996,  996,
      996, 1004, 1007,  988,  997,  997,  997,  997,  989,  990,
      991,  993,  994,  998,  998,  998,  998,  999,  999,  999,
      999, 1000, 1001, 1002, 1008, 1009, 1011, 1013, 1014, 1016,
     1004, 1007, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038,
     1045, 1047, 1048, 1008, 1009, 1011, 1013, 1014, 1016, 1049,
     1038, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026,

     1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1045,
     1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1049, 1038,
     1057, 1058, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1070,
     1071, 1072, 1074, 1077, 1078, 1080, 1081, 1082, 1083, 1084,
     1085, 1050, 1051, 1052, 1053, 1055, 1056, 1086, 1087, 1057,
     1058, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1070, 1071,
     1072, 1074, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085,
     1089, 1090, 1092, 1092, 1092, 1092, 1086, 1087, 1093, 1093,
     1093, 1093, 1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095,
     1096, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1089,

     1090, 1098, 1099, 1100, 1096, 1102, 1105, 1106, 1107, 1109,
     1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134,
     1098, 1099, 1100, 1096, 1102, 1105, 1106, 1107, 1109, 1111,
     1112, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1136,
     1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154,
     1136, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1165, 1166,
     1168, 1169, 1170, 1172, 1175, 1176, 1178, 1179, 1136, 1143,
     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1136,

     1155, 1156, 1158, 1159, 1160, 1161, 1162, 1165, 1166, 1168,
     1169, 1170, 1172, 1175, 1176, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1187, 1188, 1190, 1190, 1190, 1190, 1191,
     1191, 1191, 1191, 1192, 1192, 1192, 1192, 1193, 1193, 1193,
     1193, 1195, 1195, 1195, 1195, 1198, 1180, 1181, 1182, 1183,
     1184, 1185, 1187, 1188, 1194, 1199, 1200, 1194, 1194, 1194,
     1194, 1196, 1196, 1196, 1196, 1197, 1202, 1205, 1206, 1207,
     1194, 1209, 1211, 1212, 1198, 1214, 1215, 1216, 1218, 1197,
     1197, 1197, 1197, 1219, 1199, 1200, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1202, 1205, 1206, 1207, 1194,

     1209, 1211, 1212, 1231, 1214, 1215, 1216, 1218, 1232, 1233,
     1234, 1243, 1219, 1236, 1245, 1220, 1221, 1222, 1223, 1224,
     1225, 1226, 1227, 1228, 1236, 1246, 1247, 1248, 1249, 1250,
     1251, 1253, 1231, 1254, 1255, 1256, 1258, 1232, 1233, 1234,
     1243, 1259, 1236, 1245, 1260, 1261, 1262, 1265, 1266, 1268,
     1269, 1270, 1272, 1236, 1246, 1247, 1248, 1249, 1250, 1251,
     1253, 1275, 1254, 1255, 1256, 1258, 1276, 1278, 1279, 1280,
     1259, 1281, 1282, 1260, 1261, 1262, 1265, 1266, 1268, 1269,
     1270, 1272, 1283, 1284, 1285, 1287, 1288, 1290, 1291, 1292,
     1275, 1293, 1294, 1297, 1298, 1276, 1278, 1279, 1280, 1299,

     1281, 1282, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1310,
     1313, 1283, 1284, 1285, 1287, 1288, 1290, 1291, 1292, 1314,
     1293, 1294, 1297, 1298, 1316, 1318, 1320, 1321, 1299, 1322,
     1325, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1310, 1313,
     1315, 1326, 1327, 1330, 1331, 1333, 1335, 1336, 1314, 1315,
     1337, 1338, 1340, 1316, 1318, 1320, 1321, 1342, 1322, 1325,
     1344, 1345, 1346, 1348, 1350, 1351, 1352, 1354, 1355, 1315,
     1326, 1327, 1330, 1331, 1333, 1335, 1336, 1357, 1358, 1337,
     1338, 1340, 1359, 1360, 1361, 1362, 1342, 1365, 1366, 1344,
     1345, 1346, 1348, 1350, 1351, 1352, 1354, 1355, 1367, 1369,

     1370, 1371, 1372, 1374, 1375, 1376, 1357, 1358, 1378, 1381,
     1382, 1359, 1360, 1361, 1362, 1383, 1365, 1366, 1384, 1386,
     1388, 1389, 1390, 1393, 1383, 1394, 1395, 1367, 1369, 1370,
     1371, 1372, 1374, 1375, 1376, 1398, 1399, 1378, 1381, 1382,
     1401, 1403, 1404, 1405, 1383, 1406, 1408, 1384, 1386, 1388,
     1389, 1390, 1393, 1410, 1394, 1395, 1412, 1413, 1414, 1416,
     1418, 1419, 1420, 1422, 1398, 1399, 1423, 1425, 1428, 1401,
     1403, 1404, 1405, 1429, 1406, 1408, 1427, 1427, 1427, 1427,
     1430, 1431, 1410, 1432, 1435, 1412, 1413, 1414, 1416, 1418,
     1419, 1420, 1422, 1436, 1437, 1423, 1425, 1428, 1439, 1440,

     1441, 1442, 1429, 1444, 1445, 1446, 1448, 1451, 1452, 1430,
     1431, 1453, 1432, 1435, 1454, 1456, 1458, 1459, 1460, 1463,
     1453, 1464, 1436, 1437, 1465, 1468, 1469, 1439, 1440, 1441,
     1442, 1471, 1444, 1445, 1446, 1448, 1451, 1452, 1473, 1474,
     1453, 1475, 1476, 1454, 1456, 1458, 1459, 1460, 1463, 1478,
     1464, 1480, 1482, 1465, 1468, 1469, 1483, 1484, 1486, 1488,
     1471, 1489, 1490, 1492, 1493, 1495,    0, 1473, 1474,    0,
     1475, 1476, 1496, 1496, 1496, 1496, 1500, 1501, 1478, 1502,
     1480, 1482, 1503, 1504, 1507, 1483, 1484, 1486, 1488, 1508,
     1489, 1490, 1492, 1493, 1495, 1498, 1498, 1498, 1498, 1499,

     1499, 1499, 1499, 1509, 1511, 1500, 1501, 1512, 1502, 1513,
     1514, 1503, 1504, 1507, 1516, 1517, 1518, 1520, 1508, 1523,
     1524, 1525, 1526, 1528, 1530, 1531, 1532, 1535, 1536, 1537,
     1525, 1540, 1509, 1511, 1541, 1543, 1512, 1545, 1513, 1514,
     1546, 1547, 1548, 1516, 1517, 1518, 1520, 1550, 1523, 1524,
     1525, 1526, 1528, 1530, 1531, 1532, 1535, 1536, 1537, 1552,
     1540, 1554, 1555, 1541, 1543, 1556, 1545, 1558, 1560, 1546,
     1547, 1548, 1561, 1562, 1564, 1565, 1550, 1567, 1568, 1569,
     1571, 1572, 1573, 1574, 1576, 1577, 1579, 1582, 1552, 1585,
     1554, 1555, 1586, 1587, 1556, 1589, 1558, 1560, 1592, 1593,

     1594, 1561, 1562, 1564, 1565, 1595, 1567, 1568, 1569, 1571,
     1572, 1573, 1574, 1576, 1577, 1579, 1582, 1597, 1585, 1599,
     1601, 1586, 1587, 1602, 1589, 1604, 1605, 1592, 1593, 1594,
     1606, 1609, 1610, 1612, 1595, 1615, 1617, 1618, 1620, 1621,
     1622, 1623, 1625, 1626, 1628, 1631, 1597, 1634, 1599, 1601,
     1635, 1636, 1602, 1638, 1604, 1605, 1641, 1642, 1643, 1606,
     1609, 1610, 1612, 1644, 1615, 1617, 1618, 1620, 1621, 1622,
     1623, 1625, 1626, 1628, 1631, 1646, 1634, 1648, 1650, 1635,
     1636, 1651, 1638, 1653, 1654, 1641, 1642, 1643, 1655, 1658,
     1659, 1661, 1644, 1664, 1666, 1666, 1666, 1666, 1667, 1668,

     1670, 1671, 1672, 1673, 1646, 1675, 1648, 1650, 1676, 1678,
     1651, 1681, 1653, 1654, 1684, 1685, 1686, 1655, 1658, 1659,
     1661, 1688, 1664, 1691, 1692, 1693, 1694, 1667, 1668, 1670,
     1671, 1672, 1673, 1696, 1675, 1698, 1700, 1676, 1678, 1701,
     1681, 1703, 1704, 1684, 1685, 1686, 1705, 1708, 1709, 1711,
     1688, 1714, 1691, 1692, 1693, 1694, 1716, 1716, 1716, 1716,
     1719, 1720, 1696, 1722, 1698, 1700, 1723, 1724, 1701, 1725,
     1703, 1704, 1727, 1728, 1730, 1705, 1708, 1709, 1711, 1733,
     1714, 1717, 1717, 1717, 1717, 1718, 1718, 1718, 1718, 1719,
     1720, 1736, 1722, 1737, 1738, 1723, 1724, 1740, 1725, 1743,

     1744, 1727, 1728, 1730, 1745, 1746, 1748, 1750, 1733, 1752,
     1753, 1755, 1756, 1757, 1760, 1761, 1763, 1766, 1768, 1772,
     1736, 1774, 1737, 1738, 1775, 1776, 1740, 1778, 1743, 1744,
     1779, 1781, 1783, 1745, 1746, 1748, 1750, 1784, 1752, 1753,
     1755, 1756, 1757, 1760, 1761, 1763, 1766, 1768, 1772, 1786,
     1774, 1788, 1790, 1775, 1776, 1791, 1778, 1792, 1793, 1779,
     1781, 1783, 1794, 1797, 1801, 1803, 1784, 1804, 1805, 1807,
     1808, 1810, 1812, 1813, 1815, 1817, 1819, 1820, 1786, 1821,
     1788, 1790, 1822, 1823, 1791,    0, 1792, 1793, 1827, 1831,
     1833, 1794, 1797, 1801, 1803, 1834, 1804, 1805, 1807, 1808,

     1810, 1812, 1813, 1815, 1817, 1819, 1820, 1835, 1821, 1837,
     1838, 1822, 1823, 1826, 1826, 1826, 1826, 1827, 1831, 1833,
     1840, 1842, 1843, 1845, 1834, 1847, 1849, 1850, 1851, 1852,
     1853, 1856, 1856, 1856, 1856, 1858, 1835, 1862, 1837, 1838,
     1857, 1857, 1857, 1857, 1864, 1865, 1866, 1868, 1869, 1840,
     1842, 1843, 1845, 1871, 1847, 1849, 1850, 1851, 1852, 1853,
     1873, 1874, 1876, 1878, 1858, 1880, 1862, 1881, 1882, 1883,
     1884, 1888, 1889, 1864, 1865, 1866, 1868, 1869, 1890, 1892,
     1893, 1894, 1871, 1895, 1896, 1897, 1898, 1899, 1889, 1873,
     1874, 1876, 1878, 1900, 1880, 1901, 1881, 1882, 1883, 1884,

     1888, 1889, 1902, 1903, 1904, 1905, 1907, 1890, 1892, 1893,
     1894, 1908, 1895, 1896, 1897, 1898, 1899, 1889, 1909, 1911,
     1912, 1913, 1900, 1914, 1901, 1915, 1916, 1908, 1917, 1918,
     1919, 1902, 1903, 1904, 1905, 1907, 1920, 1921, 1922, 1923,
     1908, 1924, 1926, 1928, 1927, 1930, 1931, 1909, 1911, 1912,
     1913, 1932, 1914, 1933, 1915, 1916, 1908, 1917, 1918, 1919,
     1927, 1934, 1935, 1936, 1937, 1920, 1921, 1922, 1923, 1938,
     1924, 1926, 1928, 1927, 1930, 1931, 1939, 1940, 1941, 1942,
     1932, 1943, 1933, 1945, 1946, 1947, 1949, 1950, 1951, 1927,
     1934, 1935, 1936, 1937, 1952, 1953, 1954, 1955, 1938, 1956,

     1946, 1957, 1958, 1959, 1960, 1939, 1940, 1941, 1942, 1961,
     1943, 1962, 1945, 1946, 1947, 1949, 1950, 1951, 1964, 1965,
     1966, 1967, 1968, 1952, 1953, 1954, 1955, 1970, 1956, 1946,
     1957, 1958, 1959, 1960, 1972, 1975, 1978, 1982, 1961, 1983,
     1962, 1984, 1985, 1986, 1988, 1990, 1993, 1964, 1965, 1966,
     1967, 1968, 1996, 2000, 2001, 2002, 1970, 2003, 2004, 2006,
     2008, 2011, 2014, 1972, 1975, 1978, 1982, 2018, 1983, 2019,
     1984, 1985, 1986, 1988, 1990, 1993, 2020, 2021, 2022, 2024,
     2026, 1996, 2000, 2001, 2002, 2029, 2003, 2004, 2006, 2008,
     2011, 2014, 2032, 2035, 2036, 2038, 2018, 2039, 2019, 2040,

     2042, 2044, 2045, 2047, 2048, 2020, 2021, 2022, 2024, 2026,
     2049, 2051, 2053, 2054, 2029, 2056, 2057, 2058, 2060, 2062,
     2063, 2032, 2035, 2036, 2038, 2065, 2039, 2066, 2040, 2042,
     2044, 2045, 2047, 2048, 2067, 2069, 2071, 2072, 2073, 2049,
     2051, 2053, 2054, 2075, 2056, 2057, 2058, 2060, 2062, 2063,
     2076, 2077, 2078, 2079, 2065, 2081, 2066, 2082, 2083, 2084,
     2085, 2087, 2088, 2067, 2069, 2071, 2072, 2073, 2089, 2090,
     2091, 2093, 2075, 2094, 2096, 2101, 2106, 2111, 2115, 2076,
     2077, 2078, 2079, 2116, 2081, 2117, 2082, 2083, 2084, 2085,
     2087, 2088, 2118, 2119, 2120, 2121, 2122, 2089, 2090, 2091,

     2093, 2123, 2094, 2096, 2101, 2106, 2111, 2115, 2124, 2125,
     2126, 2127, 2116, 2128, 2117, 2129, 2130,    0,    0,    0,
        0, 2118, 2119, 2120, 2121, 2122,    0,    0,    0,    0,
     2123,    0,    0,    0,    0,    0,    0, 2124, 2125, 2126,
     2127,    0, 2128,    0, 2129, 2130, 2136,    0, 2136, 2136,
     2137,    0, 2137,    0, 2137, 2138, 2138, 2138, 2138, 2138,
     2138, 2139,    0, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2140,    0,    0, 2140, 2140, 2140,    0, 2140, 2140, 2141,
     2141, 2141, 2141, 2141, 2141, 2141, 2141, 2141, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2144,    0, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2136 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2135 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP_CONCAT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUPS);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TOTAL);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 145:
case 146:
case 147:
case 148:
case 149:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 154:
case 155:
case 156:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 157:
case 158:
case 159:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 160:
case 161:
case 162:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 163:
case 164:
case 165:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 178:
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 180:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 181:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2136 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2136 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2135);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

