#line 2 "C:\\repos\\imodelNative\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 180
#define YY_END_OF_BUFFER 181
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2108] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      175,  175,  181,  179,  177,  176,  179,  125,  140,  137,
      168,  140,  126,  128,  127,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  136,  135,  166,  140,
      142,  142,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  169,  167,  170,  140,  140,  150,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  140,  150,  179,  175,  175,  175,  175,  173,
      125,  140,  137,  140,  140,  140,  126,  128,  127,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      174,  136,  135,  177,  132,    0,  134,  138,  129,  131,
      130,  139,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   54,   61,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,   81,

       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  133,  144,  145,  142,    0,
        0,  141,  141,  141,    4,  141,  141,  141,  141,  141,
      141,   12,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,   54,   61,  141,  141,  141,
      141,  141,  141,  141,  141,   74,  141,  141,  141,   81,
       83,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  165,  155,  165,  165,  165,
      150,  165,  149,  149,  149,    4,  149,  149,  149,  149,
      149,  149,   12,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,   54,   61,  149,  149,
      149,  149,  149,  149,  149,  149,   74,  149,  149,  149,
       81,   83,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  161,  165,  165,  165,
      150,  165,    0,  171,  175,  175,  132,  175,  134,  138,

      129,  131,  130,  139,  175,  175,    4,  175,  175,  175,
      175,  175,  175,   12,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,   54,   61,  175,
      175,  175,  175,  175,  175,  175,  175,   74,  175,  175,
      175,   81,   83,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  133,    0,  178,
        1,    2,    3,    5,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   46,    0,    0,    0,    0,
       53,    0,    0,   57,    0,   63,    0,    0,    0,    0,
        0,    0,    0,   71,   72,    0,    0,   76,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,    0,    0,  103,
        0,    0,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  145,    0,
        0,  146,  143,    1,    2,    3,    5,    6,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,   32,  141,
      141,  141,  141,  141,  141,  141,  141,  141,   46,  141,
      141,  141,  141,   53,  141,  141,   57,  141,   63,  141,
      141,  141,  141,  141,  141,  141,   71,   72,  141,  141,
       76,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,   98,
      141,  141,  103,  141,  141,  106,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
        0,  158,  165,  153,  165,  150,    0,  156,    1,    2,
        3,    5,    6,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,   32,  149,  149,  149,  149,  149,  149,
      149,  149,  149,   46,  149,  149,  149,  149,   53,  149,
      149,   57,  149,   63,  149,  149,  149,  149,  149,  149,
      149,   71,   72,  149,  149,   76,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,   98,  149,  149,  103,  149,  149,
      106,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,    0,  164,  159,  165,  165,
      150,    0,  162,  171,    0,  171,  175,  175,    1,    2,

        3,    5,    6,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   32,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   46,  175,  175,  175,  175,   53,  175,
      175,   57,  175,   63,  175,  175,  175,  175,  175,  175,
      175,   71,   72,  175,  175,   76,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,   98,  175,  175,  103,  175,  175,
      106,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,    0,    0,    0,   10,    0,

       13,   14,    0,    0,    0,    0,    0,    0,   24,    0,
        0,   27,    0,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   48,   49,    0,
        0,    0,    0,    0,    0,   60,   62,   41,   65,   66,
       67,    0,   69,    0,    0,    0,    0,    0,   79,    0,
       82,    0,    0,    0,   87,    0,    0,    0,    0,    0,
       93,   94,    0,    0,    0,   99,    0,    0,    0,  104,
        0,  107,  108,  109,  111,    0,    0,    0,    0,    0,
        0,    0,    0,  121,    0,    0,  123,    0,  148,    0,
      147,  141,  141,  141,   10,  141,   13,   14,  141,  141,

      141,  141,  141,  141,   24,  141,  141,   27,  141,  141,
      141,   31,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,   48,   49,  141,  141,  141,  141,  141,
      141,   60,   62,   41,   65,   66,   67,  141,   69,  141,
      141,  141,  141,  141,   79,  141,   82,  141,  141,  141,
       87,  141,  141,  141,  141,  141,   93,   94,  141,  141,
      141,   99,  141,  141,  141,  104,  141,  107,  108,  109,
      111,  141,  141,  141,  141,  141,  141,  141,  141,  121,
      141,  141,  123,  158,  165,    0,  157,  150,  156,  149,
      149,  149,   10,  149,   13,   14,  149,  149,  149,  149,

      149,  149,   24,  149,  149,   27,  149,  149,  149,   31,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,   48,   49,  149,  149,  149,  149,  149,  149,   60,
       62,   41,   65,   66,   67,  149,   69,  149,  149,  149,
      149,  149,   79,  149,   82,  149,  149,  149,   87,  149,
      149,  149,  149,  149,   93,   94,  149,  149,  149,   99,
      149,  149,  149,  104,  149,  107,  108,  109,  111,  149,
      149,  149,  149,  149,  149,  149,  149,  121,  149,  149,
      123,  164,    0,  163,  165,  150,  162,    0,  171,  175,
      175,  175,   10,  175,   13,   14,  175,  175,  175,  175,

      175,  175,   24,  175,  175,   27,  175,  175,  175,   31,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,   48,   49,  175,  175,  175,  175,  175,  175,   60,
       62,   41,   65,   66,   67,  175,   69,  175,  175,  175,
      175,  175,   79,  175,   82,  175,  175,  175,   87,  175,
      175,  175,  175,  175,   93,   94,  175,  175,  175,   99,
      175,  175,  175,  104,  175,  107,  108,  109,  111,  175,
      175,  175,  175,  175,  175,  175,  175,  121,  175,  175,
      123,    0,    0,    0,    0,    0,    0,   17,   18,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,    0,

        0,   38,    0,   40,   39,    0,    0,   50,    0,   55,
        0,   58,    0,    0,    0,   68,   70,    0,    0,    0,
       78,   42,    0,   84,    0,   86,    0,    0,    0,    0,
       92,    0,   96,    0,    0,  101,    0,    0,    0,    0,
      113,    0,    0,    0,  117,  118,    0,  122,    0,  141,
      141,  141,  141,  141,  141,   17,   18,  141,  141,  141,
      141,  141,  141,  141,  141,   34,  141,  141,  141,   38,
      141,   40,   39,  141,  141,   50,  141,   55,  141,   58,
      141,  141,  141,   68,   70,  141,  141,  141,   78,   42,
      141,   84,  141,   86,  141,  141,  141,  141,   92,  141,

       96,  141,  141,  101,  141,  141,  141,  141,  113,  141,
      141,  141,  117,  118,  141,  122,  141,  151,  157,  149,
      149,  149,  149,  149,  149,   17,   18,  149,  149,  149,
      149,  149,  149,  149,  149,   34,  149,  149,  149,   38,
      149,   40,   39,  149,  149,   50,  149,   55,  149,   58,
      149,  149,  149,   68,   70,  149,  149,  149,   78,   42,
      149,   84,  149,   86,  149,  149,  149,  149,   92,  149,
       96,  149,  149,  101,  149,  149,  149,  149,  113,  149,
      149,  149,  117,  118,  149,  122,  149,  163,  152,    0,
      172,  175,  175,  175,  175,  175,  175,   17,   18,  175,

      175,  175,  175,  175,  175,  175,  175,   34,  175,  175,
      175,   38,  175,   40,   39,  175,  175,   50,  175,   55,
      175,   58,  175,  175,  175,   68,   70,  175,  175,  175,
       78,   42,  175,   84,  175,   86,  175,  175,  175,  175,
       92,  175,   96,  175,  175,  101,  175,  175,  175,  175,
      113,  175,  175,  175,  117,  118,  175,  122,  175,    0,
        0,    9,    0,    0,   16,    0,    0,   25,    0,    0,
       29,    0,   33,   35,    0,   37,   43,    0,    0,    0,
       51,   52,   56,    0,    0,    0,    0,   75,    0,   80,
       85,    0,    0,   90,    0,    0,    0,    0,  102,  105,

        0,    0,  114,    0,  116,  119,    0,  124,  141,  141,
        9,  141,  141,   16,  141,  141,   25,  141,  141,   29,
      141,   33,   35,  141,   37,   43,  141,  141,  141,   51,
       52,   56,  141,  141,  141,  141,   75,  141,   80,   85,
      141,  141,   90,  141,  141,  141,  141,  102,  105,  141,
      141,  114,  141,  116,  119,  141,  124,  165,  149,  149,
        9,  149,  149,   16,  149,  149,   25,  149,  149,   29,
      149,   33,   35,  149,   37,   43,  149,  149,  149,   51,
       52,   56,  149,  149,  149,  149,   75,  149,   80,   85,
      149,  149,   90,  149,  149,  149,  149,  102,  105,  149,

      149,  114,  149,  116,  119,  149,  124,  165,  172,  172,
      175,  175,    9,  175,  175,   16,  175,  175,   25,  175,
      175,   29,  175,   33,   35,  175,   37,   43,  175,  175,
      175,   51,   52,   56,  175,  175,  175,  175,   75,  175,
       80,   85,  175,  175,   90,  175,  175,  175,  175,  102,
      105,  175,  175,  114,  175,  116,  119,  175,  124,    0,
        8,   11,   15,    0,   20,    0,    0,    0,   36,    0,
        0,   47,   57,    0,    0,   73,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,  120,  141,    8,   11,
       15,  141,   20,  141,  141,  141,   36,  141,  141,   47,

       57,  141,  141,   73,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  115,  120,  154,  149,    8,   11,   15,
      149,   20,  149,  149,  149,   36,  149,  149,   47,   57,
      149,  149,   73,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  115,  120,  160,  172,  175,    8,   11,   15,
      175,   20,  175,  175,  175,   36,  175,  175,   47,   57,
      175,  175,   73,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  115,  120,    7,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
        0,    0,    0,    7,  141,  141,  141,   28,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,   97,  141,
      141,  141,    7,  149,  149,  149,   28,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,   97,  149,  149,
      149,    7,  175,  175,  175,   28,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,   97,  175,  175,  175,
       19,    0,    0,    0,    0,    0,   45,   59,    0,   77,
       88,    0,   91,   95,    0,  110,  112,   19,  141,  141,
      141,  141,  141,   45,   59,  141,   77,   88,  141,   91,
       95,  141,  110,  112,   19,  149,  149,  149,  149,  149,
       45,   59,  149,   77,   88,  149,   91,   95,  149,  110,

      112,   19,  175,  175,  175,  175,  175,   45,   59,  175,
       77,   88,  175,   91,   95,  175,  110,  112,    0,    0,
       26,    0,    0,   64,    0,  100,  141,  141,   26,  141,
      141,   64,  141,  100,  149,  149,   26,  149,  149,   64,
      149,  100,  175,  175,   26,  175,  175,   64,  175,  100,
        0,    0,    0,   44,    0,  141,  141,  141,   44,  141,
      149,  149,  149,   44,  149,  175,  175,  175,   44,  175,
       21,   22,   30,   89,   21,   22,   30,   89,   21,   22,
       30,   89,   21,   22,   30,   89,    0,  141,  149,  175,
        0,  141,  149,  175,    0,  141,  149,  175,    0,  141,

      149,  175,   23,   23,   23,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2117] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  824, 4652,  359, 4652,  785, 4652, 4652, 4652,
     4652,  346,  341, 4652,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  441,  437,  448,
      474,  494,  455,  482,  367,  468,  724, 4652, 4652,  475,
      540,  555,  539,  554,  555,  566,  600,  608,  389,  415,
      592,  437,    0,  655,  553,  624,  657,  664,  671,  682,
      704,  705,  473,  502, 4652, 4652, 4652,    0,  735,  744,
      733,  755,  776,  799,  816,  806,  479,  499,  803,  492,
        0,  853,  556,  851,  864,  872,  903,  905,  764,  747,

      512,  658,  935,  967,  527,    0,  393,    0,  777, 4652,
        0,    0,    0,    0,  375, 4652,  760,    0,  415,  791,
      962,  963,  974, 1008, 1016,  550,  577,  971,  598, 1038,
      716, 1049, 1067,  875, 1085, 1086, 1066,  954,  617,  908,
     4652,  716,    0,  444, 4652,  791, 4652, 4652, 4652, 4652,
     4652, 4652,  609,  899,  625,  626,  656,  641,  667,  699,
      772, 4652,  812, 1112,  830, 1020,  843, 1125,  846,  900,
      917,  938,  962,  973,  989, 1033, 1003, 1109, 1011, 1110,
     1014, 1036, 1065, 1061, 1091, 1126, 4652, 1122, 1136, 1141,
     1148, 1124, 1128, 1127, 1129, 1160, 1156, 1146, 1173, 1170,

     1179, 1177, 1166, 1184, 1173, 1177, 1195, 1183, 1198, 1191,
     1190, 1185, 1221, 1192, 1188, 1194, 1205, 1232, 1196, 1238,
     1215, 1212, 1226, 1217, 1238, 4652, 1290, 1296, 1305, 1314,
        0,    0, 1231, 1261, 1260, 1257, 1300, 1285, 1297, 1297,
     1298,    0, 1295, 1304, 1303, 1308, 1299, 1308, 1304, 1307,
     1310, 1312, 1329, 1332, 1331, 1335, 1325, 1341, 1346, 1351,
     1353, 1358, 1356, 1350, 1368, 1361,    0, 1367, 1370, 1377,
     1373, 1365, 1367, 1371, 1373, 1391, 1387, 1390, 1411, 1407,
     1417, 1418, 1407, 1423, 1411, 1412, 1431, 1419, 1434, 1427,
     1426, 1421, 1431, 1428, 1424, 1431, 1440, 1447, 1426, 1473,

     1450, 1460, 1467, 1472, 1472,    0, 1502, 1530, 1261, 1507,
     1537, 1545,    0, 1475, 1523, 1485, 1483, 1502, 1523, 1530,
     1530, 1531,    0, 1528, 1537, 1536, 1539, 1533, 1547, 1535,
     1534, 1541, 1543, 1559, 1561, 1560, 1593, 1556, 1586, 1555,
     1588, 1570, 1589, 1588, 1583, 1601, 1596,    0, 1599, 1602,
     1611, 1600, 1604, 1599, 1606, 1602, 1623, 1645, 1616, 1650,
     1646, 1655, 1652, 1641, 1657, 1645, 1646, 1664, 1652, 1667,
     1660, 1661, 1653, 1666, 1661, 1657, 1663, 1672, 1696, 1658,
     1708, 1707, 1703, 1702, 1711, 1704, 1739, 1733, 1762, 1766,
     1777, 1786, 1770, 1797,    0,  658,    0, 1808,    0,    0,

        0,    0,    0,    0, 1710, 1773, 1780, 1777, 1784, 1774,
     1781, 1782, 1784,    0, 1781, 1789, 1788, 1796, 1785, 1803,
     1788, 1797, 1800, 1801, 1817, 1822, 1828, 1849, 1825, 1841,
     1825, 1843, 1826, 1830, 1830, 1834, 1851, 1853,    0, 1851,
     1856, 1877, 1866, 1850, 1856, 1851, 1848, 1895, 1891, 1879,
     1889, 1891, 1906, 1903, 1893, 1909, 1898, 1899, 1917, 1905,
     1920, 1918, 1914, 1912, 1921, 1918, 1916, 1922, 1931, 1944,
     1917, 1966, 1949, 1947, 1961, 1953, 1960,    0,  788, 4652,
     4652, 4652, 4652, 4652, 4652, 1950, 1946, 1970, 1970, 1964,
     1976, 1971, 1971, 1974, 1970, 1986, 1974, 1988, 1989, 1976,

     1996, 1987, 2009, 1997, 2010, 4652, 2015, 2001, 2021, 2008,
     2010, 2010, 2012, 2031, 2022, 2012, 2024, 2026, 2018, 2032,
     4652, 2037, 2041, 2074, 2033, 4652, 2029, 2047, 2032, 2048,
     2045, 2050, 2062, 4652, 4652, 2051, 2072, 4652,  734, 2062,
     2065, 2065, 2060, 2082, 2083, 2085, 2073, 2072, 2090, 2088,
     2093, 2093, 2085, 2077, 2091, 2093, 2104, 2098, 2104, 4652,
     2105, 2102, 4652, 2098, 2096, 2125, 2126, 2120, 2128, 2123,
     2141, 2132, 2126, 2145, 2135, 2146, 2143, 2175, 2191, 2199,
     2162, 2205,    0,    0,    0,    0,    0,    0, 2150, 2150,
     2180, 2186, 2183, 2196, 2191, 2191, 2191, 2187, 2202, 2190,

     2204, 2206, 2193, 2210, 2194, 2213, 2201, 2214,    0, 2219,
     2203, 2217, 2204, 2207, 2207, 2209, 2230, 2227, 2223, 2240,
     2242, 2238, 2252,    0, 2257, 2258, 2269, 2251,    0, 2246,
     2263, 2249, 2265, 2262, 2265, 2270,    0,    0, 2255, 2276,
        0,  716, 2266, 2267, 2261, 2256, 2280, 2281, 2282, 2271,
     2273, 2294, 2297, 2308, 2310, 2300, 2298, 2312, 2311, 2306,
     2315, 2322,    0, 2323, 2320,    0, 2316, 2312, 2327, 2330,
     2321, 2322, 2324, 2341, 2329, 2323, 2342, 2333, 2351, 2354,
     2393, 2400, 2404, 2408, 2416, 2423, 2427, 2431,    0,    0,
        0,    0,    0, 2367, 2382, 2426, 2427, 2418, 2426, 2420,

     2420, 2421, 2417, 2432, 2420, 2434, 2435, 2422, 2440, 2424,
     2443, 2430, 2443,    0, 2448, 2432, 2475, 2433, 2434, 2434,
     2436, 2462, 2459, 2462, 2473, 2476, 2468, 2481,    0, 2486,
     2488, 2506, 2480,    0, 2475, 2492, 2477, 2493, 2490, 2495,
     2500,    0,    0, 2483, 2504,    0,  706, 2494, 2495, 2489,
     2485, 2507, 2508, 2524, 2512, 2518, 2540, 2537, 2542, 2540,
     2534, 2527, 2541, 2540, 2534, 2545, 2550,    0, 2551, 2548,
        0, 2546, 2542, 2558, 2559, 2550, 2551, 2555, 2569, 2557,
     2558, 2584, 2587, 2584, 2583, 2617, 2629, 2633, 2647, 2651,
     2658, 2662, 2666, 2684, 2676, 2688, 2708,    0,    0,    0,

        0,    0,    0, 2591, 2580, 2603, 2605, 2607, 2667, 2653,
     2660, 2660, 2665, 2684, 2672, 2686, 2690, 2677, 2694, 2678,
     2697, 2683, 2700,    0, 2706, 2691, 2705, 2692, 2693, 2694,
     2696, 2720, 2710, 2700, 2717, 2719, 2711, 2724,    0, 2732,
     2737, 2750, 2733,    0, 2728, 2745, 2733, 2749, 2747, 2750,
     2755,    0,    0, 2742, 2763,    0,  695, 2755, 2756, 2750,
     2745, 2767, 2768, 2769, 2757, 2759, 2777, 2774, 2785, 2784,
     2777, 2769, 2792, 2793, 2787, 2798, 2806,    0, 2807, 2804,
        0, 2800, 2797, 2816, 2817, 2808, 2810, 2812, 2827, 2816,
     2810, 2829, 2819, 2834, 2831, 2821, 2841, 2829, 4652, 2843,

     4652, 4652, 2848, 2844, 2838, 2844,  690, 2859, 4652, 2845,
     2864, 4652, 2861, 2859, 2860, 4652, 2858, 2854, 2864, 2860,
     2863, 2879, 2880, 2866, 2868, 2874, 2889, 4652, 4652, 2875,
     2881, 2878, 2879,  690, 2898, 4652, 4652,  655, 4652, 4652,
     4652, 2882, 4652, 2896, 2888, 2888, 2889, 2916, 2903, 2918,
     4652, 2909, 2910, 2911, 4652, 2921, 2927, 2924, 2933, 2934,
     4652, 4652, 2923, 2922, 2941, 4652, 2930, 2933, 2944, 4652,
     2934, 4652, 4652, 2930, 4652, 2932, 2940, 2934, 2945, 2942,
     2956, 2959, 2957, 4652, 2964, 2959, 4652, 2993, 3007, 3012,
     3016, 2967, 2990, 2978,    0, 2992,    0,    0, 3011, 3004,

     2994, 2996,  609, 3011,    0, 2997, 3013,    0, 3011, 3009,
     3010,    0, 3007, 3002, 3012, 3008, 3010, 3026, 3027, 3013,
     3014, 3020, 3035,    0,    0, 3021, 3024, 3021, 3022,  637,
     3063,    0,    0,  599,    0,    0,    0, 3028,    0, 3045,
     3036, 3036, 3049, 3067, 3054, 3069,    0, 3057, 3058, 3060,
        0, 3070, 3075, 3072, 3081, 3082,    0,    0, 3070, 3069,
     3088,    0, 3077, 3079, 3090,    0, 3080,    0,    0, 3076,
        0, 3075, 3083, 3077, 3091, 3091, 3105, 3108, 3120,    0,
     3124, 3115,    0, 3139, 3144, 3151, 3155, 3160, 3168, 3133,
     3159, 3148,    0, 3162,    0,    0, 3167, 3160, 3150, 3152,

      588, 3167,    0, 3153, 3169,    0, 3166, 3164, 3165,    0,
     3162, 3154, 3164, 3160, 3162, 3178, 3179, 3166, 3167, 3173,
     3188,    0,    0, 3174, 3177, 3174, 3196,  621, 3215,    0,
        0,  549,    0,    0,    0, 3203,    0, 3216, 3207, 3207,
     3205, 3223, 3210, 3225,    0, 3213, 3214, 3216,    0, 3226,
     3231, 3224, 3233, 3234,    0,    0, 3222, 3221, 3240,    0,
     3230, 3232, 3243,    0, 3233,    0,    0, 3229,    0, 3228,
     3236, 3251, 3265, 3261, 3275, 3278, 3276,    0, 3280, 3271,
        0, 3295, 3299, 3303, 3310, 3327, 3331, 3335, 3353, 3283,
     3302, 3290,    0, 3328,    0,    0, 3333, 3329, 3319, 3321,

      544, 3336,    0, 3322, 3338,    0, 3335, 3337, 3338,    0,
     3335, 3327, 3337, 3333, 3335, 3351, 3352, 3338, 3339, 3345,
     3363,    0,    0, 3349, 3352, 3356, 3357,  558, 3383,    0,
        0,  513,    0,    0,    0, 3356,    0, 3369, 3373, 3373,
     3374, 3392, 3379, 3394,    0, 3382, 3384, 3389,    0, 3399,
     3404, 3397, 3406, 3407,    0,    0, 3395, 3394, 3413,    0,
     3402, 3404, 3415,    0, 3408,    0,    0, 3404,    0, 3403,
     3418, 3412, 3419, 3415, 3441, 3444, 3442,    0, 3449, 3440,
        0, 3455, 3452, 3433, 3458, 3440, 3445, 4652, 4652, 3462,
     3453, 3463,  509, 3455, 3465, 3456, 3467, 4652, 3453, 3470,

     3456, 4652, 3458,  496, 4652, 3457, 3463, 3463, 3483, 4652,
     3471, 4652, 3487, 3474, 3484, 4652, 4652, 3506, 3503, 3511,
     4652, 4652, 3493, 4652, 3495, 4652, 3495, 3502, 3516, 3514,
     4652, 3504, 4652, 3523, 3504, 4652, 3506, 3520, 3508, 3515,
     4652, 3525, 3508, 3527, 4652, 3514, 3533, 4652, 3515, 3538,
     3535, 3523, 3548, 3530, 3531,    0,    0, 3560, 3551, 3561,
      489, 3556, 3566, 3557, 3568,    0, 3554, 3571, 3557,    0,
     3563,  488,    0, 3559, 3565, 3565, 3578,    0, 3566,    0,
     3582, 3569, 3567,    0,    0, 3589, 3586, 3591,    0,    0,
     3576,    0, 3578,    0, 3578, 3592, 3606, 3604,    0, 3590,

        0, 3621, 3602,    0, 3604, 3621, 3609, 3616,    0, 3626,
     3609, 3628,    0, 3615, 3638,    0, 3617,  797, 3649, 3644,
     3641, 3622, 3647, 3629, 3630,    0,    0, 3650, 3641, 3651,
      437, 3650, 3660, 3651, 3662,    0, 3650, 3667, 3653,    0,
     3655,  419,    0, 3657, 3663, 3663, 3679,    0, 3667,    0,
     3683, 3670, 3668,    0,    0, 3690, 3687, 3696,    0,    0,
     3678,    0, 3684,    0, 3684, 3691, 3705, 3703,    0, 3689,
        0, 3711, 3692,    0, 3694, 3715, 3703, 3710,    0, 3720,
     3705, 3724,    0, 3711, 3730,    0, 3715, 3752,  907, 3769,
     3776, 3747, 3744, 3725, 3754, 3736, 3745,    0,    0, 3762,

     3758, 3768,  402, 3760, 3770, 3761, 3775,    0, 3761, 3778,
     3764,    0, 3768,  398,    0, 3764, 3770, 3770, 3783,    0,
     3771,    0, 3787, 3774, 3774,    0,    0, 3796, 3793, 3798,
        0,    0, 3780,    0, 3787,    0, 3787, 3794, 3812, 3810,
        0, 3804,    0, 3823, 3809,    0, 3811, 3825, 3813, 3820,
        0, 3833, 3816, 3835,    0, 3822, 3843,    0, 3822, 3828,
     3833, 4652, 3834, 3844, 4652, 3841, 3831, 4652, 3836, 3852,
     4652, 3840, 4652, 4652, 3852, 4652, 4652, 3836, 3855, 3861,
     4652, 4652, 4652, 3848, 3866, 3871, 3869, 4652, 3870, 4652,
     4652, 3879, 3869, 4652, 3881, 3882, 3889, 3883, 4652, 4652,

     3896, 3894, 4652, 3885, 4652, 4652, 3884, 4652, 3885, 3890,
        0, 3891, 3901,    0, 3898, 3888,    0, 3891, 3909,    0,
     3897,    0,    0, 3909,    0,    0, 3893, 3907, 3918,    0,
        0,    0, 3905, 3919, 3928, 3918,    0, 3927,    0,    0,
     3931, 3926,    0, 3938, 3939, 3946, 3937,    0,    0, 3953,
     3951,    0, 3942,    0,    0, 3939,    0, 3968, 3946, 3951,
        0, 3952, 3962,    0, 3961, 3951,    0, 3954, 3970,    0,
     3958,    0,    0, 3975,    0,    0, 3959, 3973, 3983,    0,
        0,    0, 3970, 3984, 3989, 3979,    0, 3980,    0,    0,
     3988, 3978,    0, 3995, 3996, 4003, 3994,    0,    0, 4007,

     4008,    0, 3999,    0,    0, 3996,    0, 4030, 4036, 4052,
     4014, 4024,    0, 4025, 4035,    0, 4039, 4029,    0, 4032,
     4048,    0, 4036,    0,    0, 4048,    0,    0, 4032, 4046,
     4052,    0,    0,    0, 4039, 4053, 4058, 4048,    0, 4050,
        0,    0, 4054, 4044,    0, 4056, 4057, 4067, 4058,    0,
        0, 4071, 4069,    0, 4060,    0,    0, 4057,    0, 4072,
     4652, 4652, 4652, 4071,  374, 4095, 4077, 4078, 4652, 4105,
     4093, 4652, 4652, 4105, 4097, 4652, 4089, 4096,  342, 4098,
     4091, 4103, 4113, 4103, 4112, 4652, 4652, 4114,    0,    0,
        0, 4101,  338, 4120, 4102, 4103,    0, 4123, 4114,    0,

        0, 4126, 4118,    0, 4110, 4117,  332, 4119, 4112, 4137,
     4152, 4142, 4151,    0,    0, 4172, 4164,    0,    0,    0,
     4150,  315, 4169, 4151, 4152,    0, 4172, 4160,    0,    0,
     4172, 4164,    0, 4157, 4164,  218, 4166, 4159, 4171, 4184,
     4174, 4183,    0,    0, 4197, 4201, 4202,    0,    0,    0,
     4193,  211, 4212, 4194, 4198,    0, 4218, 4206,    0,    0,
     4218, 4210,    0, 4202, 4209,  204, 4211, 4204, 4216, 4226,
     4216, 4225,    0,    0, 4652, 4211, 4241, 4219, 4652, 4225,
     4224, 4230, 4218, 4218, 4235, 4230, 4228, 4257, 4265, 4652,
     4266, 4256, 4272,    0, 4257, 4274, 4265,    0, 4271, 4269,

     4275, 4263, 4263, 4280, 4272, 4269, 4281, 4284,    0, 4286,
     4276, 4291,    0, 4276, 4299, 4283,    0, 4289, 4290, 4297,
     4302, 4307, 4324, 4316, 4316, 4328, 4331,    0, 4332, 4322,
     4335,    0, 4320, 4340, 4327,    0, 4333, 4331, 4338, 4326,
     4326, 4344, 4336, 4334, 4346, 4349,    0, 4350, 4340, 4357,
     4652, 4361, 4368, 4369, 4371, 4366, 4652, 4652, 4383, 4652,
     4652, 4391, 4652, 4652, 4375, 4652, 4652,    0, 4393, 4386,
     4385, 4382, 4377,    0,    0, 4394,    0,    0, 4399,    0,
        0, 4383,    0,    0,    0, 4401, 4394, 4393, 4390, 4386,
        0,    0, 4403,    0,    0, 4409,    0,    0, 4393,    0,

        0,    0, 4411, 4404, 4403, 4403, 4398,    0,    0, 4415,
        0,    0, 4434,    0,    0, 4420,    0,    0, 4424, 4432,
     4652, 4432, 4445, 4652, 4437, 4652, 4432, 4440,    0, 4440,
     4450,    0, 4442,    0, 4437, 4445,    0, 4445, 4455,    0,
     4447,    0, 4442, 4450,    0, 4451, 4461,    0, 4454,    0,
     4464, 4465, 4452, 4652, 4461, 4471, 4472, 4459,    0, 4482,
     4491, 4497, 4484,    0, 4493, 4503, 4504, 4491,    0, 4500,
     4652, 4493, 4652, 4652,    0, 4494,    0,    0,    0, 4495,
        0,    0,    0, 4496,    0,    0, 4496, 4497, 4498, 4499,
     4519, 4520, 4522, 4523, 4513, 4514, 4515, 4516, 4514, 4518,

     4519, 4520, 4652,    0,    0,    0, 4652, 4586, 4592, 4597,
     4606, 4615, 4624,  245, 4633, 4642
    } ;

static const flex_int16_t yy_def[2117] =
    {   0,
     2107,    1, 2107,    3, 2107,    5,    5,    5,    5,    5,
     2107,   11, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2107, 2107, 2107, 2109, 2109, 2109,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2110, 2109, 2109, 2111, 2112, 2112, 2112, 2112, 2107,
     2112, 2112, 2112, 2112, 2112, 2107, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2107, 2112, 2112, 2107, 2107, 2113, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2114, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2109, 2109, 2109, 2109, 2109,
     2109, 2109, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2109, 2109, 2109, 2109,
     2109, 2109, 2111, 2111, 2112, 2112, 2112, 2115, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2113, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2114, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2107, 2109, 2109, 2109, 2109, 2109, 2107, 2109, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2107, 2109, 2109, 2109, 2109,
     2109, 2107, 2109, 2111, 2107, 2111, 2115, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2107, 2109, 2107, 2109, 2109, 2107, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2107, 2107, 2109, 2109, 2109, 2107, 2116, 2111, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2109, 2107, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2107, 2109, 2116,
     2116, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2109, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2109, 2116, 2116,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2109, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2109, 2116, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2108, 2108, 2108, 2108, 2108, 2108, 2108,

     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,

     2110, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2107, 2107, 2107, 2107, 2107, 2108, 2108, 2108, 2108, 2108,
     2110, 2110, 2110, 2110, 2110, 2112, 2112, 2112, 2112, 2112,
     2107, 2107, 2107, 2107, 2108, 2108, 2108, 2108, 2110, 2110,
     2110, 2110, 2112, 2112, 2112, 2112, 2107, 2108, 2110, 2112,
     2107, 2108, 2110, 2112, 2107, 2108, 2110, 2112, 2107, 2108,

     2110, 2112, 2107, 2108, 2110, 2112,    0, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107
    } ;

static const flex_int16_t yy_nxt[4736] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      583,   78,  104,  104,  104,  104,  103, 1944,   78,  104,
      104,  104,  104,   19, 1934,   19,  105,  105,  105,  105,
       19, 1925,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1915,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1906,  164,  161,  170,  165,
      398, 1896,  166,  223,  396, 1887,  144,  162,  153,  399,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  223,  172,  186,  173,  162, 1877,  178,  187,
      174,  179,  263,  175,  180,  176,  193,  181,  403,  404,
      182,  264,  189,  171,  194,  144,  190,  144,  185,  177,
      191, 1729,  172,  186,  173, 1720,  192,  178,  187,  174,
      179,  263,  175,  180,  176,  193,  181,  195,  199,  182,
      264,  189, 1677,  194,  205,  190,  200,  268,  206,  191,
      201,  196,  202,  203,  204,  192,  197,  198,  217,  218,
     1668,  207,  227,  227,  227,  227,  195,  199,  219,  303,

      208,  224,  225,  205,  209,  200,  268,  206,  210,  201,
      196,  202,  203,  204,  211,  197,  198,  217,  218,  212,
      207,  220,  344,  221,  213,  345,  222,  219,  303,  208,
      224,  225,  349,  209,  214,  304,  305,  210,  384,  215,
      216, 1627, 1618,  211,  394,  394,  394,  394,  212, 1578,
      220,  344,  221,  213,  345,  222,  228,  229,  229,  229,
      229,  349, 1569,  214,  304,  305, 1525,  384,  215,  216,
      230,  228,  229,  229,  229,  229,  233, 1522,  234,  273,
      237,  243,  354,  235,  238,  230,  236,  274,  239,  231,
      355,  240,  247,  435,  241,  244,  248, 1500,  245,  230,

      249,  246, 1453,  436,  242,  233,  250,  234,  273,  237,
      243,  354,  235,  238,  230,  236,  274,  239,  231,  355,
      240,  247,  435,  241,  244,  248,  265,  245,  251,  249,
      246,  266,  436,  242,  257,  250,  267,  252,  440,  253,
     1450, 1428,  258,  475,  254,  259,  481,  255,  260,  256,
      275,  261, 1383,  484,  262,  265, 1380,  251,  485,  396,
      266,  144, 1358,  257,  276,  267,  252,  440,  253,  277,
      278,  258,  475,  254,  259,  481,  255,  260,  256,  275,
      261,  269,  484,  262,  486,  270,  487,  485,  279,  271,
      285,  385,  386,  276,  286,  272,  280,  288,  277,  278,

      281,  289,  282,  283,  284,  290,  488,  287, 1315, 1312,
      269,  291,  293,  486,  270,  487,  292,  279,  271,  285,
      385,  386,  294,  286,  272,  280,  288,  295,  296,  281,
      289,  282,  283,  284,  290,  488,  287,  297,  298,  489,
      291,  293,  445, 1290,  300,  292,  301,  299, 1241,  302,
      446,  294,  307,  307,  307,  307,  295,  296,  309, 1141,
      310,  311,  311,  311,  311,  308,  297,  298,  489, 1043,
      314,  445,  315,  300,  312,  301,  299,  316,  302,  446,
      317,  318,  400,  401,  402,  319,  381,  947,  382,  320,
      480,  383,  321,  480,  308,  322,  478,  378,  379,  314,

      397,  315,  324,  312,  226,  323,  316,  380,  145,  317,
      318,  309,  490, 1658,  319,  381,  325,  382,  320,  326,
      383,  321,  327, 2107,  322,  328,  378,  379,  405,  329,
      406,  324,  338,  330,  323,  407,  380,  346,  408,  331,
      339,  490,  347,  340,  332,  325,  341,  348,  326,  342,
     2107,  327,  343,  333,  328,  334,  491,  405,  329,  406,
      335,  338,  330,  336,  407,  337,  346,  408,  331,  339,
      495,  347,  340,  332, 2107,  341,  348,  356,  342,  350,
     2107,  343,  333,  351,  334,  491, 2107,  352,  498,  335,
      502,  357,  336,  353,  337,  360,  358,  359,  366,  495,

     2107,  457,  367,  361, 2107,  458,  356,  362,  350,  363,
      364,  365,  351, 2107, 2107,  368,  352,  498,  459,  502,
      357, 1708,  353,  390,  360,  358,  359,  366,  482,  369,
      457,  367,  361,  370,  458,  374,  362,  371,  363,  364,
      365,  476,  477,  372,  368,  375,  503,  459,  373,  483,
      376,  377,  387,  387,  387,  387, 2107,  482,  369, 2107,
     2107,  504,  370, 2107,  374,  388,  371, 2107, 2107, 2107,
      476,  477,  372, 2107,  375,  503, 2107,  373,  483,  376,
      377,  389,  505,  390,  391,  391,  391,  391,  409,  415,
      504,  506,  410,  472,  388,  473,  411,  392,  474,  412,

      419,  507,  413,  416,  420,  437,  417, 2107,  421,  418,
      438,  505,  414, 2107,  422,  439, 2107,  409,  415,  508,
      506,  410,  472, 2107,  473,  411,  392,  474,  412,  419,
      507,  413,  416,  420,  437,  417,  423,  421,  418,  438,
      511,  414,  429,  422,  439,  424, 2107,  425,  508, 2107,
      430,  514,  426,  431,  517,  427,  432,  428,  496,  433,
     2107,  509,  434,  497,  441,  423, 2107,  510,  442,  511,
     2107,  429,  443,  518,  424,  447,  425, 2107,  444,  430,
      514,  426,  431,  517,  427,  432,  428,  496,  433,  448,
      509,  434,  497,  441,  449,  450,  510,  442,  451,  469,

      470,  443,  518, 2107,  447,  519,  452,  444,  520,  471,
      453,  460,  454,  455,  456,  461,  465, 2107,  448,  462,
     2107, 2107,  521,  449,  450,  463,  466,  451,  469,  470,
      464,  467,  468, 2107,  519,  452, 2107,  520,  471,  453,
      460,  454,  455,  456,  461,  465,  512,  515,  462,  492,
      493,  521,  513,  516,  463,  466,  525, 2107,  494,  464,
      467,  468,  499,  532,  500,  522,  535,  528,  526,  501,
      523,  524,  529,  533,  536,  512,  515,  534,  492,  493,
      527,  513,  516,  541,  530,  525,  531,  494,  537,  539,
      540,  499,  532,  500,  522,  535,  528,  526,  501,  523,

      524,  529,  533,  536,  542,  538,  534,  543,  544,  527,
      545,  546,  541,  530,  547,  531,  548,  537,  539,  540,
      549,  550,  552,  555,  553,  551,  554,  556,  558, 2107,
      561,  562,  563,  542,  538,  564,  543,  544,  557,  545,
      546, 2107,  567,  547,  571,  548,  572,  575, 2107,  549,
      550,  552,  555,  553,  551,  554,  556,  558,  559,  561,
      562,  563,  565,  573,  564,  568,  560,  557,  584,  574,
      566,  567,  569,  571,  570,  572,  575,  576,  683,  683,
      683,  683, 2107,  577, 2107, 2107, 2107,  559,  587,  588,
      585,  565,  573, 2107,  568,  560, 2107,  584,  574,  566,

     2107,  569, 2107,  570, 2107, 2107,  576,  227,  227,  227,
      227,  586,  577,  579,  579,  579,  579,  587,  588,  585,
      578,  228,  229,  229,  229,  229,  580,  581,  589,  581,
      590,  582,  582,  582,  582,  230,  591,  592,  593,  594,
      586,  595,  596,  598,  601,  602,  599,  603,  605,  578,
      597,  600,  604,  606,  607,  580,  608,  589,  609,  590,
      610,  611,  614,  612,  230,  591,  592,  593,  594,  613,
      595,  596,  598,  601,  602,  599,  603,  605,  615,  597,
      600,  604,  606,  607,  616,  608,  617,  609,  618,  610,
      611,  614,  612,  620,  619,  621,  622,  623,  613,  624,

      625,  628,  629,  631,  635,  626,  627,  615,  632,  633,
      638,  634,  636,  616,  630,  617,  637,  618,  639,  640,
      642,  643,  620,  619,  621,  622,  623,  644,  624,  625,
      628,  629,  631,  635,  626,  627,  641,  632,  633,  638,
      634,  636,  645,  630,  646,  637,  647,  639,  640,  642,
      643,  648,  649,  650,  651,  652,  644,  653,  655,  658,
      656,  654,  657,  659,  661,  641,  664,  665,  662,  666,
      667,  645,  670,  646,  660,  647,  663,  668, 2107,  674,
      648,  649,  650,  651,  652,  669,  653,  655,  658,  656,
      654,  657,  659,  661,  675,  664,  665,  662,  666,  667,

      671,  670,  678,  660,  676,  663,  668,  672,  674,  673,
      677,  679,  689,  692,  669,  693, 2107,  680, 2107,  307,
      307,  307,  307,  675,  684,  684,  684,  684, 2107,  671,
      694,  678,  308,  676, 2107, 2107,  672,  685,  673,  677,
      679,  689,  692,  681,  693,  681,  680,  682,  682,  682,
      682,  309,  690,  310,  686,  686,  686,  686,  687,  694,
      687,  308,  688,  688,  688,  688,  685,  312,  695,  696,
      697,  698,  699,  691,  700,  701,  703,  704,  706,  710,
      711,  690,  705,  702,  707,  712,  708,  713,  714,  715,
      716,  709, 2107,  719, 2107,  722,  312,  695,  696,  697,

      698,  699,  691,  700,  701,  703,  704,  706,  710,  711,
      725,  705,  702,  707,  712,  708,  713,  714,  715,  716,
      709,  717,  719,  720,  722,  723,  726,  718,  727,  721,
      728,  724,  729,  733,  734,  730,  738,  736,  739,  725,
      731,  732,  737,  740,  741,  743,  735,  744,  742, 2107,
      717,  745,  720,  749,  723,  726,  718,  727,  721,  728,
      724,  729,  733,  734,  730,  738,  736,  739,  746,  731,
      732,  737,  740,  741,  743,  735,  744,  742,  747,  748,
      745,  750,  749,  751,  752,  753,  754,  755,  756,  757,
      758,  760,  763,  761,  759,  762,  766,  746,  764,  769,

      770,  771,  772,  767,  775, 2107, 2107,  747,  748,  765,
      750,  768,  751,  752,  753,  754,  755,  756,  757,  758,
      760,  763,  761,  759,  762,  766,  773,  764,  769,  770,
      771,  772,  767,  775,  774,  776,  779,  780,  765,  781,
      768,  783,  777,  784,  778,  782,  786,  799,  786,  785,
      787,  787,  787,  787, 2107,  773,  387,  387,  387,  387,
     2107, 2107, 2107,  774,  776,  779,  780, 2107,  781,  388,
      783,  777,  784,  778,  782, 2107,  799, 2107,  785,  788,
      788,  788,  788,  790,  790,  790,  790,  794,  794,  794,
      794,  389,  789,  390,  791,  791,  791,  791,  388,  792,

      795,  792,  800,  793,  793,  793,  793,  392,  802,  803,
      798,  479,  804,  479,  796,  796,  796,  796,  479,  805,
      806,  789,  807,  801,  808,  809,  810,  811,  813,  479,
      816,  800,  820,  479,  814,  812,  392,  802,  803,  815,
      817,  804,  818,  821,  822,  823,  824,  819,  805,  806,
      825,  807,  801,  808,  809,  810,  811,  813,  826,  816,
      479,  820,  829,  814,  812,  832,  835,  836,  815,  817,
      837,  818,  821,  822,  823,  824,  819,  827,  830,  825,
      833,  838,  839,  828,  831,  843,  834,  826,  844,  850,
      853,  829,  840,  854,  832,  835,  836,  841,  842,  837,

      845,  851,  848,  846,  849,  852,  827,  830,  847,  833,
      838,  839,  828,  831,  843,  834,  859,  844,  850,  853,
      860,  840,  854,  855,  857,  858,  841,  842,  861,  845,
      851,  848,  846,  849,  852,  862,  863,  847,  864,  865,
      856,  866,  867,  868,  870,  859,  871,  869,  872,  860,
      873,  874,  855,  857,  858,  876,  879,  861,  877,  880,
      881,  882,  875,  885,  862,  863,  878,  864,  865,  856,
      866,  867,  868,  870,  883,  871,  869,  872,  889,  873,
      874,  890,  884,  893,  876,  879,  896,  877,  880,  881,
      882,  875,  885,  886,  897,  878,  898,  899,  891,  894,

      887,  900,  888,  883,  892,  895,  901,  889,  903,  904,
      890,  884,  893,  905,  906,  896,  907,  908,  909,  910,
      911,  902,  886,  897,  912,  898,  899,  891,  894,  887,
      900,  888,  913,  892,  895,  901,  914,  903,  904,  915,
      916,  917,  905,  906,  918,  907,  908,  909,  910,  911,
      902,  919,  921,  912,  922,  923,  924,  925,  920,  926,
      927,  913,  928,  929,  930,  914,  931,  932,  915,  916,
      917,  933,  937,  918,  938, 2107,  939,  940,  941,  942,
      919,  921,  943,  922,  923,  924,  925,  920,  926,  927,
      944,  928,  929,  930,  934,  931,  932,  945,  946,  948,

      933,  937,  949,  938,  935,  939,  940,  941,  942,  950,
      951,  943,  952,  953,  936,  954,  955,  956,  957,  944,
      958,  959,  962,  963,  964,  960,  945,  946,  948,  961,
      965,  949,  968,  935,  969,  970,  971,  972,  950,  951,
      973,  952,  953,  936,  954,  955,  956,  957,  966,  958,
      959,  962,  963,  964,  960,  974,  975,  967,  961,  965,
      976,  968,  979,  969,  970,  971,  972,  980,  977,  973,
      978,  981,  982,  983,  984,  986,  987,  966,  985,  582,
      582,  582,  582, 2107,  974,  975,  992, 2107,  988,  976,
      988,  979,  989,  989,  989,  989,  980,  977,  993,  978,

      981,  982,  983,  984,  986,  987,  994,  985,  579,  579,
      579,  579,  990,  995,  990,  992,  991,  991,  991,  991,
      996,  580,  582,  582,  582,  582,  997,  993,  999, 1000,
     1001, 1002, 1003, 1004, 1005,  994, 1006, 1007, 1008, 1009,
     1010,  998,  995, 1011, 1012, 1013, 1014, 1015, 1017,  996,
      580, 1018, 1019, 1020, 1016,  997, 1021,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1022, 1006, 1007, 1008, 1009, 1010,
      998, 1023, 1011, 1012, 1013, 1014, 1015, 1017, 1024, 1025,
     1018, 1019, 1020, 1016, 1026, 1021, 1027, 1028, 1029, 1030,
     1033, 1034, 1035, 1022, 1036, 1037, 1038, 1039, 1040, 1031,

     1023, 1041, 1042, 1044, 1045, 1046, 1047, 1024, 1025, 1032,
     1048, 1049, 1050, 1026, 1051, 1027, 1028, 1029, 1052, 1033,
     1034, 1035, 1053, 1036, 1037, 1038, 1039, 1040, 1031, 1054,
     1041, 1042, 1044, 1045, 1046, 1047, 1055, 1058, 1032, 1048,
     1049, 1050, 1056, 1051, 1059, 1060, 1057, 1052, 1061, 1064,
     1062, 1053, 1065, 1066, 1067, 1068, 1069, 1070, 1054, 1063,
     1071, 1072, 1073, 1075, 1074, 1055, 1058, 1076, 1077, 1078,
     1079, 1056, 1080, 1059, 1060, 1057, 1081, 1061, 1064, 1062,
     1082, 1065, 1066, 1067, 1068, 1069, 1070, 1083, 2107, 1071,
     1072, 1073, 1075, 1074, 2107, 2107, 1076, 1077, 1078, 1079,

     2107, 1080, 2107, 1090, 2107, 1081, 2107, 2107, 2107, 1082,
     1084, 1084, 1084, 1084, 2107, 2107, 1083,  682,  682,  682,
      682, 1085, 1085, 1085, 1085,  684,  684,  684,  684, 1086,
     1091, 1086, 1090, 1087, 1087, 1087, 1087,  309,  685,  310,
     1088, 1088, 1088, 1088, 1089, 1089, 1089, 1089,  688,  688,
      688,  688, 1092,  312, 1093, 1094, 1095, 1097, 1098, 1091,
     1099, 1100, 1101, 1102, 1103, 1104, 1105,  685, 1106, 1107,
     1108, 1096, 1109, 1110, 1111, 1112, 2107, 1115, 1116, 1117,
     1118, 1092,  312, 1093, 1094, 1095, 1097, 1098, 1119, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1120, 1106, 1107, 1108,

     1096, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118,
     1121, 1122, 1114, 1123, 1124, 1125, 1126, 1119, 1127, 1131,
     1132, 1133, 1134, 1135, 1136, 1120, 1128, 1137, 1138, 1139,
     1140, 1142, 1143, 1144, 1113, 1145, 1129, 1146, 1147, 1121,
     1122, 1114, 1123, 1124, 1125, 1126, 1130, 1127, 1131, 1132,
     1133, 1134, 1135, 1136, 1148, 1149, 1137, 1138, 1139, 1140,
     1142, 1143, 1144, 1150, 1145, 1129, 1146, 1147, 1151, 1152,
     1153, 1156, 1154, 1157, 1158, 1130, 1155, 1159, 1160, 1162,
     1163, 1164, 1165, 1148, 1149, 1166, 1167, 1161, 1168, 1169,
     1170, 1171, 1150, 1172, 1173, 1174, 1175, 1151, 1152, 1153,

     1156, 1154, 1157, 1158, 1176, 1155, 1159, 1160, 1162, 1163,
     1164, 1165, 1177, 1180, 1166, 1167, 1181, 1168, 1169, 1170,
     1171, 2107, 1172, 1173, 1174, 1175, 1178, 1190, 1191, 1192,
     1179, 2107, 1193, 1176, 1182, 1182, 1182, 1182, 2107, 2107,
     2107, 1177, 1180, 2107, 1194, 1181,  787,  787,  787,  787,
      788,  788,  788,  788, 2107, 1178, 1190, 1191, 1192, 1179,
     1183, 1193, 1183,  789, 1184, 1184, 1184, 1184, 1185, 1185,
     1185, 1185,  389, 1194,  390, 1186, 1186, 1186, 1186, 1187,
     1187, 1187, 1187,  793,  793,  793,  793,  795,  392, 2107,
     1197,  795,  789, 1188, 1188, 1188, 1188, 1195, 1198, 1199,

     2107,  794,  794,  794,  794, 1189, 1189, 1189, 1189, 1200,
      798,  479, 1196,  479, 1201, 1202, 1203,  392,  479, 1197,
     1204, 1205, 1206, 1207, 1208, 1209, 1195, 1198, 1199,  479,
     1210, 2107, 1211,  479, 1212, 1213, 1215, 1216, 1200, 1217,
     1218, 1196, 1214, 1201, 1202, 1203, 1219, 1220, 1221, 1204,
     1205, 1206, 1207, 1208, 1209, 1222, 1223, 1224, 1225, 1210,
      479, 1211, 1226, 1212, 1213, 1215, 1216, 1227, 1217, 1218,
     1228, 1214, 1231, 1232, 1233, 1219, 1220, 1221, 1234, 1235,
     1229, 1236, 1237, 1238, 1222, 1223, 1224, 1225, 1239, 1240,
     1230, 1226, 1242, 1243, 1244, 1245, 1227, 1246, 1247, 1248,

     1249, 1231, 1232, 1233, 1250, 1251, 1252, 1234, 1235, 1229,
     1236, 1237, 1238, 1253, 1256, 1257, 1254, 1239, 1240, 1230,
     1255, 1242, 1243, 1244, 1245, 1258, 1246, 1247, 1248, 1249,
     1259, 1260, 1262, 1250, 1251, 1252, 1263, 1264, 1265, 1266,
     1261, 1267, 1253, 1256, 1257, 1254, 1268, 1269, 1270, 1255,
     1271, 1273, 1272, 1274, 1258, 1275, 1276, 1277, 1278, 1259,
     1260, 1262, 1279, 1280, 1281, 1263, 1264, 1265, 1266, 1282,
     1267, 1283, 1284, 1285, 1286, 1268, 1269, 1270, 1287, 1271,
     1273, 1272, 1274, 1288, 1275, 1276, 1277, 1278, 1289, 1291,
     1292, 1279, 1280, 1281, 1293, 1294, 1295, 1296, 1282, 1297,

     1283, 1284, 1285, 1286, 1298, 1299, 1300, 1287, 1301, 1302,
     1303, 1304, 1288, 1305, 1306, 1307, 1308, 1289, 1291, 1292,
     1309, 1310, 1311, 1293, 1294, 1295, 1296, 1316, 1297, 1317,
     1313, 1318, 1319, 1298, 1299, 1300, 1320, 1301, 1302, 1303,
     1304, 1314, 1305, 1306, 1307, 1308, 1321, 1322, 1323, 1309,
     1310, 1311, 1324, 1325, 1326, 1327, 1316, 1328, 1317, 1313,
     1318, 1319, 1329, 1330, 1331, 1320, 1332, 1333, 1334, 1335,
     1314, 1336, 1337, 1338, 1339, 1321, 1322, 1323, 1340, 1341,
     1342, 1324, 1325, 1326, 1327, 1343, 1328, 1344, 1345, 1346,
     1347, 1329, 1330, 1331, 1348, 1332, 1333, 1334, 1335, 1349,

     1336, 1337, 1338, 1339, 2107, 2107, 2107, 1340, 1341, 1342,
      989,  989,  989,  989, 1343, 1350, 1344, 1345, 1346, 1347,
     1351, 1352, 1353, 1348,  989,  989,  989,  989, 1349,  991,
      991,  991,  991,  991,  991,  991,  991, 1354, 1355, 1356,
     1357, 1359, 1360, 1361, 1350, 1362, 1363, 1364, 1365, 1351,
     1352, 1353, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1354, 1355, 1356, 1357,
     1359, 1360, 1361, 1384, 1362, 1363, 1364, 1365, 1385, 1386,
     1387, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1381, 1388, 1389, 1390, 1391,

     1392, 1393, 1384, 1394, 1395, 1396, 1382, 1385, 1386, 1387,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1381, 1388, 1389, 1390, 1391, 1392,
     1393, 1411, 1394, 1395, 1396, 1382, 1412, 1413, 1414, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1410, 1415, 1416, 1417, 1084, 1084, 1084, 1084,
     1411, 1418, 1418, 1418, 1418, 1412, 1413, 1414, 1419, 1419,
     1419, 1419, 1087, 1087, 1087, 1087,  310, 1088, 1088, 1088,
     1088, 1420, 1415, 1416, 1417, 1089, 1089, 1089, 1089, 1421,
      312, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431,

     1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1420, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1421,  312,
     1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1449,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1451, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1452, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1449, 1473,
     1474, 1475, 1476, 1477, 1478, 1479, 1451, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1452, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1480, 1473, 1474,

     1475, 1476, 1477, 1478, 1479, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1182, 1182, 1182, 1182, 1488, 1488, 1488, 1488,
     1184, 1184, 1184, 1184, 2107, 2107, 1480, 1489, 1489, 1489,
     1489, 1492, 1493, 1494, 1481, 1482, 1483, 1484, 1485, 1486,
     1487,  389, 2107, 2107, 1186, 1186, 1186, 1186, 1187, 1187,
     1187, 1187, 1491, 1491, 1491, 1491,  795,  392, 1495, 1496,
     1492, 1493, 1494, 1497, 1498, 1499, 1501, 1502, 1503, 1504,
      794,  794,  794,  794, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516,  392, 1495, 1496, 1517,
     1518, 1519, 1497, 1498, 1499, 1501, 1502, 1503, 1504, 1520,

     1521, 1526, 1527, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
     1512, 1513, 1514, 1515, 1516, 1523, 1528, 1529, 1517, 1518,
     1519, 1530, 1531, 1532, 1533, 1534, 1524, 1535, 1520, 1521,
     1526, 1527, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1523, 1528, 1529, 1548, 1549, 1550,
     1530, 1531, 1532, 1533, 1534, 1524, 1535, 1551, 1552, 1553,
     1554, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1555, 1556, 1557, 1548, 1549, 1550, 1558,
     1559, 1560, 1561, 1562, 1563, 1564, 1551, 1552, 1553, 1554,
     1565, 1566, 1567, 1568, 1570, 1571, 1572, 1573, 1574, 1575,

     1576, 1577, 1555, 1556, 1557, 1579, 1580, 1581, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1582, 1583, 1584, 1585, 1565,
     1566, 1567, 1568, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
     1577, 1586, 1587, 1588, 1579, 1580, 1581, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1582, 1583, 1584, 1585, 1596, 1597,
     1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
     1586, 1587, 1588, 1608, 1609, 1610, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1611, 1612, 1613, 1614, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1615,
     1616, 1617, 1608, 1609, 1610, 1619, 1620, 1621, 1622, 1623,

     1624, 1625, 1611, 1612, 1613, 1614, 1626, 1628, 1629, 1630,
     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1615, 1616,
     1617, 1639, 1640, 1641, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1642, 1643, 1644, 1645, 1626, 1628, 1629, 1630, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1638, 1646, 1647, 1648,
     1639, 1640, 1641, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
     1642, 1643, 1644, 1645, 1656, 1657, 1419, 1419, 1419, 1419,
     1659, 1660, 1661, 1662, 1663, 1664, 1646, 1647, 1648, 1665,
     1666, 1667, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1669,
     1670, 1671, 1672, 1656, 1657, 1673, 1674, 1675, 1676, 1659,

     1660, 1661, 1662, 1663, 1664, 1678, 1679, 1680, 1665, 1666,
     1667, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1669, 1670,
     1671, 1672, 1688, 1689, 1673, 1674, 1675, 1676, 1690, 1691,
     1692, 1693, 1694, 1695, 1678, 1679, 1680, 1696, 1697, 1698,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1699, 1700, 1701,
     1702, 1688, 1689, 1703, 1704, 1705, 1706, 1690, 1691, 1692,
     1693, 1694, 1695, 1707, 2107, 2107, 1696, 1697, 1698, 1488,
     1488, 1488, 1488, 1711, 1712, 1713, 1699, 1700, 1701, 1702,
     1714, 1715, 1703, 1704, 1705, 1706, 1709, 1709, 1709, 1709,
     1716, 1717, 1707, 1710, 1710, 1710, 1710, 1718, 1719, 1721,

     1722, 1723, 1711, 1712, 1713, 1724, 1725, 1726, 1727, 1714,
     1715, 1728, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1716,
     1717, 1737, 1738, 1739, 1740, 1741, 1718, 1719, 1721, 1722,
     1723, 1742, 1743, 1744, 1724, 1725, 1726, 1727, 1745, 1746,
     1728, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1747, 1748,
     1737, 1738, 1739, 1740, 1741, 1749, 1750, 1751, 1752, 1753,
     1742, 1743, 1744, 1754, 1755, 1756, 1757, 1745, 1746, 1758,
     1759, 1760, 1761, 1762, 1763, 1764, 1765, 1747, 1748, 1766,
     1767, 1768, 1769, 1770, 1749, 1750, 1751, 1752, 1753, 1771,
     1772, 1773, 1754, 1755, 1756, 1757, 1774, 1775, 1758, 1759,

     1760, 1761, 1762, 1763, 1764, 1765, 1776, 1777, 1766, 1767,
     1768, 1769, 1770, 1778, 1779, 1780, 1781, 1782, 1771, 1772,
     1773, 1783, 1784, 1785, 1786, 1774, 1775, 1787, 1788, 1789,
     1790, 1791, 1792, 1793, 1794, 1776, 1777, 1795, 1796, 1797,
     1798, 1799, 1778, 1779, 1780, 1781, 1782, 1800, 1801, 1802,
     1783, 1784, 1785, 1786, 1803, 1804, 1787, 1788, 1789, 1790,
     1791, 1792, 1793, 1794, 1805, 1806, 1795, 1796, 1797, 1798,
     1799, 1807, 1808, 1809, 1810, 1811, 1800, 1801, 1802, 1812,
     1813, 1814, 1815, 1803, 1804, 1816, 1816, 1816, 1816, 1817,
     1818, 1819, 1820, 1805, 1806, 1821, 1822, 1823, 1824, 1825,

     1807, 1808, 1809, 1810, 1811, 1826, 1827, 1828, 1812, 1813,
     1814, 1815, 1829, 1830, 1831, 1832, 1833, 1834, 1817, 1818,
     1819, 1820, 1835, 1836, 1821, 1822, 1823, 1824, 1825, 1837,
     1838, 1839, 1840, 1841, 1826, 1827, 1828, 1842, 1843, 1844,
     2107, 1829, 1830, 1831, 1832, 1833, 1834, 1845, 1845, 1845,
     1845, 1835, 1836, 1709, 1709, 1709, 1709, 1847, 1837, 1838,
     1839, 1840, 1841, 1848, 1849, 1850, 1842, 1843, 1844, 1846,
     1846, 1846, 1846, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
     1858, 1859, 1860, 1861, 1862, 1863, 1847, 1864, 1865, 1866,
     1867, 1868, 1848, 1849, 1850, 1869, 1870, 1871, 1872, 1873,

     1874, 1875, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
     1859, 1860, 1861, 1862, 1863, 1876, 1864, 1865, 1866, 1867,
     1868, 1878, 1879, 1880, 1869, 1870, 1871, 1872, 1873, 1874,
     1875, 1881, 1882, 1883, 1884, 1885, 1886, 1888, 1889, 1890,
     1891, 1892, 1893, 1894, 1876, 1895, 1897, 1898, 1899, 1900,
     1878, 1879, 1880, 1901, 1902, 1903, 1904, 1905, 1907, 1908,
     1881, 1882, 1883, 1884, 1885, 1886, 1888, 1889, 1890, 1891,
     1892, 1893, 1894, 1909, 1895, 1897, 1898, 1899, 1900, 1910,
     1911, 1912, 1901, 1902, 1903, 1904, 1905, 1907, 1908, 1816,
     1816, 1816, 1816, 1913, 1914, 1916, 1917, 1918, 1919, 1920,

     1921, 1922, 1909, 1923, 1924, 1926, 1927, 1928, 1910, 1911,
     1912, 1929, 1930, 1931, 1845, 1845, 1845, 1845, 1709, 1709,
     1709, 1709, 1913, 1914, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1932, 1923, 1924, 1926, 1927, 1928, 1933, 1935, 1936,
     1929, 1930, 1931, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 2107, 1954, 1955,
     1932, 1956, 1957, 1958, 1959, 1960, 1933, 1935, 1936, 1961,
     1952, 1962, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1945,
     1946, 1947, 1948, 1949, 1950, 1951, 1953, 1954, 1955, 1963,
     1956, 1957, 1958, 1959, 1960, 1964, 1965, 1966, 1961, 1952,

     1962, 1967, 1968, 1969, 1971, 1972, 1973, 1974, 1975, 1976,
     1977, 1978, 1979, 1980, 1981, 1953, 1982, 1983, 1963, 1970,
     1984, 1985, 1988, 1989, 1964, 1965, 1966, 1990, 1986, 1991,
     1967, 1968, 1969, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
     1978, 1979, 1980, 1981, 1987, 1982, 1983, 1992, 1970, 1984,
     1985, 1988, 1989, 1993, 1994, 1995, 1990, 1986, 1991, 1996,
     1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006, 2007, 2003,
     2008, 2009, 2010, 1987, 2011, 2012, 1992, 2013, 2014, 2015,
     2016, 2017, 1993, 1994, 1995, 2004, 2018, 2019, 1996, 1997,
     1998, 1999, 2000, 2001, 2002, 2005, 2006, 2007, 2003, 2008,

     2009, 2010, 2020, 2011, 2012, 2021, 2013, 2014, 2015, 2016,
     2017, 2022, 2023, 2024, 2004, 2018, 2019, 2025, 2026, 2027,
     2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2038, 2020, 2039, 2040, 2021, 2041, 2042, 2043, 2044, 2045,
     2022, 2023, 2024, 2046, 2047, 2048, 2025, 2026, 2027, 2028,
     2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
     2049, 2039, 2040, 2050, 2041, 2042, 2043, 2044, 2045, 2051,
     2052, 2053, 2046, 2047, 2048, 2054, 2055, 2056, 2057, 2058,
     2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2049,
     2068, 2069, 2050, 2070, 2071, 2072, 2073, 2074, 2051, 2052,

     2053, 2075, 2076, 2077, 2054, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2078, 2068,
     2069, 2079, 2070, 2071, 2072, 2073, 2074, 2080, 2081, 2082,
     2075, 2076, 2077, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
     2090, 2091, 2092, 2093, 2094, 2095, 2096, 2078, 2097, 2098,
     2079, 2099, 2100, 2101, 2102, 2103, 2080, 2081, 2082, 2104,
     2105, 2106, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
     2091, 2092, 2093, 2094, 2095, 2096, 2107, 2097, 2098, 2107,
     2099, 2100, 2101, 2102, 2103, 2107, 2107, 2107, 2104, 2105,
     2106,  232, 2107,  232,  232,  306, 2107,  306, 2107,  306,

      313,  313,  313,  313,  313,  313,  393, 2107,  393,  393,
      393,  393,  393,  393,  393,  395, 2107, 2107,  395,  395,
      395, 2107,  395,  395,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  797,  797,  797,  797,  797,  797,  797,
      797,  797, 1490, 2107, 1490, 1490, 1490, 1490, 1490, 1490,
     1490,   13, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107
    } ;

static const flex_int16_t yy_chk[4736] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2114,    7,    7,    7,    7,    7,    8, 1866,    8,    8,
        8,    8,    8,    9, 1852,    9,    9,    9,    9,    9,
       10, 1836,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1822,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1807,   28,   27,   29,   28,
      115, 1793,   28,   45,  107, 1779,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   45,   30,   34,   30,   27, 1765,   31,   34,
       30,   31,   59,   30,   31,   30,   37,   31,  119,  119,
       31,   60,   36,   30,   37,  144,   36,  144,   34,   31,
       36, 1514,   30,   34,   30, 1503,   36,   31,   34,   30,
       31,   59,   30,   31,   30,   37,   31,   38,   39,   31,
       60,   36, 1442,   37,   40,   36,   39,   62,   40,   36,
       39,   38,   39,   39,   39,   36,   38,   38,   43,   43,
     1431,   40,   50,   50,   50,   50,   38,   39,   43,   73,

       41,   46,   46,   40,   41,   39,   62,   40,   41,   39,
       38,   39,   39,   39,   41,   38,   38,   43,   43,   41,
       40,   44,   87,   44,   42,   88,   44,   43,   73,   41,
       46,   46,   90,   41,   42,   74,   74,   41,  101,   42,
       42, 1372, 1361,   41,  105,  105,  105,  105,   41, 1304,
       44,   87,   44,   42,   88,   44,   51,   51,   51,   51,
       51,   90, 1293,   42,   74,   74, 1232,  101,   42,   42,
       51,   52,   52,   52,   52,   52,   53, 1228,   53,   65,
       54,   55,   93,   53,   54,   52,   53,   65,   54,   51,
       93,   54,   56,  126,   54,   55,   56, 1201,   55,   51,

       56,   55, 1132,  127,   54,   53,   56,   53,   65,   54,
       55,   93,   53,   54,   52,   53,   65,   54,   51,   93,
       54,   56,  126,   54,   55,   56,   61,   55,   57,   56,
       55,   61,  127,   54,   58,   56,   61,   57,  129,   57,
     1128, 1101,   58,  139,   57,   58,  153,   57,   58,   57,
       66,   58, 1034,  155,   58,   61, 1030,   57,  156,  396,
       61,  396, 1003,   58,   66,   61,   57,  129,   57,   66,
       66,   58,  139,   57,   58,  153,   57,   58,   57,   66,
       58,   64,  155,   58,  157,   64,  158,  156,   67,   64,
       68,  102,  102,   66,   68,   64,   67,   69,   66,   66,

       67,   69,   67,   67,   67,   69,  159,   68,  938,  934,
       64,   69,   70,  157,   64,  158,   69,   67,   64,   68,
      102,  102,   70,   68,   64,   67,   69,   70,   70,   67,
       69,   67,   67,   67,   69,  159,   68,   71,   71,  160,
       69,   70,  131,  907,   72,   69,   72,   71,  857,   72,
      131,   70,   79,   79,   79,   79,   70,   70,   80,  747,
       80,   80,   80,   80,   80,   79,   71,   71,  160,  642,
       81,  131,   81,   72,   80,   72,   71,   81,   72,  131,
       81,   82,  117,  117,  117,   82,  100,  539,  100,   82,
      479,  100,   82,  146,   79,   82,  142,   99,   99,   81,

      109,   81,   83,   80,   47,   82,   81,   99,   17,   81,
       82, 1418,  161, 1418,   82,  100,   83,  100,   82,   83,
      100,   82,   83,   13,   82,   84,   99,   99,  120,   84,
      120,   83,   86,   84,   82,  120,   99,   89,  120,   84,
       86,  161,   89,   86,   85,   83,   86,   89,   83,   86,
        0,   83,   86,   85,   84,   85,  163,  120,   84,  120,
       85,   86,   84,   85,  120,   85,   89,  120,   84,   86,
      165,   89,   86,   85,    0,   86,   89,   94,   86,   92,
        0,   86,   85,   92,   85,  163,    0,   92,  167,   85,
      169,   94,   85,   92,   85,   95,   94,   94,   96,  165,

        0,  134,   96,   95,    0,  134,   94,   95,   92,   95,
       95,   95,   92,    0,    0,   96,   92,  167,  134,  169,
       94, 1489,   92, 1489,   95,   94,   94,   96,  154,   97,
      134,   96,   95,   97,  134,   98,   95,   97,   95,   95,
       95,  140,  140,   97,   96,   98,  170,  134,   97,  154,
       98,   98,  103,  103,  103,  103,    0,  154,   97,    0,
        0,  171,   97,    0,   98,  103,   97,    0,    0,    0,
      140,  140,   97,    0,   98,  170,    0,   97,  154,   98,
       98,  104,  172,  104,  104,  104,  104,  104,  121,  122,
      171,  173,  121,  138,  103,  138,  121,  104,  138,  121,

      123,  174,  121,  122,  123,  128,  122,    0,  123,  122,
      128,  172,  121,    0,  123,  128,    0,  121,  122,  175,
      173,  121,  138,    0,  138,  121,  104,  138,  121,  123,
      174,  121,  122,  123,  128,  122,  124,  123,  122,  128,
      177,  121,  125,  123,  128,  124,    0,  124,  175,    0,
      125,  179,  124,  125,  181,  124,  125,  124,  166,  125,
        0,  176,  125,  166,  130,  124,    0,  176,  130,  177,
        0,  125,  130,  182,  124,  132,  124,    0,  130,  125,
      179,  124,  125,  181,  124,  125,  124,  166,  125,  132,
      176,  125,  166,  130,  132,  132,  176,  130,  133,  137,

      137,  130,  182,    0,  132,  183,  133,  130,  184,  137,
      133,  135,  133,  133,  133,  135,  136,    0,  132,  135,
        0,    0,  185,  132,  132,  135,  136,  133,  137,  137,
      135,  136,  136,    0,  183,  133,    0,  184,  137,  133,
      135,  133,  133,  133,  135,  136,  178,  180,  135,  164,
      164,  185,  178,  180,  135,  136,  188,    0,  164,  135,
      136,  136,  168,  192,  168,  186,  194,  190,  189,  168,
      186,  186,  190,  193,  195,  178,  180,  193,  164,  164,
      189,  178,  180,  198,  191,  188,  191,  164,  196,  197,
      197,  168,  192,  168,  186,  194,  190,  189,  168,  186,

      186,  190,  193,  195,  199,  196,  193,  200,  201,  189,
      202,  203,  198,  191,  204,  191,  205,  196,  197,  197,
      206,  207,  208,  210,  209,  207,  209,  211,  212,    0,
      214,  215,  216,  199,  196,  217,  200,  201,  211,  202,
      203,    0,  219,  204,  221,  205,  222,  224,    0,  206,
      207,  208,  210,  209,  207,  209,  211,  212,  213,  214,
      215,  216,  218,  223,  217,  220,  213,  211,  233,  223,
      218,  219,  220,  221,  220,  222,  224,  225,  309,  309,
      309,  309,    0,  225,    0,    0,    0,  213,  235,  236,
      234,  218,  223,    0,  220,  213,    0,  233,  223,  218,

        0,  220,    0,  220,    0,    0,  225,  227,  227,  227,
      227,  234,  225,  228,  228,  228,  228,  235,  236,  234,
      227,  229,  229,  229,  229,  229,  228,  230,  237,  230,
      238,  230,  230,  230,  230,  229,  239,  240,  241,  243,
      234,  244,  244,  245,  247,  248,  246,  248,  249,  227,
      244,  246,  248,  250,  251,  228,  252,  237,  253,  238,
      254,  255,  257,  256,  229,  239,  240,  241,  243,  256,
      244,  244,  245,  247,  248,  246,  248,  249,  258,  244,
      246,  248,  250,  251,  258,  252,  259,  253,  260,  254,
      255,  257,  256,  261,  260,  262,  263,  264,  256,  265,

      266,  268,  269,  270,  272,  266,  266,  258,  270,  271,
      274,  271,  273,  258,  269,  259,  273,  260,  275,  276,
      277,  277,  261,  260,  262,  263,  264,  278,  265,  266,
      268,  269,  270,  272,  266,  266,  276,  270,  271,  274,
      271,  273,  279,  269,  280,  273,  281,  275,  276,  277,
      277,  282,  283,  284,  285,  286,  278,  287,  288,  290,
      289,  287,  289,  291,  292,  276,  294,  295,  293,  296,
      297,  279,  299,  280,  291,  281,  293,  298,    0,  301,
      282,  283,  284,  285,  286,  298,  287,  288,  290,  289,
      287,  289,  291,  292,  302,  294,  295,  293,  296,  297,

      300,  299,  304,  291,  303,  293,  298,  300,  301,  300,
      303,  305,  314,  316,  298,  317,    0,  305,    0,  307,
      307,  307,  307,  302,  310,  310,  310,  310,    0,  300,
      318,  304,  307,  303,    0,    0,  300,  310,  300,  303,
      305,  314,  316,  308,  317,  308,  305,  308,  308,  308,
      308,  311,  315,  311,  311,  311,  311,  311,  312,  318,
      312,  307,  312,  312,  312,  312,  310,  311,  319,  320,
      321,  322,  324,  315,  325,  325,  326,  327,  328,  330,
      331,  315,  327,  325,  329,  332,  329,  333,  334,  335,
      336,  329,    0,  338,    0,  340,  311,  319,  320,  321,

      322,  324,  315,  325,  325,  326,  327,  328,  330,  331,
      342,  327,  325,  329,  332,  329,  333,  334,  335,  336,
      329,  337,  338,  339,  340,  341,  343,  337,  344,  339,
      345,  341,  346,  349,  350,  347,  352,  351,  352,  342,
      347,  347,  351,  353,  354,  355,  350,  356,  354,    0,
      337,  357,  339,  359,  341,  343,  337,  344,  339,  345,
      341,  346,  349,  350,  347,  352,  351,  352,  357,  347,
      347,  351,  353,  354,  355,  350,  356,  354,  358,  358,
      357,  360,  359,  361,  362,  363,  364,  365,  366,  367,
      368,  369,  371,  370,  368,  370,  373,  357,  372,  375,

      376,  377,  378,  374,  380,    0,    0,  358,  358,  372,
      360,  374,  361,  362,  363,  364,  365,  366,  367,  368,
      369,  371,  370,  368,  370,  373,  379,  372,  375,  376,
      377,  378,  374,  380,  379,  381,  382,  383,  372,  384,
      374,  385,  381,  386,  381,  384,  388,  405,  388,  386,
      388,  388,  388,  388,    0,  379,  387,  387,  387,  387,
        0,    0,    0,  379,  381,  382,  383,    0,  384,  387,
      385,  381,  386,  381,  384,    0,  405,    0,  386,  389,
      389,  389,  389,  390,  390,  390,  390,  393,  393,  393,
      393,  391,  389,  391,  391,  391,  391,  391,  387,  392,

      394,  392,  406,  392,  392,  392,  392,  391,  407,  408,
      398,  398,  409,  398,  394,  394,  394,  394,  398,  410,
      411,  389,  412,  406,  413,  415,  416,  416,  417,  398,
      419,  406,  421,  398,  418,  416,  391,  407,  408,  418,
      420,  409,  420,  422,  423,  424,  425,  420,  410,  411,
      426,  412,  406,  413,  415,  416,  416,  417,  427,  419,
      398,  421,  429,  418,  416,  431,  433,  434,  418,  420,
      435,  420,  422,  423,  424,  425,  420,  428,  430,  426,
      432,  436,  437,  428,  430,  440,  432,  427,  441,  444,
      446,  429,  438,  447,  431,  433,  434,  438,  438,  435,

      441,  445,  443,  442,  443,  445,  428,  430,  442,  432,
      436,  437,  428,  430,  440,  432,  450,  441,  444,  446,
      451,  438,  447,  448,  449,  449,  438,  438,  452,  441,
      445,  443,  442,  443,  445,  453,  454,  442,  455,  456,
      448,  457,  458,  459,  460,  450,  461,  459,  461,  451,
      462,  463,  448,  449,  449,  464,  466,  452,  465,  467,
      468,  469,  463,  471,  453,  454,  465,  455,  456,  448,
      457,  458,  459,  460,  470,  461,  459,  461,  473,  462,
      463,  474,  470,  476,  464,  466,  486,  465,  467,  468,
      469,  463,  471,  472,  487,  465,  488,  489,  475,  477,

      472,  490,  472,  470,  475,  477,  491,  473,  492,  493,
      474,  470,  476,  494,  495,  486,  496,  497,  498,  499,
      500,  491,  472,  487,  501,  488,  489,  475,  477,  472,
      490,  472,  502,  475,  477,  491,  503,  492,  493,  504,
      505,  507,  494,  495,  508,  496,  497,  498,  499,  500,
      491,  509,  510,  501,  511,  512,  513,  514,  509,  515,
      516,  502,  517,  518,  519,  503,  520,  522,  504,  505,
      507,  523,  525,  508,  527,    0,  528,  529,  530,  531,
      509,  510,  532,  511,  512,  513,  514,  509,  515,  516,
      533,  517,  518,  519,  524,  520,  522,  536,  537,  540,

      523,  525,  541,  527,  524,  528,  529,  530,  531,  542,
      543,  532,  544,  545,  524,  546,  547,  548,  549,  533,
      550,  551,  553,  554,  555,  552,  536,  537,  540,  552,
      556,  541,  558,  524,  559,  561,  562,  564,  542,  543,
      565,  544,  545,  524,  546,  547,  548,  549,  557,  550,
      551,  553,  554,  555,  552,  566,  567,  557,  552,  556,
      568,  558,  570,  559,  561,  562,  564,  571,  569,  565,
      569,  572,  573,  574,  575,  576,  577,  557,  575,  581,
      581,  581,  581,    0,  566,  567,  589,    0,  578,  568,
      578,  570,  578,  578,  578,  578,  571,  569,  590,  569,

      572,  573,  574,  575,  576,  577,  591,  575,  579,  579,
      579,  579,  580,  592,  580,  589,  580,  580,  580,  580,
      593,  579,  582,  582,  582,  582,  594,  590,  595,  596,
      597,  598,  599,  600,  601,  591,  602,  603,  604,  605,
      606,  594,  592,  607,  608,  610,  611,  612,  613,  593,
      579,  614,  615,  616,  612,  594,  617,  595,  596,  597,
      598,  599,  600,  601,  618,  602,  603,  604,  605,  606,
      594,  619,  607,  608,  610,  611,  612,  613,  620,  621,
      614,  615,  616,  612,  622,  617,  623,  625,  626,  627,
      628,  630,  631,  618,  632,  633,  634,  635,  636,  627,

      619,  639,  640,  643,  644,  645,  646,  620,  621,  627,
      647,  648,  649,  622,  650,  623,  625,  626,  651,  628,
      630,  631,  652,  632,  633,  634,  635,  636,  627,  653,
      639,  640,  643,  644,  645,  646,  654,  656,  627,  647,
      648,  649,  655,  650,  657,  658,  655,  651,  659,  661,
      660,  652,  662,  664,  665,  667,  668,  669,  653,  660,
      670,  671,  672,  673,  672,  654,  656,  674,  675,  676,
      677,  655,  678,  657,  658,  655,  678,  659,  661,  660,
      679,  662,  664,  665,  667,  668,  669,  680,    0,  670,
      671,  672,  673,  672,    0,    0,  674,  675,  676,  677,

        0,  678,    0,  694,    0,  678,    0,    0,    0,  679,
      681,  681,  681,  681,    0,    0,  680,  682,  682,  682,
      682,  683,  683,  683,  683,  684,  684,  684,  684,  685,
      695,  685,  694,  685,  685,  685,  685,  686,  684,  686,
      686,  686,  686,  686,  687,  687,  687,  687,  688,  688,
      688,  688,  696,  686,  697,  698,  699,  700,  701,  695,
      702,  703,  704,  705,  706,  707,  708,  684,  709,  710,
      711,  699,  712,  713,  715,  716,    0,  718,  719,  720,
      721,  696,  686,  697,  698,  699,  700,  701,  722,  702,
      703,  704,  705,  706,  707,  708,  723,  709,  710,  711,

      699,  712,  713,  715,  716,  717,  718,  719,  720,  721,
      724,  725,  717,  726,  727,  728,  730,  722,  731,  733,
      735,  736,  737,  738,  739,  723,  732,  740,  741,  744,
      745,  748,  749,  750,  717,  751,  732,  752,  753,  724,
      725,  717,  726,  727,  728,  730,  732,  731,  733,  735,
      736,  737,  738,  739,  754,  755,  740,  741,  744,  745,
      748,  749,  750,  756,  751,  732,  752,  753,  757,  758,
      759,  761,  760,  762,  763,  732,  760,  764,  765,  766,
      767,  769,  770,  754,  755,  772,  773,  765,  774,  775,
      776,  777,  756,  777,  778,  779,  780,  757,  758,  759,

      761,  760,  762,  763,  781,  760,  764,  765,  766,  767,
      769,  770,  782,  784,  772,  773,  785,  774,  775,  776,
      777,    0,  777,  778,  779,  780,  783,  804,  805,  806,
      783,    0,  807,  781,  786,  786,  786,  786,    0,    0,
        0,  782,  784,    0,  808,  785,  787,  787,  787,  787,
      788,  788,  788,  788,    0,  783,  804,  805,  806,  783,
      789,  807,  789,  788,  789,  789,  789,  789,  790,  790,
      790,  790,  791,  808,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  793,  793,  793,  793,  794,  791,    0,
      810,  796,  788,  795,  795,  795,  795,  809,  811,  812,

        0,  794,  794,  794,  794,  796,  796,  796,  796,  813,
      797,  797,  809,  797,  814,  815,  816,  791,  797,  810,
      817,  818,  819,  820,  821,  822,  809,  811,  812,  797,
      823,    0,  825,  797,  826,  827,  828,  829,  813,  830,
      831,  809,  827,  814,  815,  816,  832,  833,  834,  817,
      818,  819,  820,  821,  822,  835,  836,  837,  838,  823,
      797,  825,  840,  826,  827,  828,  829,  841,  830,  831,
      842,  827,  843,  845,  846,  832,  833,  834,  847,  848,
      842,  849,  850,  851,  835,  836,  837,  838,  854,  855,
      842,  840,  858,  859,  860,  861,  841,  862,  863,  864,

      865,  843,  845,  846,  866,  867,  868,  847,  848,  842,
      849,  850,  851,  869,  871,  872,  870,  854,  855,  842,
      870,  858,  859,  860,  861,  873,  862,  863,  864,  865,
      874,  875,  876,  866,  867,  868,  877,  879,  880,  882,
      875,  883,  869,  871,  872,  870,  884,  885,  886,  870,
      887,  888,  887,  889,  873,  890,  891,  892,  893,  874,
      875,  876,  893,  894,  895,  877,  879,  880,  882,  896,
      883,  897,  898,  900,  903,  884,  885,  886,  904,  887,
      888,  887,  889,  905,  890,  891,  892,  893,  906,  908,
      910,  893,  894,  895,  911,  913,  914,  915,  896,  917,

      897,  898,  900,  903,  918,  919,  920,  904,  921,  922,
      923,  924,  905,  925,  926,  927,  930,  906,  908,  910,
      931,  932,  933,  911,  913,  914,  915,  942,  917,  944,
      935,  945,  946,  918,  919,  920,  947,  921,  922,  923,
      924,  935,  925,  926,  927,  930,  948,  949,  950,  931,
      932,  933,  952,  953,  954,  956,  942,  957,  944,  935,
      945,  946,  958,  959,  960,  947,  963,  964,  965,  967,
      935,  968,  969,  971,  974,  948,  949,  950,  976,  977,
      978,  952,  953,  954,  956,  979,  957,  980,  981,  982,
      983,  958,  959,  960,  985,  963,  964,  965,  967,  986,

      968,  969,  971,  974,    0,    0,    0,  976,  977,  978,
      988,  988,  988,  988,  979,  992,  980,  981,  982,  983,
      993,  994,  996,  985,  989,  989,  989,  989,  986,  990,
      990,  990,  990,  991,  991,  991,  991,  999, 1000, 1001,
     1002, 1004, 1006, 1007,  992, 1009, 1010, 1011, 1013,  993,
      994,  996, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1026, 1027, 1028, 1029,  999, 1000, 1001, 1002,
     1004, 1006, 1007, 1038, 1009, 1010, 1011, 1013, 1040, 1041,
     1042, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1026, 1027, 1028, 1029, 1031, 1043, 1044, 1045, 1046,

     1048, 1049, 1038, 1050, 1052, 1053, 1031, 1040, 1041, 1042,
     1054, 1055, 1056, 1059, 1060, 1061, 1063, 1064, 1065, 1067,
     1070, 1072, 1073, 1074, 1031, 1043, 1044, 1045, 1046, 1048,
     1049, 1075, 1050, 1052, 1053, 1031, 1076, 1077, 1078, 1054,
     1055, 1056, 1059, 1060, 1061, 1063, 1064, 1065, 1067, 1070,
     1072, 1073, 1074, 1079, 1081, 1082, 1084, 1084, 1084, 1084,
     1075, 1085, 1085, 1085, 1085, 1076, 1077, 1078, 1086, 1086,
     1086, 1086, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1088,
     1088, 1090, 1079, 1081, 1082, 1089, 1089, 1089, 1089, 1091,
     1088, 1092, 1094, 1097, 1098, 1099, 1100, 1102, 1104, 1105,

     1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1090, 1118, 1119, 1120, 1121, 1124, 1125, 1126, 1091, 1088,
     1092, 1094, 1097, 1098, 1099, 1100, 1102, 1104, 1105, 1107,
     1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1127,
     1118, 1119, 1120, 1121, 1124, 1125, 1126, 1129, 1136, 1138,
     1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1129, 1148,
     1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1127, 1161,
     1162, 1163, 1165, 1168, 1170, 1171, 1129, 1136, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1146, 1147, 1129, 1148, 1150,
     1151, 1152, 1153, 1154, 1157, 1158, 1159, 1172, 1161, 1162,

     1163, 1165, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177,
     1179, 1180, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183,
     1184, 1184, 1184, 1184,    0,    0, 1172, 1185, 1185, 1185,
     1185, 1190, 1191, 1192, 1173, 1174, 1175, 1176, 1177, 1179,
     1180, 1186,    0,    0, 1186, 1186, 1186, 1186, 1187, 1187,
     1187, 1187, 1188, 1188, 1188, 1188, 1189, 1186, 1194, 1197,
     1190, 1191, 1192, 1198, 1199, 1200, 1202, 1204, 1205, 1207,
     1189, 1189, 1189, 1189, 1208, 1209, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1220, 1186, 1194, 1197, 1221,
     1224, 1225, 1198, 1199, 1200, 1202, 1204, 1205, 1207, 1226,

     1227, 1236, 1238, 1208, 1209, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1229, 1239, 1240, 1221, 1224,
     1225, 1241, 1242, 1243, 1244, 1246, 1229, 1247, 1226, 1227,
     1236, 1238, 1248, 1250, 1251, 1252, 1253, 1254, 1257, 1258,
     1259, 1261, 1262, 1263, 1229, 1239, 1240, 1265, 1268, 1270,
     1241, 1242, 1243, 1244, 1246, 1229, 1247, 1271, 1272, 1273,
     1274, 1248, 1250, 1251, 1252, 1253, 1254, 1257, 1258, 1259,
     1261, 1262, 1263, 1275, 1276, 1277, 1265, 1268, 1270, 1279,
     1280, 1282, 1283, 1284, 1285, 1286, 1271, 1272, 1273, 1274,
     1287, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1299, 1300,

     1301, 1303, 1275, 1276, 1277, 1306, 1307, 1308, 1279, 1280,
     1282, 1283, 1284, 1285, 1286, 1309, 1311, 1313, 1314, 1287,
     1290, 1291, 1292, 1294, 1295, 1296, 1297, 1299, 1300, 1301,
     1303, 1315, 1318, 1319, 1306, 1307, 1308, 1320, 1323, 1325,
     1327, 1328, 1329, 1330, 1309, 1311, 1313, 1314, 1332, 1334,
     1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1346, 1347,
     1315, 1318, 1319, 1349, 1350, 1351, 1320, 1323, 1325, 1327,
     1328, 1329, 1330, 1352, 1353, 1354, 1355, 1332, 1334, 1335,
     1337, 1338, 1339, 1340, 1342, 1343, 1344, 1346, 1347, 1358,
     1359, 1360, 1349, 1350, 1351, 1362, 1363, 1364, 1365, 1367,

     1368, 1369, 1352, 1353, 1354, 1355, 1371, 1374, 1375, 1376,
     1377, 1379, 1381, 1382, 1383, 1386, 1387, 1388, 1358, 1359,
     1360, 1391, 1393, 1395, 1362, 1363, 1364, 1365, 1367, 1368,
     1369, 1396, 1397, 1398, 1400, 1371, 1374, 1375, 1376, 1377,
     1379, 1381, 1382, 1383, 1386, 1387, 1388, 1402, 1403, 1405,
     1391, 1393, 1395, 1406, 1407, 1408, 1410, 1411, 1412, 1414,
     1396, 1397, 1398, 1400, 1415, 1417, 1419, 1419, 1419, 1419,
     1420, 1421, 1422, 1423, 1424, 1425, 1402, 1403, 1405, 1428,
     1429, 1430, 1406, 1407, 1408, 1410, 1411, 1412, 1414, 1432,
     1433, 1434, 1435, 1415, 1417, 1437, 1438, 1439, 1441, 1420,

     1421, 1422, 1423, 1424, 1425, 1444, 1445, 1446, 1428, 1429,
     1430, 1447, 1449, 1451, 1452, 1453, 1456, 1457, 1432, 1433,
     1434, 1435, 1458, 1461, 1437, 1438, 1439, 1441, 1463, 1465,
     1466, 1467, 1468, 1470, 1444, 1445, 1446, 1472, 1473, 1475,
     1447, 1449, 1451, 1452, 1453, 1456, 1457, 1476, 1477, 1478,
     1480, 1458, 1461, 1481, 1482, 1484, 1485, 1463, 1465, 1466,
     1467, 1468, 1470, 1487,    0,    0, 1472, 1473, 1475, 1488,
     1488, 1488, 1488, 1492, 1493, 1494, 1476, 1477, 1478, 1480,
     1495, 1496, 1481, 1482, 1484, 1485, 1490, 1490, 1490, 1490,
     1497, 1500, 1487, 1491, 1491, 1491, 1491, 1501, 1502, 1504,

     1505, 1506, 1492, 1493, 1494, 1507, 1509, 1510, 1511, 1495,
     1496, 1513, 1516, 1517, 1518, 1519, 1521, 1523, 1524, 1497,
     1500, 1525, 1528, 1529, 1530, 1533, 1501, 1502, 1504, 1505,
     1506, 1535, 1537, 1538, 1507, 1509, 1510, 1511, 1539, 1540,
     1513, 1516, 1517, 1518, 1519, 1521, 1523, 1524, 1542, 1544,
     1525, 1528, 1529, 1530, 1533, 1545, 1547, 1548, 1549, 1550,
     1535, 1537, 1538, 1552, 1553, 1554, 1556, 1539, 1540, 1557,
     1559, 1560, 1561, 1563, 1564, 1566, 1567, 1542, 1544, 1569,
     1570, 1572, 1575, 1578, 1545, 1547, 1548, 1549, 1550, 1579,
     1580, 1584, 1552, 1553, 1554, 1556, 1585, 1586, 1557, 1559,

     1560, 1561, 1563, 1564, 1566, 1567, 1587, 1589, 1569, 1570,
     1572, 1575, 1578, 1592, 1593, 1595, 1596, 1597, 1579, 1580,
     1584, 1598, 1601, 1602, 1604, 1585, 1586, 1607, 1609, 1610,
     1612, 1613, 1615, 1616, 1618, 1587, 1589, 1619, 1621, 1624,
     1627, 1628, 1592, 1593, 1595, 1596, 1597, 1629, 1633, 1634,
     1598, 1601, 1602, 1604, 1635, 1636, 1607, 1609, 1610, 1612,
     1613, 1615, 1616, 1618, 1638, 1641, 1619, 1621, 1624, 1627,
     1628, 1642, 1644, 1645, 1646, 1647, 1629, 1633, 1634, 1650,
     1651, 1653, 1656, 1635, 1636, 1658, 1658, 1658, 1658, 1659,
     1660, 1662, 1663, 1638, 1641, 1665, 1666, 1668, 1669, 1671,

     1642, 1644, 1645, 1646, 1647, 1674, 1677, 1678, 1650, 1651,
     1653, 1656, 1679, 1683, 1684, 1685, 1686, 1688, 1659, 1660,
     1662, 1663, 1691, 1692, 1665, 1666, 1668, 1669, 1671, 1694,
     1695, 1696, 1697, 1700, 1674, 1677, 1678, 1701, 1703, 1706,
        0, 1679, 1683, 1684, 1685, 1686, 1688, 1708, 1708, 1708,
     1708, 1691, 1692, 1709, 1709, 1709, 1709, 1711, 1694, 1695,
     1696, 1697, 1700, 1712, 1714, 1715, 1701, 1703, 1706, 1710,
     1710, 1710, 1710, 1717, 1718, 1720, 1721, 1723, 1726, 1729,
     1730, 1731, 1735, 1736, 1737, 1738, 1711, 1740, 1743, 1744,
     1746, 1747, 1712, 1714, 1715, 1748, 1749, 1752, 1753, 1755,

     1758, 1760, 1717, 1718, 1720, 1721, 1723, 1726, 1729, 1730,
     1731, 1735, 1736, 1737, 1738, 1764, 1740, 1743, 1744, 1746,
     1747, 1766, 1767, 1768, 1748, 1749, 1752, 1753, 1755, 1758,
     1760, 1770, 1771, 1774, 1775, 1777, 1778, 1780, 1781, 1782,
     1783, 1784, 1785, 1788, 1764, 1792, 1794, 1795, 1796, 1798,
     1766, 1767, 1768, 1799, 1802, 1803, 1805, 1806, 1808, 1809,
     1770, 1771, 1774, 1775, 1777, 1778, 1780, 1781, 1782, 1783,
     1784, 1785, 1788, 1810, 1792, 1794, 1795, 1796, 1798, 1811,
     1812, 1813, 1799, 1802, 1803, 1805, 1806, 1808, 1809, 1816,
     1816, 1816, 1816, 1817, 1821, 1823, 1824, 1825, 1827, 1828,

     1831, 1832, 1810, 1834, 1835, 1837, 1838, 1839, 1811, 1812,
     1813, 1840, 1841, 1842, 1845, 1845, 1845, 1845, 1846, 1846,
     1846, 1846, 1817, 1821, 1823, 1824, 1825, 1827, 1828, 1831,
     1832, 1847, 1834, 1835, 1837, 1838, 1839, 1851, 1853, 1854,
     1840, 1841, 1842, 1855, 1857, 1858, 1861, 1862, 1864, 1865,
     1867, 1868, 1869, 1870, 1871, 1872, 1876,    0, 1878, 1880,
     1847, 1881, 1882, 1883, 1884, 1885, 1851, 1853, 1854, 1886,
     1877, 1887, 1855, 1857, 1858, 1861, 1862, 1864, 1865, 1867,
     1868, 1869, 1870, 1871, 1872, 1876, 1877, 1878, 1880, 1888,
     1881, 1882, 1883, 1884, 1885, 1889, 1891, 1892, 1886, 1877,

     1887, 1893, 1895, 1896, 1897, 1899, 1900, 1901, 1902, 1903,
     1904, 1905, 1906, 1907, 1908, 1877, 1910, 1911, 1888, 1896,
     1912, 1914, 1916, 1918, 1889, 1891, 1892, 1919, 1915, 1920,
     1893, 1895, 1896, 1897, 1899, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1915, 1910, 1911, 1921, 1896, 1912,
     1914, 1916, 1918, 1922, 1923, 1924, 1919, 1915, 1920, 1925,
     1926, 1927, 1929, 1930, 1931, 1933, 1935, 1937, 1938, 1934,
     1939, 1940, 1941, 1915, 1942, 1943, 1921, 1944, 1945, 1946,
     1948, 1949, 1922, 1923, 1924, 1934, 1950, 1952, 1925, 1926,
     1927, 1929, 1930, 1931, 1933, 1935, 1937, 1938, 1934, 1939,

     1940, 1941, 1953, 1942, 1943, 1954, 1944, 1945, 1946, 1948,
     1949, 1955, 1956, 1959, 1934, 1950, 1952, 1962, 1965, 1969,
     1970, 1971, 1972, 1973, 1976, 1979, 1982, 1986, 1987, 1988,
     1989, 1953, 1990, 1993, 1954, 1996, 1999, 2003, 2004, 2005,
     1955, 1956, 1959, 2006, 2007, 2010, 1962, 1965, 1969, 1970,
     1971, 1972, 1973, 1976, 1979, 1982, 1986, 1987, 1988, 1989,
     2013, 1990, 1993, 2016, 1996, 1999, 2003, 2004, 2005, 2019,
     2020, 2022, 2006, 2007, 2010, 2023, 2025, 2027, 2028, 2030,
     2031, 2033, 2035, 2036, 2038, 2039, 2041, 2043, 2044, 2013,
     2046, 2047, 2016, 2049, 2051, 2052, 2053, 2055, 2019, 2020,

     2022, 2056, 2057, 2058, 2023, 2025, 2027, 2028, 2030, 2031,
     2033, 2035, 2036, 2038, 2039, 2041, 2043, 2044, 2060, 2046,
     2047, 2061, 2049, 2051, 2052, 2053, 2055, 2062, 2063, 2065,
     2056, 2057, 2058, 2066, 2067, 2068, 2070, 2072, 2076, 2080,
     2084, 2087, 2088, 2089, 2090, 2091, 2092, 2060, 2093, 2094,
     2061, 2095, 2096, 2097, 2098, 2099, 2062, 2063, 2065, 2100,
     2101, 2102, 2066, 2067, 2068, 2070, 2072, 2076, 2080, 2084,
     2087, 2088, 2089, 2090, 2091, 2092,    0, 2093, 2094,    0,
     2095, 2096, 2097, 2098, 2099,    0,    0,    0, 2100, 2101,
     2102, 2108,    0, 2108, 2108, 2109,    0, 2109,    0, 2109,

     2110, 2110, 2110, 2110, 2110, 2110, 2111,    0, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2112,    0,    0, 2112, 2112,
     2112,    0, 2112, 2112, 2113, 2113, 2113, 2113, 2113, 2113,
     2113, 2113, 2113, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2116,    0, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2108 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2107 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUPS);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 127:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 144:
case 145:
case 146:
case 147:
case 148:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
case 154:
case 155:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 156:
case 157:
case 158:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 159:
case 160:
case 161:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 162:
case 163:
case 164:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 174:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 177:
YY_RULE_SETUP
{}
	YY_BREAK
case 178:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 180:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2108 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2108 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2107);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

