#line 2 "ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif


#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif


#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif


#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif


#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif


#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif


#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif


#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif


#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif


#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif


#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif


#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif


#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif


#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif


#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif


#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif


#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif


#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif


#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif


#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif


#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif


#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif


#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif


#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif


#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif


#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif


#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif


#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif


#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif



#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif


#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif



#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif





#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif


#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif


#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif


#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1608] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,  146,  152,  150,  148,  147,  150,   96,  111,  108,
      139,  111,   97,   99,   98,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  107,  106,  137,  111,
      113,  113,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  140,  138,  141,  111,  111,  121,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  111,  121,  150,  146,  146,  146,  146,  144,
       96,  111,  108,  111,  111,  111,   97,   99,   98,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      145,  107,  106,  148,  103,    0,  105,  109,  100,  102,
      101,  110,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   46,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,    0,

       68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
      115,  116,  113,    0,    0,  112,  112,  112,    4,  112,
      112,  112,  112,  112,  112,   12,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   46,
       53,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   66,  112,   68,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  136,  126,  136,  136,  136,  121,  136,

      120,  120,  120,    4,  120,  120,  120,  120,  120,  120,
       12,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   46,   53,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   66,  120,   68,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  132,  136,
      136,  136,  121,  136,    0,  142,  146,  146,  103,  146,
      105,  109,  100,  102,  101,  110,  146,  146,    4,  146,
      146,  146,  146,  146,  146,   12,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   46,
       53,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   66,  146,   68,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  104,    0,  149,    1,    2,    3,    5,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,    0,    0,    0,   39,    0,    0,    0,
        0,   45,    0,    0,   49,    0,    0,    0,    0,    0,

        0,    0,   60,   61,    0,   63,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   77,    0,
        0,   80,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,    0,    0,  117,  114,    1,
        2,    3,    5,    6,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   29,  112,  112,  112,  112,  112,  112,  112,   39,
      112,  112,  112,  112,   45,  112,  112,   49,  112,  112,
      112,  112,  112,  112,  112,   60,   61,  112,   63,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,   77,  112,  112,   80,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,    0,  129,  136,  124,
      136,  121,    0,  127,    1,    2,    3,    5,    6,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,   29,  120,  120,  120,
      120,  120,  120,  120,   39,  120,  120,  120,  120,   45,
      120,  120,   49,  120,  120,  120,  120,  120,  120,  120,
       60,   61,  120,   63,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,   77,  120,  120,   80,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,    0,  135,  130,  136,  136,  121,    0,  133,  142,
        0,  142,  146,  146,    1,    2,    3,    5,    6,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   29,  146,  146,  146,
      146,  146,  146,  146,   39,  146,  146,  146,  146,   45,
      146,  146,   49,  146,  146,  146,  146,  146,  146,  146,
       60,   61,  146,   63,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   77,  146,  146,   80,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,    0,    0,    0,   10,    0,   13,   14,    0,    0,

        0,    0,   21,    0,   23,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,   41,   42,    0,
        0,    0,    0,    0,    0,   52,   54,   37,   55,   56,
        0,   58,    0,    0,   64,    0,   67,    0,    0,    0,
        0,   72,    0,    0,    0,    0,   78,    0,   81,   82,
       84,    0,    0,    0,    0,    0,    0,    0,   93,    0,
       95,    0,  119,    0,  118,  112,  112,  112,   10,  112,
       13,   14,  112,  112,  112,  112,   21,  112,   23,  112,
      112,  112,   28,  112,  112,  112,  112,  112,  112,  112,
      112,   41,   42,  112,  112,  112,  112,  112,  112,   52,

       54,   37,   55,   56,  112,   58,  112,  112,   64,  112,
       67,  112,  112,  112,  112,   72,  112,  112,  112,  112,
       78,  112,   81,   82,   84,  112,  112,  112,  112,  112,
      112,  112,   93,  112,   95,  129,  136,    0,  128,  121,
      127,  120,  120,  120,   10,  120,   13,   14,  120,  120,
      120,  120,   21,  120,   23,  120,  120,  120,   28,  120,
      120,  120,  120,  120,  120,  120,  120,   41,   42,  120,
      120,  120,  120,  120,  120,   52,   54,   37,   55,   56,
      120,   58,  120,  120,   64,  120,   67,  120,  120,  120,
      120,   72,  120,  120,  120,  120,   78,  120,   81,   82,

       84,  120,  120,  120,  120,  120,  120,  120,   93,  120,
       95,  135,    0,  134,  136,  121,  133,    0,  142,  146,
      146,  146,   10,  146,   13,   14,  146,  146,  146,  146,
       21,  146,   23,  146,  146,  146,   28,  146,  146,  146,
      146,  146,  146,  146,  146,   41,   42,  146,  146,  146,
      146,  146,  146,   52,   54,   37,   55,   56,  146,   58,
      146,  146,   64,  146,   67,  146,  146,  146,  146,   72,
      146,  146,  146,  146,   78,  146,   81,   82,   84,  146,
      146,  146,  146,  146,  146,  146,   93,  146,   95,    0,
        0,    0,    0,    0,   16,   17,    0,    0,    0,    0,

        0,    0,   31,    0,    0,   34,   36,   35,    0,   43,
        0,   47,    0,   50,    0,    0,   57,   59,    0,   38,
        0,    0,   69,   70,    0,    0,   74,    0,    0,    0,
        0,   85,    0,    0,    0,   89,   90,    0,   94,  112,
      112,  112,  112,  112,   16,   17,  112,  112,  112,  112,
      112,  112,   31,  112,  112,   34,   36,   35,  112,   43,
      112,   47,  112,   50,  112,  112,   57,   59,  112,   38,
      112,  112,   69,   70,  112,  112,   74,  112,  112,  112,
      112,   85,  112,  112,  112,   89,   90,  112,   94,  122,
      128,  120,  120,  120,  120,  120,   16,   17,  120,  120,

      120,  120,  120,  120,   31,  120,  120,   34,   36,   35,
      120,   43,  120,   47,  120,   50,  120,  120,   57,   59,
      120,   38,  120,  120,   69,   70,  120,  120,   74,  120,
      120,  120,  120,   85,  120,  120,  120,   89,   90,  120,
       94,  134,  123,    0,  143,  146,  146,  146,  146,  146,
       16,   17,  146,  146,  146,  146,  146,  146,   31,  146,
      146,   34,   36,   35,  146,   43,  146,   47,  146,   50,
      146,  146,   57,   59,  146,   38,  146,  146,   69,   70,
      146,  146,   74,  146,  146,  146,  146,   85,  146,  146,
      146,   89,   90,  146,   94,    0,    0,    9,    0,   15,

        0,   22,    0,   25,    0,   30,   32,   33,    0,   44,
       48,    0,    0,    0,   65,    0,   71,    0,    0,   76,
       79,    0,   86,    0,   88,   91,    0,  112,  112,    9,
      112,   15,  112,   22,  112,   25,  112,   30,   32,   33,
      112,   44,   48,  112,  112,  112,   65,  112,   71,  112,
      112,   76,   79,  112,   86,  112,   88,   91,  112,  136,
      120,  120,    9,  120,   15,  120,   22,  120,   25,  120,
       30,   32,   33,  120,   44,   48,  120,  120,  120,   65,
      120,   71,  120,  120,   76,   79,  120,   86,  120,   88,
       91,  120,  136,  143,  143,  146,  146,    9,  146,   15,

      146,   22,  146,   25,  146,   30,   32,   33,  146,   44,
       48,  146,  146,  146,   65,  146,   71,  146,  146,   76,
       79,  146,   86,  146,   88,   91,  146,    0,    8,   11,
        0,    0,    0,   40,   49,    0,   62,   27,    0,    0,
        0,   87,   92,  112,    8,   11,  112,  112,  112,   40,
       49,  112,   62,   27,  112,  112,  112,   87,   92,  125,
      120,    8,   11,  120,  120,  120,   40,   49,  120,   62,
       27,  120,  120,  120,   87,   92,  131,  143,  146,    8,
       11,  146,  146,  146,   40,   49,  146,   62,   27,  146,
      146,  146,   87,   92,    7,    0,   24,    0,    0,    0,

       75,    0,    7,  112,   24,  112,  112,  112,   75,  112,
        7,  120,   24,  120,  120,  120,   75,  120,    7,  146,
       24,  146,  146,  146,   75,  146,    0,    0,    0,   51,
       73,   83,  112,  112,  112,   51,   73,   83,  120,  120,
      120,   51,   73,   83,  146,  146,  146,   51,   73,   83,
        0,    0,    0,  112,  112,  112,  120,  120,  120,  146,
      146,  146,    0,    0,    0,  112,  112,  112,  120,  120,
      120,  146,  146,  146,   18,   19,   26,   18,   19,   26,
       18,   19,   26,   18,   19,   26,    0,  112,  120,  146,
        0,  112,  120,  146,    0,  112,  120,  146,    0,  112,

      120,  146,   20,   20,   20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1617] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  496, 3677,  359, 3677,  469, 3677, 3677, 3677,
     3677,  346,  341, 3677,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  415,  437,  350,
      447,  456,  455,  480,  412,  460,  392, 3677, 3677,  515,
      521,  526,  510,  529,  547,  541,  581,  589,  402,  456,
      538,  451,    0,  587,  534,  605,  632,  456,  603,  637,
      636,  645,  474,  654, 3677, 3677, 3677,    0,  702,  709,
      694,  714,  710,  758,  750,  769,  493,  536,  703,  534,
        0,  770,  642,  655,  806,  562,  771,  813,  817,  823,

      581,  712,  880,  887,  837,    0,  393,    0,  428, 3677,
        0,    0,    0,    0,  375, 3677,  617,    0,  480,  872,
      892,  888,  936,  928,  947,  581,  639,  881,  645,  948,
      839,  943,  984,  691,  994,  991,  999,  999,  717,  757,
     3677,  367,    0,  611, 3677,  437, 3677, 3677, 3677, 3677,
     3677, 3677,  715,  813,  729,  770,  818,  803,  822,  843,
      844, 3677,  851, 1001,  868,  878,  878, 1004,  886,  889,
      924,  935,  951,  972,  990, 1017,  989,  992, 1006, 1015,
     1033, 1041, 1039, 1034, 1051, 1044, 3677, 1050, 1041, 1055,
     1054, 1052, 1048, 1055, 1050, 1051, 1061, 1068, 1063, 1056,

     1074, 1059, 1079, 1109, 1077, 1079, 1094, 1098, 1097, 1103,
     1112, 1105, 1098, 1112, 1118, 1115, 1113, 1121, 1107, 3677,
     1169, 1173, 1178, 1187,    0,    0, 1116, 1172, 1126, 1123,
     1181, 1165, 1172, 1172, 1173,    0, 1170, 1177, 1176, 1174,
     1173, 1182, 1176, 1175, 1180, 1181, 1198, 1201, 1201, 1229,
     1196, 1192, 1196, 1216, 1221, 1229, 1227, 1221, 1238, 1231,
        0, 1237, 1228, 1242, 1241, 1235, 1233, 1241, 1236, 1238,
     1247, 1254, 1250, 1244, 1262, 1248, 1268, 1289, 1287, 1284,
     1287, 1287, 1283, 1289, 1298, 1291, 1284, 1297, 1305, 1301,
     1299, 1307, 1293,    0, 1355, 1363, 1369, 1373, 1380, 1389,

        0, 1302, 1355, 1312, 1309, 1367, 1356, 1372, 1372, 1375,
        0, 1372, 1379, 1378, 1376, 1375, 1384, 1378, 1377, 1382,
     1383, 1400, 1403, 1403, 1408, 1398, 1394, 1398, 1400, 1413,
     1422, 1421, 1416, 1437, 1430,    0, 1436, 1429, 1445, 1441,
     1439, 1435, 1442, 1438, 1440, 1449, 1456, 1452, 1446, 1464,
     1449, 1469, 1491, 1464, 1463, 1489, 1463, 1468, 1483, 1497,
     1490, 1485, 1499, 1503, 1502, 1500, 1508, 1494, 1556, 1534,
     1560, 1564, 1575, 1583, 1589, 1594,    0,  690,    0, 1615,
        0,    0,    0,    0,    0,    0, 1504, 1581, 1514, 1526,
     1531, 1554, 1565, 1576, 1581,    0, 1578, 1586, 1583, 1583,

     1582, 1593, 1585, 1589, 1597, 1598, 1614, 1616, 1616, 1620,
     1610, 1606, 1617, 1619, 1623, 1628, 1628, 1622, 1643, 1640,
        0, 1646, 1637, 1651, 1651, 1649, 1650, 1651, 1648, 1651,
     1663, 1670, 1665, 1659, 1676, 1661, 1681, 1695, 1680, 1678,
     1695, 1682, 1683, 1689, 1707, 1700, 1693, 1709, 1713, 1712,
     1710, 1718, 1706,    0,  430, 3677, 3677, 3677, 3677, 3677,
     3677, 1718, 1709, 1732, 1732, 1723, 1733, 1724, 1725, 1721,
     1727, 1743, 1749, 1753, 1739, 1758, 1748, 1765, 3677, 1770,
     1754, 1768, 1756, 1757, 1759, 1778, 1757, 1768, 1772, 1765,
     1778, 3677, 1785, 1786, 1816, 1779, 1775, 1776, 1792, 1789,

     1796, 1803, 3677, 3677, 1791, 3677, 1802, 1798, 1793, 1814,
     1823, 1824, 1823, 1821, 1813, 1828, 1825, 1833, 3677, 1834,
     1831, 3677, 1828, 1839, 1840, 1834, 1834, 1852, 1840, 1834,
     1853, 1858, 1853, 1899, 1903, 1919, 1923, 1927,    0,    0,
        0,    0,    0,    0, 1859, 1852, 1880, 1898, 1890, 1918,
     1890, 1892, 1905, 1907, 1921, 1922, 1925, 1910, 1931, 1917,
     1931,    0, 1938, 1922, 1936, 1923, 1924, 1925, 1944, 1923,
     1934, 1936, 1928, 1941,    0, 1946, 1953, 1986, 1946, 1941,
     1944, 1961, 1973, 1976, 1981,    0,    0, 1964,    0, 1974,
     1969, 1967, 1985, 1991, 1992, 1991, 1987, 1979, 1994, 1991,

     1999,    0, 2000, 1997,    0, 1993, 2003, 2004, 2001, 1996,
     2018, 2008, 2003, 2037, 2028, 2033, 2062, 2066, 2070, 2084,
     2092, 2099, 2103, 2107,    0,    0,    0,    0,    0, 2032,
     2021, 2051, 2072, 2071, 2100, 2093, 2093, 2089, 2091, 2105,
     2106, 2110, 2094, 2113, 2099, 2112,    0, 2118, 2103, 2117,
     2104, 2105, 2106, 2125, 2104, 2115, 2117, 2109, 2122,    0,
     2127, 2136, 2167, 2133, 2143, 2144, 2160, 2157, 2160, 2165,
        0,    0, 2148,    0, 2159, 2154, 2149, 2166, 2172, 2173,
     2172, 2168, 2160, 2175, 2172, 2180,    0, 2181, 2178,    0,
     2174, 2184, 2185, 2205, 2185, 2204, 2207, 2202, 2221, 2211,

     2218, 2238, 2243, 2251, 2269, 2247, 2276, 2280, 2284, 2302,
     2294, 2306, 2326,    0,    0,    0,    0,    0,    0, 2272,
     2267, 2290, 2290, 2290, 2303, 2292, 2293, 2290, 2295, 2309,
     2310, 2313, 2297, 2316, 2308, 2322,    0, 2327, 2311, 2325,
     2313, 2314, 2316, 2338, 2317, 2328, 2336, 2328, 2341,    0,
     2346, 2350, 2368, 2346, 2345, 2346, 2362, 2362, 2365, 2371,
        0,    0, 2354,    0, 2364, 2362, 2357, 2376, 2381, 2382,
     2381, 2378, 2370, 2384, 2381, 2392,    0, 2393, 2390,    0,
     2392, 2402, 2403, 2408, 2395, 2412, 2404, 2403, 2426, 2416,
     2423, 2409, 2428, 2421, 3677, 2435, 3677, 3677, 2432, 2423,

     2425, 2440, 3677, 2426, 3677, 2439, 2437, 2438, 3677, 2435,
     2430, 2440, 2437, 2459, 2445, 2446, 2466, 3677, 3677, 2455,
     2462, 2463, 2464,  408, 2480, 3677, 3677, 3677, 3677, 3677,
     2463, 3677, 2480, 2471, 2471, 2486, 3677, 2477, 2479, 2481,
     2488, 3677, 2484, 2483, 2502, 2503, 3677, 2493, 3677, 2489,
     3677, 2495, 2492, 2499, 2495, 2515, 2518, 2516, 3677, 2520,
     3677, 2553, 2563, 2567, 2571, 2516, 2535, 2523,    0, 2544,
        0,    0, 2541, 2547, 2552, 2567,    0, 2553,    0, 2565,
     2563, 2564,    0, 2561, 2555, 2565, 2562, 2578, 2564, 2565,
     2585,    0,    0, 2571, 2574, 2571, 2572,  376, 2590,    0,

        0,    0,    0,    0, 2571,    0, 2584, 2575, 2575, 2590,
        0, 2583, 2581, 2589, 2612,    0, 2611, 2610, 2629, 2629,
        0, 2619,    0, 2615,    0, 2621, 2617, 2624, 2620, 2634,
     2637, 2635,    0, 2639,    0, 2653, 2657, 2682, 2686, 2691,
     2695, 2642, 2661, 2673,    0, 2687,    0,    0, 2684, 2677,
     2679, 2694,    0, 2680,    0, 2692, 2690, 2691,    0, 2688,
     2680, 2690, 2687, 2703, 2689, 2690, 2710,    0,    0, 2696,
     2699, 2696, 2697,  372, 2738,    0,    0,    0,    0,    0,
     2697,    0, 2710, 2701, 2704, 2719,    0, 2734, 2732, 2733,
     2741,    0, 2737, 2737, 2756, 2756,    0, 2746,    0, 2742,

        0, 2748, 2742, 2749, 2745, 2759, 2762, 2760,    0, 2764,
        0, 2778, 2807, 2811, 2815, 2822, 2826, 2830, 2848, 2805,
     2824, 2812,    0, 2826,    0,    0, 2823, 2813, 2815, 2830,
        0, 2816,    0, 2828, 2826, 2827,    0, 2828, 2820, 2830,
     2827, 2843, 2829, 2830, 2850,    0,    0, 2836, 2839, 2836,
     2837,  366, 2878,    0,    0,    0,    0,    0, 2849,    0,
     2862, 2853, 2853, 2881,    0, 2872, 2870, 2871, 2877,    0,
     2873, 2872, 2891, 2891,    0, 2881,    0, 2878,    0, 2888,
     2882, 2889, 2885, 2899, 2902, 2900,    0, 2904,    0, 2909,
     2906, 2887, 2912, 2907, 3677, 3677, 2914, 2924, 2916, 2938,

     2929, 2940, 3677, 2926, 2928, 3677, 3677, 3677, 2930, 3677,
     2942, 3677, 2930, 3677, 2946, 2933, 3677, 3677, 2952, 3677,
     2934, 2941, 3677, 3677, 2959, 2942, 3677, 2961, 2943, 2957,
     2945, 3677, 2961, 2944, 2963, 3677, 2950, 2969, 3677, 2970,
     2980, 2961, 2986, 2968,    0,    0, 2987, 2997, 2989, 2999,
     2990, 3001,    0, 2987, 2989,    0,    0,    0, 2991,    0,
     3003,    0, 2991,    0, 3007, 2994,    0,    0, 3017,    0,
     2999, 3006,    0,    0, 3020, 3003,    0, 3022, 3004, 3018,
     3006,    0, 3022, 3005, 3024,    0, 3024, 3043,    0,  854,
     3067, 3044, 3041, 3038, 3063, 3045,    0,    0, 3052, 3062,

     3054, 3064, 3055, 3066,    0, 3056, 3058,    0,    0,    0,
     3060,    0, 3072,    0, 3060,    0, 3076, 3063,    0,    0,
     3082,    0, 3064, 3071,    0,    0, 3085, 3068,    0, 3087,
     3069, 3083, 3071,    0, 3096, 3079, 3098,    0, 3085, 3120,
        0, 3130, 1143, 3134, 3142, 3137, 3134, 3115, 3140, 3122,
        0,    0, 3129, 3139, 3131, 3141, 3132, 3143,    0, 3129,
     3132,    0,    0,    0, 3134,    0, 3146,    0, 3134,    0,
     3150, 3137,    0,    0, 3156,    0, 3138, 3145,    0,    0,
     3159, 3142,    0, 3161, 3143, 3157, 3145,    0, 3161, 3156,
     3191,    0, 3178, 3197,    0, 3181, 3186, 3677, 3187, 3677,

     3182, 3677, 3200, 3677, 3188, 3677, 3677, 3677, 3201, 3677,
     3677, 3188, 3202, 3197, 3677, 3191, 3677, 3202, 3209, 3677,
     3677, 3212, 3677, 3200, 3677, 3677, 3197, 3198, 3203,    0,
     3204,    0, 3199,    0, 3217,    0, 3205,    0,    0,    0,
     3218,    0,    0, 3205, 3219, 3225,    0, 3235,    0, 3246,
     3253,    0,    0, 3256,    0, 3244,    0,    0, 3241, 3268,
     3246, 3251,    0, 3253,    0, 3248,    0, 3266,    0, 3254,
        0,    0,    0, 3267,    0,    0, 3254, 3268, 3262,    0,
     3256,    0, 3267, 3274,    0,    0, 3277,    0, 3265,    0,
        0, 3262, 3297, 3318, 3322, 3277, 3304,    0, 3305,    0,

     3300,    0, 3318,    0, 3306,    0,    0,    0, 3319,    0,
        0, 3307, 3321, 3315,    0, 3309,    0, 3320, 3327,    0,
        0, 3330,    0, 3318,    0,    0, 3315, 3330, 3677, 3677,
      315, 3315, 3316, 3677, 3677, 3334, 3677, 3677, 3316, 3328,
     3327, 3677, 3677, 3337,    0,    0,  218, 3322, 3323,    0,
        0, 3341,    0,    0, 3323, 3335, 3340,    0,    0, 3384,
     3376,    0,    0,  211, 3361, 3363,    0,    0, 3381,    0,
        0, 3363, 3375, 3374,    0,    0, 3396, 3400, 3392,    0,
        0,  204, 3377, 3378,    0,    0, 3396,    0,    0, 3378,
     3390, 3389,    0,    0, 3677, 3399, 3677, 3395, 3385, 3401,

     3677, 3391,    0, 3404,    0, 3402, 3397, 3413,    0, 3404,
        0, 3418,    0, 3412, 3403, 3434,    0, 3425,    0, 3438,
        0, 3434, 3424, 3440,    0, 3438, 3454, 3447, 3442, 3677,
     3677, 3677, 3458, 3451, 3446,    0,    0,    0, 3461, 3454,
     3449,    0,    0,    0, 3464, 3457, 3454,    0,    0,    0,
     3455, 3463, 3463, 3458, 3466, 3466, 3461, 3469, 3482, 3477,
     3486, 3486, 3496, 3497, 3484, 3507, 3508, 3495, 3510, 3511,
     3498, 3513, 3514, 3501, 3677, 3502, 3677,    0, 3503,    0,
        0, 3504,    0,    0, 3505,    0, 3507, 3513, 3514, 3515,
     3535, 3536, 3537, 3538, 3527, 3541, 3542, 3544, 3542, 3543,

     3544, 3545, 3677,    0,    0,    0, 3677, 3611, 3617, 3622,
     3631, 3640, 3649,  245, 3658, 3667
    } ;

static const flex_int16_t yy_def[1617] =
    {   0,
     1607,    1, 1607,    3, 1607,    5,    5,    5,    5,    5,
     1607,   11, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1607, 1607, 1607, 1609, 1609, 1609,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1609, 1609, 1611, 1612, 1612, 1612, 1612, 1607,
     1612, 1612, 1612, 1612, 1612, 1607, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1607, 1612, 1612, 1607, 1607, 1613, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1614, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1609, 1609,
     1609, 1609, 1609, 1609, 1611, 1611, 1612, 1612, 1612, 1615,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1613, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1614, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1607, 1609, 1609, 1609,
     1609, 1609, 1607, 1609, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1607, 1609, 1609, 1609, 1609, 1609, 1607, 1609, 1611,
     1607, 1611, 1615, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1607, 1609, 1607, 1609, 1609,
     1607, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1607, 1607, 1609, 1609, 1609, 1607, 1616, 1611, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1609,
     1607, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1607, 1609, 1616, 1616, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1609,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1609, 1616, 1616, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1609,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1609, 1616, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1607, 1607, 1607, 1607,
     1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608, 1610, 1610,
     1610, 1610, 1610, 1610, 1612, 1612, 1612, 1612, 1612, 1612,
     1607, 1607, 1607, 1608, 1608, 1608, 1610, 1610, 1610, 1612,
     1612, 1612, 1607, 1607, 1607, 1608, 1608, 1608, 1610, 1610,
     1610, 1612, 1612, 1612, 1607, 1607, 1607, 1608, 1608, 1608,
     1610, 1610, 1610, 1612, 1612, 1612, 1607, 1608, 1610, 1612,
     1607, 1608, 1610, 1612, 1607, 1608, 1610, 1612, 1607, 1608,

     1610, 1612, 1607, 1608, 1610, 1612,    0, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607
    } ;

static const flex_int16_t yy_nxt[3761] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      539,   78,  104,  104,  104,  104,  103, 1520,   78,  104,
      104,  104,  104,   19, 1512,   19,  105,  105,  105,  105,
       19, 1504,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1496,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1270,  164,  161,  170,  165,
      380, 1216,  166,  203,  378, 1164,  144,  162,  153,  381,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  203,  172,  186,  173,  162, 1114,  178,  187,
      174,  179,  456,  175,  180,  176,  193,  181,  217,  456,
      182,  195,  189,  171,  194,  257,  190,  454,  185,  177,
      191,  379,  172,  186,  173,  196,  192,  178,  187,  174,
      179,  197,  175,  180,  176,  193,  181,  217,  198,  182,
      195,  189,  220,  194,  257,  190,  199,  204,  200,  191,
      201,  205,  258,  202,  196,  192,  207,  206,  211,  212,
      197,  262,  145,  218,  219, 1607,  208,  198,  213,  277,

      291,  209,  210,  385,  386,  199,  204,  200, 1607,  201,
      205,  258,  202, 1607, 1607,  207,  206,  211,  212,  214,
      262,  215,  218,  219,  216,  208, 1607,  213,  277,  291,
      209,  210,  221,  221,  221,  221,  332,  222,  223,  223,
      223,  223,  222,  223,  223,  223,  223,  227,  214,  228,
      215,  224, 1607,  216,  229,  231,  224,  230, 1607,  232,
      267, 1607,  333,  233, 1607,  332,  234,  241,  268,  235,
      225,  242,  259,  237,  337,  243,  227,  260,  228,  236,
      224,  244,  261,  229,  231,  224,  230,  238,  232,  267,
      239,  333,  233,  240, 1607,  234,  241,  268,  235,  225,

      242,  259,  237,  337,  243,  352,  260,  366,  236,  245,
      244,  261,  144,  263,  144,  251,  238,  264,  246,  239,
      247,  265,  240,  252,  417,  248,  253,  266,  249,  254,
      250,  269,  255,  278,  352,  256,  366,  279,  245,  382,
      383,  384,  263,  280,  251,  270,  264,  246, 1607,  247,
      265,  271,  252,  417,  248,  253,  266,  249,  254,  250,
      269,  255,  278,  272,  256,  418,  279,  281,  342,  285,
      286,  273,  280,  274,  270,  275,  343,  282,  276,  287,
      271,  344,  283,  284,  288,  422,  289,  292,  293,  290,
     1607,  378,  272,  144,  418,  345,  281,  342,  285,  286,

      273,  346,  274, 1607,  275,  343,  282,  276,  287, 1607,
      344,  283,  284,  288,  422,  289,  292,  293,  290,  295,
      295,  295,  295,  297,  345,  298,  299,  299,  299,  299,
      346,  302,  296,  303,  437, 1607,  312,  334,  304,  300,
      306,  305,  335,  451,  307,  367,  368,  336,  308, 1607,
      313,  309,  457,  314,  310, 1607,  315,  460, 1607, 1607,
      302,  296,  303,  437,  311,  312,  334,  304,  300,  306,
      305,  335,  451,  307,  367,  368,  336,  308,  320,  313,
      309,  457,  314,  310,  316,  315,  460,  321,  317,  322,
      452,  453,  318,  311,  323,  326,  338,  324,  319,  325,

      339,  353,  461,  327,  340,  354,  328,  320, 1607,  329,
      341,  355,  330,  316, 1607,  331,  321,  317,  322,  452,
      453,  318, 1607,  323,  326,  338,  324,  319,  325,  339,
      353,  461,  327,  340,  354,  328, 1607,  347,  329,  341,
      355,  330,  458,  356,  331,  348,  462,  349,  463,  350,
      360,  361,  351,  357,  376,  376,  376,  376,  358,  359,
      362,  464,  363,  459,  364,  427,  347,  365,  297, 1607,
     1360,  458,  356,  428,  348,  462,  349,  463,  350,  360,
      361,  351,  357,  465,  466, 1607, 1607,  358,  359,  362,
      464,  363,  459,  364,  427,  467,  365,  369,  369,  369,

      369,  371,  428,  372,  373,  373,  373,  373,  470,  387,
      370,  388,  465,  466,  397,  419,  389,  374,  391,  390,
      420,  471,  392,  472,  467,  421,  393, 1607,  398,  394,
      475,  399,  395, 1607,  400,  476, 1607,  470,  387,  370,
      388, 1607,  396,  397,  419,  389,  374,  391,  390,  420,
      471,  392,  472, 1607,  421,  393,  405,  398,  394,  475,
      399,  395,  401,  400,  476,  406,  402,  407,  477,  429,
      403,  396,  408,  411,  423,  409,  404,  410,  424,  478,
      479,  412,  425,  430,  413,  405, 1607,  414,  426,  431,
      415,  401, 1607,  416,  406,  402,  407,  477,  429,  403,

      480,  408,  411,  423,  409,  404,  410,  424,  478,  479,
      412,  425,  430,  413, 1607,  432,  414,  426,  431,  415,
      481,  441,  416,  433,  438,  434,  484,  435,  439,  480,
      436,  442,  445,  446,  440,  485,  443,  444,  448,  468,
      449,  473,  447,  450,  432,  482,  486,  469,  474,  481,
      441,  483,  433,  438,  434,  484,  435,  439,  487,  436,
      442,  445,  446,  440,  485,  443,  444,  448,  468,  449,
      473,  447,  450,  488,  482,  486,  469,  474,  489,  490,
      483,  491,  492,  493,  496,  497,  498,  487,  494,  495,
      499,  501,  500,  502,  504,  505,  506,  503,  507,  508,

      509,  510,  488,  511,  512,  513, 1607,  489,  490,  516,
      491,  492,  493,  496,  497,  498,  517,  494,  495,  499,
      501,  500,  502,  504,  505,  506,  503,  507,  508,  509,
      510,  518,  511,  512,  513,  514,  520,  515,  516,  519,
      521,  522,  523,  524,  525,  517,  526,  528,  527,  529,
      530,  532,  533,  540,  543,  544,  531, 1393, 1607,  372,
      518, 1607, 1607, 1607,  514,  520,  515, 1607,  519,  521,
      522,  523,  524,  525, 1607,  526,  528,  527,  529,  530,
      532,  533,  540,  543,  544,  531,  221,  221,  221,  221,
      535,  535,  535,  535,  222,  223,  223,  223,  223,  534,

      537,  541,  537,  536,  538,  538,  538,  538,  224,  545,
      546,  547,  548,  549,  550,  551,  553,  554,  555,  556,
      558,  559,  542,  552,  560,  561,  557,  562,  534,  563,
      541,  564,  536,  567, 1607,  568,  569,  224,  545,  546,
      547,  548,  549,  550,  551,  553,  554,  555,  556,  558,
      559,  542,  552,  560,  561,  557,  562,  565,  563,  570,
      564,  571,  567,  566,  568,  569,  572,  573,  574,  575,
      576,  579,  580,  581,  584,  577,  578,  582,  585,  583,
      587,  588,  586,  589,  590,  591,  565,  592,  570,  593,
      571,  594,  566,  595,  596,  572,  573,  574,  575,  576,

      579,  580,  581,  584,  577,  578,  582,  585,  583,  587,
      588,  586,  589,  590,  591,  597,  592,  598,  593,  599,
      594,  600,  595,  596,  601,  603,  604,  605,  606,  607,
      608,  609,  602,  610,  611,  612,  613,  615,  616,  625,
      628,  629,  614, 1607,  597, 1607,  598, 1607,  599, 1607,
      600, 1607, 1607,  601,  603,  604,  605,  606,  607,  608,
      609,  602,  610,  611,  612,  613,  615,  616,  625,  628,
      629,  614,  295,  295,  295,  295,  617, 1607,  617, 1607,
      618,  618,  618,  618,  626,  296,  619,  619,  619,  619,
      620,  620,  620,  620,  297,  630,  298,  622,  622,  622,

      622,  631,  623,  621,  623,  627,  624,  624,  624,  624,
      300,  632,  633,  626,  296,  634,  635,  636,  638,  639,
      640,  641,  643,  644,  630,  637,  645,  646,  642,  647,
      631,  648,  621,  649,  627,  652,  650,  653,  654,  300,
      632,  633,  651,  655,  634,  635,  636,  638,  639,  640,
      641,  643,  644,  656,  637,  645,  646,  642,  647,  657,
      648,  658,  649,  659,  652,  650,  653,  654,  660,  661,
      664,  651,  655,  665,  662,  663,  666,  667,  669,  668,
      670,  672,  656,  673,  671,  674,  675,  676,  657,  677,
      658,  678,  659,  679,  680,  681,  684,  660,  661,  664,

      685,  688,  665,  662,  663,  666,  667,  669,  668,  670,
      672,  689,  673,  671,  674,  675,  676,  682,  677,  683,
      678,  690,  679,  680,  681,  684,  686,  691,  692,  685,
      688,  693,  696,  694,  687,  695,  697,  698,  700,  701,
      689,  715,  718,  699, 1607, 1607,  682,  702,  683,  702,
      690,  703,  703,  703,  703,  686,  691,  692,  719,  720,
      693,  696,  694,  687,  695,  697,  698,  700,  701, 1607,
      715,  718,  699,  369,  369,  369,  369,  704,  704,  704,
      704,  706,  706,  706,  706, 1607,  370,  719,  720,  371,
      705,  372,  707,  707,  707,  707,  708,  711,  708,  721,

      709,  709,  709,  709,  722,  374,  710,  710,  710,  710,
      716,  712,  712,  712,  712,  370,  723,  714,  455,  705,
      455,  724,  725,  728,  726,  455,  729,  730,  721,  733,
      731,  717,  727,  722,  374,  734,  455,  732, 1607,  716,
      455,  735,  736,  737,  738,  723,  739,  742,  740,  743,
      724,  725,  728,  726,  741,  729,  730,  744,  733,  731,
      717,  727,  745,  746,  734,  747,  732,  455,  748,  749,
      735,  736,  737,  738,  750,  739,  742,  740,  743,  751,
      754,  755,  756,  741,  752,  753,  744,  757,  759,  758,
      762,  745,  746,  763,  747,  760,  764,  748,  749,  761,

      765,  766,  767,  750,  768,  769,  770,  771,  751,  754,
      755,  756,  774,  752,  753,  775,  757,  759,  758,  762,
      778,  772,  763,  773,  760,  764,  779,  780,  761,  765,
      766,  767,  776,  768,  769,  770,  771,  781,  782,  783,
      777,  774,  786,  784,  775,  785,  787,  788,  790,  778,
      772,  791,  773,  789,  792,  779,  780,  793,  794,  795,
      796,  776,  799,  797,  800,  801,  781,  782,  783,  777,
      802,  786,  784,  803,  785,  787,  788,  790,  798,  804,
      791,  805,  789,  792,  806,  807,  793,  794,  795,  796,
      808,  799,  797,  800,  801,  809,  810,  811,  812,  802,

      813,  814,  803,  815,  816,  817,  818,  798,  804,  819,
      805,  820,  821,  806,  807,  822,  823, 1607,  827,  808,
      828,  829,  830,  831,  809,  810,  811,  812,  832,  813,
      814,  833,  815,  816,  817,  818,  824,  834,  819,  835,
      820,  821,  836,  837,  822,  823,  825,  827,  838,  828,
      829,  830,  831,  839,  840,  841,  826,  832,  842,  843,
      833,  844,  845,  846,  847,  848,  834,  849,  835,  850,
      851,  836,  837,  854,  852,  825,  853,  838,  855,  856,
      857,  858,  839,  840,  841,  826,  861,  842,  843, 1607,
      844,  845,  846,  847,  848,  866,  849,  859,  850,  851,

      867,  860,  854,  852, 1607,  853,  868,  855,  856,  857,
      858, 1607,  862, 1607,  862,  861,  863,  863,  863,  863,
      535,  535,  535,  535,  866,  869,  859,  870,  873,  867,
      860,  874,  864,  536,  864,  868,  865,  865,  865,  865,
      538,  538,  538,  538,  538,  538,  538,  538,  871,  875,
      876,  877,  878,  879,  869,  880,  870,  873,  881,  882,
      874,  883,  536,  872,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  893,  894,  895,  896,  871,  875,  876,
      877,  878,  879,  897,  880,  901,  902,  881,  882,  903,
      883,  904,  872,  884,  885,  886,  887,  888,  889,  890,

      891,  892,  893,  894,  895,  896,  898,  905,  906,  907,
      908,  909,  897,  910,  901,  902,  899,  911,  903,  912,
      904,  913,  914,  915,  916,  917,  900,  918,  919,  920,
      921,  922,  923,  924,  925,  928,  905,  906,  907,  908,
      909,  926,  910,  927,  929,  899,  911,  930,  912,  931,
      913,  914,  915,  916,  917,  900,  918,  919,  920,  921,
      922,  923,  924,  925,  928,  932,  935,  933,  942,  943,
      926,  934,  927,  929, 1607, 1607,  930,  944,  931,  936,
      936,  936,  936,  618,  618,  618,  618,  937,  937,  937,
      937, 1607, 1607, 1607,  932,  935,  933,  942,  943,  945,

      934,  620,  620,  620,  620,  938,  944,  938,  946,  939,
      939,  939,  939,  297,  621,  298,  940,  940,  940,  940,
      941,  941,  941,  941,  624,  624,  624,  624,  945,  300,
      947,  949,  950,  951,  952,  953,  954,  946,  955,  956,
      957,  958,  959,  621,  960,  948,  961,  962,  963,  964,
      965,  966,  967,  968,  969,  970,  971,  972,  300,  947,
      949,  950,  951,  952,  953,  954,  973,  955,  956,  957,
      958,  959,  977,  960,  948,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  974,  978,  979,
      980,  981,  982,  983,  984,  973,  985,  975,  986,  987,

      988,  977,  989,  990,  991,  992,  993,  976,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1607,  978,  979,  980,
      981,  982,  983,  984, 1004,  985,  975,  986,  987,  988,
     1005,  989,  990,  991,  992,  993,  976,  994,  995,  996,
      997,  998,  999, 1000, 1001, 1002, 1006, 1003, 1007, 1008,
     1009, 1011, 1607, 1004, 1010, 1012, 1012, 1012, 1012, 1005,
      703,  703,  703,  703, 1015, 1015, 1015, 1015,  704,  704,
      704,  704, 1607, 1607, 1002, 1006, 1003, 1007, 1008, 1009,
     1011,  705, 1013, 1010, 1013, 1607, 1014, 1014, 1014, 1014,
      371, 1607,  372, 1016, 1016, 1016, 1016, 1017, 1017, 1017,

     1017,  709,  709,  709,  709,  711,  374, 1607, 1020,  711,
      705, 1018, 1018, 1018, 1018, 1021, 1022, 1023, 1607,  710,
      710,  710,  710, 1019, 1019, 1019, 1019, 1024,  714,  455,
     1027,  455, 1028, 1025, 1029,  374,  455, 1020, 1030, 1031,
     1032, 1033, 1034, 1035, 1021, 1022, 1023,  455, 1026, 1607,
     1036,  455, 1037, 1038, 1039, 1040, 1024, 1041, 1042, 1027,
     1043, 1028, 1025, 1029, 1044, 1045, 1046, 1030, 1031, 1032,
     1033, 1034, 1035, 1047, 1048, 1049, 1050, 1026,  455, 1036,
     1051, 1037, 1038, 1039, 1040, 1055, 1041, 1042, 1052, 1043,
     1056, 1057, 1058, 1044, 1045, 1046, 1059, 1060, 1053, 1061,

     1062, 1063, 1047, 1048, 1049, 1050, 1064, 1065, 1054, 1051,
     1066, 1067, 1068, 1069, 1055, 1070, 1071, 1072, 1073, 1056,
     1057, 1058, 1074, 1075, 1076, 1059, 1060, 1053, 1061, 1062,
     1063, 1077, 1078, 1079, 1082, 1064, 1065, 1054, 1083, 1066,
     1067, 1068, 1069, 1084, 1070, 1071, 1072, 1073, 1080, 1085,
     1081, 1074, 1075, 1076, 1086, 1087, 1089, 1090, 1091, 1088,
     1077, 1078, 1079, 1082, 1092, 1093, 1094, 1083, 1095, 1096,
     1097, 1098, 1084, 1099, 1100, 1101, 1102, 1080, 1085, 1081,
     1103, 1104, 1105, 1086, 1087, 1089, 1090, 1091, 1088, 1106,
     1107, 1108, 1109, 1092, 1093, 1094, 1110, 1095, 1096, 1097,

     1098, 1111, 1099, 1100, 1101, 1102, 1112, 1113, 1117, 1103,
     1104, 1105, 1115, 1118, 1119, 1120, 1121, 1122, 1106, 1107,
     1108, 1109, 1123, 1116, 1124, 1110, 1125, 1126, 1127, 1128,
     1111, 1129, 1130, 1131, 1132, 1112, 1113, 1117, 1133, 1134,
     1135, 1115, 1118, 1119, 1120, 1121, 1122, 1136, 1137, 1138,
     1139, 1123, 1116, 1124, 1607, 1125, 1126, 1127, 1128, 1607,
     1129, 1130, 1131, 1132, 1140, 1141, 1142, 1133, 1134, 1135,
      863,  863,  863,  863, 1143, 1144, 1136, 1137, 1138, 1139,
      863,  863,  863,  863,  865,  865,  865,  865,  865,  865,
      865,  865, 1145, 1140, 1141, 1142, 1146, 1147, 1148, 1149,

     1150, 1151, 1152, 1143, 1144, 1153, 1154, 1155, 1156, 1157,
     1158, 1159, 1160, 1161, 1162, 1163, 1167, 1168, 1169, 1170,
     1171, 1145, 1165, 1172, 1173, 1146, 1147, 1148, 1149, 1150,
     1151, 1152, 1174, 1166, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1167, 1168, 1169, 1170, 1171,
     1175, 1165, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1174, 1166, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
      936,  936,  936,  936, 1190, 1190, 1190, 1190, 1607, 1175,
     1607, 1607, 1607, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1192, 1193, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191,

     1191, 1191, 1191,  939,  939,  939,  939,  298,  940,  940,
      940,  940,  941,  941,  941,  941, 1194, 1195, 1196, 1192,
     1193,  300, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1607, 1219, 1220, 1221, 1194, 1195, 1196, 1222, 1223,
      300, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1217, 1219, 1220, 1221, 1224, 1225, 1226, 1222, 1223, 1227,
     1228, 1218, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
     1237, 1238, 1239, 1240, 1241, 1012, 1012, 1012, 1012, 1217,

     1607, 1607, 1607, 1224, 1225, 1226, 1607, 1607, 1227, 1228,
     1218, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1242, 1242, 1242, 1014, 1014,
     1014, 1014, 1243, 1243, 1243, 1243,  371, 1607, 1607, 1016,
     1016, 1016, 1016, 1017, 1017, 1017, 1017, 1245, 1245, 1245,
     1245,  711,  374, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257,  710,  710,  710,  710, 1258,
     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269,  374, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1273, 1274, 1275, 1276, 1258, 1259,

     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1271, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1272, 1287, 1273, 1274, 1275, 1276, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1271,
     1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
     1272, 1287, 1300, 1301, 1302, 1303, 1288, 1289, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1300, 1301, 1302, 1303, 1317, 1318, 1319, 1320, 1321,
     1322, 1323, 1324, 1325, 1326, 1327, 1328, 1304, 1305, 1306,

     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1329, 1330, 1331, 1332, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1329,
     1330, 1331, 1332, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1358, 1359,
     1361, 1362, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1355, 1356, 1357, 1191, 1191, 1191, 1191, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1358, 1359, 1361,

     1362, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1388, 1389, 1390, 1391,
     1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
     1382, 1383, 1384, 1385, 1386, 1387, 1392, 1242, 1242, 1242,
     1242, 1394, 1394, 1394, 1394, 1388, 1389, 1390, 1391, 1395,
     1395, 1395, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1392, 1408, 1409, 1410, 1411,
     1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
     1422, 1423, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,

     1404, 1405, 1406, 1407, 1424, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1424, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1453, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1454,
     1455, 1456, 1457, 1458, 1459, 1460, 1460, 1460, 1460, 1461,
     1462, 1453, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,

     1471, 1472, 1473, 1474, 1475, 1476, 1607, 1607, 1454, 1455,
     1456, 1457, 1458, 1459, 1477, 1477, 1477, 1477, 1461, 1462,
     1479, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1472, 1473, 1474, 1475, 1476, 1394, 1394, 1394, 1394, 1478,
     1478, 1478, 1478, 1480, 1481, 1482, 1483, 1484, 1485, 1479,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507,
     1508, 1509, 1480, 1481, 1482, 1483, 1484, 1485, 1510, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507, 1508,

     1509, 1460, 1460, 1460, 1460, 1511, 1513, 1510, 1514, 1515,
     1516, 1517, 1518, 1477, 1477, 1477, 1477, 1394, 1394, 1394,
     1394, 1519, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1529,
     1530, 1531, 1532, 1533, 1511, 1513, 1535, 1514, 1515, 1516,
     1517, 1518, 1536, 1537, 1528, 1538, 1541, 1539, 1542, 1534,
     1519, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1529, 1530,
     1531, 1532, 1533, 1540, 1543, 1535, 1544, 1545, 1547, 1548,
     1549, 1536, 1537, 1528, 1538, 1541, 1539, 1542, 1534, 1550,
     1551, 1552, 1553, 1546, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1540, 1543, 1562, 1544, 1545, 1547, 1548, 1549,

     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1550, 1551,
     1552, 1553, 1546, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
     1561, 1571, 1572, 1562, 1573, 1574, 1575, 1576, 1577, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1578, 1579, 1580,
     1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
     1571, 1572, 1591, 1573, 1574, 1575, 1576, 1577, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1578, 1579, 1580, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1600,
     1601, 1591, 1602, 1603, 1604, 1605, 1606, 1592, 1593, 1594,
     1595, 1596, 1597, 1598, 1599, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1600, 1601,
     1607, 1602, 1603, 1604, 1605, 1606,  226, 1607,  226,  226,
      294, 1607,  294, 1607,  294,  301,  301,  301,  301,  301,
      301,  375, 1607,  375,  375,  375,  375,  375,  375,  375,
      377, 1607, 1607,  377,  377,  377, 1607,  377,  377,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  713,  713,
      713,  713,  713,  713,  713,  713,  713, 1244, 1607, 1244,
     1244, 1244, 1244, 1244, 1244, 1244,   13, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607
    } ;

static const flex_int16_t yy_chk[3761] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1614,    7,    7,    7,    7,    7,    8, 1482,    8,    8,
        8,    8,    8,    9, 1464,    9,    9,    9,    9,    9,
       10, 1447,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1431,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1052,   28,   27,   29,   28,
      115,  974,   28,   40,  107,  898,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,  824,   31,   34,
       30,   31,  455,   30,   31,   30,   37,   31,   45,  146,
       31,   38,   36,   30,   37,   59,   36,  142,   34,   31,
       36,  109,   30,   34,   30,   38,   36,   31,   34,   30,
       31,   38,   30,   31,   30,   37,   31,   45,   39,   31,
       38,   36,   47,   37,   59,   36,   39,   41,   39,   36,
       39,   41,   60,   39,   38,   36,   42,   41,   43,   43,
       38,   62,   17,   46,   46,   13,   42,   39,   43,   68,

       73,   42,   42,  119,  119,   39,   41,   39,    0,   39,
       41,   60,   39,    0,    0,   42,   41,   43,   43,   44,
       62,   44,   46,   46,   44,   42,    0,   43,   68,   73,
       42,   42,   50,   50,   50,   50,   87,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   53,   44,   53,
       44,   51,    0,   44,   53,   54,   52,   53,    0,   54,
       65,    0,   88,   54,    0,   87,   54,   56,   65,   54,
       51,   56,   61,   55,   90,   56,   53,   61,   53,   54,
       51,   56,   61,   53,   54,   52,   53,   55,   54,   65,
       55,   88,   54,   55,    0,   54,   56,   65,   54,   51,

       56,   61,   55,   90,   56,   96,   61,  101,   54,   57,
       56,   61,  144,   64,  144,   58,   55,   64,   57,   55,
       57,   64,   55,   58,  126,   57,   58,   64,   57,   58,
       57,   66,   58,   69,   96,   58,  101,   69,   57,  117,
      117,  117,   64,   69,   58,   66,   64,   57,    0,   57,
       64,   66,   58,  126,   57,   58,   64,   57,   58,   57,
       66,   58,   69,   67,   58,  127,   69,   70,   93,   71,
       71,   67,   69,   67,   66,   67,   93,   70,   67,   71,
       66,   94,   70,   70,   72,  129,   72,   74,   74,   72,
        0,  378,   67,  378,  127,   94,   70,   93,   71,   71,

       67,   94,   67,    0,   67,   93,   70,   67,   71,    0,
       94,   70,   70,   72,  129,   72,   74,   74,   72,   79,
       79,   79,   79,   80,   94,   80,   80,   80,   80,   80,
       94,   81,   79,   81,  134,    0,   83,   89,   81,   80,
       82,   81,   89,  139,   82,  102,  102,   89,   82,    0,
       83,   82,  153,   83,   82,    0,   83,  155,    0,    0,
       81,   79,   81,  134,   82,   83,   89,   81,   80,   82,
       81,   89,  139,   82,  102,  102,   89,   82,   85,   83,
       82,  153,   83,   82,   84,   83,  155,   85,   84,   85,
      140,  140,   84,   82,   85,   86,   92,   85,   84,   85,

       92,   97,  156,   86,   92,   97,   86,   85,    0,   86,
       92,   97,   86,   84,    0,   86,   85,   84,   85,  140,
      140,   84,    0,   85,   86,   92,   85,   84,   85,   92,
       97,  156,   86,   92,   97,   86,    0,   95,   86,   92,
       97,   86,  154,   98,   86,   95,  157,   95,  158,   95,
       99,   99,   95,   98,  105,  105,  105,  105,   98,   98,
       99,  159,  100,  154,  100,  131,   95,  100, 1190,    0,
     1190,  154,   98,  131,   95,  157,   95,  158,   95,   99,
       99,   95,   98,  160,  161,    0,    0,   98,   98,   99,
      159,  100,  154,  100,  131,  163,  100,  103,  103,  103,

      103,  104,  131,  104,  104,  104,  104,  104,  165,  120,
      103,  120,  160,  161,  122,  128,  120,  104,  121,  120,
      128,  166,  121,  167,  163,  128,  121,    0,  122,  121,
      169,  122,  121,    0,  122,  170,    0,  165,  120,  103,
      120,    0,  121,  122,  128,  120,  104,  121,  120,  128,
      166,  121,  167,    0,  128,  121,  124,  122,  121,  169,
      122,  121,  123,  122,  170,  124,  123,  124,  171,  132,
      123,  121,  124,  125,  130,  124,  123,  124,  130,  172,
      173,  125,  130,  132,  125,  124,    0,  125,  130,  132,
      125,  123,    0,  125,  124,  123,  124,  171,  132,  123,

      174,  124,  125,  130,  124,  123,  124,  130,  172,  173,
      125,  130,  132,  125,    0,  133,  125,  130,  132,  125,
      175,  136,  125,  133,  135,  133,  177,  133,  135,  174,
      133,  136,  137,  137,  135,  178,  136,  136,  138,  164,
      138,  168,  137,  138,  133,  176,  179,  164,  168,  175,
      136,  176,  133,  135,  133,  177,  133,  135,  180,  133,
      136,  137,  137,  135,  178,  136,  136,  138,  164,  138,
      168,  137,  138,  181,  176,  179,  164,  168,  182,  183,
      176,  184,  185,  186,  188,  189,  190,  180,  186,  186,
      191,  192,  191,  193,  194,  195,  196,  193,  197,  198,

      199,  200,  181,  201,  202,  203,    0,  182,  183,  205,
      184,  185,  186,  188,  189,  190,  206,  186,  186,  191,
      192,  191,  193,  194,  195,  196,  193,  197,  198,  199,
      200,  207,  201,  202,  203,  204,  208,  204,  205,  207,
      209,  210,  211,  212,  213,  206,  214,  215,  214,  216,
      217,  218,  219,  227,  229,  230,  217, 1243,    0, 1243,
      207,    0,    0,    0,  204,  208,  204,    0,  207,  209,
      210,  211,  212,  213,    0,  214,  215,  214,  216,  217,
      218,  219,  227,  229,  230,  217,  221,  221,  221,  221,
      222,  222,  222,  222,  223,  223,  223,  223,  223,  221,

      224,  228,  224,  222,  224,  224,  224,  224,  223,  231,
      232,  233,  234,  235,  237,  238,  239,  240,  241,  242,
      243,  244,  228,  238,  245,  246,  242,  247,  221,  248,
      228,  249,  222,  251,    0,  252,  253,  223,  231,  232,
      233,  234,  235,  237,  238,  239,  240,  241,  242,  243,
      244,  228,  238,  245,  246,  242,  247,  250,  248,  254,
      249,  255,  251,  250,  252,  253,  256,  257,  258,  259,
      260,  262,  263,  264,  266,  260,  260,  265,  267,  265,
      268,  269,  267,  270,  271,  272,  250,  273,  254,  274,
      255,  275,  250,  276,  277,  256,  257,  258,  259,  260,

      262,  263,  264,  266,  260,  260,  265,  267,  265,  268,
      269,  267,  270,  271,  272,  278,  273,  278,  274,  279,
      275,  280,  276,  277,  281,  282,  283,  284,  285,  286,
      287,  288,  281,  288,  289,  290,  291,  292,  293,  302,
      304,  305,  291,    0,  278,    0,  278,    0,  279,    0,
      280,    0,    0,  281,  282,  283,  284,  285,  286,  287,
      288,  281,  288,  289,  290,  291,  292,  293,  302,  304,
      305,  291,  295,  295,  295,  295,  296,    0,  296,    0,
      296,  296,  296,  296,  303,  295,  297,  297,  297,  297,
      298,  298,  298,  298,  299,  306,  299,  299,  299,  299,

      299,  307,  300,  298,  300,  303,  300,  300,  300,  300,
      299,  308,  309,  303,  295,  310,  312,  313,  314,  315,
      316,  317,  318,  319,  306,  313,  320,  321,  317,  322,
      307,  323,  298,  324,  303,  326,  325,  327,  328,  299,
      308,  309,  325,  329,  310,  312,  313,  314,  315,  316,
      317,  318,  319,  330,  313,  320,  321,  317,  322,  331,
      323,  332,  324,  333,  326,  325,  327,  328,  334,  335,
      337,  325,  329,  338,  335,  335,  339,  340,  341,  340,
      342,  343,  330,  344,  342,  345,  346,  347,  331,  348,
      332,  349,  333,  350,  351,  352,  354,  334,  335,  337,

      355,  357,  338,  335,  335,  339,  340,  341,  340,  342,
      343,  358,  344,  342,  345,  346,  347,  353,  348,  353,
      349,  359,  350,  351,  352,  354,  356,  360,  361,  355,
      357,  362,  364,  363,  356,  363,  365,  366,  367,  368,
      358,  387,  389,  366,    0,    0,  353,  370,  353,  370,
      359,  370,  370,  370,  370,  356,  360,  361,  390,  391,
      362,  364,  363,  356,  363,  365,  366,  367,  368,    0,
      387,  389,  366,  369,  369,  369,  369,  371,  371,  371,
      371,  372,  372,  372,  372,    0,  369,  390,  391,  373,
      371,  373,  373,  373,  373,  373,  374,  376,  374,  392,

      374,  374,  374,  374,  393,  373,  375,  375,  375,  375,
      388,  376,  376,  376,  376,  369,  394,  380,  380,  371,
      380,  395,  397,  399,  398,  380,  400,  401,  392,  403,
      402,  388,  398,  393,  373,  404,  380,  402,    0,  388,
      380,  405,  406,  407,  408,  394,  409,  411,  410,  412,
      395,  397,  399,  398,  410,  400,  401,  413,  403,  402,
      388,  398,  414,  415,  404,  416,  402,  380,  417,  418,
      405,  406,  407,  408,  419,  409,  411,  410,  412,  420,
      422,  423,  424,  410,  420,  420,  413,  425,  426,  425,
      428,  414,  415,  429,  416,  427,  430,  417,  418,  427,

      431,  432,  433,  419,  434,  435,  436,  437,  420,  422,
      423,  424,  439,  420,  420,  440,  425,  426,  425,  428,
      442,  438,  429,  438,  427,  430,  443,  444,  427,  431,
      432,  433,  441,  434,  435,  436,  437,  445,  446,  447,
      441,  439,  449,  448,  440,  448,  450,  451,  452,  442,
      438,  453,  438,  451,  462,  443,  444,  463,  464,  465,
      466,  441,  468,  467,  469,  470,  445,  446,  447,  441,
      471,  449,  448,  472,  448,  450,  451,  452,  467,  473,
      453,  474,  451,  462,  475,  476,  463,  464,  465,  466,
      477,  468,  467,  469,  470,  478,  480,  481,  482,  471,

      483,  484,  472,  485,  486,  487,  488,  467,  473,  489,
      474,  490,  491,  475,  476,  493,  494,    0,  496,  477,
      497,  498,  499,  500,  478,  480,  481,  482,  501,  483,
      484,  502,  485,  486,  487,  488,  495,  505,  489,  507,
      490,  491,  508,  509,  493,  494,  495,  496,  510,  497,
      498,  499,  500,  511,  512,  513,  495,  501,  514,  515,
      502,  516,  517,  518,  520,  521,  505,  523,  507,  524,
      525,  508,  509,  527,  526,  495,  526,  510,  528,  529,
      530,  531,  511,  512,  513,  495,  533,  514,  515,    0,
      516,  517,  518,  520,  521,  545,  523,  532,  524,  525,

      546,  532,  527,  526,    0,  526,  547,  528,  529,  530,
      531,    0,  534,    0,  534,  533,  534,  534,  534,  534,
      535,  535,  535,  535,  545,  548,  532,  549,  551,  546,
      532,  552,  536,  535,  536,  547,  536,  536,  536,  536,
      537,  537,  537,  537,  538,  538,  538,  538,  550,  553,
      554,  555,  556,  557,  548,  558,  549,  551,  559,  560,
      552,  561,  535,  550,  563,  564,  565,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  576,  550,  553,  554,
      555,  556,  557,  577,  558,  579,  580,  559,  560,  581,
      561,  582,  550,  563,  564,  565,  566,  567,  568,  569,

      570,  571,  572,  573,  574,  576,  578,  583,  584,  585,
      588,  590,  577,  591,  579,  580,  578,  592,  581,  593,
      582,  594,  595,  596,  597,  598,  578,  599,  600,  601,
      603,  604,  606,  607,  608,  610,  583,  584,  585,  588,
      590,  609,  591,  609,  611,  578,  592,  612,  593,  613,
      594,  595,  596,  597,  598,  578,  599,  600,  601,  603,
      604,  606,  607,  608,  610,  614,  616,  615,  630,  631,
      609,  615,  609,  611,    0,    0,  612,  632,  613,  617,
      617,  617,  617,  618,  618,  618,  618,  619,  619,  619,
      619,    0,    0,    0,  614,  616,  615,  630,  631,  633,

      615,  620,  620,  620,  620,  621,  632,  621,  634,  621,
      621,  621,  621,  622,  620,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  624,  624,  624,  624,  633,  622,
      635,  636,  637,  638,  639,  640,  641,  634,  642,  643,
      644,  645,  646,  620,  648,  635,  649,  650,  651,  652,
      653,  654,  655,  656,  657,  658,  659,  661,  622,  635,
      636,  637,  638,  639,  640,  641,  662,  642,  643,  644,
      645,  646,  664,  648,  635,  649,  650,  651,  652,  653,
      654,  655,  656,  657,  658,  659,  661,  663,  665,  666,
      667,  668,  669,  670,  673,  662,  675,  663,  676,  677,

      678,  664,  679,  680,  681,  682,  683,  663,  684,  685,
      686,  688,  689,  691,  692,  693,    0,  665,  666,  667,
      668,  669,  670,  673,  695,  675,  663,  676,  677,  678,
      696,  679,  680,  681,  682,  683,  663,  684,  685,  686,
      688,  689,  691,  692,  693,  694,  697,  694,  698,  699,
      700,  701,    0,  695,  700,  702,  702,  702,  702,  696,
      703,  703,  703,  703,  706,  706,  706,  706,  704,  704,
      704,  704,    0,    0,  694,  697,  694,  698,  699,  700,
      701,  704,  705,  700,  705,    0,  705,  705,  705,  705,
      707,    0,  707,  707,  707,  707,  707,  708,  708,  708,

      708,  709,  709,  709,  709,  710,  707,    0,  720,  712,
      704,  711,  711,  711,  711,  721,  722,  723,    0,  710,
      710,  710,  710,  712,  712,  712,  712,  724,  713,  713,
      726,  713,  727,  725,  728,  707,  713,  720,  729,  730,
      731,  732,  733,  734,  721,  722,  723,  713,  725,    0,
      735,  713,  736,  738,  739,  740,  724,  741,  742,  726,
      743,  727,  725,  728,  744,  745,  746,  729,  730,  731,
      732,  733,  734,  747,  748,  749,  751,  725,  713,  735,
      752,  736,  738,  739,  740,  754,  741,  742,  753,  743,
      755,  756,  757,  744,  745,  746,  758,  759,  753,  760,

      763,  765,  747,  748,  749,  751,  766,  767,  753,  752,
      768,  769,  770,  771,  754,  772,  773,  774,  775,  755,
      756,  757,  776,  778,  779,  758,  759,  753,  760,  763,
      765,  781,  782,  783,  785,  766,  767,  753,  786,  768,
      769,  770,  771,  787,  772,  773,  774,  775,  784,  788,
      784,  776,  778,  779,  789,  790,  791,  792,  793,  790,
      781,  782,  783,  785,  794,  796,  799,  786,  800,  801,
      802,  804,  787,  806,  807,  808,  810,  784,  788,  784,
      811,  812,  813,  789,  790,  791,  792,  793,  790,  814,
      815,  816,  817,  794,  796,  799,  820,  800,  801,  802,

      804,  821,  806,  807,  808,  810,  822,  823,  831,  811,
      812,  813,  825,  833,  834,  835,  836,  838,  814,  815,
      816,  817,  839,  825,  840,  820,  841,  843,  844,  845,
      821,  846,  848,  850,  852,  822,  823,  831,  853,  854,
      855,  825,  833,  834,  835,  836,  838,  856,  857,  858,
      860,  839,  825,  840,    0,  841,  843,  844,  845,    0,
      846,  848,  850,  852,  866,  867,  868,  853,  854,  855,
      862,  862,  862,  862,  870,  873,  856,  857,  858,  860,
      863,  863,  863,  863,  864,  864,  864,  864,  865,  865,
      865,  865,  874,  866,  867,  868,  875,  876,  878,  880,

      881,  882,  884,  870,  873,  885,  886,  887,  888,  889,
      890,  891,  894,  895,  896,  897,  905,  907,  908,  909,
      910,  874,  899,  912,  913,  875,  876,  878,  880,  881,
      882,  884,  914,  899,  885,  886,  887,  888,  889,  890,
      891,  894,  895,  896,  897,  905,  907,  908,  909,  910,
      915,  899,  912,  913,  917,  918,  919,  920,  922,  924,
      926,  914,  899,  927,  928,  929,  930,  931,  932,  934,
      936,  936,  936,  936,  937,  937,  937,  937,    0,  915,
        0,    0,    0,  917,  918,  919,  920,  922,  924,  926,
      942,  943,  927,  928,  929,  930,  931,  932,  934,  938,

      938,  938,  938,  939,  939,  939,  939,  940,  940,  940,
      940,  940,  941,  941,  941,  941,  944,  946,  949,  942,
      943,  940,  950,  951,  952,  954,  956,  957,  958,  960,
      961,  962,  963,  964,  965,  966,  967,  970,  971,  972,
      973,    0,  981,  983,  984,  944,  946,  949,  985,  986,
      940,  950,  951,  952,  954,  956,  957,  958,  960,  961,
      962,  963,  964,  965,  966,  967,  970,  971,  972,  973,
      975,  981,  983,  984,  988,  989,  990,  985,  986,  991,
      993,  975,  994,  995,  996,  998, 1000, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1010, 1012, 1012, 1012, 1012,  975,

        0,    0,    0,  988,  989,  990,    0,    0,  991,  993,
      975,  994,  995,  996,  998, 1000, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1010, 1013, 1013, 1013, 1013, 1014, 1014,
     1014, 1014, 1015, 1015, 1015, 1015, 1016,    0,    0, 1016,
     1016, 1016, 1016, 1017, 1017, 1017, 1017, 1018, 1018, 1018,
     1018, 1019, 1016, 1020, 1021, 1022, 1024, 1027, 1028, 1029,
     1030, 1032, 1034, 1035, 1036, 1019, 1019, 1019, 1019, 1038,
     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050,
     1051, 1016, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1030,
     1032, 1034, 1035, 1036, 1059, 1061, 1062, 1063, 1038, 1039,

     1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051,
     1053, 1064, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074,
     1076, 1053, 1078, 1059, 1061, 1062, 1063, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1053,
     1064, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1076,
     1053, 1078, 1094, 1097, 1098, 1099, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1100, 1101,
     1102, 1104, 1105, 1109, 1111, 1113, 1115, 1116, 1119, 1121,
     1122, 1094, 1097, 1098, 1099, 1125, 1126, 1128, 1129, 1130,
     1131, 1133, 1134, 1135, 1137, 1138, 1140, 1100, 1101, 1102,

     1104, 1105, 1109, 1111, 1113, 1115, 1116, 1119, 1121, 1122,
     1141, 1142, 1143, 1144, 1125, 1126, 1128, 1129, 1130, 1131,
     1133, 1134, 1135, 1137, 1138, 1140, 1147, 1148, 1149, 1150,
     1151, 1152, 1154, 1155, 1159, 1161, 1163, 1165, 1166, 1141,
     1142, 1143, 1144, 1169, 1171, 1172, 1175, 1176, 1178, 1179,
     1180, 1181, 1183, 1184, 1185, 1147, 1148, 1149, 1150, 1151,
     1152, 1154, 1155, 1159, 1161, 1163, 1165, 1166, 1187, 1188,
     1192, 1193, 1169, 1171, 1172, 1175, 1176, 1178, 1179, 1180,
     1181, 1183, 1184, 1185, 1191, 1191, 1191, 1191, 1194, 1195,
     1196, 1199, 1200, 1201, 1202, 1203, 1204, 1187, 1188, 1192,

     1193, 1206, 1207, 1211, 1213, 1215, 1217, 1218, 1221, 1223,
     1224, 1227, 1228, 1230, 1231, 1232, 1233, 1194, 1195, 1196,
     1199, 1200, 1201, 1202, 1203, 1204, 1235, 1236, 1237, 1239,
     1206, 1207, 1211, 1213, 1215, 1217, 1218, 1221, 1223, 1224,
     1227, 1228, 1230, 1231, 1232, 1233, 1240, 1242, 1242, 1242,
     1242, 1244, 1244, 1244, 1244, 1235, 1236, 1237, 1239, 1245,
     1245, 1245, 1245, 1246, 1247, 1248, 1249, 1250, 1253, 1254,
     1255, 1256, 1257, 1258, 1260, 1240, 1261, 1265, 1267, 1269,
     1271, 1272, 1275, 1277, 1278, 1281, 1282, 1284, 1285, 1286,
     1287, 1289, 1246, 1247, 1248, 1249, 1250, 1253, 1254, 1255,

     1256, 1257, 1258, 1260, 1290, 1261, 1265, 1267, 1269, 1271,
     1272, 1275, 1277, 1278, 1281, 1282, 1284, 1285, 1286, 1287,
     1289, 1291, 1293, 1294, 1296, 1297, 1299, 1301, 1303, 1305,
     1309, 1312, 1313, 1290, 1314, 1316, 1318, 1319, 1322, 1324,
     1327, 1328, 1329, 1331, 1333, 1335, 1337, 1341, 1344, 1345,
     1291, 1293, 1294, 1296, 1297, 1299, 1301, 1303, 1305, 1309,
     1312, 1313, 1346, 1314, 1316, 1318, 1319, 1322, 1324, 1327,
     1328, 1329, 1331, 1333, 1335, 1337, 1341, 1344, 1345, 1348,
     1350, 1351, 1354, 1356, 1359, 1360, 1360, 1360, 1360, 1361,
     1362, 1346, 1364, 1366, 1368, 1370, 1374, 1377, 1378, 1379,

     1381, 1383, 1384, 1387, 1389, 1392,    0,    0, 1348, 1350,
     1351, 1354, 1356, 1359, 1393, 1393, 1393, 1393, 1361, 1362,
     1396, 1364, 1366, 1368, 1370, 1374, 1377, 1378, 1379, 1381,
     1383, 1384, 1387, 1389, 1392, 1394, 1394, 1394, 1394, 1395,
     1395, 1395, 1395, 1397, 1399, 1401, 1403, 1405, 1409, 1396,
     1412, 1413, 1414, 1416, 1418, 1419, 1422, 1424, 1427, 1428,
     1432, 1433, 1436, 1439, 1440, 1441, 1444, 1448, 1449, 1452,
     1455, 1456, 1397, 1399, 1401, 1403, 1405, 1409, 1457, 1412,
     1413, 1414, 1416, 1418, 1419, 1422, 1424, 1427, 1428, 1432,
     1433, 1436, 1439, 1440, 1441, 1444, 1448, 1449, 1452, 1455,

     1456, 1460, 1460, 1460, 1460, 1461, 1465, 1457, 1466, 1469,
     1472, 1473, 1474, 1477, 1477, 1477, 1477, 1478, 1478, 1478,
     1478, 1479, 1483, 1484, 1487, 1490, 1491, 1492, 1496, 1498,
     1499, 1500, 1502, 1504, 1461, 1465, 1506, 1466, 1469, 1472,
     1473, 1474, 1507, 1508, 1496, 1510, 1514, 1512, 1515, 1504,
     1479, 1483, 1484, 1487, 1490, 1491, 1492, 1496, 1498, 1499,
     1500, 1502, 1504, 1512, 1516, 1506, 1518, 1520, 1522, 1523,
     1524, 1507, 1508, 1496, 1510, 1514, 1512, 1515, 1504, 1526,
     1527, 1528, 1529, 1520, 1533, 1534, 1535, 1539, 1540, 1541,
     1545, 1546, 1512, 1516, 1547, 1518, 1520, 1522, 1523, 1524,

     1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1526, 1527,
     1528, 1529, 1520, 1533, 1534, 1535, 1539, 1540, 1541, 1545,
     1546, 1559, 1560, 1547, 1561, 1562, 1563, 1564, 1565, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1566, 1567, 1568,
     1569, 1570, 1571, 1572, 1573, 1574, 1576, 1579, 1582, 1585,
     1559, 1560, 1587, 1561, 1562, 1563, 1564, 1565, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1595, 1566, 1567, 1568, 1569,
     1570, 1571, 1572, 1573, 1574, 1576, 1579, 1582, 1585, 1596,
     1597, 1587, 1598, 1599, 1600, 1601, 1602, 1588, 1589, 1590,
     1591, 1592, 1593, 1594, 1595,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1596, 1597,
        0, 1598, 1599, 1600, 1601, 1602, 1608,    0, 1608, 1608,
     1609,    0, 1609,    0, 1609, 1610, 1610, 1610, 1610, 1610,
     1610, 1611,    0, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1612,    0,    0, 1612, 1612, 1612,    0, 1612, 1612, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616,    0, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5





#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif




#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );





    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r





int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT

    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);

#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1













extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1608 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1607 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 115:
case 116:
case 117:
case 118:
case 119:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 124:
case 125:
case 126:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 127:
case 128:
case 129:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 130:
case 131:
case 132:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 133:
case 134:
case 135:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 148:
YY_RULE_SETUP
{}
	YY_BREAK
case 149:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 150:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1608 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1608 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1607);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }



        b->yy_is_interactive = 0;


	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{

	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        if (! YY_CURRENT_BUFFER)
            return 0;

    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        if (! YY_CURRENT_BUFFER)
            return 0;

    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );

    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );

    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

