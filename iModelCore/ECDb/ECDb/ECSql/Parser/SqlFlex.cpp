#line 2 "C:\\repos\\imodelNative\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2152] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      177,  177,  183,  181,  179,  178,  181,  127,  142,  139,
      170,  142,  128,  130,  129,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  138,  137,  168,  142,
      144,  144,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  171,  169,  172,  142,  142,  152,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  142,  152,  181,  177,  177,  177,  177,  175,
      127,  142,  139,  142,  142,  142,  128,  130,  129,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      176,  138,  137,  179,  134,    0,  136,  140,  131,  133,
      132,  141,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   62,    0,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,   82,

       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  135,  146,  147,  144,
        0,    0,  143,  143,  143,    4,  143,  143,  143,  143,
      143,  143,   12,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   55,   62,  143,  143,
      143,  143,  143,  143,  143,  143,   75,  143,  143,  143,
       82,   84,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  167,  157,  167,
      167,  167,  152,  167,  151,  151,  151,    4,  151,  151,
      151,  151,  151,  151,   12,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,   55,   62,
      151,  151,  151,  151,  151,  151,  151,  151,   75,  151,
      151,  151,   82,   84,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  163,
      167,  167,  167,  152,  167,    0,  173,  177,  177,  134,

      177,  136,  140,  131,  133,  132,  141,  177,  177,    4,
      177,  177,  177,  177,  177,  177,   12,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       55,   62,  177,  177,  177,  177,  177,  177,  177,  177,
       75,  177,  177,  177,   82,   84,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  135,    0,  180,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,   54,    0,    0,   58,    0,   64,
        0,    0,    0,    0,    0,    0,    0,   72,   73,    0,
        0,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       99,    0,    0,  104,    0,    0,  107,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  147,    0,    0,  148,  145,    1,    2,
        3,    5,    6,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,   32,  143,  143,  143,  143,  143,  143,
      143,  143,  143,   46,  143,  143,  143,  143,   54,  143,
      143,   58,  143,   64,  143,  143,  143,  143,  143,  143,
      143,   72,   73,  143,  143,   77,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   99,  143,  143,  104,  143,  143,
      107,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,    0,  160,  167,  155,
      167,  152,    0,  158,    1,    2,    3,    5,    6,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   32,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   46,
      151,  151,  151,  151,   54,  151,  151,   58,  151,   64,
      151,  151,  151,  151,  151,  151,  151,   72,   73,  151,
      151,   77,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
       99,  151,  151,  104,  151,  151,  107,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,    0,  166,  161,  167,  167,  152,    0,  164,

      173,    0,  173,  177,  177,    1,    2,    3,    5,    6,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       32,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       46,  177,  177,  177,  177,   54,  177,  177,   58,  177,
       64,  177,  177,  177,  177,  177,  177,  177,   72,   73,
      177,  177,   77,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,   99,  177,  177,  104,  177,  177,  107,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,    0,    0,    0,   10,    0,   13,   14,
        0,    0,    0,    0,    0,    0,   24,    0,    0,   27,
        0,    0,    0,   31,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   48,   49,    0,    0,    0,
        0,    0,    0,   61,   63,   41,   66,   67,   68,    0,
       70,    0,    0,    0,    0,    0,   80,    0,   83,    0,
        0,    0,   88,    0,    0,    0,    0,    0,   94,   95,
        0,    0,    0,  100,    0,    0,    0,  105,    0,  108,
      109,  110,    0,  113,    0,    0,    0,    0,    0,    0,
        0,    0,  123,    0,    0,  125,    0,  150,    0,  149,

      143,  143,  143,   10,  143,   13,   14,  143,  143,  143,
      143,  143,  143,   24,  143,  143,   27,  143,  143,  143,
       31,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,   48,   49,  143,  143,  143,  143,  143,  143,
       61,   63,   41,   66,   67,   68,  143,   70,  143,  143,
      143,  143,  143,   80,  143,   83,  143,  143,  143,   88,
      143,  143,  143,  143,  143,   94,   95,  143,  143,  143,
      100,  143,  143,  143,  105,  143,  108,  109,  110,  143,
      113,  143,  143,  143,  143,  143,  143,  143,  143,  123,
      143,  143,  125,  160,  167,    0,  159,  152,  158,  151,

      151,  151,   10,  151,   13,   14,  151,  151,  151,  151,
      151,  151,   24,  151,  151,   27,  151,  151,  151,   31,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,   48,   49,  151,  151,  151,  151,  151,  151,   61,
       63,   41,   66,   67,   68,  151,   70,  151,  151,  151,
      151,  151,   80,  151,   83,  151,  151,  151,   88,  151,
      151,  151,  151,  151,   94,   95,  151,  151,  151,  100,
      151,  151,  151,  105,  151,  108,  109,  110,  151,  113,
      151,  151,  151,  151,  151,  151,  151,  151,  123,  151,
      151,  125,  166,    0,  165,  167,  152,  164,    0,  173,

      177,  177,  177,   10,  177,   13,   14,  177,  177,  177,
      177,  177,  177,   24,  177,  177,   27,  177,  177,  177,
       31,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,   48,   49,  177,  177,  177,  177,  177,  177,
       61,   63,   41,   66,   67,   68,  177,   70,  177,  177,
      177,  177,  177,   80,  177,   83,  177,  177,  177,   88,
      177,  177,  177,  177,  177,   94,   95,  177,  177,  177,
      100,  177,  177,  177,  105,  177,  108,  109,  110,  177,
      113,  177,  177,  177,  177,  177,  177,  177,  177,  123,
      177,  177,  125,    0,    0,    0,    0,    0,    0,   17,

       18,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,    0,   38,    0,   40,   39,    0,    0,   50,
        0,   56,    0,   59,    0,    0,    0,   69,   71,    0,
        0,    0,   79,   42,    0,   85,    0,   87,    0,    0,
        0,    0,   93,    0,   97,    0,    0,  102,    0,    0,
        0,  112,    0,  115,    0,    0,    0,  119,  120,    0,
      124,    0,  143,  143,  143,  143,  143,  143,   17,   18,
      143,  143,  143,  143,  143,  143,  143,  143,   34,  143,
      143,  143,   38,  143,   40,   39,  143,  143,   50,  143,
       56,  143,   59,  143,  143,  143,   69,   71,  143,  143,

      143,   79,   42,  143,   85,  143,   87,  143,  143,  143,
      143,   93,  143,   97,  143,  143,  102,  143,  143,  143,
      112,  143,  115,  143,  143,  143,  119,  120,  143,  124,
      143,  153,  159,  151,  151,  151,  151,  151,  151,   17,
       18,  151,  151,  151,  151,  151,  151,  151,  151,   34,
      151,  151,  151,   38,  151,   40,   39,  151,  151,   50,
      151,   56,  151,   59,  151,  151,  151,   69,   71,  151,
      151,  151,   79,   42,  151,   85,  151,   87,  151,  151,
      151,  151,   93,  151,   97,  151,  151,  102,  151,  151,
      151,  112,  151,  115,  151,  151,  151,  119,  120,  151,

      124,  151,  165,  154,    0,  174,  177,  177,  177,  177,
      177,  177,   17,   18,  177,  177,  177,  177,  177,  177,
      177,  177,   34,  177,  177,  177,   38,  177,   40,   39,
      177,  177,   50,  177,   56,  177,   59,  177,  177,  177,
       69,   71,  177,  177,  177,   79,   42,  177,   85,  177,
       87,  177,  177,  177,  177,   93,  177,   97,  177,  177,
      102,  177,  177,  177,  112,  177,  115,  177,  177,  177,
      119,  120,  177,  124,  177,    0,    0,    9,    0,    0,
       16,    0,    0,   25,    0,    0,   29,    0,   33,   35,
        0,   37,   43,    0,    0,    0,   52,    0,   53,   57,

        0,    0,    0,    0,   76,    0,   81,   86,    0,    0,
       91,    0,    0,    0,    0,  103,  106,    0,    0,  116,
        0,  118,  121,    0,  126,  143,  143,    9,  143,  143,
       16,  143,  143,   25,  143,  143,   29,  143,   33,   35,
      143,   37,   43,  143,  143,  143,   52,  143,   53,   57,
      143,  143,  143,  143,   76,  143,   81,   86,  143,  143,
       91,  143,  143,  143,  143,  103,  106,  143,  143,  116,
      143,  118,  121,  143,  126,  167,  151,  151,    9,  151,
      151,   16,  151,  151,   25,  151,  151,   29,  151,   33,
       35,  151,   37,   43,  151,  151,  151,   52,  151,   53,

       57,  151,  151,  151,  151,   76,  151,   81,   86,  151,
      151,   91,  151,  151,  151,  151,  103,  106,  151,  151,
      116,  151,  118,  121,  151,  126,  167,  174,  174,  177,
      177,    9,  177,  177,   16,  177,  177,   25,  177,  177,
       29,  177,   33,   35,  177,   37,   43,  177,  177,  177,
       52,  177,   53,   57,  177,  177,  177,  177,   76,  177,
       81,   86,  177,  177,   91,  177,  177,  177,  177,  103,
      106,  177,  177,  116,  177,  118,  121,  177,  126,    0,
        8,   11,   15,    0,   20,    0,    0,    0,   36,    0,
        0,   47,    0,   58,    0,    0,   74,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  117,  122,  143,    8,
       11,   15,  143,   20,  143,  143,  143,   36,  143,  143,
       47,  143,   58,  143,  143,   74,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  117,  122,  156,  151,    8,
       11,   15,  151,   20,  151,  151,  151,   36,  151,  151,
       47,  151,   58,  151,  151,   74,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  117,  122,  162,  174,  177,
        8,   11,   15,  177,   20,  177,  177,  177,   36,  177,
      177,   47,  177,   58,  177,  177,   74,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  117,  122,    7,    0,

        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,    7,  143,
      143,  143,   28,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   98,  143,  143,  143,    7,  151,
      151,  151,   28,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   98,  151,  151,  151,    7,  177,
      177,  177,   28,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,   98,  177,  177,  177,   19,    0,
        0,    0,    0,    0,   45,    0,   60,    0,   78,   89,
        0,   92,   96,    0,  111,  114,   19,  143,  143,  143,

      143,  143,   45,  143,   60,  143,   78,   89,  143,   92,
       96,  143,  111,  114,   19,  151,  151,  151,  151,  151,
       45,  151,   60,  151,   78,   89,  151,   92,   96,  151,
      111,  114,   19,  177,  177,  177,  177,  177,   45,  177,
       60,  177,   78,   89,  177,   92,   96,  177,  111,  114,
        0,    0,   26,    0,    0,    0,   65,    0,  101,  143,
      143,   26,  143,  143,  143,   65,  143,  101,  151,  151,
       26,  151,  151,  151,   65,  151,  101,  177,  177,   26,
      177,  177,  177,   65,  177,  101,    0,    0,    0,   44,
        0,    0,  143,  143,  143,   44,  143,  143,  151,  151,

      151,   44,  151,  151,  177,  177,  177,   44,  177,  177,
       21,   22,   30,   51,   90,   21,   22,   30,   51,   90,
       21,   22,   30,   51,   90,   21,   22,   30,   51,   90,
        0,  143,  151,  177,    0,  143,  151,  177,    0,  143,
      151,  177,    0,  143,  151,  177,   23,   23,   23,   23,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2161] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  809, 4763,  359, 4763,  779, 4763, 4763, 4763,
     4763,  346,  341, 4763,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  441,  437,  448,
      474,  494,  459,  486,  367,  455,  718, 4763, 4763,  527,
      554,  559,  543,  562,  555,  574,  607,  623,  389,  415,
      608,  432,    0,  667,  531,  613,  663,  670,  714,  687,
      717,  708,  451,  628, 4763, 4763, 4763,    0,  532,  776,
      760,  775,  774,  797,  814,  833,  451,  500,  611,  492,
        0,  838,  571,  829,  875,  715,  883,  870,  891,  777,

      509,  777,  947,  954,  701,    0,  393,    0,  768, 4763,
        0,    0,    0,    0,  375, 4763,  681,    0,  415,  939,
      959,  955, 1003,  995, 1014,  495,  567,  948,  567, 1015,
      831, 1050, 1054, 1049, 1072, 1093, 1110, 1072,  612,  878,
     4763,  705,    0,  444, 4763,  780, 4763, 4763, 4763, 4763,
     4763, 4763,  611,  705,  642,  682,  696,  758,  780,  822,
      879, 4763,  882, 1110,  887,  959,  885, 1120,  888,  887,
      931,  935,  959,  962,  961, 1025,  998, 1112,  996, 1117,
     1041, 1054, 1063, 1060, 1103, 1126, 4763, 1103, 1137, 1149,
     1154, 1119, 1146, 1135, 1151, 1169, 1168, 1168, 1175, 1170,

     1179, 1178, 1167, 1183, 1172, 1173, 1192, 1178, 1201, 1191,
     1191, 1189, 1217, 1200, 1205, 1211, 1220, 1225, 1208, 1213,
     1237, 1231, 1231, 1229, 1239, 1231, 4763, 1289, 1293, 1298,
     1307,    0,    0, 1237, 1292, 1247, 1297, 1302, 1286, 1293,
     1293, 1294,    0, 1291, 1299, 1298, 1301, 1295, 1310, 1297,
     1297, 1302, 1307, 1324, 1327, 1326, 1353, 1340, 1349, 1339,
     1351, 1349, 1353, 1351, 1346, 1364, 1357,    0, 1363, 1367,
     1372, 1369, 1361, 1364, 1365, 1367, 1407, 1410, 1400, 1408,
     1408, 1417, 1414, 1403, 1419, 1407, 1408, 1427, 1415, 1430,
     1423, 1422, 1417, 1424, 1424, 1420, 1427, 1437, 1463, 1426,

     1449, 1470, 1473, 1469, 1468, 1477, 1469,    0, 1498, 1529,
      747, 1533, 1542, 1551,    0, 1472, 1525, 1482, 1480, 1517,
     1510, 1526, 1527, 1533,    0, 1532, 1540, 1539, 1542, 1536,
     1551, 1538, 1541, 1545, 1547, 1564, 1569, 1568, 1595, 1562,
     1588, 1563, 1593, 1572, 1576, 1581, 1586, 1603, 1599,    0,
     1601, 1605, 1614, 1610, 1600, 1602, 1614, 1610, 1642, 1623,
     1624, 1640, 1642, 1652, 1650, 1643, 1659, 1648, 1649, 1667,
     1655, 1670, 1663, 1665, 1658, 1666, 1666, 1662, 1668, 1677,
     1699, 1664, 1668, 1712, 1686, 1694, 1704, 1715, 1710, 1733,
     1768, 1742, 1776, 1786, 1794, 1800, 1805,    0,  557,    0,

     1825,    0,    0,    0,    0,    0,    0, 1732, 1781, 1769,
     1783, 1801, 1787, 1794, 1794, 1796,    0, 1793, 1803, 1798,
     1804, 1798, 1815, 1807, 1807, 1811, 1812, 1828, 1836, 1838,
     1845, 1837, 1852, 1835, 1853, 1847, 1854, 1852, 1847, 1867,
     1861,    0, 1865, 1869, 1881, 1873, 1871, 1877, 1875, 1870,
     1903, 1899, 1880, 1906, 1908, 1918, 1916, 1905, 1922, 1910,
     1911, 1933, 1917, 1939, 1925, 1921, 1921, 1935, 1930, 1927,
     1933, 1943, 1965, 1930, 1938, 1978, 1960, 1956, 1973, 1961,
     1972,    0,  773, 4763, 4763, 4763, 4763, 4763, 4763, 1970,
     1959, 1982, 1988, 1984, 1993, 1985, 1987, 1987, 1983, 1998,

     1986, 2000, 2001, 1989, 2014, 2002, 2021, 2007, 2023, 4763,
     2035, 2020, 2035, 2020, 2022, 2023, 2025, 2044, 2036, 2026,
     2037, 2042, 2034, 2047, 4763, 2053, 2054, 2066, 2046, 4763,
     2042, 2059, 2044, 2061, 2066, 2073, 2079, 4763, 4763, 2065,
     2089, 4763,  719, 2082, 2084, 2078, 2073, 2094, 2096, 2097,
     2085, 2085, 2103, 2100, 2105, 2105, 2101, 2093, 2109, 2106,
     2101, 2112, 2117, 4763, 2119, 2124, 4763, 2124, 2120, 2135,
     2143, 2143, 2137, 2139, 2141, 2156, 2144, 2138, 2157, 2147,
     2159, 2156, 2207, 2211, 2219, 2225, 2229,    0,    0,    0,
        0,    0,    0, 2168, 2173, 2197, 2208, 2203, 2221, 2216,

     2216, 2216, 2212, 2227, 2215, 2229, 2230, 2217, 2234, 2218,
     2238, 2225, 2238,    0, 2245, 2229, 2244, 2229, 2231, 2231,
     2233, 2252, 2242, 2245, 2260, 2262, 2263, 2277,    0, 2282,
     2283, 2294, 2276,    0, 2271, 2288, 2273, 2289, 2286, 2289,
     2295,    0,    0, 2279, 2300,    0,  718, 2292, 2293, 2287,
     2282, 2303, 2305, 2306, 2294, 2294, 2315, 2319, 2328, 2335,
     2320, 2323, 2337, 2336, 2330, 2341, 2346,    0, 2347, 2344,
        0, 2340, 2337, 2352, 2358, 2357, 2348, 2349, 2351, 2366,
     2354, 2348, 2367, 2358, 2380, 2379, 2414, 2425, 2429, 2433,
     2441, 2448, 2452, 2456,    0,    0,    0,    0,    0, 2392,

     2407, 2451, 2452, 2443, 2451, 2445, 2445, 2446, 2442, 2457,
     2445, 2459, 2460, 2447, 2465, 2449, 2468, 2455, 2468,    0,
     2473, 2457, 2500, 2458, 2459, 2459, 2461, 2487, 2484, 2487,
     2498, 2501, 2493, 2506,    0, 2511, 2513, 2531, 2505,    0,
     2500, 2517, 2502, 2518, 2515, 2520, 2525,    0,    0, 2508,
     2529,    0,  715, 2519, 2520, 2514, 2510, 2532, 2533, 2549,
     2537, 2543, 2565, 2562, 2567, 2565, 2559, 2552, 2566, 2565,
     2559, 2570, 2575,    0, 2576, 2573,    0, 2571, 2567, 2583,
     2588, 2585, 2576, 2578, 2580, 2595, 2590, 2591, 2610, 2612,
     2612, 2613, 2642, 2654, 2659, 2668, 2673, 2680, 2684, 2688,

     2706, 2694, 2712, 2717,    0,    0,    0,    0,    0,    0,
     2617, 2668, 2691, 2694, 2691, 2703, 2697, 2697, 2697, 2693,
     2711, 2700, 2714, 2717, 2705, 2723, 2707, 2726, 2712, 2725,
        0, 2730, 2715, 2730, 2715, 2717, 2723, 2727, 2748, 2738,
     2731, 2748, 2754, 2746, 2759,    0, 2764, 2765, 2779, 2759,
        0, 2756, 2773, 2760, 2776, 2773, 2778, 2783,    0,    0,
     2766, 2787,    0,  675, 2777, 2779, 2773, 2768, 2795, 2796,
     2798, 2786, 2787, 2805, 2805, 2816, 2817, 2813, 2805, 2819,
     2819, 2815, 2826, 2833,    0, 2834, 2831,    0, 2828, 2825,
     2840, 2845, 2842, 2834, 2835, 2837, 2857, 2845, 2840, 2859,

     2852, 2861, 2864, 2854, 2877, 2865, 4763, 2879, 4763, 4763,
     2884, 2877, 2869, 2873,  663, 2888, 4763, 2876, 2892, 4763,
     2889, 2888, 2890, 4763, 2887, 2879, 2889, 2886, 2888, 2904,
     2905, 2896, 2897, 2904, 2919, 4763, 4763, 2907, 2910, 2910,
     2912,  696, 2933, 4763, 4763,  659, 4763, 4763, 4763, 2915,
     4763, 2933, 2924, 2924, 2922, 2942, 2931, 2949, 4763, 2937,
     2938, 2940, 4763, 2951, 2956, 2949, 2958, 2960, 4763, 4763,
     2948, 2947, 2966, 4763, 2960, 2962, 2974, 4763, 2964, 4763,
     4763, 2962, 2970, 4763, 2965, 2974, 2972, 2983, 2979, 2993,
     2996, 2994, 4763, 3000, 2993, 4763, 3026, 3031, 3046, 3050,

     3009, 3028, 3017,    0, 3031,    0,    0, 3045, 3038, 3028,
     3030,  658, 3045,    0, 3031, 3047,    0, 3044, 3042, 3043,
        0, 3040, 3032, 3042, 3038, 3040, 3058, 3061, 3047, 3048,
     3054, 3069,    0,    0, 3055, 3058, 3055, 3056,  653, 3086,
        0,    0,  612,    0,    0,    0, 3070,    0, 3083, 3076,
     3086, 3084, 3102, 3089, 3104,    0, 3092, 3093, 3094,    0,
     3104, 3109, 3102, 3111, 3112,    0,    0, 3100, 3101, 3122,
        0, 3111, 3113, 3124,    0, 3114,    0,    0, 3110, 3118,
        0, 3110, 3118, 3127, 3134, 3131, 3145, 3157, 3155,    0,
     3159, 3150,    0, 3174, 3178, 3190, 3194, 3204, 3208, 3152,

     3171, 3161,    0, 3185,    0,    0, 3205, 3198, 3190, 3192,
      587, 3207,    0, 3193, 3209,    0, 3206, 3204, 3205,    0,
     3202, 3195, 3205, 3201, 3203, 3219, 3220, 3206, 3207, 3213,
     3228,    0,    0, 3214, 3217, 3214, 3215,  604, 3230,    0,
        0,  567,    0,    0,    0, 3214,    0, 3256, 3247, 3248,
     3246, 3264, 3251, 3266,    0, 3254, 3255, 3256,    0, 3266,
     3271, 3265, 3274, 3275,    0,    0, 3263, 3262, 3281,    0,
     3270, 3272, 3283,    0, 3273,    0,    0, 3269, 3277,    0,
     3269, 3277, 3271, 3280, 3286, 3315, 3318, 3317,    0, 3321,
     3312,    0, 3336, 3344, 3348, 3352, 3368, 3372, 3376, 3394,

     3325, 3344, 3332,    0, 3348,    0,    0, 3373, 3366, 3356,
     3361,  562, 3376,    0, 3363, 3379,    0, 3376, 3378, 3379,
        0, 3376, 3368, 3378, 3374, 3376, 3392, 3393, 3379, 3380,
     3386, 3405,    0,    0, 3391, 3394, 3393, 3397,  587, 3424,
        0,    0,  513,    0,    0,    0, 3396,    0, 3409, 3400,
     3413, 3411, 3429, 3419, 3434,    0, 3423, 3425, 3430,    0,
     3440, 3445, 3438, 3447, 3448,    0,    0, 3436, 3435, 3454,
        0, 3443, 3445, 3456,    0, 3450,    0,    0, 3446, 3454,
        0, 3448, 3459, 3453, 3460, 3456, 3482, 3485, 3483,    0,
     3487, 3481,    0, 3496, 3494, 3475, 3500, 3486, 3487, 4763,

     4763, 3504, 3495, 3505,  489, 3497, 3507, 3498, 3509, 4763,
     3495, 3512, 3498, 4763, 3504,  488, 4763, 3500, 3506, 3528,
     3524, 4763, 3512, 4763, 3528, 3515, 3526, 4763, 4763, 3548,
     3545, 3553, 4763, 4763, 3535, 4763, 3538, 4763, 3538, 3545,
     3563, 3561, 4763, 3547, 4763, 3566, 3547, 4763, 3549, 3563,
     3551, 4763, 3558, 4763, 3568, 3551, 3570, 4763, 3561, 3580,
     4763, 3559, 3584, 3584, 3565, 3590, 3572, 3585,    0,    0,
     3602, 3593, 3603,  483, 3598, 3608, 3600, 3611,    0, 3597,
     3618, 3604,    0, 3606,  445,    0, 3602, 3608, 3610, 3620,
        0, 3608,    0, 3625, 3612, 3610,    0,    0, 3632, 3634,

     3639,    0,    0, 3623,    0, 3628,    0, 3628, 3635, 3649,
     3659,    0, 3645,    0, 3664, 3645,    0, 3647, 3663, 3651,
        0, 3659,    0, 3669, 3652, 3675,    0, 3662, 3681,    0,
     3660,  569, 3692, 3687, 3684, 3665, 3690, 3677, 3678,    0,
        0, 3697, 3691, 3701,  442, 3693, 3703, 3698, 3709,    0,
     3695, 3712, 3702,    0, 3704,  437,    0, 3700, 3706, 3710,
     3718,    0, 3708,    0, 3726, 3713, 3711,    0,    0, 3738,
     3735, 3740,    0,    0, 3726,    0, 3728,    0, 3728, 3735,
     3754, 3752,    0, 3740,    0, 3762, 3743,    0, 3745, 3759,
     3747,    0, 3757,    0, 3767, 3750, 3769,    0, 3760, 3779,

        0, 3758, 3812,  808, 3819, 3823, 3789, 3786, 3772, 3797,
     3779, 3801,    0,    0, 3818, 3809, 3819,  402, 3811, 3824,
     3815, 3826,    0, 3812, 3829, 3815,    0, 3817,  398,    0,
     3813, 3819, 3819, 3832,    0, 3820,    0, 3836, 3823, 3821,
        0,    0, 3843, 3840, 3845,    0,    0, 3828,    0, 3830,
        0, 3835, 3842, 3856, 3872,    0, 3860,    0, 3879, 3860,
        0, 3862, 3876, 3867,    0, 3874,    0, 3884, 3867, 3886,
        0, 3873, 3892,    0, 3871, 3877, 3882, 4763, 3883, 3893,
     4763, 3890, 3880, 4763, 3883, 3899, 4763, 3887, 4763, 4763,
     3899, 4763, 4763, 3884, 3898, 3909, 4763, 3911, 4763, 4763,

     3897, 3929, 3936, 3926, 4763, 3927, 4763, 4763, 3931, 3921,
     4763, 3936, 3937, 3944, 3935, 4763, 4763, 3948, 3946, 4763,
     3937, 4763, 4763, 3934, 4763, 3935, 3940,    0, 3941, 3951,
        0, 3948, 3938,    0, 3941, 3957,    0, 3945,    0,    0,
     3957,    0,    0, 3942, 3956, 3967,    0, 3969,    0,    0,
     3955, 3987, 3994, 3984,    0, 3985,    0,    0, 3989, 3979,
        0, 3994, 3995, 4002, 3993,    0,    0, 4006, 4004,    0,
     3995,    0,    0, 3992,    0, 4019, 3997, 4002,    0, 4003,
     4013,    0, 4010, 4000,    0, 4004, 4020,    0, 4013,    0,
        0, 4025,    0,    0, 4009, 4031, 4037,    0, 4039,    0,

        0, 4025, 4045, 4052, 4042,    0, 4043,    0,    0, 4047,
     4037,    0, 4052, 4053, 4060, 4051,    0,    0, 4064, 4062,
        0, 4053,    0,    0, 4050,    0, 4081, 4106, 4110, 4059,
     4064,    0, 4066, 4076,    0, 4078, 4068,    0, 4071, 4105,
        0, 4095,    0,    0, 4107,    0,    0, 4091, 4105, 4111,
        0, 4116,    0,    0, 4102, 4116, 4121, 4111,    0, 4112,
        0,    0, 4116, 4106,    0, 4118, 4119, 4126, 4117,    0,
        0, 4130, 4128,    0, 4119,    0,    0, 4116,    0, 4131,
     4763, 4763, 4763, 4117,  374, 4137, 4119, 4125, 4763, 4145,
     4133, 4763, 4151, 4763, 4166, 4158, 4763, 4150, 4157,  342,

     4159, 4155, 4167, 4177, 4167, 4176, 4763, 4763, 4178,    0,
        0,    0, 4164,  338, 4183, 4165, 4166,    0, 4186, 4174,
        0, 4174,    0, 4187, 4179,    0, 4171, 4178,  332, 4180,
     4174, 4186, 4201, 4191, 4200,    0,    0, 4235, 4220,    0,
        0,    0, 4212,  315, 4234, 4216, 4217,    0, 4237, 4225,
        0, 4225,    0, 4238, 4230,    0, 4222, 4229,  218, 4231,
     4224, 4236, 4246, 4236, 4245,    0,    0, 4262, 4288, 4254,
        0,    0,    0, 4240,  211, 4260, 4242, 4243,    0, 4283,
     4271,    0, 4271,    0, 4286, 4281,    0, 4273, 4280,  204,
     4282, 4275, 4287, 4297, 4287, 4296,    0,    0, 4763, 4282,

     4299, 4290, 4763, 4296, 4294, 4300, 4294, 4289, 4289, 4306,
     4298, 4298, 4310, 4315, 4763, 4316, 4326, 4339,    0, 4324,
     4343, 4337,    0, 4343, 4341, 4347, 4341, 4336, 4336, 4353,
     4345, 4342, 4354, 4357,    0, 4359, 4349, 4362,    0, 4347,
     4393, 4355,    0, 4361, 4362, 4368, 4363, 4358, 4358, 4395,
     4387, 4384, 4398, 4404,    0, 4405, 4395, 4408,    0, 4394,
     4412, 4401,    0, 4408, 4406, 4412, 4406, 4401, 4401, 4418,
     4410, 4407, 4420, 4423,    0, 4428, 4419, 4432, 4763, 4436,
     4446, 4447, 4444, 4439, 4763, 4460, 4763, 4462, 4763, 4763,
     4467, 4763, 4763, 4451, 4763, 4763,    0, 4469, 4462, 4461,

     4458, 4453,    0, 4472,    0, 4471,    0,    0, 4476,    0,
        0, 4460,    0,    0,    0, 4478, 4471, 4470, 4467, 4462,
        0, 4482,    0, 4481,    0,    0, 4489,    0,    0, 4473,
        0,    0,    0, 4492, 4485, 4484, 4498, 4495,    0, 4514,
        0, 4513,    0,    0, 4520,    0,    0, 4507,    0,    0,
     4506, 4514, 4763, 4514, 4524, 4529, 4763, 4517, 4763, 4512,
     4520,    0, 4520, 4530, 4535,    0, 4523,    0, 4518, 4526,
        0, 4526, 4536, 4542,    0, 4530,    0, 4528, 4536,    0,
     4537, 4547, 4552,    0, 4557,    0, 4569, 4570, 4557, 4763,
     4559, 4572, 4579, 4580, 4567,    0, 4567, 4577, 4584, 4585,

     4572,    0, 4572, 4582, 4589, 4590, 4577,    0, 4577, 4587,
     4763, 4580, 4763, 4763, 4763,    0, 4582,    0,    0,    0,
        0, 4583,    0,    0,    0,    0, 4587,    0,    0,    0,
     4587, 4589, 4590, 4591, 4628, 4631, 4632, 4633, 4624, 4628,
     4629, 4630, 4628, 4629, 4630, 4631, 4763,    0,    0,    0,
     4763, 4697, 4703, 4708, 4717, 4726, 4735,  245, 4744, 4753
    } ;

static const flex_int16_t yy_def[2161] =
    {   0,
     2151,    1, 2151,    3, 2151,    5,    5,    5,    5,    5,
     2151,   11, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2151, 2151, 2151, 2153, 2153, 2153,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,

     2154, 2154, 2153, 2153, 2155, 2156, 2156, 2156, 2156, 2151,
     2156, 2156, 2156, 2156, 2156, 2151, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2151, 2156, 2156, 2151, 2151, 2157, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2158, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,

     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2153, 2153, 2153,
     2153, 2153, 2153, 2153, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2153,
     2153, 2153, 2153, 2153, 2153, 2155, 2155, 2156, 2156, 2156,

     2159, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2157, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2158, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,

     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2151, 2153, 2153, 2153,
     2153, 2153, 2151, 2153, 2154, 2154, 2154, 2154, 2154, 2154,

     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2151, 2153, 2153, 2153, 2153, 2153, 2151, 2153,

     2155, 2151, 2155, 2159, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,

     2156, 2156, 2156, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2151, 2153, 2151, 2153, 2153, 2151, 2154,

     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2151, 2151, 2153, 2153, 2153, 2151, 2160, 2155,

     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,

     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2153, 2151, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,

     2154, 2154, 2151, 2153, 2160, 2160, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2153, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,

     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2153, 2160, 2160, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2153, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2153, 2160, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2152, 2152, 2152, 2152,

     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2154, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2154, 2154,
     2154, 2154, 2154, 2154, 2154, 2154, 2154, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2151, 2151, 2151, 2151,
     2151, 2151, 2152, 2152, 2152, 2152, 2152, 2152, 2154, 2154,

     2154, 2154, 2154, 2154, 2156, 2156, 2156, 2156, 2156, 2156,
     2151, 2151, 2151, 2151, 2151, 2152, 2152, 2152, 2152, 2152,
     2154, 2154, 2154, 2154, 2154, 2156, 2156, 2156, 2156, 2156,
     2151, 2152, 2154, 2156, 2151, 2152, 2154, 2156, 2151, 2152,
     2154, 2156, 2151, 2152, 2154, 2156, 2151, 2152, 2154, 2156,
        0, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151
    } ;

static const flex_int16_t yy_nxt[4847] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      588,   78,  104,  104,  104,  104,  103, 1972,   78,  104,
      104,  104,  104,   19, 1961,   19,  105,  105,  105,  105,
       19, 1952,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1941,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1932,  164,  161,  170,  165,
      401, 1921,  166,  224,  399, 1912,  144,  162,  153,  402,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  224,  172,  186,  173,  162, 1901,  178,  187,
      174,  179,  264,  175,  180,  176,  193,  181,  406,  407,
      182,  265,  189,  171,  194,  144,  190,  144,  185,  177,
      191, 1748,  172,  186,  173, 1739,  192,  178,  187,  174,
      179,  264,  175,  180,  176,  193,  181,  195,  199,  182,
      265,  189,  269,  194,  205,  190,  200,  305,  206,  191,
      201,  196,  202,  203,  204,  192,  197,  198,  225,  226,
     1695,  207,  217,  218,  346, 1686,  195,  199, 1644,  219,

      208,  269,  220,  205,  209,  200,  305,  206,  210,  201,
      196,  202,  203,  204,  211,  197,  198,  225,  226,  212,
      207,  217,  218,  346,  213,  221,  347,  222,  219,  208,
      223,  220,  351,  209,  214,  387, 1635,  210,  438,  215,
      216, 1594, 1585,  211,  228,  228,  228,  228,  212,  309,
      309,  309,  309,  213,  221,  347,  222,  274,  399,  223,
      144,  351,  310,  214,  387,  275, 1540,  438,  215,  216,
      229,  230,  230,  230,  230,  229,  230,  230,  230,  230,
      234,  244,  235,  311,  231, 1676,  274,  236,  238,  231,
      237,  310,  239,  439,  275,  245,  240,  356,  246,  241,

      248,  247,  242,  232,  249,  357, 1537,  443,  250,  234,
      244,  235,  243,  231,  251, 1515,  236,  238,  231,  237,
     1467,  239,  439, 1464,  245,  240,  356,  246,  241,  248,
      247,  242,  232,  249,  357,  252,  443,  250,  479,  276,
     1442,  243,  266,  251,  253,  348,  254,  267,  485,  258,
      349,  255,  268,  277,  256,  350,  257,  259,  278,  279,
      260,  306,  307,  261,  252, 1396,  262,  479,  276,  263,
      488,  266, 1393,  253,  348,  254,  267,  485,  258,  349,
      255,  268,  277,  256,  350,  257,  259,  278,  279,  260,
      306,  307,  261,  270,  280,  262,  286,  271,  263,  488,

      287,  272,  281,  403,  404,  405,  282,  273,  283,  284,
      285, 1371, 1327,  288,  489, 1324, 1302,  294,  397,  397,
      397,  397,  270,  280,  490,  286,  271,  295, 1252,  287,
      272,  281,  296,  297,  486,  282,  273,  283,  284,  285,
      289,  368,  288,  489,  290,  369,  294,  302,  291,  303,
      298,  299,  304,  490,  292,  487,  295,  300,  370,  293,
      301,  296,  297,  486,  689,  689,  689,  689, 1151,  289,
      368, 1052,  955,  290,  369,  484,  302,  291,  303,  298,
      299,  304,  484,  292,  487,  482,  300,  370,  293,  301,
      311,  400,  312,  313,  313,  313,  313,  316,  227,  317,

      326,  320,  145,  491,  318,  321,  314,  319, 2151,  322,
      388,  389,  323, 2151,  327,  324,  384,  328,  385,  492,
      329,  386, 1727,  330,  393,  325,  316,  331,  317,  326,
      320,  332,  491,  318,  321,  314,  319,  333,  322,  388,
      389,  323,  334,  327,  324,  384,  328,  385,  492,  329,
      386,  335,  330,  336,  325,  358,  331,  448,  337,  340,
      332,  338,  493,  339,  352,  449,  333,  341,  353,  359,
      342,  334,  354,  343,  360,  361,  344, 2151,  355,  345,
      335, 2151,  336, 2151,  358, 2151,  448,  337,  340, 2151,
      338,  493,  339,  352,  449, 2151,  341,  353,  359,  342,

      376,  354,  343,  360,  361,  344,  362,  355,  345,  371,
      377,  480,  481,  372,  363,  378,  379,  373,  364,  494,
      365,  366,  367,  374,  380,  381,  495,  499,  375,  376,
      502,  382,  506,  507,  383,  362, 2151, 2151,  371,  377,
      480,  481,  372,  363,  378,  379,  373,  364,  494,  365,
      366,  367,  374,  380,  381,  495,  499,  375, 2151,  502,
      382,  506,  507,  383,  390,  390,  390,  390,  392, 2151,
      393,  394,  394,  394,  394,  508,  408,  391,  409,  509,
     2151,  418,  440,  410,  395,  412,  411,  441,  510,  413,
      511,  512,  442,  414, 2151,  419,  415,  500,  420,  416,

     2151,  421,  501, 2151,  508,  408,  391,  409,  509,  417,
      418,  440,  410,  395,  412,  411,  441,  510,  413,  511,
      512,  442,  414,  426,  419,  415,  500,  420,  416,  422,
      421,  501,  427,  423,  428,  515,  518,  424,  417,  429,
      432,  444,  430,  425,  431,  445, 2151, 2151,  433,  446,
     2151,  434,  426,  513,  435,  447, 2151,  436,  422,  514,
      437,  427,  423,  428,  515,  518,  424, 2151,  429,  432,
      444,  430,  425,  431,  445,  460,  450,  433,  446,  461,
      434,  521,  513,  435,  447,  454,  436, 2151,  514,  437,
      451,  522,  462,  455, 2151,  452,  453,  456,  463,  457,

      458,  459,  464,  523,  460,  450,  465,  524,  461, 2151,
      521,  476,  466,  477,  454, 2151,  478,  467, 2151,  451,
      522,  462,  455,  468,  452,  453,  456,  463,  457,  458,
      459,  464,  523,  469,  525,  465,  524,  529,  470,  471,
      476,  466,  477,  472,  473,  478,  467,  496,  497,  516,
      474, 2151,  468,  475,  519,  517,  498,  503,  536,  504,
      520, 2151,  469,  525,  505,  526,  529,  470,  471,  530,
      527,  528,  472,  473,  539,  532,  496,  497,  516,  474,
      533,  531,  475,  519,  517,  498,  503,  536,  504,  520,
      534,  537,  535,  505,  526,  538,  540,  541,  530,  527,

      528,  543,  544,  539,  532,  545,  546,  547,  548,  533,
      531,  549,  550,  551,  542,  552,  553,  556,  554,  534,
      537,  535,  555,  559,  538,  540,  541,  557,  560,  558,
      543,  544,  562, 2151,  545,  546,  547,  548,  565,  561,
      549,  550,  551,  542,  552,  553,  556,  554,  566,  567,
      568,  555,  559,  571,  563,  569,  557,  560,  558,  572,
      576,  562,  564,  570,  573,  577,  578,  565,  561,  580,
      581,  574,  579,  575,  589,  592,  582,  566,  567,  568,
     2151, 2151,  571,  563,  569, 2151, 2151, 2151,  572,  576,
     2151,  564,  570,  573,  577,  578, 2151, 2151,  580,  581,

      574,  579,  575,  589,  592,  582,  228,  228,  228,  228,
      584,  584,  584,  584,  229,  230,  230,  230,  230,  583,
      586,  590,  586,  585,  587,  587,  587,  587,  231,  593,
      594,  595,  596,  597,  598,  599,  600,  601,  603,  604,
      606,  610,  591,  611,  605,  602,  612,  607,  583,  608,
      590,  613,  585,  614,  609,  615,  616,  231,  593,  594,
      595,  596,  597,  598,  599,  600,  601,  603,  604,  606,
      610,  591,  611,  605,  602,  612,  607,  619,  608,  622,
      613,  617,  614,  609,  615,  616,  620,  618,  623,  625,
      626,  627,  621,  628,  624,  629,  630,  633,  636,  634,

      640,  631,  632,  637,  643,  638,  619,  639,  622,  641,
      617,  635,  644,  642, 2151,  620,  618,  623,  625,  626,
      627,  621,  628,  624,  629,  630,  633,  636,  634,  640,
      631,  632,  637,  643,  638,  645,  639,  649,  641,  650,
      635,  644,  642,  647,  648,  651,  652,  653,  654,  655,
      656,  657,  646,  658,  660,  663,  661,  659,  662,  664,
      666,  667,  669,  670,  645,  671,  649,  672,  650,  668,
      665,  675,  647,  648,  651,  652,  653,  654,  655,  656,
      657,  646,  658,  660,  663,  661,  659,  662,  664,  666,
      667,  669,  670,  673,  671,  676,  672,  677,  668,  665,

      675,  674,  680,  681,  678,  682,  679,  684,  685,  695,
      698,  683,  699, 2151,  686,  309,  309,  309,  309, 2151,
     2151, 2151,  673, 2151,  676, 2151,  677, 2151,  310, 2151,
      674,  680,  681,  678,  682,  679,  684,  685,  695,  698,
      683,  699,  687,  686,  687,  700,  688,  688,  688,  688,
      690,  690,  690,  690,  696,  701,  311,  310,  312,  692,
      692,  692,  692,  691,  693,  702,  693,  703,  694,  694,
      694,  694,  314,  704,  700,  697,  705,  706,  707,  709,
      710,  712,  716,  696,  701,  711,  708,  717,  713,  718,
      714,  719,  691,  720,  702,  715,  703,  721,  722,  725,

     2151,  314,  704,  728,  697,  705,  706,  707,  709,  710,
      712,  716,  731,  732,  711,  708,  717,  713,  718,  714,
      719,  733,  720,  723,  715,  726,  721,  722,  725,  724,
      729,  727,  728,  734,  735,  739,  730,  740,  736,  746,
      742,  731,  732,  737,  738,  743,  744,  747,  745,  741,
      733,  748,  723,  749,  726,  750,  753,  754,  724,  729,
      727,  755,  734,  735,  739,  730,  740,  736,  746,  742,
      751,  756,  737,  738,  743,  744,  747,  745,  741,  757,
      748,  758,  749,  759,  750,  753,  754,  752,  760,  761,
      755,  762,  763,  764,  766,  769,  767,  765,  768,  751,

      756,  772,  770,  773,  775,  776,  777,  778,  757,  781,
      758,  774,  759,  771,  782,  786,  752,  760,  761, 2151,
      762,  763,  764,  766,  769,  767,  765,  768,  787,  779,
      772,  770,  773,  775,  776,  777,  778,  780,  781,  783,
      774,  788,  771,  782,  786,  790,  784,  789,  785,  791,
      390,  390,  390,  390, 2151,  792, 2151,  787,  779,  795,
      795,  795,  795,  391, 2151, 2151,  780, 2151,  783,  806,
      788, 2151,  796, 2151,  790,  784,  789,  785,  791, 2151,
     2151,  793, 2151,  793,  792,  794,  794,  794,  794, 2151,
     2151, 2151,  391,  797,  797,  797,  797,  809,  806, 2151,

      392,  796,  393,  798,  798,  798,  798,  799,  802,  799,
      807,  800,  800,  800,  800,  810,  395,  801,  801,  801,
      801, 2151,  803,  803,  803,  803,  809,  805,  483,  811,
      483,  808,  812,  813,  814,  483,  815,  816,  820,  807,
      817,  818,  821,  823,  810,  395,  483,  822, 2151,  819,
      483,  827,  824,  828,  825,  829,  830,  831,  811,  826,
      808,  812,  813,  814,  832,  815,  816,  820,  833,  817,
      818,  821,  823,  834,  836,  839,  822,  483,  819,  835,
      827,  824,  828,  825,  829,  830,  831,  842,  826,  837,
      840,  843,  844,  832,  845,  838,  841,  833,  846,  850,

      847,  851,  834,  836,  839,  848,  849,  853,  835,  855,
      857,  856,  854,  852,  860,  861,  842,  866,  837,  840,
      843,  844,  858,  845,  838,  841,  859,  846,  850,  847,
      851,  862,  864,  865,  848,  849,  853,  867,  855,  857,
      856,  854,  852,  860,  861,  868,  866,  869,  863,  870,
      871,  858,  872,  873,  874,  859,  877,  880,  881,  875,
      862,  864,  865,  876,  883,  878,  867,  879,  886,  882,
      887,  888,  884,  889,  868,  892,  869,  863,  870,  871,
      885,  872,  873,  874,  893,  877,  880,  881,  875,  897,
      898,  901,  876,  883,  878,  890,  879,  886,  882,  887,

      888,  884,  889,  891,  892,  894,  904,  905,  906,  885,
      899,  902,  895,  893,  896,  907,  900,  903,  897,  898,
      901,  908,  911,  909,  890,  912,  913,  914,  915,  916,
      917,  918,  891,  919,  894,  904,  905,  906,  910,  899,
      902,  895,  920,  896,  907,  900,  903,  921,  922,  923,
      908,  911,  909,  924,  912,  913,  914,  915,  916,  917,
      918,  925,  919,  926,  929,  927,  930,  910,  931,  932,
      933,  920,  928,  934,  935,  936,  921,  922,  923,  937,
      938,  939,  924,  940,  941,  945,  942,  946,  947,  948,
      925,  949,  926,  929,  927,  930,  943,  931,  932,  933,

      950,  928,  934,  935,  936,  951,  944,  952,  937,  938,
      939,  953,  940,  941,  945,  954,  946,  947,  948,  956,
      949,  957,  958,  959,  960,  943,  961,  962,  963,  950,
      964,  965,  966,  967,  951,  944,  952,  968,  970,  971,
      953,  969,  972,  973,  954,  974,  976,  977,  956,  978,
      957,  958,  959,  960,  975,  961,  962,  963,  979,  964,
      965,  966,  967,  980,  981,  982,  968,  970,  971,  983,
      969,  972,  973,  984,  974,  976,  977,  985,  978,  986,
      988,  987,  989,  990,  991,  992,  993,  979,  995,  996,
      994, 2151,  980,  981,  982, 2151, 2151, 2151,  983, 2151,

     2151, 2151,  984, 2151, 1001, 2151,  985, 2151,  986,  988,
      987,  989,  990,  991,  992,  993, 2151,  995,  996,  994,
      997, 1002,  997, 1003,  998,  998,  998,  998,  584,  584,
      584,  584,  999, 1001,  999, 1004, 1000, 1000, 1000, 1000,
     1005,  585,  587,  587,  587,  587,  587,  587,  587,  587,
     1002, 1006, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1018, 1004, 1019, 1007, 1020, 1021, 1005,
      585, 1022, 1023, 1026, 1024, 1027, 1028, 1029, 1030, 1031,
     1006, 1025, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1016, 1017, 1018, 1032, 1019, 1007, 1020, 1021, 1033, 1034,

     1022, 1023, 1026, 1024, 1027, 1028, 1029, 1030, 1031, 1035,
     1025, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1032, 1049, 1040, 1050, 1051, 1033, 1034, 1053,
     1054, 1055, 1056, 1057, 1041, 1058, 1059, 1060, 1035, 1061,
     1036, 1037, 1038, 1062, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1063, 1049, 1040, 1050, 1051, 1064, 1067, 1053, 1054,
     1055, 1056, 1057, 1041, 1058, 1059, 1060, 1065, 1061, 1068,
     1069, 1066, 1062, 1070, 1071, 1073, 1074, 1075, 1076, 1077,
     1063, 1078, 1079, 1072, 1080, 1064, 1067, 1081, 1082, 1083,
     1085, 1084, 1086, 1087, 1088, 1089, 1065, 1090, 1068, 1069,

     1066, 1091, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1092,
     1078, 1079, 1093, 1080, 2151, 2151, 1081, 1082, 1083, 1085,
     1084, 1086, 1087, 1088, 1089, 2151, 1090, 2151, 1100, 2151,
     1091, 1094, 1094, 1094, 1094, 2151, 2151, 2151, 1092, 2151,
     2151, 1093,  688,  688,  688,  688, 1095, 1095, 1095, 1095,
      690,  690,  690,  690, 1096, 1101, 1096, 1100, 1097, 1097,
     1097, 1097,  311,  691,  312, 1098, 1098, 1098, 1098, 1099,
     1099, 1099, 1099,  694,  694,  694,  694, 1102,  314, 1103,
     1104, 1105, 1107, 1108, 1101, 1109, 1110, 1111, 1112, 1113,
     1114, 1115,  691, 1116, 1117, 1118, 1106, 1119, 1120, 1121,

     1122, 2151, 1125, 1126, 1127, 1128, 1102,  314, 1103, 1104,
     1105, 1107, 1108, 1129, 1109, 1110, 1111, 1112, 1113, 1114,
     1115, 1130, 1116, 1117, 1118, 1106, 1119, 1120, 1121, 1122,
     1123, 1125, 1126, 1127, 1128, 1131, 1132, 1124, 1133, 1134,
     1135, 1136, 1129, 1137, 1141, 1142, 1143, 1144, 1145, 1146,
     1130, 1138, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1123,
     1155, 1139, 1156, 1157, 1131, 1132, 1124, 1133, 1134, 1135,
     1136, 1140, 1137, 1141, 1142, 1143, 1144, 1145, 1146, 1158,
     1159, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1160, 1155,
     1139, 1156, 1157, 1161, 1162, 1163, 1166, 1164, 1167, 1168,

     1140, 1165, 1169, 1170, 1172, 1173, 1174, 1175, 1158, 1159,
     1176, 1177, 1171, 1178, 1179, 1180, 1181, 1160, 1182, 1184,
     1183, 1185, 1161, 1162, 1163, 1166, 1164, 1167, 1168, 1186,
     1165, 1169, 1170, 1172, 1173, 1174, 1175, 1187, 1188, 1176,
     1177, 1191, 1178, 1179, 1180, 1181, 1192, 1182, 1184, 1183,
     1185, 1189, 2151, 1201, 2151, 1190, 2151, 2151, 1186, 1193,
     1193, 1193, 1193, 2151, 2151, 2151, 1187, 1188, 2151, 2151,
     1191,  794,  794,  794,  794, 1192,  795,  795,  795,  795,
     1189, 1194, 1201, 1194, 1190, 1195, 1195, 1195, 1195,  796,
     1196, 1196, 1196, 1196,  392, 2151,  393, 1197, 1197, 1197,

     1197, 1198, 1198, 1198, 1198,  800,  800,  800,  800,  802,
      395, 1199, 1199, 1199, 1199,  802, 1202, 1203,  796,  805,
      483, 1204,  483,  801,  801,  801,  801,  483, 1205, 1200,
     1200, 1200, 1200, 1206, 1208, 1209, 1210, 1211,  483,  395,
     2151, 1212,  483, 1213, 1214, 1202, 1203, 1215, 1207, 1216,
     1204, 1217, 1218, 1219, 1220, 1221, 1222, 1205, 1223, 1226,
     1224, 1227, 1206, 1208, 1209, 1210, 1211, 1225, 1228,  483,
     1212, 1229, 1213, 1214, 1230, 1231, 1215, 1207, 1216, 1232,
     1217, 1218, 1219, 1220, 1221, 1222, 1233, 1223, 1226, 1224,
     1227, 1234, 1235, 1236, 1237, 1238, 1225, 1228, 1242, 1239,

     1229, 1243, 1244, 1230, 1231, 1245, 1246, 1247, 1232, 1240,
     1248, 1249, 1250, 1251, 1253, 1233, 1254, 1255, 1256, 1241,
     1234, 1235, 1236, 1237, 1238, 1257, 1258, 1242, 1259, 1260,
     1243, 1244, 1261, 1262, 1245, 1246, 1247, 1263, 1240, 1248,
     1249, 1250, 1251, 1253, 1264, 1254, 1255, 1256, 1241, 1265,
     1267, 1268, 1269, 1266, 1257, 1258, 1270, 1259, 1260, 1271,
     1273, 1261, 1262, 1274, 1275, 1276, 1263, 1277, 1272, 1278,
     1279, 1280, 1281, 1264, 1282, 1283, 1285, 1284, 1265, 1267,
     1268, 1269, 1266, 1286, 1287, 1270, 1288, 1289, 1271, 1273,
     1292, 1290, 1274, 1275, 1276, 1291, 1277, 1293, 1278, 1279,

     1280, 1281, 1294, 1282, 1283, 1285, 1284, 1295, 1296, 1297,
     1298, 1299, 1286, 1287, 1300, 1288, 1289, 1301, 1303, 1292,
     1290, 1304, 1305, 1306, 1291, 1307, 1293, 1308, 1309, 1310,
     1311, 1294, 1312, 1313, 1314, 1315, 1295, 1296, 1297, 1298,
     1299, 1316, 1317, 1300, 1318, 1319, 1301, 1303, 1320, 1321,
     1304, 1305, 1306, 1322, 1307, 1323, 1308, 1309, 1310, 1311,
     1328, 1312, 1313, 1314, 1315, 1325, 1329, 1330, 1331, 1332,
     1316, 1317, 1333, 1318, 1319, 1334, 1326, 1320, 1321, 1335,
     1336, 1337, 1322, 1338, 1323, 1339, 1340, 1341, 1342, 1328,
     1343, 1344, 1345, 1346, 1325, 1329, 1330, 1331, 1332, 1347,

     1348, 1333, 1349, 1350, 1334, 1326, 1351, 1352, 1335, 1336,
     1337, 1353, 1338, 1354, 1339, 1340, 1341, 1342, 1355, 1343,
     1344, 1345, 1346, 1356, 1357, 1358, 1359, 1360, 1347, 1348,
     1361, 1349, 1350, 1362, 2151, 1351, 1352, 2151, 2151, 2151,
     1353, 2151, 1354,  998,  998,  998,  998, 1355,  998,  998,
      998,  998, 1356, 1357, 1358, 1359, 1360, 1363, 1364, 1361,
     1365, 1366, 1362, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1367, 1368, 1369, 1370, 1372, 1373, 1374, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1363, 1364, 1383, 1365,
     1366, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,

     1367, 1368, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1397, 1398, 1383, 1394, 1399,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1395,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1397, 1398, 1414, 1394, 1399, 1415,
     1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1395, 1400,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1424, 1425, 1414, 1426, 1427, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1428, 1429, 1430,
     1431, 1094, 1094, 1094, 1094, 1432, 1432, 1432, 1432, 2151,

     1434, 1435, 1424, 1425, 1436, 1426, 1427, 1433, 1433, 1433,
     1433, 1097, 1097, 1097, 1097, 1437, 1428, 1429, 1430, 1431,
      312, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1434,
     1435, 1438, 1439, 1436,  314, 1440, 1441, 1443, 1444, 1445,
     1446, 1447, 1448, 1449, 1437, 1450, 1451, 1452, 1453, 1454,
     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1468,
     1438, 1439, 1465,  314, 1440, 1441, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1466, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1468, 1469,
     1470, 1465, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,

     1479, 1480, 1466, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1469, 1470,
     1496, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1497, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1498, 1499, 1496,
     1500, 1501, 1502, 1193, 1193, 1193, 1193, 2151, 2151, 2151,
     1497, 1503, 1503, 1503, 1503, 1195, 1195, 1195, 1195, 1504,
     1504, 1504, 1504, 1507, 1508, 1509, 1498, 1499, 1510, 1500,
     1501, 1502,  392, 2151, 2151, 1197, 1197, 1197, 1197, 1198,
     1198, 1198, 1198, 1506, 1506, 1506, 1506,  802,  395, 1511,

     1512, 1513, 1507, 1508, 1509, 1514, 1516, 1510, 1517, 1518,
     1519,  801,  801,  801,  801, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531,  395, 1511, 1512,
     1513, 1532, 1533, 1534, 1514, 1516, 1535, 1517, 1518, 1519,
     1536, 1541, 1542, 1543, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1538, 1544, 1545, 1546,
     1532, 1533, 1534, 1547, 1548, 1535, 1549, 1539, 1550, 1536,
     1541, 1542, 1543, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
     1558, 1559, 1560, 1561, 1562, 1538, 1544, 1545, 1546, 1563,
     1564, 1565, 1547, 1548, 1566, 1549, 1539, 1550, 1567, 1568,

     1569, 1570, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1559, 1560, 1561, 1562, 1571, 1572, 1573, 1574, 1563, 1564,
     1565, 1575, 1576, 1566, 1577, 1578, 1579, 1567, 1568, 1569,
     1570, 1580, 1581, 1582, 1583, 1584, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1571, 1572, 1573, 1574, 1593, 1595, 1596,
     1575, 1576, 2151, 1577, 1578, 1579, 1599, 1600, 1601, 1602,
     1580, 1581, 1582, 1583, 1584, 1586, 1587, 1588, 1589, 1590,
     1591, 1592, 1597, 1603, 1604, 1605, 1593, 1595, 1596, 1606,
     1607, 1598, 1608, 1609, 1610, 1599, 1600, 1601, 1602, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,

     1622, 1597, 1603, 1604, 1605, 1623, 1624, 1625, 1606, 1607,
     1626, 1608, 1609, 1610, 1627, 1628, 1629, 1630, 1611, 1612,
     1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1631, 1632, 1633, 1634, 1623, 1624, 1625, 1636, 1637, 1626,
     1638, 1639, 1640, 1627, 1628, 1629, 1630, 1641, 1642, 1643,
     1645, 1646, 1649, 1650, 1647, 1651, 1652, 1653, 1654, 1631,
     1632, 1633, 1634, 1648, 1655, 1656, 1636, 1637, 1657, 1638,
     1639, 1640, 1658, 1659, 1660, 1661, 1641, 1642, 1643, 1645,
     1646, 1649, 1650, 1647, 1651, 1652, 1653, 1654, 1662, 1663,
     1664, 1665, 1666, 1655, 1656, 1667, 1668, 1657, 1669, 1670,

     1671, 1658, 1659, 1660, 1661, 1672, 1673, 1674, 1675, 1433,
     1433, 1433, 1433, 1677, 1678, 1679, 1680, 1662, 1663, 1664,
     1665, 1666, 1681, 1682, 1667, 1668, 1683, 1669, 1670, 1671,
     1684, 1685, 1687, 1688, 1672, 1673, 1674, 1675, 1689, 1690,
     1691, 1692, 1677, 1678, 1679, 1680, 1693, 1694, 1696, 1697,
     1700, 1681, 1682, 1701, 1698, 1683, 1702, 1703, 1704, 1684,
     1685, 1687, 1688, 1699, 1705, 1706, 1707, 1689, 1690, 1691,
     1692, 1708, 1709, 1710, 1711, 1693, 1694, 1696, 1697, 1700,
     1712, 1713, 1701, 1698, 1714, 1702, 1703, 1704, 1715, 1716,
     1717, 1718, 1719, 1705, 1706, 1707, 1720, 1721, 1722, 1723,

     1708, 1709, 1710, 1711, 1724, 1725, 1726, 2151, 2151, 1712,
     1713, 2151, 2151, 1714, 2151, 1730, 1731, 1715, 1716, 1717,
     1718, 1719, 1732, 1733, 1734, 1720, 1721, 1722, 1723, 1503,
     1503, 1503, 1503, 1724, 1725, 1726, 1728, 1728, 1728, 1728,
     1729, 1729, 1729, 1729, 1730, 1731, 1735, 1736, 1737, 1738,
     1740, 1732, 1733, 1734, 1741, 1742, 1743, 1744, 1745, 1746,
     1747, 1749, 1750, 1751, 1753, 1754, 1755, 1756, 1757, 1758,
     1759, 1760, 1752, 1761, 1762, 1735, 1736, 1737, 1738, 1740,
     1763, 1764, 1765, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
     1749, 1750, 1751, 1753, 1754, 1755, 1756, 1757, 1758, 1759,

     1760, 1766, 1761, 1762, 1767, 1768, 1769, 1770, 1771, 1763,
     1764, 1765, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
     1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
     1766, 1790, 1791, 1767, 1768, 1769, 1770, 1771, 1792, 1793,
     1794, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1795,
     1790, 1791, 1796, 1797, 1798, 1799, 1800, 1792, 1793, 1794,
     1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1795, 1819,
     1820, 1796, 1797, 1798, 1799, 1800, 1821, 1822, 1823, 1801,

     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1812, 1813, 1814, 1815, 1816, 1817, 1818, 1824, 1819, 1820,
     1825, 1826, 1827, 1828, 1829, 1821, 1822, 1823, 1830, 1831,
     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1838, 1838, 1838,
     1839, 1840, 1841, 1842, 1843, 1844, 1824, 1845, 1846, 1825,
     1826, 1827, 1828, 1829, 1847, 1848, 1849, 1830, 1831, 1832,
     1833, 1834, 1835, 1836, 1837, 1850, 1851, 1852, 1853, 1839,
     1840, 1841, 1842, 1843, 1844, 1854, 1845, 1846, 1855, 1856,
     1857, 1858, 1859, 1847, 1848, 1849, 1860, 1861, 1862, 1863,
     1864, 1865, 1866, 1867, 1850, 1851, 1852, 1853, 1868, 1868,

     1868, 1868, 1870, 1871, 1854, 1872, 1873, 1855, 1856, 1857,
     1858, 1859, 1874, 1875, 1876, 1860, 1861, 1862, 1863, 1864,
     1865, 1866, 1867, 1728, 1728, 1728, 1728, 1869, 1869, 1869,
     1869, 1870, 1871, 1877, 1872, 1873, 1878, 1879, 1880, 1881,
     1882, 1874, 1875, 1876, 1883, 1884, 1885, 1886, 1887, 1888,
     1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
     1899, 1900, 1877, 1902, 1903, 1878, 1879, 1880, 1881, 1882,
     1904, 1905, 1906, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
     1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
     1900, 1907, 1902, 1903, 1908, 1909, 1910, 1911, 1913, 1904,

     1905, 1906, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1922,
     1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1933,
     1907, 1934, 1935, 1908, 1909, 1910, 1911, 1913, 1936, 1937,
     1938, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1922, 1923,
     1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1933, 1939,
     1934, 1935, 1838, 1838, 1838, 1838, 1940, 1936, 1937, 1938,
     1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
     1953, 1954, 1955, 1956, 1957, 1958, 2151, 2151, 1939, 1868,
     1868, 1868, 1868, 1959, 1960, 1940, 1962, 1963, 1964, 1942,
     1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1953,

     1954, 1955, 1956, 1957, 1958, 1728, 1728, 1728, 1728, 1965,
     1966, 1967, 1959, 1960, 1968, 1962, 1963, 1964, 1969, 1970,
     1971, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1982,
     1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1965, 1966,
     1967, 1991, 1992, 1968, 1981, 1993, 1994, 1969, 1970, 1971,
     1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1982, 1983,
     1984, 1985, 1986, 1987, 1988, 1989, 1990, 1995, 1996, 1997,
     1991, 1992, 1998, 1981, 1993, 1994, 2000, 2001, 2002, 2003,
     2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 1999, 2012,
     2013, 2014, 2015, 2151, 2018, 2019, 1995, 1996, 1997, 2020,

     2021, 1998, 2022, 2023, 2024, 2000, 2001, 2002, 2003, 2004,
     2005, 2006, 2007, 2008, 2009, 2010, 2011, 1999, 2012, 2013,
     2014, 2015, 2016, 2018, 2019, 2025, 2026, 2027, 2020, 2021,
     2028, 2022, 2023, 2024, 2029, 2030, 2031, 2032, 2017, 2033,
     2036, 2034, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
     2045, 2016, 2046, 2047, 2025, 2026, 2027, 2035, 2048, 2028,
     2049, 2050, 2051, 2029, 2030, 2031, 2032, 2017, 2033, 2036,
     2034, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
     2052, 2046, 2047, 2053, 2054, 2055, 2035, 2048, 2056, 2049,
     2050, 2051, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,

     2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2052,
     2074, 2075, 2053, 2054, 2055, 2076, 2077, 2056, 2078, 2079,
     2080, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
     2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2081, 2074,
     2075, 2082, 2083, 2084, 2076, 2077, 2085, 2078, 2079, 2080,
     2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
     2096, 2097, 2098, 2099, 2100, 2101, 2102, 2081, 2103, 2104,
     2082, 2083, 2084, 2105, 2106, 2085, 2107, 2108, 2109, 2086,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
     2097, 2098, 2099, 2100, 2101, 2102, 2110, 2103, 2104, 2111,

     2112, 2113, 2105, 2106, 2114, 2107, 2108, 2109, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2110, 2132, 2133, 2111, 2112,
     2113, 2134, 2135, 2114, 2136, 2137, 2138, 2115, 2116, 2117,
     2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
     2128, 2129, 2130, 2131, 2139, 2132, 2133, 2140, 2141, 2142,
     2134, 2135, 2143, 2136, 2137, 2138, 2144, 2145, 2146, 2147,
     2148, 2149, 2150, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2139, 2151, 2151, 2140, 2141, 2142, 2151,
     2151, 2143, 2151, 2151, 2151, 2144, 2145, 2146, 2147, 2148,

     2149, 2150,  233, 2151,  233,  233,  308, 2151,  308, 2151,
      308,  315,  315,  315,  315,  315,  315,  396, 2151,  396,
      396,  396,  396,  396,  396,  396,  398, 2151, 2151,  398,
      398,  398, 2151,  398,  398,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  804,  804,  804,  804,  804,  804,
      804,  804,  804, 1505, 2151, 1505, 1505, 1505, 1505, 1505,
     1505, 1505,   13, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151
    } ;

static const flex_int16_t yy_chk[4847] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2158,    7,    7,    7,    7,    7,    8, 1890,    8,    8,
        8,    8,    8,    9, 1875,    9,    9,    9,    9,    9,
       10, 1859,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1844,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1829,   28,   27,   29,   28,
      115, 1814,   28,   45,  107, 1800,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   45,   30,   34,   30,   27, 1785,   31,   34,
       30,   31,   59,   30,   31,   30,   37,   31,  119,  119,
       31,   60,   36,   30,   37,  144,   36,  144,   34,   31,
       36, 1529,   30,   34,   30, 1518,   36,   31,   34,   30,
       31,   59,   30,   31,   30,   37,   31,   38,   39,   31,
       60,   36,   62,   37,   40,   36,   39,   73,   40,   36,
       39,   38,   39,   39,   39,   36,   38,   38,   46,   46,
     1456,   40,   43,   43,   87, 1445,   38,   39, 1385,   43,

       41,   62,   43,   40,   41,   39,   73,   40,   41,   39,
       38,   39,   39,   39,   41,   38,   38,   46,   46,   41,
       40,   43,   43,   87,   42,   44,   88,   44,   43,   41,
       44,   43,   90,   41,   42,  101, 1374,   41,  126,   42,
       42, 1316, 1305,   41,   50,   50,   50,   50,   41,   79,
       79,   79,   79,   42,   44,   88,   44,   65,  399,   44,
      399,   90,   79,   42,  101,   65, 1243,  126,   42,   42,
       51,   51,   51,   51,   51,   52,   52,   52,   52,   52,
       53,   55,   53, 1432,   51, 1432,   65,   53,   54,   52,
       53,   79,   54,  127,   65,   55,   54,   93,   55,   54,

       56,   55,   54,   51,   56,   93, 1239,  129,   56,   53,
       55,   53,   54,   51,   56, 1212,   53,   54,   52,   53,
     1142,   54,  127, 1138,   55,   54,   93,   55,   54,   56,
       55,   54,   51,   56,   93,   57,  129,   56,  139,   66,
     1111,   54,   61,   56,   57,   89,   57,   61,  153,   58,
       89,   57,   61,   66,   57,   89,   57,   58,   66,   66,
       58,   74,   74,   58,   57, 1043,   58,  139,   66,   58,
      155,   61, 1039,   57,   89,   57,   61,  153,   58,   89,
       57,   61,   66,   57,   89,   57,   58,   66,   66,   58,
       74,   74,   58,   64,   67,   58,   68,   64,   58,  155,

       68,   64,   67,  117,  117,  117,   67,   64,   67,   67,
       67, 1012,  946,   68,  156,  942,  915,   70,  105,  105,
      105,  105,   64,   67,  157,   68,   64,   70,  864,   68,
       64,   67,   70,   70,  154,   67,   64,   67,   67,   67,
       69,   96,   68,  156,   69,   96,   70,   72,   69,   72,
       71,   71,   72,  157,   69,  154,   70,   71,   96,   69,
       71,   70,   70,  154,  311,  311,  311,  311,  753,   69,
       96,  647,  543,   69,   96,  483,   72,   69,   72,   71,
       71,   72,  146,   69,  154,  142,   71,   96,   69,   71,
       80,  109,   80,   80,   80,   80,   80,   81,   47,   81,

       83,   82,   17,  158,   81,   82,   80,   81,   13,   82,
      102,  102,   82,    0,   83,   82,  100,   83,  100,  159,
       83,  100, 1504,   84, 1504,   82,   81,   84,   81,   83,
       82,   84,  158,   81,   82,   80,   81,   84,   82,  102,
      102,   82,   85,   83,   82,  100,   83,  100,  159,   83,
      100,   85,   84,   85,   82,   94,   84,  131,   85,   86,
       84,   85,  160,   85,   92,  131,   84,   86,   92,   94,
       86,   85,   92,   86,   94,   94,   86,    0,   92,   86,
       85,    0,   85,    0,   94,    0,  131,   85,   86,    0,
       85,  160,   85,   92,  131,    0,   86,   92,   94,   86,

       98,   92,   86,   94,   94,   86,   95,   92,   86,   97,
       98,  140,  140,   97,   95,   98,   98,   97,   95,  161,
       95,   95,   95,   97,   99,   99,  163,  165,   97,   98,
      167,   99,  169,  170,   99,   95,    0,    0,   97,   98,
      140,  140,   97,   95,   98,   98,   97,   95,  161,   95,
       95,   95,   97,   99,   99,  163,  165,   97,    0,  167,
       99,  169,  170,   99,  103,  103,  103,  103,  104,    0,
      104,  104,  104,  104,  104,  171,  120,  103,  120,  172,
        0,  122,  128,  120,  104,  121,  120,  128,  173,  121,
      174,  175,  128,  121,    0,  122,  121,  166,  122,  121,

        0,  122,  166,    0,  171,  120,  103,  120,  172,  121,
      122,  128,  120,  104,  121,  120,  128,  173,  121,  174,
      175,  128,  121,  124,  122,  121,  166,  122,  121,  123,
      122,  166,  124,  123,  124,  177,  179,  123,  121,  124,
      125,  130,  124,  123,  124,  130,    0,    0,  125,  130,
        0,  125,  124,  176,  125,  130,    0,  125,  123,  176,
      125,  124,  123,  124,  177,  179,  123,    0,  124,  125,
      130,  124,  123,  124,  130,  134,  132,  125,  130,  134,
      125,  181,  176,  125,  130,  133,  125,    0,  176,  125,
      132,  182,  134,  133,    0,  132,  132,  133,  135,  133,

      133,  133,  135,  183,  134,  132,  135,  184,  134,    0,
      181,  138,  135,  138,  133,    0,  138,  135,    0,  132,
      182,  134,  133,  136,  132,  132,  133,  135,  133,  133,
      133,  135,  183,  136,  185,  135,  184,  188,  136,  136,
      138,  135,  138,  137,  137,  138,  135,  164,  164,  178,
      137,    0,  136,  137,  180,  178,  164,  168,  192,  168,
      180,    0,  136,  185,  168,  186,  188,  136,  136,  189,
      186,  186,  137,  137,  194,  190,  164,  164,  178,  137,
      190,  189,  137,  180,  178,  164,  168,  192,  168,  180,
      191,  193,  191,  168,  186,  193,  195,  196,  189,  186,

      186,  197,  197,  194,  190,  198,  199,  200,  201,  190,
      189,  202,  203,  204,  196,  205,  206,  208,  207,  191,
      193,  191,  207,  210,  193,  195,  196,  209,  211,  209,
      197,  197,  212,    0,  198,  199,  200,  201,  214,  211,
      202,  203,  204,  196,  205,  206,  208,  207,  215,  216,
      217,  207,  210,  219,  213,  218,  209,  211,  209,  220,
      222,  212,  213,  218,  221,  223,  224,  214,  211,  225,
      226,  221,  224,  221,  234,  236,  226,  215,  216,  217,
        0,    0,  219,  213,  218,    0,    0,    0,  220,  222,
        0,  213,  218,  221,  223,  224,    0,    0,  225,  226,

      221,  224,  221,  234,  236,  226,  228,  228,  228,  228,
      229,  229,  229,  229,  230,  230,  230,  230,  230,  228,
      231,  235,  231,  229,  231,  231,  231,  231,  230,  237,
      238,  239,  240,  241,  242,  244,  245,  245,  246,  247,
      248,  250,  235,  251,  247,  245,  252,  249,  228,  249,
      235,  253,  229,  254,  249,  255,  256,  230,  237,  238,
      239,  240,  241,  242,  244,  245,  245,  246,  247,  248,
      250,  235,  251,  247,  245,  252,  249,  258,  249,  260,
      253,  257,  254,  249,  255,  256,  259,  257,  261,  262,
      263,  264,  259,  265,  261,  266,  267,  269,  271,  270,

      273,  267,  267,  271,  275,  272,  258,  272,  260,  274,
      257,  270,  276,  274,    0,  259,  257,  261,  262,  263,
      264,  259,  265,  261,  266,  267,  269,  271,  270,  273,
      267,  267,  271,  275,  272,  277,  272,  279,  274,  280,
      270,  276,  274,  278,  278,  281,  282,  283,  284,  285,
      286,  287,  277,  288,  289,  291,  290,  288,  290,  292,
      293,  294,  295,  296,  277,  297,  279,  298,  280,  294,
      292,  300,  278,  278,  281,  282,  283,  284,  285,  286,
      287,  277,  288,  289,  291,  290,  288,  290,  292,  293,
      294,  295,  296,  299,  297,  301,  298,  302,  294,  292,

      300,  299,  303,  304,  302,  305,  302,  306,  307,  316,
      318,  305,  319,    0,  307,  309,  309,  309,  309,    0,
        0,    0,  299,    0,  301,    0,  302,    0,  309,    0,
      299,  303,  304,  302,  305,  302,  306,  307,  316,  318,
      305,  319,  310,  307,  310,  320,  310,  310,  310,  310,
      312,  312,  312,  312,  317,  321,  313,  309,  313,  313,
      313,  313,  313,  312,  314,  322,  314,  323,  314,  314,
      314,  314,  313,  324,  320,  317,  326,  327,  327,  328,
      329,  330,  332,  317,  321,  329,  327,  333,  331,  334,
      331,  335,  312,  336,  322,  331,  323,  337,  338,  340,

        0,  313,  324,  342,  317,  326,  327,  327,  328,  329,
      330,  332,  344,  345,  329,  327,  333,  331,  334,  331,
      335,  346,  336,  339,  331,  341,  337,  338,  340,  339,
      343,  341,  342,  347,  348,  351,  343,  352,  349,  355,
      353,  344,  345,  349,  349,  353,  354,  356,  354,  352,
      346,  356,  339,  357,  341,  358,  360,  360,  339,  343,
      341,  361,  347,  348,  351,  343,  352,  349,  355,  353,
      359,  362,  349,  349,  353,  354,  356,  354,  352,  363,
      356,  364,  357,  365,  358,  360,  360,  359,  366,  367,
      361,  368,  369,  370,  371,  373,  372,  370,  372,  359,

      362,  375,  374,  376,  377,  378,  379,  380,  363,  382,
      364,  376,  365,  374,  383,  385,  359,  366,  367,    0,
      368,  369,  370,  371,  373,  372,  370,  372,  386,  381,
      375,  374,  376,  377,  378,  379,  380,  381,  382,  384,
      376,  387,  374,  383,  385,  388,  384,  387,  384,  389,
      390,  390,  390,  390,    0,  389,    0,  386,  381,  392,
      392,  392,  392,  390,    0,    0,  381,    0,  384,  408,
      387,    0,  392,    0,  388,  384,  387,  384,  389,    0,
        0,  391,    0,  391,  389,  391,  391,  391,  391,    0,
        0,    0,  390,  393,  393,  393,  393,  410,  408,    0,

      394,  392,  394,  394,  394,  394,  394,  395,  397,  395,
      409,  395,  395,  395,  395,  411,  394,  396,  396,  396,
      396,    0,  397,  397,  397,  397,  410,  401,  401,  412,
      401,  409,  413,  414,  415,  401,  416,  418,  420,  409,
      419,  419,  421,  422,  411,  394,  401,  421,    0,  419,
      401,  424,  423,  425,  423,  426,  427,  428,  412,  423,
      409,  413,  414,  415,  429,  416,  418,  420,  430,  419,
      419,  421,  422,  431,  432,  434,  421,  401,  419,  431,
      424,  423,  425,  423,  426,  427,  428,  436,  423,  433,
      435,  437,  438,  429,  439,  433,  435,  430,  440,  443,

      441,  444,  431,  432,  434,  441,  441,  445,  431,  446,
      447,  446,  445,  444,  449,  450,  436,  453,  433,  435,
      437,  438,  448,  439,  433,  435,  448,  440,  443,  441,
      444,  451,  452,  452,  441,  441,  445,  454,  446,  447,
      446,  445,  444,  449,  450,  455,  453,  456,  451,  457,
      458,  448,  459,  460,  461,  448,  463,  465,  466,  462,
      451,  452,  452,  462,  467,  464,  454,  464,  469,  466,
      470,  471,  468,  472,  455,  474,  456,  451,  457,  458,
      468,  459,  460,  461,  475,  463,  465,  466,  462,  477,
      478,  480,  462,  467,  464,  473,  464,  469,  466,  470,

      471,  468,  472,  473,  474,  476,  490,  491,  492,  468,
      479,  481,  476,  475,  476,  493,  479,  481,  477,  478,
      480,  494,  496,  495,  473,  497,  498,  499,  500,  501,
      502,  503,  473,  504,  476,  490,  491,  492,  495,  479,
      481,  476,  505,  476,  493,  479,  481,  506,  507,  508,
      494,  496,  495,  509,  497,  498,  499,  500,  501,  502,
      503,  511,  504,  512,  514,  513,  515,  495,  516,  517,
      518,  505,  513,  519,  520,  521,  506,  507,  508,  522,
      523,  524,  509,  526,  527,  529,  528,  531,  532,  533,
      511,  534,  512,  514,  513,  515,  528,  516,  517,  518,

      535,  513,  519,  520,  521,  536,  528,  537,  522,  523,
      524,  540,  526,  527,  529,  541,  531,  532,  533,  544,
      534,  545,  546,  547,  548,  528,  549,  550,  551,  535,
      552,  553,  554,  555,  536,  528,  537,  556,  557,  558,
      540,  556,  559,  560,  541,  561,  562,  563,  544,  565,
      545,  546,  547,  548,  561,  549,  550,  551,  566,  552,
      553,  554,  555,  568,  569,  570,  556,  557,  558,  571,
      556,  559,  560,  572,  561,  562,  563,  573,  565,  574,
      575,  574,  576,  577,  578,  579,  580,  566,  581,  582,
      580,    0,  568,  569,  570,    0,    0,    0,  571,    0,

        0,    0,  572,    0,  594,    0,  573,    0,  574,  575,
      574,  576,  577,  578,  579,  580,    0,  581,  582,  580,
      583,  595,  583,  596,  583,  583,  583,  583,  584,  584,
      584,  584,  585,  594,  585,  597,  585,  585,  585,  585,
      598,  584,  586,  586,  586,  586,  587,  587,  587,  587,
      595,  599,  596,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  597,  611,  599,  612,  613,  598,
      584,  615,  616,  618,  617,  619,  620,  621,  622,  623,
      599,  617,  600,  601,  602,  603,  604,  605,  606,  607,
      608,  609,  610,  624,  611,  599,  612,  613,  625,  626,

      615,  616,  618,  617,  619,  620,  621,  622,  623,  627,
      617,  628,  630,  631,  632,  633,  635,  636,  637,  638,
      639,  640,  624,  641,  632,  644,  645,  625,  626,  648,
      649,  650,  651,  652,  632,  653,  654,  655,  627,  656,
      628,  630,  631,  657,  633,  635,  636,  637,  638,  639,
      640,  658,  641,  632,  644,  645,  659,  661,  648,  649,
      650,  651,  652,  632,  653,  654,  655,  660,  656,  662,
      663,  660,  657,  664,  665,  666,  667,  669,  670,  672,
      658,  673,  674,  665,  675,  659,  661,  676,  677,  678,
      679,  678,  680,  681,  682,  683,  660,  684,  662,  663,

      660,  684,  664,  665,  666,  667,  669,  670,  672,  685,
      673,  674,  686,  675,    0,    0,  676,  677,  678,  679,
      678,  680,  681,  682,  683,    0,  684,    0,  700,    0,
      684,  687,  687,  687,  687,    0,    0,    0,  685,    0,
        0,  686,  688,  688,  688,  688,  689,  689,  689,  689,
      690,  690,  690,  690,  691,  701,  691,  700,  691,  691,
      691,  691,  692,  690,  692,  692,  692,  692,  692,  693,
      693,  693,  693,  694,  694,  694,  694,  702,  692,  703,
      704,  705,  706,  707,  701,  708,  709,  710,  711,  712,
      713,  714,  690,  715,  716,  717,  705,  718,  719,  721,

      722,    0,  724,  725,  726,  727,  702,  692,  703,  704,
      705,  706,  707,  728,  708,  709,  710,  711,  712,  713,
      714,  729,  715,  716,  717,  705,  718,  719,  721,  722,
      723,  724,  725,  726,  727,  730,  731,  723,  732,  733,
      734,  736,  728,  737,  739,  741,  742,  743,  744,  745,
      729,  738,  746,  747,  750,  751,  754,  755,  756,  723,
      757,  738,  758,  759,  730,  731,  723,  732,  733,  734,
      736,  738,  737,  739,  741,  742,  743,  744,  745,  760,
      761,  746,  747,  750,  751,  754,  755,  756,  762,  757,
      738,  758,  759,  763,  764,  765,  767,  766,  768,  769,

      738,  766,  770,  771,  772,  773,  775,  776,  760,  761,
      778,  779,  771,  780,  781,  782,  783,  762,  784,  785,
      784,  786,  763,  764,  765,  767,  766,  768,  769,  787,
      766,  770,  771,  772,  773,  775,  776,  788,  789,  778,
      779,  791,  780,  781,  782,  783,  792,  784,  785,  784,
      786,  790,    0,  811,    0,  790,    0,    0,  787,  793,
      793,  793,  793,    0,    0,    0,  788,  789,    0,    0,
      791,  794,  794,  794,  794,  792,  795,  795,  795,  795,
      790,  796,  811,  796,  790,  796,  796,  796,  796,  795,
      797,  797,  797,  797,  798,    0,  798,  798,  798,  798,

      798,  799,  799,  799,  799,  800,  800,  800,  800,  801,
      798,  802,  802,  802,  802,  803,  812,  813,  795,  804,
      804,  814,  804,  801,  801,  801,  801,  804,  815,  803,
      803,  803,  803,  816,  817,  818,  819,  820,  804,  798,
        0,  821,  804,  822,  823,  812,  813,  824,  816,  825,
      814,  826,  827,  828,  829,  830,  832,  815,  833,  835,
      834,  836,  816,  817,  818,  819,  820,  834,  837,  804,
      821,  838,  822,  823,  839,  840,  824,  816,  825,  841,
      826,  827,  828,  829,  830,  832,  842,  833,  835,  834,
      836,  843,  844,  845,  847,  848,  834,  837,  850,  849,

      838,  852,  853,  839,  840,  854,  855,  856,  841,  849,
      857,  858,  861,  862,  865,  842,  866,  867,  868,  849,
      843,  844,  845,  847,  848,  869,  870,  850,  871,  872,
      852,  853,  873,  874,  854,  855,  856,  875,  849,  857,
      858,  861,  862,  865,  876,  866,  867,  868,  849,  877,
      878,  879,  880,  877,  869,  870,  881,  871,  872,  882,
      883,  873,  874,  884,  886,  887,  875,  889,  882,  890,
      891,  892,  893,  876,  894,  895,  896,  895,  877,  878,
      879,  880,  877,  897,  898,  881,  899,  900,  882,  883,
      902,  901,  884,  886,  887,  901,  889,  903,  890,  891,

      892,  893,  904,  894,  895,  896,  895,  905,  906,  908,
      911,  912,  897,  898,  913,  899,  900,  914,  916,  902,
      901,  918,  919,  921,  901,  922,  903,  923,  925,  926,
      927,  904,  928,  929,  930,  931,  905,  906,  908,  911,
      912,  932,  933,  913,  934,  935,  914,  916,  938,  939,
      918,  919,  921,  940,  922,  941,  923,  925,  926,  927,
      950,  928,  929,  930,  931,  943,  952,  953,  954,  955,
      932,  933,  956,  934,  935,  957,  943,  938,  939,  958,
      960,  961,  940,  962,  941,  964,  965,  966,  967,  950,
      968,  971,  972,  973,  943,  952,  953,  954,  955,  975,

      976,  956,  977,  979,  957,  943,  982,  983,  958,  960,
      961,  985,  962,  986,  964,  965,  966,  967,  987,  968,
      971,  972,  973,  988,  989,  990,  991,  992,  975,  976,
      994,  977,  979,  995,    0,  982,  983,    0,    0,    0,
      985,    0,  986,  997,  997,  997,  997,  987,  998,  998,
      998,  998,  988,  989,  990,  991,  992, 1001, 1002,  994,
     1003, 1005,  995,  999,  999,  999,  999, 1000, 1000, 1000,
     1000, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1019,
     1020, 1022, 1023, 1024, 1025, 1026, 1001, 1002, 1027, 1003,
     1005, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038,

     1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1019, 1020,
     1022, 1023, 1024, 1025, 1026, 1047, 1049, 1027, 1040, 1050,
     1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040,
     1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062,
     1063, 1064, 1065, 1068, 1047, 1049, 1069, 1040, 1050, 1070,
     1072, 1073, 1074, 1076, 1079, 1080, 1082, 1083, 1040, 1051,
     1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063,
     1064, 1065, 1068, 1084, 1085, 1069, 1086, 1087, 1070, 1072,
     1073, 1074, 1076, 1079, 1080, 1082, 1083, 1088, 1089, 1091,
     1092, 1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095,    0,

     1100, 1101, 1084, 1085, 1102, 1086, 1087, 1096, 1096, 1096,
     1096, 1097, 1097, 1097, 1097, 1104, 1088, 1089, 1091, 1092,
     1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1100,
     1101, 1107, 1108, 1102, 1098, 1109, 1110, 1112, 1114, 1115,
     1117, 1118, 1119, 1121, 1104, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1146,
     1107, 1108, 1139, 1098, 1109, 1110, 1112, 1114, 1115, 1117,
     1118, 1119, 1121, 1139, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1146, 1148,
     1149, 1139, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158,

     1160, 1161, 1139, 1162, 1163, 1164, 1167, 1168, 1169, 1171,
     1172, 1173, 1175, 1178, 1179, 1181, 1182, 1183, 1148, 1149,
     1184, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1160,
     1161, 1185, 1162, 1163, 1164, 1167, 1168, 1169, 1171, 1172,
     1173, 1175, 1178, 1179, 1181, 1182, 1183, 1186, 1187, 1184,
     1188, 1190, 1191, 1193, 1193, 1193, 1193,    0,    0,    0,
     1185, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195, 1196,
     1196, 1196, 1196, 1201, 1202, 1203, 1186, 1187, 1205, 1188,
     1190, 1191, 1197,    0,    0, 1197, 1197, 1197, 1197, 1198,
     1198, 1198, 1198, 1199, 1199, 1199, 1199, 1200, 1197, 1208,

     1209, 1210, 1201, 1202, 1203, 1211, 1213, 1205, 1215, 1216,
     1218, 1200, 1200, 1200, 1200, 1219, 1220, 1222, 1223, 1224,
     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1197, 1208, 1209,
     1210, 1232, 1235, 1236, 1211, 1213, 1237, 1215, 1216, 1218,
     1238, 1247, 1249, 1250, 1219, 1220, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1230, 1231, 1240, 1251, 1252, 1253,
     1232, 1235, 1236, 1254, 1255, 1237, 1257, 1240, 1258, 1238,
     1247, 1249, 1250, 1259, 1261, 1262, 1263, 1264, 1265, 1268,
     1269, 1270, 1272, 1273, 1274, 1240, 1251, 1252, 1253, 1276,
     1279, 1280, 1254, 1255, 1282, 1257, 1240, 1258, 1283, 1284,

     1285, 1286, 1259, 1261, 1262, 1263, 1264, 1265, 1268, 1269,
     1270, 1272, 1273, 1274, 1287, 1288, 1289, 1291, 1276, 1279,
     1280, 1292, 1294, 1282, 1295, 1296, 1297, 1283, 1284, 1285,
     1286, 1298, 1299, 1302, 1303, 1304, 1306, 1307, 1308, 1309,
     1311, 1312, 1313, 1287, 1288, 1289, 1291, 1315, 1318, 1319,
     1292, 1294,    0, 1295, 1296, 1297, 1321, 1323, 1325, 1326,
     1298, 1299, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1311,
     1312, 1313, 1320, 1327, 1330, 1331, 1315, 1318, 1319, 1332,
     1335, 1320, 1337, 1339, 1340, 1321, 1323, 1325, 1326, 1341,
     1342, 1344, 1346, 1347, 1349, 1350, 1351, 1353, 1355, 1356,

     1357, 1320, 1327, 1330, 1331, 1359, 1360, 1362, 1332, 1335,
     1363, 1337, 1339, 1340, 1364, 1365, 1366, 1367, 1341, 1342,
     1344, 1346, 1347, 1349, 1350, 1351, 1353, 1355, 1356, 1357,
     1368, 1371, 1372, 1373, 1359, 1360, 1362, 1375, 1376, 1363,
     1377, 1378, 1380, 1364, 1365, 1366, 1367, 1381, 1382, 1384,
     1387, 1388, 1390, 1392, 1389, 1394, 1395, 1396, 1399, 1368,
     1371, 1372, 1373, 1389, 1400, 1401, 1375, 1376, 1404, 1377,
     1378, 1380, 1406, 1408, 1409, 1410, 1381, 1382, 1384, 1387,
     1388, 1390, 1392, 1389, 1394, 1395, 1396, 1399, 1411, 1413,
     1415, 1416, 1418, 1400, 1401, 1419, 1420, 1404, 1422, 1424,

     1425, 1406, 1408, 1409, 1410, 1426, 1428, 1429, 1431, 1433,
     1433, 1433, 1433, 1434, 1435, 1436, 1437, 1411, 1413, 1415,
     1416, 1418, 1438, 1439, 1419, 1420, 1442, 1422, 1424, 1425,
     1443, 1444, 1446, 1447, 1426, 1428, 1429, 1431, 1448, 1449,
     1451, 1452, 1434, 1435, 1436, 1437, 1453, 1455, 1458, 1459,
     1461, 1438, 1439, 1463, 1460, 1442, 1465, 1466, 1467, 1443,
     1444, 1446, 1447, 1460, 1470, 1471, 1472, 1448, 1449, 1451,
     1452, 1475, 1477, 1479, 1480, 1453, 1455, 1458, 1459, 1461,
     1481, 1482, 1463, 1460, 1484, 1465, 1466, 1467, 1486, 1487,
     1489, 1490, 1491, 1470, 1471, 1472, 1493, 1495, 1496, 1497,

     1475, 1477, 1479, 1480, 1499, 1500, 1502,    0,    0, 1481,
     1482,    0,    0, 1484,    0, 1507, 1508, 1486, 1487, 1489,
     1490, 1491, 1509, 1510, 1511, 1493, 1495, 1496, 1497, 1503,
     1503, 1503, 1503, 1499, 1500, 1502, 1505, 1505, 1505, 1505,
     1506, 1506, 1506, 1506, 1507, 1508, 1512, 1515, 1516, 1517,
     1519, 1509, 1510, 1511, 1520, 1521, 1522, 1524, 1525, 1526,
     1528, 1531, 1532, 1533, 1534, 1536, 1538, 1539, 1540, 1543,
     1544, 1545, 1533, 1548, 1550, 1512, 1515, 1516, 1517, 1519,
     1552, 1553, 1554, 1520, 1521, 1522, 1524, 1525, 1526, 1528,
     1531, 1532, 1533, 1534, 1536, 1538, 1539, 1540, 1543, 1544,

     1545, 1555, 1548, 1550, 1557, 1559, 1560, 1562, 1563, 1552,
     1553, 1554, 1564, 1566, 1568, 1569, 1570, 1572, 1573, 1575,
     1576, 1577, 1579, 1580, 1582, 1583, 1585, 1586, 1588, 1591,
     1555, 1594, 1595, 1557, 1559, 1560, 1562, 1563, 1596, 1598,
     1601, 1564, 1566, 1568, 1569, 1570, 1572, 1573, 1575, 1576,
     1577, 1579, 1580, 1582, 1583, 1585, 1586, 1588, 1591, 1602,
     1594, 1595, 1603, 1604, 1606, 1609, 1610, 1596, 1598, 1601,
     1612, 1613, 1614, 1615, 1618, 1619, 1621, 1624, 1626, 1627,
     1629, 1630, 1632, 1633, 1635, 1636, 1638, 1641, 1602, 1644,
     1645, 1603, 1604, 1606, 1609, 1610, 1646, 1648, 1651, 1612,

     1613, 1614, 1615, 1618, 1619, 1621, 1624, 1626, 1627, 1629,
     1630, 1632, 1633, 1635, 1636, 1638, 1641, 1652, 1644, 1645,
     1653, 1654, 1656, 1659, 1660, 1646, 1648, 1651, 1662, 1663,
     1664, 1665, 1668, 1669, 1671, 1674, 1676, 1676, 1676, 1676,
     1677, 1678, 1680, 1681, 1683, 1684, 1652, 1686, 1687, 1653,
     1654, 1656, 1659, 1660, 1689, 1692, 1695, 1662, 1663, 1664,
     1665, 1668, 1669, 1671, 1674, 1696, 1697, 1699, 1702, 1677,
     1678, 1680, 1681, 1683, 1684, 1703, 1686, 1687, 1704, 1705,
     1707, 1710, 1711, 1689, 1692, 1695, 1713, 1714, 1715, 1716,
     1719, 1720, 1722, 1725, 1696, 1697, 1699, 1702, 1727, 1727,

     1727, 1727, 1730, 1731, 1703, 1733, 1734, 1704, 1705, 1707,
     1710, 1711, 1736, 1737, 1739, 1713, 1714, 1715, 1716, 1719,
     1720, 1722, 1725, 1728, 1728, 1728, 1728, 1729, 1729, 1729,
     1729, 1730, 1731, 1740, 1733, 1734, 1742, 1745, 1748, 1749,
     1750, 1736, 1737, 1739, 1752, 1755, 1756, 1757, 1758, 1760,
     1763, 1764, 1766, 1767, 1768, 1769, 1772, 1773, 1775, 1778,
     1780, 1784, 1740, 1786, 1787, 1742, 1745, 1748, 1749, 1750,
     1788, 1790, 1791, 1752, 1755, 1756, 1757, 1758, 1760, 1763,
     1764, 1766, 1767, 1768, 1769, 1772, 1773, 1775, 1778, 1780,
     1784, 1793, 1786, 1787, 1795, 1796, 1798, 1799, 1801, 1788,

     1790, 1791, 1802, 1803, 1804, 1805, 1806, 1809, 1813, 1815,
     1816, 1817, 1819, 1820, 1822, 1824, 1825, 1827, 1828, 1830,
     1793, 1831, 1832, 1795, 1796, 1798, 1799, 1801, 1833, 1834,
     1835, 1802, 1803, 1804, 1805, 1806, 1809, 1813, 1815, 1816,
     1817, 1819, 1820, 1822, 1824, 1825, 1827, 1828, 1830, 1839,
     1831, 1832, 1838, 1838, 1838, 1838, 1843, 1833, 1834, 1835,
     1845, 1846, 1847, 1849, 1850, 1852, 1854, 1855, 1857, 1858,
     1860, 1861, 1862, 1863, 1864, 1865,    0,    0, 1839, 1868,
     1868, 1868, 1868, 1870, 1874, 1843, 1876, 1877, 1878, 1845,
     1846, 1847, 1849, 1850, 1852, 1854, 1855, 1857, 1858, 1860,

     1861, 1862, 1863, 1864, 1865, 1869, 1869, 1869, 1869, 1880,
     1881, 1883, 1870, 1874, 1885, 1876, 1877, 1878, 1886, 1888,
     1889, 1891, 1892, 1893, 1894, 1895, 1896, 1900, 1901, 1902,
     1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1880, 1881,
     1883, 1912, 1913, 1885, 1901, 1914, 1916, 1886, 1888, 1889,
     1891, 1892, 1893, 1894, 1895, 1896, 1900, 1901, 1902, 1904,
     1905, 1906, 1907, 1908, 1909, 1910, 1911, 1917, 1918, 1920,
     1912, 1913, 1921, 1901, 1914, 1916, 1922, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1921, 1936,
     1937, 1938, 1940,    0, 1942, 1944, 1917, 1918, 1920, 1945,

     1946, 1921, 1947, 1948, 1949, 1922, 1924, 1925, 1926, 1927,
     1928, 1929, 1930, 1931, 1932, 1933, 1934, 1921, 1936, 1937,
     1938, 1940, 1941, 1942, 1944, 1950, 1951, 1952, 1945, 1946,
     1953, 1947, 1948, 1949, 1954, 1956, 1957, 1958, 1941, 1960,
     1962, 1961, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
     1972, 1941, 1973, 1974, 1950, 1951, 1952, 1961, 1976, 1953,
     1977, 1978, 1980, 1954, 1956, 1957, 1958, 1941, 1960, 1962,
     1961, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
     1981, 1973, 1974, 1982, 1983, 1984, 1961, 1976, 1986, 1977,
     1978, 1980, 1988, 1991, 1994, 1998, 1999, 2000, 2001, 2002,

     2004, 2006, 2009, 2012, 2016, 2017, 2018, 2019, 2020, 1981,
     2022, 2024, 1982, 1983, 1984, 2027, 2030, 1986, 2034, 2035,
     2036, 1988, 1991, 1994, 1998, 1999, 2000, 2001, 2002, 2004,
     2006, 2009, 2012, 2016, 2017, 2018, 2019, 2020, 2037, 2022,
     2024, 2038, 2040, 2042, 2027, 2030, 2045, 2034, 2035, 2036,
     2048, 2051, 2052, 2054, 2055, 2056, 2058, 2060, 2061, 2063,
     2064, 2065, 2067, 2069, 2070, 2072, 2073, 2037, 2074, 2076,
     2038, 2040, 2042, 2078, 2079, 2045, 2081, 2082, 2083, 2048,
     2051, 2052, 2054, 2055, 2056, 2058, 2060, 2061, 2063, 2064,
     2065, 2067, 2069, 2070, 2072, 2073, 2085, 2074, 2076, 2087,

     2088, 2089, 2078, 2079, 2091, 2081, 2082, 2083, 2092, 2093,
     2094, 2095, 2097, 2098, 2099, 2100, 2101, 2103, 2104, 2105,
     2106, 2107, 2109, 2110, 2112, 2085, 2117, 2122, 2087, 2088,
     2089, 2127, 2131, 2091, 2132, 2133, 2134, 2092, 2093, 2094,
     2095, 2097, 2098, 2099, 2100, 2101, 2103, 2104, 2105, 2106,
     2107, 2109, 2110, 2112, 2135, 2117, 2122, 2136, 2137, 2138,
     2127, 2131, 2139, 2132, 2133, 2134, 2140, 2141, 2142, 2143,
     2144, 2145, 2146,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2135,    0,    0, 2136, 2137, 2138,    0,
        0, 2139,    0,    0,    0, 2140, 2141, 2142, 2143, 2144,

     2145, 2146, 2152,    0, 2152, 2152, 2153,    0, 2153,    0,
     2153, 2154, 2154, 2154, 2154, 2154, 2154, 2155,    0, 2155,
     2155, 2155, 2155, 2155, 2155, 2155, 2156,    0,    0, 2156,
     2156, 2156,    0, 2156, 2156, 2157, 2157, 2157, 2157, 2157,
     2157, 2157, 2157, 2157, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2159, 2159, 2160,    0, 2160, 2160, 2160, 2160, 2160,
     2160, 2160, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2152 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2151 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP_CONCAT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUPS);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TOTAL);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 146:
case 147:
case 148:
case 149:
case 150:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 155:
case 156:
case 157:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 158:
case 159:
case 160:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 161:
case 162:
case 163:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 164:
case 165:
case 166:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 172:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 176:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
YY_RULE_SETUP
{}
	YY_BREAK
case 180:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 181:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 182:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2152 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2152 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2151);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

