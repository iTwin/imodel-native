#line 2 "C:\\repos\\imodelNative\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2144] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  182,  180,  178,  177,  180,  126,  141,  138,
      169,  141,  127,  129,  128,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  137,  136,  167,  141,
      143,  143,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  170,  168,  171,  141,  141,  151,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  141,  151,  180,  176,  176,  176,  176,  174,
      126,  141,  138,  141,  141,  141,  127,  129,  128,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      175,  137,  136,  178,  133,    0,  135,  139,  130,  132,
      131,  140,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   54,   61,    0,    0,
        0,    0,    0,    0,    0,    0,   74,    0,    0,    0,

       81,   83,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  134,  145,  146,  143,
        0,    0,  142,  142,  142,    4,  142,  142,  142,  142,
      142,  142,   12,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   54,   61,  142,
      142,  142,  142,  142,  142,  142,  142,   74,  142,  142,
      142,   81,   83,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  166,  156,  166,
      166,  166,  151,  166,  150,  150,  150,    4,  150,  150,
      150,  150,  150,  150,   12,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,   54,
       61,  150,  150,  150,  150,  150,  150,  150,  150,   74,
      150,  150,  150,   81,   83,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  162,
      166,  166,  166,  151,  166,    0,  172,  176,  176,  133,

      176,  135,  139,  130,  132,  131,  140,  176,  176,    4,
      176,  176,  176,  176,  176,  176,   12,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   54,   61,  176,  176,  176,  176,  176,  176,  176,
      176,   74,  176,  176,  176,   81,   83,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  134,    0,  179,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,    0,   53,    0,    0,   57,    0,
       63,    0,    0,    0,    0,    0,    0,    0,   71,   72,
        0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,    0,    0,  104,    0,    0,  107,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  146,    0,    0,  147,  144,    1,
        2,    3,    5,    6,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   32,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   46,  142,  142,  142,  142,  142,
       53,  142,  142,   57,  142,   63,  142,  142,  142,  142,
      142,  142,  142,   71,   72,  142,  142,   76,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   99,  142,  142,
      104,  142,  142,  107,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,    0,  159,
      166,  154,  166,  151,    0,  157,    1,    2,    3,    5,

        6,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   32,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   46,  150,  150,  150,  150,  150,   53,  150,  150,
       57,  150,   63,  150,  150,  150,  150,  150,  150,  150,
       71,   72,  150,  150,   76,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,   99,  150,  150,  104,  150,  150,
      107,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,    0,  165,  160,  166,  166,

      151,    0,  163,  172,    0,  172,  176,  176,    1,    2,
        3,    5,    6,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,   32,  176,  176,  176,  176,  176,  176,
      176,  176,  176,   46,  176,  176,  176,  176,  176,   53,
      176,  176,   57,  176,   63,  176,  176,  176,  176,  176,
      176,  176,   71,   72,  176,  176,   76,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,   99,  176,  176,  104,
      176,  176,  107,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,    0,    0,    0,
       10,    0,   13,   14,    0,    0,    0,    0,    0,    0,
       24,    0,    0,   27,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
       49,    0,    0,    0,    0,    0,    0,    0,   60,   62,
       41,   65,   66,   67,    0,   69,    0,    0,    0,    0,
        0,   79,    0,   82,    0,    0,    0,   87,    0,    0,
        0,    0,    0,   93,   94,    0,    0,    0,    0,  100,
        0,    0,    0,  105,    0,  108,  109,  110,  112,    0,
        0,    0,    0,    0,    0,    0,    0,  122,    0,    0,

      124,    0,  149,    0,  148,  142,  142,  142,   10,  142,
       13,   14,  142,  142,  142,  142,  142,  142,   24,  142,
      142,   27,  142,  142,  142,   31,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   48,   49,  142,
      142,  142,  142,  142,  142,  142,   60,   62,   41,   65,
       66,   67,  142,   69,  142,  142,  142,  142,  142,   79,
      142,   82,  142,  142,  142,   87,  142,  142,  142,  142,
      142,   93,   94,  142,  142,  142,  142,  100,  142,  142,
      142,  105,  142,  108,  109,  110,  112,  142,  142,  142,
      142,  142,  142,  142,  142,  122,  142,  142,  124,  159,

      166,    0,  158,  151,  157,  150,  150,  150,   10,  150,
       13,   14,  150,  150,  150,  150,  150,  150,   24,  150,
      150,   27,  150,  150,  150,   31,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,   48,   49,  150,
      150,  150,  150,  150,  150,  150,   60,   62,   41,   65,
       66,   67,  150,   69,  150,  150,  150,  150,  150,   79,
      150,   82,  150,  150,  150,   87,  150,  150,  150,  150,
      150,   93,   94,  150,  150,  150,  150,  100,  150,  150,
      150,  105,  150,  108,  109,  110,  112,  150,  150,  150,
      150,  150,  150,  150,  150,  122,  150,  150,  124,  165,

        0,  164,  166,  151,  163,    0,  172,  176,  176,  176,
       10,  176,   13,   14,  176,  176,  176,  176,  176,  176,
       24,  176,  176,   27,  176,  176,  176,   31,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   48,
       49,  176,  176,  176,  176,  176,  176,  176,   60,   62,
       41,   65,   66,   67,  176,   69,  176,  176,  176,  176,
      176,   79,  176,   82,  176,  176,  176,   87,  176,  176,
      176,  176,  176,   93,   94,  176,  176,  176,  176,  100,
      176,  176,  176,  105,  176,  108,  109,  110,  112,  176,
      176,  176,  176,  176,  176,  176,  176,  122,  176,  176,

      124,    0,    0,    0,    0,    0,    0,   17,   18,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,    0,
        0,   38,    0,   40,   39,    0,    0,   50,    0,    0,
       55,    0,   58,    0,    0,    0,   68,   70,    0,    0,
        0,   78,   42,    0,   84,    0,   86,    0,    0,    0,
        0,   92,    0,    0,   97,    0,    0,  102,    0,    0,
        0,    0,  114,    0,    0,    0,  118,  119,    0,  123,
        0,  142,  142,  142,  142,  142,  142,   17,   18,  142,
      142,  142,  142,  142,  142,  142,  142,   34,  142,  142,
      142,   38,  142,   40,   39,  142,  142,   50,  142,  142,

       55,  142,   58,  142,  142,  142,   68,   70,  142,  142,
      142,   78,   42,  142,   84,  142,   86,  142,  142,  142,
      142,   92,  142,  142,   97,  142,  142,  102,  142,  142,
      142,  142,  114,  142,  142,  142,  118,  119,  142,  123,
      142,  152,  158,  150,  150,  150,  150,  150,  150,   17,
       18,  150,  150,  150,  150,  150,  150,  150,  150,   34,
      150,  150,  150,   38,  150,   40,   39,  150,  150,   50,
      150,  150,   55,  150,   58,  150,  150,  150,   68,   70,
      150,  150,  150,   78,   42,  150,   84,  150,   86,  150,
      150,  150,  150,   92,  150,  150,   97,  150,  150,  102,

      150,  150,  150,  150,  114,  150,  150,  150,  118,  119,
      150,  123,  150,  164,  153,    0,  173,  176,  176,  176,
      176,  176,  176,   17,   18,  176,  176,  176,  176,  176,
      176,  176,  176,   34,  176,  176,  176,   38,  176,   40,
       39,  176,  176,   50,  176,  176,   55,  176,   58,  176,
      176,  176,   68,   70,  176,  176,  176,   78,   42,  176,
       84,  176,   86,  176,  176,  176,  176,   92,  176,  176,
       97,  176,  176,  102,  176,  176,  176,  176,  114,  176,
      176,  176,  118,  119,  176,  123,  176,    0,    0,    9,
        0,    0,   16,    0,    0,   25,    0,    0,   29,    0,

       33,   35,    0,   37,   43,    0,    0,    0,   51,   52,
       56,    0,    0,    0,    0,   75,    0,   80,   85,    0,
        0,   90,    0,    0,    0,    0,    0,  103,  106,    0,
        0,  115,    0,  117,  120,    0,  125,  142,  142,    9,
      142,  142,   16,  142,  142,   25,  142,  142,   29,  142,
       33,   35,  142,   37,   43,  142,  142,  142,   51,   52,
       56,  142,  142,  142,  142,   75,  142,   80,   85,  142,
      142,   90,  142,  142,  142,  142,  142,  103,  106,  142,
      142,  115,  142,  117,  120,  142,  125,  166,  150,  150,
        9,  150,  150,   16,  150,  150,   25,  150,  150,   29,

      150,   33,   35,  150,   37,   43,  150,  150,  150,   51,
       52,   56,  150,  150,  150,  150,   75,  150,   80,   85,
      150,  150,   90,  150,  150,  150,  150,  150,  103,  106,
      150,  150,  115,  150,  117,  120,  150,  125,  166,  173,
      173,  176,  176,    9,  176,  176,   16,  176,  176,   25,
      176,  176,   29,  176,   33,   35,  176,   37,   43,  176,
      176,  176,   51,   52,   56,  176,  176,  176,  176,   75,
      176,   80,   85,  176,  176,   90,  176,  176,  176,  176,
      176,  103,  106,  176,  176,  115,  176,  117,  120,  176,
      125,    0,    8,   11,   15,    0,   20,    0,    0,    0,

       36,    0,    0,   47,   57,    0,    0,   73,    0,    0,
        0,    0,    0,   96,    0,    0,    0,    0,  116,  121,
      142,    8,   11,   15,  142,   20,  142,  142,  142,   36,
      142,  142,   47,   57,  142,  142,   73,  142,  142,  142,
      142,  142,   96,  142,  142,  142,  142,  116,  121,  155,
      150,    8,   11,   15,  150,   20,  150,  150,  150,   36,
      150,  150,   47,   57,  150,  150,   73,  150,  150,  150,
      150,  150,   96,  150,  150,  150,  150,  116,  121,  161,
      173,  176,    8,   11,   15,  176,   20,  176,  176,  176,
       36,  176,  176,   47,   57,  176,  176,   73,  176,  176,

      176,  176,  176,   96,  176,  176,  176,  176,  116,  121,
        7,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    7,
      142,  142,  142,   28,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   98,  142,  142,  142,    7,  150,
      150,  150,   28,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,   98,  150,  150,  150,    7,  176,  176,
      176,   28,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,   98,  176,  176,  176,   19,    0,    0,    0,
        0,    0,   45,   59,    0,   77,   88,    0,   91,   95,

        0,  111,  113,   19,  142,  142,  142,  142,  142,   45,
       59,  142,   77,   88,  142,   91,   95,  142,  111,  113,
       19,  150,  150,  150,  150,  150,   45,   59,  150,   77,
       88,  150,   91,   95,  150,  111,  113,   19,  176,  176,
      176,  176,  176,   45,   59,  176,   77,   88,  176,   91,
       95,  176,  111,  113,    0,    0,   26,    0,    0,   64,
        0,  101,  142,  142,   26,  142,  142,   64,  142,  101,
      150,  150,   26,  150,  150,   64,  150,  101,  176,  176,
       26,  176,  176,   64,  176,  101,    0,    0,    0,   44,
        0,  142,  142,  142,   44,  142,  150,  150,  150,   44,

      150,  176,  176,  176,   44,  176,   21,   22,   30,   89,
       21,   22,   30,   89,   21,   22,   30,   89,   21,   22,
       30,   89,    0,  142,  150,  176,    0,  142,  150,  176,
        0,  142,  150,  176,    0,  142,  150,  176,   23,   23,
       23,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2153] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  903, 4722,  359, 4722,  877, 4722, 4722, 4722,
     4722,  346,  341, 4722,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  407,  343,  447,  393,  439,  443,  466,
      467,  494,  494,  503,  367,  498,  818, 4722, 4722,  531,
      561,  566,  550,  569,  562,  581,  614,  630,  352,  403,
      640,  392,    0,  680,  509,  620,  676,  503,  700,  687,
      695,  613,  412,  567, 4722, 4722, 4722,    0,  753,  761,
      745,  760,  759,  806,  805,  842,  399,  421,  852,  451,
        0,  811,  578,  861,  895,  901,  903,  919,  856,  754,

      497,  635,  962,  981,  789,    0,  393,    0,  833, 4722,
        0,    0,    0,    0,  375, 4722,  476,    0,  421,  965,
      980,  979, 1002, 1019, 1038,  502,  567, 1035,  558, 1060,
      762, 1076, 1081,  931, 1114, 1122,  860, 1093,  588,  691,
     4722,  770,    0,  452, 4722,  845, 4722, 4722, 4722, 4722,
     4722, 4722,  612,  958,  631,  630,  684,  673,  692,  697,
      747, 4722,  757, 1133,  795,  800,  803, 1121,  819,  849,
      866,  877,  917,  919,  924, 1054,  947, 1135,  949, 1137,
      975,  986,  984,  979, 1021, 1031, 1166, 4722, 1036, 1074,
     1083, 1148, 1107, 1153, 1125, 1140, 1167, 1183, 1153, 1161,

     1167, 1177, 1185, 1175, 1192, 1180, 1182, 1200, 1189, 1216,
     1197, 1195, 1193, 1211, 1199, 1195, 1212, 1223, 1232, 1217,
     1242, 1235, 1234, 1237, 1245, 1242, 4722, 1294, 1300, 1309,
      840,    0,    0, 1249, 1273, 1278, 1276, 1293, 1277, 1293,
     1293, 1294,    0, 1292, 1303, 1298, 1304, 1298, 1336, 1301,
     1302, 1310, 1311, 1327, 1329, 1328, 1332, 1327, 1345, 1339,
     1353, 1341, 1354, 1352, 1347, 1358, 1367, 1361,    0, 1365,
     1369, 1381, 1378, 1364, 1373, 1376, 1379, 1403, 1404, 1396,
     1408, 1403, 1417, 1416, 1405, 1422, 1411, 1412, 1431, 1417,
     1444, 1426, 1426, 1421, 1428, 1433, 1433, 1442, 1452, 1459,

     1445, 1479, 1466, 1462, 1461, 1477, 1469,    0, 1511, 1532,
     1536, 1541, 1548, 1562,    0, 1473, 1490, 1506, 1525, 1544,
     1528, 1535, 1536, 1543,    0, 1540, 1550, 1545, 1551, 1545,
     1554, 1548, 1549, 1553, 1555, 1575, 1578, 1578, 1581, 1573,
     1593, 1571, 1604, 1589, 1594, 1592, 1587, 1603, 1612, 1606,
        0, 1612, 1620, 1622, 1618, 1610, 1617, 1616, 1612, 1645,
     1634, 1632, 1656, 1651, 1660, 1659, 1649, 1669, 1657, 1658,
     1677, 1665, 1680, 1673, 1672, 1667, 1677, 1673, 1669, 1675,
     1685, 1716, 1680, 1723, 1698, 1697, 1715, 1715, 1722, 1746,
     1780, 1752, 1784, 1796, 1804, 1789, 1815,    0,  564,    0,

     1826,    0,    0,    0,    0,    0,    0, 1711, 1791, 1734,
     1793, 1799, 1785, 1798, 1798, 1799,    0, 1796, 1806, 1802,
     1807, 1801, 1821, 1804, 1807, 1813, 1817, 1833, 1835, 1834,
     1867, 1839, 1859, 1840, 1860, 1843, 1847, 1845, 1841, 1859,
     1868, 1871,    0, 1866, 1874, 1907, 1883, 1868, 1892, 1872,
     1875, 1906, 1909, 1886, 1915, 1916, 1925, 1922, 1911, 1927,
     1915, 1916, 1934, 1922, 1948, 1933, 1931, 1926, 1936, 1939,
     1935, 1953, 1965, 1966, 1953, 1982, 1971, 1967, 1974, 1982,
     1974,    0,  802, 4722, 4722, 4722, 4722, 4722, 4722, 1978,
     1967, 1996, 1996, 1989, 2004, 1990, 1993, 1993, 1991, 2006,

     1994, 2009, 2020, 2009, 2026, 2012, 2031, 2017, 2032, 4722,
     2041, 2026, 2040, 2027, 2028, 2028, 2030, 2049, 2039, 2032,
     2043, 2047, 2039, 2055, 2050, 4722, 2062, 2063, 2077, 2055,
     4722, 2050, 2079, 2066, 2082, 2081, 2084, 2092, 4722, 4722,
     2079, 2100, 4722,  750, 2090, 2091, 2085, 2080, 2101, 2102,
     2103, 2091, 2090, 2110, 2107, 2114, 2111, 2111, 2104, 2110,
     2119, 2116, 2121, 2132, 2139, 4722, 2140, 2139, 4722, 2136,
     2134, 2153, 2154, 2145, 2146, 2148, 2163, 2151, 2145, 2164,
     2154, 2167, 2167, 2215, 2219, 2227, 2191, 2233,    0,    0,
        0,    0,    0,    0, 2191, 2183, 2215, 2216, 2211, 2224,

     2218, 2219, 2219, 2215, 2231, 2219, 2233, 2234, 2221, 2238,
     2222, 2241, 2229, 2243,    0, 2248, 2232, 2252, 2232, 2235,
     2235, 2237, 2259, 2262, 2253, 2268, 2270, 2266, 2279, 2275,
        0, 2286, 2287, 2299, 2281,    0, 2276, 2293, 2278, 2294,
     2291, 2294, 2299,    0,    0, 2285, 2306,    0,  723, 2296,
     2297, 2293, 2288, 2310, 2313, 2317, 2305, 2312, 2331, 2332,
     2337, 2338, 2334, 2327, 2334, 2345, 2342, 2336, 2347, 2352,
        0, 2353, 2350,    0, 2346, 2343, 2360, 2361, 2352, 2355,
     2357, 2372, 2362, 2359, 2378, 2379, 2386, 2384, 2419, 2423,
     2435, 2439, 2447, 2454, 2458, 2462,    0,    0,    0,    0,

        0, 2396, 2415, 2457, 2458, 2449, 2457, 2451, 2451, 2451,
     2447, 2463, 2451, 2465, 2466, 2453, 2471, 2455, 2474, 2461,
     2474,    0, 2479, 2463, 2506, 2464, 2465, 2465, 2467, 2495,
     2490, 2493, 2504, 2507, 2499, 2512, 2507,    0, 2518, 2519,
     2539, 2512,    0, 2507, 2524, 2509, 2525, 2523, 2526, 2532,
        0,    0, 2515, 2536,    0,  715, 2526, 2527, 2522, 2517,
     2538, 2555, 2558, 2551, 2554, 2572, 2569, 2574, 2571, 2567,
     2559, 2565, 2576, 2573, 2567, 2578, 2583,    0, 2585, 2582,
        0, 2579, 2575, 2591, 2592, 2584, 2585, 2587, 2611, 2604,
     2600, 2621, 2618, 2623, 2625, 2645, 2650, 2665, 2679, 2683,

     2690, 2694, 2698, 2716, 2708, 2720, 2740,    0,    0,    0,
        0,    0,    0, 2623, 2612, 2650, 2666, 2692, 2701, 2693,
     2703, 2705, 2703, 2718, 2708, 2722, 2723, 2710, 2727, 2711,
     2730, 2720, 2734,    0, 2740, 2724, 2741, 2724, 2725, 2727,
     2730, 2753, 2750, 2740, 2751, 2753, 2748, 2765, 2762,    0,
     2774, 2775, 2790, 2767,    0, 2764, 2782, 2767, 2783, 2780,
     2783, 2793,    0,    0, 2776, 2798,    0,  712, 2788, 2789,
     2783, 2779, 2802, 2806, 2807, 2796, 2800, 2818, 2815, 2820,
     2828, 2815, 2811, 2821, 2830, 2830, 2825, 2836, 2841,    0,
     2842, 2839,    0, 2840, 2836, 2852, 2853, 2844, 2845, 2849,

     2864, 2855, 2849, 2869, 2864, 2875, 2872, 2858, 2880, 2872,
     4722, 2888, 4722, 4722, 2894, 2887, 2877, 2881,  711, 2897,
     4722, 2883, 2899, 4722, 2896, 2894, 2900, 4722, 2897, 2890,
     2900, 2896, 2898, 2915, 2916, 2903, 2907, 2913, 2929, 4722,
     4722, 2920, 2923, 2920, 2921, 2922,  723, 2936, 4722, 4722,
      663, 4722, 4722, 4722, 2928, 4722, 2943, 2935, 2936, 2936,
     2955, 2942, 2957, 4722, 2945, 2946, 2952, 4722, 2962, 2968,
     2961, 2970, 2971, 4722, 4722, 2960, 2974, 2961, 2983, 4722,
     2972, 2975, 2991, 4722, 2981, 4722, 4722, 2977, 4722, 2976,
     2984, 2980, 2991, 2989, 3004, 3007, 3005, 4722, 3011, 3003,

     4722, 3027, 3039, 3056, 3060, 3005, 3024, 3018,    0, 3032,
        0,    0, 3038, 3034, 3024, 3027,  658, 3051,    0, 3039,
     3055,    0, 3052, 3050, 3051,    0, 3048, 3042, 3053, 3049,
     3051, 3069, 3071, 3057, 3058, 3064, 3079,    0,    0, 3065,
     3068, 3065, 3066, 3068,  690, 3107,    0,    0,  651,    0,
        0,    0, 3067,    0, 3086, 3077, 3078, 3079, 3097, 3085,
     3112,    0, 3100, 3101, 3102,    0, 3112, 3117, 3114, 3123,
     3124,    0,    0, 3114, 3129, 3115, 3134,    0, 3123, 3125,
     3136,    0, 3126,    0,    0, 3122,    0, 3121, 3130, 3124,
     3137, 3133, 3148, 3154, 3152,    0, 3157, 3157,    0, 3183,

     3200, 3204, 3210, 3215, 3219, 3163, 3182, 3172,    0, 3195,
        0,    0, 3216, 3209, 3201, 3203,  647, 3218,    0, 3204,
     3220,    0, 3217, 3215, 3216,    0, 3214, 3206, 3216, 3212,
     3214, 3230, 3231, 3217, 3218, 3224, 3239,    0,    0, 3225,
     3228, 3225, 3226, 3227,  658, 3268,    0,    0,  602,    0,
        0,    0, 3228,    0, 3250, 3258, 3259, 3257, 3275, 3262,
     3277,    0, 3265, 3266, 3267,    0, 3279, 3284, 3277, 3286,
     3287,    0,    0, 3275, 3289, 3275, 3294,    0, 3283, 3285,
     3296,    0, 3286,    0,    0, 3282,    0, 3281, 3289, 3285,
     3301, 3313, 3327, 3331, 3329,    0, 3333, 3324,    0, 3348,

     3354, 3358, 3362, 3380, 3366, 3384, 3402, 3341, 3365, 3353,
        0, 3376,    0,    0, 3381, 3374, 3364, 3367,  560, 3382,
        0, 3368, 3384,    0, 3381, 3379, 3380,    0, 3382, 3376,
     3386, 3382, 3384, 3400, 3401, 3387, 3388, 3394, 3421,    0,
        0, 3407, 3410, 3407, 3408, 3410,  551, 3422,    0,    0,
      506,    0,    0,    0, 3419,    0, 3433, 3424, 3424, 3422,
     3440, 3427, 3442,    0, 3430, 3431, 3432,    0, 3447, 3454,
     3447, 3456, 3457,    0,    0, 3445, 3459, 3445, 3464,    0,
     3453, 3467, 3478,    0, 3468,    0,    0, 3464,    0, 3463,
     3472, 3466, 3482, 3478, 3492, 3495, 3493,    0, 3497, 3488,

        0, 3503, 3500, 3481, 3506, 3488, 3494, 4722, 4722, 3513,
     3504, 3514,  502, 3506, 3516, 3507, 3518, 4722, 3504, 3521,
     3519, 4722, 3521,  501, 4722, 3517, 3523, 4722, 3535, 3539,
     4722, 3525, 4722, 3550, 3537, 3535, 4722, 4722, 3557, 3554,
     3559, 4722, 4722, 3541, 4722, 3543, 4722, 3543, 3550, 3564,
     3562, 4722, 3553, 3572, 4722, 3575, 3556, 4722, 3558, 3572,
     3560, 3567, 4722, 3577, 3560, 3591, 4722, 3578, 3597, 4722,
     3576, 3599, 3597, 3578, 3612, 3594, 3595,    0,    0, 3612,
     3603, 3613,  452, 3605, 3615, 3606, 3617,    0, 3603, 3620,
     3611,    0, 3615,  451,    0, 3611, 3617,    0, 3629, 3632,

        0, 3618,    0, 3634, 3621, 3619,    0,    0, 3653, 3650,
     3655,    0,    0, 3637,    0, 3639,    0, 3640, 3647, 3670,
     3668,    0, 3654, 3671,    0, 3674, 3655,    0, 3657, 3671,
     3659, 3666,    0, 3676, 3659, 3683,    0, 3672, 3691,    0,
     3670,  576, 3702, 3697, 3694, 3687, 3712, 3694, 3695,    0,
        0, 3712, 3704, 3714,  442, 3709, 3719, 3710, 3721,    0,
     3709, 3726, 3712,    0, 3714,  430,    0, 3710, 3716,    0,
     3728, 3731,    0, 3717,    0, 3733, 3720, 3718,    0,    0,
     3745, 3744, 3749,    0,    0, 3731,    0, 3737,    0, 3737,
     3756, 3770, 3768,    0, 3754, 3771,    0, 3775, 3756,    0,

     3761, 3775, 3763, 3770,    0, 3782, 3765, 3784,    0, 3771,
     3790,    0, 3769, 3801,  631, 3830, 3834, 3803, 3802, 3783,
     3808, 3794, 3795,    0,    0, 3826, 3817, 3827,  425, 3820,
     3830, 3824, 3835,    0, 3821, 3838, 3826,    0, 3828,  419,
        0, 3824, 3830,    0, 3842, 3845,    0, 3831,    0, 3847,
     3834, 3832,    0,    0, 3854, 3851, 3856,    0,    0, 3838,
        0, 3843,    0, 3845, 3852, 3866, 3868,    0, 3854, 3885,
        0, 3888, 3869,    0, 3872, 3886, 3877, 3884,    0, 3894,
     3877, 3898,    0, 3885, 3904,    0, 3883, 3889, 3894, 4722,
     3895, 3905, 4722, 3902, 3892, 4722, 3895, 3911, 4722, 3899,

     4722, 4722, 3911, 4722, 4722, 3898, 3914, 3920, 4722, 4722,
     4722, 3907, 3925, 3930, 3934, 4722, 3935, 4722, 4722, 3939,
     3930, 4722, 3942, 3946, 3936, 3954, 3945, 4722, 4722, 3960,
     3958, 4722, 3949, 4722, 4722, 3946, 4722, 3947, 3952,    0,
     3953, 3963,    0, 3960, 3950,    0, 3953, 3969,    0, 3957,
        0,    0, 3969,    0,    0, 3956, 3972, 3978,    0,    0,
        0, 3965, 3983, 3988, 3992,    0, 3993,    0,    0, 3997,
     3988,    0, 4000, 4004, 3994, 4012, 4003,    0,    0, 4018,
     4016,    0, 4007,    0,    0, 4004,    0, 4031, 4009, 4014,
        0, 4015, 4025,    0, 4022, 4012,    0, 4018, 4036,    0,

     4024,    0,    0, 4036,    0,    0, 4024, 4038, 4048,    0,
        0,    0, 4035, 4049, 4054, 4050,    0, 4051,    0,    0,
     4055, 4046,    0, 4058, 4062, 4052, 4070, 4061,    0,    0,
     4076, 4074,    0, 4065,    0,    0, 4062,    0, 4093, 4118,
     4122, 4071, 4076,    0, 4080, 4092,    0, 4089, 4079,    0,
     4086, 4102,    0, 4104,    0,    0, 4116,    0,    0, 4100,
     4115, 4121,    0,    0,    0, 4111, 4125, 4130, 4120,    0,
     4123,    0,    0, 4127, 4117,    0, 4129, 4130, 4120, 4138,
     4129,    0,    0, 4142, 4140,    0, 4131,    0,    0, 4128,
        0, 4143, 4722, 4722, 4722, 4129,  397, 4151, 4135, 4136,

     4722, 4156, 4148, 4722, 4722, 4160, 4166, 4722, 4158, 4165,
      383, 4168, 4161, 4722, 4176, 4186, 4176, 4185, 4722, 4722,
     4189,    0,    0,    0, 4175,  338, 4194, 4176, 4177,    0,
     4197, 4185,    0,    0, 4197, 4189,    0, 4181, 4188,  332,
     4190, 4183,    0, 4195, 4208, 4200, 4209,    0,    0, 4252,
     4216,    0,    0,    0, 4202,  315, 4235, 4217, 4218,    0,
     4239, 4227,    0,    0, 4245, 4239,    0, 4231, 4238,  218,
     4240, 4233,    0, 4245, 4255, 4245, 4254,    0,    0, 4268,
     4279, 4260,    0,    0,    0, 4249,  211, 4274, 4256, 4258,
        0, 4278, 4275,    0,    0, 4287, 4279,    0, 4271, 4279,

      204, 4281, 4274,    0, 4287, 4297, 4287, 4296,    0,    0,
     4722, 4282, 4302, 4289, 4722, 4300, 4298, 4304, 4292, 4292,
     4309, 4301, 4298, 4310, 4321, 4722, 4328, 4318, 4332,    0,
     4317, 4344, 4333,    0, 4340, 4338, 4345, 4333, 4333, 4351,
     4343, 4340, 4352, 4355,    0, 4356, 4351, 4364,    0, 4349,
     4371, 4356,    0, 4362, 4360, 4366, 4354, 4359, 4379, 4378,
     4376, 4388, 4400,    0, 4401, 4391, 4404,    0, 4390, 4407,
     4398,    0, 4405, 4403, 4409, 4397, 4397, 4414, 4408, 4407,
     4419, 4423,    0, 4424, 4414, 4427, 4722, 4431, 4424, 4427,
     4427, 4428, 4722, 4722, 4445, 4722, 4722, 4451, 4722, 4722,

     4435, 4722, 4722,    0, 4462, 4455, 4454, 4451, 4447,    0,
        0, 4464,    0,    0, 4469,    0,    0, 4454,    0,    0,
        0, 4472, 4465, 4464, 4461, 4456,    0,    0, 4475,    0,
        0, 4482,    0,    0, 4466,    0,    0,    0, 4484, 4477,
     4476, 4473, 4468,    0,    0, 4485,    0,    0, 4490,    0,
        0, 4478,    0,    0, 4480, 4494, 4722, 4494, 4505, 4722,
     4497, 4722, 4501, 4509,    0, 4509, 4519,    0, 4512,    0,
     4507, 4515,    0, 4516, 4526,    0, 4518,    0, 4513, 4521,
        0, 4521, 4533,    0, 4527,    0, 4537, 4538, 4525, 4722,
     4534, 4541, 4542, 4529,    0, 4538, 4549, 4553, 4546,    0,

     4555, 4563, 4564, 4560,    0, 4569, 4722, 4562, 4722, 4722,
        0, 4563,    0,    0,    0, 4565,    0,    0,    0, 4566,
        0,    0, 4566, 4568, 4569, 4570, 4590, 4591, 4592, 4595,
     4586, 4587, 4588, 4589, 4587, 4588, 4589, 4590, 4722,    0,
        0,    0, 4722, 4656, 4662, 4667, 4676, 4685, 4694,  245,
     4703, 4712
    } ;

static const flex_int16_t yy_def[2153] =
    {   0,
     2143,    1, 2143,    3, 2143,    5,    5,    5,    5,    5,
     2143,   11, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2143, 2143, 2143, 2145, 2145, 2145,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,

     2146, 2146, 2145, 2145, 2147, 2148, 2148, 2148, 2148, 2143,
     2148, 2148, 2148, 2148, 2148, 2143, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2143, 2148, 2148, 2143, 2143, 2149, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2150, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2145, 2145, 2145,
     2145, 2145, 2145, 2145, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2145,
     2145, 2145, 2145, 2145, 2145, 2147, 2147, 2148, 2148, 2148,

     2151, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2149, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2150, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2143, 2145,
     2145, 2145, 2145, 2145, 2143, 2145, 2146, 2146, 2146, 2146,

     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2143, 2145, 2145, 2145, 2145,

     2145, 2143, 2145, 2147, 2143, 2147, 2151, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,

     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2143,

     2145, 2143, 2145, 2145, 2143, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2143,

     2143, 2145, 2145, 2145, 2143, 2152, 2147, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,

     2148, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2145, 2143, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,

     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2143, 2145, 2152, 2152, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2145, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,

     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2145, 2152,
     2152, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2145,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2145,
     2152, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,

     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2143, 2143, 2143, 2143,
     2143, 2144, 2144, 2144, 2144, 2144, 2146, 2146, 2146, 2146,

     2146, 2148, 2148, 2148, 2148, 2148, 2143, 2143, 2143, 2143,
     2144, 2144, 2144, 2144, 2146, 2146, 2146, 2146, 2148, 2148,
     2148, 2148, 2143, 2144, 2146, 2148, 2143, 2144, 2146, 2148,
     2143, 2144, 2146, 2148, 2143, 2144, 2146, 2148, 2143, 2144,
     2146, 2148,    0, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143
    } ;

static const flex_int16_t yy_nxt[4806] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      589,   78,  104,  104,  104,  104,  103, 1980,   78,  104,
      104,  104,  104,   19, 1970,   19,  105,  105,  105,  105,
       19, 1961,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1951,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  189,  160, 1942,  164,  161,  170,  165,
      401, 1932,  166,  224,  399,  264,  144,  162,  153,  402,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  189,  160,  171,  164,  161,  170,  165,  194,
      177,  166,  224,  172,  264,  173,  162,  195,  178,  265,
      174,  179,  270,  175,  180,  176, 1923,  181,  305,  185,
      182,  186,  346,  171,  406,  407,  187,  347,  194,  177,
     1913,  188,  172,  144,  173,  144,  195,  178,  265,  174,
      179,  270,  175,  180,  176,  196,  181,  305,  185,  182,
      186,  346, 1760,  190,  200,  187,  347,  191, 1751,  197,
      188,  192,  201, 1707,  198,  199,  202,  193,  203,  204,
      205,  352,  206,  209,  196, 1698,  207,  210,  403,  404,

      405,  211,  190,  200, 1656, 1647,  191,  212,  197,  208,
      192,  201,  213,  198,  199,  202,  193,  203,  204,  205,
      352,  206,  209,  387,  214,  207,  210,  218,  219,  287,
      211,  225,  226,  288,  215,  275,  212,  220,  208,  216,
      217,  213,  221,  276,  222,  438,  289,  223,  228,  228,
      228,  228,  387,  214, 1606, 1597,  218,  219,  287, 1552,
      225,  226,  288,  215,  275,  399,  220,  144,  216,  217,
     1549,  221,  276,  222,  438,  289,  223,  229,  230,  230,
      230,  230,  229,  230,  230,  230,  230,  234,  244,  235,
      311,  231, 1688,  439,  236,  238,  231,  237,  444,  239,

      306,  307,  245,  240,  357,  246,  241,  248,  247,  242,
      232,  249,  358, 1526,  479,  250,  234,  244,  235,  243,
      231,  251,  439,  236,  238,  231,  237,  444,  239,  306,
      307,  245,  240,  357,  246,  241,  248,  247,  242,  232,
      249,  358,  252,  479,  250, 1739,  277,  393,  243,  485,
      251,  253,  302,  254,  303, 1478,  258,  304,  255,  488,
      278,  256,  489,  257,  259,  279,  280,  260,  388,  389,
      261,  252,  266,  262,  267,  277,  263, 1475,  485,  268,
      253,  302,  254,  303,  269,  258,  304,  255,  488,  278,
      256,  489,  257,  259,  279,  280,  260,  388,  389,  261,

     1452,  266,  262,  267, 1406,  263,  271,  281,  268, 1403,
      272, 1380,  490,  269,  273,  282, 1336,  295,  491,  283,
      274,  284,  285,  286,  480,  481,  290,  296,  299,  300,
      291,  492,  297,  298,  292,  271,  281,  493,  301,  272,
      293,  490, 1333,  273,  282,  294,  295,  491,  283,  274,
      284,  285,  286,  480,  481,  290,  296,  299,  300,  291,
      492,  297,  298,  292, 1310, 1260,  493,  301, 1158,  293,
      309,  309,  309,  309,  294,  311, 1058,  312,  313,  313,
      313,  313,  316,  310,  317,  326,  320,  494,  449,  318,
      321,  314,  319,  384,  322,  385,  450,  323,  386,  327,

      324,  495,  328,  960,  484,  329,  397,  397,  397,  397,
      325,  316,  310,  317,  326,  320,  494,  449,  318,  321,
      314,  319,  384,  322,  385,  450,  323,  386,  327,  324,
      495,  328,  330,  334,  329,  499,  331,  353,  500,  325,
      332,  354,  335,  501,  336,  355,  333,  484,  502,  337,
      482,  356,  338,  587,  339,  587,  400,  588,  588,  588,
      588,  330,  334,  506,  499,  331,  353,  500,  340,  332,
      354,  335,  501,  336,  355,  333,  341,  502,  337,  342,
      356,  338,  343,  339,  348,  344,  349,  359,  345,  381,
      382,  350,  506,  473,  474,  507,  351,  340,  227,  383,

      145,  360, 2143,  475, 2143,  341,  361,  362,  342, 2143,
      508,  343, 2143,  348,  344,  349,  359,  345,  381,  382,
      350,  509,  473,  474,  507,  351,  363,  369,  383,  372,
      360,  370,  475,  373,  364,  361,  362,  374,  365,  508,
      366,  367,  368,  375,  371, 2143,  510,  511,  376,  377,
      509, 2143, 2143, 2143,  512,  363,  369,  461,  372,  378,
      370,  462,  373,  364,  379,  380,  374,  365, 2143,  366,
      367,  368,  375,  371,  463,  510,  511,  376,  377,  390,
      390,  390,  390,  512,  515, 2143,  461,  486,  378,  518,
      462, 2143,  391,  379,  380,  392, 2143,  393,  394,  394,

      394,  394,  408,  463,  409,  418,  412, 2143,  487,  410,
      413,  395,  411,  515,  414,  521,  486,  415,  518,  419,
      416,  391,  420,  522,  523,  421,  524, 2143,  422, 2143,
      417,  408,  423,  409,  418,  412,  424,  487,  410,  413,
      395,  411,  425,  414,  521, 2143,  415,  426,  419,  416,
     2143,  420,  522,  523,  421,  524,  427,  422,  428,  417,
      525,  423,  526,  429,  432,  424,  430,  440,  431,  441,
      530,  425,  433, 2143,  442,  434,  426, 2143,  435,  443,
     2143,  436,  513, 2143,  437,  427,  445,  428,  514,  525,
      446,  526,  429,  432,  447,  430,  440,  431,  441,  530,

      448,  433,  451,  442,  434, 2143,  531,  435,  443,  533,
      436,  513,  455,  437,  534,  445,  452,  514,  532,  446,
      456,  453,  454,  447,  457, 2143,  458,  459,  460,  448,
     2143,  451,  476, 2143,  477,  531, 2143,  478,  533, 2143,
      464,  455, 2143,  534,  465,  452,  537,  532,  466,  456,
      453,  454,  469,  457,  467,  458,  459,  460,  503,  468,
      504,  476,  470,  477,  540,  505,  478,  471,  472,  464,
      496,  497,  516,  465,  519,  537, 2143,  466,  517,  498,
      520,  469, 2143,  467,  535,  541,  536,  503,  468,  504,
      546,  470,  547,  540,  505,  542,  471,  472,  538,  496,

      497,  516,  539,  519,  548,  527,  549,  517,  498,  520,
      528,  529,  543,  535,  541,  536,  544,  545,  550,  546,
      551,  547,  552,  553,  542,  554,  555,  538,  557,  561,
      556,  539,  562,  548,  527,  549,  564,  567,  568,  528,
      529,  543,  558,  563,  559,  544,  545,  550,  565,  551,
      569,  552,  553,  570,  554,  555,  566,  557,  561,  556,
      560,  562,  571,  573,  577,  564,  567,  568,  578,  574,
      572,  558,  563,  559,  579,  581,  575,  565,  576,  569,
      580,  582,  570, 2143, 2143,  566,  590,  583, 2143,  560,
     2143,  571,  573,  577, 2143, 2143, 2143,  578,  574,  572,

     2143, 2143,  591,  579,  581,  575,  593,  576,  594,  580,
      582,  228,  228,  228,  228,  590,  583,  585,  585,  585,
      585,  595,  596,  592,  584,  229,  230,  230,  230,  230,
      586,  591,  597,  598,  599,  593,  600,  594,  604,  231,
      601,  602,  605,  607, 2143,  611, 2143,  606,  612,  603,
      595,  596,  592,  584,  613,  614,  615,  616,  617,  586,
      618,  597,  598,  599,  620,  600,  619,  604,  231,  601,
      602,  605,  607,  608,  611,  609,  606,  612,  603,  623,
      610,  626,  621,  613,  614,  615,  616,  617,  622,  618,
      624,  627,  628,  620,  629,  619,  625,  630,  631,  635,

      632,  636,  608,  642,  609,  633,  634,  638,  623,  610,
      626,  621,  639,  637,  640,  645,  641,  622,  643,  624,
      627,  628,  644,  629,  646,  625,  630,  631,  635,  632,
      636,  647,  642,  651,  633,  634,  638,  649,  650,  652,
      653,  639,  637,  640,  645,  641,  654,  643,  648,  655,
      656,  644,  657,  646,  658,  659,  662,  660,  666, 2143,
      647,  661,  651,  667,  669,  670,  649,  650,  652,  653,
      663,  672,  664,  671,  668,  654,  673,  648,  655,  656,
      674,  657,  675,  658,  659,  662,  660,  666,  665,  676,
      661,  678,  667,  669,  670,  682,  683,  677,  684,  663,

      672,  664,  671,  668,  685,  673,  679,  686,  687,  674,
      697,  675, 2143,  680,  688,  681, 2143,  665,  676,  698,
      678, 2143, 2143, 2143,  682,  683,  677,  684,  309,  309,
      309,  309, 2143,  685,  700,  679,  686,  687, 2143,  697,
      699,  310,  680,  688,  681,  689, 2143,  689,  698,  690,
      690,  690,  690,  691,  691,  691,  691,  701,  692,  692,
      692,  692,  311,  700,  312,  694,  694,  694,  694,  699,
      310,  693,  702,  703,  704,  695,  705,  695,  314,  696,
      696,  696,  696,  706,  707,  711,  701,  708,  709,  712,
      714,  715,  718,  716,  713,  719,  710,  720,  717,  721,

      693,  702,  703,  704,  722,  705,  723,  314,  724,  725,
      727,  730,  706,  707,  711,  726,  708,  709,  712,  714,
      715,  718,  716,  713,  719,  710,  720,  717,  721,  733,
      728,  734,  735,  722,  736,  723,  729,  724,  725,  727,
      730,  731,  737,  738,  726,  739,  742,  732,  745,  749,
      740,  741,  743,  746,  747,  752,  748,  753,  733,  728,
      734,  735,  750,  736,  744,  729,  751,  756,  757,  758,
      731,  737,  738,  754,  739,  742,  732,  745,  749,  740,
      741,  743,  746,  747,  752,  748,  753,  759,  760,  761,
      755,  750,  762,  744,  763,  751,  756,  757,  758,  764,

      765,  766,  754,  767,  769,  773,  770,  768,  771,  774,
      776,  779,  780,  781,  777,  782,  759,  760,  761,  755,
      775,  762,  778,  763,  772, 2143,  785,  789,  764,  765,
      766,  790,  767,  769,  773,  770,  768,  771,  774,  776,
      779,  780,  781,  777,  782,  793,  783, 2143,  809,  775,
      786,  778,  791,  772,  784,  785,  789,  787,  792,  788,
      790,  794,  812,  390,  390,  390,  390,  795, 2143,  798,
      798,  798,  798, 2143,  793,  783,  391,  809, 2143,  786,
     2143,  791,  799,  784, 2143, 2143,  787,  792,  788, 2143,
      794,  812, 2143,  796, 2143,  796,  795,  797,  797,  797,

      797,  800,  800,  800,  800,  391,  804,  804,  804,  804,
      392,  799,  393,  801,  801,  801,  801,  802,  805,  802,
      810,  803,  803,  803,  803,  813,  395,  814,  808,  483,
      815,  483,  806,  806,  806,  806,  483,  816,  817,  818,
      819,  811,  823,  820,  821,  824,  826,  483,  830,  810,
      825,  483,  822,  831,  813,  395,  814,  832,  827,  815,
      828,  833,  834,  835,  836,  829,  816,  817,  818,  819,
      811,  823,  820,  821,  824,  826,  839,  830,  483,  825,
      842,  822,  831,  845,  846,  847,  832,  827,  848,  828,
      833,  834,  835,  836,  829,  837,  840,  843,  849,  850,

      854,  838,  841,  844, 2143,  839,  855,  861, 2143,  842,
      851,  864,  845,  846,  847,  852,  853,  848,  856,  859,
      865,  860, 2143,  870,  837,  840,  843,  849,  850,  854,
      838,  841,  844,  857,  866,  855,  861,  862,  858,  851,
      864,  863,  868,  869,  852,  853,  871,  856,  859,  865,
      860,  867,  870,  872,  873,  874,  875,  876,  877,  878,
      879,  881,  857,  866,  880,  885,  862,  858,  886,  888,
      863,  868,  869,  889,  882,  871,  883,  891,  892,  887,
      867,  890,  872,  873,  874,  875,  876,  877,  878,  879,
      881,  893,  884,  880,  885,  894,  895,  886,  888,  897,

      901,  902,  889,  882,  896,  883,  891,  892,  887,  898,
      890,  903,  905,  906,  908,  909,  899,  904,  900,  907,
      893,  884,  910,  911,  894,  895,  912,  915,  897,  901,
      902,  916,  917,  896,  913,  918,  919,  920,  898,  921,
      903,  905,  906,  908,  909,  899,  904,  900,  907,  914,
      922,  910,  911,  923,  924,  912,  915,  925,  926,  927,
      916,  917,  928,  913,  918,  919,  920,  929,  921,  930,
      931,  933,  934,  935,  936,  937,  938,  932,  914,  922,
      939,  940,  923,  924,  941,  942,  925,  926,  927,  943,
      944,  928,  945,  946,  950,  951,  929,  947,  930,  931,

      933,  934,  935,  936,  937,  938,  932,  948,  952,  939,
      940,  953,  954,  941,  942,  955,  956,  949,  943,  944,
      957,  945,  946,  950,  951,  958,  959,  961,  962,  963,
      964,  965,  966,  967,  968,  969,  948,  952,  970,  971,
      953,  954,  972,  973,  955,  956,  949,  974,  975,  957,
      976,  977,  978,  979,  958,  959,  961,  962,  963,  964,
      965,  966,  967,  968,  969,  980,  982,  970,  971,  983,
      984,  972,  973,  985,  981,  986,  974,  975,  987,  976,
      977,  978,  979,  988,  989,  990,  991,  993,  992,  994,
      995,  996,  997,  998,  980,  982, 1000,  999,  983,  984,

     1001, 2143,  985, 2143,  986, 2143, 2143,  987,  588,  588,
      588,  588,  988,  989,  990,  991,  993,  992,  994,  995,
      996,  997,  998, 2143, 2143, 1000,  999, 1006, 1002, 1001,
     1002, 1007, 1003, 1003, 1003, 1003,  585,  585,  585,  585,
     1004, 1008, 1004, 1009, 1005, 1005, 1005, 1005, 1010,  586,
      588,  588,  588,  588, 1011, 1013, 1006, 1014, 1015, 1016,
     1007, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1012,
     1008, 1025, 1009, 1026, 1027, 1028, 1031, 1010,  586, 1032,
     1033, 1034, 1029, 1011, 1013, 1035, 1014, 1015, 1016, 1030,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1012, 1036,

     1025, 1037, 1026, 1027, 1028, 1031, 1038, 1039, 1032, 1033,
     1034, 1029, 1040, 1041, 1035, 1042, 1043, 1044, 1030, 1045,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1036, 1046,
     1037, 1056, 1057, 1059, 1060, 1038, 1039, 1061, 1062, 1047,
     1063, 1040, 1041, 1064, 1042, 1043, 1044, 1065, 1066, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1067, 1046, 1068,
     1056, 1057, 1059, 1060, 1069, 1070, 1061, 1062, 1047, 1063,
     1071, 1073, 1064, 1074, 1072, 1075, 1065, 1066, 1076, 1077,
     1078, 1080, 1081, 1082, 1083, 1084, 1067, 1085, 1068, 1079,
     1086, 1087, 1088, 1069, 1070, 1089, 1091, 1090, 1092, 1071,

     1073, 1093, 1074, 1072, 1075, 1094, 1095, 1076, 1077, 1078,
     1080, 1081, 1082, 1083, 1084, 1098, 1085, 1099, 1096, 1086,
     1087, 1088, 1097, 2143, 1089, 1091, 1090, 1092, 2143, 2143,
     1093, 2143, 1106, 2143, 1094, 1095, 1100, 1100, 1100, 1100,
      690,  690,  690,  690, 1098, 2143, 1099, 1096, 2143, 2143,
     2143, 1097, 1101, 1101, 1101, 1101,  692,  692,  692,  692,
     1102, 1106, 1102, 1107, 1103, 1103, 1103, 1103,  311,  693,
      312, 1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105,  696,
      696,  696,  696, 1108,  314, 1109, 1110, 1111, 1113, 1114,
     1115, 1116, 1107, 1117, 1118, 1119, 1120, 1121,  693, 1122,

     1123, 1124, 1112, 1125, 1126, 1127, 1128, 2143, 1131, 1132,
     1133, 1134, 1108,  314, 1109, 1110, 1111, 1113, 1114, 1115,
     1116, 1135, 1117, 1118, 1119, 1120, 1121, 1136, 1122, 1123,
     1124, 1112, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133,
     1134, 1137, 1138, 1130, 1139, 1140, 1141, 1142, 1143, 1144,
     1135, 1148, 1149, 1150, 1151, 1152, 1136, 1153, 1154, 1145,
     1155, 1156, 1157, 1159, 1160, 1129, 1161, 1162, 1163, 1146,
     1137, 1138, 1130, 1139, 1140, 1141, 1142, 1143, 1144, 1147,
     1148, 1149, 1150, 1151, 1152, 1164, 1153, 1154, 1165, 1155,
     1156, 1157, 1159, 1160, 1166, 1161, 1162, 1163, 1146, 1167,

     1168, 1169, 1170, 1171, 1173, 1174, 1175, 1172, 1147, 1176,
     1177, 1178, 1180, 1181, 1164, 1182, 1183, 1165, 1184, 1185,
     1179, 1186, 1187, 1166, 1188, 1189, 1191, 1190, 1167, 1168,
     1169, 1170, 1171, 1173, 1174, 1175, 1172, 1192, 1176, 1177,
     1178, 1180, 1181, 1193, 1182, 1183, 1194, 1184, 1185, 1195,
     1186, 1187, 1198, 1188, 1189, 1191, 1190, 1196, 1199, 1208,
     1209, 1197, 1200, 1200, 1200, 1200, 1192,  797,  797,  797,
      797, 2143, 1193, 2143, 2143, 1194, 1210, 2143, 1195, 2143,
     2143, 1198,  798,  798,  798,  798, 1196, 1199, 1208, 1209,
     1197, 2143, 1201, 1211, 1201,  799, 1202, 1202, 1202, 1202,

     1203, 1203, 1203, 1203,  392, 1210,  393, 1204, 1204, 1204,
     1204, 1205, 1205, 1205, 1205,  803,  803,  803,  803,  805,
      395, 2143, 1211,  805,  799, 1206, 1206, 1206, 1206, 1212,
     1215, 1213, 2143,  804,  804,  804,  804, 1207, 1207, 1207,
     1207, 1216,  808,  483, 1217,  483, 1214, 1218, 1219,  395,
      483, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1212, 1215,
     1213,  483, 1227, 2143, 1228,  483, 1229, 1230, 1233, 1234,
     1216, 1231, 1235, 1217, 1236, 1214, 1218, 1219, 1232, 1237,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1238, 1239, 1240,
     1241, 1227,  483, 1228, 1242, 1229, 1230, 1233, 1234, 1243,

     1231, 1235, 1244, 1236, 1245, 1246, 1250, 1232, 1237, 1251,
     1247, 1252, 1253, 1254, 1255, 1256, 1238, 1239, 1240, 1241,
     1248, 1257, 1258, 1242, 1259, 1261, 1262, 1263, 1243, 1264,
     1249, 1244, 1265, 1245, 1246, 1250, 1266, 1267, 1251, 1268,
     1252, 1253, 1254, 1255, 1256, 1269, 1270, 1271, 1272, 1248,
     1257, 1258, 1275, 1259, 1261, 1262, 1263, 1276, 1264, 1249,
     1273, 1265, 1277, 1278, 1274, 1266, 1267, 1279, 1268, 1280,
     1282, 1283, 1284, 1285, 1269, 1270, 1271, 1272, 1281, 1286,
     1287, 1275, 1288, 1289, 1290, 1291, 1276, 1292, 1293, 1273,
     1294, 1277, 1278, 1274, 1295, 1296, 1279, 1297, 1280, 1282,

     1283, 1284, 1285, 1298, 1300, 1301, 1302, 1299, 1286, 1287,
     1303, 1288, 1289, 1290, 1291, 1304, 1292, 1293, 1305, 1294,
     1306, 1307, 1308, 1295, 1296, 1309, 1297, 1311, 1312, 1313,
     1314, 1315, 1298, 1300, 1301, 1302, 1299, 1316, 1317, 1303,
     1318, 1319, 1320, 1321, 1304, 1322, 1323, 1305, 1324, 1306,
     1307, 1308, 1325, 1326, 1309, 1327, 1311, 1312, 1313, 1314,
     1315, 1328, 1329, 1330, 1331, 1332, 1316, 1317, 1334, 1318,
     1319, 1320, 1321, 1337, 1322, 1323, 1338, 1324, 1339, 1335,
     1340, 1325, 1326, 1341, 1327, 1342, 1343, 1344, 1345, 1346,
     1328, 1329, 1330, 1331, 1332, 1347, 1348, 1334, 1349, 1350,

     1351, 1352, 1337, 1353, 1354, 1338, 1355, 1339, 1335, 1340,
     1356, 1357, 1341, 1358, 1342, 1343, 1344, 1345, 1346, 1359,
     1360, 1361, 1362, 1363, 1347, 1348, 1364, 1349, 1350, 1351,
     1352, 1365, 1353, 1354, 1366, 1355, 1367, 1368, 1369, 1356,
     1357, 1370, 1358, 1371, 1003, 1003, 1003, 1003, 1359, 1360,
     1361, 1362, 1363, 1372, 1373, 1364, 1003, 1003, 1003, 1003,
     1365, 1374, 1375, 1366, 1376, 1367, 1368, 1369, 1377, 1378,
     1370, 1379, 1371, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1381, 1372, 1373, 1382, 1383, 1384, 1385, 1386, 1387,
     1374, 1375, 1388, 1376, 1389, 1390, 1391, 1377, 1378, 1392,

     1379, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
     1381, 1402, 1407, 1382, 1383, 1384, 1385, 1386, 1387, 1408,
     1409, 1388, 1410, 1389, 1390, 1391, 1411, 1412, 1392, 1413,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1404,
     1402, 1407, 1414, 1415, 1416, 1417, 1418, 1419, 1408, 1409,
     1405, 1410, 1420, 1421, 1422, 1411, 1412, 1423, 1413, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1404, 1433,
     1434, 1414, 1415, 1416, 1417, 1418, 1419, 1435, 1436, 1405,
     1437, 1420, 1421, 1422, 1438, 1439, 1423, 1440, 1424, 1425,
     1426, 1427, 1428, 1429, 1430, 1431, 1432, 1441, 1433, 1434,

     1100, 1100, 1100, 1100, 2143, 2143, 1435, 1436, 2143, 1437,
     2143, 1444, 1445, 1438, 1439, 1446, 1440, 1442, 1442, 1442,
     1442, 1443, 1443, 1443, 1443, 1447, 1441, 1103, 1103, 1103,
     1103,  312, 1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105,
     1444, 1445, 1448, 1449, 1446,  314, 1450, 1451, 1453, 1454,
     1455, 1456, 1457, 1458, 1447, 1459, 1460, 1461, 1462, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1448, 1449, 1479,  314, 1450, 1451, 1453, 1454, 1455,
     1456, 1457, 1458, 1480, 1459, 1460, 1461, 1462, 1463, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,

     1476, 1481, 1479, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1477, 1480, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1476,
     1481, 1506, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
     1477, 1507, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1508, 1509,
     1506, 1510, 1511, 1512, 1513, 1200, 1200, 1200, 1200, 2143,
     1507, 1514, 1514, 1514, 1514, 1202, 1202, 1202, 1202, 1515,
     1515, 1515, 1515, 1205, 1205, 1205, 1205, 1508, 1509, 1518,
     1510, 1511, 1512, 1513,  392, 1519, 1520, 1204, 1204, 1204,

     1204, 1517, 1517, 1517, 1517,  805, 1521, 1522, 1523, 1524,
      395, 1525, 1527, 1528, 1529, 1530, 1531, 1532, 1518,  804,
      804,  804,  804, 1533, 1519, 1520, 1534, 1535, 1536, 1537,
     1538, 1539, 1540, 1541, 1542, 1521, 1522, 1523, 1524,  395,
     1525, 1527, 1528, 1529, 1530, 1531, 1532, 1543, 1544, 1545,
     1546, 1547, 1533, 1548, 1550, 1534, 1535, 1536, 1537, 1538,
     1539, 1540, 1541, 1542, 1553, 1551, 1554, 1555, 1556, 1557,
     1558, 1559, 1560, 1561, 1562, 1563, 1543, 1544, 1545, 1546,
     1547, 1564, 1548, 1550, 1565, 1566, 1567, 1568, 1569, 1570,
     1571, 1572, 1573, 1553, 1551, 1554, 1555, 1556, 1557, 1558,

     1559, 1560, 1561, 1562, 1563, 1574, 1575, 1576, 1577, 1578,
     1564, 1579, 1580, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
     1572, 1573, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
     1589, 1590, 1591, 1592, 1574, 1575, 1576, 1577, 1578, 1593,
     1579, 1580, 1594, 1595, 1596, 1598, 1599, 1600, 1601, 1602,
     1603, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1604, 1605, 1607, 1608, 1609, 1593, 1610,
     1611, 1594, 1595, 1596, 1598, 1599, 1600, 1601, 1602, 1603,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1604, 1605, 1607, 1608, 1609, 1624, 1610, 1611,

     1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1612,
     1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1623, 1634, 1635, 1636, 1637, 1638, 1624, 1639, 1640, 1625,
     1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1641, 1642,
     1643, 1644, 1645, 1646, 1648, 1649, 1650, 1651, 1652, 1653,
     1634, 1635, 1636, 1637, 1638, 1654, 1639, 1640, 1655, 1657,
     1658, 1659, 1660, 1661, 1662, 1663, 1664, 1641, 1642, 1643,
     1644, 1645, 1646, 1648, 1649, 1650, 1651, 1652, 1653, 1665,
     1666, 1667, 1668, 1669, 1654, 1670, 1671, 1655, 1657, 1658,
     1659, 1660, 1661, 1662, 1663, 1664, 1672, 1673, 1674, 1675,

     1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1665, 1666,
     1667, 1668, 1669, 1684, 1670, 1671, 1685, 1686, 1687, 1443,
     1443, 1443, 1443, 1689, 1690, 1672, 1673, 1674, 1675, 1676,
     1677, 1678, 1679, 1680, 1681, 1682, 1683, 1691, 1692, 1693,
     1694, 1695, 1684, 1696, 1697, 1685, 1686, 1687, 1699, 1700,
     1701, 1702, 1689, 1690, 1703, 1704, 1705, 1706, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1691, 1692, 1693, 1694,
     1695, 1716, 1696, 1697, 1717, 1718, 1719, 1699, 1700, 1701,
     1702, 1720, 1721, 1703, 1704, 1705, 1706, 1708, 1709, 1710,
     1711, 1712, 1713, 1714, 1715, 1722, 1723, 1724, 1725, 1726,

     1716, 1727, 1728, 1717, 1718, 1719, 1729, 1730, 1731, 1732,
     1720, 1721, 1733, 1734, 1735, 1736, 1737, 1738, 1514, 1514,
     1514, 1514, 2143, 2143, 1722, 1723, 1724, 1725, 1726, 1742,
     1727, 1728, 1743, 1744, 1745, 1729, 1730, 1731, 1732, 1746,
     1747, 1733, 1734, 1735, 1736, 1737, 1738, 1740, 1740, 1740,
     1740, 1741, 1741, 1741, 1741, 1748, 1749, 1750, 1742, 1752,
     1753, 1743, 1744, 1745, 1754, 1755, 1756, 1757, 1746, 1747,
     1758, 1759, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
     1769, 1770, 1771, 1772, 1748, 1749, 1750, 1773, 1752, 1753,
     1774, 1775, 1776, 1754, 1755, 1756, 1757, 1777, 1778, 1758,

     1759, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1770, 1771, 1772, 1779, 1780, 1781, 1773, 1782, 1783, 1774,
     1775, 1776, 1784, 1785, 1786, 1787, 1777, 1778, 1788, 1789,
     1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
     1800, 1801, 1779, 1780, 1781, 1802, 1782, 1783, 1803, 1804,
     1805, 1784, 1785, 1786, 1787, 1806, 1807, 1788, 1789, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
     1801, 1808, 1809, 1810, 1802, 1811, 1812, 1803, 1804, 1805,
     1813, 1814, 1815, 1816, 1806, 1807, 1817, 1818, 1819, 1820,
     1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,

     1808, 1809, 1810, 1831, 1811, 1812, 1832, 1833, 1834, 1813,
     1814, 1815, 1816, 1835, 1836, 1817, 1818, 1819, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1837,
     1838, 1839, 1831, 1840, 1841, 1832, 1833, 1834, 1842, 1843,
     1844, 1845, 1835, 1836, 1846, 1847, 1848, 1849, 1850, 1850,
     1850, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1837, 1838,
     1839, 1857, 1840, 1841, 1858, 1859, 1860, 1842, 1843, 1844,
     1845, 1861, 1862, 1846, 1847, 1848, 1849, 1863, 1864, 1865,
     1866, 1851, 1852, 1853, 1854, 1855, 1856, 1867, 1868, 1869,
     1857, 1870, 1871, 1858, 1859, 1860, 1872, 1873, 1874, 1875,

     1861, 1862, 1876, 1877, 1878, 1879, 1863, 1864, 1865, 1866,
     1880, 1880, 1880, 1880, 1882, 1883, 1867, 1868, 1869, 1884,
     1870, 1871, 1885, 1886, 1887, 1872, 1873, 1874, 1875, 1888,
     1889, 1876, 1877, 1878, 1879, 1740, 1740, 1740, 1740, 1881,
     1881, 1881, 1881, 1882, 1883, 1890, 1891, 1892, 1884, 1893,
     1894, 1885, 1886, 1887, 1895, 1896, 1897, 1898, 1888, 1889,
     1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
     1909, 1910, 1911, 1912, 1890, 1891, 1892, 1914, 1893, 1894,
     1915, 1916, 1917, 1895, 1896, 1897, 1898, 1918, 1919, 1899,
     1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,

     1910, 1911, 1912, 1920, 1921, 1922, 1914, 1924, 1925, 1915,
     1916, 1917, 1926, 1927, 1928, 1929, 1918, 1919, 1930, 1931,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1943,
     1944, 1945, 1920, 1921, 1922, 1946, 1924, 1925, 1947, 1948,
     2143, 1926, 1927, 1928, 1929, 1949, 1950, 1930, 1931, 1933,
     1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1943, 1944,
     1945, 1952, 1953, 1954, 1946, 1955, 1956, 1947, 1948, 1850,
     1850, 1850, 1850, 1957, 1949, 1950, 1958, 1959, 1960, 1962,
     1963, 1964, 1965, 1966, 1967, 1880, 1880, 1880, 1880, 1968,
     1952, 1953, 1954, 1969, 1955, 1956, 1740, 1740, 1740, 1740,

     1971, 1972, 1957, 1973, 1974, 1958, 1959, 1960, 1962, 1963,
     1964, 1965, 1966, 1967, 1975, 1976, 1977, 1978, 1968, 1979,
     1981, 1982, 1969, 1983, 1984, 1985, 1986, 1987, 1990, 1971,
     1972, 1988, 1973, 1974, 1991, 1992, 1993, 1994, 1995, 1996,
     1997, 1998, 1999, 1975, 1976, 1977, 1978, 1989, 1979, 1981,
     1982, 2000, 1983, 1984, 1985, 1986, 1987, 1990, 2001, 2002,
     1988, 2003, 2004, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
     1998, 1999, 2007, 2005, 2008, 2009, 1989, 2010, 2011, 2012,
     2000, 2013, 2014, 2015, 2016, 2017, 2018, 2001, 2002, 2006,
     2003, 2004, 2019, 2020, 2021, 2024, 2025, 2026, 2027, 2028,

     2022, 2007, 2005, 2008, 2009, 2029, 2010, 2011, 2012, 2030,
     2013, 2014, 2015, 2016, 2017, 2018, 2023, 2031, 2006, 2032,
     2033, 2019, 2020, 2021, 2024, 2025, 2026, 2027, 2028, 2022,
     2034, 2035, 2036, 2037, 2029, 2038, 2039, 2041, 2030, 2042,
     2043, 2044, 2045, 2046, 2047, 2023, 2031, 2048, 2032, 2033,
     2049, 2050, 2040, 2051, 2052, 2053, 2054, 2055, 2056, 2034,
     2035, 2036, 2037, 2057, 2038, 2039, 2041, 2058, 2042, 2043,
     2044, 2045, 2046, 2047, 2059, 2060, 2048, 2061, 2062, 2049,
     2050, 2040, 2051, 2052, 2053, 2054, 2055, 2056, 2063, 2064,
     2065, 2066, 2057, 2067, 2068, 2069, 2058, 2070, 2071, 2072,

     2073, 2074, 2075, 2059, 2060, 2076, 2061, 2062, 2077, 2078,
     2079, 2080, 2081, 2082, 2083, 2084, 2085, 2063, 2064, 2065,
     2066, 2086, 2067, 2068, 2069, 2087, 2070, 2071, 2072, 2073,
     2074, 2075, 2088, 2089, 2076, 2090, 2091, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 2085, 2092, 2093, 2094, 2095,
     2086, 2096, 2097, 2098, 2087, 2099, 2100, 2101, 2102, 2103,
     2104, 2088, 2089, 2105, 2090, 2091, 2106, 2107, 2108, 2109,
     2110, 2111, 2112, 2113, 2114, 2092, 2093, 2094, 2095, 2115,
     2096, 2097, 2098, 2116, 2099, 2100, 2101, 2102, 2103, 2104,
     2117, 2118, 2105, 2119, 2120, 2106, 2107, 2108, 2109, 2110,

     2111, 2112, 2113, 2114, 2121, 2122, 2123, 2124, 2115, 2125,
     2126, 2127, 2116, 2128, 2129, 2130, 2131, 2132, 2133, 2117,
     2118, 2134, 2119, 2120, 2135, 2136, 2137, 2138, 2139, 2140,
     2141, 2142, 2143, 2121, 2122, 2123, 2124, 2143, 2125, 2126,
     2127, 2143, 2128, 2129, 2130, 2131, 2132, 2133, 2143, 2143,
     2134, 2143, 2143, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
     2142,  233, 2143,  233,  233,  308, 2143,  308, 2143,  308,
      315,  315,  315,  315,  315,  315,  396, 2143,  396,  396,
      396,  396,  396,  396,  396,  398, 2143, 2143,  398,  398,
      398, 2143,  398,  398,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  807,  807,  807,  807,  807,  807,  807,
      807,  807, 1516, 2143, 1516, 1516, 1516, 1516, 1516, 1516,
     1516,   13, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143
    } ;

static const flex_int16_t yy_chk[4806] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2150,    7,    7,    7,    7,    7,    8, 1901,    8,    8,
        8,    8,    8,    9, 1887,    9,    9,    9,    9,    9,
       10, 1870,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1856,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1840,   28,   27,   29,   28,
      115, 1826,   28,   45,  107,   59,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   37,
       31,   28,   45,   30,   59,   30,   27,   37,   31,   60,
       30,   31,   62,   30,   31,   30, 1811,   31,   73,   34,
       31,   34,   87,   30,  119,  119,   34,   88,   37,   31,
     1797,   34,   30,  144,   30,  144,   37,   31,   60,   30,
       31,   62,   30,   31,   30,   38,   31,   73,   34,   31,
       34,   87, 1540,   36,   39,   34,   88,   36, 1529,   38,
       34,   36,   39, 1466,   38,   38,   39,   36,   39,   39,
       39,   90,   40,   41,   38, 1455,   40,   41,  117,  117,

      117,   41,   36,   39, 1394, 1383,   36,   41,   38,   40,
       36,   39,   41,   38,   38,   39,   36,   39,   39,   39,
       90,   40,   41,  101,   42,   40,   41,   43,   43,   68,
       41,   46,   46,   68,   42,   65,   41,   43,   40,   42,
       42,   41,   44,   65,   44,  126,   68,   44,   50,   50,
       50,   50,  101,   42, 1324, 1313,   43,   43,   68, 1251,
       46,   46,   68,   42,   65,  399,   43,  399,   42,   42,
     1247,   44,   65,   44,  126,   68,   44,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   53,   55,   53,
     1442,   51, 1442,  127,   53,   54,   52,   53,  129,   54,

       74,   74,   55,   54,   93,   55,   54,   56,   55,   54,
       51,   56,   93, 1219,  139,   56,   53,   55,   53,   54,
       51,   56,  127,   53,   54,   52,   53,  129,   54,   74,
       74,   55,   54,   93,   55,   54,   56,   55,   54,   51,
       56,   93,   57,  139,   56, 1515,   66, 1515,   54,  153,
       56,   57,   72,   57,   72, 1149,   58,   72,   57,  155,
       66,   57,  156,   57,   58,   66,   66,   58,  102,  102,
       58,   57,   61,   58,   61,   66,   58, 1145,  153,   61,
       57,   72,   57,   72,   61,   58,   72,   57,  155,   66,
       57,  156,   57,   58,   66,   66,   58,  102,  102,   58,

     1117,   61,   58,   61, 1049,   58,   64,   67,   61, 1045,
       64, 1017,  157,   61,   64,   67,  951,   70,  158,   67,
       64,   67,   67,   67,  140,  140,   69,   70,   71,   71,
       69,  159,   70,   70,   69,   64,   67,  160,   71,   64,
       69,  157,  947,   64,   67,   69,   70,  158,   67,   64,
       67,   67,   67,  140,  140,   69,   70,   71,   71,   69,
      159,   70,   70,   69,  919,  868,  160,   71,  756,   69,
       79,   79,   79,   79,   69,   80,  649,   80,   80,   80,
       80,   80,   81,   79,   81,   83,   82,  161,  131,   81,
       82,   80,   81,  100,   82,  100,  131,   82,  100,   83,

       82,  163,   83,  544,  483,   83,  105,  105,  105,  105,
       82,   81,   79,   81,   83,   82,  161,  131,   81,   82,
       80,   81,  100,   82,  100,  131,   82,  100,   83,   82,
      163,   83,   84,   85,   83,  165,   84,   92,  166,   82,
       84,   92,   85,  166,   85,   92,   84,  146,  167,   85,
      142,   92,   85,  231,   85,  231,  109,  231,  231,  231,
      231,   84,   85,  169,  165,   84,   92,  166,   86,   84,
       92,   85,  166,   85,   92,   84,   86,  167,   85,   86,
       92,   85,   86,   85,   89,   86,   89,   94,   86,   99,
       99,   89,  169,  137,  137,  170,   89,   86,   47,   99,

       17,   94,   13,  137,    0,   86,   94,   94,   86,    0,
      171,   86,    0,   89,   86,   89,   94,   86,   99,   99,
       89,  172,  137,  137,  170,   89,   95,   96,   99,   97,
       94,   96,  137,   97,   95,   94,   94,   97,   95,  171,
       95,   95,   95,   97,   96,    0,  173,  174,   97,   98,
      172,    0,    0,    0,  175,   95,   96,  134,   97,   98,
       96,  134,   97,   95,   98,   98,   97,   95,    0,   95,
       95,   95,   97,   96,  134,  173,  174,   97,   98,  103,
      103,  103,  103,  175,  177,    0,  134,  154,   98,  179,
      134,    0,  103,   98,   98,  104,    0,  104,  104,  104,

      104,  104,  120,  134,  120,  122,  121,    0,  154,  120,
      121,  104,  120,  177,  121,  181,  154,  121,  179,  122,
      121,  103,  122,  182,  183,  122,  184,    0,  123,    0,
      121,  120,  123,  120,  122,  121,  123,  154,  120,  121,
      104,  120,  123,  121,  181,    0,  121,  124,  122,  121,
        0,  122,  182,  183,  122,  184,  124,  123,  124,  121,
      185,  123,  186,  124,  125,  123,  124,  128,  124,  128,
      189,  123,  125,    0,  128,  125,  124,    0,  125,  128,
        0,  125,  176,    0,  125,  124,  130,  124,  176,  185,
      130,  186,  124,  125,  130,  124,  128,  124,  128,  189,

      130,  125,  132,  128,  125,    0,  190,  125,  128,  191,
      125,  176,  133,  125,  191,  130,  132,  176,  190,  130,
      133,  132,  132,  130,  133,    0,  133,  133,  133,  130,
        0,  132,  138,    0,  138,  190,    0,  138,  191,    0,
      135,  133,    0,  191,  135,  132,  193,  190,  135,  133,
      132,  132,  136,  133,  135,  133,  133,  133,  168,  135,
      168,  138,  136,  138,  195,  168,  138,  136,  136,  135,
      164,  164,  178,  135,  180,  193,    0,  135,  178,  164,
      180,  136,    0,  135,  192,  196,  192,  168,  135,  168,
      199,  136,  200,  195,  168,  197,  136,  136,  194,  164,

      164,  178,  194,  180,  201,  187,  202,  178,  164,  180,
      187,  187,  197,  192,  196,  192,  198,  198,  203,  199,
      204,  200,  205,  206,  197,  207,  208,  194,  209,  211,
      208,  194,  212,  201,  187,  202,  213,  215,  216,  187,
      187,  197,  210,  212,  210,  198,  198,  203,  214,  204,
      217,  205,  206,  218,  207,  208,  214,  209,  211,  208,
      210,  212,  219,  220,  222,  213,  215,  216,  223,  221,
      219,  210,  212,  210,  224,  225,  221,  214,  221,  217,
      224,  226,  218,    0,    0,  214,  234,  226,    0,  210,
        0,  219,  220,  222,    0,    0,    0,  223,  221,  219,

        0,    0,  235,  224,  225,  221,  236,  221,  237,  224,
      226,  228,  228,  228,  228,  234,  226,  229,  229,  229,
      229,  238,  239,  235,  228,  230,  230,  230,  230,  230,
      229,  235,  240,  241,  242,  236,  244,  237,  246,  230,
      245,  245,  247,  248,    0,  250,    0,  247,  251,  245,
      238,  239,  235,  228,  252,  253,  254,  255,  256,  229,
      257,  240,  241,  242,  258,  244,  257,  246,  230,  245,
      245,  247,  248,  249,  250,  249,  247,  251,  245,  260,
      249,  262,  259,  252,  253,  254,  255,  256,  259,  257,
      261,  263,  264,  258,  265,  257,  261,  266,  267,  270,

      268,  271,  249,  274,  249,  268,  268,  272,  260,  249,
      262,  259,  272,  271,  273,  276,  273,  259,  275,  261,
      263,  264,  275,  265,  277,  261,  266,  267,  270,  268,
      271,  278,  274,  280,  268,  268,  272,  279,  279,  281,
      282,  272,  271,  273,  276,  273,  283,  275,  278,  284,
      285,  275,  286,  277,  287,  288,  290,  289,  292,    0,
      278,  289,  280,  293,  294,  295,  279,  279,  281,  282,
      291,  296,  291,  295,  293,  283,  297,  278,  284,  285,
      298,  286,  299,  287,  288,  290,  289,  292,  291,  300,
      289,  301,  293,  294,  295,  303,  304,  300,  305,  291,

      296,  291,  295,  293,  305,  297,  302,  306,  307,  298,
      316,  299,    0,  302,  307,  302,    0,  291,  300,  317,
      301,    0,    0,    0,  303,  304,  300,  305,  309,  309,
      309,  309,    0,  305,  318,  302,  306,  307,    0,  316,
      317,  309,  302,  307,  302,  310,    0,  310,  317,  310,
      310,  310,  310,  311,  311,  311,  311,  319,  312,  312,
      312,  312,  313,  318,  313,  313,  313,  313,  313,  317,
      309,  312,  320,  321,  322,  314,  323,  314,  313,  314,
      314,  314,  314,  324,  326,  328,  319,  327,  327,  329,
      330,  331,  332,  331,  329,  333,  327,  334,  331,  335,

      312,  320,  321,  322,  336,  323,  337,  313,  338,  339,
      340,  342,  324,  326,  328,  339,  327,  327,  329,  330,
      331,  332,  331,  329,  333,  327,  334,  331,  335,  344,
      341,  345,  346,  336,  347,  337,  341,  338,  339,  340,
      342,  343,  348,  349,  339,  350,  352,  343,  354,  356,
      350,  350,  353,  354,  355,  358,  355,  359,  344,  341,
      345,  346,  357,  347,  353,  341,  357,  361,  361,  362,
      343,  348,  349,  360,  350,  352,  343,  354,  356,  350,
      350,  353,  354,  355,  358,  355,  359,  363,  364,  365,
      360,  357,  366,  353,  367,  357,  361,  361,  362,  368,

      369,  370,  360,  371,  372,  374,  373,  371,  373,  375,
      376,  378,  379,  380,  377,  381,  363,  364,  365,  360,
      375,  366,  377,  367,  373,    0,  383,  385,  368,  369,
      370,  386,  371,  372,  374,  373,  371,  373,  375,  376,
      378,  379,  380,  377,  381,  388,  382,    0,  408,  375,
      384,  377,  387,  373,  382,  383,  385,  384,  387,  384,
      386,  389,  410,  390,  390,  390,  390,  389,    0,  392,
      392,  392,  392,    0,  388,  382,  390,  408,    0,  384,
        0,  387,  392,  382,    0,    0,  384,  387,  384,    0,
      389,  410,    0,  391,    0,  391,  389,  391,  391,  391,

      391,  393,  393,  393,  393,  390,  396,  396,  396,  396,
      394,  392,  394,  394,  394,  394,  394,  395,  397,  395,
      409,  395,  395,  395,  395,  411,  394,  412,  401,  401,
      413,  401,  397,  397,  397,  397,  401,  414,  415,  416,
      418,  409,  420,  419,  419,  421,  422,  401,  424,  409,
      421,  401,  419,  425,  411,  394,  412,  426,  423,  413,
      423,  427,  428,  429,  430,  423,  414,  415,  416,  418,
      409,  420,  419,  419,  421,  422,  432,  424,  401,  421,
      434,  419,  425,  436,  437,  438,  426,  423,  439,  423,
      427,  428,  429,  430,  423,  431,  433,  435,  440,  441,

      444,  431,  433,  435,    0,  432,  445,  448,    0,  434,
      442,  450,  436,  437,  438,  442,  442,  439,  445,  447,
      451,  447,    0,  454,  431,  433,  435,  440,  441,  444,
      431,  433,  435,  446,  452,  445,  448,  449,  446,  442,
      450,  449,  453,  453,  442,  442,  455,  445,  447,  451,
      447,  452,  454,  456,  457,  458,  459,  460,  461,  462,
      463,  464,  446,  452,  463,  466,  449,  446,  467,  468,
      449,  453,  453,  469,  465,  455,  465,  470,  471,  467,
      452,  469,  456,  457,  458,  459,  460,  461,  462,  463,
      464,  472,  465,  463,  466,  473,  474,  467,  468,  475,

      477,  478,  469,  465,  474,  465,  470,  471,  467,  476,
      469,  479,  480,  481,  490,  491,  476,  479,  476,  481,
      472,  465,  492,  493,  473,  474,  494,  496,  475,  477,
      478,  497,  498,  474,  495,  499,  500,  501,  476,  502,
      479,  480,  481,  490,  491,  476,  479,  476,  481,  495,
      503,  492,  493,  504,  505,  494,  496,  506,  507,  508,
      497,  498,  509,  495,  499,  500,  501,  511,  502,  512,
      513,  514,  515,  516,  517,  518,  519,  513,  495,  503,
      520,  521,  504,  505,  522,  523,  506,  507,  508,  524,
      525,  509,  527,  528,  530,  532,  511,  529,  512,  513,

      514,  515,  516,  517,  518,  519,  513,  529,  533,  520,
      521,  534,  535,  522,  523,  536,  537,  529,  524,  525,
      538,  527,  528,  530,  532,  541,  542,  545,  546,  547,
      548,  549,  550,  551,  552,  553,  529,  533,  554,  555,
      534,  535,  556,  557,  536,  537,  529,  557,  558,  538,
      559,  560,  561,  562,  541,  542,  545,  546,  547,  548,
      549,  550,  551,  552,  553,  563,  564,  554,  555,  565,
      567,  556,  557,  568,  563,  570,  557,  558,  571,  559,
      560,  561,  562,  572,  573,  574,  575,  576,  575,  577,
      578,  579,  580,  581,  563,  564,  582,  581,  565,  567,

      583,    0,  568,    0,  570,    0,    0,  571,  587,  587,
      587,  587,  572,  573,  574,  575,  576,  575,  577,  578,
      579,  580,  581,    0,    0,  582,  581,  595,  584,  583,
      584,  596,  584,  584,  584,  584,  585,  585,  585,  585,
      586,  597,  586,  598,  586,  586,  586,  586,  599,  585,
      588,  588,  588,  588,  600,  601,  595,  602,  603,  604,
      596,  605,  606,  607,  608,  609,  610,  611,  612,  600,
      597,  613,  598,  614,  616,  617,  619,  599,  585,  620,
      621,  622,  618,  600,  601,  623,  602,  603,  604,  618,
      605,  606,  607,  608,  609,  610,  611,  612,  600,  624,

      613,  625,  614,  616,  617,  619,  626,  627,  620,  621,
      622,  618,  628,  629,  623,  630,  632,  633,  618,  634,
      635,  637,  638,  639,  640,  641,  642,  643,  624,  634,
      625,  646,  647,  650,  651,  626,  627,  652,  653,  634,
      654,  628,  629,  655,  630,  632,  633,  656,  657,  635,
      637,  638,  639,  640,  641,  642,  643,  658,  634,  659,
      646,  647,  650,  651,  660,  661,  652,  653,  634,  654,
      662,  663,  655,  664,  662,  665,  656,  657,  666,  667,
      668,  669,  670,  672,  673,  675,  658,  676,  659,  668,
      677,  678,  679,  660,  661,  680,  681,  680,  682,  662,

      663,  683,  664,  662,  665,  684,  685,  666,  667,  668,
      669,  670,  672,  673,  675,  687,  676,  688,  686,  677,
      678,  679,  686,    0,  680,  681,  680,  682,    0,    0,
      683,    0,  702,    0,  684,  685,  689,  689,  689,  689,
      690,  690,  690,  690,  687,    0,  688,  686,    0,    0,
        0,  686,  691,  691,  691,  691,  692,  692,  692,  692,
      693,  702,  693,  703,  693,  693,  693,  693,  694,  692,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  696,
      696,  696,  696,  704,  694,  705,  706,  707,  708,  709,
      710,  711,  703,  712,  713,  714,  715,  716,  692,  717,

      718,  719,  707,  720,  721,  723,  724,    0,  726,  727,
      728,  729,  704,  694,  705,  706,  707,  708,  709,  710,
      711,  730,  712,  713,  714,  715,  716,  731,  717,  718,
      719,  707,  720,  721,  723,  724,  725,  726,  727,  728,
      729,  732,  733,  725,  734,  735,  736,  737,  739,  740,
      730,  742,  744,  745,  746,  747,  731,  748,  749,  741,
      750,  753,  754,  757,  758,  725,  759,  760,  761,  741,
      732,  733,  725,  734,  735,  736,  737,  739,  740,  741,
      742,  744,  745,  746,  747,  762,  748,  749,  763,  750,
      753,  754,  757,  758,  764,  759,  760,  761,  741,  765,

      766,  767,  768,  769,  770,  771,  772,  769,  741,  773,
      774,  775,  776,  777,  762,  779,  780,  763,  782,  783,
      775,  784,  785,  764,  786,  787,  788,  787,  765,  766,
      767,  768,  769,  770,  771,  772,  769,  789,  773,  774,
      775,  776,  777,  790,  779,  780,  791,  782,  783,  792,
      784,  785,  794,  786,  787,  788,  787,  793,  795,  814,
      815,  793,  796,  796,  796,  796,  789,  797,  797,  797,
      797,    0,  790,    0,    0,  791,  816,    0,  792,    0,
        0,  794,  798,  798,  798,  798,  793,  795,  814,  815,
      793,    0,  799,  817,  799,  798,  799,  799,  799,  799,

      800,  800,  800,  800,  801,  816,  801,  801,  801,  801,
      801,  802,  802,  802,  802,  803,  803,  803,  803,  804,
      801,    0,  817,  806,  798,  805,  805,  805,  805,  818,
      820,  819,    0,  804,  804,  804,  804,  806,  806,  806,
      806,  821,  807,  807,  822,  807,  819,  823,  824,  801,
      807,  825,  826,  827,  828,  829,  830,  831,  818,  820,
      819,  807,  832,    0,  833,  807,  835,  836,  838,  839,
      821,  837,  840,  822,  841,  819,  823,  824,  837,  842,
      825,  826,  827,  828,  829,  830,  831,  843,  844,  845,
      846,  832,  807,  833,  847,  835,  836,  838,  839,  848,

      837,  840,  849,  841,  851,  852,  854,  837,  842,  856,
      853,  857,  858,  859,  860,  861,  843,  844,  845,  846,
      853,  862,  865,  847,  866,  869,  870,  871,  848,  872,
      853,  849,  873,  851,  852,  854,  874,  875,  856,  876,
      857,  858,  859,  860,  861,  877,  878,  879,  880,  853,
      862,  865,  882,  866,  869,  870,  871,  883,  872,  853,
      881,  873,  884,  885,  881,  874,  875,  886,  876,  887,
      888,  889,  891,  892,  877,  878,  879,  880,  887,  894,
      895,  882,  896,  897,  898,  899,  883,  899,  900,  881,
      901,  884,  885,  881,  902,  903,  886,  904,  887,  888,

      889,  891,  892,  905,  906,  907,  908,  905,  894,  895,
      909,  896,  897,  898,  899,  910,  899,  900,  912,  901,
      915,  916,  917,  902,  903,  918,  904,  920,  922,  923,
      925,  926,  905,  906,  907,  908,  905,  927,  929,  909,
      930,  931,  932,  933,  910,  934,  935,  912,  936,  915,
      916,  917,  937,  938,  918,  939,  920,  922,  923,  925,
      926,  942,  943,  944,  945,  946,  927,  929,  948,  930,
      931,  932,  933,  955,  934,  935,  957,  936,  958,  948,
      959,  937,  938,  960,  939,  961,  962,  963,  965,  966,
      942,  943,  944,  945,  946,  967,  969,  948,  970,  971,

      972,  973,  955,  976,  977,  957,  978,  958,  948,  959,
      979,  981,  960,  982,  961,  962,  963,  965,  966,  983,
      985,  988,  990,  991,  967,  969,  992,  970,  971,  972,
      973,  993,  976,  977,  994,  978,  995,  996,  997,  979,
      981,  999,  982, 1000, 1002, 1002, 1002, 1002,  983,  985,
      988,  990,  991, 1006, 1007,  992, 1003, 1003, 1003, 1003,
      993, 1008, 1010,  994, 1013,  995,  996,  997, 1014, 1015,
      999, 1016, 1000, 1004, 1004, 1004, 1004, 1005, 1005, 1005,
     1005, 1018, 1006, 1007, 1020, 1021, 1023, 1024, 1025, 1027,
     1008, 1010, 1028, 1013, 1029, 1030, 1031, 1014, 1015, 1032,

     1016, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043,
     1018, 1044, 1053, 1020, 1021, 1023, 1024, 1025, 1027, 1055,
     1056, 1028, 1057, 1029, 1030, 1031, 1058, 1059, 1032, 1060,
     1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1046,
     1044, 1053, 1061, 1063, 1064, 1065, 1067, 1068, 1055, 1056,
     1046, 1057, 1069, 1070, 1071, 1058, 1059, 1074, 1060, 1075,
     1076, 1077, 1079, 1080, 1081, 1083, 1086, 1088, 1046, 1089,
     1090, 1061, 1063, 1064, 1065, 1067, 1068, 1091, 1092, 1046,
     1093, 1069, 1070, 1071, 1094, 1095, 1074, 1097, 1075, 1076,
     1077, 1079, 1080, 1081, 1083, 1086, 1088, 1098, 1089, 1090,

     1100, 1100, 1100, 1100,    0,    0, 1091, 1092,    0, 1093,
        0, 1106, 1107, 1094, 1095, 1108, 1097, 1101, 1101, 1101,
     1101, 1102, 1102, 1102, 1102, 1110, 1098, 1103, 1103, 1103,
     1103, 1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105,
     1106, 1107, 1113, 1114, 1108, 1104, 1115, 1116, 1118, 1120,
     1121, 1123, 1124, 1125, 1110, 1127, 1128, 1129, 1130, 1131,
     1132, 1133, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1143,
     1144, 1113, 1114, 1153, 1104, 1115, 1116, 1118, 1120, 1121,
     1123, 1124, 1125, 1155, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1143, 1144,

     1146, 1156, 1153, 1157, 1158, 1159, 1160, 1161, 1163, 1164,
     1165, 1146, 1155, 1167, 1168, 1169, 1170, 1171, 1174, 1175,
     1176, 1177, 1179, 1180, 1181, 1183, 1186, 1188, 1189, 1146,
     1156, 1190, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165,
     1146, 1191, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176,
     1177, 1179, 1180, 1181, 1183, 1186, 1188, 1189, 1192, 1193,
     1190, 1194, 1195, 1197, 1198, 1200, 1200, 1200, 1200,    0,
     1191, 1201, 1201, 1201, 1201, 1202, 1202, 1202, 1202, 1203,
     1203, 1203, 1203, 1205, 1205, 1205, 1205, 1192, 1193, 1208,
     1194, 1195, 1197, 1198, 1204, 1209, 1210, 1204, 1204, 1204,

     1204, 1206, 1206, 1206, 1206, 1207, 1212, 1215, 1216, 1217,
     1204, 1218, 1220, 1222, 1223, 1225, 1226, 1227, 1208, 1207,
     1207, 1207, 1207, 1229, 1209, 1210, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1212, 1215, 1216, 1217, 1204,
     1218, 1220, 1222, 1223, 1225, 1226, 1227, 1239, 1242, 1243,
     1244, 1245, 1229, 1246, 1248, 1230, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1255, 1248, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1265, 1266, 1267, 1239, 1242, 1243, 1244,
     1245, 1269, 1246, 1248, 1270, 1271, 1272, 1273, 1276, 1277,
     1278, 1279, 1281, 1255, 1248, 1257, 1258, 1259, 1260, 1261,

     1262, 1263, 1265, 1266, 1267, 1282, 1283, 1285, 1288, 1290,
     1269, 1291, 1292, 1270, 1271, 1272, 1273, 1276, 1277, 1278,
     1279, 1281, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1302,
     1303, 1304, 1305, 1306, 1282, 1283, 1285, 1288, 1290, 1307,
     1291, 1292, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1319,
     1320, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1302, 1303,
     1304, 1305, 1306, 1321, 1323, 1326, 1327, 1329, 1307, 1330,
     1332, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1319, 1320,
     1334, 1335, 1336, 1339, 1340, 1341, 1344, 1346, 1348, 1349,
     1350, 1351, 1321, 1323, 1326, 1327, 1329, 1353, 1330, 1332,

     1354, 1356, 1357, 1359, 1360, 1361, 1362, 1364, 1365, 1334,
     1335, 1336, 1339, 1340, 1341, 1344, 1346, 1348, 1349, 1350,
     1351, 1366, 1368, 1369, 1371, 1372, 1353, 1373, 1374, 1354,
     1356, 1357, 1359, 1360, 1361, 1362, 1364, 1365, 1375, 1376,
     1377, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1389, 1390,
     1366, 1368, 1369, 1371, 1372, 1391, 1373, 1374, 1393, 1396,
     1397, 1399, 1400, 1402, 1404, 1405, 1406, 1375, 1376, 1377,
     1380, 1381, 1382, 1384, 1385, 1386, 1387, 1389, 1390, 1409,
     1410, 1411, 1414, 1416, 1391, 1418, 1419, 1393, 1396, 1397,
     1399, 1400, 1402, 1404, 1405, 1406, 1420, 1421, 1423, 1424,

     1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1409, 1410,
     1411, 1414, 1416, 1436, 1418, 1419, 1438, 1439, 1441, 1443,
     1443, 1443, 1443, 1444, 1445, 1420, 1421, 1423, 1424, 1426,
     1427, 1429, 1430, 1431, 1432, 1434, 1435, 1446, 1447, 1448,
     1449, 1452, 1436, 1453, 1454, 1438, 1439, 1441, 1456, 1457,
     1458, 1459, 1444, 1445, 1461, 1462, 1463, 1465, 1468, 1469,
     1471, 1472, 1474, 1476, 1477, 1478, 1446, 1447, 1448, 1449,
     1452, 1481, 1453, 1454, 1482, 1483, 1486, 1456, 1457, 1458,
     1459, 1488, 1490, 1461, 1462, 1463, 1465, 1468, 1469, 1471,
     1472, 1474, 1476, 1477, 1478, 1491, 1492, 1493, 1495, 1496,

     1481, 1498, 1499, 1482, 1483, 1486, 1501, 1502, 1503, 1504,
     1488, 1490, 1506, 1507, 1508, 1510, 1511, 1513, 1514, 1514,
     1514, 1514,    0,    0, 1491, 1492, 1493, 1495, 1496, 1518,
     1498, 1499, 1519, 1520, 1521, 1501, 1502, 1503, 1504, 1522,
     1523, 1506, 1507, 1508, 1510, 1511, 1513, 1516, 1516, 1516,
     1516, 1517, 1517, 1517, 1517, 1526, 1527, 1528, 1518, 1530,
     1531, 1519, 1520, 1521, 1532, 1533, 1535, 1536, 1522, 1523,
     1537, 1539, 1542, 1543, 1545, 1546, 1548, 1550, 1551, 1552,
     1555, 1556, 1557, 1560, 1526, 1527, 1528, 1562, 1530, 1531,
     1564, 1565, 1566, 1532, 1533, 1535, 1536, 1567, 1569, 1537,

     1539, 1542, 1543, 1545, 1546, 1548, 1550, 1551, 1552, 1555,
     1556, 1557, 1560, 1570, 1572, 1573, 1562, 1575, 1576, 1564,
     1565, 1566, 1577, 1578, 1580, 1581, 1567, 1569, 1582, 1584,
     1585, 1587, 1588, 1589, 1591, 1592, 1594, 1595, 1597, 1598,
     1600, 1603, 1570, 1572, 1573, 1606, 1575, 1576, 1607, 1608,
     1612, 1577, 1578, 1580, 1581, 1613, 1614, 1582, 1584, 1585,
     1587, 1588, 1589, 1591, 1592, 1594, 1595, 1597, 1598, 1600,
     1603, 1615, 1617, 1620, 1606, 1621, 1623, 1607, 1608, 1612,
     1624, 1625, 1626, 1627, 1613, 1614, 1630, 1631, 1633, 1636,
     1638, 1639, 1641, 1642, 1644, 1645, 1647, 1648, 1650, 1653,

     1615, 1617, 1620, 1656, 1621, 1623, 1657, 1658, 1662, 1624,
     1625, 1626, 1627, 1663, 1664, 1630, 1631, 1633, 1636, 1638,
     1639, 1641, 1642, 1644, 1645, 1647, 1648, 1650, 1653, 1665,
     1667, 1670, 1656, 1671, 1673, 1657, 1658, 1662, 1674, 1675,
     1676, 1677, 1663, 1664, 1680, 1681, 1683, 1686, 1688, 1688,
     1688, 1688, 1689, 1690, 1692, 1693, 1695, 1696, 1665, 1667,
     1670, 1698, 1671, 1673, 1699, 1701, 1704, 1674, 1675, 1676,
     1677, 1707, 1708, 1680, 1681, 1683, 1686, 1709, 1713, 1714,
     1715, 1689, 1690, 1692, 1693, 1695, 1696, 1716, 1718, 1721,
     1698, 1722, 1724, 1699, 1701, 1704, 1725, 1726, 1727, 1728,

     1707, 1708, 1731, 1732, 1734, 1737, 1709, 1713, 1714, 1715,
     1739, 1739, 1739, 1739, 1742, 1743, 1716, 1718, 1721, 1745,
     1722, 1724, 1746, 1748, 1749, 1725, 1726, 1727, 1728, 1751,
     1752, 1731, 1732, 1734, 1737, 1740, 1740, 1740, 1740, 1741,
     1741, 1741, 1741, 1742, 1743, 1754, 1757, 1760, 1745, 1761,
     1762, 1746, 1748, 1749, 1766, 1767, 1768, 1769, 1751, 1752,
     1771, 1774, 1775, 1777, 1778, 1779, 1780, 1781, 1784, 1785,
     1787, 1790, 1792, 1796, 1754, 1757, 1760, 1798, 1761, 1762,
     1799, 1800, 1802, 1766, 1767, 1768, 1769, 1803, 1806, 1771,
     1774, 1775, 1777, 1778, 1779, 1780, 1781, 1784, 1785, 1787,

     1790, 1792, 1796, 1807, 1809, 1810, 1798, 1812, 1813, 1799,
     1800, 1802, 1815, 1816, 1817, 1818, 1803, 1806, 1821, 1825,
     1827, 1828, 1829, 1831, 1832, 1835, 1836, 1838, 1839, 1841,
     1842, 1844, 1807, 1809, 1810, 1845, 1812, 1813, 1846, 1847,
        0, 1815, 1816, 1817, 1818, 1851, 1855, 1821, 1825, 1827,
     1828, 1829, 1831, 1832, 1835, 1836, 1838, 1839, 1841, 1842,
     1844, 1857, 1858, 1859, 1845, 1861, 1862, 1846, 1847, 1850,
     1850, 1850, 1850, 1865, 1851, 1855, 1866, 1868, 1869, 1871,
     1872, 1874, 1875, 1876, 1877, 1880, 1880, 1880, 1880, 1882,
     1857, 1858, 1859, 1886, 1861, 1862, 1881, 1881, 1881, 1881,

     1888, 1889, 1865, 1890, 1892, 1866, 1868, 1869, 1871, 1872,
     1874, 1875, 1876, 1877, 1893, 1896, 1897, 1899, 1882, 1900,
     1902, 1903, 1886, 1905, 1906, 1907, 1908, 1912, 1914, 1888,
     1889, 1913, 1890, 1892, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1923, 1924, 1893, 1896, 1897, 1899, 1913, 1900, 1902,
     1903, 1925, 1905, 1906, 1907, 1908, 1912, 1914, 1927, 1928,
     1913, 1929, 1931, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
     1923, 1924, 1933, 1932, 1935, 1936, 1913, 1937, 1938, 1939,
     1925, 1940, 1941, 1942, 1943, 1944, 1946, 1927, 1928, 1932,
     1929, 1931, 1947, 1948, 1950, 1952, 1954, 1955, 1956, 1957,

     1951, 1933, 1932, 1935, 1936, 1958, 1937, 1938, 1939, 1959,
     1940, 1941, 1942, 1943, 1944, 1946, 1951, 1960, 1932, 1961,
     1962, 1947, 1948, 1950, 1952, 1954, 1955, 1956, 1957, 1951,
     1963, 1965, 1966, 1967, 1958, 1969, 1970, 1971, 1959, 1973,
     1974, 1975, 1976, 1977, 1978, 1951, 1960, 1979, 1961, 1962,
     1980, 1981, 1970, 1982, 1984, 1985, 1986, 1988, 1989, 1963,
     1965, 1966, 1967, 1990, 1969, 1970, 1971, 1991, 1973, 1974,
     1975, 1976, 1977, 1978, 1992, 1995, 1979, 1998, 2001, 1980,
     1981, 1970, 1982, 1984, 1985, 1986, 1988, 1989, 2005, 2006,
     2007, 2008, 1990, 2009, 2012, 2015, 1991, 2018, 2022, 2023,

     2024, 2025, 2026, 1992, 1995, 2029, 1998, 2001, 2032, 2035,
     2039, 2040, 2041, 2042, 2043, 2046, 2049, 2005, 2006, 2007,
     2008, 2052, 2009, 2012, 2015, 2055, 2018, 2022, 2023, 2024,
     2025, 2026, 2056, 2058, 2029, 2059, 2061, 2032, 2035, 2039,
     2040, 2041, 2042, 2043, 2046, 2049, 2063, 2064, 2066, 2067,
     2052, 2069, 2071, 2072, 2055, 2074, 2075, 2077, 2079, 2080,
     2082, 2056, 2058, 2083, 2059, 2061, 2085, 2087, 2088, 2089,
     2091, 2092, 2093, 2094, 2096, 2063, 2064, 2066, 2067, 2097,
     2069, 2071, 2072, 2098, 2074, 2075, 2077, 2079, 2080, 2082,
     2099, 2101, 2083, 2102, 2103, 2085, 2087, 2088, 2089, 2091,

     2092, 2093, 2094, 2096, 2104, 2106, 2108, 2112, 2097, 2116,
     2120, 2123, 2098, 2124, 2125, 2126, 2127, 2128, 2129, 2099,
     2101, 2130, 2102, 2103, 2131, 2132, 2133, 2134, 2135, 2136,
     2137, 2138,    0, 2104, 2106, 2108, 2112,    0, 2116, 2120,
     2123,    0, 2124, 2125, 2126, 2127, 2128, 2129,    0,    0,
     2130,    0,    0, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2144,    0, 2144, 2144, 2145,    0, 2145,    0, 2145,
     2146, 2146, 2146, 2146, 2146, 2146, 2147,    0, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2148,    0,    0, 2148, 2148,
     2148,    0, 2148, 2148, 2149, 2149, 2149, 2149, 2149, 2149,

     2149, 2149, 2149, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2152,    0, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,

     2143, 2143, 2143, 2143, 2143
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2144 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2143 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 145:
case 146:
case 147:
case 148:
case 149:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 154:
case 155:
case 156:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 157:
case 158:
case 159:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 160:
case 161:
case 162:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 163:
case 164:
case 165:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 178:
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 180:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 181:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2144 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2144 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2143);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

