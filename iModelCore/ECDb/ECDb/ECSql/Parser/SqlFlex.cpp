#line 3 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 257
#define YY_END_OF_BUFFER 258
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3604] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      252,  252,  258,  256,  254,  253,  256,  245,  218,  218,
      210,  212,  211,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  243,  218,
      220,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  246,  244,  247,  218,
      218,  227,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  218,  227,  256,
      252,  252,  252,  252,  250,  218,  218,  218,  210,  212,
      211,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  251,  252,  254,  216,    0,
      213,  215,  214,    0,    0,    0,    0,    7,    9,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,  102,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,  138,    0,  141,    0,  144,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  217,  221,    0,  222,  220,    0,  219,  219,
      219,  219,  219,    7,    9,  219,  219,  219,  219,  219,
      219,   21,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,   92,  102,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  127,  219,  219,  219,  219,
      138,  219,  141,  219,  144,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  186,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  242,  232,
      242,  242,  242,  227,  242,  226,  226,  226,  226,  226,
        7,    9,  226,  226,  226,  226,  226,  226,   21,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,   92,  102,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  127,  226,  226,  226,  226,  138,  226,  141,
      226,  144,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  186,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  238,  242,  242,  242,  227,
      242,    0,  248,  252,  252,  216,  252,  213,  215,  214,
      252,  252,  252,  252,    7,    9,  252,  252,  252,  252,
      252,  252,   21,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,   92,  102,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  127,  252,  252,  252,
      252,  138,  252,  141,  252,  144,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  186,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  217,
        0,  255,    0,    2,    0,    4,    5,    0,    8,    0,
        0,   12,    0,    0,    0,    0,   18,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   51,   56,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,  104,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  116,  117,    0,
        0,    0,    0,  125,    0,  128,  129,    0,    0,    0,
        0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  165,    0,    0,    0,

      172,    0,    0,    0,    0,    0,  177,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  225,
      222,    0,    0,  223,  219,    2,  219,    4,    5,  219,
        8,  219,  219,   12,  219,  219,  219,  219,   18,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,   51,   56,  219,  219,  219,  219,
      219,  219,  219,  219,   67,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,   80,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,   96,  219,  104,  105,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  116,
      117,  219,  219,  219,  219,  125,  219,  128,  129,  219,
      219,  219,  219,  219,  219,  219,  140,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  165,  219,
      219,  219,  172,  219,  219,  219,  219,  219,  177,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
        0,  235,  242,  230,  242,  227,    0,  233,  226,    2,
      226,    4,    5,  226,    8,  226,  226,   12,  226,  226,

      226,  226,   18,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,   51,   56,
      226,  226,  226,  226,  226,  226,  226,  226,   67,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,   80,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
       96,  226,  104,  105,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  116,  117,  226,  226,  226,  226,  125,
      226,  128,  129,  226,  226,  226,  226,  226,  226,  226,
      140,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  165,  226,  226,  226,  172,  226,  226,  226,
      226,  226,  177,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,    0,  241,  236,  242,  242,  227,
        0,  239,  248,    0,  248,  252,  252,  252,    2,  252,
        4,    5,  252,    8,  252,  252,   12,  252,  252,  252,
      252,   18,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,   51,   56,  252,
      252,  252,  252,  252,  252,  252,  252,   67,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,   80,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,   96,
      252,  104,  105,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  116,  117,  252,  252,  252,  252,  125,  252,
      128,  129,  252,  252,  252,  252,  252,  252,  252,  140,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  165,  252,  252,  252,  172,  252,  252,  252,  252,
      252,  177,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   20,    0,   22,   23,   24,    0,   28,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   47,    0,    0,    0,    0,    0,    0,   61,    0,
        0,   64,   65,   66,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   85,   86,
        0,    0,    0,   90,    0,    0,    0,    0,    0,    0,
        0,  101,  103,    0,  107,  109,  110,  111,    0,    0,
      114,    0,    0,    0,    0,    0,    0,    0,  126,    0,
        0,  132,    0,    0,    0,    0,  142,    0,    0,    0,
        0,  148,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  160,    0,    0,    0,    0,    0,  166,    0,    0,
        0,    0,    0,  174,    0,    0,    0,    0,  180,  181,
        0,    0,    0,  189,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  202,  203,  204,    0,  206,
      208,  209,    0,  224,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,   20,  219,   22,   23,   24,  219,
       28,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,   47,  219,  219,  219,  219,  219,  219,   61,
      219,  219,   64,   65,   66,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,   85,

       86,  219,  219,  219,   90,  219,  219,  219,  219,  219,
      219,  219,  101,  103,  219,  107,  109,  110,  111,  219,
      219,  114,  219,  219,  219,  219,  219,  219,  219,  126,
      219,  219,  132,  219,  219,  219,  219,  142,  219,  219,
      219,  219,  148,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  160,  219,  219,  219,  219,  219,  166,  219,
      219,  219,  219,  219,  174,  219,  219,  219,  219,  180,
      181,  219,  219,  219,  189,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  202,  203,  204,  219,
      206,  208,  209,  235,  242,    0,  234,  227,  233,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,   20,
      226,   22,   23,   24,  226,   28,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,   47,  226,  226,
      226,  226,  226,  226,   61,  226,  226,   64,   65,   66,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,   85,   86,  226,  226,  226,   90,
      226,  226,  226,  226,  226,  226,  226,  101,  103,  226,
      107,  109,  110,  111,  226,  226,  114,  226,  226,  226,
      226,  226,  226,  226,  126,  226,  226,  132,  226,  226,
      226,  226,  142,  226,  226,  226,  226,  148,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  160,  226,  226,
      226,  226,  226,  166,  226,  226,  226,  226,  226,  174,
      226,  226,  226,  226,  180,  181,  226,  226,  226,  189,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  202,  203,  204,  226,  206,  208,  209,  241,    0,
      240,  242,  227,  239,    0,  248,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,   20,  252,   22,   23,
       24,  252,   28,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,   47,  252,  252,  252,  252,  252,
      252,   61,  252,  252,   64,   65,   66,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,   85,   86,  252,  252,  252,   90,  252,  252,  252,
      252,  252,  252,  252,  101,  103,  252,  107,  109,  110,
      111,  252,  252,  114,  252,  252,  252,  252,  252,  252,
      252,  126,  252,  252,  132,  252,  252,  252,  252,  142,
      252,  252,  252,  252,  148,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  160,  252,  252,  252,  252,  252,
      166,  252,  252,  252,  252,  252,  174,  252,  252,  252,
      252,  180,  181,  252,  252,  252,  189,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  202,  203,

      204,  252,  206,  208,  209,    1,    3,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,   27,    0,
        0,    0,    0,    0,   34,    0,   36,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,    0,    0,    0,   74,   75,   76,
       78,    0,    0,    0,   84,    0,   88,    0,    0,   93,
        0,    0,   97,   98,    0,    0,  106,    0,  112,  113,
      115,    0,  119,    0,    0,  123,  124,    0,  131,    0,
      134,    0,    0,    0,    0,    0,  145,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  159,    0,

        0,    0,  168,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,    0,  191,    0,
        0,    0,  195,  196,  200,    0,    0,    0,  205,    0,
        1,    3,  219,  219,  219,  219,   14,  219,  219,  219,
      219,  219,  219,   27,  219,  219,  219,  219,  219,   34,
      219,   36,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,   68,  219,  219,
      219,  219,   74,   75,   76,   78,  219,  219,  219,   84,
      219,   88,  219,  219,   93,  219,  219,   97,   98,  219,
      219,  106,  219,  112,  113,  115,  219,  119,  219,  219,

      123,  124,  219,  131,  219,  134,  219,  219,  219,  219,
      219,  145,  219,  147,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  159,  219,  219,  219,  168,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  179,  219,  219,
      219,  219,  219,  191,  219,  219,  219,  195,  196,  200,
      219,  219,  219,  205,  219,  228,  234,    1,    3,  226,
      226,  226,  226,   14,  226,  226,  226,  226,  226,  226,
       27,  226,  226,  226,  226,  226,   34,  226,   36,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,   68,  226,  226,  226,  226,   74,

       75,   76,   78,  226,  226,  226,   84,  226,   88,  226,
      226,   93,  226,  226,   97,   98,  226,  226,  106,  226,
      112,  113,  115,  226,  119,  226,  226,  123,  124,  226,
      131,  226,  134,  226,  226,  226,  226,  226,  145,  226,
      147,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      159,  226,  226,  226,  168,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  179,  226,  226,  226,  226,  226,
      191,  226,  226,  226,  195,  196,  200,  226,  226,  226,
      205,  226,  240,  229,    0,  249,    1,    3,  252,  252,
      252,  252,   14,  252,  252,  252,  252,  252,  252,   27,

      252,  252,  252,  252,  252,   34,  252,   36,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,   68,  252,  252,  252,  252,   74,   75,
       76,   78,  252,  252,  252,   84,  252,   88,  252,  252,
       93,  252,  252,   97,   98,  252,  252,  106,  252,  112,
      113,  115,  252,  119,  252,  252,  123,  124,  252,  131,
      252,  134,  252,  252,  252,  252,  252,  145,  252,  147,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  159,
      252,  252,  252,  168,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  179,  252,  252,  252,  252,  252,  191,

      252,  252,  252,  195,  196,  200,  252,  252,  252,  205,
      252,    0,   10,    0,   13,    0,   17,    0,    0,    0,
        0,    0,    0,   31,    0,    0,   35,    0,    0,   46,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       60,    0,   63,   69,   70,    0,   72,    0,    0,    0,
        0,    0,    0,   89,   91,   94,    0,    0,    0,    0,
        0,  118,    0,    0,    0,    0,  133,    0,  136,    0,
      139,  143,  146,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,    0,    0,    0,    0,    0,  169,  170,
      171,    0,    0,  178,    0,    0,    0,    0,    0,    0,

      192,    0,  194,  201,    0,    0,    0,  207,  219,   10,
      219,   13,  219,   17,  219,  219,  219,  219,  219,  219,
       31,  219,  219,   35,  219,  219,   46,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,   60,  219,   63,
       69,   70,  219,   72,  219,  219,  219,  219,  219,  219,
       89,   91,   94,  219,  219,  219,  219,  219,  118,  219,
      219,  219,  219,  133,  219,  136,  219,  139,  143,  146,
      219,  219,  219,  219,  219,  219,  219,  219,  157,  219,
      219,  219,  219,  219,  219,  169,  170,  171,  219,  219,
      178,  219,  219,  219,  219,  219,  219,  192,  219,  194,

      201,  219,  219,  219,  207,  242,  226,   10,  226,   13,
      226,   17,  226,  226,  226,  226,  226,  226,   31,  226,
      226,   35,  226,  226,   46,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,   60,  226,   63,   69,   70,
      226,   72,  226,  226,  226,  226,  226,  226,   89,   91,
       94,  226,  226,  226,  226,  226,  118,  226,  226,  226,
      226,  133,  226,  136,  226,  139,  143,  146,  226,  226,
      226,  226,  226,  226,  226,  226,  157,  226,  226,  226,
      226,  226,  226,  169,  170,  171,  226,  226,  178,  226,
      226,  226,  226,  226,  226,  192,  226,  194,  201,  226,

      226,  226,  207,  242,  249,  249,  252,   10,  252,   13,
      252,   17,  252,  252,  252,  252,  252,  252,   31,  252,
      252,   35,  252,  252,   46,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,   60,  252,   63,   69,   70,
      252,   72,  252,  252,  252,  252,  252,  252,   89,   91,
       94,  252,  252,  252,  252,  252,  118,  252,  252,  252,
      252,  133,  252,  136,  252,  139,  143,  146,  252,  252,
      252,  252,  252,  252,  252,  252,  157,  252,  252,  252,
      252,  252,  252,  169,  170,  171,  252,  252,  178,  252,
      252,  252,  252,  252,  252,  192,  252,  194,  201,  252,

      252,  252,  207,    0,    0,   15,    0,   16,    0,    0,
        0,   30,    0,   33,   44,   37,    0,    0,    0,   52,
        0,    0,    0,   57,   58,   59,    0,   71,   73,    0,
        0,   81,   82,    0,   95,   96,    0,    0,    0,    0,
        0,  122,    0,  135,    0,    0,  150,  151,    0,    0,
        0,  155,    0,  158,    0,  163,   83,    0,    0,    0,
        0,    0,    0,    0,    0,  188,    0,  193,    0,  198,
      199,  219,  219,   15,  219,   16,  219,  219,  219,   30,
      219,   33,   44,   37,  219,  219,  219,   52,  219,  219,
      219,   57,   58,   59,  219,   71,   73,  219,  219,   81,

       82,  219,   95,   96,  219,  219,  219,  219,  219,  122,
      219,  135,  219,  219,  150,  151,  219,  219,  219,  155,
      219,  158,  219,  163,   83,  219,  219,  219,  219,  219,
      219,  219,  219,  188,  219,  193,  219,  198,  199,  231,
      226,  226,   15,  226,   16,  226,  226,  226,   30,  226,
       33,   44,   37,  226,  226,  226,   52,  226,  226,  226,
       57,   58,   59,  226,   71,   73,  226,  226,   81,   82,
      226,   95,   96,  226,  226,  226,  226,  226,  122,  226,
      135,  226,  226,  150,  151,  226,  226,  226,  155,  226,
      158,  226,  163,   83,  226,  226,  226,  226,  226,  226,

      226,  226,  188,  226,  193,  226,  198,  199,  237,  249,
      252,  252,   15,  252,   16,  252,  252,  252,   30,  252,
       33,   44,   37,  252,  252,  252,   52,  252,  252,  252,
       57,   58,   59,  252,   71,   73,  252,  252,   81,   82,
      252,   95,   96,  252,  252,  252,  252,  252,  122,  252,
      135,  252,  252,  150,  151,  252,  252,  252,  155,  252,
      158,  252,  163,   83,  252,  252,  252,  252,  252,  252,
      252,  252,  188,  252,  193,  252,  198,  199,    0,    0,
        0,    0,    0,   29,   32,    0,   48,   49,    0,    0,
        0,    0,   62,    0,    0,    0,    0,  100,    0,    0,

      121,    0,    0,    0,  152,    0,    0,    0,    0,  164,
        0,  173,    0,    0,    0,    0,    0,    0,    0,  219,
      219,  219,  219,  219,   29,   32,  219,   48,   49,  219,
      219,  219,  219,   62,  219,  219,  219,  219,  100,  219,
      219,  121,  219,  219,  219,  152,  219,  219,  219,  219,
      164,  219,  173,  219,  219,  219,  219,  219,  219,  219,
      226,  226,  226,  226,  226,   29,   32,  226,   48,   49,
      226,  226,  226,  226,   62,  226,  226,  226,  226,  100,
      226,  226,  121,  226,  226,  226,  152,  226,  226,  226,
      226,  164,  226,  173,  226,  226,  226,  226,  226,  226,

      226,  252,  252,  252,  252,  252,   29,   32,  252,   48,
       49,  252,  252,  252,  252,   62,  252,  252,  252,  252,
      100,  252,  252,  121,  252,  252,  252,  152,  252,  252,
      252,  252,  164,  252,  173,  252,  252,  252,  252,  252,
      252,  252,    6,    0,    0,   25,    0,    0,    0,    0,
        0,    0,    0,   50,    0,   54,   55,    0,   79,    0,
       99,    0,  120,  130,    0,  149,  153,  154,  156,    0,
        0,    0,  175,  176,  182,  185,  187,  190,  197,    6,
      219,  219,   25,  219,  219,  219,  219,  219,  219,  219,
       50,  219,   54,   55,  219,   79,  219,   99,  219,  120,

      130,  219,  149,  153,  154,  156,  219,  219,  219,  175,
      176,  182,  185,  187,  190,  197,    6,  226,  226,   25,
      226,  226,  226,  226,  226,  226,  226,   50,  226,   54,
       55,  226,   79,  226,   99,  226,  120,  130,  226,  149,
      153,  154,  156,  226,  226,  226,  175,  176,  182,  185,
      187,  190,  197,    6,  252,  252,   25,  252,  252,  252,
      252,  252,  252,  252,   50,  252,   54,   55,  252,   79,
      252,   99,  252,  120,  130,  252,  149,  153,  154,  156,
      252,  252,  252,  175,  176,  182,  185,  187,  190,  197,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,

       53,    0,    0,  108,    0,  161,    0,  167,    0,    0,
      219,   19,  219,  219,  219,  219,  219,  219,  219,  219,
       53,  219,  219,  108,  219,  161,  219,  167,  219,  219,
      226,   19,  226,  226,  226,  226,  226,  226,  226,  226,
       53,  226,  226,  108,  226,  161,  226,  167,  226,  226,
      252,   19,  252,  252,  252,  252,  252,  252,  252,  252,
       53,  252,  252,  108,  252,  161,  252,  167,  252,  252,
        0,   26,    0,    0,    0,    0,    0,    0,    0,   77,
        0,    0,  162,    0,    0,  219,   26,  219,  219,  219,
      219,  219,  219,  219,   77,  219,  219,  162,  219,  219,

      226,   26,  226,  226,  226,  226,  226,  226,  226,   77,
      226,  226,  162,  226,  226,  252,   26,  252,  252,  252,
      252,  252,  252,  252,   77,  252,  252,  162,  252,  252,
        0,    0,   38,    0,   41,   42,    0,    0,   87,  137,
      183,    0,  219,  219,   38,  219,   41,   42,  219,  219,
       87,  137,  183,  219,  226,  226,   38,  226,   41,   42,
      226,  226,   87,  137,  183,  226,  252,  252,   38,  252,
       41,   42,  252,  252,   87,  137,  183,  252,   11,    0,
        0,    0,    0,  184,   11,  219,  219,  219,  219,  184,
       11,  226,  226,  226,  226,  184,   11,  252,  252,  252,

      252,  184,    0,    0,   43,    0,  219,  219,   43,  219,
      226,  226,   43,  226,  252,  252,   43,  252,   39,    0,
        0,   39,  219,  219,   39,  226,  226,   39,  252,  252,
        0,    0,  219,  219,  226,  226,  252,  252,    0,   45,
      219,   45,  226,   45,  252,   45,    0,  219,  226,  252,
        0,  219,  226,  252,    0,  219,  226,  252,    0,  219,
      226,  252,    0,  219,  226,  252,    0,  219,  226,  252,
        0,  219,  226,  252,    0,  219,  226,  252,    0,  219,
      226,  252,    0,  219,  226,  252,    0,  219,  226,  252,
        0,  219,  226,  252,    0,  219,  226,  252,   40,   40,

       40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   10,   16,   16,   17,
       18,   19,   16,   20,   16,   16,   16,   21,   10,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   10,   81,   10,    1,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    3,    1,
        5,    1,    4,    1,    4,    6,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    8
    } ;

static yyconst flex_int16_t yy_base[3612] =
    {   0,
        0,    0,   82,    0,  164,    0,  234,  242,  250,  258,
      278,    0,  973, 7786,  359, 7786,  947, 7786, 7786,  949,
      341, 7786,  913,  335,  354,  350,  398,  400,  453,  343,
      345,  404,  328,  339,  454,  395,  475,  524,  513,  324,
      455,  563,  571,  401,  472,  583,  347,  851, 7786,  556,
      638,  667,  630,  682,  719,  721,  774,  432,  471,  563,
      349,  397,  661,  712,  779,  828,  772,  384,  776,  832,
      879,  632,  503,  881,    0,  401, 7786, 7786, 7786,    0,
      631,  939,  968,  931,  983, 1020, 1022, 1075,  635,  648,
      819,  394,  472,  962,  884, 1080, 1129, 1027,  461, 1077,

     1133, 1180,  722,  730, 1089,    0,  503,  959, 1209,  665,
        0,  450,    0,  907, 7786,    0,  909, 7786,  518,    0,
      893, 1238, 1181, 1233, 1231, 1281, 1334,  836,  891, 1219,
      508,  524, 1289, 1298, 1356, 1405, 1300,  514, 1336, 1409,
     1456,  894,  787, 1394,  576, 7786,  828,  541, 7786,  883,
     7786, 7786, 7786,  565,  900,  943,  569,  635,  681,  681,
      740, 1347,  988,  763,  783, 7786,  784,  838,  821, 1448,
     1017,  877,  958, 1460,  951,  960,  999, 1023, 1020, 1036,
     1056, 1055, 1464, 1050, 1059, 1081, 1119, 1344, 1122, 1127,
     1120, 1127, 1122, 1134, 1142, 1277, 7786, 1149, 1137, 1397,

     1207, 1181, 1474, 1215, 1233, 1288, 1289, 1468, 1458, 1340,
     1506, 1506, 1330, 1338, 1404, 1409, 1406, 1450, 1471, 1475,
     1467, 1502, 1502, 1512, 1518, 1520, 1523, 1511, 1536, 1521,
     1518, 1524, 1560, 1534, 1525, 1564, 1566, 1538, 1540, 1568,
     7786, 1574, 1587, 1572, 1568, 1573, 1573, 1581, 1585, 1573,
     1581, 1599, 7786, 1639, 1648, 1654, 1660, 1669,    0, 1618,
     1654, 1653, 1650, 1666, 1655, 1651, 1665, 1669, 1663, 1664,
     1665,    0, 1662, 1686, 1667, 1701, 1712, 1672, 1701, 1722,
     1704, 1703, 1714, 1727, 1713, 1729, 1732, 1731, 1757, 1726,
     1719, 1722, 1730, 1760, 1732, 1759, 1753, 1760, 1757, 1759,

     1768, 1771,    0, 1774, 1759, 1779, 1786, 1783, 1814, 1769,
     1789, 1791, 1798, 1821, 1807, 1815, 1831, 1829, 1814, 1816,
     1837, 1840, 1833, 1828, 1845, 1842, 1831, 1847, 1836, 1866,
     1877, 1853, 1860, 1862, 1887, 1880, 1877, 1883, 1907, 1893,
     1882, 1895, 1895, 1897, 1896, 1927,    0, 1932, 1934, 1930,
     1893, 1932, 1942, 1944, 1946, 1932, 1936, 1954,    0, 1994,
     2003,  909, 2009, 2017, 2026,    0, 1944, 2004, 2002, 2005,
     2022, 2011, 2009, 2023, 2026, 2017, 2019, 2021,    0, 2019,
     2039, 2024, 2069, 2042, 2024, 2052, 2081, 2030, 2029, 2059,
     2077, 2066, 2084, 2086, 2086, 2095, 2080, 2074, 2077, 2081,

     2114, 2087, 2093, 2087, 2093, 2106, 2109, 2124, 2126,    0,
     2130, 2116, 2135, 2142, 2136, 2170, 2126, 2137, 2138, 2136,
     2150, 2142, 2140, 2188, 2186, 2176, 2168, 2184, 2196, 2189,
     2183, 2200, 2197, 2186, 2202, 2190, 2201, 2209, 2207, 2210,
     2198, 2244, 2216, 2219, 2236, 2245, 2245, 2238, 2254, 2254,
     2252, 2253, 2256,    0, 2261, 2291, 2272, 2259, 2291, 2273,
     2276, 2284, 2284, 2288, 2307, 2321, 2352, 2357,  966, 2366,
     2381, 2372, 2390,    0,  617,    0, 2408,    0,    0,    0,
     2304, 2368, 2373, 2360, 2387, 2378, 2374, 2388, 2390, 2385,
     2386, 2387,    0, 2384, 2410, 2397, 2435, 2428, 2395, 2396,

     2448, 2410, 2416, 2431, 2449, 2434, 2451, 2454, 2454, 2470,
     2451, 2444, 2450, 2454, 2482, 2455, 2475, 2471, 2480, 2479,
     2483, 2491, 2492,    0, 2498, 2484, 2503, 2512, 2504, 2534,
     2490, 2511, 2512, 2507, 2537, 2529, 2538, 2551, 2550, 2554,
     2545, 2561, 2564, 2557, 2550, 2567, 2564, 2553, 2570, 2558,
     2576, 2598, 2577, 2579, 2569, 2609, 2599, 2599, 2608, 2614,
     2617, 2606, 2619, 2625, 2619, 2618, 2620,    0, 2652, 2663,
     2625, 2621, 2657, 2659, 2663, 2666, 2656, 2659, 2677,    0,
      880, 7786, 2674, 7786, 2675, 7786, 7786, 2680, 7786, 2670,
     2676, 7786, 2670, 2677, 2664, 2687,  829, 2687, 2679, 2691,

     2674, 2692, 2697, 2707, 2710, 2710, 2707, 2712, 2729, 2712,
     2728, 2728, 2720, 2727, 2736, 2733, 2738, 2722, 2741, 2728,
     2737, 2744, 7786, 2749, 2735, 2772, 2735, 2739, 2750, 2777,
     2762, 2784, 2775, 2784, 2774, 2777, 2779, 2787, 2772, 2785,
     2777, 2781, 2792, 2795, 2835, 2788, 7786, 7786, 2796, 2784,
     2801, 2788, 2807, 2818, 2834, 2831, 2834, 7786, 2821, 2823,
     2836, 2845, 2832, 7786, 2828, 7786, 7786,  828, 2837, 2839,
     2847, 2848, 2849, 2836, 7786, 2833, 2850, 2855, 2856, 2857,
     2845, 2845, 2852, 2861, 2870, 2872, 2890, 2884, 2879, 2891,
     2888, 2896, 2887, 2899, 2897, 2894, 2888, 2903, 2894, 2905,

     7786, 2899, 2907, 2893, 2906, 2898, 7786, 2906, 2905, 2901,
     2916, 2909, 2917, 2923, 2916, 2928, 2937, 2953, 2950, 2942,
     2937, 2961, 2936, 2950, 2948, 2957, 2956, 2950, 2984, 3007,
     3012, 3027, 3017, 3032, 3008,    0, 3023,    0,    0, 3028,
        0, 3017, 3023,    0, 3017, 3024, 3011, 3034,  823, 3034,
     3025, 3033, 3021, 3037, 3039, 3031, 3032, 3032, 3027, 3034,
     3049, 3032, 3067, 3047, 3040, 3078, 3074, 3083, 3086, 3071,
     3090, 3077, 3086, 3090,    0, 3095, 3079, 3093, 3080, 3083,
     3083, 3100, 3087, 3106, 3096, 3106, 3095, 3097, 3100, 3108,
     3112, 3134, 3126, 3130, 3141, 3143, 3154, 3136,    0,    0,

     3144, 3132, 3149, 3134, 3150, 3147, 3156, 3153, 3156,    0,
     3143, 3145, 3157, 3166, 3153,    0, 3150,    0,    0,  777,
     3159, 3164, 3182, 3186, 3196, 3183,    0, 3178, 3195, 3201,
     3203, 3204, 3192, 3191, 3198, 3204, 3211, 3202, 3214, 3206,
     3201, 3214, 3210, 3218, 3208, 3220, 3218, 3215, 3217, 3223,
     3214, 3229,    0, 3237, 3254, 3240, 3252, 3243,    0, 3252,
     3252, 3248, 3263, 3255, 3263, 3266, 3257, 3258, 3260, 3275,
     3272, 3265, 3259, 3282, 3258, 3271, 3269, 3278, 3281, 3276,
     3333, 3338, 3346, 3351, 3360, 3369, 3374, 3384, 3314,    0,
     3353,    0,    0, 3369,    0, 3358, 3364,    0, 3358, 3371,

     3358, 3381,  773, 3381, 3372, 3384, 3368, 3385, 3388, 3379,
     3380, 3380, 3374, 3381, 3396, 3379, 3410, 3400, 3392, 3428,
     3415, 3425, 3428, 3412, 3436, 3423, 3433, 3437,    0, 3443,
     3428, 3442, 3429, 3431, 3431, 3448, 3433, 3452, 3443, 3451,
     3448, 3450, 3452, 3460, 3451, 3477, 3469, 3473, 3484, 3485,
     3505, 3481,    0,    0, 3489, 3477, 3495, 3482, 3499, 3497,
     3506, 3501, 3504,    0, 3490, 3492, 3521, 3513, 3506,    0,
     3502,    0,    0,  769, 3511, 3515, 3524, 3527, 3539, 3526,
        0, 3521, 3538, 3543, 3548, 3549, 3537, 3537, 3546, 3553,
     3560, 3551, 3562, 3554, 3549, 3561, 3557, 3565, 3556, 3573,

     3571, 3568, 3562, 3580, 3572, 3583,    0, 3588, 3597, 3583,
     3595, 3586,    0, 3594, 3597, 3593, 3608, 3601, 3611, 3614,
     3605, 3606, 3608, 3623, 3620, 3612, 3606, 3634, 3605, 3627,
     3625, 3637, 3635, 3640, 3669, 3685, 3690, 3705, 3710, 3718,
     3723, 3734, 3740, 3745, 3751, 3769,    0, 3686,    0, 3688,
        0,    0, 3740,    0, 3736, 3743,    0, 3739, 3746, 3733,
     3756,  743, 3756, 3747, 3755, 3743, 3759, 3761, 3752, 3754,
     3755, 3751, 3758, 3773, 3757, 3790, 3772, 3767, 3803, 3797,
     3794, 3804, 3793, 3812, 3800, 3809, 3813,    0, 3818, 3802,
     3817, 3802, 3806, 3806, 3823, 3811, 3830, 3820, 3829, 3819,

     3822, 3827, 3835, 3835, 3848, 3847, 3851, 3862, 3867, 3878,
     3856,    0,    0, 3867, 3855, 3872, 3857, 3873, 3870, 3879,
     3875, 3879,    0, 3867, 3869, 3881, 3890, 3877,    0, 3877,
        0,    0,  733, 3886, 3888, 3905, 3909, 3910, 3904,    0,
     3899, 3916, 3923, 3925, 3927, 3915, 3914, 3921, 3927, 3934,
     3925, 3937, 3929, 3924, 3938, 3934, 3942, 3932, 3944, 3942,
     3939, 3953, 3950, 3941, 3953,    0, 3948, 3963, 3953, 3973,
     3964,    0, 3974, 3974, 3971, 3986, 3978, 3986, 3989, 3980,
     3981, 3985, 3999, 3998, 3990, 3984, 4005, 3983, 3998, 3996,
     4005, 4005, 4000, 4008, 4013, 4015, 4032, 4029, 4028, 4034,

     4044, 4032, 4039, 7786, 4047, 7786, 7786, 4055, 4042, 7786,
     4052, 4057, 4052, 4053, 4058, 4044, 4045, 4047, 4066, 4063,
     4056, 4084, 4071, 4068, 4063, 4083, 4068, 4078, 7786, 4090,
     4090, 7786, 7786, 7786, 4091, 4083, 4093, 4089, 4091, 4111,
     4109, 4107, 4096, 4099, 4105, 4112, 4121, 4119, 7786, 7786,
     4121, 4109, 4112, 7786, 4111, 4112, 4114, 4129,  767,  764,
     4139, 7786, 7786, 4137,  727, 7786, 7786, 7786, 4127, 4144,
     7786, 4142, 4142, 4156, 4150, 4148, 4149, 4166, 7786, 4147,
     4165, 4163, 4155, 4171, 4157, 4173, 7786, 4164, 4162, 4163,
     4165, 7786, 4175, 4167, 4168, 4195, 4189, 4187, 4196, 4194,

     4210, 7786, 4200, 4215, 4204, 4203, 4222, 7786, 4211, 4213,
     4213, 4225, 4218, 7786, 4226, 4218, 4215, 4231, 7786, 7786,
     4218, 4219, 4232, 7786, 4220, 4228, 4224, 4231, 4228, 4232,
     4251, 4257, 4254, 4264, 4264, 7786, 7786, 7786, 4271, 4269,
     7786, 7786, 4289, 4302, 4267, 4268, 4263, 4280, 4275, 4280,
     4285, 4295, 4285, 4292,    0, 4301,    0,    0, 4308, 4297,
        0, 4305, 4310, 4303, 4304, 4311, 4300, 4301, 4303, 4322,
     4319, 4310, 4326, 4325, 4325, 4321, 4342, 4323, 4327,    0,
     4347, 4345,    0,    0,    0, 4342, 4336, 4346, 4343, 4345,
     4365, 4362, 4360, 4349, 4350, 4356, 4365, 4377, 4375,    0,

        0, 4377, 4365, 4368,    0, 4365, 4366, 4370, 4384,  762,
      758, 4397,    0,    0, 4387,  720,    0,    0,    0, 4381,
     4390,    0, 4387, 4386, 4406, 4401, 4401, 4402, 4420,    0,
     4401, 4419, 4417, 4407, 4424, 4408, 4424,    0, 4417, 4419,
     4420, 4421,    0, 4431, 4421, 4422, 4441, 4446, 4454, 4451,
     4442, 4458,    0, 4446, 4467, 4455, 4454, 4475,    0, 4464,
     4467, 4467, 4479, 4471,    0, 4479, 4471, 4466, 4482,    0,
        0, 4475, 4471, 4488,    0, 4475, 4484, 4478, 4485, 4484,
     4487, 4501, 4512, 4509, 4512, 4512,    0,    0,    0, 4517,
     4521,    0,    0, 4547, 4561, 4569, 4574, 4580, 4585, 4539,

     4540, 4556, 4573, 4568, 4566, 4574, 4584, 4572, 4579,    0,
     4587,    0,    0, 4594, 4583,    0, 4591, 4596, 4589, 4590,
     4595, 4581, 4582, 4584, 4603, 4600, 4591, 4632, 4607, 4603,
     4602, 4615, 4618, 4620,    0, 4632, 4630,    0,    0,    0,
     4627, 4621, 4631, 4627, 4629, 4649, 4646, 4645, 4635, 4636,
     4642, 4649, 4658, 4656,    0,    0, 4658, 4646, 4649,    0,
     4646, 4648, 4649, 4668,  754,  750, 4687,    0,    0, 4669,
      683,    0,    0,    0, 4677, 4686,    0, 4681, 4680, 4693,
     4689, 4688, 4689, 4706,    0, 4687, 4705, 4702, 4694, 4710,
     4694, 4710,    0, 4701, 4699, 4700, 4701,    0, 4711, 4702,

     4704, 4747, 4724, 4726, 4723, 4735, 4752,    0, 4740, 4754,
     4744, 4743, 4762,    0, 4751, 4753, 4753, 4765, 4757,    0,
     4765, 4757, 4752, 4768,    0,    0, 4755, 4756, 4769,    0,
     4757, 4765, 4759, 4767, 4763, 4771, 4783, 4805, 4804, 4806,
     4806,    0,    0,    0, 4811, 4808,    0,    0, 4829, 4834,
     4839, 4856, 4864, 4869, 4879, 4886, 4819, 4820, 4828, 4845,
     4853, 4857, 4862, 4879, 4867, 4874,    0, 4882,    0,    0,
     4889, 4878,    0, 4886, 4891, 4884, 4885, 4890, 4876, 4879,
     4881, 4900, 4897, 4888, 4922, 4905, 4901, 4895, 4908, 4889,
     4891,    0, 4903, 4915,    0,    0,    0, 4917, 4909, 4927,

     4924, 4926, 4946, 4943, 4941, 4930, 4931, 4937, 4944, 4953,
     4953,    0,    0, 4955, 4943, 4946,    0, 4943, 4946, 4947,
     4961,  717,  710, 4978,    0,    0, 4963,  670,    0,    0,
        0, 4949, 4958,    0, 4966, 4971, 4984, 4985, 4983, 4984,
     5001,    0, 4982, 5000, 4997, 4989, 5005, 4989, 5005,    0,
     4996, 4994, 4997, 4999,    0, 5009, 4999, 5002, 5018, 5023,
     5021, 5019, 5022, 5038,    0, 5031, 5045, 5036, 5038, 5057,
        0, 5046, 5048, 5048, 5060, 5052,    0, 5060, 5052, 5047,
     5063,    0,    0, 5051, 5050, 5067,    0, 5054, 5062, 5056,
     5065, 5061, 5064, 5077, 5080, 5077, 5092, 5092,    0,    0,

        0, 5102, 5099,    0,    0, 7786, 7786,  665, 5109, 5098,
     5112, 7786, 5113, 5094, 5115, 5120, 5119, 5111, 7786, 5105,
     5105, 5106, 5113, 5110, 7786, 5126, 7786, 5112, 5119, 5116,
     5126, 5129, 5138, 5127, 5152, 5141, 5125, 5132, 5153, 5145,
     5161, 5165, 7786, 5154, 5172, 5159, 5176, 7786, 7786,  633,
     7786, 5157, 5174, 5164, 7786, 5180, 7786, 5177, 5180, 7786,
     5166, 5188, 7786, 7786, 5185, 5174, 7786, 5169, 7786, 7786,
     7786, 5187, 5183, 5184, 5199, 7786, 7786, 5200, 7786, 5196,
     7786, 5207, 5197,  626, 5203, 5210, 7786, 5209, 7786, 5212,
      529, 5224, 5230, 5216, 5218, 5233, 5235, 5234, 7786, 5235,

     5238, 5223, 7786, 5242, 5223, 5246, 5244, 5229, 5241, 5238,
     5247, 5237, 7786, 5236, 5257, 5247, 5255, 5260, 7786, 5270,
     5258, 5277, 7786, 7786, 5267, 5276, 5290, 5278, 7786, 5279,
        0,    0,  619, 5291, 5277, 5291,    0, 5292, 5273, 5294,
     5299, 5298, 5290,    0, 5286, 5286, 5287, 5294, 5291,    0,
     5307,    0, 5293, 5300, 5298, 5308, 5309, 5331, 5320, 5326,
     5339, 5326, 5336, 5345, 5338, 5348, 5349,    0, 5335, 5352,
     5338, 5355,    0,    0,  616,    0, 5336, 5353, 5345,    0,
     5361,    0, 5358, 5361,    0, 5347, 5369,    0,    0, 5366,
     5353,    0, 5352,    0,    0,    0, 5371, 5376, 5377, 5396,

        0,    0, 5397,    0, 5396,    0, 5397, 5387,  613, 5388,
     5395,    0, 5391,    0, 5391,  561, 5403, 5409, 5395, 5397,
     5412, 5414, 5413,    0, 5416, 5419, 5404,    0, 5423, 5404,
     5427, 5425, 5410, 5423, 5420, 5427, 5430,    0, 5429, 5454,
     5444, 5455, 5450,    0, 5460, 5443, 5462,    0,    0, 5449,
     5455, 5469, 5457,    0, 5458,  612, 5488,    0,    0,  609,
     5470, 5456, 5470,    0, 5471, 5461, 5482, 5487, 5487, 5479,
        0, 5473, 5486, 5487, 5494, 5491,    0, 5505,    0, 5491,
     5498, 5495, 5505, 5509, 5521, 5510, 5521, 5523, 5507, 5514,
     5522, 5514, 5524, 5525,    0, 5511, 5528, 5514, 5542,    0,

        0,  606,    0, 5525, 5542, 5532,    0, 5561,    0, 5558,
     5561,    0, 5547, 5567,    0,    0, 5564, 5561,    0, 5548,
        0,    0,    0, 5566, 5558, 5562, 5580,    0,    0, 5581,
        0, 5578,    0, 5576, 5566,  591, 5567, 5574,    0, 5570,
        0, 5570,  611, 5582, 5588, 5583, 5585, 5600, 5603, 5602,
        0, 5603, 5619, 5604,    0, 5623, 5604, 5625, 5623, 5608,
     5620, 5617, 5627, 5620,    0, 5619, 5639, 5629, 5637, 5629,
        0, 5639, 5622, 5641,    0,    0, 5628, 5634, 5648, 5636,
        0, 5646, 5689,  662, 5699, 5704,    0,    0,  565, 5682,
     5668, 5682,    0, 5683, 5675, 5696, 5701, 5700, 5692,    0,

     5686, 5686, 5687, 5694, 5691,    0, 5705,    0, 5691, 5698,
     5695, 5709, 5710, 5719, 5708, 5730, 5721, 5705, 5713, 5722,
     5714, 5739, 5740,    0, 5726, 5754, 5740, 5757,    0,    0,
      534,    0, 5738, 5755, 5745,    0, 5761,    0, 5758, 5761,
        0, 5747, 5767,    0,    0, 5764, 5757,    0, 5748,    0,
        0,    0, 5766, 5763, 5764, 5779,    0,    0, 5780,    0,
     5777,    0, 5776, 5766,  511, 5781, 5788,    0, 5784,    0,
     5784,  714, 5802, 5809, 5797, 5799, 5814, 5816, 5815,    0,
     5816, 5819, 5804,    0, 5823, 5804, 5825, 5823, 5808, 5820,
     5821, 5828, 5818,    0, 5817, 5837, 5827, 5836, 5829,    0,

     5839, 5836, 5855,    0,    0, 5842, 5848, 5868, 5857,    0,
     5860, 5874, 7786, 5867, 7786, 5863, 7786, 5864, 5865, 5860,
     5876, 5879, 5878, 7786, 5863, 5865, 7786, 5881, 5867, 7786,
     5886, 5880, 5882, 5890, 5881, 5892, 5894, 5889, 5897, 5897,
     7786, 5915, 7786, 7786, 7786, 5914, 7786, 5900, 5905, 5920,
     5918, 5929, 5922, 7786, 7786, 7786, 5931, 5918, 5932, 5937,
     5938, 7786, 5939, 5940, 5930, 5931, 7786, 5941, 7786, 5933,
     7786, 7786, 7786, 5941, 5947, 5948, 5938, 5945, 5946, 5932,
     5938, 7786, 5942, 5961, 5956, 5972, 5975, 5972, 7786, 7786,
     7786, 5973, 5985, 7786, 5982, 5991, 5981, 5993, 5977, 5992,

     7786, 5983, 7786, 7786, 5997, 5981, 5993, 7786, 6000,    0,
     5993,    0, 5989,    0, 5994, 5995, 5990, 6006, 6009, 6008,
        0, 5994, 5997,    0, 6013, 6013,    0, 6028, 6022, 6024,
     6038, 6030, 6043, 6044, 6038, 6046, 6032,    0, 6050,    0,
        0,    0, 6049,    0, 6035, 6034, 6048, 6044, 6055, 6048,
        0,    0,    0, 6057, 6048, 6062, 6067, 6068,    0, 6069,
     6070, 6061, 6063,    0, 6073,    0, 6079,    0,    0,    0,
     6083, 6089, 6090, 6086, 6094, 6097, 6082, 6087,    0, 6091,
     6096, 6091, 6107, 6110, 6101,    0,    0,    0, 6101, 6111,
        0, 6108, 6117, 6107, 6123, 6107, 6122,    0, 6113,    0,

        0, 6127, 6111, 6124,    0, 6170, 6148,    0, 6141,    0,
     6137,    0, 6138, 6145, 6146, 6162, 6165, 6164,    0, 6149,
     6151,    0, 6167, 6153,    0, 6168, 6162, 6164, 6172, 6167,
     6178, 6179, 6173, 6181, 6167,    0, 6186,    0,    0,    0,
     6185,    0, 6171, 6170, 6184, 6180, 6203, 6196,    0,    0,
        0, 6205, 6192, 6212, 6223, 6224,    0, 6225, 6226, 6216,
     6217,    0, 6227,    0, 6219,    0,    0,    0, 6223, 6229,
     6230, 6220, 6231, 6232, 6217, 6222,    0, 6226, 6231, 6227,
     6243, 6246, 6237,    0,    0,    0, 6237, 6247,    0, 6256,
     6265, 6255, 6267, 6257, 6278,    0, 6269,    0,    0, 6283,

     6267, 6279,    0, 6296, 6307, 6314, 6291,    0, 6284,    0,
     6289,    0, 6296, 6302, 6297, 6313, 6316, 6315,    0, 6302,
     6304,    0, 6320, 6306,    0, 6321, 6315, 6317, 6325, 6316,
     6328, 6329, 6323, 6331, 6317,    0, 6335,    0,    0,    0,
     6335,    0, 6321, 6320, 6334, 6330, 6346, 6339,    0,    0,
        0, 6357, 6350, 6369, 6374, 6375,    0, 6376, 6377, 6369,
     6370,    0, 6380,    0, 6372,    0,    0,    0, 6376, 6382,
     6383, 6373, 6380, 6382, 6367, 6372,    0, 6376, 6381, 6376,
     6393, 6396, 6387,    0,    0,    0, 6387, 6397,    0, 6399,
     6408, 6407, 6425, 6414, 6429,    0, 6420,    0,    0, 6434,

     6418, 6432,    0, 6433, 6415, 7786, 6435, 7786, 6438, 6430,
     6440, 7786, 6441, 7786, 7786,  504, 6441, 6444, 6429, 7786,
     6437, 6447, 6452, 7786, 7786, 7786, 6434, 7786, 7786, 6455,
     6443, 7786, 7786, 6457, 7786, 7786, 6456, 6448, 6454, 6454,
     6465, 7786, 6463, 7786, 6485, 6476, 7786, 7786, 6478, 6479,
     6479, 7786, 6479, 7786, 6495, 7786, 7786, 6488, 6498, 6481,
     6488, 6489, 6491, 6484, 6487, 7786, 6503, 7786, 6491, 7786,
     7786, 6503, 6485,    0, 6505,    0, 6509, 6501, 6511,    0,
     6512,    0,    0,  485, 6512, 6519, 6504,    0, 6521, 6537,
     6547,    0,    0,    0, 6529,    0,    0, 6549, 6537,    0,

        0, 6551,    0,    0, 6552, 6544, 6545, 6545, 6547,    0,
     6539,    0, 6556, 6547,    0,    0, 6549, 6551, 6551,    0,
     6549,    0, 6565,    0,    0, 6558, 6568, 6552, 6559, 6560,
     6562, 6555, 6562,    0, 6578,    0, 6575,    0,    0, 6615,
     6593, 6587,    0, 6607,    0, 6610, 6602, 6612,    0, 6613,
        0,    0,  447, 6613, 6615, 6600,    0, 6609, 6619, 6624,
        0,    0,    0, 6606,    0,    0, 6626, 6614,    0,    0,
     6629,    0,    0, 6628, 6620, 6621, 6621, 6623,    0, 6615,
        0, 6632, 6623,    0,    0, 6625, 6626, 6626,    0, 6633,
        0, 6655,    0,    0, 6660, 6670, 6653, 6660, 6661, 6663,

     6656, 6658,    0, 6674,    0, 6663,    0,    0, 6691, 6697,
     6686, 6668,    0, 6688,    0, 6691, 6683, 6693,    0, 6694,
        0,    0,  439, 6703, 6706, 6691,    0, 6699, 6709, 6714,
        0,    0,    0, 6696,    0,    0, 6716, 6704,    0,    0,
     6718,    0,    0, 6717, 6709, 6717, 6717, 6719,    0, 6711,
        0, 6728, 6719,    0,    0, 6721, 6722, 6722,    0, 6721,
        0, 6748,    0,    0, 6741, 6751, 6734, 6741, 6742, 6744,
     6746, 6749,    0, 6765,    0, 6753,    0,    0, 6765, 6772,
     6754, 6757, 6769, 7786, 7786, 6774, 7786, 7786, 6774, 6767,
     6777, 6771, 7786, 6779, 6788, 6778, 6789, 7786, 6789, 6806,

     7786, 6807, 6799, 6800, 7786, 6808, 6811, 6822, 6823, 7786,
     6824, 7786, 6810, 6824, 6817, 6829, 6830, 6832, 6812, 6838,
     6845, 6827, 6830, 6842,    0,    0, 6864,    0,    0, 6845,
     6832, 6858, 6852,    0, 6859, 6865, 6854, 6865,    0, 6865,
     6882,    0, 6883, 6875, 6876,    0, 6884, 6878, 6888, 6898,
        0, 6889,    0, 6875, 6897, 6889, 6901, 6903, 6906, 6900,
     6919, 6926, 6908, 6911, 6923,    0,    0, 6944,    0,    0,
     6933, 6920, 6930, 6924,    0, 6931, 6937, 6926, 6926,    0,
     6928, 6945,    0, 6946, 6938, 6939,    0, 6954, 6951, 6961,
     6978,    0, 6963,    0, 6964, 6978, 6970, 6983, 6991, 6994,

     6974, 6993, 7000, 6982, 6985, 6997,    0,    0, 7002,    0,
        0, 7002, 6988, 6998, 6992,    0, 6999, 7012, 7004, 7004,
        0, 7005, 7036,    0, 7037, 7029, 7030,    0, 7038, 7032,
     7049, 7051,    0, 7052,    0, 7038, 7052, 7045, 7057, 7058,
     7060, 7040, 7786, 7046, 7059,  433, 7048, 7068, 7075, 7076,
     7063, 7076, 7072, 7786, 7074, 7786, 7786, 7063, 7786, 7080,
     7786, 7095, 7786, 7786, 7094, 7786, 7786, 7786, 7786, 7083,
     7089, 7086, 7786, 7786, 7111, 7786, 7786, 7786, 7786,    0,
     7094, 7108,  429, 7097, 7117, 7118, 7119, 7106, 7119, 7115,
        0, 7117,    0,    0, 7105,    0, 7108,    0, 7129,    0,

        0, 7128,    0,    0,    0,    0, 7117, 7123, 7120,    0,
        0, 7138,    0,    0,    0,    0,    0, 7120, 7149,  398,
     7138, 7158, 7169, 7159, 7146, 7159, 7163,    0, 7165,    0,
        0, 7154,    0, 7157,    0, 7172,    0,    0, 7171,    0,
        0,    0,    0, 7160, 7166, 7163,    0,    0, 7181,    0,
        0,    0,    0,    0, 7163, 7176,  393, 7172, 7192, 7193,
     7194, 7181, 7194, 7191,    0, 7207,    0,    0, 7195,    0,
     7198,    0, 7213,    0,    0, 7212,    0,    0,    0,    0,
     7201, 7214, 7212,    0,    0, 7230,    0,    0,    0,    0,
     7223, 7786, 7225, 7215, 7216, 7231, 7218, 7227, 7232, 7228,

     7786, 7237, 7234, 7786, 7230, 7786, 7244, 7786, 7248, 7244,
     7245,    0, 7247, 7236, 7238, 7267, 7254, 7263, 7268, 7264,
        0, 7273, 7277,    0, 7268,    0, 7282,    0, 7286, 7282,
     7283,    0, 7285, 7274, 7275, 7290, 7277, 7286, 7291, 7287,
        0, 7296, 7299,    0, 7289,    0, 7303,    0, 7307, 7303,
     7304,    0, 7306, 7296, 7311, 7326, 7313, 7322, 7327, 7323,
        0, 7339, 7337,    0, 7327,    0, 7341,    0, 7345, 7341,
     7336, 7786, 7351, 7348, 7353, 7347, 7351, 7352, 7353, 7786,
     7355, 7358, 7786, 7363, 7362, 7354,    0, 7369, 7366, 7371,
     7366, 7384, 7385, 7386,    0, 7388, 7385,    0, 7390, 7396,

     7389,    0, 7404, 7401, 7406, 7400, 7404, 7405, 7406,    0,
     7408, 7405,    0, 7410, 7409, 7401,    0, 7416, 7419, 7424,
     7418, 7422, 7423, 7424,    0, 7426, 7424,    0, 7443, 7442,
     7435, 7438, 7786, 7430, 7786, 7786, 7439, 7441, 7786, 7786,
     7786, 7456, 7449, 7452,    0, 7444,    0,    0, 7453, 7448,
        0,    0,    0, 7462, 7455, 7458,    0, 7450,    0,    0,
     7459, 7454,    0,    0,    0, 7468, 7461, 7470,    0, 7462,
        0,    0, 7471, 7466,    0,    0,    0, 7480, 7786, 7472,
     7476, 7489, 7485, 7786,    0, 7491, 7495, 7507, 7489,    0,
        0, 7495, 7506, 7519, 7501,    0,    0, 7507, 7511, 7523,

     7505,    0, 7519, 7507, 7786, 7527, 7522, 7510,    0, 7530,
     7525, 7513,    0, 7539, 7534, 7522,    0, 7542, 7786,  339,
     7531,    0,  322, 7532,    0,  314, 7533,    0,  309, 7535,
     7543, 7548, 7545, 7550, 7547, 7552, 7556, 7562, 7561, 7786,
     7562,    0, 7563,    0, 7564,    0, 7582, 7583, 7584, 7585,
     7573, 7574, 7575, 7576, 7572, 7579, 7580, 7581, 7595, 7596,
     7597, 7598, 7591, 7606, 7607, 7608, 7606, 7607, 7608, 7616,
     7623, 7624, 7625, 7626,  219,  211,  203,  195, 7633, 7634,
     7635, 7636, 7626, 7627, 7628, 7629, 7633, 7634, 7641, 7642,
     7637, 7638, 7639, 7640, 7646, 7648, 7663, 7664, 7786,    0,

        0,    0, 7786, 7729, 7734, 7737, 7745, 7753, 7761, 7769,
     7777
    } ;

static yyconst flex_int16_t yy_def[3612] =
    {   0,
     3603,    1, 3603,    3, 3603,    5,    5,    5,    5,    5,
     3603,   11, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3603, 3603, 3603, 3605,
     3605, 3605, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3605, 3605, 3607,
     3608, 3608, 3608, 3608, 3603, 3608, 3608, 3603, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3603, 3608, 3603, 3603, 3609,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3605, 3605, 3605, 3605, 3605,
     3605, 3607, 3607, 3608, 3608, 3608, 3610, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3609, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3603, 3605, 3605, 3605, 3605, 3605, 3603, 3605, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3603, 3605, 3605, 3605, 3605, 3605,
     3603, 3605, 3607, 3603, 3607, 3610, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3603, 3605, 3603, 3605, 3605, 3603, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3603, 3603,
     3605, 3605, 3605, 3603, 3611, 3607, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3605, 3603, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3603, 3605, 3611, 3611, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3605, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3605, 3611, 3611, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,

     3608, 3608, 3608, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3605,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3605, 3611,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,

     3606, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3603, 3603,
     3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604,
     3606, 3606, 3606, 3606, 3606, 3606, 3608, 3608, 3608, 3608,

     3608, 3608, 3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604,
     3606, 3606, 3606, 3606, 3608, 3608, 3608, 3608, 3603, 3603,
     3603, 3604, 3604, 3604, 3606, 3606, 3606, 3608, 3608, 3608,
     3603, 3603, 3604, 3604, 3606, 3606, 3608, 3608, 3603, 3603,
     3604, 3604, 3606, 3606, 3608, 3608, 3603, 3604, 3606, 3608,
     3603, 3604, 3606, 3608, 3603, 3604, 3606, 3608, 3603, 3604,
     3606, 3608, 3603, 3604, 3606, 3608, 3603, 3604, 3606, 3608,
     3603, 3604, 3606, 3608, 3603, 3604, 3606, 3608, 3603, 3604,
     3606, 3608, 3603, 3604, 3606, 3608, 3603, 3604, 3606, 3608,
     3603, 3604, 3606, 3608, 3603, 3604, 3606, 3608, 3603, 3604,

     3606, 3608,    0, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603
    } ;

static yyconst flex_int16_t yy_nxt[7869] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   14,   18,   19,
       19,   19,   19,   20,   19,   14,   14,   14,   14,   14,
       19,   21,   22,   23,   19,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       48,   14,   14,   15,   16,   15,   17,   49,   14,   14,
       18,   19,   19,   19,   19,   20,   50,   51,   51,   51,

       51,   51,   19,   21,   22,   23,   19,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   75,   77,   75,   78,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   75,   48,   75,   14,   15,   16,   15,   17,   14,
       79,   14,   18,   19,   19,   19,   80,   20,   81,   82,
       82,   82,   82,   82,   19,   21,   22,   23,   19,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  106,   77,   14,   14,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  106,   48,  106,  108, 3582,   80,  109,
      109,  109,  109,  109,  108, 3581,   80,  109,  109,  109,
      109,  109,   19, 3580,   19,  110,  110,  110,  110,  110,
       19, 3579,   19,  110,  110,  110,  110,  110,  111,  112,
      113,   15,  114,  115,  111,  111,   18,  116,  116,  116,
      116,  117,  116,  111,  111,  111,  111,  111,  118,  119,

      120,  121,  118,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  111,  145,  111,  146,
      111,  111,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  111,  145,  111,  147,  111,
      148, 3537,  148,  151,  152,  154, 3535,  198,  199,  227,
      193,  155,  191,  156, 3533,  167,  252,  157,  158,  159,
      160,  161,  168,  162,  194,  192,  169,  163,  304,  170,
      164, 3531,  171,  165,  154,  172,  198,  199,  227,  193,

      155,  191,  156,  166,  167,  252,  157,  158,  159,  160,
      161,  168,  162,  194,  192,  169,  163,  304,  170,  164,
      204,  171,  165,  173,  172,  178,  305,  174,  205,  333,
      358,  175,  166,  411,  206,  195,  179,  176,  180,  243,
      177,  244,  196,  181,  245, 2199,  182,  197,  183,  204,
     2070,  475,  173,  148,  178,  305,  174,  205,  333,  358,
      175,  297,  411,  206,  195,  179,  176,  180,  243,  177,
      244,  196,  181,  245,  298,  182,  197,  183,  184,  200,
      228, 1943,  185,  201,  229, 1818,  186,  202,  230,  187,
      297, 3109,  188,  203,  231,  189,  299,  246,  190, 3068,

      207,  412,  208,  298,  209,  247,  440,  184,  200,  228,
      300,  185,  201,  229,  210,  186,  202,  230,  187,  211,
      212,  188,  203,  231,  189,  299,  246,  190,  352,  207,
      412,  208,  465,  209,  247,  440,  353, 3027,  223,  300,
      478,  479,  148,  210,  148, 2375, 2376,  525,  211,  212,
      213,  214,  224,  526,  215,  225, 2986,  352,  226,  554,
      216,  465,  217, 2665,  218,  353,  219,  223,  220,  221,
      222,  254,  254,  254,  254,  254,  525, 2472, 2473,  213,
      214,  224,  526,  215,  225,  255, 2644,  226,  554,  216,
      232,  217,  233,  218,  301,  219,  238,  220,  221,  222,

      234,  302,  235,  239,  240,  579,  303,  236,  237,  583,
      241,  588,  248,  242,  255,  249,  250, 2607,  475,  232,
      148,  233,  251,  301,  362,  238, 2506, 2570, 2571,  234,
      302,  235,  239,  240,  579,  303,  236,  237,  583,  241,
      588,  248,  242, 2565,  249,  250,  360,  360,  360,  360,
      360,  251,  256,  257,  257,  257,  257,  257, 2544,  268,
      361, 2507,  589,  269,  404, 2467,  270,  258, 2446,  271,
      349, 2409,  350,  406, 2604,  351,  469,  405, 2370,  272,
      473,  473,  473,  473,  473, 2349,  306,  407,  268,  361,
      307,  589,  269,  404,  308,  270,  258,  260,  271,  349,

      309,  350,  406,  261,  351,  262,  405,  273,  272,  263,
      264,  265,  266,  267,  274,  306,  407, 2312,  275,  307,
      590,  276, 2249,  308,  277,  591,  260,  278, 2245,  309,
     2670, 2671,  261, 2244,  262, 2120,  273,  310,  263,  264,
      265,  266,  267,  274,  279,  311,  284,  275,  280,  590,
      276,  312,  281,  277,  591,  459,  278,  285,  282,  286,
      456,  283,  457,  460,  287,  458,  310,  288, 2116,  289,
     2115,  592, 1993,  279,  311,  284, 1989,  280, 1988, 1868,
      312,  281, 1864, 1863,  459, 1743,  285,  282,  286,  456,
      283,  457,  460,  287,  458, 1666,  288,  329,  289,  290,

      592,  334,  598,  291,  313,  335,  314,  292,  315,  336,
      293,  330,  573,  294,  331,  337,  295,  332,  316,  296,
      574, 1586,  599,  317,  318, 1509,  329,  600,  290, 1431,
      334,  598,  291,  313,  335,  314,  292,  315,  336,  293,
      330,  573,  294,  331,  337,  295,  332,  316,  296,  574,
      408,  599,  317,  318,  319,  320,  600,  409,  321,  338,
      603,  339,  410,  601,  322,  518,  323,  602,  324,  340,
      325,  341,  326,  327,  328, 1354,  342,  343,  519,  408,
     1280, 1203,  582,  319,  320,  582,  409,  321,  338,  603,
      339,  410,  601,  322,  518,  323,  602,  324,  340,  325,

      341,  326,  327,  328,  344,  342,  343,  519,  580,  417,
      354,  345,  346,  355,  356,  480,  520,  418,  347,  611,
      357,  348,  477,  419,  883,  883,  883,  883,  883,  476,
      521,  253,  570,  344,  571,  153,  584,  572,  417,  354,
      345,  346,  355,  356,  585,  520,  418,  347,  611,  357,
      348,  362,  419,  363,  364,  364,  364,  364,  364,  521,
      375,  570,  150,  571,  376,  584,  572,  377,  365,  149,
      378,  586, 3603,  585,  466,  466,  466,  466,  466, 3603,
      379, 1039, 1039, 1039, 1039, 1039, 3603,  413,  467,  375,
     3603,  414,  587,  376,  618,  415,  377,  365,  367,  378,

      586,  416,  612, 3603,  368,  619,  369,  613,  380,  379,
      370,  371,  372,  373,  374,  381,  413,  467, 3603,  382,
      414,  587,  383,  618,  415,  384,  596,  367,  385, 3603,
      416,  612,  597,  368,  619,  369,  613,  380,  620,  370,
      371,  372,  373,  374,  381,  386,  609,  391,  382,  387,
      621,  383,  436,  388,  384,  596,  610,  385,  392,  389,
      393,  597,  390,  622,  623,  394,  437,  620,  395,  438,
      396, 3603,  439, 3603,  386,  609,  391, 3603,  387,  621,
     3603,  436,  388,  624,  625,  610,  629,  392,  389,  393,
     3603,  390,  622,  623,  394,  437, 3603,  395,  438,  396,

      397,  439,  441,  630,  398,  420,  442,  421,  399,  422,
      443,  400,  624,  625,  401,  629,  444,  402,  461,  423,
      403,  462,  463,  631,  424,  425, 3603, 3603,  464,  397,
     3603,  441,  630,  398,  420,  442,  421,  399,  422,  443,
      400, 3603, 3603,  401, 3603,  444,  402,  461,  423,  403,
      462,  463,  631,  424,  425,  426,  427,  464,  632,  428,
      445,  636,  446,  637,  638,  429,  639,  430,  640,  431,
      447,  432,  448,  433,  434,  435, 3603,  449,  450,  641,
      642, 3603,  646, 3603,  426,  427,  647,  632,  428,  445,
      636,  446,  637,  638,  429,  639,  430,  640,  431,  447,

      432,  448,  433,  434,  435,  451,  449,  450,  641,  642,
      489,  646,  452,  453,  490,  647,  653,  491,  654,  454,
      492,  468,  455,  469,  470,  470,  470,  470,  470, 3603,
      493, 3603,  651, 3603,  451, 3603, 3603,  652,  471,  489,
     3603,  452,  453,  490, 3603,  653,  491,  654,  454,  492,
      522,  455, 3603, 3603, 3603, 3603,  500,  523,  494,  493,
      501,  651,  524,  658,  502,  495,  652,  471,  481,  496,
      503,  659,  497,  504,  482,  498,  483, 3603,  499,  522,
      484,  485,  486,  487,  488,  500,  523,  494, 3603,  501,
     3603,  524,  658,  502,  495, 3603, 3603,  481,  496,  503,

      659,  497,  504,  482,  498,  483,  505,  499, 3603,  484,
      485,  486,  487,  488,  527,  643, 3603,  506,  528,  507,
      644,  645,  529,  531,  508,  550,  660,  509,  530,  510,
     3603,  532, 3603,  661, 3603,  505, 3603,  533, 3603,  551,
     3603, 3603,  552,  527,  643,  553,  506,  528,  507,  644,
      645,  529,  531,  508,  550,  660,  509,  530,  510,  511,
      532,  555,  661,  512,  672,  556,  533,  513,  551,  557,
      514,  552, 3603,  515,  553,  558,  516,  593,  594,  517,
      633,  534,  673,  535,  666,  536,  634,  667,  511,  635,
      555,  595,  512,  672,  556,  537,  513, 3603,  557,  514,

      538,  539,  515, 3603,  558,  516,  593,  594,  517,  633,
      534,  673,  535,  666,  536,  634,  667, 3603,  635, 3603,
      595, 3603, 3603,  575,  537, 3603,  576,  577,  648,  538,
      539,  540,  541,  578,  674,  542,  559,  675,  560,  649,
      650,  543,  676,  544, 3603,  545,  561,  546,  562,  547,
      548,  549,  575,  563,  564,  576,  577,  648, 3603, 3603,
      540,  541,  578,  674,  542,  559,  675,  560,  649,  650,
      543,  676,  544,  604,  545,  561,  546,  562,  547,  548,
      549,  565,  563,  564,  605,  606,  607,  614,  566,  567,
      615,  626, 3603,  608,  677,  568,  616,  627,  569,  678,

      662,  655,  604,  617,  663,  664,  665,  679,  628, 3603,
      565,  680,  656,  605,  606,  607,  614,  566,  567,  615,
      626,  657,  608,  677,  568,  616,  627,  569,  678,  662,
      655,  681,  617,  663,  664,  665,  679,  628,  668,  669,
      680,  656,  670,  671,  682,  683,  688,  685,  689,  690,
      657,  686,  695, 3603,  696,  684,  698,  687, 3603,  702,
      681,  691,  703, 3603,  708,  697,  692,  668,  669,  709,
     3603,  670,  671,  682,  683,  688,  685,  689,  690,  693,
      686,  695,  694,  696,  684,  698,  687,  699,  702,  704,
      691,  703,  706,  708,  697,  692,  700,  710,  709,  712,

      718,  720,  723,  707,  701,  711,  705,  713,  693,  721,
      724,  694,  719,  715,  725,  722,  699,  726,  704,  714,
      716,  706,  717,  727,  728,  700,  710, 3603,  712,  718,
      720,  723,  707,  701,  711,  705,  713, 3603,  721,  724,
     3603,  719,  715,  725,  722, 3603,  726, 3603,  714,  716,
     3603,  717,  727,  728,  254,  254,  254,  254,  254,  729,
     3603,  729,  735,  730,  730,  730,  730,  730,  255,  731,
      731,  731,  731,  731,  256,  257,  257,  257,  257,  257,
      733,  738,  733,  732,  734,  734,  734,  734,  734,  258,
      736,  735,  740,  741,  742,  743,  744,  255,  737,  745,

      746,  748,  739,  750,  751,  752,  755,  749, 3603, 3603,
      738,  753,  732,  747,  763,  754, 3603, 3603,  258,  736,
     3603,  740,  741,  742,  743,  744,  756,  737,  745,  746,
      748,  739,  750,  751,  752,  755,  749,  757,  758,  759,
      753,  761,  747,  763,  754,  764,  760,  770,  771,  766,
      765,  762,  767,  772,  773,  756,  774,  775,  768,  776,
      777, 3603,  781,  782,  783,  769,  757,  758,  759,  784,
      761,  788, 3603, 3603,  764,  760,  770,  771,  766,  765,
      762,  767,  772,  773,  778,  774,  775,  768,  776,  777,
      779,  781,  782,  783,  769,  789,  785,  790,  784,  791,

      788,  780,  786,  792,  793,  787,  794,  798,  799,  795,
      800,  803, 3603,  778,  796,  797,  804,  810,  805,  779,
      806,  801,  802, 3603,  789,  785,  790,  811,  791,  812,
      780,  786,  792,  793,  787,  794,  798,  799,  795,  800,
      803,  807,  813,  796,  797,  804,  810,  805,  824,  806,
      801,  802,  808,  814,  816,  817,  811,  815,  812,  818,
      825,  809,  819,  820,  821,  822,  823,  826,  827,  828,
      807,  813,  829,  830,  831,  832,  833,  824,  834,  840,
     3603,  808,  814,  816,  817,  841,  815, 3603,  818,  825,
      809,  819,  820,  821,  822,  823,  826,  827,  828,  835,

      842,  829,  830,  831,  832,  833,  837,  834,  840,  836,
      838,  847,  843,  848,  841,  850,  839,  844,  854,  855,
      856,  858, 3603,  860,  849,  861,  872, 3603,  835,  842,
      845, 3603,  859,  846,  851,  837, 3603,  857,  836,  838,
      847,  843,  848,  852,  850,  839,  844,  854,  855,  856,
      858,  853,  860,  849,  861,  872,  862,  864,  870,  845,
      867,  859,  846,  851,  863,  865,  857,  868,  873,  869,
      871,  875,  852,  876,  874,  877,  878,  866,  879,  880,
      853, 3603, 3603, 3603, 3603,  862,  864,  870,  889,  867,
     3603, 3603, 3603,  863,  865, 3603,  868,  873,  869,  871,

      875, 3603,  876,  874,  877,  878,  866,  879,  880,  360,
      360,  360,  360,  360,  881, 3603,  881,  889,  882,  882,
      882,  882,  882,  361,  884,  884,  884,  884,  884,  362,
      892,  363,  886,  886,  886,  886,  886,  887,  885,  887,
      890,  888,  888,  888,  888,  888,  365,  894,  891,  895,
      896,  893,  361,  897,  898,  902,  899,  900,  904,  892,
      905,  903,  906,  909,  907, 3603,  917,  885,  908,  890,
      901,  915, 3603,  924,  925,  365,  894,  891,  895,  896,
      893,  916,  897,  898,  902,  899,  900,  904, 3603,  905,
      903,  906,  909,  907,  910,  917,  918,  908,  926,  901,

      915,  919,  924,  925,  927,  911,  912,  913,  920,  928,
      916,  921,  929,  930,  914,  931,  935,  922,  936,  937,
      938, 3603,  932,  910,  923,  918,  942,  926,  933,  943,
      919,  944,  945,  927,  911,  912,  913,  920,  928,  934,
      921,  929,  930,  914,  931,  935,  922,  936,  937,  938,
      939,  932,  946,  923,  947,  942,  940,  933,  943,  941,
      944,  945,  948,  952,  949,  953,  954,  957,  934,  950,
      951,  959,  958,  960,  964,  965,  966,  955,  956,  939,
      967,  946,  968,  947,  972,  940,  969,  973,  941,  970,
      971,  948,  952,  949,  953,  954,  957,  961,  950,  951,

      959,  958,  960,  964,  965,  966,  955,  956,  962,  967,
      978,  968,  979,  972,  980,  969,  973,  963,  970,  971,
      974,  975,  976,  977,  981,  982,  961,  983,  984,  985,
      986,  987,  988,  994,  989,  995,  996,  962,  991,  978,
     3603,  979,  992,  980,  990, 3603,  963, 1001,  993,  974,
      975,  976,  977,  981,  982, 1002,  983,  984,  985,  986,
      987,  988,  994,  989,  995,  996, 1003,  991, 1004,  997,
     1008,  992, 1005,  990,  998, 1009, 1001,  993, 1014, 1010,
     1012, 1006, 1015, 3603, 1002, 1016, 1018,  999, 3603, 1007,
     1000, 1013, 1026, 1017, 1019, 1003, 1011, 1004,  997, 1008,

     1024, 1005, 1029,  998, 1009, 1030, 1020, 1014, 1010, 1012,
     1006, 1015, 1025, 1031, 1016, 1018,  999, 1021, 1007, 1000,
     1013, 1026, 1017, 1019, 1022, 1011, 1023, 1027, 1032, 1024,
     1033, 1029, 1034, 1028, 1030, 1020,  466,  466,  466,  466,
      466, 1025, 1031, 3603, 3603, 3603, 1021, 3603, 1048, 3603,
      467, 3603, 3603, 1022, 3603, 1023, 1027, 1032, 3603, 1033,
     3603, 1034, 1028, 1035, 3603, 1035, 3603, 1036, 1036, 1036,
     1036, 1036, 1037, 1037, 1037, 1037, 1037, 1048,  468,  467,
      469, 1040, 1040, 1040, 1040, 1040, 1038, 1043, 1043, 1043,
     1043, 1043, 1041, 1044, 1041,  471, 1042, 1042, 1042, 1042,

     1042, 1051, 1053, 3603, 1049, 1045, 1045, 1045, 1045, 1045,
     1047,  581, 1050,  581, 1054, 1038,  581, 1055, 1056, 1057,
     1058, 1059, 1052, 1061,  471, 1063, 1064, 1065,  581, 1062,
     1051, 1053,  581, 1049, 1060, 1066, 1068, 1076, 3603, 1067,
     1077, 1050, 3603, 1054, 3603, 1078, 1055, 1056, 1057, 1058,
     1059, 1052, 1061, 1083, 1063, 1064, 1065, 1074, 1062,  581,
     1069, 1084, 3603, 1060, 1066, 1068, 1076, 1075, 1067, 1077,
     1085, 1070, 1071, 1072, 1078, 1079, 1086, 1087, 1080, 1088,
     1073, 1089, 1083, 1090, 1081, 3603, 1074, 1094, 1095, 1069,
     1084, 1082, 1096, 1097, 1101, 3603, 1075, 1091, 3603, 1085,

     1070, 1071, 1072, 1092, 1079, 1086, 1087, 1080, 1088, 1073,
     1089, 1102, 1090, 1081, 1093, 1103, 1094, 1095, 1098, 1104,
     1082, 1096, 1097, 1101, 1099, 1105, 1091, 1100, 1106, 1107,
     1108, 1111, 1092, 1112, 1113, 1109, 1110, 1116, 1123, 1118,
     1102, 1119, 1117, 1093, 1103, 1114, 1115, 1098, 1104, 1124,
     1125, 1126, 3603, 1099, 1105, 3603, 1100, 1106, 1107, 1108,
     1111, 1120, 1112, 1113, 1109, 1110, 1116, 1123, 1118, 1127,
     1119, 1117, 1121, 1128, 1114, 1115, 1129, 1130, 1124, 1125,
     1126, 1122, 1131, 1133, 1134, 1132, 1135, 1136, 1137, 1138,
     1120, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1127, 1146,

     1147, 1121, 1128, 1153, 1154, 1129, 1130, 1155, 3603, 1148,
     1122, 1131, 1133, 1134, 1132, 1135, 1136, 1137, 1138, 1149,
     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1150, 1146, 1147,
     1160, 1151, 1153, 1154, 1156, 1161, 1155, 1152, 1148, 1157,
     1163, 1164, 1167, 1168, 1169, 1173, 1162, 1174, 1149, 1175,
     1165, 1171, 1158, 1183, 1185, 1159, 1150, 1176, 1166, 1160,
     1151, 1170, 1172, 1156, 1161, 1184, 1152, 3603, 1157, 1163,
     1164, 1167, 1168, 1169, 1173, 1162, 1174, 1177, 1175, 1165,
     1171, 1158, 1183, 1185, 1159, 1178, 1176, 1166, 1188, 1180,
     1170, 1172, 1189, 1186, 1184, 1190, 1181, 1179, 1182, 1187,

     1191, 1192, 1193, 1194, 1195, 1196, 1177, 1197, 1198, 1199,
     1200, 1201, 1202, 1204, 1178, 1205, 1208, 1188, 1180, 1209,
     1206, 1189, 1186, 1210, 1190, 1181, 1179, 1182, 1187, 1191,
     1192, 1193, 1194, 1195, 1196, 1207, 1197, 1198, 1199, 1200,
     1201, 1202, 1204, 1211, 1205, 1208, 1212, 1213, 1209, 1206,
     1216, 1214, 1210, 1215, 1217, 1218, 1219, 1222, 1223, 1224,
     1225, 1227, 1228, 1226, 1207, 1229, 1230, 1231, 1232, 1233,
     1220, 1221, 1211, 1234, 1235, 1212, 1213, 1236, 1239, 1216,
     1214, 1240, 1215, 1217, 1218, 1219, 1222, 1223, 1224, 1225,
     1227, 1228, 1226, 1241, 1229, 1230, 1231, 1232, 1233, 1220,

     1221, 1237, 1234, 1235, 1242, 1243, 1236, 1239, 1238, 1244,
     1240, 1245, 1248, 1246, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1241, 3603, 1257, 3603, 1263, 1264, 1265, 1266,
     1237, 1247, 1267, 1242, 1243, 3603, 1268, 1238, 1244, 1258,
     1245, 1248, 1246, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1269, 1259, 1257, 1260, 1263, 1264, 1265, 1266, 1270,
     1247, 1267, 1271, 1272, 1261, 1268, 1273, 1274, 1258, 1275,
     1277, 1278, 1279, 1281, 1262, 1282, 1283, 1284, 1285, 1286,
     1269, 1276, 1287, 1288, 1289, 1290, 1291, 1292, 1270, 1293,
     1294, 1271, 1272, 1261, 1295, 1273, 1274, 1296, 1275, 1277,

     1278, 1279, 1281, 1262, 1282, 1283, 1284, 1285, 1286, 1297,
     1276, 1287, 1288, 1289, 1290, 1291, 1292, 1298, 1293, 1294,
     1299, 1300, 1301, 1295, 1302, 1303, 1296, 1304, 1305, 1306,
     1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1297, 1316,
     1309, 1317, 1318, 1319, 1320, 1321, 1298, 1322, 1323, 1299,
     1300, 1301, 1324, 1302, 1303, 1325, 1304, 1305, 1306, 1307,
     1308, 1310, 1311, 1312, 1313, 1314, 1315, 1326, 1316, 1327,
     1317, 1318, 1319, 1320, 1321, 1328, 1322, 1323, 1329, 1330,
     1331, 1324, 1332, 1336, 1325, 1337, 1338, 1333, 1334, 1340,
     1339, 1341, 1342, 3603, 3603, 3603, 1326, 3603, 1327,  730,

      730,  730,  730,  730, 1328, 3603, 3603, 1329, 1330, 1331,
     1335, 1332, 1336, 3603, 1337, 1338, 1333, 1334, 1340, 1339,
     1341, 1342,  730,  730,  730,  730,  730,  731,  731,  731,
      731,  731,  734,  734,  734,  734,  734, 1345, 1343, 1335,
     1343,  732, 1344, 1344, 1344, 1344, 1344,  734,  734,  734,
      734,  734, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1355, 1356, 1357, 1359, 1360, 1361, 1345, 1362, 1363, 1364,
      732, 1365, 1367, 1366, 1368, 1369, 1373, 1358, 1374, 1375,
     3603, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1355,
     1356, 1357, 1359, 1360, 1361, 1370, 1362, 1363, 1364, 1378,

     1365, 1367, 1366, 1368, 1369, 1373, 1358, 1374, 1375, 1371,
     1372, 1376, 1379, 1380, 1377, 1381, 1382, 1383, 1384, 1385,
     1386, 1387, 1388, 1390, 1370, 1391, 1392, 1393, 1378, 1389,
     1394, 1395, 1396, 1399, 1400, 1397, 1401, 1402, 1371, 1372,
     1376, 1379, 1380, 1377, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1390, 1398, 1391, 1392, 1393, 1403, 1389, 1394,
     1395, 1396, 1399, 1400, 1397, 1401, 1402, 1404, 1405, 1406,
     1407, 1410, 1408, 1411, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1398, 1412, 1422, 1423, 1403, 1409, 1424, 1425,
     1426, 1428, 1429, 1413, 1430, 1432, 1404, 1405, 1406, 1407,

     1433, 1408, 1427, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1434, 1412, 1422, 1423, 1435, 1409, 1424, 1425, 1426,
     1428, 1429, 1413, 1430, 1432, 1436, 1437, 1438, 1439, 1433,
     1440, 1427, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
     1434, 1449, 1450, 1451, 1435, 1452, 1453, 1454, 1455, 1456,
     1457, 1458, 1461, 1462, 1436, 1437, 1438, 1439, 1463, 1440,
     1459, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1460,
     1449, 1450, 1451, 1464, 1452, 1453, 1454, 1455, 1456, 1457,
     1458, 1461, 1462, 1465, 1466, 1467, 1468, 1463, 1469, 1459,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1479, 1478,

     1480, 1481, 1464, 1482, 1483, 1487, 1488, 1489, 1484, 1485,
     1491, 1490, 1465, 1466, 1467, 1468, 1492, 1469, 1493, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1479, 1478, 1480,
     1481, 1486, 1482, 1483, 1487, 1488, 1489, 1484, 1485, 1491,
     1490, 3603, 3603, 1500, 3603, 1492, 3603, 1493, 1494, 1494,
     1494, 1494, 1494,  882,  882,  882,  882,  882, 3603, 3603,
     1486, 1495, 1495, 1495, 1495, 1495,  884,  884,  884,  884,
      884, 1496, 1500, 1496, 3603, 1497, 1497, 1497, 1497, 1497,
      885,  362, 1501,  363, 1498, 1498, 1498, 1498, 1498, 1499,
     1499, 1499, 1499, 1499, 1502, 1503, 1504, 1505,  365,  888,

      888,  888,  888,  888, 1506, 1507, 1508, 1510, 1511,  885,
     1514, 1501, 1515, 1512, 1516, 1517, 1518, 1519, 1520, 1522,
     1521, 1523, 1524, 1502, 1503, 1504, 1505,  365, 1513, 1528,
     1529, 1530, 3603, 1506, 1507, 1508, 1510, 1511, 1525, 1514,
     1533, 1515, 1512, 1516, 1517, 1518, 1519, 1520, 1522, 1521,
     1523, 1524, 1526, 1527, 1534, 1535, 1536, 1513, 1528, 1529,
     1530, 1531, 1537, 1538, 1532, 1539, 1540, 1525, 1541, 1533,
     1542, 1543, 1545, 1546, 1547, 1548, 1549, 1550, 1544, 1551,
     1552, 1526, 1527, 1534, 1535, 1536, 1554, 1555, 1556, 1557,
     1531, 1537, 1538, 1532, 1539, 1540, 1558, 1541, 1553, 1542,

     1543, 1545, 1546, 1547, 1548, 1549, 1550, 1544, 1551, 1552,
     1559, 1560, 1561, 1562, 1563, 1554, 1555, 1556, 1557, 1569,
     1570, 1571, 1565, 1572, 1566, 1558, 1573, 1553, 1574, 1564,
     1575, 1576, 1577, 1578, 1567, 1579, 1580, 3603, 1583, 1559,
     1560, 1561, 1562, 1563, 1568, 1584, 1585, 1587, 1569, 1570,
     1571, 1588, 1572, 1589, 1581, 1573, 1590, 1574, 1564, 1575,
     1576, 1577, 1578, 1567, 1579, 1580, 1582, 1583, 1591, 1592,
     1593, 1594, 1595, 1568, 1584, 1585, 1587, 1596, 1597, 1598,
     1588, 1599, 1589, 1581, 1600, 1590, 1601, 1602, 1603, 1604,
     1605, 1606, 1607, 1608, 1609, 1582, 1610, 1591, 1592, 1593,

     1594, 1595, 1611, 1612, 1613, 1614, 1596, 1597, 1598, 1616,
     1599, 1617, 1618, 1600, 1615, 1601, 1602, 1603, 1604, 1605,
     1606, 1607, 1608, 1609, 1619, 1610, 1620, 1621, 1622, 1623,
     1624, 1611, 1612, 1613, 1614, 1625, 1626, 1627, 1616, 1628,
     1617, 1618, 1629, 1630, 1631, 1632, 1634, 1633, 1635, 1636,
     1637, 1638, 1642, 1619, 3603, 1620, 1621, 1622, 1623, 1624,
     1639, 1640, 1643, 1644, 1625, 1626, 1627, 1645, 1628, 1646,
     1647, 1629, 1630, 1631, 1632, 1634, 1633, 1635, 1636, 1637,
     1638, 1642, 1648, 1641, 1649, 1649, 1649, 1649, 1649, 1639,
     1640, 1643, 1644, 3603, 3603, 3603, 1645, 3603, 1646, 1647,

     1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037,
     3603, 1648, 1641, 3603, 3603, 1657, 1650, 1658, 1650, 1038,
     1651, 1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652,
      468, 3603,  469, 1653, 1653, 1653, 1653, 1653, 1654, 1654,
     1654, 1654, 1654, 1044, 1657, 3603, 1658,  471, 1038, 1042,
     1042, 1042, 1042, 1042, 1044, 1043, 1043, 1043, 1043, 1043,
     1655, 1655, 1655, 1655, 1655, 1659, 1656, 1656, 1656, 1656,
     1656, 1047,  581, 1660,  581, 1661,  471,  581, 1662, 1663,
     1664, 1665, 1667, 1668, 1669, 1671, 1672, 1673, 1674,  581,
     1675, 3603, 1676,  581, 1659, 1677, 1679, 1678, 1680, 1670,

     1681, 1685, 1660, 3603, 1661, 1686, 1687, 1662, 1663, 1664,
     1665, 1667, 1668, 1669, 1671, 1672, 1673, 1674, 1682, 1675,
      581, 1676, 1690, 1691, 1677, 1679, 1678, 1680, 1670, 1681,
     1685, 1692, 1683, 1684, 1686, 1687, 1688, 1693, 1694, 1689,
     1695, 1696, 1697, 1698, 1699, 1702, 1700, 1682, 1703, 1704,
     1705, 1690, 1691, 1701, 1706, 1707, 1708, 1711, 1709, 1712,
     1692, 1683, 1684, 1713, 1714, 1688, 1693, 1694, 1689, 1695,
     1696, 1697, 1698, 1699, 1702, 1700, 1710, 1703, 1704, 1705,
     1715, 1716, 1701, 1706, 1707, 1708, 1711, 1709, 1712, 1717,
     1718, 1719, 1713, 1714, 1726, 1722, 1720, 1723, 1727, 1728,

     1729, 1730, 1731, 1732, 1733, 1710, 1734, 1724, 1735, 1715,
     1716, 1721, 1736, 1737, 1738, 1740, 1741, 1725, 1717, 1718,
     1719, 1742, 1744, 1726, 1745, 1720, 1739, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1746, 1734, 1724, 1735, 1747, 1748,
     1721, 1736, 1737, 1738, 1740, 1741, 1725, 1749, 1750, 1751,
     1742, 1744, 1752, 1745, 1753, 1739, 1754, 1755, 1756, 1757,
     1758, 1759, 1760, 1746, 1761, 1762, 1763, 1747, 1748, 1764,
     1765, 1766, 1767, 1768, 1769, 1770, 1749, 1750, 1751, 1773,
     1774, 1752, 1775, 1753, 1776, 1754, 1755, 1756, 1757, 1758,
     1759, 1760, 1777, 1761, 1762, 1763, 1771, 1778, 1764, 1765,

     1766, 1767, 1768, 1769, 1770, 1772, 1779, 1780, 1773, 1774,
     1781, 1775, 1782, 1776, 1783, 1784, 1785, 1786, 1787, 1788,
     1789, 1777, 1790, 1791, 1792, 1771, 1778, 1793, 1794, 1795,
     1799, 1796, 1797, 1800, 1801, 1779, 1780, 1803, 1802, 1781,
     1804, 1782, 1805, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
     1806, 1790, 1791, 1792, 1798, 1807, 1793, 1794, 1795, 1799,
     1796, 1797, 1800, 1801, 1808, 1809, 1803, 1802, 1810, 1804,
     1811, 1805, 1812, 1813, 1814, 1815, 1816, 1819, 3603, 1806,
     1817, 1820, 1821, 1798, 1807, 1822, 1823, 1824, 1825, 1826,
     1827, 1828, 1829, 1808, 1809, 1830, 1834, 1810, 1835, 1811,

     1836, 1812, 1813, 1814, 1815, 1816, 1819, 1818, 1837, 1817,
     1820, 1821, 1831, 1838, 1822, 1823, 1824, 1825, 1826, 1827,
     1828, 1829, 1839, 1840, 1830, 1834, 1841, 1835, 1832, 1836,
     1833, 1842, 1843, 1844, 1845, 1846, 1847, 1837, 1848, 1849,
     1850, 1831, 1838, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
     1858, 1839, 1840, 1859, 1860, 1841, 1861, 1832, 1862, 1833,
     1842, 1843, 1844, 1845, 1846, 1847, 1867, 1848, 1849, 1850,
     1865, 1869, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
     1870, 1866, 1859, 1860, 1871, 1861, 1872, 1862, 1873, 1874,
     1875, 1876, 1877, 1878, 1879, 1867, 1880, 1882, 1883, 1865,

     1869, 1884, 1885, 1886, 1887, 1888, 1881, 1889, 1890, 1870,
     1866, 1891, 1892, 1871, 1895, 1872, 1896, 1873, 1874, 1875,
     1876, 1877, 1878, 1879, 1893, 1880, 1882, 1883, 1894, 1897,
     1884, 1885, 1886, 1887, 1888, 1881, 1889, 1890, 1898, 1899,
     1891, 1892, 1900, 1895, 1901, 1896, 1902, 1903, 1904, 1905,
     1906, 1907, 1908, 1893, 1909, 1910, 1911, 1894, 1897, 1912,
     1913, 1914, 1916, 1917, 1915, 1918, 1919, 1898, 1899, 1920,
     1921, 1900, 1922, 1901, 1923, 1902, 1903, 1904, 1905, 1906,
     1907, 1908, 1924, 1909, 1910, 1911, 1925, 1926, 1912, 1913,
     1914, 1916, 1917, 1915, 1918, 1919, 1927, 1928, 1920, 1921,

     1929, 1922, 1930, 1923, 1344, 1344, 1344, 1344, 1344, 1931,
     1932, 1924, 1933, 1934, 1935, 1925, 1926, 1344, 1344, 1344,
     1344, 1344, 1936, 1937, 1938, 1927, 1928, 1939, 1940, 1929,
     1941, 1930, 1944, 1942, 1945, 1946, 1947, 1948, 1931, 1932,
     1949, 1933, 1934, 1935, 1950, 1951, 1952, 1953, 1954, 1955,
     1959, 1936, 1937, 1938, 1956, 1960, 1939, 1940, 1961, 1941,
     1943, 1944, 1942, 1945, 1946, 1947, 1948, 1962, 1963, 1949,
     1957, 1964, 1958, 1950, 1951, 1952, 1953, 1954, 1955, 1959,
     1965, 1966, 1967, 1956, 1960, 1968, 1969, 1961, 1970, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1962, 1963, 1978, 1957,

     1964, 1958, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1965,
     1966, 1967, 1986, 1987, 1968, 1969, 1992, 1970, 1971, 1972,
     1973, 1974, 1975, 1976, 1977, 1994, 1995, 1978, 1990, 1996,
     1997, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1998, 1991,
     1999, 1986, 1987, 2000, 2001, 1992, 2002, 2003, 2004, 2007,
     2005, 2008, 2009, 2010, 1994, 1995, 2011, 1990, 1996, 1997,
     2006, 2012, 2013, 2014, 2015, 2016, 2017, 1998, 1991, 1999,
     2018, 2020, 2000, 2001, 2019, 2002, 2003, 2004, 2007, 2005,
     2008, 2009, 2010, 2021, 2022, 2011, 2023, 2024, 2025, 2006,
     2012, 2013, 2014, 2015, 2016, 2017, 2026, 2027, 2028, 2018,

     2020, 2029, 2030, 2019, 2031, 2032, 2033, 2034, 2035, 2036,
     2037, 2038, 2021, 2022, 2041, 2023, 2024, 2025, 2039, 2042,
     2043, 2040, 2044, 2045, 2046, 2026, 2027, 2028, 2047, 2048,
     2029, 2030, 2049, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2038, 2050, 2051, 2041, 2052, 2053, 2054, 2039, 2042, 2043,
     2040, 2044, 2045, 2046, 2055, 3603, 3603, 2047, 2048, 3603,
     3603, 2049, 1494, 1494, 1494, 1494, 1494, 3603, 3603, 3603,
     2050, 2051, 3603, 2052, 2053, 2054, 2056, 2056, 2056, 2056,
     2056, 2058, 2059, 2055, 2057, 2057, 2057, 2057, 2057, 1497,
     1497, 1497, 1497, 1497,  363, 1498, 1498, 1498, 1498, 1498,

     1499, 1499, 1499, 1499, 1499, 2060, 2061, 2062, 2063,  365,
     2058, 2059, 2064, 2065, 2066, 2067, 2068, 3603, 2071, 2069,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 3603, 2086, 2087, 2060, 2061, 2062, 2063,  365, 2088,
     2089, 2064, 2065, 2066, 2067, 2068, 2070, 2071, 2069, 2072,
     2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
     2083, 2086, 2087, 2090, 2091, 2092, 2093, 2094, 2088, 2089,
     2095, 2096, 2097, 2098, 2099, 2100, 2084, 2101, 2085, 2102,
     2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2083,
     2112, 2113, 2090, 2091, 2092, 2093, 2094, 2114, 2119, 2095,

     2096, 2097, 2098, 2099, 2100, 2084, 2101, 2085, 2102, 2103,
     2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2117, 2112,
     2113, 2121, 2122, 2123, 2124, 2125, 2114, 2119, 2126, 2118,
     2127, 2128, 2129, 2130, 2131, 2132, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2141, 2142, 2133, 2143, 2117, 2144, 2147,
     2121, 2122, 2123, 2124, 2125, 2148, 2149, 2126, 2118, 2127,
     2128, 2129, 2130, 2131, 2132, 2134, 2135, 2136, 2137, 2138,
     2139, 2140, 2141, 2142, 2133, 2143, 2145, 2144, 2147, 2150,
     2146, 2151, 2152, 2153, 2148, 2149, 2154, 2155, 2156, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2168,

     2169, 2167, 2170, 2171, 2172, 2145, 2173, 2174, 2150, 2146,
     2151, 2152, 2153, 2175, 2176, 2154, 2155, 2156, 2157, 2158,
     2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2168, 2169,
     2167, 2170, 2171, 2172, 2177, 2173, 2174, 2178, 2179, 2180,
     2181, 2182, 2175, 2176, 1649, 1649, 1649, 1649, 1649, 2183,
     2183, 2183, 2183, 2183, 1651, 1651, 1651, 1651, 1651, 3603,
     3603, 2187, 2188, 2177, 3603, 3603, 2178, 2179, 2180, 2181,
     2182, 2184, 2184, 2184, 2184, 2184,  468, 2189, 2190, 1653,
     1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1044,
     2187, 2188, 2191,  471, 2186, 2186, 2186, 2186, 2186, 2192,

     2193, 1043, 1043, 1043, 1043, 1043, 2189, 2190, 2194, 2195,
     2196, 2197, 3603, 2200, 2198, 2201, 2202, 2203, 2204, 2205,
     2206, 2191,  471, 2207, 2208, 2209, 2210, 2211, 2192, 2193,
     2215, 2216, 2217, 2218, 2219, 2220, 2221, 2194, 2195, 2196,
     2197, 2199, 2200, 2198, 2201, 2202, 2203, 2204, 2205, 2206,
     2212, 2222, 2207, 2208, 2209, 2210, 2211, 2223, 2224, 2215,
     2216, 2217, 2218, 2219, 2220, 2221, 2213, 2225, 2214, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2212,
     2222, 2236, 2237, 2238, 2239, 2240, 2223, 2224, 2241, 2242,
     2243, 3603, 2248, 2250, 2251, 2213, 2225, 2214, 2226, 2227,

     2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2252, 2246,
     2236, 2237, 2238, 2239, 2240, 2253, 2254, 2241, 2242, 2243,
     2247, 2248, 2250, 2251, 2255, 2256, 2257, 2258, 2259, 2260,
     2261, 2263, 2264, 2265, 2266, 2267, 2268, 2252, 2246, 2269,
     2262, 2270, 2271, 2272, 2253, 2254, 2273, 2274, 2276, 2247,
     2277, 2275, 2278, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
     2263, 2264, 2265, 2266, 2267, 2268, 2279, 2280, 2269, 2262,
     2270, 2271, 2272, 2281, 2282, 2273, 2274, 2276, 2283, 2277,
     2275, 2278, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
     2292, 2293, 2294, 2297, 2295, 2279, 2280, 2296, 2298, 2299,

     2300, 2301, 2281, 2282, 2302, 2303, 2304, 2283, 2305, 2306,
     2307, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292,
     2293, 2294, 2297, 2295, 2308, 2309, 2296, 2298, 2299, 2300,
     2301, 2310, 2311, 2302, 2303, 2304, 2313, 2305, 2306, 2307,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2308, 2309, 2327, 2328, 2329, 2330, 2331,
     2310, 2311, 2332, 2333, 2334, 2313, 2338, 2339, 2340, 2314,
     2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324,
     2325, 2326, 2341, 2342, 2327, 2328, 2329, 2330, 2331, 2335,
     2343, 2332, 2333, 2334, 2344, 2338, 2339, 2340, 2345, 2336,

     2346, 2337, 2347, 2348, 2350, 2351, 2352, 2353, 2354, 2355,
     2356, 2341, 2342, 2357, 2358, 2361, 2362, 2359, 2335, 2343,
     2360, 2363, 2364, 2344, 2365, 2366, 2367, 2345, 2336, 2346,
     2337, 2347, 2348, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2368, 2369, 2357, 2358, 2361, 2362, 2359, 2371, 2372, 2360,
     2363, 2364, 2373, 2365, 2366, 2367, 2374, 2377, 2378, 2379,
     2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2368,
     2369, 2389, 2390, 2391, 2392, 2393, 2371, 2372, 2394, 2395,
     2396, 2373, 2397, 2398, 2399, 2374, 2377, 2378, 2379, 2380,
     2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2400, 2401,

     2389, 2390, 2391, 2392, 2393, 2402, 2403, 2394, 2395, 2396,
     2404, 2397, 2398, 2399, 2405, 2406, 2407, 2408, 2410, 2411,
     2412, 2413, 2414, 2415, 2416, 2417, 2418, 2400, 2401, 2419,
     2420, 2421, 2422, 2423, 2402, 2403, 2424, 2425, 2426, 2404,
     2427, 2428, 2429, 2405, 2406, 2407, 2408, 2410, 2411, 2412,
     2413, 2414, 2415, 2416, 2417, 2418, 2430, 2431, 2419, 2420,
     2421, 2422, 2423, 2432, 2435, 2424, 2425, 2426, 2436, 2427,
     2428, 2429, 2437, 2433, 2438, 2434, 2439, 2440, 2441, 2442,
     2443, 2444, 2445, 2447, 2448, 2430, 2431, 2449, 2450, 2451,
     2452, 2453, 2432, 2435, 2454, 2455, 2456, 2436, 2458, 2457,

     2459, 2437, 2433, 2438, 2434, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2447, 2448, 2460, 2461, 2449, 2450, 2451, 2452,
     2453, 2462, 2463, 2454, 2455, 2456, 2464, 2458, 2457, 2459,
     2465, 2466, 2468, 2469, 2470, 2471, 2474, 2475, 2476, 2477,
     2478, 2479, 2480, 2460, 2461, 2481, 2482, 2483, 2484, 2485,
     2462, 2463, 2486, 2487, 2488, 2464, 2489, 2490, 2491, 2465,
     2466, 2468, 2469, 2470, 2471, 2474, 2475, 2476, 2477, 2478,
     2479, 2480, 2492, 2493, 2481, 2482, 2483, 2484, 2485, 2494,
     2495, 2486, 2487, 2488, 2496, 2489, 2490, 2491, 2497, 2498,
     2499, 2500, 2501, 2502, 2503, 2504, 2505, 2508, 2509, 2510,

     2511, 2492, 2493, 2057, 2057, 2057, 2057, 2057, 2494, 2495,
     2512, 2513, 2514, 2496, 2515, 2516, 2517, 2497, 2498, 2499,
     2500, 2501, 2502, 2503, 2504, 2505, 2508, 2509, 2510, 2511,
     2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2512,
     2513, 2514, 2527, 2515, 2516, 2517, 2528, 2529, 2533, 2534,
     2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2530, 2518,
     2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2531, 2543,
     2532, 2527, 2545, 2546, 2547, 2528, 2529, 2533, 2534, 2535,
     2536, 2537, 2538, 2539, 2540, 2541, 2542, 2530, 2548, 2549,
     2550, 2551, 2552, 2553, 2556, 2557, 2558, 2531, 2543, 2532,

     2559, 2545, 2546, 2547, 2554, 2560, 2561, 2555, 2562, 2563,
     2564, 2566, 2567, 2568, 2569, 2572, 2573, 2548, 2549, 2550,
     2551, 2552, 2553, 2556, 2557, 2558, 2574, 2575, 2576, 2559,
     2577, 2578, 2579, 2554, 2560, 2561, 2555, 2562, 2563, 2564,
     2566, 2567, 2568, 2569, 2572, 2573, 2580, 2581, 2582, 2583,
     2584, 2585, 2586, 2587, 2588, 2574, 2575, 2576, 2589, 2577,
     2578, 2579, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597,
     2598, 2599, 2600, 2601, 2602, 2580, 2581, 2582, 2583, 2584,
     2585, 2586, 2587, 2588, 2603, 3603, 3603, 2589, 3603, 3603,
     3603, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598,

     2599, 2600, 2601, 2602, 2183, 2183, 2183, 2183, 2183, 2608,
     2609, 2610, 2611, 2603, 2605, 2605, 2605, 2605, 2605, 2606,
     2606, 2606, 2606, 2606, 2612, 2613, 2614, 2615, 2616, 2617,
     2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2608, 2609,
     2610, 2611, 2626, 2627, 2628, 2629, 2633, 2634, 3603, 2635,
     3603, 2636, 2637, 2612, 2613, 2614, 2615, 2616, 2617, 2618,
     2619, 2620, 2621, 2622, 2623, 2624, 2625, 2630, 2638, 2639,
     2640, 2626, 2627, 2628, 2629, 2633, 2634, 2631, 2635, 2632,
     2636, 2637, 2641, 2642, 2643, 2645, 2646, 2647, 2648, 2649,
     2650, 2651, 2652, 2653, 2656, 2657, 2630, 2638, 2639, 2640,

     2654, 2658, 2659, 2655, 2660, 2661, 2631, 2662, 2632, 2663,
     2664, 2641, 2642, 2643, 2645, 2646, 2647, 2648, 2649, 2650,
     2651, 2652, 2653, 2656, 2657, 2666, 2667, 2668, 2669, 2654,
     2658, 2659, 2655, 2660, 2661, 2672, 2662, 2673, 2663, 2664,
     2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,
     2684, 2685, 2686, 2687, 2666, 2667, 2668, 2669, 2688, 2689,
     2690, 2691, 2692, 2693, 2672, 2694, 2673, 2695, 2696, 2674,
     2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684,
     2685, 2686, 2687, 2697, 2698, 2699, 2700, 2688, 2689, 2690,
     2691, 2692, 2693, 2701, 2694, 2702, 2695, 2696, 2703, 2704,

     2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714,
     2715, 2716, 2697, 2698, 2699, 2700, 2717, 2718, 2719, 2720,
     2721, 2722, 2701, 2723, 2702, 2724, 2725, 2703, 2704, 2705,
     2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715,
     2716, 2726, 2727, 2728, 2729, 2717, 2718, 2719, 2720, 2721,
     2722, 2730, 2723, 2731, 2724, 2725, 2732, 2733, 2734, 2735,
     2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745,
     2726, 2727, 2728, 2729, 2746, 2747, 2748, 2749, 2750, 2751,
     2730, 2752, 2731, 2753, 2754, 2732, 2733, 2734, 2735, 2736,
     2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2755,

     2756, 2757, 2758, 2746, 2747, 2748, 2749, 2750, 2751, 2759,
     2752, 2760, 2753, 2754, 2761, 2762, 2763, 2764, 2765, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2755, 2756,
     2757, 2758, 2775, 2776, 2777, 2778, 2779, 2780, 2759, 2781,
     2760, 2782, 2783, 2761, 2762, 2763, 2764, 2765, 2766, 2767,
     2768, 2769, 2770, 2771, 2772, 2773, 2774, 2784, 2785, 2786,
     2787, 2775, 2776, 2777, 2778, 2779, 2780, 2788, 2781, 2789,
     2782, 2783, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797,
     2798, 2799, 2800, 2801, 2802, 2803, 2784, 2785, 2786, 2787,
     2804, 2805, 2806, 2807, 2808, 2809, 2788, 2810, 2789, 2811,

     2812, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798,
     2799, 2800, 2801, 2802, 2803, 2813, 2814, 2815, 2816, 2804,
     2805, 2806, 2807, 2808, 2809, 2817, 2810, 2818, 2811, 2812,
     2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828,
     2829, 2830, 2831, 2832, 2813, 2814, 2815, 2816, 2833, 2834,
     2835, 2836, 2837, 2838, 2817, 2839, 2818, 3603, 3603, 2819,
     2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829,
     2830, 2831, 2832, 2841, 2842, 2843, 2844, 2833, 2834, 2835,
     2836, 2837, 2838, 2845, 2839, 2840, 2840, 2840, 2840, 2840,
     2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855,

     2856, 2857, 2841, 2842, 2843, 2844, 2858, 2859, 2860, 2861,
     2862, 2863, 2845, 2864, 2865, 2866, 2867, 2868, 2869, 2846,
     2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856,
     2857, 2870, 2871, 2872, 2873, 2858, 2859, 2860, 2861, 2862,
     2863, 2874, 2864, 2865, 2866, 2867, 2868, 2869, 2875, 2876,
     2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886,
     2870, 2871, 2872, 2873, 2887, 2888, 2889, 2890, 2891, 2892,
     2874, 2893, 2894, 2895, 2896, 2897, 2898, 2875, 2876, 2877,
     2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2899,
     2900, 2901, 2902, 2887, 2888, 2889, 2890, 2891, 2892, 2903,

     2893, 2894, 2895, 2896, 2897, 2898, 2904, 2905, 2906, 2907,
     2908, 2909, 2909, 2909, 2909, 2909, 2911, 2912, 2899, 2900,
     2901, 2902, 2605, 2605, 2605, 2605, 2605, 2913, 2903, 2910,
     2910, 2910, 2910, 2910, 2914, 2904, 2905, 2906, 2907, 2908,
     2915, 2916, 2917, 2918, 2919, 2911, 2912, 2920, 2921, 2922,
     2923, 2924, 2925, 2926, 2927, 2928, 2913, 2929, 2930, 2931,
     2932, 2933, 2934, 2914, 2935, 2936, 2937, 2938, 2939, 2915,
     2916, 2917, 2918, 2919, 2940, 2941, 2920, 2921, 2922, 2923,
     2924, 2925, 2926, 2927, 2928, 2942, 2929, 2930, 2931, 2932,
     2933, 2934, 2943, 2935, 2936, 2937, 2938, 2939, 2944, 2945,

     2946, 2947, 2948, 2940, 2941, 2949, 2950, 2951, 2952, 2953,
     2954, 2955, 2956, 2957, 2942, 2958, 2959, 2960, 2961, 2962,
     2963, 2943, 2964, 2965, 2966, 2967, 2968, 2944, 2945, 2946,
     2947, 2948, 2969, 2970, 2949, 2950, 2951, 2952, 2953, 2954,
     2955, 2956, 2957, 2971, 2958, 2959, 2960, 2961, 2962, 2963,
     2972, 2964, 2965, 2966, 2967, 2968, 2973, 2974, 2975, 2976,
     2977, 2969, 2970, 2978, 2979, 2980, 2981, 2982, 2983, 2984,
     2985, 2987, 2971, 2988, 2989, 2990, 2991, 2992, 2993, 2972,
     2994, 2995, 2996, 2997, 2998, 2973, 2974, 2975, 2976, 2977,
     2999, 3000, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985,

     2987, 3001, 2988, 2989, 2990, 2991, 2992, 2993, 3002, 2994,
     2995, 2996, 2997, 2998, 3003, 3004, 3005, 3006, 3007, 2999,
     3000, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016,
     3001, 3017, 3018, 3019, 3020, 3021, 3022, 3002, 3023, 3024,
     3025, 3026, 3028, 3003, 3004, 3005, 3006, 3007, 3029, 3030,
     3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3031,
     3017, 3018, 3019, 3020, 3021, 3022, 3032, 3023, 3024, 3025,
     3026, 3028, 3033, 3034, 3035, 3036, 3037, 3029, 3030, 3038,
     3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3031, 3047,
     3048, 3049, 3050, 3051, 3052, 3032, 3053, 3054, 3055, 3056,

     3057, 3033, 3034, 3035, 3036, 3037, 3058, 3059, 3038, 3039,
     3040, 3041, 3042, 3043, 3044, 3045, 3046, 3060, 3047, 3048,
     3049, 3050, 3051, 3052, 3061, 3053, 3054, 3055, 3056, 3057,
     2840, 2840, 2840, 2840, 2840, 3058, 3059, 3062, 3063, 3064,
     3065, 3066, 3067, 3069, 3070, 3071, 3060, 3072, 3073, 3074,
     3075, 3076, 3077, 3061, 3078, 3079, 3080, 3081, 3082, 3083,
     3084, 3085, 3086, 3087, 3088, 3089, 3062, 3063, 3064, 3065,
     3066, 3067, 3069, 3070, 3071, 3090, 3072, 3073, 3074, 3075,
     3076, 3077, 3091, 3078, 3079, 3080, 3081, 3082, 3083, 3084,
     3085, 3086, 3087, 3088, 3089, 3092, 3093, 3094, 3095, 3096,

     3097, 3098, 3099, 3100, 3090, 3101, 2909, 2909, 2909, 2909,
     2909, 3091, 2605, 2605, 2605, 2605, 2605, 3102, 3103, 3104,
     3105, 3106, 3107, 3108, 3092, 3093, 3094, 3095, 3096, 3097,
     3098, 3099, 3100, 3110, 3101, 3111, 3112, 3113, 3114, 3115,
     3116, 3117, 3118, 3119, 3120, 3121, 3102, 3103, 3104, 3105,
     3106, 3107, 3108, 3122, 3123, 3124, 3125, 3126, 3127, 3128,
     3129, 3130, 3110, 3131, 3111, 3112, 3113, 3114, 3115, 3116,
     3117, 3118, 3119, 3120, 3121, 3132, 3133, 3134, 3135, 3136,
     3137, 3138, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129,
     3130, 3139, 3131, 3140, 3141, 3142, 3143, 3144, 3145, 3146,

     3147, 3148, 3149, 3154, 3132, 3133, 3134, 3135, 3136, 3137,
     3138, 3155, 3156, 3157, 3150, 3158, 3151, 3152, 3153, 3159,
     3139, 3160, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147,
     3148, 3149, 3154, 3161, 3162, 3163, 3164, 3165, 3166, 3167,
     3155, 3156, 3157, 3150, 3158, 3151, 3152, 3153, 3159, 3168,
     3160, 3169, 3170, 3172, 3173, 3174, 3171, 3175, 3176, 3177,
     3178, 3179, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3180,
     3181, 3182, 3183, 3184, 3191, 3603, 3192, 3603, 3168, 3603,
     3169, 3170, 3172, 3173, 3174, 3171, 3175, 3176, 3177, 3178,
     3179, 3185, 3186, 3193, 3194, 3195, 3196, 3197, 3180, 3181,

     3182, 3183, 3184, 3191, 3187, 3192, 3188, 3189, 3190, 3198,
     3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3209, 3210,
     3185, 3186, 3193, 3194, 3195, 3196, 3197, 3207, 3211, 3212,
     3213, 3208, 3214, 3187, 3215, 3188, 3189, 3190, 3198, 3199,
     3200, 3201, 3202, 3203, 3204, 3205, 3206, 3209, 3210, 3216,
     3217, 3218, 3219, 3220, 3221, 3603, 3207, 3211, 3212, 3213,
     3208, 3214, 3228, 3215, 3229, 3230, 3231, 3232, 3233, 3234,
     3235, 3222, 3223, 3236, 3237, 3238, 3239, 3240, 3216, 3217,
     3218, 3219, 3220, 3221, 3224, 3241, 3225, 3226, 3227, 3242,
     3243, 3228, 3246, 3229, 3230, 3231, 3232, 3233, 3234, 3235,

     3222, 3223, 3236, 3237, 3238, 3239, 3240, 3244, 3247, 3248,
     3249, 3245, 3250, 3224, 3241, 3225, 3226, 3227, 3242, 3243,
     3251, 3246, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259,
     3260, 3265, 3266, 3267, 3268, 3269, 3244, 3247, 3248, 3249,
     3245, 3250, 3261, 3270, 3262, 3263, 3264, 3271, 3272, 3251,
     3273, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260,
     3265, 3266, 3267, 3268, 3269, 3274, 3275, 3276, 3277, 3278,
     3279, 3261, 3270, 3262, 3263, 3264, 3271, 3272, 3280, 3273,
     3281, 3283, 3284, 3285, 3282, 3286, 3287, 3288, 3289, 3290,
     3291, 3292, 3293, 3294, 3274, 3275, 3276, 3277, 3278, 3279,

     3295, 3297, 3298, 3299, 3296, 3300, 3301, 3280, 3302, 3281,
     3283, 3284, 3285, 3282, 3286, 3287, 3288, 3289, 3290, 3291,
     3292, 3293, 3294, 3303, 3304, 3305, 3306, 3307, 3308, 3295,
     3297, 3298, 3299, 3296, 3300, 3301, 3309, 3302, 3311, 3310,
     3312, 3313, 3314, 3315, 3317, 3318, 3319, 3316, 3320, 3321,
     3322, 3323, 3303, 3304, 3305, 3306, 3307, 3308, 3324, 3325,
     3326, 3327, 3328, 3329, 3331, 3309, 3330, 3311, 3310, 3312,
     3313, 3314, 3315, 3317, 3318, 3319, 3316, 3320, 3321, 3322,
     3323, 3332, 3333, 3334, 3337, 3338, 3339, 3324, 3325, 3326,
     3327, 3328, 3329, 3331, 3335, 3330, 3340, 3341, 3336, 3342,

     3343, 3344, 3345, 3346, 3347, 3348, 3349, 3351, 3352, 3350,
     3332, 3333, 3334, 3337, 3338, 3339, 3353, 3354, 3355, 3357,
     3358, 3359, 3356, 3335, 3360, 3340, 3341, 3336, 3342, 3343,
     3344, 3345, 3346, 3347, 3348, 3349, 3351, 3352, 3350, 3361,
     3362, 3363, 3364, 3365, 3366, 3353, 3354, 3355, 3357, 3358,
     3359, 3356, 3367, 3360, 3368, 3369, 3371, 3372, 3370, 3373,
     3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3361, 3362,
     3363, 3364, 3365, 3366, 3382, 3383, 3384, 3385, 3386, 3387,
     3388, 3367, 3389, 3368, 3369, 3371, 3372, 3370, 3373, 3374,
     3375, 3376, 3377, 3378, 3379, 3380, 3381, 3390, 3391, 3392,

     3393, 3394, 3395, 3382, 3383, 3384, 3385, 3386, 3387, 3388,
     3396, 3389, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404,
     3405, 3406, 3407, 3408, 3409, 3410, 3390, 3391, 3392, 3393,
     3394, 3395, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3396,
     3418, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405,
     3406, 3407, 3408, 3409, 3410, 3419, 3420, 3421, 3422, 3423,
     3424, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3425, 3418,
     3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435,
     3436, 3437, 3438, 3439, 3419, 3420, 3421, 3422, 3423, 3424,
     3440, 3441, 3442, 3443, 3444, 3445, 3446, 3425, 3447, 3426,

     3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436,
     3437, 3438, 3439, 3448, 3449, 3450, 3451, 3452, 3453, 3440,
     3441, 3442, 3443, 3444, 3445, 3446, 3454, 3447, 3455, 3456,
     3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466,
     3467, 3468, 3448, 3449, 3450, 3451, 3452, 3453, 3469, 3470,
     3471, 3472, 3473, 3474, 3475, 3454, 3476, 3455, 3456, 3457,
     3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467,
     3468, 3477, 3478, 3479, 3480, 3481, 3482, 3469, 3470, 3471,
     3472, 3473, 3474, 3475, 3483, 3476, 3484, 3485, 3486, 3487,
     3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497,

     3477, 3478, 3479, 3480, 3481, 3482, 3498, 3499, 3500, 3501,
     3502, 3503, 3504, 3483, 3505, 3484, 3485, 3486, 3487, 3488,
     3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3506,
     3507, 3508, 3509, 3510, 3511, 3498, 3499, 3500, 3501, 3502,
     3503, 3504, 3512, 3505, 3513, 3514, 3515, 3516, 3517, 3518,
     3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3506, 3507,
     3508, 3509, 3510, 3511, 3527, 3528, 3529, 3530, 3532, 3534,
     3536, 3512, 3538, 3513, 3514, 3515, 3516, 3517, 3518, 3519,
     3520, 3521, 3522, 3523, 3524, 3525, 3526, 3539, 3540, 3541,
     3542, 3543, 3544, 3527, 3528, 3529, 3530, 3532, 3534, 3536,

     3545, 3538, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553,
     3554, 3555, 3556, 3557, 3558, 3559, 3539, 3540, 3541, 3542,
     3543, 3544, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3545,
     3567, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554,
     3555, 3556, 3557, 3558, 3559, 3568, 3569, 3570, 3571, 3572,
     3573, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3574, 3567,
     3575, 3576, 3577, 3578, 3583, 3584, 3585, 3586, 3587, 3588,
     3589, 3590, 3591, 3592, 3568, 3569, 3570, 3571, 3572, 3573,
     3593, 3594, 3595, 3596, 3597, 3598, 3599, 3574, 3600, 3575,
     3576, 3577, 3578, 3583, 3584, 3585, 3586, 3587, 3588, 3589,

     3590, 3591, 3592, 3601, 3602, 3603, 3603, 3603, 3603, 3593,
     3594, 3595, 3596, 3597, 3598, 3599, 3603, 3600, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3601, 3602,  259, 3603,  259,  359, 3603,  359,
      366,  366,  366,  366,  366,  472, 3603,  472,  472,  472,
      472,  472,  472,  474, 3603, 3603,  474,  474,  474, 3603,
      474,  581,  581,  581,  581,  581,  581,  581,  581, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 2185, 3603, 2185,
     2185, 2185, 2185, 2185, 2185,   13, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603
    } ;

static yyconst flex_int16_t yy_chk[7869] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 3578,    7,    7,
        7,    7,    7,    7,    8, 3577,    8,    8,    8,    8,
        8,    8,    9, 3576,    9,    9,    9,    9,    9,    9,
       10, 3575,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15, 3529,   15,   21,   21,   24, 3526,   33,   34,   40,
       31,   24,   30,   24, 3523,   26,   47,   24,   24,   24,
       24,   24,   26,   25,   31,   30,   26,   25,   61,   26,
       25, 3520,   26,   25,   24,   26,   33,   34,   40,   31,

       24,   30,   24,   25,   26,   47,   24,   24,   24,   24,
       24,   26,   25,   31,   30,   26,   25,   61,   26,   25,
       36,   26,   25,   27,   26,   28,   62,   27,   36,   68,
       76,   27,   25,   92,   36,   32,   28,   27,   28,   44,
       27,   44,   32,   28,   44, 3257,   28,   32,   28,   36,
     3220,  112,   27,  112,   28,   62,   27,   36,   68,   76,
       27,   58,   92,   36,   32,   28,   27,   28,   44,   27,
       44,   32,   28,   44,   58,   28,   32,   28,   29,   35,
       41, 3183,   29,   35,   41, 3146,   29,   35,   41,   29,
       58, 2923,   29,   35,   41,   29,   59,   45,   29, 2853,

       37,   93,   37,   58,   37,   45,   99,   29,   35,   41,
       59,   29,   35,   41,   37,   29,   35,   41,   29,   37,
       37,   29,   35,   41,   29,   59,   45,   29,   73,   37,
       93,   37,  107,   37,   45,   99,   73, 2784,   39,   59,
      119,  119,  148,   37,  148, 1891, 1891,  131,   37,   37,
       38,   38,   39,  132,   38,   39, 2716,   73,   39,  138,
       38,  107,   38, 2265,   38,   73,   38,   39,   38,   38,
       38,   50,   50,   50,   50,   50,  131, 2016, 2016,   38,
       38,   39,  132,   38,   39,   50, 2231,   39,  138,   38,
       42,   38,   42,   38,   60,   38,   43,   38,   38,   38,

       42,   60,   42,   43,   43,  145,   60,   42,   42,  154,
       43,  157,   46,   43,   50,   46,   46, 2189,  475,   42,
      475,   42,   46,   60, 2056,   43, 2056, 2143, 2143,   42,
       60,   42,   43,   43,  145,   60,   42,   42,  154,   43,
      157,   46,   43, 2136,   46,   46,   81,   81,   81,   81,
       81,   46,   51,   51,   51,   51,   51,   51, 2102,   53,
       81, 2060,  158,   53,   89, 2009,   53,   51, 1975,   53,
       72, 1933,   72,   90, 2184,   72, 2184,   89, 1884,   53,
      110,  110,  110,  110,  110, 1850,   63,   90,   53,   81,
       63,  158,   53,   89,   63,   53,   51,   52,   53,   72,

       63,   72,   90,   52,   72,   52,   89,   54,   53,   52,
       52,   52,   52,   52,   54,   63,   90, 1808,   54,   63,
      159,   54, 1728,   63,   54,  160,   52,   54, 1723,   63,
     2272, 2272,   52, 1722,   52, 1571,   54,   64,   52,   52,
       52,   52,   52,   54,   55,   64,   56,   54,   55,  159,
       54,   64,   55,   54,  160,  104,   54,   56,   55,   56,
      103,   55,  103,  104,   56,  103,   64,   56, 1566,   56,
     1565,  161, 1416,   55,   64,   56, 1411,   55, 1410, 1265,
       64,   55, 1260, 1259,  104, 1133,   56,   55,   56,  103,
       55,  103,  104,   56,  103, 1062,   56,   67,   56,   57,

      161,   69,  164,   57,   65,   69,   65,   57,   65,   69,
       57,   67,  143,   57,   67,   69,   57,   67,   65,   57,
      143,  974,  165,   65,   65,  903,   67,  167,   57,  820,
       69,  164,   57,   65,   69,   65,   57,   65,   69,   57,
       67,  143,   57,   67,   69,   57,   67,   65,   57,  143,
       91,  165,   65,   65,   66,   66,  167,   91,   66,   70,
      169,   70,   91,  168,   66,  128,   66,  168,   66,   70,
       66,   70,   66,   66,   66,  749,   70,   70,  128,   91,
      668,  597,  581,   66,   66,  150,   91,   66,   70,  169,
       70,   91,  168,   66,  128,   66,  168,   66,   70,   66,

       70,   66,   66,   66,   71,   70,   70,  128,  147,   95,
       74,   71,   71,   74,   74,  121,  129,   95,   71,  172,
       74,   71,  117,   95,  362,  362,  362,  362,  362,  114,
      129,   48,  142,   71,  142,   23,  155,  142,   95,   74,
       71,   71,   74,   74,  155,  129,   95,   71,  172,   74,
       71,   82,   95,   82,   82,   82,   82,   82,   82,  129,
       84,  142,   20,  142,   84,  155,  142,   84,   82,   17,
       84,  156,   13,  155,  108,  108,  108,  108,  108,    0,
       84,  469,  469,  469,  469,  469,    0,   94,  108,   84,
        0,   94,  156,   84,  175,   94,   84,   82,   83,   84,

      156,   94,  173,    0,   83,  176,   83,  173,   85,   84,
       83,   83,   83,   83,   83,   85,   94,  108,    0,   85,
       94,  156,   85,  175,   94,   85,  163,   83,   85,    0,
       94,  173,  163,   83,  176,   83,  173,   85,  177,   83,
       83,   83,   83,   83,   85,   86,  171,   87,   85,   86,
      178,   85,   98,   86,   85,  163,  171,   85,   87,   86,
       87,  163,   86,  179,  180,   87,   98,  177,   87,   98,
       87,    0,   98,    0,   86,  171,   87,    0,   86,  178,
        0,   98,   86,  181,  182,  171,  184,   87,   86,   87,
        0,   86,  179,  180,   87,   98,    0,   87,   98,   87,

       88,   98,  100,  185,   88,   96,  100,   96,   88,   96,
      100,   88,  181,  182,   88,  184,  100,   88,  105,   96,
       88,  105,  105,  186,   96,   96,    0,    0,  105,   88,
        0,  100,  185,   88,   96,  100,   96,   88,   96,  100,
       88,    0,    0,   88,    0,  100,   88,  105,   96,   88,
      105,  105,  186,   96,   96,   97,   97,  105,  187,   97,
      101,  189,  101,  190,  191,   97,  192,   97,  193,   97,
      101,   97,  101,   97,   97,   97,    0,  101,  101,  194,
      195,    0,  198,    0,   97,   97,  199,  187,   97,  101,
      189,  101,  190,  191,   97,  192,   97,  193,   97,  101,

       97,  101,   97,   97,   97,  102,  101,  101,  194,  195,
      123,  198,  102,  102,  123,  199,  202,  123,  202,  102,
      123,  109,  102,  109,  109,  109,  109,  109,  109,    0,
      123,    0,  201,    0,  102,    0,    0,  201,  109,  123,
        0,  102,  102,  123,    0,  202,  123,  202,  102,  123,
      130,  102,    0,    0,    0,    0,  125,  130,  124,  123,
      125,  201,  130,  204,  125,  124,  201,  109,  122,  124,
      125,  205,  124,  125,  122,  124,  122,    0,  124,  130,
      122,  122,  122,  122,  122,  125,  130,  124,    0,  125,
        0,  130,  204,  125,  124,    0,    0,  122,  124,  125,

      205,  124,  125,  122,  124,  122,  126,  124,    0,  122,
      122,  122,  122,  122,  133,  196,    0,  126,  133,  126,
      196,  196,  133,  134,  126,  137,  206,  126,  133,  126,
        0,  134,    0,  207,    0,  126,    0,  134,    0,  137,
        0,    0,  137,  133,  196,  137,  126,  133,  126,  196,
      196,  133,  134,  126,  137,  206,  126,  133,  126,  127,
      134,  139,  207,  127,  213,  139,  134,  127,  137,  139,
      127,  137,    0,  127,  137,  139,  127,  162,  162,  127,
      188,  135,  214,  135,  210,  135,  188,  210,  127,  188,
      139,  162,  127,  213,  139,  135,  127,    0,  139,  127,

      135,  135,  127,    0,  139,  127,  162,  162,  127,  188,
      135,  214,  135,  210,  135,  188,  210,    0,  188,    0,
      162,    0,    0,  144,  135,    0,  144,  144,  200,  135,
      135,  136,  136,  144,  215,  136,  140,  216,  140,  200,
      200,  136,  217,  136,    0,  136,  140,  136,  140,  136,
      136,  136,  144,  140,  140,  144,  144,  200,    0,    0,
      136,  136,  144,  215,  136,  140,  216,  140,  200,  200,
      136,  217,  136,  170,  136,  140,  136,  140,  136,  136,
      136,  141,  140,  140,  170,  170,  170,  174,  141,  141,
      174,  183,    0,  170,  218,  141,  174,  183,  141,  219,

      208,  203,  170,  174,  208,  209,  209,  220,  183,    0,
      141,  221,  203,  170,  170,  170,  174,  141,  141,  174,
      183,  203,  170,  218,  141,  174,  183,  141,  219,  208,
      203,  222,  174,  208,  209,  209,  220,  183,  211,  211,
      221,  203,  212,  212,  223,  224,  226,  225,  227,  228,
      203,  225,  230,    0,  231,  224,  232,  225,    0,  234,
      222,  229,  235,    0,  238,  231,  229,  211,  211,  239,
        0,  212,  212,  223,  224,  226,  225,  227,  228,  229,
      225,  230,  229,  231,  224,  232,  225,  233,  234,  236,
      229,  235,  237,  238,  231,  229,  233,  240,  239,  242,

      244,  245,  247,  237,  233,  240,  236,  242,  229,  246,
      248,  229,  244,  243,  249,  246,  233,  250,  236,  242,
      243,  237,  243,  251,  252,  233,  240,    0,  242,  244,
      245,  247,  237,  233,  240,  236,  242,    0,  246,  248,
        0,  244,  243,  249,  246,    0,  250,    0,  242,  243,
        0,  243,  251,  252,  254,  254,  254,  254,  254,  255,
        0,  255,  260,  255,  255,  255,  255,  255,  254,  256,
      256,  256,  256,  256,  257,  257,  257,  257,  257,  257,
      258,  262,  258,  256,  258,  258,  258,  258,  258,  257,
      261,  260,  263,  264,  265,  266,  267,  254,  261,  268,

      268,  269,  262,  270,  271,  273,  275,  269,    0,    0,
      262,  274,  256,  268,  278,  274,    0,    0,  257,  261,
        0,  263,  264,  265,  266,  267,  276,  261,  268,  268,
      269,  262,  270,  271,  273,  275,  269,  276,  276,  276,
      274,  277,  268,  278,  274,  279,  276,  281,  282,  280,
      279,  277,  280,  283,  284,  276,  285,  286,  280,  287,
      288,    0,  290,  291,  292,  280,  276,  276,  276,  293,
      277,  295,    0,    0,  279,  276,  281,  282,  280,  279,
      277,  280,  283,  284,  289,  285,  286,  280,  287,  288,
      289,  290,  291,  292,  280,  296,  294,  297,  293,  298,

      295,  289,  294,  299,  300,  294,  301,  304,  305,  302,
      306,  307,    0,  289,  302,  302,  307,  310,  308,  289,
      308,  306,  306,    0,  296,  294,  297,  311,  298,  312,
      289,  294,  299,  300,  294,  301,  304,  305,  302,  306,
      307,  309,  313,  302,  302,  307,  310,  308,  319,  308,
      306,  306,  309,  314,  315,  315,  311,  314,  312,  316,
      320,  309,  316,  317,  317,  318,  318,  321,  322,  323,
      309,  313,  324,  325,  326,  327,  328,  319,  329,  332,
        0,  309,  314,  315,  315,  333,  314,    0,  316,  320,
      309,  316,  317,  317,  318,  318,  321,  322,  323,  330,

      334,  324,  325,  326,  327,  328,  331,  329,  332,  330,
      331,  336,  335,  337,  333,  338,  331,  335,  340,  341,
      342,  343,    0,  344,  337,  345,  351,    0,  330,  334,
      335,    0,  343,  335,  339,  331,    0,  342,  330,  331,
      336,  335,  337,  339,  338,  331,  335,  340,  341,  342,
      343,  339,  344,  337,  345,  351,  346,  348,  350,  335,
      349,  343,  335,  339,  346,  348,  342,  349,  352,  349,
      350,  353,  339,  354,  352,  355,  356,  348,  357,  358,
      339,    0,    0,    0,    0,  346,  348,  350,  367,  349,
        0,    0,    0,  346,  348,    0,  349,  352,  349,  350,

      353,    0,  354,  352,  355,  356,  348,  357,  358,  360,
      360,  360,  360,  360,  361,    0,  361,  367,  361,  361,
      361,  361,  361,  360,  363,  363,  363,  363,  363,  364,
      369,  364,  364,  364,  364,  364,  364,  365,  363,  365,
      368,  365,  365,  365,  365,  365,  364,  370,  368,  371,
      372,  369,  360,  373,  374,  376,  375,  375,  377,  369,
      378,  376,  380,  382,  381,    0,  385,  363,  381,  368,
      375,  384,    0,  388,  389,  364,  370,  368,  371,  372,
      369,  384,  373,  374,  376,  375,  375,  377,    0,  378,
      376,  380,  382,  381,  383,  385,  386,  381,  390,  375,

      384,  386,  388,  389,  391,  383,  383,  383,  387,  392,
      384,  387,  393,  394,  383,  395,  397,  387,  398,  399,
      400,    0,  396,  383,  387,  386,  402,  390,  396,  403,
      386,  404,  405,  391,  383,  383,  383,  387,  392,  396,
      387,  393,  394,  383,  395,  397,  387,  398,  399,  400,
      401,  396,  406,  387,  407,  402,  401,  396,  403,  401,
      404,  405,  408,  411,  409,  412,  413,  414,  396,  409,
      409,  415,  414,  415,  417,  418,  419,  413,  413,  401,
      420,  406,  421,  407,  423,  401,  421,  423,  401,  422,
      422,  408,  411,  409,  412,  413,  414,  416,  409,  409,

      415,  414,  415,  417,  418,  419,  413,  413,  416,  420,
      426,  421,  427,  423,  428,  421,  423,  416,  422,  422,
      424,  424,  425,  425,  429,  430,  416,  431,  432,  433,
      434,  435,  436,  439,  437,  440,  441,  416,  438,  426,
        0,  427,  438,  428,  437,    0,  416,  443,  438,  424,
      424,  425,  425,  429,  430,  444,  431,  432,  433,  434,
      435,  436,  439,  437,  440,  441,  444,  438,  445,  442,
      447,  438,  446,  437,  442,  448,  443,  438,  451,  449,
      450,  446,  452,    0,  444,  453,  455,  442,    0,  446,
      442,  450,  458,  453,  455,  444,  449,  445,  442,  447,

      457,  446,  460,  442,  448,  461,  455,  451,  449,  450,
      446,  452,  457,  462,  453,  455,  442,  456,  446,  442,
      450,  458,  453,  455,  456,  449,  456,  459,  463,  457,
      464,  460,  465,  459,  461,  455,  466,  466,  466,  466,
      466,  457,  462,    0,    0,    0,  456,    0,  481,    0,
      466,    0,    0,  456,    0,  456,  459,  463,    0,  464,
        0,  465,  459,  467,    0,  467,    0,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  481,  470,  466,
      470,  470,  470,  470,  470,  470,  468,  472,  472,  472,
      472,  472,  471,  473,  471,  470,  471,  471,  471,  471,

      471,  483,  484,    0,  482,  473,  473,  473,  473,  473,
      477,  477,  482,  477,  485,  468,  477,  486,  487,  488,
      489,  489,  483,  490,  470,  491,  492,  494,  477,  490,
      483,  484,  477,  482,  489,  495,  496,  499,    0,  495,
      500,  482,    0,  485,    0,  500,  486,  487,  488,  489,
      489,  483,  490,  502,  491,  492,  494,  498,  490,  477,
      497,  503,    0,  489,  495,  496,  499,  498,  495,  500,
      504,  497,  497,  497,  500,  501,  505,  506,  501,  507,
      497,  508,  502,  509,  501,    0,  498,  511,  512,  497,
      503,  501,  513,  514,  516,    0,  498,  510,    0,  504,

      497,  497,  497,  510,  501,  505,  506,  501,  507,  497,
      508,  517,  509,  501,  510,  518,  511,  512,  515,  519,
      501,  513,  514,  516,  515,  520,  510,  515,  521,  522,
      523,  525,  510,  526,  527,  523,  523,  528,  531,  529,
      517,  529,  528,  510,  518,  527,  527,  515,  519,  532,
      533,  534,    0,  515,  520,    0,  515,  521,  522,  523,
      525,  530,  526,  527,  523,  523,  528,  531,  529,  535,
      529,  528,  530,  535,  527,  527,  536,  536,  532,  533,
      534,  530,  537,  538,  538,  537,  539,  539,  540,  541,
      530,  542,  543,  544,  545,  546,  547,  548,  535,  549,

      550,  530,  535,  553,  554,  536,  536,  555,    0,  551,
      530,  537,  538,  538,  537,  539,  539,  540,  541,  551,
      542,  543,  544,  545,  546,  547,  548,  552,  549,  550,
      557,  552,  553,  554,  556,  558,  555,  552,  551,  556,
      559,  560,  561,  562,  563,  565,  558,  566,  551,  567,
      560,  564,  556,  571,  572,  556,  552,  567,  560,  557,
      552,  563,  564,  556,  558,  571,  552,    0,  556,  559,
      560,  561,  562,  563,  565,  558,  566,  569,  567,  560,
      564,  556,  571,  572,  556,  569,  567,  560,  574,  570,
      563,  564,  575,  573,  571,  576,  570,  569,  570,  573,

      577,  578,  579,  583,  585,  588,  569,  590,  591,  593,
      594,  595,  596,  598,  569,  599,  601,  574,  570,  602,
      600,  575,  573,  603,  576,  570,  569,  570,  573,  577,
      578,  579,  583,  585,  588,  600,  590,  591,  593,  594,
      595,  596,  598,  604,  599,  601,  605,  606,  602,  600,
      608,  607,  603,  607,  609,  610,  611,  612,  613,  613,
      614,  615,  616,  614,  600,  617,  618,  619,  620,  621,
      611,  611,  604,  622,  624,  605,  606,  625,  627,  608,
      607,  628,  607,  609,  610,  611,  612,  613,  613,  614,
      615,  616,  614,  629,  617,  618,  619,  620,  621,  611,

      611,  626,  622,  624,  630,  631,  625,  627,  626,  632,
      628,  633,  635,  634,  636,  637,  638,  639,  640,  641,
      642,  643,  629,    0,  644,    0,  646,  649,  650,  651,
      626,  634,  652,  630,  631,    0,  653,  626,  632,  644,
      633,  635,  634,  636,  637,  638,  639,  640,  641,  642,
      643,  654,  645,  644,  645,  646,  649,  650,  651,  655,
      634,  652,  656,  657,  645,  653,  659,  660,  644,  661,
      662,  663,  665,  669,  645,  670,  671,  672,  673,  674,
      654,  661,  676,  677,  678,  679,  680,  681,  655,  682,
      683,  656,  657,  645,  684,  659,  660,  685,  661,  662,

      663,  665,  669,  645,  670,  671,  672,  673,  674,  686,
      661,  676,  677,  678,  679,  680,  681,  687,  682,  683,
      688,  689,  690,  684,  691,  692,  685,  693,  694,  695,
      696,  697,  698,  699,  700,  702,  703,  704,  686,  705,
      697,  706,  708,  709,  710,  711,  687,  712,  713,  688,
      689,  690,  714,  691,  692,  715,  693,  694,  695,  696,
      697,  698,  699,  700,  702,  703,  704,  716,  705,  716,
      706,  708,  709,  710,  711,  717,  712,  713,  718,  719,
      720,  714,  721,  723,  715,  724,  725,  722,  722,  726,
      725,  727,  728,    0,    0,    0,  716,    0,  716,  729,

      729,  729,  729,  729,  717,    0,    0,  718,  719,  720,
      722,  721,  723,    0,  724,  725,  722,  722,  726,  725,
      727,  728,  730,  730,  730,  730,  730,  731,  731,  731,
      731,  731,  733,  733,  733,  733,  733,  735,  732,  722,
      732,  731,  732,  732,  732,  732,  732,  734,  734,  734,
      734,  734,  737,  740,  742,  743,  745,  746,  747,  748,
      750,  751,  752,  753,  754,  755,  735,  756,  757,  758,
      731,  759,  760,  759,  761,  762,  764,  752,  765,  765,
        0,  737,  740,  742,  743,  745,  746,  747,  748,  750,
      751,  752,  753,  754,  755,  763,  756,  757,  758,  767,

      759,  760,  759,  761,  762,  764,  752,  765,  765,  763,
      763,  766,  768,  769,  766,  770,  771,  772,  773,  774,
      776,  777,  778,  779,  763,  780,  781,  782,  767,  778,
      783,  784,  785,  787,  788,  786,  789,  790,  763,  763,
      766,  768,  769,  766,  770,  771,  772,  773,  774,  776,
      777,  778,  779,  786,  780,  781,  782,  791,  778,  783,
      784,  785,  787,  788,  786,  789,  790,  792,  793,  794,
      795,  797,  796,  797,  798,  801,  802,  803,  804,  805,
      806,  807,  786,  797,  808,  809,  791,  796,  811,  812,
      813,  814,  815,  797,  817,  821,  792,  793,  794,  795,

      822,  796,  813,  798,  801,  802,  803,  804,  805,  806,
      807,  823,  797,  808,  809,  824,  796,  811,  812,  813,
      814,  815,  797,  817,  821,  825,  826,  828,  829,  822,
      830,  813,  831,  832,  833,  834,  835,  836,  837,  838,
      823,  839,  840,  841,  824,  842,  843,  844,  845,  846,
      847,  848,  850,  851,  825,  826,  828,  829,  852,  830,
      849,  831,  832,  833,  834,  835,  836,  837,  838,  849,
      839,  840,  841,  854,  842,  843,  844,  845,  846,  847,
      848,  850,  851,  855,  856,  857,  858,  852,  860,  849,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  868,

      870,  871,  854,  872,  873,  875,  876,  877,  874,  874,
      878,  877,  855,  856,  857,  858,  879,  860,  880,  861,
      862,  863,  864,  865,  866,  867,  868,  869,  868,  870,
      871,  874,  872,  873,  875,  876,  877,  874,  874,  878,
      877,    0,    0,  889,    0,  879,    0,  880,  881,  881,
      881,  881,  881,  882,  882,  882,  882,  882,    0,    0,
      874,  883,  883,  883,  883,  883,  884,  884,  884,  884,
      884,  885,  889,  885,    0,  885,  885,  885,  885,  885,
      884,  886,  891,  886,  886,  886,  886,  886,  886,  887,
      887,  887,  887,  887,  894,  896,  897,  899,  886,  888,

      888,  888,  888,  888,  900,  901,  902,  904,  905,  884,
      907,  891,  908,  906,  909,  910,  911,  912,  913,  914,
      913,  915,  916,  894,  896,  897,  899,  886,  906,  918,
      919,  919,    0,  900,  901,  902,  904,  905,  917,  907,
      921,  908,  906,  909,  910,  911,  912,  913,  914,  913,
      915,  916,  917,  917,  922,  923,  924,  906,  918,  919,
      919,  920,  925,  926,  920,  927,  928,  917,  930,  921,
      931,  932,  933,  934,  935,  936,  937,  938,  932,  939,
      940,  917,  917,  922,  923,  924,  941,  942,  943,  944,
      920,  925,  926,  920,  927,  928,  945,  930,  940,  931,

      932,  933,  934,  935,  936,  937,  938,  932,  939,  940,
      946,  947,  948,  949,  950,  941,  942,  943,  944,  952,
      955,  956,  951,  957,  951,  945,  958,  940,  959,  950,
      960,  961,  962,  963,  951,  965,  966,    0,  968,  946,
      947,  948,  949,  950,  951,  969,  971,  975,  952,  955,
      956,  976,  957,  977,  967,  958,  978,  959,  950,  960,
      961,  962,  963,  951,  965,  966,  967,  968,  979,  980,
      982,  983,  984,  951,  969,  971,  975,  985,  986,  987,
      976,  988,  977,  967,  989,  978,  990,  991,  992,  993,
      994,  995,  996,  997,  998,  967,  999,  979,  980,  982,

      983,  984, 1000, 1001, 1002, 1003,  985,  986,  987, 1004,
      988, 1005, 1006,  989, 1003,  990,  991,  992,  993,  994,
      995,  996,  997,  998, 1008,  999, 1009, 1010, 1011, 1012,
     1014, 1000, 1001, 1002, 1003, 1015, 1016, 1017, 1004, 1018,
     1005, 1006, 1019, 1020, 1021, 1022, 1023, 1022, 1024, 1025,
     1026, 1027, 1029, 1008,    0, 1009, 1010, 1011, 1012, 1014,
     1028, 1028, 1030, 1031, 1015, 1016, 1017, 1031, 1018, 1032,
     1033, 1019, 1020, 1021, 1022, 1023, 1022, 1024, 1025, 1026,
     1027, 1029, 1034, 1028, 1035, 1035, 1035, 1035, 1035, 1028,
     1028, 1030, 1031,    0,    0,    0, 1031,    0, 1032, 1033,

     1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037,
        0, 1034, 1028,    0,    0, 1048, 1038, 1050, 1038, 1037,
     1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039,
     1040,    0, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041,
     1041, 1041, 1041, 1043, 1048,    0, 1050, 1040, 1037, 1042,
     1042, 1042, 1042, 1042, 1045, 1043, 1043, 1043, 1043, 1043,
     1044, 1044, 1044, 1044, 1044, 1053, 1045, 1045, 1045, 1045,
     1045, 1046, 1046, 1055, 1046, 1056, 1040, 1046, 1058, 1059,
     1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1046,
     1070,    0, 1071, 1046, 1053, 1072, 1073, 1072, 1074, 1065,

     1075, 1077, 1055,    0, 1056, 1078, 1078, 1058, 1059, 1060,
     1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1070,
     1046, 1071, 1080, 1081, 1072, 1073, 1072, 1074, 1065, 1075,
     1077, 1082, 1076, 1076, 1078, 1078, 1079, 1083, 1084, 1079,
     1085, 1086, 1087, 1089, 1090, 1092, 1091, 1076, 1093, 1094,
     1095, 1080, 1081, 1091, 1096, 1097, 1098, 1100, 1099, 1101,
     1082, 1076, 1076, 1102, 1103, 1079, 1083, 1084, 1079, 1085,
     1086, 1087, 1089, 1090, 1092, 1091, 1099, 1093, 1094, 1095,
     1104, 1105, 1091, 1096, 1097, 1098, 1100, 1099, 1101, 1106,
     1107, 1108, 1102, 1103, 1111, 1110, 1109, 1110, 1114, 1115,

     1116, 1117, 1118, 1119, 1120, 1099, 1121, 1110, 1122, 1104,
     1105, 1109, 1124, 1125, 1126, 1127, 1128, 1110, 1106, 1107,
     1108, 1130, 1134, 1111, 1135, 1109, 1126, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1136, 1121, 1110, 1122, 1137, 1138,
     1109, 1124, 1125, 1126, 1127, 1128, 1110, 1139, 1141, 1142,
     1130, 1134, 1143, 1135, 1144, 1126, 1145, 1146, 1147, 1148,
     1149, 1150, 1151, 1136, 1152, 1153, 1154, 1137, 1138, 1155,
     1156, 1157, 1158, 1159, 1160, 1161, 1139, 1141, 1142, 1163,
     1164, 1143, 1165, 1144, 1167, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1168, 1152, 1153, 1154, 1162, 1169, 1155, 1156,

     1157, 1158, 1159, 1160, 1161, 1162, 1170, 1171, 1163, 1164,
     1173, 1165, 1174, 1167, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1168, 1181, 1182, 1183, 1162, 1169, 1184, 1185, 1186,
     1188, 1187, 1187, 1189, 1190, 1170, 1171, 1191, 1190, 1173,
     1192, 1174, 1193, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1194, 1181, 1182, 1183, 1187, 1195, 1184, 1185, 1186, 1188,
     1187, 1187, 1189, 1190, 1196, 1197, 1191, 1190, 1198, 1192,
     1199, 1193, 1200, 1201, 1202, 1203, 1205, 1209,    0, 1194,
     1208, 1211, 1212, 1187, 1195, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1196, 1197, 1221, 1223, 1198, 1224, 1199,

     1225, 1200, 1201, 1202, 1203, 1205, 1209, 1208, 1226, 1208,
     1211, 1212, 1222, 1227, 1213, 1214, 1215, 1216, 1217, 1218,
     1219, 1220, 1228, 1230, 1221, 1223, 1231, 1224, 1222, 1225,
     1222, 1235, 1236, 1237, 1238, 1239, 1240, 1226, 1241, 1242,
     1243, 1222, 1227, 1244, 1245, 1246, 1247, 1248, 1251, 1252,
     1253, 1228, 1230, 1255, 1256, 1231, 1257, 1222, 1258, 1222,
     1235, 1236, 1237, 1238, 1239, 1240, 1264, 1241, 1242, 1243,
     1261, 1269, 1244, 1245, 1246, 1247, 1248, 1251, 1252, 1253,
     1270, 1261, 1255, 1256, 1272, 1257, 1273, 1258, 1274, 1275,
     1276, 1277, 1278, 1280, 1281, 1264, 1282, 1283, 1284, 1261,

     1269, 1285, 1286, 1288, 1289, 1290, 1282, 1291, 1293, 1270,
     1261, 1294, 1295, 1272, 1297, 1273, 1298, 1274, 1275, 1276,
     1277, 1278, 1280, 1281, 1296, 1282, 1283, 1284, 1296, 1299,
     1285, 1286, 1288, 1289, 1290, 1282, 1291, 1293, 1300, 1301,
     1294, 1295, 1303, 1297, 1304, 1298, 1305, 1306, 1307, 1309,
     1310, 1311, 1312, 1296, 1313, 1315, 1316, 1296, 1299, 1317,
     1318, 1321, 1322, 1323, 1321, 1325, 1326, 1300, 1301, 1327,
     1328, 1303, 1329, 1304, 1330, 1305, 1306, 1307, 1309, 1310,
     1311, 1312, 1331, 1313, 1315, 1316, 1332, 1333, 1317, 1318,
     1321, 1322, 1323, 1321, 1325, 1326, 1334, 1335, 1327, 1328,

     1339, 1329, 1340, 1330, 1343, 1343, 1343, 1343, 1343, 1345,
     1346, 1331, 1347, 1348, 1349, 1332, 1333, 1344, 1344, 1344,
     1344, 1344, 1350, 1351, 1352, 1334, 1335, 1353, 1354, 1339,
     1356, 1340, 1360, 1359, 1362, 1363, 1364, 1365, 1345, 1346,
     1366, 1347, 1348, 1349, 1367, 1368, 1369, 1370, 1371, 1372,
     1374, 1350, 1351, 1352, 1373, 1375, 1353, 1354, 1376, 1356,
     1359, 1360, 1359, 1362, 1363, 1364, 1365, 1377, 1378, 1366,
     1373, 1379, 1373, 1367, 1368, 1369, 1370, 1371, 1372, 1374,
     1381, 1382, 1386, 1373, 1375, 1387, 1388, 1376, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1377, 1378, 1397, 1373,

     1379, 1373, 1398, 1399, 1402, 1403, 1404, 1406, 1407, 1381,
     1382, 1386, 1408, 1409, 1387, 1388, 1415, 1389, 1390, 1391,
     1392, 1393, 1394, 1395, 1396, 1420, 1421, 1397, 1412, 1423,
     1424, 1398, 1399, 1402, 1403, 1404, 1406, 1407, 1425, 1412,
     1426, 1408, 1409, 1427, 1428, 1415, 1429, 1431, 1432, 1434,
     1433, 1435, 1436, 1437, 1420, 1421, 1439, 1412, 1423, 1424,
     1433, 1440, 1441, 1442, 1444, 1445, 1446, 1425, 1412, 1426,
     1447, 1448, 1427, 1428, 1447, 1429, 1431, 1432, 1434, 1433,
     1435, 1436, 1437, 1449, 1450, 1439, 1451, 1452, 1454, 1433,
     1440, 1441, 1442, 1444, 1445, 1446, 1455, 1456, 1457, 1447,

     1448, 1458, 1460, 1447, 1461, 1462, 1463, 1464, 1466, 1467,
     1468, 1469, 1449, 1450, 1473, 1451, 1452, 1454, 1472, 1474,
     1476, 1472, 1477, 1478, 1479, 1455, 1456, 1457, 1480, 1481,
     1458, 1460, 1482, 1461, 1462, 1463, 1464, 1466, 1467, 1468,
     1469, 1483, 1484, 1473, 1485, 1486, 1490, 1472, 1474, 1476,
     1472, 1477, 1478, 1479, 1491,    0,    0, 1480, 1481,    0,
        0, 1482, 1494, 1494, 1494, 1494, 1494,    0,    0,    0,
     1483, 1484,    0, 1485, 1486, 1490, 1495, 1495, 1495, 1495,
     1495, 1500, 1501, 1491, 1496, 1496, 1496, 1496, 1496, 1497,
     1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498,

     1499, 1499, 1499, 1499, 1499, 1502, 1503, 1504, 1505, 1498,
     1500, 1501, 1506, 1507, 1508, 1509, 1511,    0, 1515, 1514,
     1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
     1527,    0, 1529, 1530, 1502, 1503, 1504, 1505, 1498, 1531,
     1532, 1506, 1507, 1508, 1509, 1511, 1514, 1515, 1514, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1533, 1534, 1536, 1537, 1541, 1531, 1532,
     1542, 1543, 1544, 1545, 1546, 1547, 1528, 1548, 1528, 1549,
     1550, 1551, 1552, 1553, 1554, 1557, 1558, 1559, 1561, 1528,
     1562, 1563, 1533, 1534, 1536, 1537, 1541, 1564, 1570, 1542,

     1543, 1544, 1545, 1546, 1547, 1528, 1548, 1528, 1549, 1550,
     1551, 1552, 1553, 1554, 1557, 1558, 1559, 1561, 1567, 1562,
     1563, 1575, 1576, 1578, 1579, 1580, 1564, 1570, 1581, 1567,
     1582, 1583, 1584, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
     1594, 1595, 1596, 1597, 1599, 1588, 1600, 1567, 1601, 1603,
     1575, 1576, 1578, 1579, 1580, 1604, 1605, 1581, 1567, 1582,
     1583, 1584, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1594,
     1595, 1596, 1597, 1599, 1588, 1600, 1602, 1601, 1603, 1606,
     1602, 1607, 1609, 1610, 1604, 1605, 1611, 1612, 1613, 1615,
     1616, 1617, 1618, 1619, 1621, 1622, 1623, 1624, 1627, 1628,

     1629, 1627, 1631, 1632, 1633, 1602, 1634, 1635, 1606, 1602,
     1607, 1609, 1610, 1636, 1637, 1611, 1612, 1613, 1615, 1616,
     1617, 1618, 1619, 1621, 1622, 1623, 1624, 1627, 1628, 1629,
     1627, 1631, 1632, 1633, 1638, 1634, 1635, 1639, 1640, 1641,
     1645, 1646, 1636, 1637, 1649, 1649, 1649, 1649, 1649, 1650,
     1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651,    0,
        0, 1657, 1658, 1638,    0,    0, 1639, 1640, 1641, 1645,
     1646, 1652, 1652, 1652, 1652, 1652, 1653, 1659, 1660, 1653,
     1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1656,
     1657, 1658, 1661, 1653, 1655, 1655, 1655, 1655, 1655, 1662,

     1663, 1656, 1656, 1656, 1656, 1656, 1659, 1660, 1664, 1665,
     1666, 1668,    0, 1672, 1671, 1674, 1675, 1676, 1677, 1678,
     1679, 1661, 1653, 1680, 1681, 1682, 1683, 1684, 1662, 1663,
     1686, 1687, 1688, 1689, 1690, 1691, 1693, 1664, 1665, 1666,
     1668, 1671, 1672, 1671, 1674, 1675, 1676, 1677, 1678, 1679,
     1685, 1694, 1680, 1681, 1682, 1683, 1684, 1698, 1699, 1686,
     1687, 1688, 1689, 1690, 1691, 1693, 1685, 1700, 1685, 1701,
     1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1685,
     1694, 1711, 1714, 1715, 1716, 1718, 1698, 1699, 1719, 1720,
     1721,    0, 1727, 1732, 1733, 1685, 1700, 1685, 1701, 1702,

     1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1735, 1724,
     1711, 1714, 1715, 1716, 1718, 1736, 1737, 1719, 1720, 1721,
     1724, 1727, 1732, 1733, 1738, 1739, 1740, 1741, 1743, 1744,
     1745, 1746, 1747, 1748, 1749, 1751, 1752, 1735, 1724, 1753,
     1745, 1754, 1756, 1757, 1736, 1737, 1758, 1759, 1760, 1724,
     1761, 1759, 1762, 1738, 1739, 1740, 1741, 1743, 1744, 1745,
     1746, 1747, 1748, 1749, 1751, 1752, 1763, 1764, 1753, 1745,
     1754, 1756, 1757, 1766, 1767, 1758, 1759, 1760, 1768, 1761,
     1759, 1762, 1769, 1770, 1772, 1773, 1774, 1775, 1776, 1778,
     1779, 1780, 1781, 1785, 1784, 1763, 1764, 1784, 1786, 1788,

     1789, 1790, 1766, 1767, 1791, 1792, 1793, 1768, 1794, 1795,
     1796, 1769, 1770, 1772, 1773, 1774, 1775, 1776, 1778, 1779,
     1780, 1781, 1785, 1784, 1797, 1798, 1784, 1786, 1788, 1789,
     1790, 1802, 1803, 1791, 1792, 1793, 1809, 1794, 1795, 1796,
     1810, 1811, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1821,
     1822, 1823, 1824, 1797, 1798, 1826, 1828, 1829, 1830, 1831,
     1802, 1803, 1832, 1833, 1834, 1809, 1836, 1837, 1838, 1810,
     1811, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1821, 1822,
     1823, 1824, 1839, 1840, 1826, 1828, 1829, 1830, 1831, 1835,
     1841, 1832, 1833, 1834, 1842, 1836, 1837, 1838, 1844, 1835,

     1845, 1835, 1846, 1847, 1852, 1853, 1854, 1856, 1858, 1859,
     1861, 1839, 1840, 1862, 1865, 1868, 1872, 1866, 1835, 1841,
     1866, 1873, 1874, 1842, 1875, 1878, 1880, 1844, 1835, 1845,
     1835, 1846, 1847, 1852, 1853, 1854, 1856, 1858, 1859, 1861,
     1882, 1883, 1862, 1865, 1868, 1872, 1866, 1885, 1886, 1866,
     1873, 1874, 1888, 1875, 1878, 1880, 1890, 1892, 1893, 1894,
     1895, 1896, 1897, 1898, 1900, 1901, 1902, 1904, 1905, 1882,
     1883, 1906, 1907, 1908, 1909, 1910, 1885, 1886, 1911, 1912,
     1914, 1888, 1915, 1916, 1917, 1890, 1892, 1893, 1894, 1895,
     1896, 1897, 1898, 1900, 1901, 1902, 1904, 1905, 1918, 1920,

     1906, 1907, 1908, 1909, 1910, 1921, 1922, 1911, 1912, 1914,
     1925, 1915, 1916, 1917, 1926, 1927, 1928, 1930, 1934, 1935,
     1936, 1938, 1939, 1940, 1941, 1942, 1943, 1918, 1920, 1945,
     1946, 1947, 1948, 1949, 1921, 1922, 1951, 1953, 1954, 1925,
     1955, 1956, 1957, 1926, 1927, 1928, 1930, 1934, 1935, 1936,
     1938, 1939, 1940, 1941, 1942, 1943, 1958, 1959, 1945, 1946,
     1947, 1948, 1949, 1960, 1961, 1951, 1953, 1954, 1962, 1955,
     1956, 1957, 1963, 1960, 1964, 1960, 1965, 1966, 1967, 1969,
     1970, 1971, 1972, 1977, 1978, 1958, 1959, 1979, 1981, 1983,
     1984, 1986, 1960, 1961, 1987, 1990, 1991, 1962, 1993, 1991,

     1997, 1963, 1960, 1964, 1960, 1965, 1966, 1967, 1969, 1970,
     1971, 1972, 1977, 1978, 1998, 1999, 1979, 1981, 1983, 1984,
     1986, 2000, 2003, 1987, 1990, 1991, 2005, 1993, 1991, 1997,
     2007, 2008, 2010, 2011, 2013, 2015, 2017, 2018, 2019, 2020,
     2021, 2022, 2023, 1998, 1999, 2025, 2026, 2027, 2029, 2030,
     2000, 2003, 2031, 2032, 2033, 2005, 2034, 2035, 2036, 2007,
     2008, 2010, 2011, 2013, 2015, 2017, 2018, 2019, 2020, 2021,
     2022, 2023, 2037, 2039, 2025, 2026, 2027, 2029, 2030, 2040,
     2041, 2031, 2032, 2033, 2042, 2034, 2035, 2036, 2043, 2045,
     2046, 2047, 2050, 2051, 2052, 2053, 2055, 2061, 2062, 2063,

     2065, 2037, 2039, 2057, 2057, 2057, 2057, 2057, 2040, 2041,
     2066, 2067, 2068, 2042, 2069, 2070, 2072, 2043, 2045, 2046,
     2047, 2050, 2051, 2052, 2053, 2055, 2061, 2062, 2063, 2065,
     2073, 2074, 2075, 2076, 2078, 2080, 2081, 2082, 2083, 2066,
     2067, 2068, 2084, 2069, 2070, 2072, 2085, 2086, 2088, 2089,
     2090, 2091, 2092, 2093, 2094, 2096, 2097, 2098, 2087, 2073,
     2074, 2075, 2076, 2078, 2080, 2081, 2082, 2083, 2087, 2099,
     2087, 2084, 2104, 2105, 2106, 2085, 2086, 2088, 2089, 2090,
     2091, 2092, 2093, 2094, 2096, 2097, 2098, 2087, 2108, 2110,
     2111, 2113, 2114, 2117, 2120, 2124, 2125, 2087, 2099, 2087,

     2126, 2104, 2105, 2106, 2118, 2127, 2130, 2118, 2132, 2134,
     2135, 2137, 2138, 2140, 2142, 2144, 2145, 2108, 2110, 2111,
     2113, 2114, 2117, 2120, 2124, 2125, 2146, 2147, 2148, 2126,
     2149, 2150, 2152, 2118, 2127, 2130, 2118, 2132, 2134, 2135,
     2137, 2138, 2140, 2142, 2144, 2145, 2153, 2154, 2156, 2157,
     2158, 2159, 2160, 2161, 2162, 2146, 2147, 2148, 2163, 2149,
     2150, 2152, 2164, 2166, 2167, 2168, 2169, 2170, 2172, 2173,
     2174, 2177, 2178, 2179, 2180, 2153, 2154, 2156, 2157, 2158,
     2159, 2160, 2161, 2162, 2182,    0,    0, 2163,    0,    0,
        0, 2164, 2166, 2167, 2168, 2169, 2170, 2172, 2173, 2174,

     2177, 2178, 2179, 2180, 2183, 2183, 2183, 2183, 2183, 2190,
     2191, 2192, 2194, 2182, 2185, 2185, 2185, 2185, 2185, 2186,
     2186, 2186, 2186, 2186, 2195, 2196, 2197, 2198, 2199, 2201,
     2202, 2203, 2204, 2205, 2207, 2209, 2210, 2211, 2190, 2191,
     2192, 2194, 2212, 2213, 2214, 2215, 2217, 2218,    0, 2219,
        0, 2220, 2221, 2195, 2196, 2197, 2198, 2199, 2201, 2202,
     2203, 2204, 2205, 2207, 2209, 2210, 2211, 2216, 2222, 2223,
     2225, 2212, 2213, 2214, 2215, 2217, 2218, 2216, 2219, 2216,
     2220, 2221, 2226, 2227, 2228, 2233, 2234, 2235, 2237, 2239,
     2240, 2242, 2243, 2246, 2249, 2253, 2216, 2222, 2223, 2225,

     2247, 2254, 2255, 2247, 2256, 2259, 2216, 2261, 2216, 2263,
     2264, 2226, 2227, 2228, 2233, 2234, 2235, 2237, 2239, 2240,
     2242, 2243, 2246, 2249, 2253, 2266, 2267, 2269, 2271, 2247,
     2254, 2255, 2247, 2256, 2259, 2273, 2261, 2274, 2263, 2264,
     2275, 2276, 2277, 2278, 2279, 2281, 2282, 2283, 2285, 2286,
     2287, 2288, 2289, 2290, 2266, 2267, 2269, 2271, 2291, 2292,
     2293, 2295, 2296, 2297, 2273, 2298, 2274, 2299, 2301, 2275,
     2276, 2277, 2278, 2279, 2281, 2282, 2283, 2285, 2286, 2287,
     2288, 2289, 2290, 2302, 2303, 2306, 2307, 2291, 2292, 2293,
     2295, 2296, 2297, 2308, 2298, 2309, 2299, 2301, 2311, 2312,

     2314, 2316, 2318, 2319, 2320, 2321, 2322, 2323, 2325, 2326,
     2328, 2329, 2302, 2303, 2306, 2307, 2331, 2332, 2333, 2334,
     2335, 2336, 2308, 2337, 2309, 2338, 2339, 2311, 2312, 2314,
     2316, 2318, 2319, 2320, 2321, 2322, 2323, 2325, 2326, 2328,
     2329, 2340, 2342, 2346, 2348, 2331, 2332, 2333, 2334, 2335,
     2336, 2349, 2337, 2350, 2338, 2339, 2351, 2352, 2353, 2357,
     2358, 2359, 2360, 2361, 2363, 2364, 2365, 2366, 2368, 2370,
     2340, 2342, 2346, 2348, 2374, 2375, 2376, 2377, 2378, 2379,
     2349, 2380, 2350, 2381, 2383, 2351, 2352, 2353, 2357, 2358,
     2359, 2360, 2361, 2363, 2364, 2365, 2366, 2368, 2370, 2384,

     2385, 2386, 2387, 2374, 2375, 2376, 2377, 2378, 2379, 2388,
     2380, 2392, 2381, 2383, 2393, 2395, 2396, 2397, 2398, 2399,
     2400, 2402, 2405, 2406, 2407, 2409, 2411, 2413, 2384, 2385,
     2386, 2387, 2415, 2416, 2417, 2418, 2419, 2420, 2388, 2422,
     2392, 2423, 2425, 2393, 2395, 2396, 2397, 2398, 2399, 2400,
     2402, 2405, 2406, 2407, 2409, 2411, 2413, 2426, 2428, 2429,
     2430, 2415, 2416, 2417, 2418, 2419, 2420, 2431, 2422, 2432,
     2423, 2425, 2433, 2434, 2435, 2436, 2437, 2439, 2443, 2445,
     2446, 2447, 2448, 2449, 2450, 2454, 2426, 2428, 2429, 2430,
     2455, 2456, 2457, 2458, 2460, 2461, 2431, 2462, 2432, 2463,

     2465, 2433, 2434, 2435, 2436, 2437, 2439, 2443, 2445, 2446,
     2447, 2448, 2449, 2450, 2454, 2467, 2471, 2472, 2473, 2455,
     2456, 2457, 2458, 2460, 2461, 2474, 2462, 2475, 2463, 2465,
     2476, 2477, 2478, 2480, 2481, 2482, 2483, 2484, 2485, 2489,
     2490, 2492, 2493, 2494, 2467, 2471, 2472, 2473, 2495, 2496,
     2497, 2499, 2502, 2503, 2474, 2504, 2475,    0,    0, 2476,
     2477, 2478, 2480, 2481, 2482, 2483, 2484, 2485, 2489, 2490,
     2492, 2493, 2494, 2507, 2509, 2511, 2513, 2495, 2496, 2497,
     2499, 2502, 2503, 2514, 2504, 2506, 2506, 2506, 2506, 2506,
     2515, 2516, 2517, 2518, 2520, 2521, 2523, 2524, 2526, 2527,

     2528, 2529, 2507, 2509, 2511, 2513, 2530, 2531, 2532, 2533,
     2534, 2535, 2514, 2537, 2541, 2543, 2544, 2545, 2546, 2515,
     2516, 2517, 2518, 2520, 2521, 2523, 2524, 2526, 2527, 2528,
     2529, 2547, 2548, 2552, 2553, 2530, 2531, 2532, 2533, 2534,
     2535, 2554, 2537, 2541, 2543, 2544, 2545, 2546, 2555, 2556,
     2558, 2559, 2560, 2561, 2563, 2565, 2569, 2570, 2571, 2572,
     2547, 2548, 2552, 2553, 2573, 2574, 2575, 2576, 2578, 2579,
     2554, 2580, 2581, 2582, 2583, 2587, 2588, 2555, 2556, 2558,
     2559, 2560, 2561, 2563, 2565, 2569, 2570, 2571, 2572, 2590,
     2591, 2592, 2593, 2573, 2574, 2575, 2576, 2578, 2579, 2594,

     2580, 2581, 2582, 2583, 2587, 2588, 2595, 2597, 2600, 2601,
     2602, 2604, 2604, 2604, 2604, 2604, 2607, 2609, 2590, 2591,
     2592, 2593, 2605, 2605, 2605, 2605, 2605, 2611, 2594, 2606,
     2606, 2606, 2606, 2606, 2613, 2595, 2597, 2600, 2601, 2602,
     2614, 2615, 2616, 2617, 2618, 2607, 2609, 2620, 2621, 2623,
     2624, 2626, 2627, 2628, 2629, 2630, 2611, 2631, 2632, 2633,
     2634, 2635, 2637, 2613, 2641, 2643, 2644, 2645, 2646, 2614,
     2615, 2616, 2617, 2618, 2647, 2648, 2620, 2621, 2623, 2624,
     2626, 2627, 2628, 2629, 2630, 2652, 2631, 2632, 2633, 2634,
     2635, 2637, 2653, 2641, 2643, 2644, 2645, 2646, 2654, 2655,

     2656, 2658, 2659, 2647, 2648, 2660, 2661, 2663, 2665, 2669,
     2670, 2671, 2672, 2673, 2652, 2674, 2675, 2676, 2678, 2679,
     2680, 2653, 2681, 2682, 2683, 2687, 2688, 2654, 2655, 2656,
     2658, 2659, 2690, 2691, 2660, 2661, 2663, 2665, 2669, 2670,
     2671, 2672, 2673, 2692, 2674, 2675, 2676, 2678, 2679, 2680,
     2693, 2681, 2682, 2683, 2687, 2688, 2694, 2695, 2697, 2700,
     2701, 2690, 2691, 2702, 2704, 2705, 2707, 2709, 2710, 2711,
     2713, 2717, 2692, 2718, 2719, 2721, 2722, 2723, 2727, 2693,
     2730, 2731, 2734, 2737, 2738, 2694, 2695, 2697, 2700, 2701,
     2739, 2740, 2702, 2704, 2705, 2707, 2709, 2710, 2711, 2713,

     2717, 2741, 2718, 2719, 2721, 2722, 2723, 2727, 2743, 2730,
     2731, 2734, 2737, 2738, 2745, 2746, 2749, 2750, 2751, 2739,
     2740, 2753, 2755, 2758, 2759, 2760, 2761, 2762, 2763, 2764,
     2741, 2765, 2767, 2769, 2772, 2773, 2775, 2743, 2777, 2778,
     2779, 2781, 2785, 2745, 2746, 2749, 2750, 2751, 2786, 2787,
     2753, 2755, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2789,
     2765, 2767, 2769, 2772, 2773, 2775, 2790, 2777, 2778, 2779,
     2781, 2785, 2791, 2795, 2798, 2799, 2802, 2786, 2787, 2805,
     2806, 2807, 2808, 2809, 2811, 2813, 2814, 2817, 2789, 2818,
     2819, 2821, 2823, 2826, 2827, 2790, 2828, 2829, 2830, 2831,

     2832, 2791, 2795, 2798, 2799, 2802, 2833, 2835, 2805, 2806,
     2807, 2808, 2809, 2811, 2813, 2814, 2817, 2837, 2818, 2819,
     2821, 2823, 2826, 2827, 2841, 2828, 2829, 2830, 2831, 2832,
     2840, 2840, 2840, 2840, 2840, 2833, 2835, 2842, 2844, 2846,
     2847, 2848, 2850, 2854, 2855, 2856, 2837, 2858, 2859, 2860,
     2864, 2867, 2868, 2841, 2871, 2874, 2875, 2876, 2877, 2878,
     2880, 2882, 2883, 2886, 2887, 2888, 2842, 2844, 2846, 2847,
     2848, 2850, 2854, 2855, 2856, 2890, 2858, 2859, 2860, 2864,
     2867, 2868, 2892, 2871, 2874, 2875, 2876, 2877, 2878, 2880,
     2882, 2883, 2886, 2887, 2888, 2895, 2896, 2897, 2898, 2899,

     2900, 2901, 2902, 2904, 2890, 2906, 2909, 2909, 2909, 2909,
     2909, 2892, 2910, 2910, 2910, 2910, 2910, 2911, 2912, 2914,
     2916, 2917, 2918, 2920, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2902, 2904, 2924, 2906, 2925, 2926, 2928, 2929, 2930,
     2934, 2937, 2938, 2941, 2944, 2945, 2911, 2912, 2914, 2916,
     2917, 2918, 2920, 2946, 2947, 2948, 2950, 2952, 2953, 2956,
     2957, 2958, 2924, 2960, 2925, 2926, 2928, 2929, 2930, 2934,
     2937, 2938, 2941, 2944, 2945, 2962, 2965, 2966, 2967, 2968,
     2969, 2970, 2946, 2947, 2948, 2950, 2952, 2953, 2956, 2957,
     2958, 2971, 2960, 2972, 2974, 2976, 2979, 2980, 2981, 2982,

     2983, 2986, 2986, 2989, 2962, 2965, 2966, 2967, 2968, 2969,
     2970, 2990, 2991, 2992, 2986, 2994, 2986, 2986, 2986, 2995,
     2971, 2996, 2972, 2974, 2976, 2979, 2980, 2981, 2982, 2983,
     2986, 2986, 2989, 2997, 2999, 3000, 3002, 3003, 3004, 3006,
     2990, 2991, 2992, 2986, 2994, 2986, 2986, 2986, 2995, 3007,
     2996, 3008, 3009, 3011, 3013, 3014, 3009, 3015, 3016, 3017,
     3018, 3019, 2997, 2999, 3000, 3002, 3003, 3004, 3006, 3020,
     3021, 3022, 3023, 3024, 3030,    0, 3031,    0, 3007,    0,
     3008, 3009, 3011, 3013, 3014, 3009, 3015, 3016, 3017, 3018,
     3019, 3027, 3027, 3032, 3033, 3035, 3036, 3037, 3020, 3021,

     3022, 3023, 3024, 3030, 3027, 3031, 3027, 3027, 3027, 3038,
     3040, 3041, 3043, 3044, 3045, 3047, 3048, 3049, 3052, 3054,
     3027, 3027, 3032, 3033, 3035, 3036, 3037, 3050, 3055, 3056,
     3057, 3050, 3058, 3027, 3059, 3027, 3027, 3027, 3038, 3040,
     3041, 3043, 3044, 3045, 3047, 3048, 3049, 3052, 3054, 3060,
     3061, 3062, 3063, 3064, 3065,    0, 3050, 3055, 3056, 3057,
     3050, 3058, 3071, 3059, 3072, 3073, 3074, 3076, 3077, 3078,
     3079, 3068, 3068, 3081, 3082, 3084, 3085, 3086, 3060, 3061,
     3062, 3063, 3064, 3065, 3068, 3088, 3068, 3068, 3068, 3089,
     3090, 3071, 3093, 3072, 3073, 3074, 3076, 3077, 3078, 3079,

     3068, 3068, 3081, 3082, 3084, 3085, 3086, 3091, 3095, 3096,
     3097, 3091, 3098, 3068, 3088, 3068, 3068, 3068, 3089, 3090,
     3099, 3093, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3109,
     3109, 3112, 3113, 3114, 3115, 3117, 3091, 3095, 3096, 3097,
     3091, 3098, 3109, 3118, 3109, 3109, 3109, 3119, 3120, 3099,
     3122, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3109, 3109,
     3112, 3113, 3114, 3115, 3117, 3123, 3125, 3126, 3127, 3129,
     3130, 3109, 3118, 3109, 3109, 3109, 3119, 3120, 3131, 3122,
     3132, 3134, 3136, 3137, 3132, 3138, 3139, 3140, 3141, 3142,
     3144, 3145, 3147, 3148, 3123, 3125, 3126, 3127, 3129, 3130,

     3149, 3150, 3151, 3152, 3149, 3153, 3155, 3131, 3158, 3132,
     3134, 3136, 3137, 3132, 3138, 3139, 3140, 3141, 3142, 3144,
     3145, 3147, 3148, 3160, 3162, 3165, 3170, 3171, 3172, 3149,
     3150, 3151, 3152, 3149, 3153, 3155, 3175, 3158, 3181, 3175,
     3182, 3184, 3185, 3186, 3187, 3188, 3189, 3186, 3190, 3192,
     3195, 3197, 3160, 3162, 3165, 3170, 3171, 3172, 3199, 3202,
     3207, 3208, 3209, 3212, 3218, 3175, 3212, 3181, 3175, 3182,
     3184, 3185, 3186, 3187, 3188, 3189, 3186, 3190, 3192, 3195,
     3197, 3219, 3221, 3222, 3224, 3225, 3226, 3199, 3202, 3207,
     3208, 3209, 3212, 3218, 3223, 3212, 3227, 3229, 3223, 3232,

     3234, 3236, 3239, 3244, 3245, 3246, 3249, 3255, 3256, 3249,
     3219, 3221, 3222, 3224, 3225, 3226, 3258, 3259, 3260, 3261,
     3262, 3263, 3260, 3223, 3264, 3227, 3229, 3223, 3232, 3234,
     3236, 3239, 3244, 3245, 3246, 3249, 3255, 3256, 3249, 3266,
     3269, 3271, 3273, 3276, 3281, 3258, 3259, 3260, 3261, 3262,
     3263, 3260, 3282, 3264, 3283, 3286, 3291, 3293, 3286, 3294,
     3295, 3296, 3297, 3298, 3299, 3300, 3302, 3303, 3266, 3269,
     3271, 3273, 3276, 3281, 3305, 3307, 3309, 3310, 3311, 3313,
     3314, 3282, 3315, 3283, 3286, 3291, 3293, 3286, 3294, 3295,
     3296, 3297, 3298, 3299, 3300, 3302, 3303, 3316, 3317, 3318,

     3319, 3320, 3322, 3305, 3307, 3309, 3310, 3311, 3313, 3314,
     3323, 3315, 3325, 3327, 3329, 3330, 3331, 3333, 3334, 3335,
     3336, 3337, 3338, 3339, 3340, 3342, 3316, 3317, 3318, 3319,
     3320, 3322, 3343, 3345, 3347, 3349, 3350, 3351, 3353, 3323,
     3354, 3325, 3327, 3329, 3330, 3331, 3333, 3334, 3335, 3336,
     3337, 3338, 3339, 3340, 3342, 3355, 3356, 3357, 3358, 3359,
     3360, 3343, 3345, 3347, 3349, 3350, 3351, 3353, 3362, 3354,
     3363, 3365, 3367, 3369, 3370, 3371, 3373, 3374, 3375, 3376,
     3377, 3378, 3379, 3381, 3355, 3356, 3357, 3358, 3359, 3360,
     3382, 3384, 3385, 3386, 3388, 3389, 3390, 3362, 3391, 3363,

     3365, 3367, 3369, 3370, 3371, 3373, 3374, 3375, 3376, 3377,
     3378, 3379, 3381, 3392, 3393, 3394, 3396, 3397, 3399, 3382,
     3384, 3385, 3386, 3388, 3389, 3390, 3400, 3391, 3401, 3403,
     3404, 3405, 3406, 3407, 3408, 3409, 3411, 3412, 3414, 3415,
     3416, 3418, 3392, 3393, 3394, 3396, 3397, 3399, 3419, 3420,
     3421, 3422, 3423, 3424, 3426, 3400, 3427, 3401, 3403, 3404,
     3405, 3406, 3407, 3408, 3409, 3411, 3412, 3414, 3415, 3416,
     3418, 3429, 3430, 3431, 3432, 3434, 3437, 3419, 3420, 3421,
     3422, 3423, 3424, 3426, 3438, 3427, 3442, 3443, 3444, 3446,
     3449, 3450, 3454, 3455, 3456, 3458, 3461, 3462, 3466, 3467,

     3429, 3430, 3431, 3432, 3434, 3437, 3468, 3470, 3473, 3474,
     3478, 3480, 3481, 3438, 3482, 3442, 3443, 3444, 3446, 3449,
     3450, 3454, 3455, 3456, 3458, 3461, 3462, 3466, 3467, 3483,
     3486, 3487, 3488, 3489, 3492, 3468, 3470, 3473, 3474, 3478,
     3480, 3481, 3493, 3482, 3494, 3495, 3498, 3499, 3500, 3501,
     3503, 3504, 3506, 3507, 3508, 3510, 3511, 3512, 3483, 3486,
     3487, 3488, 3489, 3492, 3514, 3515, 3516, 3518, 3521, 3524,
     3527, 3493, 3530, 3494, 3495, 3498, 3499, 3500, 3501, 3503,
     3504, 3506, 3507, 3508, 3510, 3511, 3512, 3531, 3532, 3533,
     3534, 3535, 3536, 3514, 3515, 3516, 3518, 3521, 3524, 3527,

     3537, 3530, 3538, 3539, 3541, 3543, 3545, 3547, 3548, 3549,
     3550, 3551, 3552, 3553, 3554, 3555, 3531, 3532, 3533, 3534,
     3535, 3536, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3537,
     3563, 3538, 3539, 3541, 3543, 3545, 3547, 3548, 3549, 3550,
     3551, 3552, 3553, 3554, 3555, 3564, 3565, 3566, 3567, 3568,
     3569, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3570, 3563,
     3571, 3572, 3573, 3574, 3579, 3580, 3581, 3582, 3583, 3584,
     3585, 3586, 3587, 3588, 3564, 3565, 3566, 3567, 3568, 3569,
     3589, 3590, 3591, 3592, 3593, 3594, 3595, 3570, 3596, 3571,
     3572, 3573, 3574, 3579, 3580, 3581, 3582, 3583, 3584, 3585,

     3586, 3587, 3588, 3597, 3598,    0,    0,    0,    0, 3589,
     3590, 3591, 3592, 3593, 3594, 3595,    0, 3596,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3597, 3598, 3604,    0, 3604, 3605,    0, 3605,
     3606, 3606, 3606, 3606, 3606, 3607,    0, 3607, 3607, 3607,
     3607, 3607, 3607, 3608,    0,    0, 3608, 3608, 3608,    0,
     3608, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3610,
     3610, 3610, 3610, 3610, 3610, 3610, 3610, 3611,    0, 3611,
     3611, 3611, 3611, 3611, 3611, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,

     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3604 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3603 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 211:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 219:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 220:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 221:
case 222:
case 223:
case 224:
case 225:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 226:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 227:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 228:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
case 231:
case 232:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 233:
case 234:
case 235:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 236:
case 237:
case 238:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 239:
case 240:
case 241:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 242:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 243:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 244:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 248:
/* rule 248 can match eol */
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 250:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 251:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 254:
YY_RULE_SETUP
{}
	YY_BREAK
case 255:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 257:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3604 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3604 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3603);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8StringBuffer sBuffer (256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (delim);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (ch);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8StringBuffer sBuffer(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer.charAt(i)) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									{
									if (checkForSign)
										{
										if (sBuffer.charAt(i) == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer.makeStringAndClear(), isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(ch);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(ch);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

