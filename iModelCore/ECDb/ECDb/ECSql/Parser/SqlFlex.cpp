#line 2 "E:\\BSW\\temp\\imode02\\src\\imodel02\\iModelCore\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














    #define yy_create_buffer SQLyy_create_buffer

    #define yy_delete_buffer SQLyy_delete_buffer

    #define yy_scan_buffer SQLyy_scan_buffer

    #define yy_scan_string SQLyy_scan_string

    #define yy_scan_bytes SQLyy_scan_bytes

    #define yy_init_buffer SQLyy_init_buffer

    #define yy_flush_buffer SQLyy_flush_buffer

    #define yy_load_buffer_state SQLyy_load_buffer_state

    #define yy_switch_to_buffer SQLyy_switch_to_buffer

    #define yypush_buffer_state SQLyypush_buffer_state

    #define yypop_buffer_state SQLyypop_buffer_state

    #define yyensure_buffer_stack SQLyyensure_buffer_stack

    #define yylex SQLyylex

    #define yyrestart SQLyyrestart

    #define yylex_init SQLyylex_init

    #define yylex_init_extra SQLyylex_init_extra

    #define yylex_destroy SQLyylex_destroy

    #define yyget_debug SQLyyget_debug

    #define yyset_debug SQLyyset_debug

    #define yyget_extra SQLyyget_extra

    #define yyset_extra SQLyyset_extra

    #define yyget_in SQLyyget_in

    #define yyset_in SQLyyset_in

    #define yyget_out SQLyyget_out

    #define yyset_out SQLyyset_out

    #define yyget_leng SQLyyget_leng

    #define yyget_text SQLyyget_text

    #define yyget_lineno SQLyyget_lineno

    #define yyset_lineno SQLyyset_lineno

    
        #define yyget_column SQLyyget_column

        #define yyset_column SQLyyset_column

    
    #define yywrap SQLyywrap



    #define yyget_lval SQLyyget_lval

    #define yyset_lval SQLyyset_lval






    #define yyalloc SQLyyalloc

    #define yyrealloc SQLyyrealloc

    #define yyfree SQLyyfree







/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */



/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void SQLyyrestart ( FILE *input_file , yyscan_t yyscanner );
void SQLyy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void SQLyy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void SQLyy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void SQLyypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void SQLyypop_buffer_state ( yyscan_t yyscanner );


static void SQLyyensure_buffer_stack ( yyscan_t yyscanner );
static void SQLyy_load_buffer_state ( yyscan_t yyscanner );
static void SQLyy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)


YY_BUFFER_STATE SQLyy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *SQLyyalloc ( yy_size_t , yyscan_t yyscanner );
void *SQLyyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void SQLyyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer SQLyy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1496] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      136,  136,  142,  140,  138,  137,  140,  101,   98,  129,
      101,   88,   90,   89,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,   97,   96,  127,  101,  103,  103,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  130,  128,  131,  101,  101,  111,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  101,  111,

      140,  136,  136,  136,  136,  134,  101,   98,  101,  101,
      101,   88,   90,   89,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  135,   97,   96,  138,   94,    0,
       99,   91,   93,   92,  100,    0,    0,    4,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,   48,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   95,  105,    0,  106,
      103,    0,    0,  102,  102,  102,    4,  102,  102,  102,
      102,  102,  102,   11,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   41,   48,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,   61,   63,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  126,  116,  126,  126,  126,
      111,  126,  110,  110,  110,    4,  110,  110,  110,  110,
      110,  110,   11,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   41,   48,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   61,   63,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  122,  126,  126,  126,  111,  126,
        0,  132,  136,  136,   94,  136,   99,   91,   93,   92,
      100,  136,  136,    4,  136,  136,  136,  136,  136,  136,
       11,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   41,   48,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,   61,   63,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   95,    0,  139,    1,    2,    3,    5,    6,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,    0,    0,    0,    0,    0,    0,   54,
       56,    0,   58,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   70,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  109,  106,    0,

        0,  107,  104,    1,    2,    3,    5,    6,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   28,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
       44,  102,  102,  102,  102,  102,  102,   54,   56,  102,
       58,  102,  102,  102,  102,  102,  102,  102,  102,  102,
       70,  102,  102,   72,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    0,  119,  126,  114,  126,  111,
        0,  117,    1,    2,    3,    5,    6,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,   28,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   44,
      110,  110,  110,  110,  110,  110,   54,   56,  110,   58,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   70,
      110,  110,   72,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    0,  125,  120,  126,  126,  111,    0,
      123,  132,    0,  132,  136,  136,    1,    2,    3,    5,
        6,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,   28,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,   44,  136,  136,  136,  136,  136,  136,
       54,   56,  136,   58,  136,  136,  136,  136,  136,  136,
      136,  136,  136,   70,  136,  136,   72,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,    0,    0,    0,
       10,    0,   12,   13,    0,    0,    0,    0,   20,    0,
        0,   23,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,   37,   38,    0,    0,    0,    0,    0,
        0,   47,   49,   50,   51,    0,   53,    0,    0,   59,
        0,   62,    0,    0,   66,    0,    0,    0,   71,    0,
       74,   75,   77,    0,    0,    0,    0,    0,    0,    0,

       86,    0,    0,  108,  102,  102,  102,   10,  102,   12,
       13,  102,  102,  102,  102,   20,  102,  102,   23,  102,
      102,  102,   27,  102,  102,  102,  102,  102,  102,  102,
       37,   38,  102,  102,  102,  102,  102,  102,   47,   49,
       50,   51,  102,   53,  102,  102,   59,  102,   62,  102,
      102,   66,  102,  102,  102,   71,  102,   74,   75,   77,
      102,  102,  102,  102,  102,  102,  102,   86,  102,  119,
      126,    0,  118,  111,  117,  110,  110,  110,   10,  110,
       12,   13,  110,  110,  110,  110,   20,  110,  110,   23,
      110,  110,  110,   27,  110,  110,  110,  110,  110,  110,

      110,   37,   38,  110,  110,  110,  110,  110,  110,   47,
       49,   50,   51,  110,   53,  110,  110,   59,  110,   62,
      110,  110,   66,  110,  110,  110,   71,  110,   74,   75,
       77,  110,  110,  110,  110,  110,  110,  110,   86,  110,
      125,    0,  124,  126,  111,  123,    0,  132,  136,  136,
      136,   10,  136,   12,   13,  136,  136,  136,  136,   20,
      136,  136,   23,  136,  136,  136,   27,  136,  136,  136,
      136,  136,  136,  136,   37,   38,  136,  136,  136,  136,
      136,  136,   47,   49,   50,   51,  136,   53,  136,  136,
       59,  136,   62,  136,  136,   66,  136,  136,  136,   71,

      136,   74,   75,   77,  136,  136,  136,  136,  136,  136,
      136,   86,  136,    0,    0,    0,    0,    0,   15,   16,
        0,    0,    0,    0,    0,    0,    0,   29,    0,    0,
       33,   34,    0,   39,    0,   42,    0,   45,    0,    0,
       52,   55,    0,    0,   64,   65,   68,    0,    0,    0,
        0,   78,    0,    0,    0,   82,   84,    0,   87,  102,
      102,  102,  102,  102,   15,   16,  102,  102,  102,  102,
      102,  102,  102,   29,  102,  102,   33,   34,  102,   39,
      102,   42,  102,   45,  102,  102,   52,   55,  102,  102,
       64,   65,   68,  102,  102,  102,  102,   78,  102,  102,

      102,   82,   84,  102,   87,  112,  118,  110,  110,  110,
      110,  110,   15,   16,  110,  110,  110,  110,  110,  110,
      110,   29,  110,  110,   33,   34,  110,   39,  110,   42,
      110,   45,  110,  110,   52,   55,  110,  110,   64,   65,
       68,  110,  110,  110,  110,   78,  110,  110,  110,   82,
       84,  110,   87,  124,  113,    0,  133,  136,  136,  136,
      136,  136,   15,   16,  136,  136,  136,  136,  136,  136,
      136,   29,  136,  136,   33,   34,  136,   39,  136,   42,
      136,   45,  136,  136,   52,   55,  136,  136,   64,   65,
       68,  136,  136,  136,  136,   78,  136,  136,  136,   82,

       84,  136,   87,    0,    0,    9,    0,   14,    0,    0,
       22,    0,   25,    0,   30,   31,   32,    0,   40,   43,
        0,    0,    0,   60,    0,   69,   73,    0,   79,    0,
       81,   85,    0,  102,  102,    9,  102,   14,  102,  102,
       22,  102,   25,  102,   30,   31,   32,  102,   40,   43,
      102,  102,  102,   60,  102,   69,   73,  102,   79,  102,
       81,   85,  102,  126,  110,  110,    9,  110,   14,  110,
      110,   22,  110,   25,  110,   30,   31,   32,  110,   40,
       43,  110,  110,  110,   60,  110,   69,   73,  110,   79,
      110,   81,   85,  110,  126,  133,  133,  136,  136,    9,

      136,   14,  136,  136,   22,  136,   25,  136,   30,   31,
       32,  136,   40,   43,  136,  136,  136,   60,  136,   69,
       73,  136,   79,  136,   81,   85,  136,    0,    7,    8,
        0,   21,    0,    0,   35,   44,    0,   57,    0,    0,
       80,   83,  102,    7,    8,  102,   21,  102,  102,   35,
       44,  102,   57,  102,  102,   80,   83,  115,  110,    7,
        8,  110,   21,  110,  110,   35,   44,  110,   57,  110,
      110,   80,   83,  121,  133,  136,    7,    8,  136,   21,
      136,  136,   35,   44,  136,   57,  136,  136,   80,   83,
       36,    0,   24,    0,    0,   67,    0,   36,  102,   24,

      102,  102,   67,  102,   36,  110,   24,  110,  110,   67,
      110,   36,  136,   24,  136,  136,   67,  136,    0,    0,
        0,   46,   76,  102,  102,  102,   46,   76,  110,  110,
      110,   46,   76,  136,  136,  136,   46,   76,    0,    0,
        0,  102,  102,  102,  110,  110,  110,  136,  136,  136,
        0,    0,    0,  102,  102,  102,  110,  110,  110,  136,
      136,  136,   17,   18,   26,   17,   18,   26,   17,   18,
       26,   17,   18,   26,    0,  102,  110,  136,    0,  102,
      110,  136,    0,  102,  110,  136,    0,  102,  110,  136,
       19,   19,   19,   19,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   11,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   51,   11,   80,   11,   81,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static const YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    3,    8,    1,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        1,    9
    } ;

static const flex_int16_t yy_base[1505] =
    {   0,
        0,    0,   82,    0,  164,    0,  233,  240,  247,  254,
      274,    0,  621, 3468,  355, 3468,  586, 3468, 3468, 3468,
      581,  338, 3468,  340,  328,  340,  342,  353,  387,  392,
      326,  345,  334,  336,  393,  358,  399,  438,  436,  442,
      446,  434,  355,  358,  511, 3468, 3468,  473,  503,  508,
      492,  511,  504,  523,  556,  561,  385,  404,  496,  402,
        0,  572,  520,  568,  607,  585,  612,  577,  620,  457,
      452, 3468, 3468, 3468,    0,  677,  684,  669,  689,  685,
      733,  725,  740,  443,  516,  612,  503,    0,  687,  563,
      735,  768,  783,  786,  786,  783,  530,  555,  845,  852,

      431,    0,  439,    0,  532, 3468,    0,    0,    0,  519,
     3468,  646,    0,  473,  837,  857,  853,  901,  893,  908,
      556,  619,  616,  607,  855,  657,  903,  936,  951,  954,
      954,  951,  637,  672, 3468,  420,    0,  720, 3468,  491,
     3468, 3468, 3468, 3468, 3468,  672,  809,  690,  709,  721,
      720,  732,  736,  739, 3468,  745,  871,  781,  782,  799,
      978,  813,  831,  846,  871,  904,  911,  917,  973,  920,
      933,  946,  958,  966,  965,  959,  998, 3468,  978,  994,
      995, 1000, 1000, 1001, 1001, 1002, 1011, 1019, 1015, 1024,
     1010, 1030, 1025, 1021, 1022, 1023, 1020, 1026, 1035, 1032,

     1027, 1055, 1051, 1049, 1058, 1067, 3468, 1086, 1114, 1118,
     1123, 1137,    0,    0, 1078, 1117, 1094, 1115, 1121, 1113,
     1120, 1120, 1121,    0, 1118, 1125, 1124, 1122, 1121, 1137,
     1125, 1124, 1128, 1129, 1150, 1152, 1153, 1177, 1147, 1145,
     1143, 1164, 1169, 1167, 1169, 1178,    0, 1184, 1188, 1188,
     1181, 1176, 1188, 1183, 1184, 1193, 1200, 1195, 1208, 1193,
     1213, 1209, 1205, 1227, 1206, 1219, 1225, 1235, 1231, 1228,
     1241, 1247, 1244, 1242, 1250,    0, 1269, 1298, 1264, 1302,
     1317, 1325,    0, 1258, 1296, 1269, 1268, 1282, 1267, 1284,
     1287, 1290,    0, 1304, 1311, 1310, 1308, 1308, 1327, 1311,

     1314, 1318, 1319, 1336, 1338, 1337, 1340, 1332, 1330, 1329,
     1333, 1344, 1343, 1338, 1372,    0, 1356, 1373, 1369, 1367,
     1364, 1369, 1370, 1373, 1383, 1390, 1385, 1394, 1379, 1399,
     1394, 1390, 1394, 1390, 1386, 1392, 1402, 1403, 1397, 1428,
     1419, 1429, 1428, 1436, 1456, 1465, 1479, 1470, 1487, 1501,
     1493, 1522,    0,  728,    0, 1524,    0,    0,    0,    0,
        0, 1442, 1473, 1494, 1492, 1497, 1484, 1493, 1493, 1495,
        0, 1492, 1510, 1497, 1500, 1499, 1526, 1506, 1509, 1515,
     1516, 1538, 1540, 1539, 1546, 1534, 1535, 1535, 1541, 1545,
     1543, 1540, 1569,    0, 1556, 1560, 1557, 1555, 1556, 1563,

     1561, 1570, 1580, 1587, 1584, 1596, 1581, 1601, 1596, 1592,
     1595, 1595, 1593, 1600, 1609, 1603, 1599, 1615, 1619, 1618,
     1616, 1630,    0,  443, 3468, 3468, 3468, 3468, 3468, 3468,
     1627, 1616, 1640, 1644, 1635, 1645, 1635, 1637, 1635, 1640,
     1654, 1659, 1656, 1659, 1646, 1667, 1654, 1667, 3468, 1672,
     1656, 1673, 1662, 1663, 1683, 1662, 1673, 1680, 1672, 1687,
     1692, 1694, 1714, 1690, 1685, 1701, 1699, 1705, 1713, 3468,
     3468, 1696, 3468, 1706, 1701, 1698, 1719, 1722, 1718, 1723,
     1720, 1731, 3468, 1733, 1730, 3468, 1726, 1737, 1738, 1740,
     1730, 1749, 1737, 1733, 1759, 1752, 1782, 1795, 1808, 1816,

     1822, 1826,    0,    0,    0,    0,    0,    0, 1752, 1741,
     1777, 1792, 1784, 1792, 1785, 1791, 1803, 1806, 1823, 1828,
     1825, 1828, 1812, 1831, 1818, 1831,    0, 1836, 1820, 1834,
     1821, 1824, 1843, 1822, 1833, 1835, 1827, 1840, 1845, 1847,
     1875, 1840, 1835, 1851, 1854, 1864, 1879,    0,    0, 1865,
        0, 1875, 1869, 1864, 1886, 1888, 1882, 1887, 1884, 1892,
        0, 1893, 1890,    0, 1887, 1897, 1898, 1889, 1891, 1906,
     1894, 1889, 1909, 1924, 1951, 1955, 1959, 1963, 1971, 1981,
     1985, 1989,    0,    0,    0,    0,    0, 1929, 1937, 1961,
     1983, 1975, 1983, 1977, 1978, 1974, 1976, 1990, 1995, 1993,

     1996, 1980, 1999, 1985, 1999,    0, 2004, 1988, 2002, 1989,
     1990, 2009, 1988, 1999, 2001, 1997, 2011, 2021, 2038, 2049,
     2031, 2026, 2043, 2041, 2044, 2049,    0,    0, 2032,    0,
     2044, 2038, 2033, 2054, 2055, 2049, 2054, 2051, 2060,    0,
     2061, 2058,    0, 2054, 2064, 2065, 2056, 2062, 2077, 2070,
     2080, 2100, 2090, 2117, 2122, 2126, 2134, 2146, 2153, 2157,
     2161, 2178, 2169, 2186, 2204,    0,    0,    0,    0,    0,
        0, 2095, 2136, 2165, 2165, 2156, 2164, 2161, 2162, 2158,
     2168, 2185, 2190, 2187, 2190, 2174, 2197, 2184, 2202,    0,
     2207, 2191, 2205, 2192, 2193, 2213, 2193, 2204, 2206, 2203,

     2216, 2221, 2222, 2237, 2215, 2213, 2229, 2226, 2237, 2245,
        0,    0, 2228,    0, 2238, 2232, 2232, 2254, 2255, 2249,
     2257, 2254, 2262,    0, 2263, 2260,    0, 2256, 2267, 2269,
     2267, 2261, 2275, 2269, 2264, 2284, 2288, 2268, 2287, 2275,
     3468, 2295, 3468, 3468, 2298, 2288, 2290, 2305, 3468, 2294,
     2297, 3468, 2309, 2307, 2311, 3468, 2308, 2300, 2310, 2307,
     2323, 2310, 2331, 3468, 3468, 2317, 2320, 2322, 2323,  421,
     2342, 3468, 3468, 3468, 3468, 2322, 3468, 2335, 2327, 3468,
     2345, 3468, 2333, 2340, 3468, 2344, 2363, 2363, 3468, 2353,
     3468, 2349, 3468, 2359, 2354, 2361, 2357, 2374, 2377, 2375,

     3468, 2379, 2406, 2422, 2367, 2386, 2374,    0, 2398,    0,
        0, 2398, 2388, 2390, 2413,    0, 2401, 2403,    0, 2415,
     2413, 2414,    0, 2411, 2403, 2413, 2410, 2426, 2413, 2433,
        0,    0, 2419, 2425, 2422, 2423,  418, 2443,    0,    0,
        0,    0, 2422,    0, 2435, 2426,    0, 2440,    0, 2428,
     2430,    0, 2429, 2463, 2463,    0, 2453,    0, 2457,    0,
     2466, 2460, 2467, 2463, 2477, 2480, 2478,    0, 2482, 2505,
     2509, 2525, 2529, 2534, 2538, 2483, 2502, 2490,    0, 2529,
        0,    0, 2529, 2520, 2522, 2537,    0, 2522, 2524,    0,
     2536, 2534, 2535,    0, 2532, 2524, 2534, 2531, 2547, 2533,

     2553,    0,    0, 2539, 2542, 2539, 2540,  370, 2581,    0,
        0,    0,    0, 2540,    0, 2553, 2544,    0, 2559,    0,
     2547, 2548,    0, 2572, 2594, 2594,    0, 2584,    0, 2581,
        0, 2587, 2581, 2588, 2584, 2598, 2601, 2599,    0, 2603,
     2617, 2621, 2646, 2650, 2657, 2661, 2665, 2682, 2595, 2614,
     2645,    0, 2659,    0,    0, 2656, 2646, 2648, 2663,    0,
     2648, 2650,    0, 2662, 2660, 2661,    0, 2662, 2654, 2664,
     2661, 2677, 2663, 2683,    0,    0, 2669, 2672, 2669, 2670,
      367, 2711,    0,    0,    0,    0, 2670,    0, 2695, 2686,
        0, 2700,    0, 2688, 2702,    0, 2701, 2720, 2720,    0,

     2710,    0, 2706,    0, 2712, 2706, 2713, 2710, 2724, 2731,
     2729,    0, 2733, 2738, 2735, 2716, 2741, 2723, 3468, 3468,
     2730, 2733, 2741, 2734, 2756, 2747, 2758, 3468, 2744, 2757,
     3468, 3468, 2760, 3468, 2772, 3468, 2760, 3468, 2776, 2763,
     3468, 3468, 2782, 2764, 3468, 3468, 3468, 2784, 2766, 2780,
     2768, 3468, 2784, 2771, 2790, 3468, 2777, 2796, 3468, 2797,
     2794, 2775, 2800, 2782,    0,    0, 2789, 2792, 2801, 2805,
     2815, 2806, 2817,    0, 2814, 2817,    0,    0, 2819,    0,
     2831,    0, 2819,    0, 2835, 2822,    0,    0, 2841, 2823,
        0,    0,    0, 2843, 2825, 2839, 2827,    0, 2847, 2830,

     2849,    0, 2836, 2855,    0,  771, 2865, 2860, 2857, 2839,
     2876, 2858,    0,    0, 2865, 2868, 2881, 2873, 2883, 2874,
     2887,    0, 2874, 2876,    0,    0, 2878,    0, 2890,    0,
     2878,    0, 2894, 2881,    0,    0, 2900, 2882,    0,    0,
        0, 2902, 2884, 2898, 2890,    0, 2906, 2889, 2908,    0,
     2895, 2918,    0, 2943,  819, 2952, 2957, 2952, 2949, 2930,
     2955, 2937,    0,    0, 2944, 2947, 2955, 2947, 2957, 2948,
     2959,    0, 2945, 2947,    0,    0, 2949,    0, 2961,    0,
     2949,    0, 2965, 2952,    0,    0, 2971, 2953,    0,    0,
        0, 2973, 2955, 2969, 2957,    0, 2973, 2956, 2975,    0,

     2962, 3010,    0, 2994, 2999, 3468, 3000, 3468, 2995, 2996,
     3468, 3014, 3468, 3002, 3468, 3468, 3468, 3015, 3468, 3468,
     3002, 3016, 3010, 3468, 3020, 3468, 3468, 3023, 3468, 3011,
     3468, 3468, 3008, 3009, 3014,    0, 3015,    0, 3010, 3011,
        0, 3029,    0, 3017,    0,    0,    0, 3030,    0,    0,
     3017, 3031, 3025,    0, 3035,    0,    0, 3038,    0, 3055,
        0,    0, 3052, 3079, 3057, 3062,    0, 3063,    0, 3058,
     3059,    0, 3077,    0, 3065,    0,    0,    0, 3078,    0,
        0, 3065, 3079, 3073,    0, 3083,    0,    0, 3086,    0,
     3074,    0,    0, 3071, 3098, 3102, 3108, 3101, 3106,    0,

     3107,    0, 3102, 3103,    0, 3121,    0, 3109,    0,    0,
        0, 3122,    0,    0, 3109, 3123, 3117,    0, 3127,    0,
        0, 3130,    0, 3118,    0,    0, 3115, 3130, 3468, 3468,
      305, 3468, 3115, 3116, 3468, 3468, 3134, 3468, 3127, 3126,
     3468, 3468, 3136,    0,    0,  216,    0, 3121, 3122,    0,
        0, 3140,    0, 3133, 3132,    0,    0, 3183, 3175,    0,
        0,  209,    0, 3160, 3161,    0,    0, 3179,    0, 3172,
     3171,    0,    0, 3193, 3197, 3189,    0,    0,  202,    0,
     3174, 3175,    0,    0, 3193,    0, 3186, 3185,    0,    0,
     3468, 3195, 3468, 3191, 3181, 3468, 3186,    0, 3199,    0,

     3195, 3185,    0, 3190,    0, 3216,    0, 3205, 3196,    0,
     3201,    0, 3217,    0, 3209, 3218,    0, 3223, 3239, 3232,
     3227, 3468, 3468, 3250, 3243, 3238,    0,    0, 3253, 3246,
     3241,    0,    0, 3256, 3249, 3244,    0,    0, 3240, 3248,
     3248, 3243, 3251, 3258, 3253, 3261, 3261, 3256, 3264, 3264,
     3274, 3289, 3276, 3291, 3292, 3279, 3294, 3295, 3290, 3305,
     3306, 3293, 3468, 3294, 3468,    0, 3295,    0,    0, 3296,
        0,    0, 3297,    0, 3297, 3298, 3299, 3300, 3320, 3321,
     3329, 3330, 3319, 3320, 3321, 3322, 3320, 3321, 3336, 3337,
     3468,    0,    0,    0, 3468, 3402, 3408, 3413, 3422, 3431,

     3440,  242, 3449, 3458
    } ;

static const flex_int16_t yy_def[1505] =
    {   0,
     1495,    1, 1495,    3, 1495,    5,    5,    5,    5,    5,
     1495,   11, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1495, 1495, 1495, 1497, 1497, 1497, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1497, 1497,

     1499, 1500, 1500, 1500, 1500, 1495, 1500, 1500, 1500, 1500,
     1495, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1495, 1500, 1500, 1495, 1495, 1501,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1502, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1497, 1497, 1497, 1497, 1497, 1497,
     1499, 1499, 1500, 1500, 1500, 1503, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1501, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1502, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1495, 1497, 1497, 1497, 1497, 1497,
     1495, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1495, 1497, 1497, 1497, 1497, 1497, 1495,
     1497, 1499, 1495, 1499, 1503, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1495,
     1497, 1495, 1497, 1497, 1495, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1495, 1495, 1497, 1497, 1497, 1495, 1504, 1499, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,

     1496, 1496, 1496, 1496, 1496, 1497, 1495, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1495, 1497, 1504, 1504, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1497, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1497, 1504, 1504, 1500, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1497, 1504, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,

     1496, 1496, 1496, 1496, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1495, 1495,
     1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1498, 1498,
     1498, 1498, 1498, 1500, 1500, 1500, 1500, 1500, 1495, 1495,
     1495, 1496, 1496, 1496, 1498, 1498, 1498, 1500, 1500, 1500,
     1495, 1495, 1495, 1496, 1496, 1496, 1498, 1498, 1498, 1500,
     1500, 1500, 1495, 1495, 1495, 1496, 1496, 1496, 1498, 1498,
     1498, 1500, 1500, 1500, 1495, 1496, 1498, 1500, 1495, 1496,
     1498, 1500, 1495, 1496, 1498, 1500, 1495, 1496, 1498, 1500,
     1495, 1496, 1498, 1500,    0, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495
    } ;

static const flex_int16_t yy_nxt[3551] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       18,   18,   18,   18,   21,   18,   14,   14,   14,   14,
       18,   22,   23,   24,   18,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   14,   35,   36,   37,   38,
       14,   14,   39,   40,   41,   42,   43,   44,   14,   14,
       14,   14,   14,   14,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   14,   35,   36,   37,   38,   14,
       14,   39,   40,   41,   42,   43,   44,   14,   14,   45,
       46,   14,   14,   15,   16,   15,   17,   47,   14,   18,
       19,   20,   18,   18,   18,   18,   21,   48,   49,   50,

       50,   50,   18,   22,   23,   24,   18,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   61,   61,   66,   67,   68,   69,   70,   71,
       61,   61,   61,   72,   61,   73,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   61,   61,   66,   67,   68,   69,   70,   71,   61,
       61,   45,   46,   61,   14,   15,   16,   15,   17,   14,
       74,   18,   19,   20,   18,   18,   18,   75,   21,   76,
       77,   77,   77,   77,   18,   22,   23,   24,   18,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   88,   88,   93,   94,   95,   96,
       97,   98,   88,   88,   88,   72,   14,   14,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   88,   88,   93,   94,   95,   96,   97,
       98,   88,   88,   45,   46,   88,   99,  503,   75,  100,
      100,  100,  100,   99, 1413,   75,  100,  100,  100,  100,
       18, 1406,   18,  101,  101,  101,  101,   18, 1399,   18,
      101,  101,  101,  101,  102,  103,  104,   15,  105,  106,
      102,  107,  108,   20,  109,  109,  109,  109,  110,  109,
      102,  102,  102,  102,  111,  112,  113,  114,  111,  115,

      116,  117,  118,  119,  120,  121,  122,  123,  124,  102,
      125,  126,  127,  128,  102,  102,  129,  130,  131,  132,
      133,  134,  102,  102,  102,  135,  102,  102,  115,  116,
      117,  118,  119,  120,  121,  122,  123,  124,  102,  125,
      126,  127,  128,  102,  102,  129,  130,  131,  132,  133,
      134,  102,  102,  136,  137,  102,  138, 1392,  138,  141,
      142,  143,  144,  145,  146,  150,  147,  156,  175,  151,
      176,  148,  177,  152,  149,  179,  153,  178,  160,  154,
      205,  157,  161,  183,  158, 1182,  162,  159, 1132,  155,
      206,  184,  163,  146,  150,  147,  156,  175,  151,  176,

      148,  177,  152,  149,  179,  153,  178,  160,  154,  205,
      157,  161,  183,  158,  164,  162,  159,  170,  155,  206,
      184,  163,  180,  165,  185,  166,  181,  244,  171,  245,
      167,  172,  182,  168,  173,  169, 1084,  174,  186, 1038,
      354,  248,  138,  164,  187,  425,  170,  352,  352,  352,
      352,  180,  165,  185,  166,  181,  244,  171,  245,  167,
      172,  182,  168,  173,  169,  192,  174,  186,  188,  193,
      248,  195,  202,  187,  203,  194,  189,  204,  199,  200,
      190,  196,  274,  191,  275,  313,  197,  198,  201,  208,
      208,  208,  208,  425,  192,  360,  361,  188,  193,  423,

      195,  202,  209,  203,  194,  189,  204,  199,  200,  190,
      196,  274,  191,  275,  313,  197,  198,  201,  210,  211,
      211,  211,  211,  210,  211,  211,  211,  211,  215,  225,
      216,  209,  212,  356,  246,  217,  219,  212,  218,  247,
      220,  314,  317,  226,  221,  252,  227,  222,  229,  228,
      223,  213,  230,  253,  355,  343,  231,  215,  225,  216,
      224,  212,  232,  246,  217,  219,  212,  218,  247,  220,
      314,  317,  226,  221,  252,  227,  222,  229,  228,  223,
      213,  230,  253,  233,  343,  231,  239,  344,  321,  224,
      207,  232,  234,  254,  235,  140,  322,  240,  391,  236,

      241,  249,  237,  242,  238,  250,  243,  255,  139,  268,
      269,  251,  233,  256,  261,  239,  344,  321,  262,  270,
     1495,  234,  254,  235,  263,  322,  240,  391,  236,  241,
      249,  237,  242,  238,  250,  243,  255,  257,  268,  269,
      251,  264,  256,  261,  392,  258,  395,  262,  270,  259,
      315,  265,  260,  263,  393,  316,  266,  267,  271,  394,
      272, 1495,  421,  273, 1495, 1495,  257,  357,  358,  359,
      264, 1495, 1495,  392,  258,  395, 1495, 1495,  259,  315,
      265,  260,  399,  393,  316,  266,  267,  271,  394,  272,
      400,  421,  273,  277,  277,  277,  277,  279, 1495,  280,

      281,  281,  281,  281,  422,  284,  278,  285,  426, 1495,
      294,  399,  286,  282,  288,  287,  318,  429,  289,  400,
      319,  138,  290,  138,  295,  291,  320,  296,  292,  354,
      297,  138, 1495,  422,  284,  278,  285,  426,  293,  294,
      430,  286,  282,  288,  287,  318,  429,  289,  431,  319,
     1495,  290,  302,  295,  291,  320,  296,  292,  298,  297,
      323,  303,  299,  304,  432,  308,  300,  293,  305,  430,
      433,  306,  301,  307,  324,  434,  309,  431,  435,  310,
      325,  302,  311, 1495,  279,  312, 1264,  298,  436,  323,
      303,  299,  304,  432,  308,  300, 1495,  305,  326,  433,

      306,  301,  307,  324,  434,  309,  327,  435,  310,  325,
      328,  311,  330,  329,  312,  333,  331,  436,  337,  338,
      439,  340,  332,  341,  440,  334,  342,  326,  339, 1495,
      335,  336, 1295, 1495,  348,  327, 1495,  427, 1495,  328,
     1495,  330,  329,  441,  333,  331, 1495,  337,  338,  439,
      340,  332,  341,  440,  334,  342,  445,  339,  428,  335,
      336,  345,  345,  345,  345,  347,  427,  348,  349,  349,
      349,  349,  441,  362,  346,  363,  446, 1495,  372, 1495,
      364,  350,  366,  365,  396,  445,  367,  428,  397,  447,
      368, 1495,  373,  369,  398,  374,  370, 1495,  375, 1495,

     1495, 1495,  362,  346,  363,  446,  371,  372,  437,  364,
      350,  366,  365,  396,  448,  367,  438,  397,  447,  368,
      380,  373,  369,  398,  374,  370,  376,  375,  401,  381,
      377,  382,  449,  386,  378,  371,  383,  437,  450,  384,
      379,  385,  402,  448,  387,  438,  451,  388,  403,  380,
      389, 1495, 1495,  390, 1495,  376,  454,  401,  381,  377,
      382,  449,  386,  378, 1495,  383,  404,  450,  384,  379,
      385,  402,  455,  387,  405,  451,  388,  403,  406,  389,
      408,  407,  390,  411,  409,  454,  415,  416,  456,  418,
      410,  419, 1495,  412,  420,  404,  417,  457,  413,  414,

      452,  455,  458,  405,  459,  460,  453,  406,  442,  408,
      407,  464,  411,  409,  443,  415,  416,  456,  418,  410,
      419,  444,  412,  420,  465,  417,  457,  413,  414,  452,
      466,  458,  467,  459,  460,  453,  461,  442,  468,  471,
      464,  462,  463,  443,  469,  472,  473,  474,  470,  475,
      444,  476,  477,  465,  478,  479,  480,  481,  482,  466,
      484,  467,  485,  486,  487,  461,  483,  468,  471,  488,
      462,  463,  489,  469,  472,  473,  474,  470,  475,  492,
      476,  477,  493,  478,  479,  480,  481,  482,  490,  484,
      491,  485,  486,  487,  494,  483,  496, 1495,  488, 1495,

      495,  489,  208,  208,  208,  208, 1495, 1495,  492, 1495,
     1495,  493, 1495, 1495,  504,  209, 1495,  490, 1495,  491,
     1495,  507, 1495,  494, 1495,  496,  497, 1495,  497,  495,
      498,  498,  498,  498,  499,  499,  499,  499,  210,  211,
      211,  211,  211,  504,  209,  505,  508,  500,  509,  501,
      507,  501,  212,  502,  502,  502,  502,  510,  511,  512,
      513,  514,  515,  517,  518,  519,  506,  520,  523,  524,
      516,  525,  526,  521,  505,  508,  500,  509,  527,  528,
      522,  212,  529,  532,  533,  534,  510,  511,  512,  513,
      514,  515,  517,  518,  519,  506,  520,  523,  524,  516,

      525,  526,  521,  535,  530,  536,  537,  527,  528,  522,
      531,  529,  532,  533,  534,  538,  539,  542,  543,  546,
      547,  540,  541,  544,  548,  545,  549,  550,  551,  552,
      553,  554,  535,  530,  536,  537,  555,  556,  557,  531,
      558,  559, 1495,  562,  538,  539,  542,  543,  546,  547,
      540,  541,  544,  548,  545,  549,  550,  551,  552,  553,
      554,  563,  564,  560,  565,  555,  556,  557,  566,  558,
      559,  561,  562,  567,  568,  570,  569,  571,  572,  574,
      577,  577,  577,  577,  573,  277,  277,  277,  277, 1495,
      563,  564,  560,  565,  583, 1495,  586,  566,  278,  587,

      561, 1495,  567,  568,  570,  569,  571,  572,  574,  588,
      575,  589,  575,  573,  576,  576,  576,  576,  578,  578,
      578,  578,  590,  583,  584,  586,  591,  278,  587,  592,
      279,  579,  280,  580,  580,  580,  580,  581,  588,  581,
      589,  582,  582,  582,  582,  585,  282,  593,  594,  596,
      597,  590,  598,  584,  602,  591,  595,  599,  592,  603,
      579,  604,  605,  600,  606,  607,  608,  609,  611,  612,
      601,  613,  614,  610,  585,  282,  593,  594,  596,  597,
      615,  598,  616,  602,  617,  595,  599, 1495,  603,  621,
      604,  605,  600,  606,  607,  608,  609,  611,  612,  601,

      613,  614,  610,  622,  623,  625,  624,  628,  626,  615,
      618,  616,  627,  617,  629,  619,  620,  630,  621,  631,
      632,  633,  634,  635,  636,  637,  638,  641,  642,  643,
      639,  644,  622,  623,  625,  624,  628,  626,  640,  618,
      645,  627,  646,  629,  619,  620,  630,  649,  631,  632,
      633,  634,  635,  636,  637,  638,  641,  642,  643,  639,
      644,  647,  650,  648,  651,  653, 1495,  640, 1495,  645,
      652,  646,  345,  345,  345,  345,  649,  654,  667,  654,
     1495,  655,  655,  655,  655,  346,  658,  658,  658,  658,
      647,  650,  648,  651,  653,  656,  656,  656,  656,  652,

      347,  668,  348,  659,  659,  659,  659,  667,  657,  662,
      662,  662,  662,  660,  346,  660,  350,  661,  661,  661,
      661,  670,  669,  671,  672,  663,  666,  424,  673,  424,
      668,  674,  675,  424,  676,  677,  680,  657,  664,  664,
      664,  664,  681,  682,  424,  350, 1495,  678,  424,  686,
      670,  669,  671,  672,  687,  679,  683,  673,  688,  689,
      674,  675,  684,  676,  677,  680,  690,  691,  692,  685,
      695,  681,  682,  693,  696,  424,  678,  697,  686,  694,
      698,  699,  700,  687,  679,  683,  701,  688,  689,  705,
      706,  684,  707,  709,  708,  690,  691,  692,  685,  695,

      710,  712,  693,  696,  711,  713,  697,  702,  694,  698,
      699,  700,  703,  704,  714,  701,  715,  716,  705,  706,
      717,  707,  709,  708,  718,  719,  720,  721,  722,  710,
      712,  723,  725,  711,  713,  726,  702,  727,  728,  724,
      729,  703,  704,  714,  730,  715,  716,  733,  731,  717,
      732,  734,  735,  718,  719,  720,  721,  722,  736,  737,
      723,  725,  738,  739,  726,  740,  727,  728,  724,  729,
      741,  742,  745,  730,  743,  746,  733,  731,  747,  732,
      734,  735,  748,  749,  750,  751,  752,  736,  737,  744,
      753,  738,  739,  754,  740,  755,  756,  757,  758,  741,

      742,  745,  759,  743,  746,  760,  761,  747,  762,  763,
      764,  748,  749,  750,  751,  752,  765,  766,  744,  753,
      767,  768,  754,  769,  755,  756,  757,  758,  773,  774,
      775,  759,  776,  770,  760,  761,  777,  762,  763,  764,
      778,  779,  780,  771,  781,  765,  766,  782,  783,  767,
      768,  784,  769,  772,  785,  786,  787,  773,  774,  775,
      788,  776,  789,  790,  791,  777,  792,  793,  796,  778,
      779,  780,  771,  781,  797,  798,  782,  783,  799,  794,
      784,  795,  772,  785,  786,  787,  800,  805,  806,  788,
      801,  789,  790,  791,  802,  792,  793,  796,  498,  498,

      498,  498,  807,  797,  798, 1495, 1495,  799,  794, 1495,
      795,  498,  498,  498,  498,  800,  805,  806,  808,  801,
      809,  810,  812,  802,  499,  499,  499,  499,  803,  813,
      803,  807,  804,  804,  804,  804,  811,  500,  502,  502,
      502,  502,  502,  502,  502,  502,  814,  808,  815,  809,
      810,  812,  816,  817,  818,  819,  820,  821,  813,  822,
      823,  824,  825,  826,  827,  811,  500,  828,  829,  830,
      831,  832,  833,  834,  835,  814,  836,  815,  840,  841,
      842,  816,  817,  818,  819,  820,  821,  843,  822,  823,
      824,  825,  826,  827,  837,  844,  828,  829,  830,  831,

      832,  833,  834,  835,  838,  836,  845,  840,  841,  842,
      846,  847,  848,  849,  839,  850,  843,  851,  852,  853,
      854,  855,  856,  857,  844,  858,  859,  860,  861,  863,
      862,  864,  865,  838,  866,  845,  867, 1495, 1495,  846,
      847,  848,  849,  839,  850, 1495,  851,  852,  853,  854,
      855,  856,  857, 1495,  858,  859,  860,  861,  863,  862,
      864,  865,  868,  866,  876,  867,  869,  870,  870,  870,
      870,  576,  576,  576,  576,  871,  871,  871,  871,  578,
      578,  578,  578,  872,  877,  872,  878,  873,  873,  873,
      873,  868,  579,  876,  279,  869,  280,  874,  874,  874,

      874,  875,  875,  875,  875,  582,  582,  582,  582,  879,
      282,  880,  881,  877,  883,  878,  884,  885,  886,  887,
      888,  579,  889,  890,  891,  892,  893,  882,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  879,  282,
      880,  881,  904,  883,  905,  884,  885,  886,  887,  888,
      906,  889,  890,  891,  892,  893,  882,  894,  895,  896,
      897,  898,  899,  900,  901,  902,  903,  907,  908,  911,
      912,  904,  913,  905,  914,  915,  916,  917,  909,  906,
      918,  919,  920,  921,  922,  923,  924,  925,  910,  926,
      927,  928,  929,  930,  931,  932,  907,  933,  911,  912,

      934,  913,  935,  914,  915,  916,  917,  909,  936,  918,
      919,  920,  921,  922,  923,  924,  925,  910,  926,  927,
      928,  929,  930,  931,  932,  937,  933,  938,  939,  934,
      949,  935,  940,  941,  941,  941,  941,  936,  655,  655,
      655,  655,  656,  656,  656,  656,  942, 1495,  942, 1495,
      943,  943,  943,  943,  937,  657,  938,  939, 1495,  949,
     1495,  940,  944,  944,  944,  944,  347, 1495,  348,  945,
      945,  945,  945,  946,  946,  946,  946,  661,  661,  661,
      661,  663,  350,  950,  657,  947,  947,  947,  947,  663,
      951,  952,  953,  954,  662,  662,  662,  662,  956, 1495,

      957,  958,  948,  948,  948,  948,  666,  424,  955,  424,
      959,  350,  950,  424,  960,  961,  962,  963,  964,  951,
      952,  953,  954,  965,  424,  966, 1495,  956,  424,  957,
      958,  967,  968,  969,  970,  971,  972,  955,  973,  959,
      974,  975,  976,  960,  961,  962,  963,  964,  977,  978,
      979,  980,  965,  984,  966,  424,  981,  985,  986,  987,
      967,  968,  969,  970,  971,  972,  982,  973,  988,  974,
      975,  976,  989,  990,  991,  992,  983,  977,  978,  979,
      980,  993,  984,  994,  995,  996,  985,  986,  987,  997,
      998,  999, 1000, 1001, 1002,  982, 1003,  988, 1004, 1007,

     1008,  989,  990,  991,  992,  983, 1005, 1009, 1006, 1010,
      993, 1011,  994,  995,  996, 1014, 1015, 1016,  997,  998,
      999, 1000, 1001, 1002, 1017, 1003, 1012, 1004, 1007, 1008,
     1013, 1018, 1019, 1020, 1021, 1005, 1009, 1006, 1010, 1022,
     1011, 1023, 1024, 1025, 1014, 1015, 1016, 1026, 1027, 1028,
     1029, 1030, 1031, 1017, 1032, 1012, 1033, 1034, 1035, 1013,
     1018, 1019, 1020, 1021, 1036, 1037, 1041, 1042, 1022, 1043,
     1023, 1024, 1025, 1039, 1044, 1045, 1026, 1027, 1028, 1029,
     1030, 1031, 1046, 1032, 1040, 1033, 1034, 1035, 1047, 1048,
     1049, 1050, 1051, 1036, 1037, 1041, 1042, 1052, 1043, 1053,

     1054, 1055, 1039, 1044, 1045, 1056, 1057, 1058, 1059, 1495,
     1495, 1046, 1495, 1040, 1060, 1061, 1062, 1047, 1048, 1049,
     1050, 1051,  804,  804,  804,  804, 1052, 1063, 1053, 1054,
     1055, 1064, 1065, 1066, 1056, 1057, 1058, 1059,  804,  804,
      804,  804, 1067, 1060, 1061, 1062, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1063, 1078, 1079, 1080,
     1064, 1065, 1066, 1081, 1082, 1083, 1087, 1088, 1089, 1090,
     1091, 1067, 1092, 1093, 1085, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1086, 1078, 1079, 1080, 1094,
     1095, 1096, 1081, 1082, 1083, 1087, 1088, 1089, 1090, 1091,

     1097, 1092, 1093, 1085, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1495, 1495, 1086, 1495, 1495, 1495, 1094, 1095,
     1096,  870,  870,  870,  870, 1106, 1106, 1106, 1106, 1097,
     1108, 1109, 1110, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1105, 1107, 1107, 1107, 1107,  873,  873,  873,  873,  280,
      874,  874,  874,  874,  875,  875,  875,  875, 1111, 1108,
     1109, 1110, 1112,  282, 1113, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1495, 1135, 1136, 1137, 1111, 1138, 1139,
     1140, 1112,  282, 1113, 1114, 1115, 1116, 1117, 1118, 1119,

     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1130, 1131, 1133, 1135, 1136, 1137, 1141, 1138, 1139, 1140,
     1142, 1143, 1144, 1134, 1145, 1146, 1147, 1148, 1149, 1150,
     1151, 1152, 1153,  941,  941,  941,  941, 1154, 1154, 1154,
     1154, 1133, 1158, 1159, 1495, 1141, 1495, 1495, 1495, 1142,
     1143, 1144, 1134, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153,  943,  943,  943,  943, 1155, 1155, 1155, 1155,
      347, 1158, 1159,  945,  945,  945,  945,  946,  946,  946,
      946, 1157, 1157, 1157, 1157,  663,  350, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,  662,  662,

      662,  662, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1495, 1185,  350, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1186, 1187, 1188,
     1189, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1183, 1185, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1184, 1199, 1200, 1186, 1187, 1188, 1189,
     1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
     1211, 1183, 1212, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
     1197, 1198, 1184, 1199, 1200, 1213, 1214, 1215, 1216, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,

     1217, 1212, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1213, 1214, 1215, 1216, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1217,
     1241, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1228, 1229, 1242, 1243, 1244, 1245, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1246, 1241,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1242, 1243, 1244, 1245, 1259, 1260, 1261, 1262,
     1263, 1107, 1107, 1107, 1107, 1265, 1266, 1246, 1267, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,

     1258, 1268, 1269, 1270, 1271, 1259, 1260, 1261, 1262, 1263,
     1272, 1273, 1274, 1275, 1265, 1266, 1276, 1267, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1268, 1269, 1270, 1271, 1289, 1290, 1291, 1292, 1293, 1272,
     1273, 1274, 1275, 1294, 1495, 1276, 1495, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1154,
     1154, 1154, 1154, 1289, 1290, 1291, 1292, 1293, 1296, 1296,
     1296, 1296, 1294, 1297, 1297, 1297, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,

     1321, 1322, 1323, 1324, 1325, 1326, 1298, 1299, 1300, 1301,
     1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
     1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
     1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
     1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
     1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
     1352, 1353, 1354, 1355, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1358, 1358, 1358, 1359,

     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1374, 1374, 1374, 1296, 1296,
     1296, 1296, 1356, 1357, 1375, 1375, 1375, 1375, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
     1371, 1372, 1373, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393,
     1394, 1395, 1396, 1397, 1398, 1400, 1401, 1402, 1403, 1404,
     1495, 1495, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394,
     1395, 1396, 1397, 1398, 1400, 1401, 1402, 1403, 1404, 1358,

     1358, 1358, 1358, 1405, 1407, 1408, 1409, 1410, 1411, 1374,
     1374, 1374, 1374, 1296, 1296, 1296, 1296, 1412, 1414, 1415,
     1416, 1417, 1418, 1419, 1421, 1422, 1423, 1424, 1426, 1427,
     1428, 1495, 1405, 1407, 1408, 1409, 1410, 1411, 1431, 1420,
     1432, 1433, 1436, 1425, 1429, 1434, 1412, 1414, 1415, 1416,
     1417, 1418, 1419, 1421, 1422, 1423, 1424, 1426, 1427, 1428,
     1430, 1435, 1437, 1438, 1439, 1440, 1441, 1431, 1420, 1432,
     1433, 1436, 1425, 1429, 1434, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1430,
     1435, 1437, 1438, 1439, 1440, 1441, 1456, 1457, 1458, 1459,

     1460, 1461, 1462, 1463, 1442, 1443, 1444, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1456, 1457, 1458, 1459, 1460,
     1461, 1462, 1463, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1492, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
     1479, 1480, 1481, 1482, 1483, 1484, 1493, 1494, 1495, 1495,
     1495, 1495, 1495, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
     1492, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1493, 1494,  214, 1495,  214,
      214,  276, 1495,  276, 1495,  276,  283,  283,  283,  283,
      283,  283,  351, 1495,  351,  351,  351,  351,  351,  351,
      351,  353, 1495, 1495,  353,  353,  353, 1495,  353,  353,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  665,
      665,  665,  665,  665,  665,  665,  665,  665, 1156, 1495,
     1156, 1156, 1156, 1156, 1156, 1156, 1156,   13, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495
    } ;

static const flex_int16_t yy_chk[3551] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 1502,    7,    7,
        7,    7,    7,    8, 1379,    8,    8,    8,    8,    8,
        9, 1362,    9,    9,    9,    9,    9,   10, 1346,   10,
       10,   10,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   15, 1331,   15,   22,
       22,   22,   24,   24,   25,   26,   25,   27,   31,   26,
       32,   25,   33,   26,   25,   34,   26,   33,   28,   26,
       43,   27,   28,   36,   27,  981,   28,   27,  908,   26,
       44,   36,   28,   25,   26,   25,   27,   31,   26,   32,

       25,   33,   26,   25,   34,   26,   33,   28,   26,   43,
       27,   28,   36,   27,   29,   28,   27,   30,   26,   44,
       36,   28,   35,   29,   37,   29,   35,   57,   30,   58,
       29,   30,   35,   29,   30,   29,  837,   30,   37,  770,
      103,   60,  103,   29,   37,  424,   30,  101,  101,  101,
      101,   35,   29,   37,   29,   35,   57,   30,   58,   29,
       30,   35,   29,   30,   29,   39,   30,   37,   38,   39,
       60,   40,   42,   37,   42,   39,   38,   42,   41,   41,
       38,   40,   70,   38,   71,   84,   40,   40,   41,   48,
       48,   48,   48,  140,   39,  114,  114,   38,   39,  136,

       40,   42,   48,   42,   39,   38,   42,   41,   41,   38,
       40,   70,   38,   71,   84,   40,   40,   41,   49,   49,
       49,   49,   49,   50,   50,   50,   50,   50,   51,   53,
       51,   48,   49,  110,   59,   51,   52,   50,   51,   59,
       52,   85,   87,   53,   52,   63,   53,   52,   54,   53,
       52,   49,   54,   63,  105,   97,   54,   51,   53,   51,
       52,   49,   54,   59,   51,   52,   50,   51,   59,   52,
       85,   87,   53,   52,   63,   53,   52,   54,   53,   52,
       49,   54,   63,   55,   97,   54,   56,   98,   90,   52,
       45,   54,   55,   64,   55,   21,   90,   56,  121,   55,

       56,   62,   55,   56,   55,   62,   56,   64,   17,   68,
       68,   62,   55,   64,   66,   56,   98,   90,   66,   68,
       13,   55,   64,   55,   66,   90,   56,  121,   55,   56,
       62,   55,   56,   55,   62,   56,   64,   65,   68,   68,
       62,   67,   64,   66,  122,   65,  124,   66,   68,   65,
       86,   67,   65,   66,  123,   86,   67,   67,   69,  123,
       69,    0,  133,   69,    0,    0,   65,  112,  112,  112,
       67,    0,    0,  122,   65,  124,    0,    0,   65,   86,
       67,   65,  126,  123,   86,   67,   67,   69,  123,   69,
      126,  133,   69,   76,   76,   76,   76,   77,    0,   77,

       77,   77,   77,   77,  134,   78,   76,   78,  146,    0,
       80,  126,   78,   77,   79,   78,   89,  148,   79,  126,
       89,  138,   79,  138,   80,   79,   89,   80,   79,  354,
       80,  354,    0,  134,   78,   76,   78,  146,   79,   80,
      149,   78,   77,   79,   78,   89,  148,   79,  150,   89,
        0,   79,   82,   80,   79,   89,   80,   79,   81,   80,
       91,   82,   81,   82,  151,   83,   81,   79,   82,  149,
      152,   82,   81,   82,   91,  153,   83,  150,  154,   83,
       91,   82,   83,    0, 1106,   83, 1106,   81,  156,   91,
       82,   81,   82,  151,   83,   81,    0,   82,   92,  152,

       82,   81,   82,   91,  153,   83,   92,  154,   83,   91,
       92,   83,   93,   92,   83,   94,   93,  156,   95,   95,
      158,   96,   93,   96,  159,   94,   96,   92,   95,    0,
       94,   94, 1155,    0, 1155,   92,    0,  147,    0,   92,
        0,   93,   92,  160,   94,   93,    0,   95,   95,  158,
       96,   93,   96,  159,   94,   96,  162,   95,  147,   94,
       94,   99,   99,   99,   99,  100,  147,  100,  100,  100,
      100,  100,  160,  115,   99,  115,  163,    0,  117,    0,
      115,  100,  116,  115,  125,  162,  116,  147,  125,  164,
      116,    0,  117,  116,  125,  117,  116,    0,  117,    0,

        0,    0,  115,   99,  115,  163,  116,  117,  157,  115,
      100,  116,  115,  125,  165,  116,  157,  125,  164,  116,
      119,  117,  116,  125,  117,  116,  118,  117,  127,  119,
      118,  119,  166,  120,  118,  116,  119,  157,  167,  119,
      118,  119,  127,  165,  120,  157,  168,  120,  127,  119,
      120,    0,    0,  120,    0,  118,  170,  127,  119,  118,
      119,  166,  120,  118,    0,  119,  128,  167,  119,  118,
      119,  127,  171,  120,  128,  168,  120,  127,  128,  120,
      129,  128,  120,  130,  129,  170,  131,  131,  172,  132,
      129,  132,    0,  130,  132,  128,  131,  173,  130,  130,

      169,  171,  174,  128,  175,  176,  169,  128,  161,  129,
      128,  179,  130,  129,  161,  131,  131,  172,  132,  129,
      132,  161,  130,  132,  180,  131,  173,  130,  130,  169,
      181,  174,  181,  175,  176,  169,  177,  161,  182,  184,
      179,  177,  177,  161,  183,  185,  186,  187,  183,  188,
      161,  189,  190,  180,  191,  192,  193,  194,  195,  181,
      196,  181,  197,  198,  199,  177,  195,  182,  184,  200,
      177,  177,  201,  183,  185,  186,  187,  183,  188,  203,
      189,  190,  204,  191,  192,  193,  194,  195,  202,  196,
      202,  197,  198,  199,  205,  195,  206,    0,  200,    0,

      205,  201,  208,  208,  208,  208,    0,    0,  203,    0,
        0,  204,    0,    0,  215,  208,    0,  202,    0,  202,
        0,  217,    0,  205,    0,  206,  209,    0,  209,  205,
      209,  209,  209,  209,  210,  210,  210,  210,  211,  211,
      211,  211,  211,  215,  208,  216,  218,  210,  219,  212,
      217,  212,  211,  212,  212,  212,  212,  220,  221,  222,
      223,  225,  226,  227,  228,  229,  216,  230,  231,  232,
      226,  233,  234,  230,  216,  218,  210,  219,  235,  236,
      230,  211,  237,  239,  240,  241,  220,  221,  222,  223,
      225,  226,  227,  228,  229,  216,  230,  231,  232,  226,

      233,  234,  230,  242,  238,  243,  244,  235,  236,  230,
      238,  237,  239,  240,  241,  245,  246,  248,  249,  251,
      252,  246,  246,  250,  252,  250,  253,  254,  255,  256,
      257,  258,  242,  238,  243,  244,  259,  260,  261,  238,
      262,  263,    0,  265,  245,  246,  248,  249,  251,  252,
      246,  246,  250,  252,  250,  253,  254,  255,  256,  257,
      258,  266,  267,  264,  268,  259,  260,  261,  269,  262,
      263,  264,  265,  270,  271,  272,  271,  273,  274,  275,
      279,  279,  279,  279,  274,  277,  277,  277,  277,    0,
      266,  267,  264,  268,  284,    0,  286,  269,  277,  287,

      264,    0,  270,  271,  272,  271,  273,  274,  275,  288,
      278,  289,  278,  274,  278,  278,  278,  278,  280,  280,
      280,  280,  290,  284,  285,  286,  291,  277,  287,  292,
      281,  280,  281,  281,  281,  281,  281,  282,  288,  282,
      289,  282,  282,  282,  282,  285,  281,  294,  295,  296,
      297,  290,  298,  285,  300,  291,  295,  299,  292,  301,
      280,  302,  303,  299,  304,  305,  306,  307,  308,  309,
      299,  310,  311,  307,  285,  281,  294,  295,  296,  297,
      312,  298,  313,  300,  314,  295,  299,    0,  301,  317,
      302,  303,  299,  304,  305,  306,  307,  308,  309,  299,

      310,  311,  307,  318,  319,  320,  319,  322,  321,  312,
      315,  313,  321,  314,  323,  315,  315,  324,  317,  325,
      326,  327,  328,  329,  330,  331,  332,  334,  335,  336,
      333,  337,  318,  319,  320,  319,  322,  321,  333,  315,
      338,  321,  339,  323,  315,  315,  324,  341,  325,  326,
      327,  328,  329,  330,  331,  332,  334,  335,  336,  333,
      337,  340,  342,  340,  343,  344,    0,  333,    0,  338,
      343,  339,  345,  345,  345,  345,  341,  346,  362,  346,
        0,  346,  346,  346,  346,  345,  348,  348,  348,  348,
      340,  342,  340,  343,  344,  347,  347,  347,  347,  343,

      349,  363,  349,  349,  349,  349,  349,  362,  347,  351,
      351,  351,  351,  350,  345,  350,  349,  350,  350,  350,
      350,  364,  363,  365,  366,  352,  356,  356,  367,  356,
      363,  368,  369,  356,  370,  372,  374,  347,  352,  352,
      352,  352,  375,  376,  356,  349,    0,  373,  356,  378,
      364,  363,  365,  366,  379,  373,  377,  367,  380,  381,
      368,  369,  377,  370,  372,  374,  382,  383,  384,  377,
      386,  375,  376,  385,  387,  356,  373,  388,  378,  385,
      389,  390,  391,  379,  373,  377,  392,  380,  381,  395,
      396,  377,  397,  398,  397,  382,  383,  384,  377,  386,

      399,  400,  385,  387,  399,  401,  388,  393,  385,  389,
      390,  391,  393,  393,  402,  392,  403,  404,  395,  396,
      405,  397,  398,  397,  406,  407,  408,  409,  410,  399,
      400,  411,  412,  399,  401,  413,  393,  414,  415,  411,
      416,  393,  393,  402,  417,  403,  404,  419,  418,  405,
      418,  420,  421,  406,  407,  408,  409,  410,  421,  422,
      411,  412,  431,  432,  413,  433,  414,  415,  411,  416,
      434,  435,  437,  417,  436,  438,  419,  418,  439,  418,
      420,  421,  440,  441,  442,  443,  444,  421,  422,  436,
      445,  431,  432,  446,  433,  447,  448,  450,  451,  434,

      435,  437,  452,  436,  438,  453,  454,  439,  455,  456,
      457,  440,  441,  442,  443,  444,  458,  459,  436,  445,
      460,  461,  446,  462,  447,  448,  450,  451,  464,  465,
      466,  452,  467,  463,  453,  454,  468,  455,  456,  457,
      469,  472,  474,  463,  475,  458,  459,  476,  477,  460,
      461,  478,  462,  463,  479,  480,  481,  464,  465,  466,
      482,  467,  484,  485,  487,  468,  488,  489,  491,  469,
      472,  474,  463,  475,  492,  493,  476,  477,  494,  490,
      478,  490,  463,  479,  480,  481,  495,  509,  510,  482,
      496,  484,  485,  487,  496,  488,  489,  491,  497,  497,

      497,  497,  511,  492,  493,    0,    0,  494,  490,    0,
      490,  498,  498,  498,  498,  495,  509,  510,  512,  496,
      513,  514,  515,  496,  499,  499,  499,  499,  500,  516,
      500,  511,  500,  500,  500,  500,  514,  499,  501,  501,
      501,  501,  502,  502,  502,  502,  517,  512,  518,  513,
      514,  515,  519,  520,  521,  522,  523,  524,  516,  525,
      526,  528,  529,  530,  531,  514,  499,  532,  533,  534,
      535,  536,  537,  538,  539,  517,  540,  518,  542,  543,
      544,  519,  520,  521,  522,  523,  524,  545,  525,  526,
      528,  529,  530,  531,  541,  546,  532,  533,  534,  535,

      536,  537,  538,  539,  541,  540,  547,  542,  543,  544,
      550,  552,  553,  554,  541,  555,  545,  556,  557,  558,
      559,  560,  562,  563,  546,  565,  566,  567,  568,  569,
      568,  570,  571,  541,  572,  547,  573,    0,    0,  550,
      552,  553,  554,  541,  555,    0,  556,  557,  558,  559,
      560,  562,  563,    0,  565,  566,  567,  568,  569,  568,
      570,  571,  574,  572,  588,  573,  574,  575,  575,  575,
      575,  576,  576,  576,  576,  577,  577,  577,  577,  578,
      578,  578,  578,  579,  589,  579,  590,  579,  579,  579,
      579,  574,  578,  588,  580,  574,  580,  580,  580,  580,

      580,  581,  581,  581,  581,  582,  582,  582,  582,  591,
      580,  592,  593,  589,  594,  590,  595,  596,  597,  598,
      599,  578,  600,  601,  602,  603,  604,  593,  605,  607,
      608,  609,  610,  611,  612,  613,  614,  615,  591,  580,
      592,  593,  616,  594,  617,  595,  596,  597,  598,  599,
      618,  600,  601,  602,  603,  604,  593,  605,  607,  608,
      609,  610,  611,  612,  613,  614,  615,  619,  620,  621,
      622,  616,  623,  617,  624,  625,  626,  629,  620,  618,
      631,  632,  633,  634,  635,  636,  637,  638,  620,  639,
      641,  642,  644,  645,  646,  647,  619,  647,  621,  622,

      648,  623,  649,  624,  625,  626,  629,  620,  650,  631,
      632,  633,  634,  635,  636,  637,  638,  620,  639,  641,
      642,  644,  645,  646,  647,  651,  647,  652,  653,  648,
      672,  649,  653,  654,  654,  654,  654,  650,  655,  655,
      655,  655,  656,  656,  656,  656,  657,    0,  657,    0,
      657,  657,  657,  657,  651,  656,  652,  653,    0,  672,
        0,  653,  658,  658,  658,  658,  659,    0,  659,  659,
      659,  659,  659,  660,  660,  660,  660,  661,  661,  661,
      661,  662,  659,  673,  656,  663,  663,  663,  663,  664,
      674,  675,  676,  677,  662,  662,  662,  662,  678,    0,

      679,  680,  664,  664,  664,  664,  665,  665,  677,  665,
      681,  659,  673,  665,  682,  683,  684,  685,  686,  674,
      675,  676,  677,  687,  665,  688,    0,  678,  665,  679,
      680,  689,  691,  692,  693,  694,  695,  677,  696,  681,
      697,  698,  699,  682,  683,  684,  685,  686,  700,  701,
      702,  703,  687,  705,  688,  665,  704,  706,  707,  708,
      689,  691,  692,  693,  694,  695,  704,  696,  709,  697,
      698,  699,  710,  713,  715,  716,  704,  700,  701,  702,
      703,  717,  705,  718,  719,  720,  706,  707,  708,  721,
      722,  723,  725,  726,  728,  704,  729,  709,  730,  732,

      733,  710,  713,  715,  716,  704,  731,  734,  731,  735,
      717,  736,  718,  719,  720,  738,  739,  740,  721,  722,
      723,  725,  726,  728,  742,  729,  737,  730,  732,  733,
      737,  745,  746,  747,  748,  731,  734,  731,  735,  750,
      736,  751,  753,  754,  738,  739,  740,  755,  757,  758,
      759,  760,  761,  742,  762,  737,  763,  766,  767,  737,
      745,  746,  747,  748,  768,  769,  776,  778,  750,  779,
      751,  753,  754,  771,  781,  783,  755,  757,  758,  759,
      760,  761,  784,  762,  771,  763,  766,  767,  786,  787,
      788,  790,  792,  768,  769,  776,  778,  794,  779,  795,

      796,  797,  771,  781,  783,  798,  799,  800,  802,    0,
        0,  784,    0,  771,  805,  806,  807,  786,  787,  788,
      790,  792,  803,  803,  803,  803,  794,  809,  795,  796,
      797,  812,  813,  814,  798,  799,  800,  802,  804,  804,
      804,  804,  815,  805,  806,  807,  817,  818,  820,  821,
      822,  824,  825,  826,  827,  828,  809,  829,  830,  833,
      812,  813,  814,  834,  835,  836,  843,  845,  846,  848,
      850,  815,  851,  853,  838,  817,  818,  820,  821,  822,
      824,  825,  826,  827,  828,  838,  829,  830,  833,  854,
      855,  857,  834,  835,  836,  843,  845,  846,  848,  850,

      859,  851,  853,  838,  861,  862,  863,  864,  865,  866,
      867,  869,    0,    0,  838,    0,    0,    0,  854,  855,
      857,  870,  870,  870,  870,  871,  871,  871,  871,  859,
      876,  877,  878,  861,  862,  863,  864,  865,  866,  867,
      869,  872,  872,  872,  872,  873,  873,  873,  873,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  880,  876,
      877,  878,  883,  874,  884,  885,  886,  888,  889,  891,
      892,  893,  895,  896,  897,  898,  899,  900,  901,  904,
      905,  906,  907,    0,  914,  916,  917,  880,  919,  921,
      922,  883,  874,  884,  885,  886,  888,  889,  891,  892,

      893,  895,  896,  897,  898,  899,  900,  901,  904,  905,
      906,  907,  909,  914,  916,  917,  924,  919,  921,  922,
      925,  926,  928,  909,  930,  932,  933,  934,  935,  936,
      937,  938,  940,  941,  941,  941,  941,  942,  942,  942,
      942,  909,  949,  950,    0,  924,    0,    0,    0,  925,
      926,  928,  909,  930,  932,  933,  934,  935,  936,  937,
      938,  940,  943,  943,  943,  943,  944,  944,  944,  944,
      945,  949,  950,  945,  945,  945,  945,  946,  946,  946,
      946,  947,  947,  947,  947,  948,  945,  951,  953,  956,
      957,  958,  959,  961,  962,  964,  965,  966,  948,  948,

      948,  948,  968,  969,  970,  971,  972,  973,  974,  977,
      978,  979,  980,    0,  987,  945,  951,  953,  956,  957,
      958,  959,  961,  962,  964,  965,  966,  989,  990,  992,
      994,  968,  969,  970,  971,  972,  973,  974,  977,  978,
      979,  980,  982,  987,  995,  997,  998,  999, 1001, 1003,
     1005, 1006, 1007,  982, 1008, 1009,  989,  990,  992,  994,
     1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022,
     1023,  982, 1024,  995,  997,  998,  999, 1001, 1003, 1005,
     1006, 1007,  982, 1008, 1009, 1025, 1026, 1027, 1029, 1010,
     1011, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023,

     1030, 1024, 1033, 1035, 1037, 1039, 1040, 1043, 1044, 1048,
     1049, 1050, 1051, 1053, 1025, 1026, 1027, 1029, 1054, 1055,
     1057, 1058, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1030,
     1069, 1033, 1035, 1037, 1039, 1040, 1043, 1044, 1048, 1049,
     1050, 1051, 1053, 1070, 1071, 1072, 1073, 1054, 1055, 1057,
     1058, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1075, 1069,
     1076, 1079, 1081, 1083, 1085, 1086, 1089, 1090, 1094, 1095,
     1096, 1097, 1070, 1071, 1072, 1073, 1099, 1100, 1101, 1103,
     1104, 1107, 1107, 1107, 1107, 1108, 1109, 1075, 1110, 1076,
     1079, 1081, 1083, 1085, 1086, 1089, 1090, 1094, 1095, 1096,

     1097, 1111, 1112, 1115, 1116, 1099, 1100, 1101, 1103, 1104,
     1117, 1118, 1119, 1120, 1108, 1109, 1121, 1110, 1123, 1124,
     1127, 1129, 1131, 1133, 1134, 1137, 1138, 1142, 1143, 1144,
     1111, 1112, 1115, 1116, 1145, 1147, 1148, 1149, 1151, 1117,
     1118, 1119, 1120, 1152,    0, 1121,    0, 1123, 1124, 1127,
     1129, 1131, 1133, 1134, 1137, 1138, 1142, 1143, 1144, 1154,
     1154, 1154, 1154, 1145, 1147, 1148, 1149, 1151, 1156, 1156,
     1156, 1156, 1152, 1157, 1157, 1157, 1157, 1158, 1159, 1160,
     1161, 1162, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173,
     1174, 1177, 1179, 1181, 1183, 1184, 1187, 1188, 1192, 1193,

     1194, 1195, 1197, 1198, 1199, 1201, 1158, 1159, 1160, 1161,
     1162, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174,
     1177, 1179, 1181, 1183, 1184, 1187, 1188, 1192, 1193, 1194,
     1195, 1197, 1198, 1199, 1201, 1202, 1204, 1205, 1207, 1209,
     1210, 1212, 1214, 1218, 1221, 1222, 1223, 1225, 1228, 1230,
     1233, 1234, 1235, 1237, 1239, 1240, 1242, 1244, 1248, 1251,
     1252, 1253, 1255, 1258, 1202, 1204, 1205, 1207, 1209, 1210,
     1212, 1214, 1218, 1221, 1222, 1223, 1225, 1228, 1230, 1233,
     1234, 1235, 1237, 1239, 1240, 1242, 1244, 1248, 1251, 1252,
     1253, 1255, 1258, 1260, 1263, 1264, 1264, 1264, 1264, 1265,

     1266, 1268, 1270, 1271, 1273, 1275, 1279, 1282, 1283, 1284,
     1286, 1289, 1291, 1294, 1295, 1295, 1295, 1295, 1296, 1296,
     1296, 1296, 1260, 1263, 1297, 1297, 1297, 1297, 1265, 1266,
     1268, 1270, 1271, 1273, 1275, 1279, 1282, 1283, 1284, 1286,
     1289, 1291, 1294, 1298, 1299, 1301, 1303, 1304, 1306, 1308,
     1312, 1315, 1316, 1317, 1319, 1322, 1324, 1327, 1328, 1333,
     1334, 1337, 1339, 1340, 1343, 1348, 1349, 1352, 1354, 1355,
        0,    0, 1298, 1299, 1301, 1303, 1304, 1306, 1308, 1312,
     1315, 1316, 1317, 1319, 1322, 1324, 1327, 1328, 1333, 1334,
     1337, 1339, 1340, 1343, 1348, 1349, 1352, 1354, 1355, 1358,

     1358, 1358, 1358, 1359, 1364, 1365, 1368, 1370, 1371, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1375, 1376, 1381, 1382,
     1385, 1387, 1388, 1392, 1394, 1395, 1397, 1399, 1401, 1402,
     1404,    0, 1359, 1364, 1365, 1368, 1370, 1371, 1408, 1392,
     1409, 1411, 1415, 1399, 1406, 1413, 1376, 1381, 1382, 1385,
     1387, 1388, 1392, 1394, 1395, 1397, 1399, 1401, 1402, 1404,
     1406, 1413, 1416, 1418, 1419, 1420, 1421, 1408, 1392, 1409,
     1411, 1415, 1399, 1406, 1413, 1424, 1425, 1426, 1429, 1430,
     1431, 1434, 1435, 1436, 1439, 1440, 1441, 1442, 1443, 1406,
     1413, 1416, 1418, 1419, 1420, 1421, 1444, 1445, 1446, 1447,

     1448, 1449, 1450, 1451, 1424, 1425, 1426, 1429, 1430, 1431,
     1434, 1435, 1436, 1439, 1440, 1441, 1442, 1443, 1452, 1453,
     1454, 1455, 1456, 1457, 1458, 1444, 1445, 1446, 1447, 1448,
     1449, 1450, 1451, 1459, 1460, 1461, 1462, 1464, 1467, 1470,
     1473, 1475, 1476, 1477, 1478, 1479, 1480, 1452, 1453, 1454,
     1455, 1456, 1457, 1458, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1459, 1460, 1461, 1462, 1464, 1467, 1470, 1473,
     1475, 1476, 1477, 1478, 1479, 1480, 1489, 1490,    0,    0,
        0,    0,    0, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1489, 1490, 1496,    0, 1496,
     1496, 1497,    0, 1497,    0, 1497, 1498, 1498, 1498, 1498,
     1498, 1498, 1499,    0, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1500,    0,    0, 1500, 1500, 1500,    0, 1500, 1500,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504,    0,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32	gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
		SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);	    

#define SQL_NEW_KEYWORD(token) \
		SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
	yyget_extra(yyscanner)->SQLyyerror(msg); \
}													

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int SQLyylex_init (yyscan_t* scanner);

int SQLyylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int SQLyylex_destroy ( yyscan_t yyscanner );



int SQLyyget_debug ( yyscan_t yyscanner );



void SQLyyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE SQLyyget_extra ( yyscan_t yyscanner );



void SQLyyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *SQLyyget_in ( yyscan_t yyscanner );



void SQLyyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *SQLyyget_out ( yyscan_t yyscanner );



void SQLyyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int SQLyyget_leng ( yyscan_t yyscanner );



char *SQLyyget_text ( yyscan_t yyscanner );



int SQLyyget_lineno ( yyscan_t yyscanner );



void SQLyyset_lineno ( int _line_number , yyscan_t yyscanner );




int SQLyyget_column  ( yyscan_t yyscanner );





void SQLyyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * SQLyyget_lval ( yyscan_t yyscanner );


void SQLyyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap ( yyscan_t yyscanner );
#else
extern int SQLyywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int SQLyylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int SQLyylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		SQLyy_load_buffer_state(yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1496 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1495 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 105:
case 106:
case 107:
case 108:
case 109:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 114:
case 115:
case 116:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 117:
case 118:
case 119:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 120:
case 121:
case 122:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 123:
case 124:
case 125:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }											 
	YY_BREAK
case 129:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }	
	YY_BREAK
case 132:
/* rule 132 can match eol */
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 138:
YY_RULE_SETUP
{}
	YY_BREAK
case 139:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 141:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( SQLyywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of SQLyylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1496 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1496 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1495);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	SQLyy_load_buffer_state(yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void SQLyy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file ,yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf ,yyscanner );

	SQLyyfree((void *) b ,yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	SQLyy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack(yyscanner);

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void SQLyypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b ,yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return SQLyy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) SQLyyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE SQLyyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int SQLyyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *SQLyyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void SQLyyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void SQLyyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void SQLyyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void SQLyyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int SQLyyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void SQLyyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * SQLyyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void SQLyyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* SQLyylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int SQLyylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* SQLyylex_init_extra has the same functionality as SQLyylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to SQLyyalloc in
 * the yyextra field.
 */
int SQLyylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    SQLyyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    SQLyyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}


/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	SQLyyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        SQLyyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    SQLyyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *SQLyyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *SQLyyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void SQLyyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr yytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput (yyscanner);
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput (yyscanner);
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	while (!checkeof(ch = yyinput(yyscanner))) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput(yyscanner)) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
        {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
        }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
	sal_Int32 nToken;
	OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	    {
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	    }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		    {
		    Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
		    size_t nLength = strlen(text);
		    size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
		    if (sStmt[nPos] == ':')
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			    nToken = SQL_TOKEN_NAME; 				
		        }
		    else
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
			    nToken = SQL_TOKEN_STRING;			
		        }
		    }
	}
	return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
	    return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
        {
	    m_sErrorMessage.append(": ");
	    Utf8String aError;
	    static sal_Int32 BUFFERSIZE = 256;
	    static sal_Char* Buffer = 0;
	    if(!Buffer)
		    Buffer = new sal_Char[BUFFERSIZE];

	    sal_Char *s = Buffer;
	    sal_Int32 nPos = 1;
	    sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
	    *s++ = ch;
	    while (!checkeof(ch = yyinput(yyscanner))) 
	        {
		    if (ch == ' ') 
		        {
			    if ((ch = yyinput(yyscanner)) != ' ') 
			        {
				    if (!checkeof(ch))
					    unput(ch);
			        }
			    *s = '\0';
			    aError.assign(Buffer);
			    break;
		        }
		    else
		        {
			    *s++ = ch;
			    if (++nPos == BUFFERSIZE)
			        {
				    Utf8String aBuf(Buffer);
				    delete[] Buffer;
				    BUFFERSIZE *=2;
				    Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
					    *Buffer = aBuf[i];
				    s = &Buffer[nPos];
			        }
		        }
	        }

	    m_sErrorMessage += aError;
	    delete[] Buffer;
	    Buffer = NULL;
        }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }
    
//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {		
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
    }

// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(pNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(_rNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

