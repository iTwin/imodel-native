#line 2 "D:\\bsw\\git-native-4\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1552] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      142,  142,  148,  146,  144,  143,  146,   92,  107,  104,
      135,  107,   93,   95,   94,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  103,  102,  133,  107,
      109,  109,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  136,  134,  137,  107,  107,  117,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  107,  117,  146,  142,  142,  142,  142,  140,
       92,  107,  104,  107,  107,  107,   93,   95,   94,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      141,  103,  102,  144,   99,    0,  101,  105,   96,   98,
       97,  106,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   49,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,   64,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  100,  111,  112,  109,
        0,    0,  108,  108,  108,    4,  108,  108,  108,  108,
      108,  108,   12,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   42,   49,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   62,   64,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  132,  122,  132,
      132,  132,  117,  132,  116,  116,  116,    4,  116,  116,

      116,  116,  116,  116,   12,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   42,   49,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,   62,
       64,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  128,
      132,  132,  132,  117,  132,    0,  138,  142,  142,   99,
      142,  101,  105,   96,   98,   97,  106,  142,  142,    4,
      142,  142,  142,  142,  142,  142,   12,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,   42,
       49,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   62,   64,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  100,    0,  145,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,   41,    0,
        0,   45,    0,    0,    0,    0,    0,    0,   56,   57,
        0,   59,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   73,    0,    0,   76,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
        0,    0,  113,  110,    1,    2,    3,    5,    6,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,   28,  108,  108,  108,
      108,  108,  108,   35,  108,  108,  108,  108,   41,  108,
      108,   45,  108,  108,  108,  108,  108,  108,   56,   57,
      108,   59,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,   73,  108,  108,   76,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,    0,  125,

      132,  120,  132,  117,    0,  123,    1,    2,    3,    5,
        6,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   28,  116,
      116,  116,  116,  116,  116,   35,  116,  116,  116,  116,
       41,  116,  116,   45,  116,  116,  116,  116,  116,  116,
       56,   57,  116,   59,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,   73,  116,  116,   76,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
        0,  131,  126,  132,  132,  117,    0,  129,  138,    0,
      138,  142,  142,    1,    2,    3,    5,    6,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   28,  142,  142,  142,  142,
      142,  142,   35,  142,  142,  142,  142,   41,  142,  142,
       45,  142,  142,  142,  142,  142,  142,   56,   57,  142,
       59,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   73,  142,  142,   76,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,    0,    0,    0,
       10,    0,   13,   14,    0,    0,    0,    0,   21,    0,
       23,    0,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,   37,   38,    0,    0,    0,    0,    0,    0,

       48,   50,   51,   52,    0,   54,    0,    0,   60,    0,
       63,    0,    0,    0,   68,    0,    0,    0,    0,   74,
        0,   77,   78,   80,    0,    0,    0,    0,    0,    0,
        0,   89,    0,   91,    0,  115,    0,  114,  108,  108,
      108,   10,  108,   13,   14,  108,  108,  108,  108,   21,
      108,   23,  108,  108,  108,   27,  108,  108,  108,  108,
      108,  108,  108,   37,   38,  108,  108,  108,  108,  108,
      108,   48,   50,   51,   52,  108,   54,  108,  108,   60,
      108,   63,  108,  108,  108,   68,  108,  108,  108,  108,
       74,  108,   77,   78,   80,  108,  108,  108,  108,  108,

      108,  108,   89,  108,   91,  125,  132,    0,  124,  117,
      123,  116,  116,  116,   10,  116,   13,   14,  116,  116,
      116,  116,   21,  116,   23,  116,  116,  116,   27,  116,
      116,  116,  116,  116,  116,  116,   37,   38,  116,  116,
      116,  116,  116,  116,   48,   50,   51,   52,  116,   54,
      116,  116,   60,  116,   63,  116,  116,  116,   68,  116,
      116,  116,  116,   74,  116,   77,   78,   80,  116,  116,
      116,  116,  116,  116,  116,   89,  116,   91,  131,    0,
      130,  132,  117,  129,    0,  138,  142,  142,  142,   10,
      142,   13,   14,  142,  142,  142,  142,   21,  142,   23,

      142,  142,  142,   27,  142,  142,  142,  142,  142,  142,
      142,   37,   38,  142,  142,  142,  142,  142,  142,   48,
       50,   51,   52,  142,   54,  142,  142,   60,  142,   63,
      142,  142,  142,   68,  142,  142,  142,  142,   74,  142,
       77,   78,   80,  142,  142,  142,  142,  142,  142,  142,
       89,  142,   91,    0,    0,    0,    0,    0,   16,   17,
        0,    0,    0,    0,    0,    0,   30,    0,    0,   33,
       34,    0,   39,    0,   43,    0,   46,    0,    0,   53,
       55,    0,    0,   65,   66,    0,    0,   70,    0,    0,
        0,    0,   81,    0,    0,    0,   85,   86,    0,   90,

      108,  108,  108,  108,  108,   16,   17,  108,  108,  108,
      108,  108,  108,   30,  108,  108,   33,   34,  108,   39,
      108,   43,  108,   46,  108,  108,   53,   55,  108,  108,
       65,   66,  108,  108,   70,  108,  108,  108,  108,   81,
      108,  108,  108,   85,   86,  108,   90,  118,  124,  116,
      116,  116,  116,  116,   16,   17,  116,  116,  116,  116,
      116,  116,   30,  116,  116,   33,   34,  116,   39,  116,
       43,  116,   46,  116,  116,   53,   55,  116,  116,   65,
       66,  116,  116,   70,  116,  116,  116,  116,   81,  116,
      116,  116,   85,   86,  116,   90,  130,  119,    0,  139,

      142,  142,  142,  142,  142,   16,   17,  142,  142,  142,
      142,  142,  142,   30,  142,  142,   33,   34,  142,   39,
      142,   43,  142,   46,  142,  142,   53,   55,  142,  142,
       65,   66,  142,  142,   70,  142,  142,  142,  142,   81,
      142,  142,  142,   85,   86,  142,   90,    0,    0,    9,
        0,   15,    0,   22,    0,   25,    0,   29,   31,   32,
        0,   40,   44,    0,    0,    0,   61,   67,    0,    0,
       72,   75,    0,   82,    0,   84,   87,    0,  108,  108,
        9,  108,   15,  108,   22,  108,   25,  108,   29,   31,
       32,  108,   40,   44,  108,  108,  108,   61,   67,  108,

      108,   72,   75,  108,   82,  108,   84,   87,  108,  132,
      116,  116,    9,  116,   15,  116,   22,  116,   25,  116,
       29,   31,   32,  116,   40,   44,  116,  116,  116,   61,
       67,  116,  116,   72,   75,  116,   82,  116,   84,   87,
      116,  132,  139,  139,  142,  142,    9,  142,   15,  142,
       22,  142,   25,  142,   29,   31,   32,  142,   40,   44,
      142,  142,  142,   61,   67,  142,  142,   72,   75,  142,
       82,  142,   84,   87,  142,    0,    8,   11,    0,    0,
        0,   36,   45,    0,   58,    0,    0,    0,   83,   88,
      108,    8,   11,  108,  108,  108,   36,   45,  108,   58,

      108,  108,  108,   83,   88,  121,  116,    8,   11,  116,
      116,  116,   36,   45,  116,   58,  116,  116,  116,   83,
       88,  127,  139,  142,    8,   11,  142,  142,  142,   36,
       45,  142,   58,  142,  142,  142,   83,   88,    7,    0,
       24,    0,    0,    0,   71,    0,    7,  108,   24,  108,
      108,  108,   71,  108,    7,  116,   24,  116,  116,  116,
       71,  116,    7,  142,   24,  142,  142,  142,   71,  142,
        0,    0,    0,   47,   69,   79,  108,  108,  108,   47,
       69,   79,  116,  116,  116,   47,   69,   79,  142,  142,
      142,   47,   69,   79,    0,    0,    0,  108,  108,  108,

      116,  116,  116,  142,  142,  142,    0,    0,    0,  108,
      108,  108,  116,  116,  116,  142,  142,  142,   18,   19,
       26,   18,   19,   26,   18,   19,   26,   18,   19,   26,
        0,  108,  116,  142,    0,  108,  116,  142,    0,  108,
      116,  142,    0,  108,  116,  142,   20,   20,   20,   20,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1561] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  537, 3562,  359, 3562,  479, 3562, 3562, 3562,
     3562,  346,  341, 3562,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  398,  410,  401,  440,  350,
      438,  444,  448,  436,  459,  454,  419, 3562, 3562,  475,
      505,  510,  494,  513,  506,  525,  558,  563,  462,  511,
      557,  502,    0,  574,  522,  573,  608,  501,  587,  615,
      619,  625,  519,  578, 3562, 3562, 3562,    0,  682,  689,
      674,  694,  690,  738,  730,  745,  515,  567,  683,  604,
        0,  736,  623,  735,  782,  615,  782,  789,  790,  799,

      633,  663,  856,  863,  870,    0,  393,    0,  432, 3562,
        0,    0,    0,    0,  375, 3562,  648,    0,  422,  855,
      870,  871,  879,  913,  918,  620,  639,  792,  635,  929,
      869,  925,  964,  642,  942,  969,  934,  977,  684,  721,
     3562,  371,    0,  495, 3562,  448, 3562, 3562, 3562, 3562,
     3562, 3562,  686,  789,  752,  754,  799,  785,  793,  797,
      809, 3562,  854,  870,  861,  863,  873,  975,  910,  910,
      931,  958,  979,  985,  987,  992,  985,  983,  982,  987,
      992,  990,  986, 1003, 1021, 3562, 1001, 1009, 1032, 1014,
     1012, 1028, 1026, 1027, 1036, 1043, 1038, 1047, 1032, 1052,

     1053, 1048, 1046, 1047, 1047, 1044, 1050, 1061, 1055, 1052,
     1089, 1082, 1081, 1081, 1089, 1081, 3562, 1111, 1115, 1141,
     1149,    0,    0, 1099, 1122, 1118, 1117, 1122, 1111, 1124,
     1133, 1136,    0, 1133, 1143, 1142, 1140, 1139, 1149, 1143,
     1142, 1146, 1147, 1165, 1167, 1166, 1169, 1161, 1159, 1161,
     1167, 1171, 1169, 1167, 1190, 1190,    0, 1196, 1200, 1203,
     1201, 1197, 1205, 1200, 1202, 1211, 1218, 1214, 1223, 1208,
     1228, 1229, 1224, 1224, 1242, 1224, 1222, 1228, 1237, 1234,
     1242, 1263, 1260, 1258, 1261, 1263, 1255,    0, 1293, 1317,
     1321, 1325, 1340, 1348,    0, 1265, 1319, 1292, 1292, 1318,

     1302, 1311, 1311, 1322,    0, 1320, 1335, 1331, 1329, 1329,
     1341, 1338, 1337, 1342, 1343, 1359, 1361, 1360, 1392, 1355,
     1354, 1352, 1356, 1367, 1365, 1359, 1377, 1383,    0, 1375,
     1382, 1393, 1391, 1387, 1400, 1395, 1396, 1406, 1413, 1408,
     1417, 1402, 1422, 1424, 1421, 1417, 1426, 1424, 1421, 1428,
     1437, 1440, 1434, 1450, 1456, 1453, 1451, 1459, 1445, 1507,
     1484, 1511, 1515, 1526, 1534, 1540, 1545,    0,  676,    0,
     1566,    0,    0,    0,    0,    0,    0, 1473, 1532, 1493,
     1506, 1527, 1527, 1534, 1534, 1535,    0, 1533, 1540, 1539,
     1537, 1536, 1551, 1539, 1546, 1549, 1550, 1567, 1569, 1568,

     1571, 1563, 1573, 1571, 1576, 1582, 1580, 1583, 1600, 1593,
        0, 1599, 1604, 1603, 1597, 1595, 1607, 1602, 1605, 1614,
     1621, 1616, 1625, 1610, 1630, 1646, 1625, 1621, 1626, 1639,
     1635, 1650, 1659, 1652, 1645, 1659, 1665, 1662, 1661, 1667,
     1654,    0,  440, 3562, 3562, 3562, 3562, 3562, 3562, 1666,
     1657, 1682, 1682, 1673, 1684, 1673, 1673, 1669, 1672, 1686,
     1691, 1702, 1687, 1708, 1694, 1716, 3562, 1721, 1705, 1719,
     1707, 1708, 1727, 1706, 1717, 1719, 1711, 1726, 3562, 1732,
     1733, 1767, 1727, 1722, 1739, 1736, 1739, 1744, 3562, 3562,
     1727, 3562, 1737, 1735, 1738, 1760, 1763, 1762, 1767, 1759,

     1773, 1772, 1780, 3562, 1781, 1778, 3562, 1774, 1784, 1785,
     1776, 1781, 1795, 1785, 1779, 1799, 1789, 1796, 1847, 1851,
     1859, 1865, 1869,    0,    0,    0,    0,    0,    0, 1794,
     1798, 1825, 1836, 1836, 1860, 1853, 1854, 1850, 1852, 1866,
     1867, 1870, 1854, 1873, 1859, 1873,    0, 1878, 1863, 1877,
     1864, 1865, 1885, 1864, 1875, 1877, 1869, 1882,    0, 1887,
     1888, 1919, 1882, 1886, 1918, 1917, 1920, 1925,    0,    0,
     1908,    0, 1918, 1912, 1907, 1928, 1931, 1930, 1926, 1918,
     1932, 1929, 1937,    0, 1938, 1935,    0, 1931, 1941, 1942,
     1933, 1935, 1950, 1940, 1943, 1978, 1968, 1976, 1995, 2002,

     2006, 2011, 2029, 2036, 2040, 2044,    0,    0,    0,    0,
        0, 1974, 1968, 2017, 2024, 2028, 2037, 2030, 2030, 2027,
     2030, 2044, 2045, 2048, 2032, 2051, 2037, 2051,    0, 2057,
     2041, 2055, 2042, 2043, 2062, 2041, 2052, 2054, 2046, 2059,
        0, 2069, 2071, 2103, 2070, 2079, 2095, 2092, 2095, 2101,
        0,    0, 2085,    0, 2095, 2090, 2085, 2106, 2107, 2107,
     2103, 2095, 2109, 2107, 2115,    0, 2116, 2113,    0, 2109,
     2119, 2120, 2117, 2112, 2126, 2128, 2136, 2155, 2146, 2151,
     2173, 2180, 2185, 2204, 2189, 2211, 2215, 2219, 2237, 2228,
     2246, 2248,    0,    0,    0,    0,    0,    0, 2151, 2194,

     2217, 2225, 2222, 2230, 2223, 2223, 2223, 2225, 2244, 2246,
     2249, 2233, 2252, 2238, 2252,    0, 2257, 2241, 2255, 2242,
     2243, 2266, 2245, 2256, 2258, 2252, 2265,    0, 2271, 2272,
     2299, 2278, 2273, 2290, 2291, 2294, 2304,    0,    0, 2287,
        0, 2297, 2291, 2286, 2307, 2308, 2308, 2304, 2296, 2310,
     2307, 2315,    0, 2318, 2316,    0, 2312, 2322, 2323, 2317,
     2317, 2334, 2336, 2330, 2350, 2344, 2351, 2342, 2361, 2349,
     3562, 2363, 3562, 3562, 2360, 2350, 2352, 2367, 3562, 2353,
     3562, 2365, 2363, 2364, 3562, 2361, 2353, 2365, 2363, 2379,
     2365, 2385, 3562, 3562, 2373, 2376, 2374, 2375,  420, 2402,

     3562, 3562, 3562, 3562, 2388, 3562, 2403, 2398, 3562, 2412,
     3562, 2405, 2406, 2412, 3562, 2408, 2407, 2426, 2426, 3562,
     2416, 3562, 2412, 3562, 2418, 2412, 2419, 2415, 2429, 2434,
     2433, 3562, 2437, 3562, 2480, 2484, 2488, 2492, 2443, 2462,
     2451,    0, 2483,    0,    0, 2480, 2470, 2472, 2487,    0,
     2473,    0, 2485, 2485, 2487,    0, 2484, 2476, 2486, 2483,
     2499, 2485, 2505,    0,    0, 2491, 2494, 2491, 2492,  376,
     2506,    0,    0,    0,    0, 2491,    0, 2504, 2496,    0,
     2510,    0, 2498, 2507, 2514,    0, 2528, 2527, 2546, 2546,
        0, 2536,    0, 2532,    0, 2538, 2534, 2542, 2538, 2552,

     2555, 2553,    0, 2557,    0, 2571, 2575, 2579, 2600, 2605,
     2609, 2559, 2578, 2567,    0, 2600,    0,    0, 2597, 2587,
     2589, 2604,    0, 2593,    0, 2606, 2604, 2605,    0, 2602,
     2594, 2604, 2601, 2617, 2603, 2623,    0,    0, 2609, 2612,
     2609, 2610,  372, 2622,    0,    0,    0,    0, 2610,    0,
     2623, 2614,    0, 2628,    0, 2623, 2625, 2650,    0, 2646,
     2645, 2664, 2664,    0, 2654,    0, 2652,    0, 2659, 2653,
     2660, 2656, 2670, 2673, 2671,    0, 2675,    0, 2689, 2693,
     2718, 2722, 2729, 2733, 2737, 2755, 2667, 2686, 2717,    0,
     2731,    0,    0, 2728, 2718, 2720, 2735,    0, 2721,    0,

     2733, 2731, 2732,    0, 2729, 2721, 2735, 2732, 2748, 2734,
     2754,    0,    0, 2740, 2743, 2740, 2741,  366, 2771,    0,
        0,    0,    0, 2741,    0, 2754, 2758,    0, 2772,    0,
     2761, 2774, 2780,    0, 2776, 2775, 2794, 2794,    0, 2784,
        0, 2780,    0, 2786, 2780, 2787, 2783, 2797, 2804, 2802,
        0, 2806,    0, 2811, 2808, 2789, 2814, 2796, 3562, 3562,
     2803, 2814, 2806, 2829, 2820, 2831, 3562, 2817, 2828, 3562,
     3562, 2832, 3562, 2844, 3562, 2832, 3562, 2848, 2835, 3562,
     3562, 2854, 2836, 3562, 3562, 2856, 2839, 3562, 2858, 2840,
     2854, 2842, 3562, 2862, 2845, 2864, 3562, 2851, 2870, 3562,

     2871, 2868, 2849, 2874, 2857,    0,    0, 2864, 2887, 2879,
     2889, 2880, 2900,    0, 2888, 2890,    0,    0, 2892,    0,
     2904,    0, 2892,    0, 2908, 2895,    0,    0, 2914, 2896,
        0,    0, 2916, 2899,    0, 2918, 2900, 2918, 2906,    0,
     2922, 2905, 2924,    0, 2911, 2930,    0,  721, 2958, 2931,
     2928, 2910, 2935, 2943,    0,    0, 2952, 2962, 2954, 2964,
     2955, 2966,    0, 2952, 2954,    0,    0, 2956,    0, 2968,
        0, 2956,    0, 2972, 2959,    0,    0, 2978, 2960,    0,
        0, 2980, 2963,    0, 2982, 2964, 2978, 2966,    0, 2982,
     2965, 2984,    0, 2971, 2990,    0, 3029,  778, 3033, 3037,

     3032, 3029, 3010, 3035, 3017,    0,    0, 3024, 3034, 3026,
     3036, 3027, 3038,    0, 3024, 3026,    0,    0, 3028,    0,
     3040,    0, 3028,    0, 3044, 3031,    0,    0, 3050, 3032,
        0,    0, 3052, 3035,    0, 3054, 3036, 3050, 3038,    0,
     3054, 3037, 3056,    0, 3072, 3091,    0, 3075, 3080, 3562,
     3081, 3562, 3076, 3562, 3094, 3562, 3082, 3562, 3562, 3562,
     3095, 3562, 3562, 3082, 3096, 3090, 3562, 3562, 3094, 3101,
     3562, 3562, 3104, 3562, 3092, 3562, 3562, 3089, 3090, 3095,
        0, 3096,    0, 3091,    0, 3109,    0, 3097,    0,    0,
        0, 3110,    0,    0, 3097, 3111, 3105,    0,    0, 3109,

     3116,    0,    0, 3148,    0, 3136,    0,    0, 3133, 3160,
     3138, 3143,    0, 3144,    0, 3139,    0, 3157,    0, 3145,
        0,    0,    0, 3158,    0,    0, 3145, 3159, 3153,    0,
        0, 3157, 3164,    0,    0, 3167,    0, 3155,    0,    0,
     3152, 3179, 3189, 3208, 3157, 3162,    0, 3163,    0, 3187,
        0, 3205,    0, 3193,    0,    0,    0, 3206,    0,    0,
     3193, 3207, 3201,    0,    0, 3205, 3212,    0,    0, 3215,
        0, 3203,    0,    0, 3200, 3215, 3562, 3562,  315, 3200,
     3201, 3562, 3562, 3219, 3562, 3201, 3213, 3212, 3562, 3562,
     3222,    0,    0,  218, 3207, 3208,    0,    0, 3226,    0,

     3208, 3220, 3219,    0,    0, 3270, 3262,    0,    0,  211,
     3247, 3248,    0,    0, 3266,    0, 3248, 3260, 3259,    0,
        0, 3281, 3285, 3277,    0,    0,  204, 3262, 3263,    0,
        0, 3281,    0, 3263, 3275, 3274,    0,    0, 3562, 3284,
     3562, 3280, 3270, 3286, 3562, 3276,    0, 3289,    0, 3285,
     3282, 3298,    0, 3289,    0, 3304,    0, 3297, 3287, 3320,
        0, 3310,    0, 3323,    0, 3319, 3309, 3325,    0, 3323,
     3339, 3332, 3327, 3562, 3562, 3562, 3343, 3336, 3331,    0,
        0,    0, 3346, 3339, 3334,    0,    0,    0, 3349, 3342,
     3337,    0,    0,    0, 3340, 3348, 3348, 3343, 3351, 3351,

     3346, 3354, 3368, 3363, 3371, 3371, 3381, 3382, 3369, 3392,
     3393, 3380, 3395, 3396, 3383, 3398, 3399, 3386, 3562, 3387,
     3562,    0, 3388,    0,    0, 3389,    0,    0, 3390,    0,
     3390, 3398, 3399, 3400, 3420, 3421, 3422, 3423, 3412, 3427,
     3428, 3429, 3427, 3428, 3429, 3430, 3562,    0,    0,    0,
     3562, 3496, 3502, 3507, 3516, 3525, 3534,  245, 3543, 3552
    } ;

static const flex_int16_t yy_def[1561] =
    {   0,
     1551,    1, 1551,    3, 1551,    5,    5,    5,    5,    5,
     1551,   11, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1551, 1551, 1551, 1553, 1553, 1553,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,

     1554, 1554, 1553, 1553, 1555, 1556, 1556, 1556, 1556, 1551,
     1556, 1556, 1556, 1556, 1556, 1551, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1551, 1556, 1556, 1551, 1551, 1557, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1558, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554,

     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1553,
     1553, 1553, 1553, 1553, 1553, 1555, 1555, 1556, 1556, 1556,
     1559, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,

     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1557, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1558, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1551, 1553,

     1553, 1553, 1553, 1553, 1551, 1553, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1551, 1553, 1553, 1553, 1553, 1553, 1551, 1553, 1555, 1551,
     1555, 1559, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,

     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,

     1552, 1552, 1552, 1552, 1552, 1551, 1553, 1551, 1553, 1553,
     1551, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1551, 1551,
     1553, 1553, 1553, 1551, 1560, 1555, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,

     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1551, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1551, 1553, 1560, 1560,

     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,

     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1553, 1560, 1560, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,

     1552, 1552, 1552, 1552, 1552, 1553, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1553, 1560, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552,
     1552, 1552, 1554, 1554, 1554, 1554, 1554, 1554, 1556, 1556,
     1556, 1556, 1556, 1556, 1551, 1551, 1551, 1552, 1552, 1552,

     1554, 1554, 1554, 1556, 1556, 1556, 1551, 1551, 1551, 1552,
     1552, 1552, 1554, 1554, 1554, 1556, 1556, 1556, 1551, 1551,
     1551, 1552, 1552, 1552, 1554, 1554, 1554, 1556, 1556, 1556,
     1551, 1552, 1554, 1556, 1551, 1552, 1554, 1556, 1551, 1552,
     1554, 1556, 1551, 1552, 1554, 1556, 1551, 1552, 1554, 1556,
        0, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551
    } ;

static const flex_int16_t yy_nxt[3646] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      524,   78,  104,  104,  104,  104,  103, 1464,   78,  104,
      104,  104,  104,   19, 1456,   19,  105,  105,  105,  105,
       19, 1448,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1440,  153,
      147,  154,  163,  157,  167,  182,  155,  158,  168,  156,
      183,  159,  169,  187,  160, 1224,  164,  161,  170,  165,
      371, 1173,  166,  200,  369, 1124,  144,  162,  153,  372,

      154,  163,  157,  167,  182,  155,  158,  168,  156,  183,
      159,  169,  187,  160,  171,  164,  161,  170,  165,  184,
      177,  166,  200,  172,  185,  173,  162,  193,  188,  186,
      174,  178,  189,  175,  179,  176,  191,  180,  190, 1077,
      181,  194,  444,  171,  192,  376,  377,  195,  184,  177,
      444,  442,  172,  185,  173,  370,  193,  188,  186,  174,
      178,  189,  175,  179,  176,  191,  180,  190,  201,  181,
      194,  196,  202,  192,  204,  211,  195,  212,  203,  197,
      213,  208,  209,  198,  205,  214,  199,  215,  216,  206,
      207,  210,  218,  218,  218,  218,  144,  201,  144,  217,

      196,  202,  145,  204,  211,  253,  212,  203,  197,  213,
      208,  209,  198,  205,  214,  199,  215,  216,  206,  207,
      210,  219,  220,  220,  220,  220,  219,  220,  220,  220,
      220,  224,  234,  225,  253,  221, 1551,  254,  226,  228,
      221,  227,  258,  229,  271,  285,  235,  230,  262,  236,
      231,  238,  237,  232,  222,  239,  263, 1551,  325,  240,
      224,  234,  225,  233,  221,  241,  254,  226,  228,  221,
      227,  258,  229,  271,  285,  235,  230,  262,  236,  231,
      238,  237,  232,  222,  239,  263,  242,  325,  240,  248,
     1551,  255,  233,  326,  241,  243,  256,  244, 1551,  264,

      249,  257,  245,  250,  259,  246,  251,  247,  260,  252,
     1551,  286,  287,  265,  261,  242, 1551,  272,  248,  266,
      255,  273,  326, 1551,  243,  256,  244,  274,  264,  249,
      257,  245,  250,  259,  246,  251,  247,  260,  252,  267,
      286,  287,  265,  261,  330,  275,  272,  268,  266,  334,
      273,  269,  279,  280,  270,  276,  274,  335,  343,  357,
      277,  278,  281,  407,  282,  408,  283, 1551,  267,  284,
      373,  374,  375,  330,  275,  412,  268,  369,  334,  144,
      269,  279,  280,  270,  276,  425,  335,  343,  357,  277,
      278,  281,  407,  282,  408,  283,  358,  359,  284,  289,

      289,  289,  289,  291,  412,  292,  293,  293,  293,  293,
      439,  296,  290,  297,  425, 1551,  306,  327,  298,  294,
      300,  299,  328,  445,  301,  358,  359,  329,  302, 1551,
      307,  303, 1551,  308,  304,  291,  309, 1310, 1551,  439,
      296,  290,  297, 1551,  305,  306,  327,  298,  294,  300,
      299,  328,  445,  301,  440,  441,  329,  302,  314,  307,
      303,  336,  308,  304,  310,  309,  331,  315,  311,  316,
      332,  320,  312,  305,  317,  337,  333,  318,  313,  319,
      448,  338,  321,  440,  441,  322,  449,  314,  323, 1551,
      336,  324, 1342,  310,  363,  331,  315,  311,  316,  332,

      320,  312, 1551,  317,  337,  333,  318,  313,  319,  448,
      338,  321,  344,  339,  322,  449,  345,  323,  446,  347,
      324,  340,  346,  351,  352,  341,  409,  450,  342,  348,
      451,  410,  452,  353,  349,  350,  411,  453,  354,  447,
      355,  344,  339,  356, 1551,  345, 1551,  446,  347,  454,
      340,  346,  351,  352,  341,  409,  450,  342,  348,  451,
      410,  452,  353,  349,  350,  411,  453,  354,  447,  355,
     1551, 1551,  356,  360,  360,  360,  360,  362,  454,  363,
      364,  364,  364,  364, 1551, 1551,  361,  367,  367,  367,
      367, 1551,  378,  365,  379,  416,  382,  388,  455,  380,

      383,  458,  381,  417,  384,  392,  459,  385,  456,  393,
      386,  389, 1551,  394,  390,  361,  457,  391,  460,  395,
      387,  378,  365,  379,  416,  382,  388,  455,  380,  383,
      458,  381,  417,  384,  392,  459,  385,  456,  393,  386,
      389,  396,  394,  390,  402,  457,  391,  460,  395,  387,
      397,  418,  398, 1551,  463,  403,  464,  399,  404,  413,
      400,  405,  401,  414,  406,  419, 1551,  433,  434,  415,
      396,  420,  426,  402, 1551,  465,  427,  435, 1551,  397,
      418,  398,  428,  463,  403,  464,  399,  404,  413,  400,
      405,  401,  414,  406,  419,  421,  433,  434,  415,  429,

      420,  426,  466,  422,  465,  427,  435,  423,  467,  430,
      424,  428,  461,  468,  431,  432,  436,  469,  437,  462,
      470,  438,  472,  473,  421,  474,  471,  475,  429,  476,
      477,  466,  422,  478,  479,  483,  423,  467,  430,  424,
      484,  461,  468,  431,  432,  436,  469,  437,  462,  470,
      438,  472,  473,  487,  474,  471,  475,  488,  476,  477,
      480,  489,  478,  479,  483,  481,  482,  490,  485,  484,
      486,  491,  492,  493,  494,  495,  496,  497,  498,  499,
      501,  500,  487,  502,  503,  505,  488,  506,  507,  480,
      489,  508,  504,  509,  481,  482,  490,  485,  510,  486,

      491,  492,  493,  494,  495,  496,  497,  498,  499,  501,
      500,  513,  502,  503,  505,  514,  506,  507,  515,  517,
      508,  504,  509,  511,  516,  512,  518,  510,  218,  218,
      218,  218,  520,  520,  520,  520,  525, 1551, 1551, 1551,
      513,  519, 1551, 1551,  514,  521,  528,  515,  517,  529,
      530,  526,  511,  516,  512,  518,  531,  219,  220,  220,
      220,  220,  522,  532,  522,  525,  523,  523,  523,  523,
      519,  221,  527,  533,  521,  528,  534,  535,  529,  530,
      526,  536,  538,  539,  540,  531,  541,  543,  544,  537,
      545,  546,  532,  542,  547,  548,  549,  550,  552,  553,

      221,  527,  533,  551,  554,  534,  535,  555,  556,  557,
      536,  538,  539,  540,  558,  541,  543,  544,  537,  545,
      546,  559,  542,  547,  548,  549,  550,  552,  553,  560,
      563,  564,  551,  554,  561,  562,  555,  556,  557,  565,
      567,  566,  568,  558,  570,  571,  569,  572,  573,  574,
      559,  575,  576,  577,  578,  579,  581,  580,  560,  563,
      564,  582,  585,  561,  562,  586,  587,  588,  565,  567,
      566,  568,  589,  570,  571,  569,  572,  573,  574,  583,
      575,  576,  577,  578,  579,  581,  580,  584,  590,  593,
      582,  585,  594,  597,  586,  587,  588,  591,  595,  592,

      598,  589,  607, 1551,  596, 1551, 1551, 1551,  583, 1551,
      289,  289,  289,  289, 1551, 1551,  584,  590,  593, 1551,
      610,  594,  597,  290,  611, 1551,  591,  595,  592,  598,
      599,  607,  599,  596,  600,  600,  600,  600,  601,  601,
      601,  601,  602,  602,  602,  602,  612,  613,  608,  610,
      614,  615,  290,  611,  291,  603,  292,  604,  604,  604,
      604,  605,  616,  605,  617,  606,  606,  606,  606,  609,
      294,  620,  621,  618,  622,  612,  613,  608,  623,  614,
      615,  619,  625,  626,  603,  624,  627,  628,  629,  630,
      631,  616,  634,  617,  635,  636,  637, 1551,  609,  294,

      620,  621,  618,  622,  638,  639,  640,  623,  641,  645,
      619,  625,  626,  646,  624,  627,  628,  629,  630,  631,
      632,  634,  642,  635,  636,  637,  633,  643,  644,  647,
      649,  648,  650,  638,  639,  640,  651,  641,  645,  652,
      653,  654,  646,  655,  656,  657,  658,  659,  660,  632,
      661,  642,  662,  663,  664,  633,  643,  644,  647,  649,
      648,  650,  667,  665,  668,  651,  669,  670,  652,  653,
      654,  666,  655,  656,  657,  658,  659,  660,  671,  661,
      672,  662,  663,  664,  673,  675,  674,  676,  677,  679,
      680,  667,  665,  668,  678,  669,  670,  681, 1551,  681,

      666,  682,  682,  682,  682, 1551, 1551,  671, 1551,  672,
      694, 1551, 1551,  673,  675,  674,  676,  677,  679,  680,
     1551,  697, 1551,  678,  360,  360,  360,  360,  683,  683,
      683,  683,  685,  685,  685,  685, 1551,  361,  698,  694,
      362,  684,  363,  686,  686,  686,  686,  687,  690,  687,
      697,  688,  688,  688,  688,  699,  365,  689,  689,  689,
      689,  695,  691,  691,  691,  691,  361,  698,  693,  443,
      684,  443,  700,  701,  702,  703,  443,  704,  705,  707,
      708,  709,  696,  712,  699,  365,  706,  443,  710, 1551,
      695,  443,  713,  714,  715,  711,  716,  717,  718,  719,

      721,  700,  701,  702,  703,  720,  704,  705,  707,  708,
      709,  696,  712,  722,  723,  706,  724,  710,  443,  725,
      726,  713,  714,  715,  711,  716,  717,  718,  719,  721,
      727,  728,  729,  732,  720,  733,  736,  730,  731,  734,
      737,  735,  722,  723,  738,  724,  739,  740,  725,  726,
      741,  742,  743,  744,  745,  746,  747,  750,  751,  727,
      728,  729,  732,  752,  733,  736,  730,  731,  734,  737,
      735,  753,  748,  738,  749,  739,  740,  754,  755,  741,
      742,  743,  744,  745,  746,  747,  750,  751,  756,  757,
      758,  759,  752,  760,  762,  761,  763,  766,  764,  767,

      753,  748,  768,  749,  765,  769,  754,  755,  770,  771,
      772,  775,  776,  777,  773,  778,  779,  756,  757,  758,
      759,  780,  760,  762,  761,  763,  766,  764,  767,  774,
      781,  768,  782,  765,  769,  783,  784,  770,  771,  772,
      775,  776,  777,  773,  778,  779,  785,  786,  787,  788,
      780,  789,  790,  791,  792,  793,  794,  795,  774,  781,
      796,  782,  797,  798,  783,  784,  802,  803, 1551,  804,
      805,  806,  807,  808,  809,  785,  786,  787,  788,  810,
      789,  790,  791,  792,  793,  794,  795,  799,  811,  796,
      812,  797,  798,  813,  814,  802,  803,  800,  804,  805,

      806,  807,  808,  809,  815,  816,  817,  801,  810,  818,
      819,  820,  821,  822,  823,  824,  825,  811,  826,  812,
      827,  828,  813,  814,  829,  830,  800,  831,  832,  834,
      839, 1551,  833,  815,  816,  817,  801, 1551,  818,  819,
      820,  821,  822,  823,  824,  825,  840,  826, 1551,  827,
      828,  841, 1551,  829,  830, 1551,  831,  832,  834,  839,
      835,  833,  835,  842,  836,  836,  836,  836,  520,  520,
      520,  520,  837,  843,  837,  840,  838,  838,  838,  838,
      841,  521,  523,  523,  523,  523,  523,  523,  523,  523,
      844,  846,  842,  847,  848,  849,  850,  851,  852,  853,

      854,  855,  843,  856,  857,  845,  858,  859,  860,  861,
      521,  862,  863,  864,  865,  866,  867,  868,  869,  844,
      846,  873,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  874,  856,  857,  845,  858,  859,  860,  861,  870,
      862,  863,  864,  865,  866,  867,  868,  869,  875,  871,
      873,  876,  877,  878,  879,  880,  881,  882,  883,  872,
      874,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  898,  897,  899,  875,  871,  900,
      876,  877,  878,  879,  880,  881,  882,  883,  872,  901,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,

      894,  895,  896,  898,  897,  899,  902,  903,  900,  905,
      912,  904,  906,  906,  906,  906,  913, 1551,  901,  600,
      600,  600,  600,  907,  907,  907,  907, 1551,  602,  602,
      602,  602, 1551, 1551, 1551,  902,  903, 1551,  905,  912,
      904,  603,  908,  914,  908,  913,  909,  909,  909,  909,
      291,  915,  292,  910,  910,  910,  910,  911,  911,  911,
      911,  606,  606,  606,  606,  916,  294,  917,  919,  920,
      603,  921,  914,  922,  923,  924,  925,  926,  927,  928,
      915,  929,  918,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  916,  294,  917,  919,  920,  941,

      921,  942,  922,  923,  924,  925,  926,  927,  928,  946,
      929,  918,  930,  931,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  943,  947,  948,  949,  950,  941,  951,
      942,  952,  953,  944,  954,  955,  956,  957,  946,  958,
      959,  960,  961,  945,  962,  963,  964,  965,  966,  967,
      968,  971,  972,  947,  948,  949,  950,  969,  951,  970,
      952,  953,  944,  954,  955,  956,  957,  973,  958,  959,
      960,  961,  945,  962,  963,  964,  965,  966,  967,  968,
      971,  972,  974,  975,  978,  976,  969,  987,  970,  977,
      979,  979,  979,  979, 1551, 1551,  973,  682,  682,  682,

      682, 1551,  683,  683,  683,  683,  982,  982,  982,  982,
     1551,  974,  975,  978,  976,  684,  987,  980,  977,  980,
     1551,  981,  981,  981,  981,  362, 1551,  363,  983,  983,
      983,  983,  984,  984,  984,  984,  688,  688,  688,  688,
      690,  365,  988,  989,  684,  985,  985,  985,  985,  690,
      693,  443,  990,  443,  689,  689,  689,  689,  443,  991,
      992,  994,  995,  986,  986,  986,  986,  996,  997,  443,
      365,  988,  989,  443,  998,  993,  999, 1000, 1001, 1002,
     1003,  990, 1004, 1005, 1006, 1007, 1008, 1009,  991,  992,
      994,  995, 1010, 1011, 1012, 1013,  996,  997, 1014, 1015,

      443, 1016, 1017,  998,  993,  999, 1000, 1001, 1002, 1003,
     1551, 1004, 1005, 1006, 1007, 1008, 1009, 1021, 1022, 1018,
     1023, 1010, 1011, 1012, 1013, 1024, 1025, 1014, 1015, 1019,
     1016, 1017, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1020,
     1033, 1034, 1035, 1036, 1037, 1038, 1021, 1022, 1039, 1023,
     1040, 1041, 1042, 1043, 1024, 1025, 1046, 1044, 1019, 1045,
     1047, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1020, 1033,
     1034, 1035, 1036, 1037, 1038, 1048, 1049, 1039, 1050, 1040,
     1041, 1042, 1043, 1051, 1053, 1046, 1044, 1052, 1045, 1047,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,

     1064, 1065, 1066, 1067, 1048, 1049, 1068, 1050, 1069, 1070,
     1071, 1072, 1051, 1053, 1073, 1074, 1052, 1075, 1076, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1080, 1078, 1068, 1081, 1069, 1070, 1071,
     1072, 1082, 1083, 1073, 1074, 1079, 1075, 1076, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1080, 1078, 1098, 1081, 1099, 1100, 1551, 1551,
     1082, 1083, 1551, 1551, 1079, 1551, 1551, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1101, 1102, 1098, 1103, 1099, 1100,  836,  836,  836,

      836,  836,  836,  836,  836,  838,  838,  838,  838,  838,
      838,  838,  838, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1101, 1102, 1111, 1103, 1112, 1113, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1127, 1128, 1125, 1129,
     1130, 1131, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1126,
     1132, 1111, 1133, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1127, 1128, 1125, 1129, 1130,
     1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1126, 1132,
     1141, 1133, 1142, 1143, 1144, 1145, 1146, 1147,  906,  906,
      906,  906, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149,

     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1150, 1151, 1141,
     1152, 1142, 1143, 1144, 1145, 1146, 1147,  909,  909,  909,
      909,  292,  910,  910,  910,  910,  911,  911,  911,  911,
     1153, 1154, 1155, 1156, 1157,  294, 1150, 1151, 1158, 1152,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1174, 1176, 1177, 1178, 1179, 1153,
     1154, 1155, 1156, 1157,  294, 1175, 1180, 1158, 1181, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1174, 1176, 1177, 1178, 1179, 1182, 1183,
     1184, 1185, 1186, 1187, 1175, 1180, 1188, 1181, 1189, 1190,

     1191, 1192, 1193, 1194, 1195, 1196,  979,  979,  979,  979,
     1197, 1197, 1197, 1197, 1551, 1201, 1202, 1182, 1183, 1184,
     1185, 1186, 1187, 1551, 1551, 1188, 1551, 1189, 1190, 1191,
     1192, 1193, 1194, 1195, 1196,  981,  981,  981,  981, 1198,
     1198, 1198, 1198,  362, 1201, 1202,  983,  983,  983,  983,
      984,  984,  984,  984, 1200, 1200, 1200, 1200,  690,  365,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214,  689,  689,  689,  689, 1215, 1216, 1217, 1218,
     1219, 1220, 1221, 1222, 1223, 1551, 1227, 1228,  365, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,

     1214, 1229, 1230, 1225, 1231, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1226, 1227, 1228, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
     1229, 1230, 1225, 1231, 1245, 1246, 1247, 1248, 1249, 1250,
     1251, 1252, 1253, 1226, 1254, 1255, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1256,
     1257, 1258, 1259, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1260, 1254, 1255, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1256, 1257,
     1258, 1259, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,

     1282, 1260, 1283, 1284, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1272, 1273, 1285, 1286, 1287,
     1288, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1289, 1283, 1284, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1297, 1298, 1299, 1300, 1301, 1302, 1285, 1286, 1287, 1288,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1289,
     1313, 1314, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1149, 1149, 1149, 1149, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1315, 1313,
     1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,

     1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1315, 1551, 1551,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1197, 1197, 1197, 1197,
     1343, 1343, 1343, 1343, 1344, 1344, 1344, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1345, 1346, 1347,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,

     1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1406, 1406,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
     1416, 1417, 1418, 1419, 1420, 1421, 1422, 1422, 1422, 1422,

     1424, 1425, 1426, 1403, 1404, 1405, 1343, 1343, 1343, 1343,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1423, 1423, 1423, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1449, 1450, 1451, 1452, 1453, 1454, 1551, 1551,
     1551, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
     1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1445, 1446,
     1447, 1449, 1450, 1451, 1452, 1453, 1454, 1406, 1406, 1406,
     1406, 1455, 1457, 1458, 1459, 1460, 1461, 1462, 1422, 1422,

     1422, 1422, 1343, 1343, 1343, 1343, 1463, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1473, 1474, 1475, 1476, 1477, 1479,
     1455, 1457, 1458, 1459, 1460, 1461, 1462, 1480, 1481, 1472,
     1482, 1485, 1486, 1483, 1478, 1463, 1465, 1466, 1467, 1468,
     1469, 1470, 1471, 1473, 1474, 1475, 1476, 1477, 1479, 1484,
     1487, 1488, 1489, 1491, 1492, 1493, 1480, 1481, 1472, 1482,
     1485, 1486, 1483, 1478, 1494, 1495, 1496, 1497, 1490, 1498,
     1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1484, 1487,
     1488, 1489, 1491, 1492, 1493, 1507, 1508, 1509, 1510, 1511,
     1512, 1513, 1514, 1494, 1495, 1496, 1497, 1490, 1498, 1499,

     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1515, 1516, 1517, 1518,
     1519, 1520, 1521, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1535, 1544, 1545, 1546, 1547, 1548,
     1549, 1550, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1544, 1545, 1546, 1547, 1548, 1549,

     1550,  223, 1551,  223,  223,  288, 1551,  288, 1551,  288,
      295,  295,  295,  295,  295,  295,  366, 1551,  366,  366,
      366,  366,  366,  366,  366,  368, 1551, 1551,  368,  368,
      368, 1551,  368,  368,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  692,  692,  692,  692,  692,  692,  692,
      692,  692, 1199, 1551, 1199, 1199, 1199, 1199, 1199, 1199,
     1199,   13, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551
    } ;

static const flex_int16_t yy_chk[3646] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1558,    7,    7,    7,    7,    7,    8, 1427,    8,    8,
        8,    8,    8,    9, 1410,    9,    9,    9,    9,    9,
       10, 1394,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1379,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1018,   28,   27,   29,   28,
      115,  943,   28,   40,  107,  870,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,   38,   36,   34,
       30,   31,   36,   30,   31,   30,   37,   31,   36,  799,
       31,   38,  443,   30,   37,  119,  119,   38,   34,   31,
      146,  142,   30,   34,   30,  109,   38,   36,   34,   30,
       31,   36,   30,   31,   30,   37,   31,   36,   41,   31,
       38,   39,   41,   37,   42,   44,   38,   44,   41,   39,
       44,   43,   43,   39,   42,   45,   39,   46,   46,   42,
       42,   43,   50,   50,   50,   50,  144,   41,  144,   47,

       39,   41,   17,   42,   44,   59,   44,   41,   39,   44,
       43,   43,   39,   42,   45,   39,   46,   46,   42,   42,
       43,   51,   51,   51,   51,   51,   52,   52,   52,   52,
       52,   53,   55,   53,   59,   51,   13,   60,   53,   54,
       52,   53,   62,   54,   68,   73,   55,   54,   65,   55,
       54,   56,   55,   54,   51,   56,   65,    0,   87,   56,
       53,   55,   53,   54,   51,   56,   60,   53,   54,   52,
       53,   62,   54,   68,   73,   55,   54,   65,   55,   54,
       56,   55,   54,   51,   56,   65,   57,   87,   56,   58,
        0,   61,   54,   88,   56,   57,   61,   57,    0,   66,

       58,   61,   57,   58,   64,   57,   58,   57,   64,   58,
        0,   74,   74,   66,   64,   57,    0,   69,   58,   66,
       61,   69,   88,    0,   57,   61,   57,   69,   66,   58,
       61,   57,   58,   64,   57,   58,   57,   64,   58,   67,
       74,   74,   66,   64,   90,   70,   69,   67,   66,   93,
       69,   67,   71,   71,   67,   70,   69,   93,   96,  101,
       70,   70,   71,  126,   72,  127,   72,    0,   67,   72,
      117,  117,  117,   90,   70,  129,   67,  369,   93,  369,
       67,   71,   71,   67,   70,  134,   93,   96,  101,   70,
       70,   71,  126,   72,  127,   72,  102,  102,   72,   79,

       79,   79,   79,   80,  129,   80,   80,   80,   80,   80,
      139,   81,   79,   81,  134,    0,   83,   89,   81,   80,
       82,   81,   89,  153,   82,  102,  102,   89,   82,    0,
       83,   82,    0,   83,   82, 1148,   83, 1148,    0,  139,
       81,   79,   81,    0,   82,   83,   89,   81,   80,   82,
       81,   89,  153,   82,  140,  140,   89,   82,   85,   83,
       82,   94,   83,   82,   84,   83,   92,   85,   84,   85,
       92,   86,   84,   82,   85,   94,   92,   85,   84,   85,
      155,   94,   86,  140,  140,   86,  156,   85,   86,    0,
       94,   86, 1198,   84, 1198,   92,   85,   84,   85,   92,

       86,   84,    0,   85,   94,   92,   85,   84,   85,  155,
       94,   86,   97,   95,   86,  156,   97,   86,  154,   98,
       86,   95,   97,   99,   99,   95,  128,  157,   95,   98,
      158,  128,  159,   99,   98,   98,  128,  160,  100,  154,
      100,   97,   95,  100,    0,   97,    0,  154,   98,  161,
       95,   97,   99,   99,   95,  128,  157,   95,   98,  158,
      128,  159,   99,   98,   98,  128,  160,  100,  154,  100,
        0,    0,  100,  103,  103,  103,  103,  104,  161,  104,
      104,  104,  104,  104,    0,    0,  103,  105,  105,  105,
      105,    0,  120,  104,  120,  131,  121,  122,  163,  120,

      121,  165,  120,  131,  121,  123,  166,  121,  164,  123,
      121,  122,    0,  123,  122,  103,  164,  122,  167,  123,
      121,  120,  104,  120,  131,  121,  122,  163,  120,  121,
      165,  120,  131,  121,  123,  166,  121,  164,  123,  121,
      122,  124,  123,  122,  125,  164,  122,  167,  123,  121,
      124,  132,  124,    0,  169,  125,  170,  124,  125,  130,
      124,  125,  124,  130,  125,  132,    0,  137,  137,  130,
      124,  132,  135,  125,    0,  171,  135,  137,    0,  124,
      132,  124,  135,  169,  125,  170,  124,  125,  130,  124,
      125,  124,  130,  125,  132,  133,  137,  137,  130,  136,

      132,  135,  172,  133,  171,  135,  137,  133,  173,  136,
      133,  135,  168,  174,  136,  136,  138,  175,  138,  168,
      176,  138,  177,  178,  133,  179,  176,  180,  136,  181,
      182,  172,  133,  183,  184,  187,  133,  173,  136,  133,
      188,  168,  174,  136,  136,  138,  175,  138,  168,  176,
      138,  177,  178,  190,  179,  176,  180,  191,  181,  182,
      185,  191,  183,  184,  187,  185,  185,  192,  189,  188,
      189,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  201,  190,  203,  204,  205,  191,  206,  207,  185,
      191,  208,  204,  209,  185,  185,  192,  189,  210,  189,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      201,  212,  203,  204,  205,  213,  206,  207,  214,  215,
      208,  204,  209,  211,  214,  211,  216,  210,  218,  218,
      218,  218,  219,  219,  219,  219,  224,    0,    0,    0,
      212,  218,    0,    0,  213,  219,  226,  214,  215,  227,
      228,  225,  211,  214,  211,  216,  229,  220,  220,  220,
      220,  220,  221,  230,  221,  224,  221,  221,  221,  221,
      218,  220,  225,  231,  219,  226,  232,  234,  227,  228,
      225,  235,  236,  237,  238,  229,  239,  240,  241,  235,
      242,  243,  230,  239,  244,  245,  246,  247,  248,  249,

      220,  225,  231,  247,  250,  232,  234,  251,  252,  253,
      235,  236,  237,  238,  254,  239,  240,  241,  235,  242,
      243,  255,  239,  244,  245,  246,  247,  248,  249,  256,
      258,  259,  247,  250,  256,  256,  251,  252,  253,  260,
      261,  260,  262,  254,  263,  264,  262,  265,  266,  267,
      255,  268,  269,  270,  271,  272,  273,  272,  256,  258,
      259,  274,  276,  256,  256,  277,  278,  279,  260,  261,
      260,  262,  280,  263,  264,  262,  265,  266,  267,  275,
      268,  269,  270,  271,  272,  273,  272,  275,  281,  283,
      274,  276,  284,  286,  277,  278,  279,  282,  285,  282,

      287,  280,  296,    0,  285,    0,    0,    0,  275,    0,
      289,  289,  289,  289,    0,    0,  275,  281,  283,    0,
      298,  284,  286,  289,  299,    0,  282,  285,  282,  287,
      290,  296,  290,  285,  290,  290,  290,  290,  291,  291,
      291,  291,  292,  292,  292,  292,  300,  301,  297,  298,
      302,  303,  289,  299,  293,  292,  293,  293,  293,  293,
      293,  294,  304,  294,  306,  294,  294,  294,  294,  297,
      293,  308,  309,  307,  310,  300,  301,  297,  311,  302,
      303,  307,  312,  313,  292,  311,  314,  315,  316,  317,
      318,  304,  320,  306,  321,  322,  323,    0,  297,  293,

      308,  309,  307,  310,  324,  325,  326,  311,  327,  330,
      307,  312,  313,  331,  311,  314,  315,  316,  317,  318,
      319,  320,  328,  321,  322,  323,  319,  328,  328,  332,
      333,  332,  334,  324,  325,  326,  334,  327,  330,  335,
      336,  337,  331,  338,  339,  340,  341,  342,  343,  319,
      344,  328,  344,  345,  346,  319,  328,  328,  332,  333,
      332,  334,  348,  347,  349,  334,  350,  351,  335,  336,
      337,  347,  338,  339,  340,  341,  342,  343,  352,  344,
      353,  344,  345,  346,  354,  355,  354,  356,  357,  358,
      359,  348,  347,  349,  357,  350,  351,  361,    0,  361,

      347,  361,  361,  361,  361,    0,    0,  352,    0,  353,
      378,    0,    0,  354,  355,  354,  356,  357,  358,  359,
        0,  380,    0,  357,  360,  360,  360,  360,  362,  362,
      362,  362,  363,  363,  363,  363,    0,  360,  381,  378,
      364,  362,  364,  364,  364,  364,  364,  365,  367,  365,
      380,  365,  365,  365,  365,  382,  364,  366,  366,  366,
      366,  379,  367,  367,  367,  367,  360,  381,  371,  371,
      362,  371,  383,  384,  385,  386,  371,  388,  389,  390,
      391,  392,  379,  394,  382,  364,  389,  371,  393,    0,
      379,  371,  395,  396,  397,  393,  398,  399,  400,  401,

      402,  383,  384,  385,  386,  401,  388,  389,  390,  391,
      392,  379,  394,  403,  404,  389,  405,  393,  371,  406,
      407,  395,  396,  397,  393,  398,  399,  400,  401,  402,
      408,  409,  410,  412,  401,  413,  415,  410,  410,  414,
      416,  414,  403,  404,  416,  405,  417,  418,  406,  407,
      419,  420,  421,  422,  423,  424,  425,  427,  428,  408,
      409,  410,  412,  429,  413,  415,  410,  410,  414,  416,
      414,  429,  426,  416,  426,  417,  418,  430,  431,  419,
      420,  421,  422,  423,  424,  425,  427,  428,  432,  433,
      434,  435,  429,  436,  437,  436,  438,  440,  439,  441,

      429,  426,  450,  426,  439,  451,  430,  431,  452,  453,
      454,  456,  457,  458,  455,  459,  460,  432,  433,  434,
      435,  461,  436,  437,  436,  438,  440,  439,  441,  455,
      462,  450,  463,  439,  451,  464,  465,  452,  453,  454,
      456,  457,  458,  455,  459,  460,  466,  468,  469,  470,
      461,  471,  472,  473,  474,  475,  476,  477,  455,  462,
      478,  463,  480,  481,  464,  465,  483,  484,    0,  485,
      486,  487,  488,  491,  493,  466,  468,  469,  470,  494,
      471,  472,  473,  474,  475,  476,  477,  482,  495,  478,
      496,  480,  481,  497,  498,  483,  484,  482,  485,  486,

      487,  488,  491,  493,  499,  500,  501,  482,  494,  502,
      503,  505,  506,  508,  509,  510,  511,  495,  511,  496,
      512,  513,  497,  498,  514,  515,  482,  516,  517,  518,
      530,    0,  517,  499,  500,  501,  482,    0,  502,  503,
      505,  506,  508,  509,  510,  511,  531,  511,    0,  512,
      513,  532,    0,  514,  515,    0,  516,  517,  518,  530,
      519,  517,  519,  533,  519,  519,  519,  519,  520,  520,
      520,  520,  521,  534,  521,  531,  521,  521,  521,  521,
      532,  520,  522,  522,  522,  522,  523,  523,  523,  523,
      535,  536,  533,  537,  538,  539,  540,  541,  542,  543,

      544,  545,  534,  546,  548,  535,  549,  550,  551,  552,
      520,  553,  554,  555,  556,  557,  558,  560,  561,  535,
      536,  563,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  564,  546,  548,  535,  549,  550,  551,  552,  562,
      553,  554,  555,  556,  557,  558,  560,  561,  565,  562,
      563,  566,  567,  568,  571,  573,  574,  575,  576,  562,
      564,  577,  578,  579,  580,  581,  582,  583,  585,  586,
      588,  589,  590,  591,  592,  591,  593,  565,  562,  594,
      566,  567,  568,  571,  573,  574,  575,  576,  562,  595,
      577,  578,  579,  580,  581,  582,  583,  585,  586,  588,

      589,  590,  591,  592,  591,  593,  596,  597,  594,  598,
      612,  597,  599,  599,  599,  599,  613,    0,  595,  600,
      600,  600,  600,  601,  601,  601,  601,    0,  602,  602,
      602,  602,    0,    0,    0,  596,  597,    0,  598,  612,
      597,  602,  603,  614,  603,  613,  603,  603,  603,  603,
      604,  615,  604,  604,  604,  604,  604,  605,  605,  605,
      605,  606,  606,  606,  606,  616,  604,  617,  618,  619,
      602,  620,  614,  621,  622,  623,  624,  625,  626,  627,
      615,  628,  617,  630,  631,  632,  633,  634,  635,  636,
      637,  638,  639,  640,  616,  604,  617,  618,  619,  642,

      620,  643,  621,  622,  623,  624,  625,  626,  627,  645,
      628,  617,  630,  631,  632,  633,  634,  635,  636,  637,
      638,  639,  640,  644,  646,  647,  648,  649,  642,  650,
      643,  653,  655,  644,  656,  657,  658,  659,  645,  660,
      661,  662,  663,  644,  664,  665,  667,  668,  670,  671,
      672,  674,  675,  646,  647,  648,  649,  673,  650,  673,
      653,  655,  644,  656,  657,  658,  659,  676,  660,  661,
      662,  663,  644,  664,  665,  667,  668,  670,  671,  672,
      674,  675,  677,  678,  680,  679,  673,  699,  673,  679,
      681,  681,  681,  681,    0,    0,  676,  682,  682,  682,

      682,    0,  683,  683,  683,  683,  685,  685,  685,  685,
        0,  677,  678,  680,  679,  683,  699,  684,  679,  684,
        0,  684,  684,  684,  684,  686,    0,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  688,  688,  688,  688,
      689,  686,  700,  701,  683,  690,  690,  690,  690,  691,
      692,  692,  702,  692,  689,  689,  689,  689,  692,  703,
      704,  705,  706,  691,  691,  691,  691,  707,  708,  692,
      686,  700,  701,  692,  709,  704,  710,  711,  712,  713,
      714,  702,  715,  717,  718,  719,  720,  721,  703,  704,
      705,  706,  722,  723,  724,  725,  707,  708,  726,  727,

      692,  729,  730,  709,  704,  710,  711,  712,  713,  714,
        0,  715,  717,  718,  719,  720,  721,  732,  733,  731,
      734,  722,  723,  724,  725,  735,  736,  726,  727,  731,
      729,  730,  737,  740,  742,  743,  744,  745,  746,  731,
      747,  748,  749,  750,  751,  752,  732,  733,  754,  734,
      755,  757,  758,  759,  735,  736,  761,  760,  731,  760,
      762,  737,  740,  742,  743,  744,  745,  746,  731,  747,
      748,  749,  750,  751,  752,  763,  764,  754,  765,  755,
      757,  758,  759,  766,  767,  761,  760,  766,  760,  762,
      768,  769,  770,  772,  775,  776,  777,  778,  780,  782,

      783,  784,  786,  787,  763,  764,  788,  765,  789,  790,
      791,  792,  766,  767,  795,  796,  766,  797,  798,  768,
      769,  770,  772,  775,  776,  777,  778,  780,  782,  783,
      784,  786,  787,  805,  800,  788,  807,  789,  790,  791,
      792,  808,  810,  795,  796,  800,  797,  798,  812,  813,
      814,  816,  817,  818,  819,  821,  823,  825,  826,  827,
      828,  829,  805,  800,  830,  807,  831,  833,    0,    0,
      808,  810,    0,    0,  800,    0,    0,  812,  813,  814,
      816,  817,  818,  819,  821,  823,  825,  826,  827,  828,
      829,  839,  840,  830,  841,  831,  833,  835,  835,  835,

      835,  836,  836,  836,  836,  837,  837,  837,  837,  838,
      838,  838,  838,  843,  846,  847,  848,  849,  851,  853,
      839,  840,  854,  841,  855,  857,  858,  859,  860,  861,
      862,  863,  866,  867,  868,  869,  876,  878,  871,  879,
      881,  883,  843,  846,  847,  848,  849,  851,  853,  871,
      884,  854,  885,  855,  857,  858,  859,  860,  861,  862,
      863,  866,  867,  868,  869,  876,  878,  871,  879,  881,
      883,  887,  888,  889,  890,  892,  894,  896,  871,  884,
      897,  885,  898,  899,  900,  901,  902,  904,  906,  906,
      906,  906,  907,  907,  907,  907,  908,  908,  908,  908,

      887,  888,  889,  890,  892,  894,  896,  912,  913,  897,
      914,  898,  899,  900,  901,  902,  904,  909,  909,  909,
      909,  910,  910,  910,  910,  910,  911,  911,  911,  911,
      916,  919,  920,  921,  922,  910,  912,  913,  924,  914,
      926,  927,  928,  930,  931,  932,  933,  934,  935,  936,
      939,  940,  941,  942,  944,  949,  951,  952,  954,  916,
      919,  920,  921,  922,  910,  944,  956,  924,  957,  926,
      927,  928,  930,  931,  932,  933,  934,  935,  936,  939,
      940,  941,  942,  944,  949,  951,  952,  954,  958,  960,
      961,  962,  963,  965,  944,  956,  967,  957,  969,  970,

      971,  972,  973,  974,  975,  977,  979,  979,  979,  979,
      980,  980,  980,  980,    0,  987,  988,  958,  960,  961,
      962,  963,  965,    0,    0,  967,    0,  969,  970,  971,
      972,  973,  974,  975,  977,  981,  981,  981,  981,  982,
      982,  982,  982,  983,  987,  988,  983,  983,  983,  983,
      984,  984,  984,  984,  985,  985,  985,  985,  986,  983,
      989,  991,  994,  995,  996,  997,  999, 1001, 1002, 1003,
     1005, 1006,  986,  986,  986,  986, 1007, 1008, 1009, 1010,
     1011, 1014, 1015, 1016, 1017,    0, 1024, 1026,  983,  989,
      991,  994,  995,  996,  997,  999, 1001, 1002, 1003, 1005,

     1006, 1027, 1029, 1019, 1031, 1007, 1008, 1009, 1010, 1011,
     1014, 1015, 1016, 1017, 1019, 1024, 1026, 1032, 1033, 1035,
     1036, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048,
     1027, 1029, 1019, 1031, 1049, 1050, 1052, 1054, 1055, 1056,
     1057, 1058, 1061, 1019, 1062, 1063, 1032, 1033, 1035, 1036,
     1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1064,
     1065, 1066, 1068, 1049, 1050, 1052, 1054, 1055, 1056, 1057,
     1058, 1061, 1069, 1062, 1063, 1072, 1074, 1076, 1078, 1079,
     1082, 1083, 1086, 1087, 1089, 1090, 1091, 1092, 1064, 1065,
     1066, 1068, 1094, 1095, 1096, 1098, 1099, 1101, 1102, 1103,

     1104, 1069, 1105, 1108, 1072, 1074, 1076, 1078, 1079, 1082,
     1083, 1086, 1087, 1089, 1090, 1091, 1092, 1109, 1110, 1111,
     1112, 1094, 1095, 1096, 1098, 1099, 1101, 1102, 1103, 1104,
     1113, 1105, 1108, 1115, 1116, 1119, 1121, 1123, 1125, 1126,
     1129, 1130, 1133, 1134, 1136, 1137, 1109, 1110, 1111, 1112,
     1138, 1139, 1141, 1142, 1143, 1145, 1146, 1150, 1151, 1113,
     1152, 1153, 1115, 1116, 1119, 1121, 1123, 1125, 1126, 1129,
     1130, 1133, 1134, 1136, 1137, 1149, 1149, 1149, 1149, 1138,
     1139, 1141, 1142, 1143, 1145, 1146, 1150, 1151, 1154, 1152,
     1153, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1168,

     1170, 1172, 1174, 1175, 1178, 1179, 1182, 1183, 1185, 1186,
     1187, 1188, 1190, 1191, 1192, 1194, 1195, 1154,    0,    0,
     1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1168, 1170,
     1172, 1174, 1175, 1178, 1179, 1182, 1183, 1185, 1186, 1187,
     1188, 1190, 1191, 1192, 1194, 1195, 1197, 1197, 1197, 1197,
     1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200, 1201, 1202,
     1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1215,
     1216, 1219, 1221, 1223, 1225, 1226, 1229, 1230, 1233, 1234,
     1236, 1237, 1238, 1239, 1241, 1242, 1243, 1201, 1202, 1203,
     1204, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216,

     1219, 1221, 1223, 1225, 1226, 1229, 1230, 1233, 1234, 1236,
     1237, 1238, 1239, 1241, 1242, 1243, 1245, 1246, 1248, 1249,
     1251, 1253, 1255, 1257, 1261, 1264, 1265, 1266, 1269, 1270,
     1273, 1275, 1278, 1279, 1280, 1282, 1284, 1286, 1288, 1292,
     1295, 1296, 1297, 1300, 1301, 1245, 1246, 1248, 1249, 1251,
     1253, 1255, 1257, 1261, 1264, 1265, 1266, 1269, 1270, 1273,
     1275, 1278, 1279, 1280, 1282, 1284, 1286, 1288, 1292, 1295,
     1296, 1297, 1300, 1301, 1304, 1306, 1309, 1310, 1310, 1310,
     1310, 1311, 1312, 1314, 1316, 1318, 1320, 1324, 1327, 1328,
     1329, 1332, 1333, 1336, 1338, 1341, 1342, 1342, 1342, 1342,

     1345, 1346, 1348, 1304, 1306, 1309, 1343, 1343, 1343, 1343,
     1311, 1312, 1314, 1316, 1318, 1320, 1324, 1327, 1328, 1329,
     1332, 1333, 1336, 1338, 1341, 1344, 1344, 1344, 1344, 1345,
     1346, 1348, 1350, 1352, 1354, 1358, 1361, 1362, 1363, 1366,
     1367, 1370, 1372, 1375, 1376, 1380, 1381, 1384, 1386, 1387,
     1388, 1391, 1395, 1396, 1399, 1401, 1402, 1403,    0,    0,
        0, 1350, 1352, 1354, 1358, 1361, 1362, 1363, 1366, 1367,
     1370, 1372, 1375, 1376, 1380, 1381, 1384, 1386, 1387, 1388,
     1391, 1395, 1396, 1399, 1401, 1402, 1403, 1406, 1406, 1406,
     1406, 1407, 1411, 1412, 1415, 1417, 1418, 1419, 1422, 1422,

     1422, 1422, 1423, 1423, 1423, 1423, 1424, 1428, 1429, 1432,
     1434, 1435, 1436, 1440, 1442, 1443, 1444, 1446, 1448, 1450,
     1407, 1411, 1412, 1415, 1417, 1418, 1419, 1451, 1452, 1440,
     1454, 1458, 1459, 1456, 1448, 1424, 1428, 1429, 1432, 1434,
     1435, 1436, 1440, 1442, 1443, 1444, 1446, 1448, 1450, 1456,
     1460, 1462, 1464, 1466, 1467, 1468, 1451, 1452, 1440, 1454,
     1458, 1459, 1456, 1448, 1470, 1471, 1472, 1473, 1464, 1477,
     1478, 1479, 1483, 1484, 1485, 1489, 1490, 1491, 1456, 1460,
     1462, 1464, 1466, 1467, 1468, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1470, 1471, 1472, 1473, 1464, 1477, 1478,

     1479, 1483, 1484, 1485, 1489, 1490, 1491, 1503, 1504, 1505,
     1506, 1507, 1508, 1509, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1520, 1523, 1526, 1529, 1531, 1503, 1504, 1505, 1506,
     1507, 1508, 1509, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
     1539, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
     1520, 1523, 1526, 1529, 1531, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1540, 1541, 1542, 1543, 1544, 1545,

     1546, 1552,    0, 1552, 1552, 1553,    0, 1553,    0, 1553,
     1554, 1554, 1554, 1554, 1554, 1554, 1555,    0, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1556,    0,    0, 1556, 1556,
     1556,    0, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1560,    0, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1552 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1551 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 111:
case 112:
case 113:
case 114:
case 115:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 120:
case 121:
case 122:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 123:
case 124:
case 125:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 126:
case 127:
case 128:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 129:
case 130:
case 131:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 138:
/* rule 138 can match eol */
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 144:
YY_RULE_SETUP
{}
	YY_BREAK
case 145:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 146:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 147:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1552 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1552 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1551);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

