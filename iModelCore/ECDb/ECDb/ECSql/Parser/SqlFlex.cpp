#line 2 "D:\\bsw\\git-native-4\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 180
#define YY_END_OF_BUFFER 181
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2112] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      175,  175,  181,  179,  177,  176,  179,  125,  140,  137,
      168,  140,  126,  128,  127,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  136,  135,  166,  140,
      142,  142,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  169,  167,  170,  140,  140,  150,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  140,  150,  179,  175,  175,  175,  175,  173,
      125,  140,  137,  140,  140,  140,  126,  128,  127,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      174,  136,  135,  177,  132,    0,  134,  138,  129,  131,
      130,  139,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   54,   61,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,   81,

       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,  144,  145,  142,
        0,    0,  141,  141,  141,    4,  141,  141,  141,  141,
      141,  141,   12,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,   54,   61,  141,  141,
      141,  141,  141,  141,  141,  141,   74,  141,  141,  141,
       81,   83,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  165,  155,  165,
      165,  165,  150,  165,  149,  149,  149,    4,  149,  149,
      149,  149,  149,  149,   12,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,   54,   61,
      149,  149,  149,  149,  149,  149,  149,  149,   74,  149,
      149,  149,   81,   83,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  161,
      165,  165,  165,  150,  165,    0,  171,  175,  175,  132,

      175,  134,  138,  129,  131,  130,  139,  175,  175,    4,
      175,  175,  175,  175,  175,  175,   12,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
       54,   61,  175,  175,  175,  175,  175,  175,  175,  175,
       74,  175,  175,  175,   81,   83,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  133,    0,  178,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,   53,    0,    0,   57,    0,   63,    0,
        0,    0,    0,    0,    0,    0,   71,   72,    0,    0,
       76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97,    0,
        0,  102,    0,    0,  105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  145,    0,    0,  146,  143,    1,    2,    3,    5,
        6,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
       31,  141,  141,  141,  141,  141,  141,  141,  141,  141,
       45,  141,  141,  141,  141,   53,  141,  141,   57,  141,
       63,  141,  141,  141,  141,  141,  141,  141,   71,   72,
      141,  141,   76,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
       97,  141,  141,  102,  141,  141,  105,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,    0,  158,  165,  153,  165,  150,    0,  156,
        1,    2,    3,    5,    6,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,   31,  149,  149,  149,  149,  149,
      149,  149,  149,  149,   45,  149,  149,  149,  149,   53,
      149,  149,   57,  149,   63,  149,  149,  149,  149,  149,
      149,  149,   71,   72,  149,  149,   76,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,   97,  149,  149,  102,  149,  149,
      105,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,    0,  164,  159,  165,
      165,  150,    0,  162,  171,    0,  171,  175,  175,    1,

        2,    3,    5,    6,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   31,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   45,  175,  175,  175,  175,   53,  175,
      175,   57,  175,   63,  175,  175,  175,  175,  175,  175,
      175,   71,   72,  175,  175,   76,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   97,  175,  175,  102,  175,  175,  105,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,    0,    0,    0,   10,    0,

       13,   14,    0,    0,    0,    0,    0,   23,    0,    0,
       26,    0,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   47,   48,    0,    0,
        0,    0,    0,    0,   60,   62,   40,   65,   66,   67,
        0,   69,    0,    0,    0,    0,    0,   79,    0,   82,
        0,    0,    0,   87,    0,    0,    0,    0,    0,   93,
       94,    0,    0,   98,    0,    0,    0,  103,    0,  106,
      107,  108,    0,  111,    0,    0,    0,    0,    0,    0,
        0,    0,  121,    0,    0,  123,    0,  148,    0,  147,
      141,  141,  141,   10,  141,   13,   14,  141,  141,  141,

      141,  141,   23,  141,  141,   26,  141,  141,  141,   30,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,   47,   48,  141,  141,  141,  141,  141,  141,   60,
       62,   40,   65,   66,   67,  141,   69,  141,  141,  141,
      141,  141,   79,  141,   82,  141,  141,  141,   87,  141,
      141,  141,  141,  141,   93,   94,  141,  141,   98,  141,
      141,  141,  103,  141,  106,  107,  108,  141,  111,  141,
      141,  141,  141,  141,  141,  141,  141,  121,  141,  141,
      123,  158,  165,    0,  157,  150,  156,  149,  149,  149,
       10,  149,   13,   14,  149,  149,  149,  149,  149,   23,

      149,  149,   26,  149,  149,  149,   30,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,   47,   48,
      149,  149,  149,  149,  149,  149,   60,   62,   40,   65,
       66,   67,  149,   69,  149,  149,  149,  149,  149,   79,
      149,   82,  149,  149,  149,   87,  149,  149,  149,  149,
      149,   93,   94,  149,  149,   98,  149,  149,  149,  103,
      149,  106,  107,  108,  149,  111,  149,  149,  149,  149,
      149,  149,  149,  149,  121,  149,  149,  123,  164,    0,
      163,  165,  150,  162,    0,  171,  175,  175,  175,   10,
      175,   13,   14,  175,  175,  175,  175,  175,   23,  175,

      175,   26,  175,  175,  175,   30,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,   47,   48,  175,
      175,  175,  175,  175,  175,   60,   62,   40,   65,   66,
       67,  175,   69,  175,  175,  175,  175,  175,   79,  175,
       82,  175,  175,  175,   87,  175,  175,  175,  175,  175,
       93,   94,  175,  175,   98,  175,  175,  175,  103,  175,
      106,  107,  108,  175,  111,  175,  175,  175,  175,  175,
      175,  175,  175,  121,  175,  175,  123,    0,    0,    0,
        0,    0,   16,   17,    0,    0,    0,    0,    0,    0,
        0,    0,   33,    0,    0,    0,   37,    0,   39,   38,

        0,    0,   49,    0,   55,    0,   58,    0,    0,    0,
       68,   70,    0,    0,    0,   78,   41,    0,   84,    0,
       86,    0,    0,    0,    0,   92,    0,   96,    0,  100,
        0,    0,    0,  110,    0,  113,    0,    0,    0,  117,
      118,    0,  122,    0,  141,  141,  141,  141,  141,   16,
       17,  141,  141,  141,  141,  141,  141,  141,  141,   33,
      141,  141,  141,   37,  141,   39,   38,  141,  141,   49,
      141,   55,  141,   58,  141,  141,  141,   68,   70,  141,
      141,  141,   78,   41,  141,   84,  141,   86,  141,  141,
      141,  141,   92,  141,   96,  141,  100,  141,  141,  141,

      110,  141,  113,  141,  141,  141,  117,  118,  141,  122,
      141,  151,  157,  149,  149,  149,  149,  149,   16,   17,
      149,  149,  149,  149,  149,  149,  149,  149,   33,  149,
      149,  149,   37,  149,   39,   38,  149,  149,   49,  149,
       55,  149,   58,  149,  149,  149,   68,   70,  149,  149,
      149,   78,   41,  149,   84,  149,   86,  149,  149,  149,
      149,   92,  149,   96,  149,  100,  149,  149,  149,  110,
      149,  113,  149,  149,  149,  117,  118,  149,  122,  149,
      163,  152,    0,  172,  175,  175,  175,  175,  175,   16,
       17,  175,  175,  175,  175,  175,  175,  175,  175,   33,

      175,  175,  175,   37,  175,   39,   38,  175,  175,   49,
      175,   55,  175,   58,  175,  175,  175,   68,   70,  175,
      175,  175,   78,   41,  175,   84,  175,   86,  175,  175,
      175,  175,   92,  175,   96,  175,  100,  175,  175,  175,
      110,  175,  113,  175,  175,  175,  117,  118,  175,  122,
      175,    0,    0,    9,    0,    0,    0,    0,   24,    0,
        0,   28,    0,   32,   34,    0,   36,   42,    0,    0,
        0,   51,    0,   52,   56,    0,    0,    0,    0,   75,
        0,   80,   85,    0,    0,   90,    0,    0,    0,  101,
      104,    0,    0,  114,    0,  116,  119,    0,  124,  141,

      141,    9,  141,  141,  141,  141,   24,  141,  141,   28,
      141,   32,   34,  141,   36,   42,  141,  141,  141,   51,
      141,   52,   56,  141,  141,  141,  141,   75,  141,   80,
       85,  141,  141,   90,  141,  141,  141,  101,  104,  141,
      141,  114,  141,  116,  119,  141,  124,  165,  149,  149,
        9,  149,  149,  149,  149,   24,  149,  149,   28,  149,
       32,   34,  149,   36,   42,  149,  149,  149,   51,  149,
       52,   56,  149,  149,  149,  149,   75,  149,   80,   85,
      149,  149,   90,  149,  149,  149,  101,  104,  149,  149,
      114,  149,  116,  119,  149,  124,  165,  172,  172,  175,

      175,    9,  175,  175,  175,  175,   24,  175,  175,   28,
      175,   32,   34,  175,   36,   42,  175,  175,  175,   51,
      175,   52,   56,  175,  175,  175,  175,   75,  175,   80,
       85,  175,  175,   90,  175,  175,  175,  101,  104,  175,
      175,  114,  175,  116,  119,  175,  124,    0,    8,   11,
       15,    0,   19,    0,    0,    0,   35,    0,    0,   46,
        0,   57,    0,    0,   73,    0,    0,    0,    0,    0,
        0,    0,    0,  115,  120,  141,    8,   11,   15,  141,
       19,  141,  141,  141,   35,  141,  141,   46,  141,   57,
      141,  141,   73,  141,  141,  141,  141,  141,  141,  141,

      141,  115,  120,  154,  149,    8,   11,   15,  149,   19,
      149,  149,  149,   35,  149,  149,   46,  149,   57,  149,
      149,   73,  149,  149,  149,  149,  149,  149,  149,  149,
      115,  120,  160,  172,  175,    8,   11,   15,  175,   19,
      175,  175,  175,   35,  175,  175,   46,  175,   57,  175,
      175,   73,  175,  175,  175,  175,  175,  175,  175,  175,
      115,  120,    7,    0,    0,    0,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    7,  141,  141,  141,   27,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

        7,  149,  149,  149,   27,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,    7,
      175,  175,  175,   27,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,   18,    0,
        0,    0,    0,    0,   44,    0,   59,    0,   77,   88,
        0,   91,   95,    0,  109,  112,   18,  141,  141,  141,
      141,  141,   44,  141,   59,  141,   77,   88,  141,   91,
       95,  141,  109,  112,   18,  149,  149,  149,  149,  149,
       44,  149,   59,  149,   77,   88,  149,   91,   95,  149,
      109,  112,   18,  175,  175,  175,  175,  175,   44,  175,

       59,  175,   77,   88,  175,   91,   95,  175,  109,  112,
        0,    0,   25,    0,    0,    0,   64,    0,   99,  141,
      141,   25,  141,  141,  141,   64,  141,   99,  149,  149,
       25,  149,  149,  149,   64,  149,   99,  175,  175,   25,
      175,  175,  175,   64,  175,   99,    0,    0,    0,   43,
        0,    0,  141,  141,  141,   43,  141,  141,  149,  149,
      149,   43,  149,  149,  175,  175,  175,   43,  175,  175,
       20,   21,   29,   50,   89,   20,   21,   29,   50,   89,
       20,   21,   29,   50,   89,   20,   21,   29,   50,   89,
        0,  141,  149,  175,    0,  141,  149,  175,    0,  141,

      149,  175,    0,  141,  149,  175,   22,   22,   22,   22,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2121] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  809, 4660,  359, 4660,  779, 4660, 4660, 4660,
     4660,  346,  341, 4660,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  441,  437,  448,
      474,  494,  459,  486,  367,  455,  718, 4660, 4660,  527,
      554,  559,  543,  562,  555,  574,  607,  623,  389,  415,
      608,  432,    0,  667,  531,  613,  663,  670,  714,  687,
      717,  708,  451,  628, 4660, 4660, 4660,    0,  532,  776,
      760,  775,  774,  797,  814,  833,  451,  500,  611,  492,
        0,  838,  571,  829,  875,  715,  883,  870,  891,  777,

      509,  777,  947,  954,  701,    0,  393,    0,  768, 4660,
        0,    0,    0,    0,  375, 4660,  681,    0,  415,  939,
      959,  955, 1003,  995, 1014,  495,  567,  948,  567, 1015,
      831, 1050, 1054, 1049, 1072, 1093, 1110, 1072,  612,  878,
     4660,  705,    0,  444, 4660,  780, 4660, 4660, 4660, 4660,
     4660, 4660,  611,  705,  642,  682,  696,  758,  780,  822,
      879, 4660,  882,  942,  887,  959,  885, 1110,  888,  887,
      931,  946,  962, 1007, 1006, 1025, 1044, 1114, 1051, 1118,
     1063, 1070, 1094, 1090, 1117, 1120, 4660, 1122, 1126, 1143,
     1153, 1132, 1147, 1136, 1136, 1167, 1168, 1160, 1174, 1169,

     1178, 1175, 1164, 1181, 1170, 1171, 1189, 1177, 1201, 1185,
     1174, 1180, 1202, 1190, 1189, 1195, 1219, 1225, 1205, 1207,
     1233, 1225, 1225, 1227, 1235, 1227, 4660, 1285, 1289, 1294,
     1303,    0,    0, 1234, 1288, 1269, 1293, 1299, 1283, 1290,
     1290, 1291,    0, 1288, 1296, 1294, 1297, 1291, 1306, 1293,
     1293, 1297, 1303, 1320, 1323, 1322, 1349, 1318, 1345, 1333,
     1348, 1335, 1349, 1347, 1342, 1359, 1353,    0, 1359, 1363,
     1368, 1365, 1357, 1360, 1361, 1363, 1403, 1406, 1376, 1402,
     1398, 1412, 1410, 1399, 1415, 1403, 1404, 1423, 1411, 1426,
     1419, 1407, 1413, 1420, 1420, 1416, 1423, 1433, 1459, 1421,

     1421, 1464, 1464, 1465, 1464, 1472, 1464,    0, 1493, 1522,
      747, 1526, 1541, 1549,    0, 1467, 1520, 1477, 1487, 1493,
     1479, 1486, 1507, 1511,    0, 1519, 1528, 1532, 1539, 1528,
     1542, 1531, 1537, 1540, 1543, 1559, 1561, 1560, 1563, 1556,
     1584, 1555, 1586, 1556, 1568, 1567, 1562, 1583, 1596,    0,
     1594, 1598, 1606, 1595, 1600, 1599, 1606, 1601, 1627, 1620,
     1610, 1618, 1614, 1634, 1632, 1622, 1649, 1638, 1642, 1660,
     1648, 1663, 1656, 1645, 1652, 1660, 1660, 1656, 1662, 1672,
     1673, 1659, 1660, 1703, 1678, 1675, 1704, 1683, 1704, 1733,
     1762, 1737, 1497, 1769, 1785, 1789, 1794,    0,  557,    0,

     1813,    0,    0,    0,    0,    0,    0, 1707, 1772, 1717,
     1729, 1734, 1719, 1726, 1755, 1770,    0, 1773, 1783, 1779,
     1783, 1780, 1796, 1783, 1785, 1788, 1793, 1812, 1814, 1813,
     1819, 1807, 1820, 1805, 1838, 1819, 1830, 1828, 1830, 1847,
     1840,    0, 1846, 1851, 1863, 1855, 1848, 1853, 1851, 1854,
     1872, 1892, 1864, 1872, 1868, 1882, 1882, 1876, 1903, 1892,
     1893, 1911, 1899, 1917, 1907, 1894, 1904, 1911, 1911, 1908,
     1914, 1923, 1931, 1912, 1912, 1957, 1930, 1926, 1936, 1933,
     1955,    0,  773, 4660, 4660, 4660, 4660, 4660, 4660, 1939,
     1935, 1969, 1969, 1960, 1969, 1964, 1964, 1961, 1976, 1964,

     1979, 1980, 1967, 1987, 1971, 1990, 1976, 1989, 4660, 1995,
     1984, 2012, 1987, 1989, 1992, 1997, 2025, 2015, 2005, 2016,
     2018, 2011, 2024, 4660, 2029, 2031, 2045, 2024, 4660, 2019,
     2038, 2023, 2039, 2038, 2041, 2046, 4660, 4660, 2030, 2051,
     4660,  719, 2042, 2052, 2047, 2044, 2065, 2069, 2070, 2064,
     2064, 2082, 2079, 2084, 2081, 2078, 2070, 2086, 2077, 2088,
     2095, 4660, 2096, 2093, 4660, 2092, 2088, 2103, 2108, 2105,
     2097, 2107, 2104, 2126, 2114, 2111, 2130, 2126, 2130, 2134,
     2182, 2173, 2191, 2195, 2199,    0,    0,    0,    0,    0,
        0, 2169, 2159, 2194, 2194, 2185, 2193, 2187, 2186, 2182,

     2197, 2185, 2199, 2200, 2187, 2205, 2190, 2210, 2197, 2210,
        0, 2215, 2199, 2235, 2200, 2201, 2201, 2203, 2222, 2224,
     2215, 2240, 2242, 2234, 2247,    0, 2252, 2253, 2265, 2245,
        0, 2241, 2258, 2243, 2259, 2257, 2261, 2268,    0,    0,
     2251, 2272,    0,  718, 2262, 2263, 2258, 2253, 2274, 2276,
     2284, 2276, 2276, 2295, 2298, 2308, 2305, 2301, 2293, 2307,
     2298, 2310, 2315,    0, 2316, 2313,    0, 2310, 2309, 2324,
     2329, 2326, 2317, 2318, 2322, 2336, 2324, 2318, 2344, 2338,
     2350, 2347, 2377, 2385, 2394, 2398, 2406, 2413, 2417, 2421,
        0,    0,    0,    0,    0, 2384, 2374, 2416, 2417, 2408,

     2416, 2410, 2409, 2406, 2422, 2410, 2424, 2425, 2412, 2430,
     2414, 2433, 2420, 2433,    0, 2438, 2422, 2465, 2423, 2424,
     2424, 2426, 2452, 2443, 2438, 2462, 2464, 2457, 2470,    0,
     2475, 2476, 2488, 2471,    0, 2466, 2483, 2468, 2484, 2482,
     2485, 2491,    0,    0, 2474, 2495,    0,  715, 2485, 2486,
     2481, 2476, 2497, 2506, 2507, 2495, 2499, 2525, 2526, 2531,
     2528, 2524, 2516, 2530, 2524, 2535, 2540,    0, 2541, 2538,
        0, 2535, 2531, 2546, 2552, 2549, 2540, 2541, 2545, 2559,
     2547, 2548, 2567, 2563, 2567, 2578, 2599, 2609, 2619, 2628,
     2633, 2640, 2644, 2648, 2666, 2654, 2672, 2677,    0,    0,

        0,    0,    0,    0, 2640, 2629, 2655, 2661, 2656, 2664,
     2658, 2657, 2653, 2671, 2660, 2674, 2677, 2664, 2683, 2667,
     2686, 2672, 2685,    0, 2690, 2675, 2690, 2675, 2677, 2683,
     2687, 2708, 2698, 2691, 2708, 2714, 2706, 2719,    0, 2724,
     2725, 2739, 2719,    0, 2716, 2733, 2720, 2736, 2733, 2738,
     2743,    0,    0, 2726, 2747,    0,  675, 2737, 2739, 2733,
     2728, 2755, 2756, 2758, 2746, 2747, 2765, 2765, 2776, 2777,
     2773, 2765, 2779, 2772, 2785, 2790,    0, 2793, 2790,    0,
     2788, 2784, 2799, 2804, 2801, 2792, 2794, 2796, 2811, 2804,
     2798, 2818, 2808, 2821, 2821, 2807, 2832, 2824, 4660, 2838,

     4660, 4660, 2843, 2825, 2827,  663, 2844, 4660, 2832, 2848,
     4660, 2847, 2845, 2848, 4660, 2845, 2837, 2847, 2843, 2845,
     2862, 2863, 2849, 2850, 2861, 2876, 4660, 4660, 2863, 2866,
     2865, 2866,  696, 2893, 4660, 4660,  659, 4660, 4660, 4660,
     2867, 4660, 2880, 2877, 2882, 2880, 2898, 2885, 2902, 4660,
     2892, 2896, 2897, 4660, 2909, 2914, 2907, 2916, 2917, 4660,
     4660, 2905, 2905, 4660, 2912, 2914, 2925, 4660, 2920, 4660,
     4660, 2916, 2925, 4660, 2917, 2927, 2921, 2930, 2926, 2946,
     2953, 2951, 4660, 2955, 2946, 4660, 2984, 2991, 2999, 3003,
     2949, 2968, 2962,    0, 2976,    0,    0, 2998, 2980, 2984,

      658, 2999,    0, 2985, 3001,    0, 2998, 2996, 2999,    0,
     2996, 2988, 2998, 2994, 2996, 3012, 3013, 2999, 3000, 3006,
     3021,    0,    0, 3007, 3010, 3007, 3008,  653, 3020,    0,
        0,  612,    0,    0,    0, 3010,    0, 3023, 3021, 3038,
     3036, 3056, 3043, 3058,    0, 3046, 3047, 3048,    0, 3060,
     3065, 3058, 3067, 3068,    0,    0, 3056, 3055,    0, 3062,
     3064, 3075,    0, 3065,    0,    0, 3061, 3069,    0, 3061,
     3069, 3063, 3070, 3068, 3082, 3091, 3089,    0, 3110, 3101,
        0, 3127, 3135, 3139, 3143, 3148, 3154, 3100, 3145, 3133,
        0, 3149,    0,    0, 3154, 3136, 3138,  587, 3153,    0,

     3139, 3155,    0, 3152, 3150, 3151,    0, 3148, 3140, 3150,
     3146, 3148, 3164, 3165, 3151, 3152, 3158, 3173,    0,    0,
     3159, 3162, 3159, 3160,  604, 3201,    0,    0,  567,    0,
        0,    0, 3161,    0, 3201, 3193, 3193, 3191, 3209, 3196,
     3211,    0, 3199, 3200, 3202,    0, 3212, 3217, 3210, 3219,
     3220,    0,    0, 3208, 3207,    0, 3214, 3216, 3227,    0,
     3217,    0,    0, 3213, 3221,    0, 3213, 3221, 3215, 3224,
     3246, 3260, 3264, 3262,    0, 3266, 3257,    0, 3281, 3285,
     3289, 3293, 3313, 3297, 3317, 3335, 3270, 3289, 3279,    0,
     3298,    0,    0, 3303, 3294, 3296,  562, 3311,    0, 3297,

     3314,    0, 3311, 3309, 3312,    0, 3309, 3306, 3318, 3314,
     3316, 3332, 3333, 3319, 3320, 3326, 3341,    0,    0, 3335,
     3338, 3337, 3338,  587, 3354,    0,    0,  513,    0,    0,
        0, 3337,    0, 3350, 3341, 3343, 3351, 3369, 3356, 3371,
        0, 3359, 3360, 3361,    0, 3373, 3378, 3376, 3387, 3388,
        0,    0, 3376, 3375,    0, 3382, 3384, 3395,    0, 3385,
        0,    0, 3381, 3397,    0, 3389, 3399, 3393, 3400, 3396,
     3410, 3414, 3412,    0, 3425, 3416,    0, 3431, 3428, 3409,
     3434, 3416, 4660, 4660, 3433, 3426, 3436,  489, 3433, 3445,
     3436, 3447, 4660, 3433, 3450, 3436, 4660, 3438,  488, 4660,

     3434, 3440, 3449, 3460, 4660, 3451, 4660, 3467, 3454, 3452,
     4660, 4660, 3474, 3473, 3487, 4660, 4660, 3469, 4660, 3471,
     4660, 3471, 3478, 3492, 3490, 4660, 3476, 4660, 3477, 4660,
     3479, 3498, 3486, 4660, 3494, 4660, 3504, 3487, 3506, 4660,
     3493, 3512, 4660, 3491, 3514, 3511, 3500, 3525, 3509,    0,
        0, 3526, 3517, 3527,  483, 3519, 3531, 3531, 3542,    0,
     3528, 3545, 3531,    0, 3533,  445,    0, 3529, 3535, 3538,
     3549,    0, 3543,    0, 3559, 3548, 3546,    0,    0, 3568,
     3565, 3570,    0,    0, 3552,    0, 3554,    0, 3554, 3569,
     3583, 3583,    0, 3569,    0, 3568,    0, 3570, 3584, 3574,

        0, 3581,    0, 3599, 3582, 3601,    0, 3588, 3607,    0,
     3586,  569, 3633, 3609, 3606, 3589, 3614, 3601,    0,    0,
     3618, 3615, 3625,  442, 3617, 3627, 3626, 3637,    0, 3625,
     3642, 3628,    0, 3630,  437,    0, 3626, 3634, 3634, 3647,
        0, 3635,    0, 3651, 3638, 3641,    0,    0, 3663, 3660,
     3665,    0,    0, 3647,    0, 3649,    0, 3649, 3658, 3672,
     3675,    0, 3661,    0, 3666,    0, 3668, 3682, 3670,    0,
     3677,    0, 3694, 3677, 3698,    0, 3685, 3704,    0, 3683,
     3718,  808, 3729, 3744, 3713, 3710, 3700, 3725, 3707,    0,
        0, 3726, 3717, 3735,  402, 3727, 3737, 3730, 3741,    0,

     3727, 3744, 3730,    0, 3732,  398,    0, 3728, 3734, 3734,
     3750,    0, 3738,    0, 3756, 3744, 3742,    0,    0, 3764,
     3761, 3766,    0,    0, 3748,    0, 3753,    0, 3753, 3769,
     3783, 3781,    0, 3769,    0, 3768,    0, 3771, 3791, 3779,
        0, 3786,    0, 3798, 3781, 3800,    0, 3787, 3806,    0,
     3785, 3791, 3796, 4660, 3797, 3810, 3807, 3799, 4660, 3803,
     3819, 4660, 3807, 4660, 4660, 3819, 4660, 4660, 3803, 3817,
     3826, 4660, 3828, 4660, 4660, 3823, 3837, 3842, 3834, 4660,
     3835, 4660, 4660, 3840, 3836, 4660, 3848, 3849, 3848, 4660,
     4660, 3861, 3859, 4660, 3850, 4660, 4660, 3847, 4660, 3848,

     3853,    0, 3854, 3864, 3864, 3854,    0, 3859, 3876,    0,
     3864,    0,    0, 3876,    0,    0, 3860, 3874, 3880,    0,
     3885,    0,    0, 3871, 3894, 3899, 3889,    0, 3892,    0,
        0, 3896, 3887,    0, 3905, 3906, 3903,    0,    0, 3918,
     3916,    0, 3907,    0,    0, 3904,    0, 3931, 3909, 3917,
        0, 3918, 3930, 3928, 3918,    0, 3921, 3937,    0, 3925,
        0,    0, 3937,    0,    0, 3924, 3938, 3948,    0, 3950,
        0,    0, 3936, 3950, 3956, 3946,    0, 3947,    0,    0,
     3953, 3943,    0, 3956, 3963, 3960,    0,    0, 3973, 3973,
        0, 3964,    0,    0, 3961,    0, 4003, 4017, 4021, 3971,

     3976,    0, 3979, 3994, 3991, 3984,    0, 3987, 4014,    0,
     4004,    0,    0, 4016,    0,    0, 4001, 4015, 4021,    0,
     4023,    0,    0, 4009, 4025, 4030, 4020,    0, 4023,    0,
        0, 4027, 4017,    0, 4029, 4030, 4027,    0,    0, 4040,
     4038,    0, 4029,    0,    0, 4026,    0, 4041, 4660, 4660,
     4660, 4028,  374, 4047, 4031, 4037, 4660, 4057, 4048, 4660,
     4048, 4660, 4072, 4066, 4660, 4058, 4066,  342, 4068, 4061,
     4082, 4072, 4083, 4660, 4660, 4085,    0,    0,    0, 4071,
      338, 4092, 4074, 4075,    0, 4095, 4083,    0, 4083,    0,
     4096, 4088,    0, 4080, 4087,  332, 4089, 4083, 4104, 4096,

     4110,    0,    0, 4147, 4112,    0,    0,    0, 4101,  315,
     4120, 4113, 4116,    0, 4136, 4129,    0, 4131,    0, 4144,
     4136,    0, 4130, 4137,  218, 4139, 4132, 4153, 4143, 4152,
        0,    0, 4166, 4175, 4159,    0,    0,    0, 4145,  211,
     4170, 4153, 4154,    0, 4177, 4165,    0, 4172,    0, 4185,
     4177,    0, 4169, 4176,  204, 4180, 4173, 4194, 4184, 4193,
        0,    0, 4660, 4179, 4201, 4187, 4660, 4195, 4194, 4202,
     4196, 4191, 4191, 4208, 4200, 4197, 4215, 4224, 4226, 4216,
     4232,    0, 4217, 4242, 4231,    0, 4238, 4236, 4242, 4238,
     4233, 4233, 4250, 4242, 4239, 4252, 4258, 4259, 4251, 4264,

        0, 4249, 4267, 4256,    0, 4263, 4261, 4272, 4266, 4269,
     4269, 4289, 4281, 4285, 4297, 4300, 4301, 4291, 4306,    0,
     4291, 4308, 4299,    0, 4305, 4303, 4310, 4306, 4301, 4301,
     4320, 4312, 4309, 4322, 4325, 4326, 4321, 4334, 4660, 4344,
     4338, 4337, 4337, 4332, 4660, 4358, 4660, 4357, 4660, 4660,
     4362, 4660, 4660, 4346, 4660, 4660,    0, 4364, 4359, 4358,
     4355, 4350,    0, 4369,    0, 4368,    0,    0, 4374,    0,
        0, 4360,    0,    0,    0, 4378, 4371, 4372, 4369, 4364,
        0, 4383,    0, 4382,    0,    0, 4387,    0,    0, 4371,
        0,    0,    0, 4394, 4387, 4392, 4390, 4385,    0, 4407,

        0, 4406,    0,    0, 4418,    0,    0, 4402,    0,    0,
     4401, 4409, 4660, 4409, 4421, 4426, 4660, 4414, 4660, 4409,
     4417,    0, 4417, 4428, 4435,    0, 4423,    0, 4418, 4428,
        0, 4428, 4438, 4443,    0, 4431,    0, 4426, 4434,    0,
     4439, 4449, 4460,    0, 4449,    0, 4459, 4463, 4450, 4660,
     4457, 4467, 4474, 4475, 4462,    0, 4464, 4474, 4481, 4482,
     4469,    0, 4469, 4480, 4489, 4490, 4477,    0, 4479, 4489,
     4660, 4482, 4660, 4660, 4660,    0, 4483,    0,    0,    0,
        0, 4484,    0,    0,    0,    0, 4485,    0,    0,    0,
     4485, 4491, 4492, 4499, 4520, 4521, 4525, 4526, 4522, 4523,

     4524, 4525, 4523, 4526, 4527, 4528, 4660,    0,    0,    0,
     4660, 4594, 4600, 4605, 4614, 4623, 4632,  245, 4641, 4650
    } ;

static const flex_int16_t yy_def[2121] =
    {   0,
     2111,    1, 2111,    3, 2111,    5,    5,    5,    5,    5,
     2111,   11, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2111, 2111, 2111, 2113, 2113, 2113,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2113, 2113, 2115, 2116, 2116, 2116, 2116, 2111,
     2116, 2116, 2116, 2116, 2116, 2111, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2111, 2116, 2116, 2111, 2111, 2117, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2118, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2113, 2113, 2113,
     2113, 2113, 2113, 2113, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2113,
     2113, 2113, 2113, 2113, 2113, 2115, 2115, 2116, 2116, 2116,

     2119, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2117, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2118, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2111, 2113, 2113, 2113, 2113, 2113, 2111, 2113,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2111, 2113, 2113, 2113,
     2113, 2113, 2111, 2113, 2115, 2111, 2115, 2119, 2116, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2111, 2113, 2111, 2113, 2113, 2111, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2111, 2111,
     2113, 2113, 2113, 2111, 2120, 2115, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2113, 2111, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2111, 2113, 2120, 2120, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2113, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2113, 2120, 2120, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2113, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2113, 2120, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2111, 2111, 2111, 2111,
     2111, 2111, 2112, 2112, 2112, 2112, 2112, 2112, 2114, 2114,
     2114, 2114, 2114, 2114, 2116, 2116, 2116, 2116, 2116, 2116,
     2111, 2111, 2111, 2111, 2111, 2112, 2112, 2112, 2112, 2112,
     2114, 2114, 2114, 2114, 2114, 2116, 2116, 2116, 2116, 2116,
     2111, 2112, 2114, 2116, 2111, 2112, 2114, 2116, 2111, 2112,

     2114, 2116, 2111, 2112, 2114, 2116, 2111, 2112, 2114, 2116,
        0, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111
    } ;

static const flex_int16_t yy_nxt[4744] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      586,   78,  104,  104,  104,  104,  103, 1933,   78,  104,
      104,  104,  104,   19, 1922,   19,  105,  105,  105,  105,
       19, 1914,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1903,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1895,  164,  161,  170,  165,
      401, 1884,  166,  224,  399, 1876,  144,  162,  153,  402,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  224,  172,  186,  173,  162, 1865,  178,  187,
      174,  179,  264,  175,  180,  176,  193,  181,  406,  407,
      182,  265,  189,  171,  194,  144,  190,  144,  185,  177,
      191, 1717,  172,  186,  173, 1708,  192,  178,  187,  174,
      179,  264,  175,  180,  176,  193,  181,  195,  199,  182,
      265,  189,  269,  194,  205,  190,  200,  305,  206,  191,
      201,  196,  202,  203,  204,  192,  197,  198,  225,  226,
     1666,  207,  217,  218,  346, 1657,  195,  199, 1617,  219,

      208,  269,  220,  205,  209,  200,  305,  206,  210,  201,
      196,  202,  203,  204,  211,  197,  198,  225,  226,  212,
      207,  217,  218,  346,  213,  221,  347,  222,  219,  208,
      223,  220,  351,  209,  214,  387, 1608,  210,  438,  215,
      216, 1569, 1560,  211,  228,  228,  228,  228,  212,  309,
      309,  309,  309,  213,  221,  347,  222,  274,  399,  223,
      144,  351,  310,  214,  387,  275, 1517,  438,  215,  216,
      229,  230,  230,  230,  230,  229,  230,  230,  230,  230,
      234,  244,  235,  311,  231, 1648,  274,  236,  238,  231,
      237,  310,  239,  439,  275,  245,  240,  356,  246,  241,

      248,  247,  242,  232,  249,  357, 1514,  443,  250,  234,
      244,  235,  243,  231,  251, 1492,  236,  238,  231,  237,
     1446,  239,  439, 1443,  245,  240,  356,  246,  241,  248,
      247,  242,  232,  249,  357,  252,  443,  250,  479,  276,
     1421,  243,  266,  251,  253,  348,  254,  267,  485,  258,
      349,  255,  268,  277,  256,  350,  257,  259,  278,  279,
      260,  306,  307,  261,  252, 1377,  262,  479,  276,  263,
      488,  266, 1374,  253,  348,  254,  267,  485,  258,  349,
      255,  268,  277,  256,  350,  257,  259,  278,  279,  260,
      306,  307,  261,  270,  280,  262,  286,  271,  263,  488,

      287,  272,  281,  403,  404,  405,  282,  273,  283,  284,
      285, 1352, 1310,  288,  489, 1307, 1285,  294,  397,  397,
      397,  397,  270,  280,  490,  286,  271,  295, 1237,  287,
      272,  281,  296,  297,  486,  282,  273,  283,  284,  285,
      289,  368,  288,  489,  290,  369,  294,  302,  291,  303,
      298,  299,  304,  490,  292,  487,  295,  300,  370,  293,
      301,  296,  297,  486,  685,  685,  685,  685, 1138,  289,
      368, 1041,  946,  290,  369,  484,  302,  291,  303,  298,
      299,  304,  484,  292,  487,  482,  300,  370,  293,  301,
      311,  400,  312,  313,  313,  313,  313,  316,  227,  317,

      326,  320,  145,  491,  318,  321,  314,  319, 2111,  322,
      388,  389,  323, 2111,  327,  324,  384,  328,  385,  492,
      329,  386, 1697,  330,  393,  325,  316,  331,  317,  326,
      320,  332,  491,  318,  321,  314,  319,  333,  322,  388,
      389,  323,  334,  327,  324,  384,  328,  385,  492,  329,
      386,  335,  330,  336,  325,  358,  331,  448,  337,  340,
      332,  338,  493,  339,  352,  449,  333,  341,  353,  359,
      342,  334,  354,  343,  360,  361,  344, 2111,  355,  345,
      335, 2111,  336, 2111,  358, 2111,  448,  337,  340, 2111,
      338,  493,  339,  352,  449, 2111,  341,  353,  359,  342,

      376,  354,  343,  360,  361,  344,  362,  355,  345,  371,
      377,  480,  481,  372,  363,  378,  379,  373,  364,  494,
      365,  366,  367,  374,  380,  381,  495,  498,  375,  376,
      501,  382,  505,  506,  383,  362, 2111, 2111,  371,  377,
      480,  481,  372,  363,  378,  379,  373,  364,  494,  365,
      366,  367,  374,  380,  381,  495,  498,  375, 2111,  501,
      382,  505,  506,  383,  390,  390,  390,  390,  392, 2111,
      393,  394,  394,  394,  394,  507,  408,  391,  409,  496,
     2111,  418,  440,  410,  395,  412,  411,  441,  497,  413,
      508,  509,  442,  414, 2111,  419,  415,  499,  420,  416,

     2111,  421,  500, 2111,  507,  408,  391,  409,  496,  417,
      418,  440,  410,  395,  412,  411,  441,  497,  413,  508,
      509,  442,  414,  426,  419,  415,  499,  420,  416,  422,
      421,  500,  427,  423,  428,  510,  511,  424,  417,  429,
      432,  444,  430,  425,  431,  445, 2111, 2111,  433,  446,
     2111,  434,  426,  512,  435,  447, 2111,  436,  422,  513,
      437,  427,  423,  428,  510,  511,  424, 2111,  429,  432,
      444,  430,  425,  431,  445,  460,  450,  433,  446,  461,
      434,  514,  512,  435,  447,  454,  436, 2111,  513,  437,
      451,  517,  462,  455, 2111,  452,  453,  456,  463,  457,

      458,  459,  464,  520,  460,  450,  465,  521,  461, 2111,
      514,  476,  466,  477,  454, 2111,  478,  467, 2111,  451,
      517,  462,  455,  468,  452,  453,  456,  463,  457,  458,
      459,  464,  520,  469,  522,  465,  521,  523,  470,  471,
      476,  466,  477,  472,  473,  478,  467,  502,  524,  503,
      474,  515,  468,  475,  504,  518,  528,  516,  529,  525,
     2111,  519,  469,  522,  526,  527,  523,  470,  471,  531,
      530,  535,  472,  473,  532,  538,  502,  524,  503,  474,
      515,  539,  475,  504,  518,  528,  516,  529,  525,  533,
      519,  534,  536,  526,  527,  540,  537,  544,  531,  530,

      535,  542,  543,  532,  538,  545,  546,  547,  548,  549,
      539,  550,  541,  551,  552,  553,  555,  558,  533,  554,
      534,  536,  559,  560,  540,  537,  544,  556,  563,  557,
      542,  543,  564,  565,  545,  546,  547,  548,  549,  561,
      550,  541,  551,  552,  553,  555,  558,  562,  554,  566,
      569,  559,  560,  570,  574,  567,  556,  563,  557,  575,
      571,  564,  565,  568,  576,  578,  579,  572,  561,  573,
      577,  587,  580, 2111, 2111, 2111,  562, 2111,  566,  569,
     2111, 2111,  570,  574,  567, 2111, 2111, 2111,  575,  571,
     2111, 2111,  568,  576,  578,  579,  572,  590,  573,  577,

      587,  580,  228,  228,  228,  228,  582,  582,  582,  582,
      229,  230,  230,  230,  230,  581,  584,  588,  584,  583,
      585,  585,  585,  585,  231,  591,  590,  592,  593,  594,
      595,  596,  597,  598,  600,  601,  603,  607,  589,  608,
      602,  609,  599,  604,  581,  605,  588,  610,  583,  611,
      606,  612,  613,  231,  591,  616,  592,  593,  594,  595,
      596,  597,  598,  600,  601,  603,  607,  589,  608,  602,
      609,  599,  604,  619,  605,  622,  610,  614,  611,  606,
      612,  613,  617,  615,  616,  620,  623,  624,  618,  625,
      626,  621,  627,  630,  633,  631,  637,  628,  629,  634,

      640,  635,  619,  636,  622,  638,  614,  632,  641,  639,
     2111,  617,  615,  646,  620,  623,  624,  618,  625,  626,
      621,  627,  630,  633,  631,  637,  628,  629,  634,  640,
      635,  642,  636,  647,  638,  648,  632,  641,  639,  644,
      645,  649,  646,  650,  651,  652,  653,  654,  643,  655,
      657,  660,  658,  656,  659,  661,  662,  663,  665,  666,
      642,  667,  647,  668,  648,  664,  671,  672,  644,  645,
      649, 2111,  650,  651,  652,  653,  654,  643,  655,  657,
      660,  658,  656,  659,  661,  662,  663,  665,  666,  669,
      667,  673,  668,  676,  664,  671,  672,  670,  674,  677,

      675,  678,  680,  681,  691,  694, 2111,  679, 2111,  682,
      309,  309,  309,  309,  791,  791,  791,  791,  669,  695,
      673,  696,  676,  310,  697,  698,  670,  674,  677,  675,
      678,  680,  681,  691,  694,  683,  679,  683,  682,  684,
      684,  684,  684,  686,  686,  686,  686,  699,  695,  692,
      696,  700,  310,  697,  698,  311,  687,  312,  688,  688,
      688,  688,  689,  701,  689,  702,  690,  690,  690,  690,
      693,  314,  704,  707,  703,  711,  699,  705,  692,  708,
      700,  709,  706,  712,  713,  687,  710,  714,  715,  716,
      717,  718,  701,  720,  702,  723,  726,  719, 2111,  693,

      314,  704,  707,  703,  711,  727,  705,  728,  708,  729,
      709,  706,  712,  713,  730,  710,  714,  715,  716,  717,
      718,  721,  720,  724,  723,  726,  719,  722,  734,  725,
      735,  739,  737,  740,  727,  731,  728,  738,  729,  741,
      732,  733,  736,  730,  742,  744,  745,  750,  743,  751,
      721,  752,  724,  748,  749,  746,  722,  734,  725,  735,
      739,  737,  740,  753,  731,  754,  738,  755,  741,  732,
      733,  736,  747,  742,  744,  745,  750,  743,  751,  756,
      752,  757,  748,  749,  746,  758,  759,  761,  764,  762,
      760,  763,  753,  765,  754,  766,  755,  767,  769,  770,

      771,  747,  772,  773,  775,  768,  776,  780,  756,  781,
      757,  774, 2111,  784,  758,  759,  761,  764,  762,  760,
      763, 2111,  765, 2111,  766, 2111,  767,  769,  770,  771,
      777,  772,  773,  775,  768,  776,  780,  778,  781,  779,
      774,  782,  784,  785,  800,  803, 2111,  783, 2111,  786,
      390,  390,  390,  390,  789,  789,  789,  789, 2111,  777,
     2111,  804,  805,  391,  806,  807,  778,  790,  779, 2111,
      782, 2111,  785,  800,  803,  787,  783,  787,  786,  788,
      788,  788,  788,  392, 2111,  393,  792,  792,  792,  792,
      804,  805,  391,  806,  807,  808,  790,  796,  793,  395,

      793,  801,  794,  794,  794,  794,  795,  795,  795,  795,
      809,  797,  797,  797,  797,  799,  483,  810,  483,  813,
      811,  814,  802,  483,  808,  816,  815,  820,  395,  812,
      801,  821,  822,  817,  483,  818, 2111,  823,  483,  809,
      819,  824,  825,  826,  829,  832,  810,  827,  813,  811,
      814,  802, 2111,  828,  816,  815,  820,  830,  812,  835,
      821,  822,  817,  831,  818,  483,  823,  836,  837,  819,
      824,  825,  826,  829,  832,  833,  827,  838,  839,  840,
      843,  834,  828,  844,  841,  842,  830,  850,  835,  846,
      853,  848,  831,  849,  847,  845,  836,  837,  851,  854,

      855,  859,  852,  860,  833,  861,  838,  839,  840,  843,
      834,  862,  844,  841,  842,  863,  850,  856,  846,  853,
      848,  864,  849,  847,  845,  857,  858,  851,  854,  855,
      859,  852,  860,  865,  861,  866,  867,  868,  870,  873,
      862,  869,  874,  871,  863,  872,  856,  875,  876,  878,
      864,  879,  880,  881,  857,  858,  877,  884,  885,  889,
      890,  882,  865,  893,  866,  867,  868,  870,  873,  883,
      869,  874,  871,  891,  872,  896,  875,  876,  878,  892,
      879,  880,  881,  897,  886,  877,  884,  885,  889,  890,
      882,  887,  893,  888,  894,  898,  899,  900,  883,  901,

      895,  903,  891,  904,  896,  905,  906,  907,  892,  908,
      909,  910,  897,  886,  902,  911,  912,  913,  914,  915,
      887,  916,  888,  894,  898,  899,  900,  917,  901,  895,
      903,  920,  904,  921,  905,  906,  907,  922,  908,  909,
      910,  923,  918,  902,  911,  912,  913,  914,  915,  919,
      916,  924,  925,  926,  927,  928,  917,  929,  930,  931,
      920,  932,  921,  936,  937,  933,  922,  938,  939,  940,
      923,  918,  941,  942,  943,  934,  944,  945,  919,  947,
      924,  925,  926,  927,  928,  935,  929,  930,  931,  948,
      932,  949,  936,  937,  950,  951,  938,  939,  940,  952,

      953,  941,  942,  943,  934,  944,  945,  954,  947,  955,
      956,  957,  958,  959,  935,  961,  962,  960,  948,  963,
      949,  964,  966,  950,  951,  967,  968,  969,  952,  953,
      965,  970,  971,  972,  973,  974,  954,  975,  955,  956,
      957,  958,  959,  978,  961,  962,  960,  976,  963,  977,
      964,  966,  979,  980,  967,  968,  969,  981,  982,  985,
      970,  971,  972,  973,  974,  983,  975,  986, 2111,  984,
     2111, 2111,  978, 2111, 2111, 2111,  976, 2111,  977, 2111,
     2111,  979,  980, 2111, 2111, 2111,  981,  982,  985, 2111,
      582,  582,  582,  582,  983,  987,  986,  987,  984,  988,

      988,  988,  988,  583,  989,  991,  989,  992,  990,  990,
      990,  990,  585,  585,  585,  585,  585,  585,  585,  585,
      993,  994,  995,  996,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005,  583, 1006,  991, 1007,  992, 1008,  997, 1009,
     1010, 1011, 1012, 2111, 1015, 1016, 1017, 1018, 1019,  993,
      994,  995,  996,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1020, 1006, 1021, 1007, 1013, 1008,  997, 1009, 1010,
     1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023,
     1024, 1025, 1026, 1027, 1031, 1028, 1032, 1033, 1034, 1035,
     1020, 1036, 1021, 1037, 1013, 1029, 1038, 1039, 1040, 1042,

     1043, 1014, 1044, 1045, 1046, 1030, 1047, 1022, 1023, 1024,
     1025, 1026, 1027, 1031, 1048, 1032, 1033, 1034, 1035, 1049,
     1036, 1050, 1037, 1051, 1029, 1038, 1039, 1040, 1042, 1043,
     1052, 1044, 1045, 1046, 1030, 1047, 1053, 1054, 1056, 1057,
     1058, 1055, 1059, 1048, 1061, 1062, 1063, 1064, 1049, 1065,
     1050, 1060, 1051, 1066, 1067, 1068, 1069, 1070, 1071, 1052,
     1072, 1073, 1074, 1075, 1076, 1053, 1054, 1056, 1057, 1058,
     1055, 1059, 1077, 1061, 1062, 1063, 1064, 1078, 1065, 1080,
     1081, 1079, 1066, 1067, 1068, 1069, 1070, 1071, 2111, 1072,
     1073, 1074, 1075, 1076, 1082, 1082, 1082, 1082, 2111, 2111,

     2111, 1077,  684,  684,  684,  684, 1078, 2111, 1080, 1081,
     1079, 1083, 1083, 1083, 1083,  686,  686,  686,  686, 1084,
     1088, 1084, 1089, 1085, 1085, 1085, 1085,  311,  687,  312,
     1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087,  690,  690,
      690,  690, 1090,  314, 1091, 1092, 1093, 1095, 1096, 1088,
     1097, 1089, 1098, 1099, 1100, 1101, 1102,  687, 1103, 1104,
     1105, 1094, 1106, 1107, 1108, 1109, 2111, 1112, 1113, 1114,
     1115, 1090,  314, 1091, 1092, 1093, 1095, 1096, 1116, 1097,
     1117, 1098, 1099, 1100, 1101, 1102, 1118, 1103, 1104, 1105,
     1094, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115,

     1119, 1120, 1111, 1121, 1122, 1123, 1124, 1116, 1125, 1117,
     1128, 1129, 1130, 1131, 1132, 1118, 1133, 1134, 1126, 1135,
     1136, 1137, 1139, 1140, 1110, 1141, 1142, 1143, 1127, 1119,
     1120, 1111, 1121, 1122, 1123, 1124, 1144, 1145, 1146, 1128,
     1129, 1130, 1131, 1132, 1147, 1133, 1134, 1126, 1135, 1136,
     1137, 1139, 1140, 1148, 1141, 1142, 1143, 1127, 1149, 1150,
     1151, 1153, 1154, 1155, 1152, 1144, 1145, 1146, 1156, 1158,
     1159, 1160, 1161, 1147, 1162, 1163, 1164, 1157, 1165, 1166,
     1167, 1168, 1148, 1169, 1170, 1171, 1172, 1149, 1150, 1151,
     1153, 1154, 1155, 1152, 1173, 1174, 1177, 1156, 1158, 1159,

     1160, 1161, 1175, 1162, 1163, 1164, 1176, 1165, 1166, 1167,
     1168, 1178, 1169, 1170, 1171, 1172, 1179, 1179, 1179, 1179,
     2111, 2111, 2111, 1173, 1174, 1177,  788,  788,  788,  788,
     2111, 1175, 2111, 2111, 2111, 1176,  789,  789,  789,  789,
     1178, 1180, 2111, 1180, 2111, 1181, 1181, 1181, 1181,  790,
     1182, 1182, 1182, 1182,  392, 2111,  393, 1183, 1183, 1183,
     1183, 1184, 1184, 1184, 1184,  794,  794,  794,  794,  796,
      395, 1185, 1185, 1185, 1185,  796, 1187, 1188,  790,  799,
      483, 1189,  483,  795,  795,  795,  795,  483, 1190, 1186,
     1186, 1186, 1186, 1191, 1192, 1194, 1195, 1196,  483,  395,

     2111, 1197,  483, 1198, 1199, 1187, 1188, 1200, 1201, 1193,
     1189, 1202, 1203, 1204, 1205, 1206, 1207, 1190, 1208, 1211,
     1209, 1212, 1191, 1192, 1194, 1195, 1196, 1210, 1213,  483,
     1197, 1214, 1198, 1199, 1215, 1216, 1200, 1201, 1193, 1217,
     1202, 1203, 1204, 1205, 1206, 1207, 1218, 1208, 1211, 1209,
     1212, 1219, 1220, 1221, 1222, 1223, 1210, 1213, 1227, 1224,
     1214, 1228, 1229, 1215, 1216, 1230, 1231, 1232, 1217, 1225,
     1233, 1234, 1235, 1236, 1238, 1218, 1239, 1240, 1241, 1226,
     1219, 1220, 1221, 1222, 1223, 1242, 1243, 1227, 1244, 1245,
     1228, 1229, 1246, 1247, 1230, 1231, 1232, 1248, 1225, 1233,

     1234, 1235, 1236, 1238, 1249, 1239, 1240, 1241, 1226, 1250,
     1252, 1253, 1254, 1251, 1242, 1243, 1255, 1244, 1245, 1257,
     1258, 1246, 1247, 1259, 1260, 1256, 1248, 1261, 1262, 1263,
     1264, 1265, 1266, 1249, 1267, 1269, 1268, 1270, 1250, 1252,
     1253, 1254, 1251, 1271, 1272, 1255, 1273, 1274, 1257, 1258,
     1276, 1275, 1259, 1260, 1277, 1278, 1261, 1262, 1263, 1264,
     1265, 1266, 1279, 1267, 1269, 1268, 1270, 1280, 1281, 1282,
     1283, 1284, 1271, 1272, 1286, 1273, 1274, 1287, 1288, 1276,
     1275, 1289, 1290, 1277, 1278, 1291, 1292, 1293, 1294, 1295,
     1296, 1279, 1297, 1298, 1299, 1300, 1280, 1281, 1282, 1283,

     1284, 1301, 1302, 1286, 1303, 1304, 1287, 1288, 1305, 1306,
     1289, 1290, 1311, 1312, 1291, 1292, 1293, 1294, 1295, 1296,
     1313, 1297, 1298, 1299, 1300, 1308, 1314, 1315, 1316, 1317,
     1301, 1302, 1318, 1303, 1304, 1319, 1309, 1305, 1306, 1320,
     1321, 1311, 1312, 1322, 1323, 1324, 1325, 1326, 1327, 1313,
     1328, 1329, 1330, 1331, 1308, 1314, 1315, 1316, 1317, 1332,
     1333, 1318, 1334, 1335, 1319, 1309, 1336, 1337, 1320, 1321,
     1338, 1339, 1322, 1323, 1324, 1325, 1326, 1327, 1340, 1328,
     1329, 1330, 1331, 1341, 1342, 1343, 1344, 2111, 1332, 1333,
     2111, 1334, 1335, 2111, 2111, 1336, 1337, 1345, 1346, 1338,

     1339,  988,  988,  988,  988, 1347, 1348, 1340,  988,  988,
      988,  988, 1341, 1342, 1343, 1344,  990,  990,  990,  990,
      990,  990,  990,  990, 1349, 1350, 1345, 1346, 1351, 1353,
     1354, 1355, 1356, 1357, 1347, 1348, 1358, 1359, 1360, 1361,
     1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
     1372, 1373, 1375, 1349, 1350, 1378, 1379, 1351, 1353, 1354,
     1355, 1356, 1357, 1376, 1380, 1358, 1359, 1360, 1361, 1362,
     1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1373, 1375, 1381, 1382, 1378, 1379, 1383, 1384, 1385, 1386,
     1387, 1388, 1376, 1380, 1389, 1390, 1391, 1392, 1393, 1394,

     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
     1405, 1381, 1382, 1406, 1407, 1383, 1384, 1385, 1386, 1387,
     1388, 1408, 1409, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1410, 1411, 1406, 1407, 1082, 1082, 1082, 1082, 1414, 2111,
     1408, 1409, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413,
     1085, 1085, 1085, 1085,  312, 1086, 1086, 1086, 1086, 1410,
     1411, 1087, 1087, 1087, 1087, 1415, 1416, 1414,  314, 1417,
     1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,

     1439, 1440, 1441, 1442, 1415, 1416, 1447,  314, 1417, 1418,
     1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1444, 1448, 1447, 1449, 1450, 1451, 1452,
     1453, 1454, 1455, 1456, 1445, 1457, 1458, 1459, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1472, 1473, 1444, 1448, 1474, 1449, 1450, 1451, 1452, 1453,
     1454, 1455, 1456, 1445, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1475, 1476, 1474, 1477, 1478, 1479, 1480, 1179, 1179,

     1179, 1179, 1481, 1481, 1481, 1481, 1181, 1181, 1181, 1181,
     1482, 1482, 1482, 1482, 1184, 1184, 1184, 1184, 1485, 1486,
     1475, 1476, 1487, 1477, 1478, 1479, 1480,  392, 1488, 1489,
     1183, 1183, 1183, 1183, 1484, 1484, 1484, 1484,  796, 1490,
     1491, 1493, 1494,  395, 1495, 1496, 1497, 1485, 1486, 1498,
     1499, 1487,  795,  795,  795,  795, 1500, 1488, 1489, 1501,
     1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1490, 1491,
     1493, 1494,  395, 1495, 1496, 1497, 1510, 1511, 1498, 1499,
     1512, 1513, 1518, 1519, 1520, 1500, 1515, 1521, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1516, 1522, 1523,

     1524, 1525, 1526, 1527, 1528, 1510, 1511, 1529, 1530, 1512,
     1513, 1518, 1519, 1520, 1531, 1515, 1521, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1516, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1541, 1542, 1529, 1530, 1543, 1544,
     1545, 1546, 1547, 1531, 1548, 1549, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1550, 1551, 1552, 1553, 1554,
     1555, 1556, 1557, 1541, 1542, 1558, 1559, 1543, 1544, 1545,
     1546, 1547, 1561, 1548, 1549, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1570, 1571, 1550, 1551, 1552, 1553, 1554, 1555,
     1556, 1557, 1574, 1572, 1558, 1559, 1575, 1576, 1577, 1578,

     1579, 1561, 1573, 1580, 1562, 1563, 1564, 1565, 1566, 1567,
     1568, 1570, 1571, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
     1588, 1574, 1572, 1589, 1590, 1575, 1576, 1577, 1578, 1579,
     1591, 1592, 1580, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
     1602, 1603, 1589, 1590, 1604, 1605, 1606, 1607, 1609, 1591,
     1592, 1610, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1611, 1612, 1613, 1614, 1615, 1616, 1618, 1619, 1602,
     1603, 1622, 1620, 1604, 1605, 1606, 1607, 1609, 1623, 1624,
     1610, 1621, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,

     1611, 1612, 1613, 1614, 1615, 1616, 1618, 1619, 1633, 1634,
     1622, 1620, 1635, 1636, 1637, 1638, 1639, 1623, 1624, 1640,
     1641, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1642,
     1643, 1644, 1645, 1646, 1647, 1649, 1650, 1633, 1634, 1651,
     1652, 1635, 1636, 1637, 1638, 1639, 1653, 1654, 1640, 1641,
     1413, 1413, 1413, 1413, 1655, 1656, 1658, 1659, 1642, 1643,
     1644, 1645, 1646, 1647, 1649, 1650, 1660, 1661, 1651, 1652,
     1662, 1663, 1664, 1665, 1667, 1653, 1654, 1668, 1669, 1671,
     1672, 1673, 1674, 1655, 1656, 1658, 1659, 1670, 1675, 1676,
     1677, 1678, 1679, 1680, 1681, 1660, 1661, 1682, 1683, 1662,

     1663, 1664, 1665, 1667, 1684, 1685, 1668, 1669, 1671, 1672,
     1673, 1674, 1686, 1687, 1688, 1689, 1690, 1675, 1676, 1677,
     1678, 1679, 1680, 1681, 1691, 1692, 1682, 1683, 1693, 1694,
     1695, 1696, 2111, 1684, 1685, 1481, 1481, 1481, 1481, 1700,
     1701, 1686, 1687, 1688, 1689, 1690, 1698, 1698, 1698, 1698,
     1702, 1703, 1704, 1691, 1692, 1705, 1706, 1693, 1694, 1695,
     1696, 1699, 1699, 1699, 1699, 1707, 1709, 1710, 1700, 1701,
     1711, 1712, 1713, 1714, 1715, 1716, 1718, 1719, 1720, 1702,
     1703, 1704, 1722, 1723, 1705, 1706, 1724, 1721, 1725, 1726,
     1727, 1728, 1729, 1730, 1707, 1709, 1710, 1731, 1732, 1711,

     1712, 1713, 1714, 1715, 1716, 1718, 1719, 1720, 1733, 1734,
     1735, 1722, 1723, 1736, 1737, 1724, 1738, 1725, 1726, 1727,
     1728, 1729, 1730, 1739, 1740, 1741, 1731, 1732, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1750, 1733, 1734, 1735,
     1751, 1752, 1736, 1737, 1753, 1738, 1754, 1755, 1756, 1757,
     1758, 1759, 1739, 1740, 1741, 1760, 1761, 1742, 1743, 1744,
     1745, 1746, 1747, 1748, 1749, 1750, 1762, 1763, 1764, 1751,
     1752, 1765, 1766, 1753, 1767, 1754, 1755, 1756, 1757, 1758,
     1759, 1768, 1769, 1770, 1760, 1761, 1771, 1772, 1773, 1774,
     1775, 1776, 1777, 1778, 1779, 1762, 1763, 1764, 1780, 1781,

     1765, 1766, 1782, 1767, 1783, 1784, 1785, 1786, 1787, 1788,
     1768, 1769, 1770, 1789, 1790, 1771, 1772, 1773, 1774, 1775,
     1776, 1777, 1778, 1779, 1791, 1792, 1793, 1780, 1781, 1794,
     1795, 1782, 1796, 1783, 1784, 1785, 1786, 1787, 1788, 1797,
     1798, 1799, 1789, 1790, 1800, 1801, 1802, 1803, 1804, 1804,
     1804, 1804, 1805, 1791, 1792, 1793, 1806, 1807, 1794, 1795,
     1808, 1796, 1809, 1810, 1811, 1812, 1813, 1814, 1797, 1798,
     1799, 1815, 1816, 1800, 1801, 1802, 1803, 1817, 1818, 1819,
     1820, 1805, 1821, 1822, 1823, 1806, 1807, 1824, 1825, 1808,
     1826, 1809, 1810, 1811, 1812, 1813, 1814, 1827, 1828, 1829,

     1815, 1816, 1830, 1831, 1832, 2111, 1817, 1818, 1819, 1820,
     2111, 1821, 1822, 1823, 1835, 1836, 1824, 1825, 1837, 1826,
     1833, 1833, 1833, 1833, 1838, 1839, 1827, 1828, 1829, 1840,
     1841, 1830, 1831, 1832, 1698, 1698, 1698, 1698, 1834, 1834,
     1834, 1834, 1842, 1835, 1836, 1843, 1844, 1837, 1845, 1846,
     1847, 1848, 1849, 1838, 1839, 1850, 1851, 1852, 1840, 1841,
     1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
     1863, 1842, 1864, 1866, 1843, 1844, 1867, 1845, 1846, 1847,
     1848, 1849, 1868, 1869, 1850, 1851, 1852, 1870, 1871, 1853,
     1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,

     1872, 1864, 1866, 1873, 1874, 1867, 1875, 1877, 1878, 1879,
     1880, 1868, 1869, 1881, 1882, 1883, 1870, 1871, 1885, 1886,
     1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1896, 1872,
     1897, 1898, 1873, 1874, 1899, 1875, 1877, 1878, 1879, 1880,
     1900, 1901, 1881, 1882, 1883, 1902, 1904, 1885, 1886, 1887,
     1888, 1889, 1890, 1891, 1892, 1893, 1894, 1896, 1905, 1897,
     1898, 1906, 1907, 1899, 1804, 1804, 1804, 1804, 1908, 1900,
     1901, 1909, 1910, 1911, 1902, 1904, 1912, 1913, 1915, 1916,
     1917, 1918, 1919, 1833, 1833, 1833, 1833, 1905, 1920, 1921,
     1906, 1907, 1698, 1698, 1698, 1698, 1923, 1908, 1924, 1925,

     1909, 1910, 1911, 1926, 1927, 1912, 1913, 1915, 1916, 1917,
     1918, 1919, 1928, 1929, 1930, 1931, 1932, 1920, 1921, 1934,
     1935, 1936, 1937, 1938, 1939, 1923, 1942, 1924, 1925, 1943,
     1940, 1944, 1926, 1927, 1945, 1946, 1947, 1948, 1949, 1950,
     1951, 1928, 1929, 1930, 1931, 1932, 1941, 1952, 1934, 1935,
     1936, 1937, 1938, 1939, 1953, 1942, 1954, 1955, 1943, 1940,
     1944, 1956, 1957, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
     1960, 1958, 1961, 1962, 1963, 1941, 1952, 1964, 1965, 1966,
     1967, 1968, 1969, 1953, 1970, 1954, 1955, 1959, 1971, 1972,
     1956, 1957, 1973, 1974, 1975, 1978, 1976, 1979, 1980, 1960,

     1958, 1961, 1962, 1963, 1981, 1982, 1964, 1965, 1966, 1967,
     1968, 1969, 1977, 1970, 1983, 1984, 1959, 1971, 1972, 1985,
     1986, 1973, 1974, 1975, 1978, 1976, 1979, 1980, 1987, 1988,
     1989, 1990, 1991, 1981, 1982, 1992, 1993, 1994, 1996, 1997,
     1998, 1977, 1999, 1983, 1984, 2000, 2001, 2002, 1985, 1986,
     2003, 2004, 2005, 1995, 2006, 2007, 2008, 1987, 1988, 1989,
     1990, 1991, 2009, 2010, 1992, 1993, 1994, 1996, 1997, 1998,
     2011, 1999, 2012, 2013, 2000, 2001, 2002, 2014, 2015, 2003,
     2004, 2005, 1995, 2006, 2007, 2008, 2016, 2017, 2018, 2019,
     2020, 2009, 2010, 2021, 2022, 2023, 2024, 2025, 2026, 2011,

     2027, 2012, 2013, 2028, 2029, 2030, 2014, 2015, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2016, 2017, 2018, 2019, 2020,
     2038, 2039, 2021, 2022, 2023, 2024, 2025, 2026, 2040, 2027,
     2041, 2042, 2028, 2029, 2030, 2043, 2044, 2031, 2032, 2033,
     2034, 2035, 2036, 2037, 2045, 2046, 2047, 2048, 2049, 2038,
     2039, 2050, 2051, 2052, 2053, 2054, 2055, 2040, 2056, 2041,
     2042, 2057, 2058, 2059, 2043, 2044, 2060, 2061, 2062, 2063,
     2064, 2065, 2066, 2045, 2046, 2047, 2048, 2049, 2067, 2068,
     2050, 2051, 2052, 2053, 2054, 2055, 2069, 2056, 2070, 2071,
     2057, 2058, 2059, 2072, 2073, 2060, 2061, 2062, 2063, 2064,

     2065, 2066, 2074, 2075, 2076, 2077, 2078, 2067, 2068, 2079,
     2080, 2081, 2082, 2083, 2084, 2069, 2085, 2070, 2071, 2086,
     2087, 2088, 2072, 2073, 2089, 2090, 2091, 2092, 2093, 2094,
     2095, 2074, 2075, 2076, 2077, 2078, 2096, 2097, 2079, 2080,
     2081, 2082, 2083, 2084, 2098, 2085, 2099, 2100, 2086, 2087,
     2088, 2101, 2102, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
     2103, 2104, 2105, 2106, 2107, 2096, 2097, 2108, 2109, 2110,
     2111, 2111, 2111, 2098, 2111, 2099, 2100, 2111, 2111, 2111,
     2101, 2102, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2103,
     2104, 2105, 2106, 2107, 2111, 2111, 2108, 2109, 2110,  233,

     2111,  233,  233,  308, 2111,  308, 2111,  308,  315,  315,
      315,  315,  315,  315,  396, 2111,  396,  396,  396,  396,
      396,  396,  396,  398, 2111, 2111,  398,  398,  398, 2111,
      398,  398,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  798,  798,  798,  798,  798,  798,  798,  798,  798,
     1483, 2111, 1483, 1483, 1483, 1483, 1483, 1483, 1483,   13,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111
    } ;

static const flex_int16_t yy_chk[4744] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2118,    7,    7,    7,    7,    7,    8, 1855,    8,    8,
        8,    8,    8,    9, 1840,    9,    9,    9,    9,    9,
       10, 1825,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1810,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1796,   28,   27,   29,   28,
      115, 1781,   28,   45,  107, 1768,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   45,   30,   34,   30,   27, 1753,   31,   34,
       30,   31,   59,   30,   31,   30,   37,   31,  119,  119,
       31,   60,   36,   30,   37,  144,   36,  144,   34,   31,
       36, 1506,   30,   34,   30, 1495,   36,   31,   34,   30,
       31,   59,   30,   31,   30,   37,   31,   38,   39,   31,
       60,   36,   62,   37,   40,   36,   39,   73,   40,   36,
       39,   38,   39,   39,   39,   36,   38,   38,   46,   46,
     1435,   40,   43,   43,   87, 1424,   38,   39, 1366,   43,

       41,   62,   43,   40,   41,   39,   73,   40,   41,   39,
       38,   39,   39,   39,   41,   38,   38,   46,   46,   41,
       40,   43,   43,   87,   42,   44,   88,   44,   43,   41,
       44,   43,   90,   41,   42,  101, 1355,   41,  126,   42,
       42, 1299, 1288,   41,   50,   50,   50,   50,   41,   79,
       79,   79,   79,   42,   44,   88,   44,   65,  399,   44,
      399,   90,   79,   42,  101,   65, 1228,  126,   42,   42,
       51,   51,   51,   51,   51,   52,   52,   52,   52,   52,
       53,   55,   53, 1412,   51, 1412,   65,   53,   54,   52,
       53,   79,   54,  127,   65,   55,   54,   93,   55,   54,

       56,   55,   54,   51,   56,   93, 1224,  129,   56,   53,
       55,   53,   54,   51,   56, 1197,   53,   54,   52,   53,
     1129,   54,  127, 1125,   55,   54,   93,   55,   54,   56,
       55,   54,   51,   56,   93,   57,  129,   56,  139,   66,
     1098,   54,   61,   56,   57,   89,   57,   61,  153,   58,
       89,   57,   61,   66,   57,   89,   57,   58,   66,   66,
       58,   74,   74,   58,   57, 1032,   58,  139,   66,   58,
      155,   61, 1028,   57,   89,   57,   61,  153,   58,   89,
       57,   61,   66,   57,   89,   57,   58,   66,   66,   58,
       74,   74,   58,   64,   67,   58,   68,   64,   58,  155,

       68,   64,   67,  117,  117,  117,   67,   64,   67,   67,
       67, 1001,  937,   68,  156,  933,  906,   70,  105,  105,
      105,  105,   64,   67,  157,   68,   64,   70,  857,   68,
       64,   67,   70,   70,  154,   67,   64,   67,   67,   67,
       69,   96,   68,  156,   69,   96,   70,   72,   69,   72,
       71,   71,   72,  157,   69,  154,   70,   71,   96,   69,
       71,   70,   70,  154,  311,  311,  311,  311,  748,   69,
       96,  644,  542,   69,   96,  483,   72,   69,   72,   71,
       71,   72,  146,   69,  154,  142,   71,   96,   69,   71,
       80,  109,   80,   80,   80,   80,   80,   81,   47,   81,

       83,   82,   17,  158,   81,   82,   80,   81,   13,   82,
      102,  102,   82,    0,   83,   82,  100,   83,  100,  159,
       83,  100, 1482,   84, 1482,   82,   81,   84,   81,   83,
       82,   84,  158,   81,   82,   80,   81,   84,   82,  102,
      102,   82,   85,   83,   82,  100,   83,  100,  159,   83,
      100,   85,   84,   85,   82,   94,   84,  131,   85,   86,
       84,   85,  160,   85,   92,  131,   84,   86,   92,   94,
       86,   85,   92,   86,   94,   94,   86,    0,   92,   86,
       85,    0,   85,    0,   94,    0,  131,   85,   86,    0,
       85,  160,   85,   92,  131,    0,   86,   92,   94,   86,

       98,   92,   86,   94,   94,   86,   95,   92,   86,   97,
       98,  140,  140,   97,   95,   98,   98,   97,   95,  161,
       95,   95,   95,   97,   99,   99,  163,  165,   97,   98,
      167,   99,  169,  170,   99,   95,    0,    0,   97,   98,
      140,  140,   97,   95,   98,   98,   97,   95,  161,   95,
       95,   95,   97,   99,   99,  163,  165,   97,    0,  167,
       99,  169,  170,   99,  103,  103,  103,  103,  104,    0,
      104,  104,  104,  104,  104,  171,  120,  103,  120,  164,
        0,  122,  128,  120,  104,  121,  120,  128,  164,  121,
      172,  173,  128,  121,    0,  122,  121,  166,  122,  121,

        0,  122,  166,    0,  171,  120,  103,  120,  164,  121,
      122,  128,  120,  104,  121,  120,  128,  164,  121,  172,
      173,  128,  121,  124,  122,  121,  166,  122,  121,  123,
      122,  166,  124,  123,  124,  174,  175,  123,  121,  124,
      125,  130,  124,  123,  124,  130,    0,    0,  125,  130,
        0,  125,  124,  176,  125,  130,    0,  125,  123,  176,
      125,  124,  123,  124,  174,  175,  123,    0,  124,  125,
      130,  124,  123,  124,  130,  134,  132,  125,  130,  134,
      125,  177,  176,  125,  130,  133,  125,    0,  176,  125,
      132,  179,  134,  133,    0,  132,  132,  133,  135,  133,

      133,  133,  135,  181,  134,  132,  135,  182,  134,    0,
      177,  138,  135,  138,  133,    0,  138,  135,    0,  132,
      179,  134,  133,  136,  132,  132,  133,  135,  133,  133,
      133,  135,  181,  136,  183,  135,  182,  184,  136,  136,
      138,  135,  138,  137,  137,  138,  135,  168,  185,  168,
      137,  178,  136,  137,  168,  180,  188,  178,  189,  186,
        0,  180,  136,  183,  186,  186,  184,  136,  136,  190,
      189,  192,  137,  137,  190,  194,  168,  185,  168,  137,
      178,  195,  137,  168,  180,  188,  178,  189,  186,  191,
      180,  191,  193,  186,  186,  196,  193,  198,  190,  189,

      192,  197,  197,  190,  194,  199,  200,  201,  202,  203,
      195,  204,  196,  205,  206,  207,  208,  210,  191,  207,
      191,  193,  211,  212,  196,  193,  198,  209,  214,  209,
      197,  197,  215,  216,  199,  200,  201,  202,  203,  213,
      204,  196,  205,  206,  207,  208,  210,  213,  207,  217,
      219,  211,  212,  220,  222,  218,  209,  214,  209,  223,
      221,  215,  216,  218,  224,  225,  226,  221,  213,  221,
      224,  234,  226,    0,    0,    0,  213,    0,  217,  219,
        0,    0,  220,  222,  218,    0,    0,    0,  223,  221,
        0,    0,  218,  224,  225,  226,  221,  236,  221,  224,

      234,  226,  228,  228,  228,  228,  229,  229,  229,  229,
      230,  230,  230,  230,  230,  228,  231,  235,  231,  229,
      231,  231,  231,  231,  230,  237,  236,  238,  239,  240,
      241,  242,  244,  245,  246,  247,  248,  250,  235,  251,
      247,  252,  245,  249,  228,  249,  235,  253,  229,  254,
      249,  255,  256,  230,  237,  258,  238,  239,  240,  241,
      242,  244,  245,  246,  247,  248,  250,  235,  251,  247,
      252,  245,  249,  260,  249,  262,  253,  257,  254,  249,
      255,  256,  259,  257,  258,  261,  263,  264,  259,  265,
      266,  261,  267,  269,  271,  270,  273,  267,  267,  271,

      275,  272,  260,  272,  262,  274,  257,  270,  276,  274,
        0,  259,  257,  279,  261,  263,  264,  259,  265,  266,
      261,  267,  269,  271,  270,  273,  267,  267,  271,  275,
      272,  277,  272,  280,  274,  281,  270,  276,  274,  278,
      278,  282,  279,  283,  284,  285,  286,  287,  277,  288,
      289,  291,  290,  288,  290,  292,  293,  294,  295,  296,
      277,  297,  280,  298,  281,  294,  300,  301,  278,  278,
      282,    0,  283,  284,  285,  286,  287,  277,  288,  289,
      291,  290,  288,  290,  292,  293,  294,  295,  296,  299,
      297,  302,  298,  303,  294,  300,  301,  299,  302,  304,

      302,  305,  306,  307,  316,  318,    0,  305,    0,  307,
      309,  309,  309,  309,  393,  393,  393,  393,  299,  319,
      302,  320,  303,  309,  321,  322,  299,  302,  304,  302,
      305,  306,  307,  316,  318,  310,  305,  310,  307,  310,
      310,  310,  310,  312,  312,  312,  312,  323,  319,  317,
      320,  324,  309,  321,  322,  313,  312,  313,  313,  313,
      313,  313,  314,  326,  314,  327,  314,  314,  314,  314,
      317,  313,  328,  330,  327,  332,  323,  329,  317,  331,
      324,  331,  329,  333,  334,  312,  331,  335,  336,  337,
      338,  339,  326,  340,  327,  342,  344,  339,    0,  317,

      313,  328,  330,  327,  332,  345,  329,  346,  331,  347,
      331,  329,  333,  334,  348,  331,  335,  336,  337,  338,
      339,  341,  340,  343,  342,  344,  339,  341,  351,  343,
      352,  354,  353,  354,  345,  349,  346,  353,  347,  355,
      349,  349,  352,  348,  356,  357,  358,  361,  356,  362,
      341,  363,  343,  360,  360,  359,  341,  351,  343,  352,
      354,  353,  354,  364,  349,  365,  353,  366,  355,  349,
      349,  352,  359,  356,  357,  358,  361,  356,  362,  367,
      363,  368,  360,  360,  359,  369,  370,  371,  373,  372,
      370,  372,  364,  374,  365,  375,  366,  376,  377,  378,

      379,  359,  380,  381,  382,  376,  383,  385,  367,  386,
      368,  381,    0,  388,  369,  370,  371,  373,  372,  370,
      372,    0,  374,    0,  375,    0,  376,  377,  378,  379,
      384,  380,  381,  382,  376,  383,  385,  384,  386,  384,
      381,  387,  388,  389,  408,  410,    0,  387,    0,  389,
      390,  390,  390,  390,  392,  392,  392,  392,    0,  384,
        0,  411,  412,  390,  413,  414,  384,  392,  384,    0,
      387,    0,  389,  408,  410,  391,  387,  391,  389,  391,
      391,  391,  391,  394,    0,  394,  394,  394,  394,  394,
      411,  412,  390,  413,  414,  415,  392,  397,  395,  394,

      395,  409,  395,  395,  395,  395,  396,  396,  396,  396,
      416,  397,  397,  397,  397,  401,  401,  418,  401,  420,
      419,  421,  409,  401,  415,  422,  421,  424,  394,  419,
      409,  425,  426,  423,  401,  423,    0,  427,  401,  416,
      423,  428,  429,  430,  432,  434,  418,  431,  420,  419,
      421,  409,    0,  431,  422,  421,  424,  433,  419,  436,
      425,  426,  423,  433,  423,  401,  427,  437,  438,  423,
      428,  429,  430,  432,  434,  435,  431,  439,  440,  441,
      443,  435,  431,  444,  441,  441,  433,  447,  436,  445,
      449,  446,  433,  446,  445,  444,  437,  438,  448,  450,

      451,  453,  448,  454,  435,  455,  439,  440,  441,  443,
      435,  456,  444,  441,  441,  457,  447,  451,  445,  449,
      446,  458,  446,  445,  444,  452,  452,  448,  450,  451,
      453,  448,  454,  459,  455,  460,  461,  462,  463,  465,
      456,  462,  466,  464,  457,  464,  451,  467,  468,  469,
      458,  470,  471,  472,  452,  452,  468,  474,  475,  477,
      478,  473,  459,  480,  460,  461,  462,  463,  465,  473,
      462,  466,  464,  479,  464,  490,  467,  468,  469,  479,
      470,  471,  472,  491,  476,  468,  474,  475,  477,  478,
      473,  476,  480,  476,  481,  492,  493,  494,  473,  495,

      481,  496,  479,  497,  490,  498,  499,  500,  479,  501,
      502,  503,  491,  476,  495,  504,  505,  506,  507,  508,
      476,  510,  476,  481,  492,  493,  494,  511,  495,  481,
      496,  513,  497,  514,  498,  499,  500,  515,  501,  502,
      503,  516,  512,  495,  504,  505,  506,  507,  508,  512,
      510,  517,  518,  519,  520,  521,  511,  522,  523,  525,
      513,  526,  514,  528,  530,  527,  515,  531,  532,  533,
      516,  512,  534,  535,  536,  527,  539,  540,  512,  543,
      517,  518,  519,  520,  521,  527,  522,  523,  525,  544,
      526,  545,  528,  530,  546,  547,  531,  532,  533,  548,

      549,  534,  535,  536,  527,  539,  540,  550,  543,  551,
      552,  553,  554,  555,  527,  556,  557,  555,  544,  558,
      545,  559,  560,  546,  547,  561,  563,  564,  548,  549,
      559,  566,  567,  568,  569,  570,  550,  571,  551,  552,
      553,  554,  555,  573,  556,  557,  555,  572,  558,  572,
      559,  560,  574,  575,  561,  563,  564,  576,  577,  579,
      566,  567,  568,  569,  570,  578,  571,  580,    0,  578,
        0,    0,  573,    0,    0,    0,  572,    0,  572,    0,
        0,  574,  575,    0,    0,    0,  576,  577,  579,    0,
      582,  582,  582,  582,  578,  581,  580,  581,  578,  581,

      581,  581,  581,  582,  583,  592,  583,  593,  583,  583,
      583,  583,  584,  584,  584,  584,  585,  585,  585,  585,
      594,  595,  596,  597,  598,  599,  600,  601,  602,  603,
      604,  605,  582,  606,  592,  607,  593,  608,  597,  609,
      610,  612,  613,    0,  615,  616,  617,  618,  619,  594,
      595,  596,  597,  598,  599,  600,  601,  602,  603,  604,
      605,  620,  606,  621,  607,  614,  608,  597,  609,  610,
      612,  613,  614,  615,  616,  617,  618,  619,  622,  623,
      624,  625,  627,  628,  630,  629,  632,  633,  634,  635,
      620,  636,  621,  637,  614,  629,  638,  641,  642,  645,

      646,  614,  647,  648,  649,  629,  650,  622,  623,  624,
      625,  627,  628,  630,  651,  632,  633,  634,  635,  652,
      636,  653,  637,  654,  629,  638,  641,  642,  645,  646,
      655,  647,  648,  649,  629,  650,  656,  657,  658,  659,
      660,  657,  661,  651,  662,  663,  665,  666,  652,  668,
      653,  661,  654,  669,  670,  671,  672,  673,  674,  655,
      674,  675,  676,  677,  678,  656,  657,  658,  659,  660,
      657,  661,  679,  662,  663,  665,  666,  680,  668,  681,
      682,  680,  669,  670,  671,  672,  673,  674,    0,  674,
      675,  676,  677,  678,  683,  683,  683,  683,    0,    0,

        0,  679,  684,  684,  684,  684,  680,    0,  681,  682,
      680,  685,  685,  685,  685,  686,  686,  686,  686,  687,
      696,  687,  697,  687,  687,  687,  687,  688,  686,  688,
      688,  688,  688,  688,  689,  689,  689,  689,  690,  690,
      690,  690,  698,  688,  699,  700,  701,  702,  703,  696,
      704,  697,  705,  706,  707,  708,  709,  686,  710,  711,
      712,  701,  713,  714,  716,  717,    0,  719,  720,  721,
      722,  698,  688,  699,  700,  701,  702,  703,  723,  704,
      724,  705,  706,  707,  708,  709,  725,  710,  711,  712,
      701,  713,  714,  716,  717,  718,  719,  720,  721,  722,

      726,  727,  718,  728,  729,  731,  732,  723,  733,  724,
      734,  736,  737,  738,  739,  725,  740,  741,  733,  742,
      745,  746,  749,  750,  718,  751,  752,  753,  733,  726,
      727,  718,  728,  729,  731,  732,  754,  755,  756,  734,
      736,  737,  738,  739,  757,  740,  741,  733,  742,  745,
      746,  749,  750,  758,  751,  752,  753,  733,  759,  760,
      761,  762,  763,  764,  761,  754,  755,  756,  765,  766,
      767,  769,  770,  757,  772,  773,  774,  765,  775,  776,
      777,  778,  758,  778,  779,  780,  781,  759,  760,  761,
      762,  763,  764,  761,  782,  783,  785,  765,  766,  767,

      769,  770,  784,  772,  773,  774,  784,  775,  776,  777,
      778,  786,  778,  779,  780,  781,  787,  787,  787,  787,
        0,    0,    0,  782,  783,  785,  788,  788,  788,  788,
        0,  784,    0,    0,    0,  784,  789,  789,  789,  789,
      786,  790,    0,  790,    0,  790,  790,  790,  790,  789,
      791,  791,  791,  791,  792,    0,  792,  792,  792,  792,
      792,  793,  793,  793,  793,  794,  794,  794,  794,  795,
      792,  796,  796,  796,  796,  797,  805,  806,  789,  798,
      798,  807,  798,  795,  795,  795,  795,  798,  808,  797,
      797,  797,  797,  809,  810,  811,  812,  813,  798,  792,

        0,  814,  798,  815,  816,  805,  806,  817,  818,  810,
      807,  819,  820,  821,  822,  823,  825,  808,  826,  828,
      827,  829,  809,  810,  811,  812,  813,  827,  830,  798,
      814,  831,  815,  816,  832,  833,  817,  818,  810,  834,
      819,  820,  821,  822,  823,  825,  835,  826,  828,  827,
      829,  836,  837,  838,  840,  841,  827,  830,  843,  842,
      831,  845,  846,  832,  833,  847,  848,  849,  834,  842,
      850,  851,  854,  855,  858,  835,  859,  860,  861,  842,
      836,  837,  838,  840,  841,  862,  863,  843,  864,  865,
      845,  846,  866,  867,  847,  848,  849,  868,  842,  850,

      851,  854,  855,  858,  869,  859,  860,  861,  842,  870,
      871,  872,  873,  870,  862,  863,  874,  864,  865,  875,
      876,  866,  867,  878,  879,  874,  868,  881,  882,  883,
      884,  885,  886,  869,  887,  888,  887,  889,  870,  871,
      872,  873,  870,  890,  891,  874,  892,  893,  875,  876,
      894,  893,  878,  879,  895,  896,  881,  882,  883,  884,
      885,  886,  897,  887,  888,  887,  889,  898,  900,  903,
      904,  905,  890,  891,  907,  892,  893,  909,  910,  894,
      893,  912,  913,  895,  896,  914,  916,  917,  918,  919,
      920,  897,  921,  922,  923,  924,  898,  900,  903,  904,

      905,  925,  926,  907,  929,  930,  909,  910,  931,  932,
      912,  913,  941,  943,  914,  916,  917,  918,  919,  920,
      944,  921,  922,  923,  924,  934,  945,  946,  947,  948,
      925,  926,  949,  929,  930,  951,  934,  931,  932,  952,
      953,  941,  943,  955,  956,  957,  958,  959,  962,  944,
      963,  965,  966,  967,  934,  945,  946,  947,  948,  969,
      972,  949,  973,  975,  951,  934,  976,  977,  952,  953,
      978,  979,  955,  956,  957,  958,  959,  962,  980,  963,
      965,  966,  967,  981,  982,  984,  985,    0,  969,  972,
        0,  973,  975,    0,    0,  976,  977,  991,  992,  978,

      979,  987,  987,  987,  987,  993,  995,  980,  988,  988,
      988,  988,  981,  982,  984,  985,  989,  989,  989,  989,
      990,  990,  990,  990,  998,  999,  991,  992, 1000, 1002,
     1004, 1005, 1007, 1008,  993,  995, 1009, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025,
     1026, 1027, 1029,  998,  999, 1036, 1038, 1000, 1002, 1004,
     1005, 1007, 1008, 1029, 1039, 1009, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026,
     1027, 1029, 1040, 1041, 1036, 1038, 1042, 1043, 1044, 1046,
     1047, 1048, 1029, 1039, 1050, 1051, 1052, 1053, 1054, 1057,

     1058, 1060, 1061, 1062, 1064, 1067, 1068, 1070, 1071, 1072,
     1073, 1040, 1041, 1074, 1075, 1042, 1043, 1044, 1046, 1047,
     1048, 1076, 1077, 1050, 1051, 1052, 1053, 1054, 1057, 1058,
     1060, 1061, 1062, 1064, 1067, 1068, 1070, 1071, 1072, 1073,
     1079, 1080, 1074, 1075, 1082, 1082, 1082, 1082, 1088,    0,
     1076, 1077, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084,
     1085, 1085, 1085, 1085, 1086, 1086, 1086, 1086, 1086, 1079,
     1080, 1087, 1087, 1087, 1087, 1089, 1090, 1088, 1086, 1092,
     1095, 1096, 1097, 1099, 1101, 1102, 1104, 1105, 1106, 1108,
     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,

     1121, 1122, 1123, 1124, 1089, 1090, 1133, 1086, 1092, 1095,
     1096, 1097, 1099, 1101, 1102, 1104, 1105, 1106, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121,
     1122, 1123, 1124, 1126, 1135, 1133, 1136, 1137, 1138, 1139,
     1140, 1141, 1143, 1144, 1126, 1145, 1147, 1148, 1149, 1150,
     1151, 1154, 1155, 1157, 1158, 1159, 1161, 1164, 1165, 1167,
     1168, 1169, 1126, 1135, 1170, 1136, 1137, 1138, 1139, 1140,
     1141, 1143, 1144, 1126, 1145, 1147, 1148, 1149, 1150, 1151,
     1154, 1155, 1157, 1158, 1159, 1161, 1164, 1165, 1167, 1168,
     1169, 1171, 1172, 1170, 1173, 1174, 1176, 1177, 1179, 1179,

     1179, 1179, 1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181,
     1182, 1182, 1182, 1182, 1184, 1184, 1184, 1184, 1187, 1188,
     1171, 1172, 1189, 1173, 1174, 1176, 1177, 1183, 1191, 1194,
     1183, 1183, 1183, 1183, 1185, 1185, 1185, 1185, 1186, 1195,
     1196, 1198, 1200, 1183, 1201, 1203, 1204, 1187, 1188, 1205,
     1207, 1189, 1186, 1186, 1186, 1186, 1208, 1191, 1194, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1195, 1196,
     1198, 1200, 1183, 1201, 1203, 1204, 1220, 1221, 1205, 1207,
     1222, 1223, 1232, 1234, 1235, 1208, 1225, 1236, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1225, 1237, 1238,

     1239, 1240, 1242, 1243, 1244, 1220, 1221, 1246, 1247, 1222,
     1223, 1232, 1234, 1235, 1248, 1225, 1236, 1249, 1250, 1253,
     1254, 1256, 1257, 1258, 1260, 1263, 1225, 1237, 1238, 1239,
     1240, 1242, 1243, 1244, 1264, 1266, 1246, 1247, 1267, 1268,
     1269, 1270, 1271, 1248, 1272, 1273, 1249, 1250, 1253, 1254,
     1256, 1257, 1258, 1260, 1263, 1275, 1276, 1278, 1279, 1280,
     1281, 1282, 1285, 1264, 1266, 1286, 1287, 1267, 1268, 1269,
     1270, 1271, 1289, 1272, 1273, 1290, 1291, 1292, 1294, 1295,
     1296, 1298, 1301, 1302, 1275, 1276, 1278, 1279, 1280, 1281,
     1282, 1285, 1304, 1303, 1286, 1287, 1306, 1308, 1309, 1310,

     1313, 1289, 1303, 1314, 1290, 1291, 1292, 1294, 1295, 1296,
     1298, 1301, 1302, 1315, 1318, 1320, 1322, 1323, 1324, 1325,
     1327, 1304, 1303, 1329, 1331, 1306, 1308, 1309, 1310, 1313,
     1332, 1333, 1314, 1335, 1337, 1338, 1339, 1341, 1342, 1344,
     1345, 1346, 1315, 1318, 1320, 1322, 1323, 1324, 1325, 1327,
     1347, 1348, 1329, 1331, 1349, 1352, 1353, 1354, 1356, 1332,
     1333, 1357, 1335, 1337, 1338, 1339, 1341, 1342, 1344, 1345,
     1346, 1358, 1359, 1361, 1362, 1363, 1365, 1368, 1369, 1347,
     1348, 1371, 1370, 1349, 1352, 1353, 1354, 1356, 1373, 1375,
     1357, 1370, 1376, 1377, 1380, 1381, 1382, 1385, 1387, 1389,

     1358, 1359, 1361, 1362, 1363, 1365, 1368, 1369, 1390, 1391,
     1371, 1370, 1392, 1394, 1396, 1398, 1399, 1373, 1375, 1400,
     1402, 1376, 1377, 1380, 1381, 1382, 1385, 1387, 1389, 1404,
     1405, 1406, 1408, 1409, 1411, 1414, 1415, 1390, 1391, 1416,
     1417, 1392, 1394, 1396, 1398, 1399, 1418, 1421, 1400, 1402,
     1413, 1413, 1413, 1413, 1422, 1423, 1425, 1426, 1404, 1405,
     1406, 1408, 1409, 1411, 1414, 1415, 1427, 1428, 1416, 1417,
     1430, 1431, 1432, 1434, 1437, 1418, 1421, 1438, 1439, 1440,
     1442, 1444, 1445, 1422, 1423, 1425, 1426, 1439, 1446, 1449,
     1450, 1451, 1454, 1456, 1458, 1427, 1428, 1459, 1460, 1430,

     1431, 1432, 1434, 1437, 1461, 1463, 1438, 1439, 1440, 1442,
     1444, 1445, 1465, 1467, 1468, 1469, 1471, 1446, 1449, 1450,
     1451, 1454, 1456, 1458, 1473, 1474, 1459, 1460, 1475, 1477,
     1478, 1480,    0, 1461, 1463, 1481, 1481, 1481, 1481, 1485,
     1486, 1465, 1467, 1468, 1469, 1471, 1483, 1483, 1483, 1483,
     1487, 1488, 1489, 1473, 1474, 1492, 1493, 1475, 1477, 1478,
     1480, 1484, 1484, 1484, 1484, 1494, 1496, 1497, 1485, 1486,
     1498, 1499, 1501, 1502, 1503, 1505, 1508, 1509, 1510, 1487,
     1488, 1489, 1511, 1513, 1492, 1493, 1515, 1510, 1516, 1517,
     1520, 1521, 1522, 1525, 1494, 1496, 1497, 1527, 1529, 1498,

     1499, 1501, 1502, 1503, 1505, 1508, 1509, 1510, 1530, 1531,
     1532, 1511, 1513, 1534, 1536, 1515, 1538, 1516, 1517, 1520,
     1521, 1522, 1525, 1539, 1540, 1542, 1527, 1529, 1544, 1545,
     1546, 1548, 1549, 1551, 1552, 1553, 1555, 1530, 1531, 1532,
     1556, 1557, 1534, 1536, 1558, 1538, 1560, 1561, 1563, 1566,
     1569, 1570, 1539, 1540, 1542, 1571, 1573, 1544, 1545, 1546,
     1548, 1549, 1551, 1552, 1553, 1555, 1576, 1577, 1578, 1556,
     1557, 1579, 1581, 1558, 1584, 1560, 1561, 1563, 1566, 1569,
     1570, 1585, 1587, 1588, 1571, 1573, 1589, 1592, 1593, 1595,
     1598, 1600, 1601, 1603, 1604, 1576, 1577, 1578, 1605, 1606,

     1579, 1581, 1608, 1584, 1609, 1611, 1614, 1617, 1618, 1619,
     1585, 1587, 1588, 1621, 1624, 1589, 1592, 1593, 1595, 1598,
     1600, 1601, 1603, 1604, 1625, 1626, 1627, 1605, 1606, 1629,
     1632, 1608, 1633, 1609, 1611, 1614, 1617, 1618, 1619, 1635,
     1636, 1637, 1621, 1624, 1640, 1641, 1643, 1646, 1648, 1648,
     1648, 1648, 1649, 1625, 1626, 1627, 1650, 1652, 1629, 1632,
     1653, 1633, 1654, 1655, 1657, 1658, 1660, 1663, 1635, 1636,
     1637, 1666, 1667, 1640, 1641, 1643, 1646, 1668, 1670, 1673,
     1674, 1649, 1675, 1676, 1678, 1650, 1652, 1681, 1682, 1653,
     1684, 1654, 1655, 1657, 1658, 1660, 1663, 1685, 1686, 1689,

     1666, 1667, 1690, 1692, 1695,    0, 1668, 1670, 1673, 1674,
        0, 1675, 1676, 1678, 1700, 1701, 1681, 1682, 1703, 1684,
     1697, 1697, 1697, 1697, 1704, 1705, 1685, 1686, 1689, 1706,
     1708, 1690, 1692, 1695, 1698, 1698, 1698, 1698, 1699, 1699,
     1699, 1699, 1709, 1700, 1701, 1711, 1714, 1703, 1717, 1718,
     1719, 1721, 1724, 1704, 1705, 1725, 1726, 1727, 1706, 1708,
     1729, 1732, 1733, 1735, 1736, 1737, 1740, 1741, 1743, 1746,
     1748, 1709, 1752, 1754, 1711, 1714, 1755, 1717, 1718, 1719,
     1721, 1724, 1756, 1758, 1725, 1726, 1727, 1759, 1761, 1729,
     1732, 1733, 1735, 1736, 1737, 1740, 1741, 1743, 1746, 1748,

     1763, 1752, 1754, 1764, 1766, 1755, 1767, 1769, 1770, 1771,
     1772, 1756, 1758, 1773, 1776, 1780, 1759, 1761, 1782, 1783,
     1784, 1786, 1787, 1789, 1791, 1792, 1794, 1795, 1797, 1763,
     1798, 1799, 1764, 1766, 1800, 1767, 1769, 1770, 1771, 1772,
     1801, 1805, 1773, 1776, 1780, 1809, 1811, 1782, 1783, 1784,
     1786, 1787, 1789, 1791, 1792, 1794, 1795, 1797, 1812, 1798,
     1799, 1813, 1815, 1800, 1804, 1804, 1804, 1804, 1816, 1801,
     1805, 1818, 1820, 1821, 1809, 1811, 1823, 1824, 1826, 1827,
     1828, 1829, 1830, 1833, 1833, 1833, 1833, 1812, 1835, 1839,
     1813, 1815, 1834, 1834, 1834, 1834, 1841, 1816, 1842, 1843,

     1818, 1820, 1821, 1845, 1846, 1823, 1824, 1826, 1827, 1828,
     1829, 1830, 1848, 1850, 1851, 1853, 1854, 1835, 1839, 1856,
     1857, 1858, 1859, 1860, 1864, 1841, 1866, 1842, 1843, 1868,
     1865, 1869, 1845, 1846, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1848, 1850, 1851, 1853, 1854, 1865, 1877, 1856, 1857,
     1858, 1859, 1860, 1864, 1878, 1866, 1879, 1880, 1868, 1865,
     1869, 1881, 1883, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
     1885, 1884, 1887, 1888, 1889, 1865, 1877, 1890, 1891, 1892,
     1893, 1894, 1895, 1878, 1896, 1879, 1880, 1884, 1897, 1898,
     1881, 1883, 1899, 1900, 1902, 1904, 1903, 1906, 1907, 1885,

     1884, 1887, 1888, 1889, 1908, 1909, 1890, 1891, 1892, 1893,
     1894, 1895, 1903, 1896, 1910, 1911, 1884, 1897, 1898, 1912,
     1913, 1899, 1900, 1902, 1904, 1903, 1906, 1907, 1914, 1915,
     1916, 1917, 1918, 1908, 1909, 1919, 1921, 1922, 1923, 1925,
     1926, 1903, 1927, 1910, 1911, 1928, 1929, 1930, 1912, 1913,
     1931, 1932, 1933, 1922, 1934, 1935, 1936, 1914, 1915, 1916,
     1917, 1918, 1937, 1938, 1919, 1921, 1922, 1923, 1925, 1926,
     1940, 1927, 1941, 1942, 1928, 1929, 1930, 1943, 1944, 1931,
     1932, 1933, 1922, 1934, 1935, 1936, 1946, 1948, 1951, 1954,
     1958, 1937, 1938, 1959, 1960, 1961, 1962, 1964, 1966, 1940,

     1969, 1941, 1942, 1972, 1976, 1977, 1943, 1944, 1978, 1979,
     1980, 1982, 1984, 1987, 1990, 1946, 1948, 1951, 1954, 1958,
     1994, 1995, 1959, 1960, 1961, 1962, 1964, 1966, 1996, 1969,
     1997, 1998, 1972, 1976, 1977, 2000, 2002, 1978, 1979, 1980,
     1982, 1984, 1987, 1990, 2005, 2008, 2011, 2012, 2014, 1994,
     1995, 2015, 2016, 2018, 2020, 2021, 2023, 1996, 2024, 1997,
     1998, 2025, 2027, 2029, 2000, 2002, 2030, 2032, 2033, 2034,
     2036, 2038, 2039, 2005, 2008, 2011, 2012, 2014, 2041, 2042,
     2015, 2016, 2018, 2020, 2021, 2023, 2043, 2024, 2045, 2047,
     2025, 2027, 2029, 2048, 2049, 2030, 2032, 2033, 2034, 2036,

     2038, 2039, 2051, 2052, 2053, 2054, 2055, 2041, 2042, 2057,
     2058, 2059, 2060, 2061, 2063, 2043, 2064, 2045, 2047, 2065,
     2066, 2067, 2048, 2049, 2069, 2070, 2072, 2077, 2082, 2087,
     2091, 2051, 2052, 2053, 2054, 2055, 2092, 2093, 2057, 2058,
     2059, 2060, 2061, 2063, 2094, 2064, 2095, 2096, 2065, 2066,
     2067, 2097, 2098, 2069, 2070, 2072, 2077, 2082, 2087, 2091,
     2099, 2100, 2101, 2102, 2103, 2092, 2093, 2104, 2105, 2106,
        0,    0,    0, 2094,    0, 2095, 2096,    0,    0,    0,
     2097, 2098,    0,    0,    0,    0,    0,    0,    0, 2099,
     2100, 2101, 2102, 2103,    0,    0, 2104, 2105, 2106, 2112,

        0, 2112, 2112, 2113,    0, 2113,    0, 2113, 2114, 2114,
     2114, 2114, 2114, 2114, 2115,    0, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2116,    0,    0, 2116, 2116, 2116,    0,
     2116, 2116, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2117, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2120,    0, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,

     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2111, 2111, 2111
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2112 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2111 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP_CONCAT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUPS);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TOTAL);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 127:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 144:
case 145:
case 146:
case 147:
case 148:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
case 154:
case 155:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 156:
case 157:
case 158:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 159:
case 160:
case 161:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 162:
case 163:
case 164:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 174:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 177:
YY_RULE_SETUP
{}
	YY_BREAK
case 178:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 180:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2112 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2112 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2111);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

