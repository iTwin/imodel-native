#line 3 "E:\\BSW\\Bim0200Dev\\src\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














    #define yy_create_buffer SQLyy_create_buffer

    #define yy_delete_buffer SQLyy_delete_buffer

    #define yy_scan_buffer SQLyy_scan_buffer

    #define yy_scan_string SQLyy_scan_string

    #define yy_scan_bytes SQLyy_scan_bytes

    #define yy_init_buffer SQLyy_init_buffer

    #define yy_flush_buffer SQLyy_flush_buffer

    #define yy_load_buffer_state SQLyy_load_buffer_state

    #define yy_switch_to_buffer SQLyy_switch_to_buffer

    #define yypush_buffer_state SQLyypush_buffer_state

    #define yypop_buffer_state SQLyypop_buffer_state

    #define yyensure_buffer_stack SQLyyensure_buffer_stack

    #define yylex SQLyylex

    #define yyrestart SQLyyrestart

    #define yylex_init SQLyylex_init

    #define yylex_init_extra SQLyylex_init_extra

    #define yylex_destroy SQLyylex_destroy

    #define yyget_debug SQLyyget_debug

    #define yyset_debug SQLyyset_debug

    #define yyget_extra SQLyyget_extra

    #define yyset_extra SQLyyset_extra

    #define yyget_in SQLyyget_in

    #define yyset_in SQLyyset_in

    #define yyget_out SQLyyget_out

    #define yyset_out SQLyyset_out

    #define yyget_leng SQLyyget_leng

    #define yyget_text SQLyyget_text

    #define yyget_lineno SQLyyget_lineno

    #define yyset_lineno SQLyyset_lineno

    
        #define yyget_column SQLyyget_column

        #define yyset_column SQLyyset_column

    
    #define yywrap SQLyywrap



    #define yyget_lval SQLyyget_lval

    #define yyset_lval SQLyyset_lval






    #define yyalloc SQLyyalloc

    #define yyrealloc SQLyyrealloc

    #define yyfree SQLyyfree







/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */



/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void SQLyyrestart ( FILE *input_file , yyscan_t yyscanner );
void SQLyy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void SQLyy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void SQLyy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void SQLyypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void SQLyypop_buffer_state ( yyscan_t yyscanner );


static void SQLyyensure_buffer_stack ( yyscan_t yyscanner );
static void SQLyy_load_buffer_state ( yyscan_t yyscanner );
static void SQLyy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)


YY_BUFFER_STATE SQLyy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE SQLyy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *SQLyyalloc ( yy_size_t , yyscan_t yyscanner );
void *SQLyyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void SQLyyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer SQLyy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2564] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      188,  188,  194,  192,  190,  189,  192,  153,  181,  153,
      145,  147,  146,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  153,  179,  153,  155,  155,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  182,  180,  183,  153,  153,  163,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      162,  162,  153,  163,  192,  188,  188,  188,  188,  186,
      153,  153,  153,  153,  145,  147,  146,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  187,
      153,  190,  151,    0,  148,  150,  149,    0,    0,    5,
        0,    0,    0,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   65,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   89,    0,    0,    0,    0,   98,  100,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  152,  157,    0,  158,
      155,    0,    0,  154,  154,  154,    5,  154,  154,  154,
      154,  154,  154,   14,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,   65,
       72,  154,  154,  154,  154,  154,  154,  154,  154,  154,
       89,  154,  154,  154,  154,   98,  100,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  178,  168,  178,  178,  178,  163,  178,
      162,  162,  162,    5,  162,  162,  162,  162,  162,  162,
       14,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,   65,   72,  162,  162,
      162,  162,  162,  162,  162,  162,  162,   89,  162,  162,
      162,  162,   98,  100,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      174,  178,  178,  178,  163,  178,    0,  184,  188,  188,
      151,  188,  148,  150,  149,  188,  188,    5,  188,  188,
      188,  188,  188,  188,   14,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       65,   72,  188,  188,  188,  188,  188,  188,  188,  188,
      188,   89,  188,  188,  188,  188,   98,  100,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  152,    0,  191,    1,    0,    3,

        4,    6,    7,    0,    0,    0,   11,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,    0,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,   83,   85,    0,
        0,   90,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,    0,    0,  118,    0,    0,    0,  121,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  161,  158,
        0,    0,  159,  156,    1,  154,    3,    4,    6,    7,
      154,  154,  154,   11,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,   35,  154,  154,  154,  154,
      154,  154,  154,   43,  154,  154,  154,  154,  154,  154,
      154,  154,  154,   55,  154,  154,  154,  154,  154,  154,
      154,  154,  154,   68,  154,   74,  154,  154,  154,  154,
      154,  154,  154,  154,   83,   85,  154,  154,   90,   91,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  112,  154,

      154,  118,  154,  154,  154,  121,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,    0,  171,  178,  166,  178,  163,
        0,  169,    1,  162,    3,    4,    6,    7,  162,  162,
      162,   11,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,   35,  162,  162,  162,  162,  162,  162,
      162,   43,  162,  162,  162,  162,  162,  162,  162,  162,
      162,   55,  162,  162,  162,  162,  162,  162,  162,  162,
      162,   68,  162,   74,  162,  162,  162,  162,  162,  162,
      162,  162,   83,   85,  162,  162,   90,   91,  162,  162,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  112,  162,  162,  118,
      162,  162,  162,  121,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,    0,  177,  172,  178,  178,  163,    0,  175,
      184,    0,  184,  188,  188,    1,  188,    3,    4,    6,
        7,  188,  188,  188,   11,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,   35,  188,  188,  188,
      188,  188,  188,  188,   43,  188,  188,  188,  188,  188,
      188,  188,  188,  188,   55,  188,  188,  188,  188,  188,

      188,  188,  188,  188,   68,  188,   74,  188,  188,  188,
      188,  188,  188,  188,  188,   83,   85,  188,  188,   90,
       91,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  112,
      188,  188,  118,  188,  188,  188,  121,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,    0,    0,    0,    0,    0,
       13,    0,   15,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,    0,    0,   38,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   59,   60,    0,    0,   63,    0,    0,
        0,    0,    0,   71,   73,   75,   77,   78,   79,    0,
       81,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   99,    0,    0,    0,  104,    0,    0,    0,    0,
      109,    0,    0,    0,  113,    0,    0,    0,  119,    0,
        0,  123,  124,    0,    0,  127,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  138,  139,    0,  141,  143,
      144,    0,  160,  154,  154,  154,  154,  154,   13,  154,
       15,   16,  154,  154,  154,  154,  154,  154,  154,  154,
      154,   33,  154,  154,   38,  154,  154,  154,   42,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,   59,   60,  154,  154,   63,  154,  154,  154,  154,
      154,   71,   73,   75,   77,   78,   79,  154,   81,  154,
      154,  154,  154,  154,  154,  154,   94,  154,  154,   99,
      154,  154,  154,  104,  154,  154,  154,  154,  109,  154,
      154,  154,  113,  154,  154,  154,  119,  154,  154,  123,
      124,  154,  154,  127,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  138,  139,  154,  141,  143,  144,  171,
      178,    0,  170,  163,  169,  162,  162,  162,  162,  162,
       13,  162,   15,   16,  162,  162,  162,  162,  162,  162,

      162,  162,  162,   33,  162,  162,   38,  162,  162,  162,
       42,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,   59,   60,  162,  162,   63,  162,  162,
      162,  162,  162,   71,   73,   75,   77,   78,   79,  162,
       81,  162,  162,  162,  162,  162,  162,  162,   94,  162,
      162,   99,  162,  162,  162,  104,  162,  162,  162,  162,
      109,  162,  162,  162,  113,  162,  162,  162,  119,  162,
      162,  123,  124,  162,  162,  127,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  138,  139,  162,  141,  143,
      144,  177,    0,  176,  178,  163,  175,    0,  184,  188,

      188,  188,  188,  188,   13,  188,   15,   16,  188,  188,
      188,  188,  188,  188,  188,  188,  188,   33,  188,  188,
       38,  188,  188,  188,   42,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,   59,   60,  188,
      188,   63,  188,  188,  188,  188,  188,   71,   73,   75,
       77,   78,   79,  188,   81,  188,  188,  188,  188,  188,
      188,  188,   94,  188,  188,   99,  188,  188,  188,  104,
      188,  188,  188,  188,  109,  188,  188,  188,  113,  188,
      188,  188,  119,  188,  188,  123,  124,  188,  188,  127,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  138,

      139,  188,  141,  143,  144,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   44,    0,
        0,    0,    0,   50,   51,   53,    0,    0,   58,   61,
        0,    0,   66,    0,   69,    0,    0,    0,   80,   82,
       84,    0,   87,    0,    0,   93,   95,    0,    0,  101,
        0,  103,    0,    0,    0,  108,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
        0,  133,  134,  136,    0,  140,    0,    2,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,   21,   22,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
       44,  154,  154,  154,  154,   50,   51,   53,  154,  154,
       58,   61,  154,  154,   66,  154,   69,  154,  154,  154,
       80,   82,   84,  154,   87,  154,  154,   93,   95,  154,
      154,  101,  154,  103,  154,  154,  154,  108,  154,  115,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  129,
      154,  154,  154,  133,  134,  136,  154,  140,  154,  164,
      170,    2,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,   21,   22,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,   44,  162,  162,  162,  162,   50,

       51,   53,  162,  162,   58,   61,  162,  162,   66,  162,
       69,  162,  162,  162,   80,   82,   84,  162,   87,  162,
      162,   93,   95,  162,  162,  101,  162,  103,  162,  162,
      162,  108,  162,  115,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  129,  162,  162,  162,  133,  134,  136,
      162,  140,  162,  176,  165,    0,  185,    2,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   21,   22,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       44,  188,  188,  188,  188,   50,   51,   53,  188,  188,
       58,   61,  188,  188,   66,  188,   69,  188,  188,  188,

       80,   82,   84,  188,   87,  188,  188,   93,   95,  188,
      188,  101,  188,  103,  188,  188,  188,  108,  188,  115,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  129,
      188,  188,  188,  133,  134,  136,  188,  140,  188,    0,
        0,   10,    0,    0,    0,    0,    0,   19,    0,    0,
        0,   32,    0,    0,   37,    0,   40,    0,   45,   46,
        0,   48,    0,    0,    0,    0,   62,   64,   67,    0,
        0,    0,   86,    0,    0,    0,   97,  102,    0,    0,
        0,    0,    0,    0,  116,  117,  122,    0,    0,    0,
        0,  130,    0,  132,  137,    0,  142,  154,  154,   10,

      154,  154,  154,  154,  154,   19,  154,  154,  154,   32,
      154,  154,   37,  154,   40,  154,   45,   46,  154,   48,
      154,  154,  154,  154,   62,   64,   67,  154,  154,  154,
       86,  154,  154,  154,   97,  102,  154,  154,  154,  154,
      154,  154,  116,  117,  122,  154,  154,  154,  154,  130,
      154,  132,  137,  154,  142,  178,  162,  162,   10,  162,
      162,  162,  162,  162,   19,  162,  162,  162,   32,  162,
      162,   37,  162,   40,  162,   45,   46,  162,   48,  162,
      162,  162,  162,   62,   64,   67,  162,  162,  162,   86,
      162,  162,  162,   97,  102,  162,  162,  162,  162,  162,

      162,  116,  117,  122,  162,  162,  162,  162,  130,  162,
      132,  137,  162,  142,  178,  185,  185,  188,  188,   10,
      188,  188,  188,  188,  188,   19,  188,  188,  188,   32,
      188,  188,   37,  188,   40,  188,   45,   46,  188,   48,
      188,  188,  188,  188,   62,   64,   67,  188,  188,  188,
       86,  188,  188,  188,   97,  102,  188,  188,  188,  188,
      188,  188,  116,  117,  122,  188,  188,  188,  188,  130,
      188,  132,  137,  188,  142,    0,    8,    0,    9,    0,
        0,   18,   20,   30,   23,    0,   36,    0,    0,   47,
       49,    0,    0,   56,   68,    0,    0,   88,    0,    0,

        0,    0,    0,  110,    0,    0,    0,    0,    0,    0,
      131,  135,  154,    8,  154,    9,  154,  154,   18,   20,
       30,   23,  154,   36,  154,  154,   47,   49,  154,  154,
       56,   68,  154,  154,   88,  154,  154,  154,  154,  154,
      110,  154,  154,  154,  154,  154,  154,  131,  135,  167,
      162,    8,  162,    9,  162,  162,   18,   20,   30,   23,
      162,   36,  162,  162,   47,   49,  162,  162,   56,   68,
      162,  162,   88,  162,  162,  162,  162,  162,  110,  162,
      162,  162,  162,  162,  162,  131,  135,  173,  185,  188,
        8,  188,    9,  188,  188,   18,   20,   30,   23,  188,

       36,  188,  188,   47,   49,  188,  188,   56,   68,  188,
      188,   88,  188,  188,  188,  188,  188,  110,  188,  188,
      188,  188,  188,  188,  131,  135,   57,    0,    0,    0,
        0,   34,   39,    0,    0,    0,    0,    0,    0,    0,
        0,  106,    0,  111,    0,    0,    0,    0,    0,   57,
      154,  154,  154,  154,   34,   39,  154,  154,  154,  154,
      154,  154,  154,  154,  106,  154,  111,  154,  154,  154,
      154,  154,   57,  162,  162,  162,  162,   34,   39,  162,
      162,  162,  162,  162,  162,  162,  162,  106,  162,  111,
      162,  162,  162,  162,  162,   57,  188,  188,  188,  188,

       34,   39,  188,  188,  188,  188,  188,  188,  188,  188,
      106,  188,  111,  188,  188,  188,  188,  188,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
       70,    0,   92,    0,  105,  107,    0,  120,  125,  126,
      128,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,   54,   70,  154,   92,  154,  105,  107,  154,
      120,  125,  126,  128,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,   54,   70,  162,   92,  162,
      105,  107,  162,  120,  125,  126,  128,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   54,   70,

      188,   92,  188,  105,  107,  188,  120,  125,  126,  128,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   76,    0,  114,   12,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,   76,  154,  114,   12,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,   76,
      162,  114,   12,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,   76,  188,  114,   17,    0,    0,    0,
        0,    0,    0,    0,    0,   52,    0,   17,  154,  154,
      154,  154,  154,  154,  154,  154,   52,  154,   17,  162,
      162,  162,  162,  162,  162,  162,  162,   52,  162,   17,

      188,  188,  188,  188,  188,  188,  188,  188,   52,  188,
        0,   24,    0,   27,   28,    0,    0,   41,   96,  154,
       24,  154,   27,   28,  154,  154,   41,   96,  162,   24,
      162,   27,   28,  162,  162,   41,   96,  188,   24,  188,
       27,   28,  188,  188,   41,   96,    0,    0,    0,    0,
      154,  154,  154,  154,  162,  162,  162,  162,  188,  188,
      188,  188,    0,    0,   29,    0,  154,  154,   29,  154,
      162,  162,   29,  162,  188,  188,   29,  188,   25,    0,
        0,   25,  154,  154,   25,  162,  162,   25,  188,  188,
        0,    0,  154,  154,  162,  162,  188,  188,    0,   31,

      154,   31,  162,   31,  188,   31,    0,  154,  162,  188,
        0,  154,  162,  188,    0,  154,  162,  188,    0,  154,
      162,  188,    0,  154,  162,  188,    0,  154,  162,  188,
        0,  154,  162,  188,    0,  154,  162,  188,    0,  154,
      162,  188,    0,  154,  162,  188,    0,  154,  162,  188,
        0,  154,  162,  188,    0,  154,  162,  188,   26,   26,
       26,   26,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   11,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   51,   11,   80,   11,    9,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    3,    8,    1,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        9
    } ;

static const flex_int16_t yy_base[2573] =
    {   0,
        0,    0,   81,    0,  162,    0,  230,  237,  244,  251,
      271,    0,  837, 5604,  351, 5604,  808, 5604, 5604,  802,
      333, 5604,  774,  321,  333,  336,  380,  379,  387,  318,
      340,  390,  324,  414,  434,  435,  483,  444,  462,  478,
      472,  497,  345,  516,  342,  705, 5604,  543,  564,  570,
      554,  569,  571,  611,  616,  635,  331,  438,  615,  335,
        0,  665,  624,  671,  719,  660,  723,  714,  679,  566,
      360,  737,  387, 5604, 5604, 5604,    0,  784,  791,  776,
      796,  792,  840,  832,  851,  394,  683,  780,  398,    0,
      852,  878,  890,  938,  899,  898,  904,  953,  931,  439,

      960,  441, 1013, 1020, 1027,    0,  562,    0,  758, 5604,
        0,    0,  765, 5604,  354,    0,  752, 1012, 1027, 1058,
     1069, 1082, 1119,  429,  729,  795,  451, 1117,  948, 1123,
     1171, 1028, 1175, 1166, 1074, 1019,  472, 1189,  489, 5604,
      694,  567, 5604,  733, 5604, 5604, 5604,  640,  843,  511,
      513,  564,  551,  657,  668,  679, 5604,  683,  713, 1216,
      703,  718,  947, 1176,  772,  782,  785,  829,  855,  862,
      897, 1107,  892,  888,  911, 1213,  922,  939,  949,  994,
     1006, 1026, 1221, 5604, 1039, 1110, 1135, 1225, 1225, 1066,
     1037, 1136, 1134, 1222, 1235, 1166, 1212, 1240, 1235, 1245,

     1242, 1231, 1247, 1235, 1236, 1251, 1248, 1282, 1279, 1275,
     1285, 1276, 1272, 1290, 1288, 1289, 1299, 1297, 1291, 1287,
     1292, 1304, 1306, 1293, 1296, 1340, 5604, 1352, 1360, 1366,
     1371, 1385,    0,    0, 1362, 1363, 1353, 1361, 1366, 1352,
     1367, 1368, 1369,    0, 1370, 1389, 1381, 1376, 1374, 1379,
     1420, 1387, 1386, 1389, 1390, 1410, 1412, 1420, 1431, 1415,
     1411, 1415, 1429, 1427, 1433, 1431, 1426, 1428, 1438, 1446,
        0, 1444, 1465, 1456, 1472, 1450, 1468, 1453, 1473, 1470,
     1477, 1490, 1491, 1484, 1499, 1494, 1503, 1500, 1489, 1505,
     1493, 1496, 1513, 1506, 1522, 1515, 1519, 1542, 1511, 1512,

     1544, 1538, 1543, 1557, 1571, 1551, 1541, 1551, 1556, 1559,
     1545, 1548, 1567,    0, 1611, 1620, 1625, 1629, 1636, 1645,
        0, 1624, 1622, 1629, 1635, 1640, 1626, 1634, 1634, 1635,
        0, 1632, 1651, 1645, 1638, 1638, 1642, 1678, 1641, 1643,
     1650, 1655, 1688, 1691, 1694, 1697, 1689, 1684, 1689, 1693,
     1692, 1696, 1694, 1688, 1691, 1701, 1728,    0, 1707, 1713,
     1721, 1739, 1739, 1734, 1741, 1743, 1739, 1740, 1756, 1754,
     1747, 1762, 1757, 1766, 1764, 1753, 1769, 1757, 1759, 1775,
     1771, 1789, 1793, 1793, 1803, 1797, 1793, 1811, 1807, 1812,
     1817, 1819, 1816, 1813, 1815, 1821, 1826, 1816, 1825, 1847,

     1876, 1890, 1881, 1895, 1902, 1910, 1919, 1927,    0,  614,
        0, 1945,    0,    0,    0, 1897, 1904, 1860, 1892, 1915,
     1905, 1913, 1916, 1917,    0, 1915, 1934, 1936, 1924, 1922,
     1945, 1947, 1923, 1923, 1932, 1933, 1951, 1964, 1969, 1980,
     1963, 1958, 1970, 1980, 1972, 1978, 1976, 1971, 1976, 1988,
     2014,    0, 1997, 2004, 2007, 1996, 2001, 2019, 2003, 2011,
     2012, 2025, 2041, 2029, 2027, 2045, 2043, 2052, 2050, 2039,
     2055, 2046, 2046, 2061, 2053, 2072, 2062, 2059, 2087, 2062,
     2063, 2084, 2078, 2096, 2102, 2116, 2101, 2083, 2096, 2101,
     2108, 2096, 2104, 2123,    0,  727, 5604, 5604, 2124, 5604,

     5604, 5604, 5604, 2120, 2110, 2138,  668, 2138, 2129, 2139,
     2130, 2137, 2137, 2133, 2143, 2142, 2162, 2158, 5604, 2163,
     2160, 2164, 2151, 2170, 2157, 2170, 5604, 2175, 2164, 2186,
     2164, 2167, 2168, 2170, 2196, 2187, 2179, 2192, 2194, 2196,
     2192, 2206, 2199, 2204, 2216, 2217, 2228, 2210, 5604, 2205,
     2225, 2210, 2227, 2225, 2231, 2234, 2237, 5604, 2220, 2225,
     2226, 5604, 5604,  665, 2237, 2240, 2250, 2237, 2232, 2255,
     2259, 2260, 2248, 2251, 2264, 2272, 2270, 2267, 2264, 2274,
     2271, 2268, 2273, 2285, 5604, 2286, 2283, 2278, 5604, 2284,
     2280, 2296, 2289, 2300, 2292, 2298, 2296, 2313, 2313, 2308,

     2302, 2321, 2314, 2315, 2323, 2324, 2319, 2375, 2379, 2383,
     2391, 2397, 2401,    0,    0, 2375,    0,    0,    0,    0,
     2371, 2364, 2396,  618, 2396, 2387, 2395, 2383, 2390, 2390,
     2382, 2391, 2387, 2403, 2403,    0, 2409, 2407, 2410, 2394,
     2416, 2402, 2415,    0, 2422, 2406, 2433, 2406, 2422, 2427,
     2436, 2455, 2445, 2435, 2445, 2447, 2449, 2441, 2454, 2446,
     2450, 2461, 2463, 2501, 2456,    0, 2451, 2468, 2453, 2471,
     2469, 2472, 2475, 2478,    0, 2461, 2463, 2477,    0,    0,
      615, 2491, 2492, 2508, 2495, 2490, 2512, 2513, 2514, 2502,
     2501, 2513, 2520, 2517, 2513, 2510, 2520, 2517, 2511, 2516,

     2529,    0, 2531, 2528, 2519,    0, 2526, 2522, 2551, 2547,
     2557, 2549, 2556, 2554, 2571, 2569, 2561, 2555, 2574, 2567,
     2565, 2572, 2570, 2564, 2594, 2621, 2625, 2629, 2637, 2644,
     2648, 2652,    0, 2594,    0,    0,    0,    0, 2615, 2625,
     2649,  614, 2649, 2640, 2648, 2636, 2644, 2644, 2636, 2645,
     2641, 2657, 2657,    0, 2663, 2660, 2663, 2647, 2667, 2653,
     2666,    0, 2671, 2655, 2698, 2665, 2674, 2687, 2688, 2707,
     2697, 2688, 2698, 2701, 2703, 2695, 2708, 2700, 2704, 2715,
     2717, 2747, 2710,    0, 2705, 2722, 2707, 2723, 2720, 2723,
     2726, 2731,    0, 2729, 2741, 2743,    0,    0,  609, 2753,

     2754, 2762, 2749, 2744, 2765, 2766, 2767, 2755, 2754, 2766,
     2773, 2770, 2766, 2764, 2774, 2771, 2789, 2769, 2780,    0,
     2781, 2778, 2770,    0, 2778, 2791, 2814, 2806, 2817, 2808,
     2809, 2811, 2826, 2823, 2815, 2809, 2828, 2821, 2820, 2825,
     2824, 2818, 2848, 2852, 2876, 2884, 2890, 2897, 2901, 2905,
     2922, 2911, 2928, 2947,    0,    0, 2875,    0,    0,    0,
        0, 2897, 2888, 2911,  604, 2911, 2907, 2919, 2909, 2917,
     2917, 2911, 2920, 2916, 2932, 2933,    0, 2943, 2941, 2946,
     2932, 2952, 2938, 2952,    0, 2959, 2943, 2964, 2947, 2952,
     2952, 2953, 2976, 2970, 2962, 2973, 2975, 2979, 2971, 2984,

     2976, 2981, 2992, 2997, 3013, 2989,    0, 2984, 3003, 2989,
     3005, 3003, 3006, 3010, 3016,    0, 3003, 3007, 3008,    0,
        0,  603, 3018, 3022, 3030, 3018, 3015, 3038, 3040, 3041,
     3031, 3030, 3042, 3049, 3047, 3043, 3044, 3053, 3050, 3048,
     3050, 3063,    0, 3065, 3062, 3054,    0, 3063, 3063, 3080,
     3072, 3082, 3073, 3078, 3078, 3097, 3096, 3089, 3083, 3102,
     3096, 3094, 3101, 3099, 3095, 3100, 3096, 3115, 3105, 3113,
     5604, 3121, 5604, 5604, 3128, 3127, 3122, 3130, 3120, 3124,
     3143, 3140, 3131, 3130, 3130, 3133, 5604, 3150, 3149, 3150,
     5604, 3147, 3140, 3150, 3146, 3148, 3169, 3166, 3156, 3157,

     3163, 3180, 3179, 5604, 5604, 3168, 3171, 5604, 3168, 3169,
     3171,  633, 3186, 5604, 5604,  596, 5604, 5604, 5604, 3178,
     5604, 3183, 3194, 3183, 3200, 3191, 3189, 3212, 3200, 3200,
     3216, 5604, 3205, 3206, 3207, 5604, 3217, 3208, 3224, 3229,
     5604, 3230, 3216, 3237, 5604, 3227, 3228, 3240, 5604, 3230,
     3225, 5604, 5604, 3228, 3232, 5604, 3235, 3245, 3239, 3246,
     3242, 3248, 3260, 3264, 3267, 5604, 5604, 3272, 3269, 5604,
     5604, 3289, 3307, 3261, 3263, 3282, 3274, 3281,    0, 3289,
        0,    0, 3296, 3302, 3296, 3304, 3290, 3292, 3311, 3308,
     3299, 3297, 3297, 3299,    0, 3311, 3313, 3315,    0, 3312,

     3304, 3314, 3310, 3313, 3334, 3331, 3317, 3324, 3330, 3349,
     3347,    0,    0, 3336, 3339,    0, 3337, 3343, 3345,  612,
     3360,    0,    0,  562,    0,    0,    0, 3348,    0, 3351,
     3362, 3351, 3364, 3357, 3354, 3372, 3364, 3365, 3381,    0,
     3369, 3370, 3371,    0, 3382, 3373, 3389, 3390,    0, 3397,
     3383, 3406,    0, 3395, 3396, 3408,    0, 3399, 3399,    0,
        0, 3402, 3406,    0, 3405, 3413, 3407, 3414, 3410, 3415,
     3427, 3430, 3428,    0,    0, 3436, 3434,    0,    0, 3452,
     3474, 3481, 3485, 3490, 3494, 3443, 3448, 3486, 3474, 3481,
        0, 3489,    0,    0, 3497, 3496, 3490, 3496, 3482, 3484,

     3503, 3500, 3491, 3487, 3487, 3489,    0, 3501, 3499, 3500,
        0, 3497, 3489, 3499, 3495, 3497, 3517, 3514, 3509, 3529,
     3535, 3550, 3548,    0,    0, 3537, 3540,    0, 3537, 3538,
     3539,  593, 3552,    0,    0,  555,    0,    0,    0, 3540,
        0, 3543, 3554, 3543, 3556, 3547, 3544, 3562, 3549, 3549,
     3566,    0, 3554, 3555, 3556,    0, 3566, 3556, 3572, 3582,
        0, 3602, 3588, 3607,    0, 3596, 3597, 3609,    0, 3599,
     3594,    0,    0, 3596, 3598,    0, 3597, 3605, 3599, 3606,
     3602, 3605, 3617, 3620, 3618,    0,    0, 3622, 3619,    0,
        0, 3637, 3666, 3670, 3674, 3681, 3685, 3689, 3706, 3669,

     3665, 3684, 3672, 3679,    0, 3687,    0,    0, 3694, 3693,
     3687, 3692, 3682, 3684, 3703, 3700, 3691, 3687, 3687, 3689,
        0, 3701, 3699, 3700,    0, 3697, 3689, 3711, 3707, 3709,
     3729, 3739, 3725, 3726, 3732, 3747, 3745,    0,    0, 3734,
     3737,    0, 3734, 3735, 3736,  558, 3748,    0,    0,  523,
        0,    0,    0, 3740,    0, 3743, 3754, 3743, 3756, 3747,
     3745, 3763, 3750, 3750, 3766,    0, 3754, 3767, 3768,    0,
     3778, 3768, 3797, 3798,    0, 3799, 3785, 3804,    0, 3793,
     3794, 3806,    0, 3796, 3791,    0,    0, 3793, 3794,    0,
     3797, 3805, 3799, 3806, 3802, 3805, 3817, 3820, 3818,    0,

        0, 3822, 3819,    0,    0, 5604, 3828, 3825, 3818, 3839,
     3844, 3843, 3848, 3841, 3842, 3845, 5604, 5604, 3844, 3851,
     3848, 3858, 3856, 3864, 3856, 3866, 3861, 3872, 5604, 3858,
     3875, 3861, 3878, 5604,  519, 5604, 3859, 3865, 5604, 5604,
     3877, 3880, 5604, 3866, 5604, 3882, 3869, 3879, 5604, 5604,
     5604, 3897, 5604, 3902, 3903, 5604, 5604,  501, 3898, 5604,
     3900, 5604, 3900, 3912, 3918, 5604, 3920, 5604, 3923, 3904,
     3922, 3907, 3921, 3911, 3914, 3923, 3922, 5604, 3932, 3915,
     3934, 5604, 5604, 3921, 3940, 5604, 3928,    0, 3942, 3939,
     3920, 3941, 3958, 3957, 3949, 3942, 3956, 3959,    0,    0,

     3958, 3965, 3962, 3972, 3970, 3978, 3970, 3980, 3971, 3982,
        0, 3972, 3989, 3975, 3992,    0,  489,    0, 3973, 3979,
        0,    0, 3991, 3994,    0, 3980,    0, 3996, 3983, 3981,
        0,    0,    0, 3999,    0, 4016, 4017,    0,    0,  480,
     3999,    0, 4001,    0, 4014, 4026, 4032,    0, 4034,    0,
     4037, 4018, 4036, 4021, 4035, 4025, 4024, 4033, 4036,    0,
     4046, 4029, 4048,    0,    0, 4035, 4054,    0, 4042,  719,
     4065,    0, 4060, 4057, 4050, 4071, 4076, 4075, 4074, 4067,
     4068, 4071,    0,    0, 4072, 4079, 4076, 4086, 4084, 4092,
     4084, 4094, 4085, 4096,    0, 4082, 4099, 4089, 4106,    0,

      479,    0, 4087, 4093,    0,    0, 4105, 4108,    0, 4094,
        0, 4114, 4101, 4111,    0,    0,    0, 4129,    0, 4134,
     4135,    0,    0,  459, 4124,    0, 4126,    0, 4126, 4138,
     4146,    0, 4148,    0, 4151, 4132, 4150, 4135, 4149, 4139,
     4138, 4147, 4146,    0, 4156, 4143, 4162,    0,    0, 4149,
     4168,    0, 4156, 4199,  932, 4208, 4212,    0, 4207, 4204,
     4185, 4206, 4211, 4210, 4202, 4195, 4196, 4199,    0,    0,
     4198, 4205, 4202, 4212, 4210, 4218, 4210, 4220, 4211, 4222,
        0, 4208, 4225, 4211, 4228,    0,  442,    0, 4209, 4215,
        0,    0, 4227, 4230,    0, 4216,    0, 4261, 4248, 4246,

        0,    0,    0, 4264,    0, 4269, 4270,    0,    0,  433,
     4252,    0, 4254,    0, 4254, 4266, 4272,    0, 4274,    0,
     4277, 4258, 4276, 4261, 4275, 4265, 4264, 4273, 4272,    0,
     4282, 4265, 4284,    0,    0, 4271, 4290,    0, 4278, 4275,
     4280, 5604, 4310, 4311, 4306, 4322, 4323, 5604, 4309, 4325,
     4311, 5604, 4319, 4313, 5604, 4331, 5604, 4319, 5604, 5604,
     4331, 5604, 4317, 4316, 4330, 4336, 5604, 5604, 5604, 4323,
     4337, 4342, 5604, 4332, 4333, 4334, 5604, 5604, 4338, 4333,
     4340, 4330, 4348, 4339, 5604, 5604, 5604, 4373, 4382, 4383,
     4381, 5604, 4372, 5604, 5604, 4369, 5604, 4370, 4375,    0,

     4376, 4377, 4372, 4388, 4389,    0, 4375, 4391, 4377,    0,
     4385, 4379,    0, 4397,    0, 4385,    0,    0, 4397,    0,
     4383, 4382, 4396, 4402,    0,    0,    0, 4389, 4403, 4408,
        0, 4398, 4428, 4429,    0,    0, 4433, 4428, 4435, 4425,
     4443, 4434,    0,    0,    0, 4439, 4448, 4449, 4447,    0,
     4438,    0,    0, 4435,    0, 4462, 4440, 4445,    0, 4446,
     4447, 4442, 4458, 4459,    0, 4445, 4461, 4447,    0, 4455,
     4463,    0, 4481,    0, 4469,    0,    0, 4481,    0, 4478,
     4477, 4491, 4497,    0,    0,    0, 4484, 4498, 4503,    0,
     4493, 4494, 4495,    0,    0, 4499, 4494, 4501, 4491, 4513,

     4504,    0,    0,    0, 4509, 4518, 4519, 4517,    0, 4508,
        0,    0, 4505,    0, 4549, 4561, 4565, 4543, 4548,    0,
     4549, 4550, 4545, 4561, 4562,    0, 4548, 4564, 4550,    0,
     4558, 4552,    0, 4570,    0, 4558,    0,    0, 4570,    0,
     4556, 4555, 4569, 4575,    0,    0,    0, 4562, 4576, 4581,
        0, 4571, 4572, 4573,    0,    0, 4577, 4572, 4579, 4569,
     4616, 4607,    0,    0,    0, 4612, 4621, 4622, 4620,    0,
     4611,    0,    0, 4608,    0, 4623, 5604, 4621, 5604, 4624,
     4616, 5604, 5604, 5604,  432, 4626, 5604, 4612, 4613, 5604,
     5604, 4633, 4621, 5604, 5604, 4633, 4625, 5604, 4617, 4634,

     4625, 4627, 4628, 5604, 4632, 4642, 4631, 4633, 4627, 4672,
     5604, 5604, 4674,    0, 4672,    0, 4675, 4667,    0,    0,
        0,  429, 4677,    0, 4663, 4664,    0,    0, 4684, 4672,
        0,    0, 4684, 4676,    0, 4668, 4685, 4676, 4678, 4679,
        0, 4683, 4693, 4682, 4684, 4678, 4694,    0,    0, 4708,
     4700,    0, 4698,    0, 4724, 4716,    0,    0,    0,  426,
     4726,    0, 4712, 4715,    0,    0, 4735, 4723,    0,    0,
     4735, 4727,    0, 4719, 4736, 4727, 4729, 4730,    0, 4734,
     4744, 4733, 4735, 4729, 4745,    0,    0, 4759, 4788, 4751,
        0, 4749,    0, 4752, 4748,    0,    0,    0,  423, 4758,

        0, 4767, 4768,    0,    0, 4788, 4776,    0,    0, 4790,
     4782,    0, 4774, 4791, 4782, 4784, 4785,    0, 4789, 4799,
     4788, 4790, 4784, 4800,    0,    0, 5604, 4786, 4789, 4801,
     4835, 5604, 5604, 4802, 4800, 4806, 4794, 4794, 4815, 4807,
     4831, 5604, 4839, 5604, 4842, 4841, 4836, 4851, 4853,    0,
     4838, 4841, 4853, 4875,    0,    0, 4852, 4851, 4862, 4850,
     4850, 4867, 4859, 4882,    0, 4890,    0, 4898, 4897, 4889,
     4901, 4905,    0, 4890, 4893, 4905, 4911,    0,    0, 4904,
     4904, 4910, 4898, 4898, 4916, 4914, 4922,    0, 4930,    0,
     4944, 4944, 4936, 4948, 4950,    0, 4935, 4943, 4955, 4969,

        0,    0, 4954, 4952, 4960, 4948, 4948, 4965, 4957, 4960,
        0, 4968,    0, 4971, 4970, 4963, 4981, 4990, 4987,  388,
     4987, 5008, 5020, 5009, 4996, 5009, 5004, 5004, 4999, 5604,
     5604, 5017, 5604, 5019, 5604, 5604, 5009, 5604, 5604, 5604,
     5604, 5020,  379, 5009, 5029, 5030, 5031, 5018, 5031, 5028,
     5028, 5023,    0,    0, 5040,    0, 5039,    0,    0, 5029,
        0,    0,    0,    0, 5044,  378, 5033, 5064, 5066, 5067,
     5054, 5067, 5068, 5063, 5058,    0,    0, 5075,    0, 5076,
        0,    0, 5066,    0,    0,    0,    0, 5077,  372, 5066,
     5086, 5087, 5088, 5075, 5088, 5084, 5080, 5080,    0,    0,

     5097,    0, 5096,    0,    0, 5086,    0,    0,    0,    0,
     5604, 5097, 5090, 5091, 5117, 5105, 5114, 5119, 5115, 5115,
     5130, 5604, 5116, 5604,    0, 5129, 5118, 5121, 5136, 5123,
     5132, 5137, 5133, 5133, 5143,    0, 5129,    0,    0, 5142,
     5131, 5133, 5153, 5140, 5149, 5154, 5150, 5154, 5164,    0,
     5161,    0,    0, 5175, 5164, 5165, 5180, 5167, 5181, 5186,
     5182, 5182, 5194,    0, 5180,    0, 5604, 5200, 5197, 5202,
     5196, 5200, 5201, 5202, 5189, 5604, 5201,    0, 5210, 5212,
     5217, 5211, 5215, 5216, 5221, 5208,    0, 5231,    0, 5240,
     5237, 5242, 5236, 5240, 5246, 5247, 5234,    0, 5246,    0,

     5256, 5253, 5258, 5252, 5256, 5257, 5258, 5245,    0, 5257,
     5254, 5604, 5246, 5604, 5604, 5256, 5256, 5604, 5604, 5264,
        0, 5256,    0,    0, 5265, 5260,    0,    0, 5272,    0,
     5264,    0,    0, 5284, 5280,    0,    0, 5288,    0, 5280,
        0,    0, 5289, 5284,    0,    0, 5294, 5298, 5310, 5292,
     5300, 5304, 5316, 5298, 5304, 5308, 5320, 5302, 5308, 5312,
     5324, 5307, 5326, 5314, 5604, 5334, 5329, 5317,    0, 5341,
     5336, 5335,    0, 5356, 5351, 5339,    0, 5359, 5604,  366,
     5348,    0,  332, 5354,    0,  331, 5355,    0,  328, 5356,
     5350, 5357, 5354, 5359, 5356, 5361, 5358, 5363, 5362, 5604,

     5363,    0, 5364,    0, 5365,    0, 5384, 5390, 5391, 5392,
     5380, 5381, 5386, 5387, 5394, 5396, 5397, 5398, 5412, 5413,
     5419, 5420, 5412, 5413, 5416, 5417, 5415, 5416, 5417, 5418,
     5424, 5425, 5426, 5427,  301,  213,  206,  199, 5434, 5436,
     5442, 5443, 5433, 5434, 5435, 5440, 5444, 5456, 5458, 5459,
     5454, 5455, 5456, 5462, 5468, 5469, 5470, 5473, 5604,    0,
        0,    0, 5604, 5538, 5544, 5549, 5558, 5567, 5576,  239,
     5585, 5594
    } ;

static const flex_int16_t yy_def[2573] =
    {   0,
     2563,    1, 2563,    3, 2563,    5,    5,    5,    5,    5,
     2563,   11, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2563, 2563, 2563, 2565, 2565, 2565, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2565, 2565, 2567, 2568, 2568, 2568, 2568, 2563,
     2568, 2568, 2568, 2563, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2563,
     2568, 2563, 2563, 2569, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2570, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,

     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2565, 2565, 2565, 2565, 2565, 2565, 2567, 2567, 2568, 2568,
     2568, 2571, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2569, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2570, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,

     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2563, 2565, 2565, 2565, 2565, 2565,
     2563, 2565, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2563, 2565, 2565, 2565, 2565, 2565, 2563, 2565,
     2567, 2563, 2567, 2571, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,

     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2563,
     2565, 2563, 2565, 2565, 2563, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2563, 2563, 2565, 2565, 2565, 2563, 2572, 2567, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,

     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2565,
     2563, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2563, 2565, 2572, 2572, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564, 2564, 2564,

     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2565, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2565, 2572, 2572, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2565,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2565, 2572, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2568,

     2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2563, 2563, 2563, 2563,
     2564, 2564, 2564, 2564, 2566, 2566, 2566, 2566, 2568, 2568,
     2568, 2568, 2563, 2563, 2563, 2563, 2564, 2564, 2564, 2564,
     2566, 2566, 2566, 2566, 2568, 2568, 2568, 2568, 2563, 2563,
     2563, 2564, 2564, 2564, 2566, 2566, 2566, 2568, 2568, 2568,
     2563, 2563, 2564, 2564, 2566, 2566, 2568, 2568, 2563, 2563,

     2564, 2564, 2566, 2566, 2568, 2568, 2563, 2564, 2566, 2568,
     2563, 2564, 2566, 2568, 2563, 2564, 2566, 2568, 2563, 2564,
     2566, 2568, 2563, 2564, 2566, 2568, 2563, 2564, 2566, 2568,
     2563, 2564, 2566, 2568, 2563, 2564, 2566, 2568, 2563, 2564,
     2566, 2568, 2563, 2564, 2566, 2568, 2563, 2564, 2566, 2568,
     2563, 2564, 2566, 2568, 2563, 2564, 2566, 2568, 2563, 2564,
     2566, 2568,    0, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563
    } ;

static const flex_int16_t yy_nxt[5686] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   14,
       18,   21,   22,   23,   18,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   14,   34,   35,   36,   37,
       38,   14,   39,   40,   41,   42,   43,   44,   14,   45,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   14,   34,   35,   36,   37,   38,
       14,   39,   40,   41,   42,   43,   44,   14,   45,   46,
       14,   14,   15,   16,   15,   17,   47,   14,   18,   18,
       19,   18,   18,   18,   18,   20,   48,   49,   50,   50,

       50,   18,   21,   22,   23,   18,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   61,   67,   68,   69,   70,   71,   72,   61,
       73,   61,   74,   61,   75,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   61,   67,   68,   69,   70,   71,   72,   61,   73,
       46,   61,   14,   15,   16,   15,   17,   14,   76,   18,
       18,   19,   18,   18,   18,   77,   20,   78,   79,   79,
       79,   79,   18,   21,   22,   23,   18,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,

       93,   94,   95,   90,   96,   97,   98,   99,  100,  101,
       90,  102,   90,   74,   14,   14,   80,   81,   82,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
       94,   95,   90,   96,   97,   98,   99,  100,  101,   90,
      102,   46,   90,  103,  614,   77,  104,  104,  104,  104,
      103, 2542,   77,  104,  104,  104,  104,   18, 2541,   18,
      105,  105,  105,  105,   18, 2540,   18,  105,  105,  105,
      105,  106,  107,  108,   15,  109,  110,  106,  111,  111,
       19,  112,  112,  112,  112,  113,  112,  106,  106,  106,
      106,  114,  115,  116,  117,  114,  118,  119,  120,  121,

      122,  123,  124,  125,  126,  127,  106,  128,  129,  130,
      131,  132,  106,  133,  134,  135,  136,  137,  138,  106,
      139,  106,  140,  106,  106,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  106,  128,  129,  130,  131,
      132,  106,  133,  134,  135,  136,  137,  138,  106,  139,
      141,  106,  142, 2539,  142,  145,  146,  148,  152,  149,
      179,  158,  153,  185,  150,  180,  154,  151,  159,  155,
      221,  226,  156,  266,  272,  160,  413,  414,  161,  181,
     2497,  162,  157, 2495, 2493,  308,  148,  152,  149,  179,
      158,  153,  185,  150,  180,  154,  151,  159,  155,  221,

      226,  156,  266,  272,  160,  163,  167,  161,  181,  164,
      162,  157,  173,  165,  308,  168,  313,  169, 2491,  166,
      174,  182,  170,  175, 1665,  171,  176,  172,  183,  177,
     1579, 1495,  178,  184,  163,  167,  353,  359,  164,  186,
     1413,  173,  165,  187,  168,  313,  169,  188,  166,  174,
      182,  170,  175,  189,  171,  176,  172,  183,  177,  190,
      193,  178,  184,  267,  395,  353,  359,  191,  186,  204,
      400,  447,  187,  192,  194, 2200,  188,  268, 2177,  195,
      196, 2154,  189,  205, 2131, 1954,  206,  207,  190,  193,
      453,  208,  267,  395, 1942,  209,  191,  489,  204,  400,

      447,  210,  192,  194,  215,  216,  268,  211,  195,  196,
      197, 1893,  205,  198,  217,  206,  207,  212,  494,  453,
      208,  199,  213,  214,  209,  200,  489,  201,  202,  203,
      210, 1881, 1834,  215,  216,  218,  211,  219,  502,  197,
      220, 1822,  198,  217,  503,  222,  212,  494,  223,  224,
      199,  213,  214, 1776,  200,  225,  201,  202,  203,  228,
      228,  228,  228,  410,  218,  142,  219,  502,  142,  220,
      142, 1764,  229,  503,  222, 1700, 1697,  223,  224,  230,
      231,  231,  231,  231,  225,  230,  231,  231,  231,  231,
      235,  504,  236,  232,  239,  505,  245,  237,  240,  232,

      238,  229,  241,  246,  305,  242,  306, 1614,  243,  307,
      247, 1611,  233,  248, 1530,  410,  249,  142,  244,  235,
      504,  236,  232,  239,  505,  245,  237,  240,  232,  238,
     1527,  241,  246,  305,  242,  306,  250,  243,  307,  247,
      251,  233,  248,  254,  252,  249,  269,  244, 1448,  277,
      253, 1445,  255,  270,  256, 1361, 1304,  278,  271,  257,
      260, 1247,  258,  279,  259,  250, 1190, 1135,  261,  251,
     1078,  262,  254,  252,  263,  269,  498,  264,  277,  253,
      265,  255,  270,  256,  499,  291,  278,  271,  257,  260,
      273,  258,  279,  259,  274,  506,  280,  261,  275,  292,

      262,  507,  293,  263,  276,  498,  264,  508,  354,  265,
      281,  302,  303,  499,  291,  282,  283, 1027,  509,  273,
      970,  304,  355,  274,  506,  280,  510,  275,  292,  497,
      507,  293,  317,  276, 1856,  497,  508,  354,  511,  281,
      302,  303,  516,  298,  282,  283,  284,  509,  294,  285,
      304,  355,  295,  299,  448,  510,  296,  286,  300,  301,
      517,  287,  297,  288,  289,  290,  309,  511,  449,  310,
      311,  516,  298,  495,  415,  284,  312,  294,  285,  412,
      411,  295,  299,  448,  227,  296,  286,  300,  301,  517,
      287,  297,  288,  289,  290,  309,  147,  449,  310,  311,

      315,  315,  315,  315,  317,  312,  318,  319,  319,  319,
      319,  356,  322,  316,  323,  523,  144,  332,  357,  324,
      320,  326,  325,  358,  333,  327,  450,  524,  525,  328,
      143,  334,  329,  451,  335,  330, 2563,  336,  452, 2563,
      356,  322,  316,  323,  523,  331,  332,  357,  324,  320,
      326,  325,  358,  333,  327,  450,  524,  525,  328,  341,
      334,  329,  451,  335,  330,  337,  336,  452,  342,  338,
      343,  500,  526,  339,  331,  344,  347,  360,  345,  340,
      346,  361, 2563,  527,  348,  362, 2563,  349,  341,  528,
      350,  363,  501,  351,  337, 2563,  352,  342,  338,  343,

      500,  526,  339,  364,  344,  347,  360,  345,  340,  346,
      361,  365,  527,  348,  362,  367,  349,  366,  528,  350,
      363,  501,  351,  381,  378,  352,  529,  382,  533,  368,
      534,  383,  364,  385,  369,  370, 2563,  384,  379, 2563,
      365,  380, 2563,  386,  367, 1915,  366,  404,  387,  388,
      535, 2563,  381,  378, 2563,  529,  382,  533,  368,  534,
      383,  539,  385,  369,  370,  371,  384,  379,  372,  392,
      380,  393,  386,  458,  394,  540,  373,  387,  388,  535,
      374,  459,  375,  376,  377,  389,  390,  460,  541,  396,
      539,  518,  397,  398,  371,  391,  519,  372,  392,  399,

      393, 2563,  458,  394,  540,  373, 2563, 2563, 2563,  374,
      459,  375,  376,  377,  389,  390,  460,  541,  396, 2563,
      518,  397,  398, 2563,  391,  519, 2563, 2563,  399,  401,
      401,  401,  401,  403, 2563,  404,  405,  405,  405,  405,
      542, 2563,  402,  408,  408,  408,  408, 2563,  416,  406,
      417,  543,  420,  472, 2563,  418,  421,  486,  419,  487,
      422, 2563,  488,  423,  544, 2563,  424,  473, 2563,  542,
      474,  402,  548, 2563, 2563,  559,  425,  416,  406,  417,
      543,  420,  472,  426,  418,  421,  486,  419,  487,  422,
      427,  488,  423,  544,  431,  424,  473,  428,  432,  474,

      429,  548,  433,  430,  559,  425,  483,  484,  434,  435,
      557, 2563,  426, 2563,  558, 2563,  485, 2563,  436,  427,
      437, 2563, 2563,  431, 2563,  438,  428,  432,  439,  429,
      440,  433,  430, 2563,  530,  483,  484,  434,  435,  557,
      531,  549,  454,  558,  441,  485,  455,  436,  461,  437,
      456,  532,  442,  550,  438,  443,  457,  439,  444,  440,
      551,  445,  462,  530,  446,  552, 2563,  463,  464,  531,
      549,  454, 2563,  441,  560,  455, 2563,  461,  561,  456,
      532,  442,  550, 2563,  443,  457, 2563,  444, 2563,  551,
      445,  462, 2563,  446,  552,  479,  463,  464,  465, 2563,

      475,  466,  566,  560,  476,  480,  520,  561,  477,  467,
      481,  482,  521,  468,  478,  469,  470,  471,  490,  522,
     2563,  491,  492, 2563,  479, 2563, 2563,  465,  493,  475,
      466,  566, 2563,  476,  480,  520, 2563,  477,  467,  481,
      482,  521,  468,  478,  469,  470,  471,  490,  522,  536,
      491,  492,  512,  513,  514,  537,  567,  493,  538,  545,
      553,  515,  554,  555,  546,  547,  562,  564,  565,  563,
      568,  569,  556,  570,  571,  572,  573,  574,  536,  575,
      576,  512,  513,  514,  537,  567,  577,  538,  545,  553,
      515,  554,  555,  546,  547,  562,  564,  565,  563,  568,

      569,  556,  570,  571,  572,  573,  574,  578,  575,  576,
      580,  581,  583,  586,  587,  577,  588,  590,  591,  598,
      600,  584,  582,  595,  593,  579,  592,  589,  601,  585,
      596,  599,  597,  603,  602,  604,  578,  605,  606,  580,
      581,  583,  586,  587,  594,  588,  590,  591,  598,  600,
      584,  582,  595,  593,  579,  592,  589,  601,  585,  596,
      599,  597,  603,  602,  604,  607,  605,  606,  228,  228,
      228,  228,  608,  594,  608, 2563,  609,  609,  609,  609,
      619,  229,  610,  610,  610,  610,  230,  231,  231,  231,
      231,  617,  620,  621,  607,  611,  622,  612,  615,  612,

      232,  613,  613,  613,  613,  623,  616,  625,  626,  619,
      229,  624,  618,  627,  628,  633,  634,  629,  630,  631,
      617,  620,  621,  635,  611,  622,  632,  615,  636,  232,
      640,  641,  642,  643,  623,  616,  625,  626,  644,  645,
      624,  618,  627,  628,  633,  634,  629,  630,  631,  646,
      637,  650,  635,  651,  652,  632,  638,  636,  647,  640,
      641,  642,  643,  639,  648,  653,  656,  644,  645,  657,
      658,  654,  659,  660,  655,  649,  661,  665,  646,  637,
      650,  668,  651,  652,  662,  638,  669,  647,  672,  663,
      664,  676,  639,  648,  653,  656,  666,  673,  657,  658,

      654,  659,  660,  655,  649,  661,  665,  670,  667,  671,
      668,  677,  674,  662,  678,  669,  675,  672,  663,  664,
      676,  679,  681,  682,  680,  666,  673,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  670,  667,  671,  692,
      677,  674,  693,  678,  694,  675,  697,  695,  703, 2563,
      679,  681,  682,  680,  704,  698,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  696,  699,  707,  692,  700,
      705,  693,  708,  694,  717,  697,  695,  703,  701,  715,
      709,  706,  710,  704,  698,  720,  702,  718,  721,  722,
      723,  716,  724,  719,  696,  699,  707,  712,  700,  705,

     2563,  708,  711,  717,  713, 2563,  714,  701,  715,  709,
      706,  710, 2563, 2563,  720,  702,  718,  721,  722,  723,
      716,  724,  719, 2563, 2563, 2563,  712,  315,  315,  315,
      315,  711,  725,  713,  725,  714,  726,  726,  726,  726,
      316,  727,  727,  727,  727,  728,  728,  728,  728,  317,
      735,  318,  730,  730,  730,  730,  737,  731,  729,  731,
      733,  732,  732,  732,  732,  320,  738,  739,  734,  316,
      740,  736,  741,  743,  744,  745,  746,  751,  742,  735,
      752,  747,  748,  749,  758,  737,  753,  729,  759,  733,
      750,  754, 2563,  760,  320,  738,  739,  734,  761,  740,

      736,  741,  743,  744,  745,  746,  751,  742,  755,  752,
      747,  748,  749,  758,  756,  753,  762,  759,  763,  750,
      754,  757,  760,  764,  765,  768,  769,  761,  770,  771,
      766,  774,  775,  776,  777,  772,  778,  755,  773,  779,
      783,  767, 2563,  756,  784,  762,  786,  763, 2563, 2563,
      757,  787,  764,  765,  768,  769,  785,  770,  771,  766,
      774,  775,  776,  777,  772,  778,  780,  773,  779,  783,
      767,  781,  782,  784,  788,  786,  789,  790,  792,  794,
      787,  795,  793,  796,  797,  785,  791,  798,  799,  800,
      801,  802,  803,  804,  805,  780,  806,  807,  808,  809,

      781,  782,  810,  788,  811,  789,  790,  792,  794,  812,
      795,  793,  796,  797,  813,  791,  798,  799,  800,  801,
      802,  803,  804,  805,  815,  806,  807,  808,  809,  816,
      818,  810,  814,  811,  821,  822,  825,  823,  812,  819,
      817,  826,  828,  813,  833,  830,  835,  820,  824,  827,
      838,  836,  831,  815,  832,  839,  834,  837,  816,  818,
      840,  814,  829,  821,  822,  825,  823,  841,  819,  817,
      826,  828,  842,  833,  830,  835,  820,  824,  827,  838,
      836,  831, 2563,  832,  839,  834,  837,  860, 2563,  840,
     2563,  829,  401,  401,  401,  401,  841,  845,  845,  845,

      845,  842,  843, 2563,  843,  402,  844,  844,  844,  844,
      846,  847,  847,  847,  847,  403,  860,  404,  848,  848,
      848,  848,  849,  861,  849, 2563,  850,  850,  850,  850,
      852,  406,  858,  856,  402,  851,  851,  851,  851,  846,
     2563,  857,  862,  853,  853,  853,  853,  855,  496,  863,
      496,  864,  861,  859,  496,  866,  867,  865,  868,  869,
      406,  858,  856,  874,  875,  496,  881, 2563,  882,  496,
      857,  862,  870,  871,  872,  883,  884,  878,  863,  885,
      864,  873,  859,  879,  866,  867,  865,  868,  869,  876,
      880,  886,  874,  875,  877,  881,  496,  882,  887,  891,

      892,  870,  871,  872,  883,  884,  878,  888,  885,  893,
      873,  897,  879,  889,  898,  899,  894,  900,  876,  880,
      886,  901,  895,  877,  890,  896,  902,  887,  891,  892,
      906,  911,  909,  912, 2563,  907,  888,  910,  893,  913,
      897,  917,  889,  898,  899,  894,  900,  908,  914,  918,
      901,  895,  903,  890,  896,  902,  919,  904,  905,  906,
      911,  909,  912,  915,  907,  924,  910,  916,  913,  920,
      917,  925,  921,  922,  923,  926,  908,  914,  918,  927,
      928,  903,  929,  930,  931,  919,  904,  905,  932,  933,
      934,  935,  915,  938,  924,  939,  916,  936,  920,  944,

      925,  921,  922,  923,  926,  945,  940,  948,  927,  928,
      946,  929,  930,  931,  941,  937,  958,  932,  933,  934,
      935,  947,  938,  942,  939,  949,  936,  951,  944,  956,
      961,  943,  959,  950,  945,  940,  948,  962,  960,  946,
      963,  957,  953,  941,  937,  958,  964,  952,  965,  954,
      947,  955,  942,  966,  949,  967,  951,  968,  956,  961,
      943,  959,  950,  969,  971,  972,  962,  960,  973,  963,
      957,  953,  975,  976,  977,  964,  952,  965,  954,  978,
      955,  979,  966,  974,  967,  980,  968,  984,  985,  986,
      981,  987,  969,  971,  972,  988,  989,  973,  990,  991,

      992,  975,  976,  977,  982,  983,  993,  996,  978,  997,
      979,  998,  974,  999,  980,  994,  984,  985,  986,  981,
      987, 1000,  995, 1001,  988,  989, 1002,  990,  991,  992,
     1003, 1004, 1005,  982,  983,  993,  996, 1006,  997, 1007,
      998, 1008,  999, 1009,  994, 1010, 1011, 1012, 1015, 1016,
     1000,  995, 1001, 1017, 1018, 1002, 1019, 1013, 1020, 1003,
     1004, 1005, 1021, 1022, 1023, 1024, 1006, 1014, 1007, 1025,
     1008, 1026, 1009, 1028, 1010, 1011, 1029, 1015, 1016, 1030,
     1031, 1032, 1017, 1018, 1033, 1019, 1013, 1020, 1034, 1035,
     1036, 1021, 1022, 1023, 1024, 1037, 1014, 1038, 1025, 1039,

     1026, 1040, 1028, 1041, 1042, 1029, 1043, 1044, 1030, 1031,
     1032, 1045, 1047, 1033, 1048, 1049, 1050, 1034, 1035, 1036,
     1046, 1051, 1052, 1053, 1037, 1054, 1038, 1055, 1039, 1056,
     1040, 1057, 1041, 1042, 1060, 1043, 1044, 1058, 1061, 1059,
     1045, 1047, 1062, 1048, 1049, 1050, 1063, 1064, 1065, 1066,
     1051, 1052, 1053, 1067, 1054, 1069, 1055, 1068, 1056, 1070,
     1057, 1071, 2563, 1060, 2563, 2563, 1058, 1061, 1059, 2563,
     2563, 1062, 2563, 2563, 2563, 1063, 1064, 1065, 1066, 2563,
     2563, 2563, 1067, 2563, 1069, 2563, 1068, 2563, 1070, 2563,
     1071,  609,  609,  609,  609,  609,  609,  609,  609,  610,

      610,  610,  610, 1072, 1074, 1072, 1075, 1073, 1073, 1073,
     1073, 1076,  611,  613,  613,  613,  613,  613,  613,  613,
      613, 1077, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087,
     1088, 1089, 1092, 1074, 1093, 1075, 1094, 1095, 1096, 1082,
     1076,  611, 1097, 1098, 1099, 1090, 1091, 1100, 1101, 1104,
     1077, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1092, 1102, 1093, 1105, 1094, 1095, 1096, 1082, 1103,
     1106, 1097, 1098, 1099, 1090, 1091, 1100, 1101, 1104, 1107,
     1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1118, 1102, 1119, 1105, 1123, 1124, 1125, 1126, 1103, 1106,

     1127, 2563, 1128, 1129, 1130, 1131, 1132, 1133, 1107, 1108,
     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1120, 1119, 1134, 1123, 1124, 1125, 1126, 1136, 1137, 1127,
     1121, 1128, 1129, 1130, 1131, 1132, 1133, 1138, 1139, 1140,
     1122, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1134, 1151, 1152, 1153, 1155, 1136, 1137, 1156, 1121,
     1157, 1158, 1159, 1154, 1160, 1161, 1138, 1139, 1140, 1122,
     1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
     1162, 1151, 1152, 1153, 1155, 1163, 1164, 1156, 1165, 1157,
     1158, 1159, 1168, 1160, 1161, 1166, 1169, 1167, 1170, 1171,

     1172, 1173, 1174, 1175, 1177, 1178, 1179, 1176, 2563, 1162,
     1180, 1180, 1180, 1180, 1163, 1164, 2563, 1165, 2563, 2563,
     2563, 1168, 2563, 1186, 1166, 1169, 1167, 1170, 1171, 1172,
     1173, 1174, 1175, 1177, 1178, 1179, 1176,  726,  726,  726,
      726, 1181, 1181, 1181, 1181,  728,  728,  728,  728, 1182,
     1187, 1182, 1186, 1183, 1183, 1183, 1183,  317,  729,  318,
     1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185,  732,  732,
      732,  732, 1188,  320, 1189, 1191, 1192, 1193, 1195, 1187,
     1196, 1197, 1198, 1199, 1200, 1201, 1204,  729, 1205, 1206,
     1207, 1208, 1194, 1209, 1210, 1211, 1212, 1213, 2563, 1202,

     1203, 1188,  320, 1189, 1191, 1192, 1193, 1195, 1216, 1196,
     1197, 1198, 1199, 1200, 1201, 1204, 1217, 1205, 1206, 1207,
     1208, 1194, 1209, 1210, 1211, 1212, 1213, 1214, 1202, 1203,
     1218, 1219, 1220, 1221, 1215, 1222, 1223, 1216, 1224, 1225,
     1226, 1227, 1228, 1229, 1230, 1217, 1231, 2563, 1235, 1236,
     1237, 1238, 1239, 1240, 1241, 1242, 1214, 2563, 1243, 1218,
     1219, 1220, 1221, 1215, 1222, 1223, 1232, 1224, 1225, 1226,
     1227, 1228, 1229, 1230, 1244, 1231, 1233, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1245, 1234, 1243, 1246, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,

     1259, 1260, 1261, 1244, 1262, 1233, 1263, 1264, 1267, 1268,
     1269, 1270, 2563, 1271, 1245, 1234, 1272, 1246, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1265, 1262, 1273, 1263, 1264, 1267, 1268, 1269,
     1270, 1266, 1271, 1274, 1275, 1272, 1276, 1277, 1278, 1280,
     1279, 1281, 1282, 1283, 1284, 1285, 1286, 1289, 1287, 1290,
     1291, 1265, 1288, 1273, 1292, 1292, 1292, 1292,  844,  844,
      844,  844, 1274, 1275, 2563, 1276, 1277, 1278, 1280, 1279,
     1281, 1282, 1283, 1284, 1285, 1286, 1289, 1287, 1290, 1291,
     2563, 1288,  845,  845,  845,  845, 1293, 2563, 1293, 2563,

     1294, 1294, 1294, 1294, 1300,  846, 1295, 1295, 1295, 1295,
      403, 2563,  404, 1296, 1296, 1296, 1296, 1297, 1297, 1297,
     1297,  850,  850,  850,  850,  852,  406, 1298, 1298, 1298,
     1298,  852, 1301, 1300,  846, 1302, 1303, 1305,  851,  851,
      851,  851, 2563, 1306, 1299, 1299, 1299, 1299, 1307,  855,
      496, 1309,  496, 1310, 1311,  406,  496, 1312, 1313, 1314,
     1315, 1301, 1318, 1308, 1302, 1303, 1305,  496, 1319, 2563,
     1320,  496, 1306, 1321, 1316, 1317, 1322, 1307, 1323, 1324,
     1309, 1325, 1310, 1311, 1326, 1327, 1312, 1313, 1314, 1315,
     1330, 1318, 1308, 1328, 1331, 1332, 1333, 1319,  496, 1320,

     1329, 1334, 1321, 1316, 1317, 1322, 1335, 1323, 1324, 1336,
     1325, 1337, 1338, 1326, 1327, 1339, 1340, 1341, 1342, 1330,
     1343, 1344, 1328, 1331, 1332, 1333, 1345, 1349, 1350, 1329,
     1334, 1351, 1346, 1352, 1353, 1335, 1354, 1355, 1336, 1356,
     1337, 1338, 1347, 1357, 1339, 1340, 1341, 1342, 1358, 1343,
     1344, 1359, 1348, 1360, 1362, 1345, 1349, 1350, 1363, 1364,
     1351, 1365, 1352, 1353, 1366, 1354, 1355, 1367, 1356, 1368,
     1369, 1347, 1357, 1370, 1371, 1372, 1373, 1358, 1374, 1375,
     1359, 1348, 1360, 1362, 1376, 1377, 1378, 1363, 1364, 1381,
     1365, 1379, 1382, 1366, 1383, 1384, 1367, 1385, 1368, 1369,

     1380, 1386, 1370, 1371, 1372, 1373, 1387, 1374, 1375, 1388,
     1389, 1390, 1391, 1376, 1377, 1378, 1394, 1392, 1381, 1393,
     1379, 1382, 1395, 1383, 1384, 1396, 1385, 1397, 1398, 1399,
     1386, 1400, 1401, 1403, 1404, 1387, 1402, 1405, 1388, 1389,
     1390, 1391, 1406, 1407, 1408, 1394, 1392, 1409, 1393, 1410,
     1411, 1395, 1414, 1412, 1396, 1415, 1397, 1398, 1399, 1416,
     1400, 1401, 1403, 1404, 1417, 1402, 1405, 1418, 1419, 1420,
     1421, 1406, 1407, 1408, 1422, 1423, 1409, 1424, 1410, 1411,
     1413, 1414, 1412, 1425, 1415, 1426, 1427, 1428, 1416, 1429,
     1430, 1431, 1432, 1417, 1433, 1434, 1418, 1419, 1420, 1421,

     1435, 1436, 1437, 1422, 1423, 1438, 1424, 1439, 1440, 1441,
     1442, 1443, 1425, 1444, 1426, 1427, 1428, 1446, 1429, 1430,
     1431, 1432, 1449, 1433, 1434, 1450, 1451, 1452, 1447, 1435,
     1436, 1437, 1453, 1454, 1438, 1455, 1439, 1440, 1441, 1442,
     1443, 1456, 1444, 1457, 1458, 1459, 1446, 1460, 1461, 1462,
     1463, 1449, 1464, 1465, 1450, 1451, 1452, 1447, 1466, 1467,
     1468, 1453, 1454, 1469, 1455, 1470, 1471, 1472, 1473, 1474,
     1456, 1475, 1457, 1458, 1459, 1476, 1460, 1461, 1462, 1463,
     1477, 1464, 1465, 1478, 1479, 1480, 1481, 1466, 1467, 1468,
     1482, 1483, 1469, 1484, 1470, 1471, 1472, 1473, 1474, 1485,

     1475, 1486, 1487, 1488, 1476, 1073, 1073, 1073, 1073, 1477,
     1489, 1490, 1478, 1479, 1480, 1481, 1491, 1492, 1493, 1482,
     1483, 1494, 1484, 1073, 1073, 1073, 1073, 1496, 1485, 1497,
     1486, 1487, 1488, 1498, 1499, 1500, 1501, 1502, 1503, 1489,
     1490, 1504, 1505, 1506, 1507, 1491, 1492, 1493, 1495, 1508,
     1494, 1509, 1510, 1511, 1512, 1513, 1496, 1514, 1497, 1515,
     1516, 1517, 1498, 1499, 1500, 1501, 1502, 1503, 1518, 1519,
     1504, 1505, 1506, 1507, 1520, 1521, 1522, 1523, 1508, 1524,
     1509, 1510, 1511, 1512, 1513, 1525, 1514, 1526, 1515, 1516,
     1517, 1528, 1531, 1532, 1533, 1534, 1535, 1518, 1519, 1536,

     1537, 1538, 1529, 1520, 1521, 1522, 1523, 1539, 1524, 1540,
     1541, 1542, 1543, 1544, 1525, 1545, 1526, 1546, 1547, 1548,
     1528, 1531, 1532, 1533, 1534, 1535, 1549, 1550, 1536, 1537,
     1538, 1529, 1551, 1552, 1553, 1554, 1539, 1555, 1540, 1541,
     1542, 1543, 1544, 1556, 1545, 1557, 1546, 1547, 1548, 1558,
     1559, 1560, 1561, 1562, 1563, 1549, 1550, 1564, 1565, 1566,
     1567, 1551, 1552, 1553, 1554, 1568, 1555, 1569, 1180, 1180,
     1180, 1180, 1556, 2563, 1557, 2563, 2563, 2563, 1558, 1559,
     1560, 1561, 1562, 1563, 2563, 1572, 1564, 1565, 1566, 1567,
     1570, 1570, 1570, 1570, 1568, 1573, 1569, 1571, 1571, 1571,

     1571, 1183, 1183, 1183, 1183,  318, 1184, 1184, 1184, 1184,
     1185, 1185, 1185, 1185, 1572, 1574, 1575, 1576, 1577,  320,
     2563, 1580, 1578, 1581, 1573, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1574, 1575, 1576, 1577,  320, 1579,
     1580, 1578, 1581, 1601, 1582, 1583, 1584, 1585, 1586, 1587,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1600, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1601, 1612, 1615, 1616, 1617, 1618, 1619, 1620,
     1621, 1622, 1623, 1624, 1613, 1625, 1626, 1627, 1628, 1629,

     1630, 1631, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1632, 1612, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1613, 1625, 1626, 1627, 1628, 1629, 1630,
     1631, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
     1632, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
     1651, 1652, 1653, 1292, 1292, 1292, 1292, 2563, 2563, 2563,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 2563,
     1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
     1652, 1653, 1654, 1654, 1654, 1654, 1294, 1294, 1294, 1294,
     1655, 1655, 1655, 1655,  403, 2563, 2563, 1296, 1296, 1296,

     1296, 1297, 1297, 1297, 1297, 1657, 1657, 1657, 1657,  852,
      406, 1658, 1659, 1660, 1661, 1662, 1663, 2563, 1666, 1664,
     1667, 1668,  851,  851,  851,  851, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,  406,
     1658, 1659, 1660, 1661, 1662, 1663, 1665, 1666, 1664, 1667,
     1668, 1682, 1683, 1684, 1685, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1686, 1687,
     1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1698,
     1682, 1683, 1684, 1685, 1701, 1702, 1703, 1704, 1705, 1706,
     1699, 1707, 1708, 1709, 1710, 1711, 1712, 1686, 1687, 1688,

     1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1698, 1713,
     1714, 1715, 1716, 1701, 1702, 1703, 1704, 1705, 1706, 1699,
     1707, 1708, 1709, 1710, 1711, 1712, 1717, 1718, 1719, 1720,
     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1713, 1714,
     1715, 1716, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
     1737, 1738, 1739, 1740, 1741, 1717, 1718, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1742, 1743, 1744,
     1745, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
     1738, 1739, 1740, 1741, 1746, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1742, 1743, 1744, 1745,

     1758, 1759, 1760, 1761, 1762, 1763, 1765, 1766, 1767, 1768,
     1769, 1770, 1771, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
     1753, 1754, 1755, 1756, 1757, 1772, 1773, 1774, 1775, 1758,
     1759, 1760, 1761, 1762, 1763, 1765, 1766, 1767, 1768, 1769,
     1770, 1771, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1787, 1788, 1772, 1773, 1774, 1775, 1789, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
     1801, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1788, 1802, 1803, 1804, 1805, 1789, 1790, 1791,
     1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,

     1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
     1816, 1817, 1802, 1803, 1804, 1805, 1818, 1819, 1820, 1821,
     1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1806,
     1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
     1817, 1832, 1833, 1835, 1836, 1818, 1819, 1820, 1821, 1823,
     1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1837, 1838,
     1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
     1832, 1833, 1835, 1836, 1849, 1850, 1851, 1852, 1853, 1854,
     1855, 1571, 1571, 1571, 1571, 1857, 1858, 1837, 1838, 1839,
     1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1859,

     1860, 1861, 1862, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1863, 1864, 1865, 1866, 1857, 1858, 1867, 1868, 1869, 1870,
     1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1859, 1860,
     1861, 1862, 1879, 1880, 1882, 1883, 1884, 1885, 1886, 1863,
     1864, 1865, 1866, 1887, 1888, 1867, 1868, 1869, 1870, 1871,
     1872, 1873, 1874, 1875, 1876, 1877, 1878, 1889, 1890, 1891,
     1892, 1879, 1880, 1882, 1883, 1884, 1885, 1886, 1894, 1895,
     1896, 1897, 1887, 1888, 1898, 1899, 1900, 1901, 1902, 1903,
     1904, 1905, 1906, 1907, 1908, 1909, 1889, 1890, 1891, 1892,
     1910, 1911, 1912, 1913, 1914, 2563, 2563, 1894, 1895, 1896,

     1897, 2563, 2563, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1909, 1654, 1654, 1654, 1654, 1910,
     1911, 1912, 1913, 1914, 1916, 1916, 1916, 1916, 1917, 1917,
     1917, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
     1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
     1936, 1937, 1938, 1939, 1940, 1941, 1943, 1944, 1945, 1946,
     1947, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1937, 1938, 1939, 1940, 1941, 1943, 1944, 1945, 1946, 1947,
     1948, 1949, 1950, 1951, 1952, 1953, 1955, 1956, 1957, 1958,

     1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
     1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1948,
     1949, 1950, 1951, 1952, 1953, 1955, 1956, 1957, 1958, 1959,
     1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
     1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2004, 2005, 2006, 1978, 1979, 1980,
     1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
     1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,

     2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
     2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
     2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2034, 2035, 2007, 2008, 2009, 2010, 2011,
     2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
     2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2050,
     2050, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
     2059, 2060, 2061, 2036, 2037, 2038, 2039, 2040, 2041, 2042,

     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2062, 2063, 2064,
     2065, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
     2074, 2075, 2076, 2077, 2078, 2079, 2062, 2063, 2064, 2065,
     2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2563, 2563,
     2563, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
     2075, 2076, 2077, 2078, 2079, 2088, 2088, 2088, 2088, 2080,
     2081, 2082, 2083, 2084, 2085, 2086, 2087, 1916, 1916, 1916,
     1916, 2089, 2089, 2089, 2089, 2090, 2091, 2092, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,

     2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
     2115, 2116, 2117, 2118, 2090, 2091, 2092, 2093, 2094, 2095,
     2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
     2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
     2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
     2126, 2127, 2128, 2129, 2130, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
     2147, 2148, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,

     2148, 2149, 2150, 2151, 2152, 2153, 2155, 2156, 2157, 2158,
     2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
     2169, 2170, 2171, 2172, 2050, 2050, 2050, 2050, 2173, 2174,
     2149, 2150, 2151, 2152, 2153, 2155, 2156, 2157, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2175, 2176, 2178, 2179, 2173, 2174, 2180,
     2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
     2191, 2192, 2193, 2194, 2195, 2088, 2088, 2088, 2088, 2196,
     2197, 2198, 2175, 2176, 2178, 2179, 2199, 2201, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,

     2192, 2193, 2194, 2195, 1916, 1916, 1916, 1916, 2196, 2197,
     2198, 2202, 2203, 2204, 2205, 2199, 2201, 2206, 2207, 2208,
     2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
     2219, 2220, 2221, 2563, 2563, 2228, 2229, 2230, 2231, 2232,
     2202, 2203, 2204, 2205, 2233, 2234, 2206, 2207, 2208, 2209,
     2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
     2220, 2221, 2222, 2223, 2228, 2229, 2230, 2231, 2232, 2235,
     2236, 2237, 2238, 2233, 2234, 2224, 2239, 2225, 2226, 2227,
     2240, 2241, 2242, 2243, 2244, 2251, 2563, 2252, 2563, 2563,
     2563, 2222, 2223, 2253, 2254, 2255, 2256, 2257, 2235, 2236,

     2237, 2238, 2245, 2246, 2224, 2239, 2225, 2226, 2227, 2240,
     2241, 2242, 2243, 2244, 2251, 2247, 2252, 2248, 2249, 2250,
     2258, 2259, 2253, 2254, 2255, 2256, 2257, 2260, 2261, 2262,
     2263, 2245, 2246, 2264, 2265, 2266, 2267, 2274, 2268, 2269,
     2275, 2276, 2277, 2278, 2247, 2279, 2248, 2249, 2250, 2258,
     2259, 2270, 2280, 2271, 2272, 2273, 2260, 2261, 2262, 2263,
     2281, 2282, 2264, 2265, 2266, 2267, 2274, 2268, 2269, 2275,
     2276, 2277, 2278, 2283, 2279, 2284, 2285, 2286, 2287, 2288,
     2270, 2280, 2271, 2272, 2273, 2289, 2290, 2297, 2298, 2281,
     2282, 2299, 2300, 2301, 2302, 2303, 2291, 2292, 2304, 2305,

     2306, 2307, 2283, 2308, 2284, 2285, 2286, 2287, 2288, 2293,
     2309, 2294, 2295, 2296, 2289, 2290, 2297, 2298, 2310, 2311,
     2299, 2300, 2301, 2302, 2303, 2291, 2292, 2304, 2305, 2306,
     2307, 2312, 2308, 2313, 2316, 2317, 2318, 2319, 2293, 2309,
     2294, 2295, 2296, 2320, 2321, 2314, 2322, 2310, 2311, 2315,
     2323, 2324, 2325, 2326, 2327, 2328, 2330, 2331, 2332, 2329,
     2312, 2333, 2313, 2316, 2317, 2318, 2319, 2334, 2335, 2336,
     2337, 2338, 2320, 2321, 2314, 2322, 2339, 2340, 2315, 2323,
     2324, 2325, 2326, 2327, 2328, 2330, 2331, 2332, 2329, 2341,
     2333, 2342, 2344, 2345, 2346, 2343, 2334, 2335, 2336, 2337,

     2338, 2347, 2348, 2349, 2350, 2339, 2340, 2351, 2352, 2353,
     2354, 2355, 2356, 2358, 2359, 2360, 2357, 2361, 2341, 2362,
     2342, 2344, 2345, 2346, 2343, 2363, 2364, 2365, 2366, 2367,
     2347, 2348, 2349, 2350, 2368, 2369, 2351, 2352, 2353, 2354,
     2355, 2356, 2358, 2359, 2360, 2357, 2361, 2370, 2362, 2371,
     2372, 2373, 2374, 2375, 2363, 2364, 2365, 2366, 2367, 2376,
     2377, 2378, 2379, 2368, 2369, 2380, 2381, 2382, 2383, 2384,
     2385, 2386, 2387, 2388, 2389, 2390, 2370, 2391, 2371, 2372,
     2373, 2374, 2375, 2392, 2393, 2394, 2395, 2396, 2376, 2377,
     2378, 2379, 2397, 2398, 2380, 2381, 2382, 2383, 2384, 2385,

     2386, 2387, 2388, 2389, 2390, 2399, 2391, 2400, 2401, 2402,
     2403, 2404, 2392, 2393, 2394, 2395, 2396, 2405, 2406, 2407,
     2408, 2397, 2398, 2409, 2410, 2411, 2412, 2413, 2414, 2415,
     2416, 2417, 2418, 2419, 2399, 2420, 2400, 2401, 2402, 2403,
     2404, 2421, 2422, 2423, 2424, 2425, 2405, 2406, 2407, 2408,
     2426, 2427, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,
     2417, 2418, 2419, 2428, 2420, 2429, 2430, 2431, 2432, 2433,
     2421, 2422, 2423, 2424, 2425, 2434, 2435, 2436, 2437, 2426,
     2427, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446,
     2447, 2448, 2428, 2449, 2429, 2430, 2431, 2432, 2433, 2450,

     2451, 2452, 2453, 2454, 2434, 2435, 2436, 2437, 2455, 2456,
     2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447,
     2448, 2457, 2449, 2458, 2459, 2460, 2461, 2462, 2450, 2451,
     2452, 2453, 2454, 2463, 2464, 2465, 2466, 2455, 2456, 2467,
     2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477,
     2457, 2478, 2458, 2459, 2460, 2461, 2462, 2479, 2480, 2481,
     2482, 2483, 2463, 2464, 2465, 2466, 2484, 2485, 2467, 2468,
     2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2486,
     2478, 2487, 2488, 2489, 2490, 2492, 2479, 2480, 2481, 2482,
     2483, 2494, 2496, 2498, 2499, 2484, 2485, 2500, 2501, 2502,

     2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2486, 2511,
     2487, 2488, 2489, 2490, 2492, 2512, 2513, 2514, 2515, 2516,
     2494, 2496, 2498, 2499, 2517, 2518, 2500, 2501, 2502, 2503,
     2504, 2505, 2506, 2507, 2508, 2509, 2510, 2519, 2511, 2520,
     2521, 2522, 2523, 2524, 2512, 2513, 2514, 2515, 2516, 2525,
     2526, 2527, 2528, 2517, 2518, 2529, 2530, 2531, 2532, 2533,
     2534, 2535, 2536, 2537, 2538, 2543, 2519, 2544, 2520, 2521,
     2522, 2523, 2524, 2545, 2546, 2547, 2548, 2549, 2525, 2526,
     2527, 2528, 2550, 2551, 2529, 2530, 2531, 2532, 2533, 2534,
     2535, 2536, 2537, 2538, 2543, 2552, 2544, 2553, 2554, 2555,

     2556, 2557, 2545, 2546, 2547, 2548, 2549, 2558, 2559, 2560,
     2561, 2550, 2551, 2562, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2552, 2563, 2553, 2554, 2555, 2556,
     2557, 2563, 2563, 2563, 2563, 2563, 2558, 2559, 2560, 2561,
     2563, 2563, 2562,  234, 2563,  234,  234,  314, 2563,  314,
     2563,  314,  321,  321,  321,  321,  321,  321,  407, 2563,
      407,  407,  407,  407,  407,  407,  407,  409, 2563, 2563,
      409,  409,  409, 2563,  409,  409,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  854,  854,  854,  854,  854,
      854,  854,  854,  854, 1656, 2563, 1656, 1656, 1656, 1656,

     1656, 1656, 1656,   13, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563
    } ;

static const flex_int16_t yy_chk[5686] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7, 2570,    7,    7,    7,    7,    7,
        8, 2538,    8,    8,    8,    8,    8,    9, 2537,    9,
        9,    9,    9,    9,   10, 2536,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   15, 2535,   15,   21,   21,   24,   25,   24,
       30,   26,   25,   33,   24,   31,   25,   24,   26,   25,
       43,   45,   25,   57,   60,   26,  115,  115,   26,   31,
     2489,   26,   25, 2486, 2483,   71,   24,   25,   24,   30,
       26,   25,   33,   24,   31,   25,   24,   26,   25,   43,

       45,   25,   57,   60,   26,   27,   28,   26,   31,   27,
       26,   25,   29,   27,   71,   28,   73,   28, 2480,   27,
       29,   32,   28,   29, 2289,   28,   29,   28,   32,   29,
     2266, 2243,   29,   32,   27,   28,   86,   89,   27,   34,
     2220,   29,   27,   34,   28,   73,   28,   34,   27,   29,
       32,   28,   29,   34,   28,   29,   28,   32,   29,   35,
       36,   29,   32,   58,  100,   86,   89,   35,   34,   38,
      102,  124,   34,   35,   36, 2099,   34,   58, 2060,   36,
       36, 2022,   34,   38, 1985, 1710,   38,   39,   35,   36,
      127,   39,   58,  100, 1687,   39,   35,  137,   38,  102,

      124,   39,   35,   36,   41,   41,   58,   40,   36,   36,
       37, 1624,   38,   37,   41,   38,   39,   40,  139,  127,
       39,   37,   40,   40,   39,   37,  137,   37,   37,   37,
       39, 1601, 1540,   41,   41,   42,   40,   42,  150,   37,
       42, 1517,   37,   41,  151,   44,   40,  139,   44,   44,
       37,   40,   40, 1458,   37,   44,   37,   37,   37,   48,
       48,   48,   48,  107,   42,  107,   42,  150,  142,   42,
      142, 1435,   48,  151,   44, 1350, 1346,   44,   44,   49,
       49,   49,   49,   49,   44,   50,   50,   50,   50,   50,
       51,  152,   51,   49,   52,  153,   53,   51,   52,   50,

       51,   48,   52,   53,   70,   52,   70, 1236,   52,   70,
       53, 1232,   49,   53, 1124,  410,   53,  410,   52,   51,
      152,   51,   49,   52,  153,   53,   51,   52,   50,   51,
     1120,   52,   53,   70,   52,   70,   54,   52,   70,   53,
       54,   49,   53,   55,   54,   53,   59,   52, 1016,   63,
       54, 1012,   55,   59,   55,  922,  865,   63,   59,   55,
       56,  799,   55,   63,   55,   54,  742,  681,   56,   54,
      624,   56,   55,   54,   56,   59,  148,   56,   63,   54,
       56,   55,   59,   55,  148,   66,   63,   59,   55,   56,
       62,   55,   63,   55,   62,  154,   64,   56,   62,   66,

       56,  154,   66,   56,   62,  148,   56,  155,   87,   56,
       64,   69,   69,  148,   66,   64,   64,  564,  156,   62,
      507,   69,   87,   62,  154,   64,  158,   62,   66,  496,
      154,   66, 1570,   62, 1570,  144,  155,   87,  159,   64,
       69,   69,  161,   68,   64,   64,   65,  156,   67,   65,
       69,   87,   67,   68,  125,  158,   67,   65,   68,   68,
      162,   65,   67,   65,   65,   65,   72,  159,  125,   72,
       72,  161,   68,  141,  117,   65,   72,   67,   65,  113,
      109,   67,   68,  125,   46,   67,   65,   68,   68,  162,
       65,   67,   65,   65,   65,   72,   23,  125,   72,   72,

       78,   78,   78,   78,   79,   72,   79,   79,   79,   79,
       79,   88,   80,   78,   80,  165,   20,   82,   88,   80,
       79,   81,   80,   88,   82,   81,  126,  166,  167,   81,
       17,   82,   81,  126,   82,   81,   13,   82,  126,    0,
       88,   80,   78,   80,  165,   81,   82,   88,   80,   79,
       81,   80,   88,   82,   81,  126,  166,  167,   81,   84,
       82,   81,  126,   82,   81,   83,   82,  126,   84,   83,
       84,  149,  168,   83,   81,   84,   85,   91,   84,   83,
       84,   91,    0,  169,   85,   91,    0,   85,   84,  170,
       85,   91,  149,   85,   83,    0,   85,   84,   83,   84,

      149,  168,   83,   92,   84,   85,   91,   84,   83,   84,
       91,   92,  169,   85,   91,   93,   85,   92,  170,   85,
       91,  149,   85,   96,   95,   85,  171,   96,  173,   93,
      174,   96,   92,   97,   93,   93,    0,   96,   95,    0,
       92,   95,    0,   97,   93, 1655,   92, 1655,   97,   97,
      175,    0,   96,   95,    0,  171,   96,  173,   93,  174,
       96,  177,   97,   93,   93,   94,   96,   95,   94,   99,
       95,   99,   97,  129,   99,  178,   94,   97,   97,  175,
       94,  129,   94,   94,   94,   98,   98,  129,  179,  101,
      177,  163,  101,  101,   94,   98,  163,   94,   99,  101,

       99,    0,  129,   99,  178,   94,    0,    0,    0,   94,
      129,   94,   94,   94,   98,   98,  129,  179,  101,    0,
      163,  101,  101,    0,   98,  163,    0,    0,  101,  103,
      103,  103,  103,  104,    0,  104,  104,  104,  104,  104,
      180,    0,  103,  105,  105,  105,  105,    0,  118,  104,
      118,  181,  119,  132,    0,  118,  119,  136,  118,  136,
      119,    0,  136,  119,  182,    0,  119,  132,    0,  180,
      132,  103,  185,    0,    0,  191,  119,  118,  104,  118,
      181,  119,  132,  120,  118,  119,  136,  118,  136,  119,
      120,  136,  119,  182,  121,  119,  132,  120,  121,  132,

      120,  185,  121,  120,  191,  119,  135,  135,  121,  122,
      190,    0,  120,    0,  190,    0,  135,    0,  122,  120,
      122,    0,    0,  121,    0,  122,  120,  121,  122,  120,
      122,  121,  120,    0,  172,  135,  135,  121,  122,  190,
      172,  186,  128,  190,  123,  135,  128,  122,  130,  122,
      128,  172,  123,  186,  122,  123,  128,  122,  123,  122,
      187,  123,  130,  172,  123,  187,    0,  130,  130,  172,
      186,  128,    0,  123,  192,  128,    0,  130,  193,  128,
      172,  123,  186,    0,  123,  128,    0,  123,    0,  187,
      123,  130,    0,  123,  187,  134,  130,  130,  131,    0,

      133,  131,  196,  192,  133,  134,  164,  193,  133,  131,
      134,  134,  164,  131,  133,  131,  131,  131,  138,  164,
        0,  138,  138,    0,  134,    0,    0,  131,  138,  133,
      131,  196,    0,  133,  134,  164,    0,  133,  131,  134,
      134,  164,  131,  133,  131,  131,  131,  138,  164,  176,
      138,  138,  160,  160,  160,  176,  197,  138,  176,  183,
      188,  160,  188,  189,  183,  183,  194,  195,  195,  194,
      198,  199,  189,  200,  201,  202,  203,  204,  176,  205,
      206,  160,  160,  160,  176,  197,  207,  176,  183,  188,
      160,  188,  189,  183,  183,  194,  195,  195,  194,  198,

      199,  189,  200,  201,  202,  203,  204,  208,  205,  206,
      209,  210,  211,  212,  213,  207,  214,  215,  216,  219,
      220,  211,  210,  218,  217,  208,  216,  214,  221,  211,
      218,  219,  218,  222,  221,  223,  208,  224,  225,  209,
      210,  211,  212,  213,  217,  214,  215,  216,  219,  220,
      211,  210,  218,  217,  208,  216,  214,  221,  211,  218,
      219,  218,  222,  221,  223,  226,  224,  225,  228,  228,
      228,  228,  229,  217,  229,    0,  229,  229,  229,  229,
      237,  228,  230,  230,  230,  230,  231,  231,  231,  231,
      231,  236,  238,  239,  226,  230,  240,  232,  235,  232,

      231,  232,  232,  232,  232,  241,  235,  242,  243,  237,
      228,  241,  236,  245,  246,  248,  249,  247,  247,  247,
      236,  238,  239,  250,  230,  240,  247,  235,  250,  231,
      252,  253,  254,  255,  241,  235,  242,  243,  256,  257,
      241,  236,  245,  246,  248,  249,  247,  247,  247,  258,
      251,  260,  250,  261,  262,  247,  251,  250,  259,  252,
      253,  254,  255,  251,  259,  263,  264,  256,  257,  265,
      266,  263,  267,  268,  263,  259,  269,  272,  258,  251,
      260,  274,  261,  262,  270,  251,  274,  259,  276,  270,
      270,  278,  251,  259,  263,  264,  273,  276,  265,  266,

      263,  267,  268,  263,  259,  269,  272,  275,  273,  275,
      274,  279,  277,  270,  280,  274,  277,  276,  270,  270,
      278,  281,  282,  282,  281,  273,  276,  283,  284,  285,
      286,  287,  288,  289,  290,  291,  275,  273,  275,  292,
      279,  277,  293,  280,  294,  277,  296,  295,  299,    0,
      281,  282,  282,  281,  300,  297,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  295,  297,  302,  292,  298,
      301,  293,  303,  294,  307,  296,  295,  299,  298,  306,
      303,  301,  304,  300,  297,  309,  298,  308,  310,  311,
      312,  306,  313,  308,  295,  297,  302,  305,  298,  301,

        0,  303,  304,  307,  305,    0,  305,  298,  306,  303,
      301,  304,    0,    0,  309,  298,  308,  310,  311,  312,
      306,  313,  308,    0,    0,    0,  305,  315,  315,  315,
      315,  304,  316,  305,  316,  305,  316,  316,  316,  316,
      315,  317,  317,  317,  317,  318,  318,  318,  318,  319,
      323,  319,  319,  319,  319,  319,  324,  320,  318,  320,
      322,  320,  320,  320,  320,  319,  325,  326,  322,  315,
      327,  323,  328,  329,  330,  332,  333,  335,  328,  323,
      336,  334,  334,  334,  339,  324,  337,  318,  340,  322,
      334,  337,    0,  341,  319,  325,  326,  322,  342,  327,

      323,  328,  329,  330,  332,  333,  335,  328,  338,  336,
      334,  334,  334,  339,  338,  337,  343,  340,  344,  334,
      337,  338,  341,  345,  346,  347,  348,  342,  349,  350,
      346,  351,  352,  353,  354,  350,  355,  338,  350,  356,
      359,  346,    0,  338,  360,  343,  361,  344,    0,    0,
      338,  361,  345,  346,  347,  348,  360,  349,  350,  346,
      351,  352,  353,  354,  350,  355,  357,  350,  356,  359,
      346,  357,  357,  360,  362,  361,  362,  363,  364,  365,
      361,  366,  364,  367,  368,  360,  363,  368,  369,  369,
      370,  371,  372,  373,  374,  357,  375,  376,  377,  378,

      357,  357,  379,  362,  380,  362,  363,  364,  365,  381,
      366,  364,  367,  368,  382,  363,  368,  369,  369,  370,
      371,  372,  373,  374,  383,  375,  376,  377,  378,  384,
      385,  379,  382,  380,  386,  387,  389,  388,  381,  385,
      384,  390,  391,  382,  393,  392,  394,  385,  388,  390,
      396,  395,  392,  383,  392,  397,  393,  395,  384,  385,
      398,  382,  391,  386,  387,  389,  388,  399,  385,  384,
      390,  391,  400,  393,  392,  394,  385,  388,  390,  396,
      395,  392,    0,  392,  397,  393,  395,  418,    0,  398,
        0,  391,  401,  401,  401,  401,  399,  403,  403,  403,

      403,  400,  402,    0,  402,  401,  402,  402,  402,  402,
      403,  404,  404,  404,  404,  405,  418,  405,  405,  405,
      405,  405,  406,  419,  406,    0,  406,  406,  406,  406,
      408,  405,  417,  416,  401,  407,  407,  407,  407,  403,
        0,  416,  420,  408,  408,  408,  408,  412,  412,  421,
      412,  422,  419,  417,  412,  423,  424,  422,  426,  427,
      405,  417,  416,  429,  430,  412,  433,    0,  434,  412,
      416,  420,  428,  428,  428,  435,  436,  432,  421,  437,
      422,  428,  417,  432,  423,  424,  422,  426,  427,  431,
      432,  438,  429,  430,  431,  433,  412,  434,  439,  441,

      442,  428,  428,  428,  435,  436,  432,  440,  437,  443,
      428,  445,  432,  440,  446,  447,  444,  448,  431,  432,
      438,  449,  444,  431,  440,  444,  450,  439,  441,  442,
      453,  456,  455,  456,    0,  454,  440,  455,  443,  457,
      445,  459,  440,  446,  447,  444,  448,  454,  457,  460,
      449,  444,  451,  440,  444,  450,  461,  451,  451,  453,
      456,  455,  456,  458,  454,  464,  455,  458,  457,  462,
      459,  465,  462,  463,  463,  466,  454,  457,  460,  467,
      468,  451,  469,  470,  471,  461,  451,  451,  472,  473,
      474,  475,  458,  477,  464,  478,  458,  476,  462,  480,

      465,  462,  463,  463,  466,  481,  478,  483,  467,  468,
      482,  469,  470,  471,  479,  476,  488,  472,  473,  474,
      475,  482,  477,  479,  478,  484,  476,  485,  480,  487,
      490,  479,  489,  484,  481,  478,  483,  491,  489,  482,
      492,  487,  486,  479,  476,  488,  493,  485,  494,  486,
      482,  486,  479,  499,  484,  504,  485,  505,  487,  490,
      479,  489,  484,  506,  508,  509,  491,  489,  510,  492,
      487,  486,  511,  512,  513,  493,  485,  494,  486,  514,
      486,  515,  499,  510,  504,  516,  505,  518,  520,  521,
      517,  522,  506,  508,  509,  523,  524,  510,  525,  526,

      528,  511,  512,  513,  517,  517,  529,  531,  514,  532,
      515,  533,  510,  534,  516,  530,  518,  520,  521,  517,
      522,  535,  530,  536,  523,  524,  537,  525,  526,  528,
      538,  539,  540,  517,  517,  529,  531,  541,  532,  542,
      533,  543,  534,  544,  530,  545,  546,  547,  548,  550,
      535,  530,  536,  551,  552,  537,  553,  547,  554,  538,
      539,  540,  555,  556,  557,  559,  541,  547,  542,  560,
      543,  561,  544,  565,  545,  546,  566,  548,  550,  567,
      568,  569,  551,  552,  570,  553,  547,  554,  571,  572,
      573,  555,  556,  557,  559,  574,  547,  575,  560,  576,

      561,  577,  565,  578,  579,  566,  580,  581,  567,  568,
      569,  582,  583,  570,  584,  586,  587,  571,  572,  573,
      582,  588,  590,  591,  574,  592,  575,  593,  576,  594,
      577,  595,  578,  579,  597,  580,  581,  596,  598,  596,
      582,  583,  599,  584,  586,  587,  600,  601,  602,  603,
      588,  590,  591,  604,  592,  605,  593,  604,  594,  606,
      595,  607,    0,  597,    0,    0,  596,  598,  596,    0,
        0,  599,    0,    0,    0,  600,  601,  602,  603,    0,
        0,    0,  604,    0,  605,    0,  604,    0,  606,    0,
      607,  608,  608,  608,  608,  609,  609,  609,  609,  610,

      610,  610,  610,  611,  616,  611,  621,  611,  611,  611,
      611,  622,  610,  612,  612,  612,  612,  613,  613,  613,
      613,  623,  625,  626,  627,  628,  629,  630,  631,  632,
      633,  634,  635,  616,  637,  621,  638,  639,  640,  627,
      622,  610,  641,  642,  643,  634,  634,  645,  646,  648,
      623,  625,  626,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  647,  637,  649,  638,  639,  640,  627,  647,
      650,  641,  642,  643,  634,  634,  645,  646,  648,  651,
      652,  653,  654,  655,  656,  657,  658,  659,  660,  661,
      662,  647,  663,  649,  665,  667,  668,  669,  647,  650,

      670,    0,  671,  672,  673,  674,  676,  677,  651,  652,
      653,  654,  655,  656,  657,  658,  659,  660,  661,  662,
      664,  663,  678,  665,  667,  668,  669,  682,  683,  670,
      664,  671,  672,  673,  674,  676,  677,  684,  685,  686,
      664,  687,  688,  689,  690,  691,  692,  693,  694,  695,
      696,  678,  697,  698,  699,  700,  682,  683,  701,  664,
      703,  704,  705,  699,  707,  708,  684,  685,  686,  664,
      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      709,  697,  698,  699,  700,  710,  711,  701,  712,  703,
      704,  705,  714,  707,  708,  713,  715,  713,  716,  717,

      718,  719,  720,  721,  722,  723,  724,  721,    0,  709,
      725,  725,  725,  725,  710,  711,    0,  712,    0,    0,
        0,  714,    0,  734,  713,  715,  713,  716,  717,  718,
      719,  720,  721,  722,  723,  724,  721,  726,  726,  726,
      726,  727,  727,  727,  727,  728,  728,  728,  728,  729,
      739,  729,  734,  729,  729,  729,  729,  730,  728,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  732,  732,
      732,  732,  740,  730,  741,  743,  744,  745,  746,  739,
      747,  748,  749,  750,  751,  752,  753,  728,  755,  756,
      757,  758,  745,  759,  760,  761,  763,  764,    0,  752,

      752,  740,  730,  741,  743,  744,  745,  746,  766,  747,
      748,  749,  750,  751,  752,  753,  767,  755,  756,  757,
      758,  745,  759,  760,  761,  763,  764,  765,  752,  752,
      768,  769,  770,  771,  765,  772,  773,  766,  774,  775,
      776,  777,  778,  779,  780,  767,  781,    0,  783,  785,
      786,  787,  788,  789,  790,  791,  765,    0,  792,  768,
      769,  770,  771,  765,  772,  773,  782,  774,  775,  776,
      777,  778,  779,  780,  794,  781,  782,  783,  785,  786,
      787,  788,  789,  790,  791,  795,  782,  792,  796,  800,
      801,  802,  803,  804,  805,  806,  807,  808,  809,  810,

      811,  812,  813,  794,  814,  782,  815,  816,  818,  819,
      821,  822,    0,  823,  795,  782,  825,  796,  800,  801,
      802,  803,  804,  805,  806,  807,  808,  809,  810,  811,
      812,  813,  817,  814,  826,  815,  816,  818,  819,  821,
      822,  817,  823,  827,  828,  825,  829,  830,  831,  832,
      831,  833,  834,  835,  836,  837,  838,  840,  839,  841,
      842,  817,  839,  826,  843,  843,  843,  843,  844,  844,
      844,  844,  827,  828,    0,  829,  830,  831,  832,  831,
      833,  834,  835,  836,  837,  838,  840,  839,  841,  842,
        0,  839,  845,  845,  845,  845,  846,    0,  846,    0,

      846,  846,  846,  846,  857,  845,  847,  847,  847,  847,
      848,    0,  848,  848,  848,  848,  848,  849,  849,  849,
      849,  850,  850,  850,  850,  851,  848,  852,  852,  852,
      852,  853,  862,  857,  845,  863,  864,  866,  851,  851,
      851,  851,    0,  867,  853,  853,  853,  853,  868,  854,
      854,  869,  854,  870,  871,  848,  854,  872,  873,  874,
      875,  862,  876,  868,  863,  864,  866,  854,  878,    0,
      879,  854,  867,  880,  875,  875,  881,  868,  882,  883,
      869,  884,  870,  871,  886,  887,  872,  873,  874,  875,
      889,  876,  868,  888,  890,  891,  892,  878,  854,  879,

      888,  893,  880,  875,  875,  881,  894,  882,  883,  895,
      884,  896,  897,  886,  887,  898,  899,  900,  901,  889,
      902,  903,  888,  890,  891,  892,  904,  906,  908,  888,
      893,  909,  905,  910,  911,  894,  912,  913,  895,  914,
      896,  897,  905,  915,  898,  899,  900,  901,  917,  902,
      903,  918,  905,  919,  923,  904,  906,  908,  924,  925,
      909,  926,  910,  911,  927,  912,  913,  928,  914,  929,
      930,  905,  915,  931,  932,  933,  934,  917,  935,  936,
      918,  905,  919,  923,  937,  938,  939,  924,  925,  941,
      926,  940,  942,  927,  944,  945,  928,  946,  929,  930,

      940,  948,  931,  932,  933,  934,  949,  935,  936,  950,
      951,  952,  953,  937,  938,  939,  955,  954,  941,  954,
      940,  942,  956,  944,  945,  957,  946,  958,  959,  960,
      948,  961,  962,  963,  964,  949,  962,  965,  950,  951,
      952,  953,  966,  967,  968,  955,  954,  969,  954,  970,
      972,  956,  976,  975,  957,  977,  958,  959,  960,  978,
      961,  962,  963,  964,  979,  962,  965,  980,  981,  982,
      983,  966,  967,  968,  984,  985,  969,  986,  970,  972,
      975,  976,  975,  988,  977,  989,  990,  992,  978,  993,
      994,  995,  996,  979,  997,  998,  980,  981,  982,  983,

      999, 1000, 1001,  984,  985, 1002,  986, 1003, 1006, 1007,
     1009, 1010,  988, 1011,  989,  990,  992, 1013,  993,  994,
      995,  996, 1020,  997,  998, 1022, 1023, 1024, 1013,  999,
     1000, 1001, 1025, 1026, 1002, 1027, 1003, 1006, 1007, 1009,
     1010, 1028, 1011, 1029, 1030, 1031, 1013, 1033, 1034, 1035,
     1037, 1020, 1038, 1039, 1022, 1023, 1024, 1013, 1040, 1042,
     1043, 1025, 1026, 1044, 1027, 1046, 1047, 1048, 1050, 1051,
     1028, 1054, 1029, 1030, 1031, 1055, 1033, 1034, 1035, 1037,
     1057, 1038, 1039, 1058, 1059, 1060, 1061, 1040, 1042, 1043,
     1062, 1063, 1044, 1064, 1046, 1047, 1048, 1050, 1051, 1065,

     1054, 1068, 1069, 1074, 1055, 1072, 1072, 1072, 1072, 1057,
     1075, 1076, 1058, 1059, 1060, 1061, 1077, 1078, 1080, 1062,
     1063, 1083, 1064, 1073, 1073, 1073, 1073, 1084, 1065, 1085,
     1068, 1069, 1074, 1086, 1087, 1088, 1089, 1090, 1091, 1075,
     1076, 1092, 1093, 1094, 1096, 1077, 1078, 1080, 1083, 1097,
     1083, 1098, 1100, 1101, 1102, 1103, 1084, 1104, 1085, 1105,
     1106, 1107, 1086, 1087, 1088, 1089, 1090, 1091, 1108, 1109,
     1092, 1093, 1094, 1096, 1110, 1111, 1114, 1115, 1097, 1117,
     1098, 1100, 1101, 1102, 1103, 1118, 1104, 1119, 1105, 1106,
     1107, 1121, 1128, 1130, 1131, 1132, 1133, 1108, 1109, 1134,

     1135, 1136, 1121, 1110, 1111, 1114, 1115, 1137, 1117, 1138,
     1139, 1141, 1142, 1143, 1118, 1145, 1119, 1146, 1147, 1148,
     1121, 1128, 1130, 1131, 1132, 1133, 1150, 1151, 1134, 1135,
     1136, 1121, 1152, 1154, 1155, 1156, 1137, 1158, 1138, 1139,
     1141, 1142, 1143, 1159, 1145, 1162, 1146, 1147, 1148, 1163,
     1165, 1166, 1167, 1168, 1169, 1150, 1151, 1170, 1171, 1172,
     1173, 1152, 1154, 1155, 1156, 1176, 1158, 1177, 1180, 1180,
     1180, 1180, 1159,    0, 1162,    0,    0,    0, 1163, 1165,
     1166, 1167, 1168, 1169,    0, 1186, 1170, 1171, 1172, 1173,
     1181, 1181, 1181, 1181, 1176, 1187, 1177, 1182, 1182, 1182,

     1182, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184,
     1185, 1185, 1185, 1185, 1186, 1188, 1189, 1190, 1192, 1184,
        0, 1196, 1195, 1197, 1187, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1188, 1189, 1190, 1192, 1184, 1195,
     1196, 1195, 1197, 1219, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1220, 1221, 1222, 1223, 1226, 1227, 1229,
     1230, 1231, 1219, 1233, 1240, 1242, 1243, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1233, 1251, 1253, 1254, 1255, 1257,

     1258, 1259, 1220, 1221, 1222, 1223, 1226, 1227, 1229, 1230,
     1231, 1260, 1233, 1240, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1233, 1251, 1253, 1254, 1255, 1257, 1258,
     1259, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1271, 1274,
     1260, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
     1285, 1288, 1289, 1292, 1292, 1292, 1292,    0,    0,    0,
     1262, 1263, 1264, 1266, 1267, 1268, 1270, 1271, 1274,    0,
     1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1288, 1289, 1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294,
     1295, 1295, 1295, 1295, 1296,    0,    0, 1296, 1296, 1296,

     1296, 1297, 1297, 1297, 1297, 1298, 1298, 1298, 1298, 1299,
     1296, 1300, 1301, 1302, 1303, 1304, 1306,    0, 1310, 1309,
     1311, 1312, 1299, 1299, 1299, 1299, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1296,
     1300, 1301, 1302, 1303, 1304, 1306, 1309, 1310, 1309, 1311,
     1312, 1328, 1329, 1330, 1331, 1313, 1314, 1315, 1316, 1317,
     1318, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1332, 1333,
     1334, 1335, 1336, 1337, 1340, 1341, 1343, 1344, 1345, 1347,
     1328, 1329, 1330, 1331, 1354, 1356, 1357, 1358, 1359, 1360,
     1347, 1361, 1362, 1363, 1364, 1365, 1367, 1332, 1333, 1334,

     1335, 1336, 1337, 1340, 1341, 1343, 1344, 1345, 1347, 1368,
     1369, 1371, 1372, 1354, 1356, 1357, 1358, 1359, 1360, 1347,
     1361, 1362, 1363, 1364, 1365, 1367, 1373, 1374, 1376, 1377,
     1378, 1380, 1381, 1382, 1384, 1385, 1388, 1389, 1368, 1369,
     1371, 1372, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1402, 1403, 1407, 1408, 1373, 1374, 1376, 1377, 1378,
     1380, 1381, 1382, 1384, 1385, 1388, 1389, 1409, 1410, 1411,
     1412, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1402, 1403, 1407, 1408, 1413, 1414, 1415, 1416, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1426, 1409, 1410, 1411, 1412,

     1427, 1428, 1430, 1431, 1432, 1433, 1437, 1438, 1441, 1442,
     1444, 1446, 1447, 1413, 1414, 1415, 1416, 1419, 1420, 1421,
     1422, 1423, 1424, 1425, 1426, 1448, 1452, 1454, 1455, 1427,
     1428, 1430, 1431, 1432, 1433, 1437, 1438, 1441, 1442, 1444,
     1446, 1447, 1459, 1461, 1463, 1464, 1465, 1467, 1469, 1470,
     1471, 1472, 1473, 1474, 1448, 1452, 1454, 1455, 1475, 1476,
     1477, 1479, 1480, 1481, 1484, 1485, 1487, 1489, 1490, 1491,
     1492, 1459, 1461, 1463, 1464, 1465, 1467, 1469, 1470, 1471,
     1472, 1473, 1474, 1493, 1494, 1495, 1496, 1475, 1476, 1477,
     1479, 1480, 1481, 1484, 1485, 1487, 1489, 1490, 1491, 1492,

     1497, 1498, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
     1509, 1510, 1493, 1494, 1495, 1496, 1512, 1513, 1514, 1515,
     1519, 1520, 1523, 1524, 1526, 1528, 1529, 1530, 1534, 1497,
     1498, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1536, 1537, 1541, 1543, 1512, 1513, 1514, 1515, 1519,
     1520, 1523, 1524, 1526, 1528, 1529, 1530, 1534, 1545, 1546,
     1547, 1549, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1536, 1537, 1541, 1543, 1559, 1561, 1562, 1563, 1566, 1567,
     1569, 1571, 1571, 1571, 1571, 1573, 1574, 1545, 1546, 1547,
     1549, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1575,

     1576, 1577, 1578, 1559, 1561, 1562, 1563, 1566, 1567, 1569,
     1579, 1580, 1581, 1582, 1573, 1574, 1585, 1586, 1587, 1588,
     1589, 1590, 1591, 1592, 1593, 1594, 1596, 1597, 1575, 1576,
     1577, 1578, 1598, 1599, 1603, 1604, 1607, 1608, 1610, 1579,
     1580, 1581, 1582, 1612, 1613, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1596, 1597, 1614, 1618, 1620,
     1621, 1598, 1599, 1603, 1604, 1607, 1608, 1610, 1625, 1627,
     1629, 1630, 1612, 1613, 1631, 1633, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1643, 1645, 1614, 1618, 1620, 1621,
     1646, 1647, 1650, 1651, 1653,    0,    0, 1625, 1627, 1629,

     1630,    0,    0, 1631, 1633, 1635, 1636, 1637, 1638, 1639,
     1640, 1641, 1642, 1643, 1645, 1654, 1654, 1654, 1654, 1646,
     1647, 1650, 1651, 1653, 1656, 1656, 1656, 1656, 1657, 1657,
     1657, 1657, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
     1667, 1668, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1682, 1683, 1684, 1685, 1689, 1690, 1693, 1694,
     1696, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
     1668, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
     1680, 1682, 1683, 1684, 1685, 1689, 1690, 1693, 1694, 1696,
     1698, 1699, 1700, 1704, 1706, 1707, 1711, 1713, 1715, 1716,

     1717, 1719, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1731, 1732, 1733, 1736, 1737, 1739, 1740, 1741, 1698,
     1699, 1700, 1704, 1706, 1707, 1711, 1713, 1715, 1716, 1717,
     1719, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1731, 1732, 1733, 1736, 1737, 1739, 1740, 1741, 1743, 1744,
     1745, 1746, 1747, 1749, 1750, 1751, 1753, 1754, 1756, 1758,
     1761, 1763, 1764, 1765, 1766, 1770, 1771, 1772, 1774, 1775,
     1776, 1779, 1780, 1781, 1782, 1783, 1784, 1743, 1744, 1745,
     1746, 1747, 1749, 1750, 1751, 1753, 1754, 1756, 1758, 1761,
     1763, 1764, 1765, 1766, 1770, 1771, 1772, 1774, 1775, 1776,

     1779, 1780, 1781, 1782, 1783, 1784, 1788, 1789, 1790, 1791,
     1793, 1796, 1798, 1799, 1801, 1802, 1803, 1804, 1805, 1807,
     1808, 1809, 1811, 1812, 1814, 1816, 1819, 1821, 1822, 1823,
     1824, 1828, 1829, 1830, 1832, 1788, 1789, 1790, 1791, 1793,
     1796, 1798, 1799, 1801, 1802, 1803, 1804, 1805, 1807, 1808,
     1809, 1811, 1812, 1814, 1816, 1819, 1821, 1822, 1823, 1824,
     1828, 1829, 1830, 1832, 1833, 1834, 1837, 1838, 1839, 1840,
     1841, 1842, 1846, 1847, 1848, 1849, 1851, 1854, 1856, 1856,
     1856, 1856, 1857, 1858, 1860, 1861, 1862, 1863, 1864, 1866,
     1867, 1868, 1870, 1833, 1834, 1837, 1838, 1839, 1840, 1841,

     1842, 1846, 1847, 1848, 1849, 1851, 1854, 1871, 1873, 1875,
     1878, 1857, 1858, 1860, 1861, 1862, 1863, 1864, 1866, 1867,
     1868, 1870, 1880, 1881, 1882, 1883, 1887, 1888, 1889, 1891,
     1892, 1893, 1896, 1897, 1898, 1899, 1871, 1873, 1875, 1878,
     1900, 1901, 1905, 1906, 1907, 1908, 1910, 1913,    0,    0,
        0, 1880, 1881, 1882, 1883, 1887, 1888, 1889, 1891, 1892,
     1893, 1896, 1897, 1898, 1899, 1915, 1915, 1915, 1915, 1900,
     1901, 1905, 1906, 1907, 1908, 1910, 1913, 1916, 1916, 1916,
     1916, 1917, 1917, 1917, 1917, 1918, 1919, 1921, 1922, 1923,
     1924, 1925, 1927, 1928, 1929, 1931, 1932, 1934, 1936, 1939,

     1941, 1942, 1943, 1944, 1948, 1949, 1950, 1952, 1953, 1954,
     1957, 1958, 1959, 1960, 1918, 1919, 1921, 1922, 1923, 1924,
     1925, 1927, 1928, 1929, 1931, 1932, 1934, 1936, 1939, 1941,
     1942, 1943, 1944, 1948, 1949, 1950, 1952, 1953, 1954, 1957,
     1958, 1959, 1960, 1961, 1962, 1966, 1967, 1968, 1969, 1971,
     1974, 1976, 1978, 1980, 1981, 1986, 1988, 1989, 1992, 1993,
     1996, 1997, 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007,
     2008, 2009, 1961, 1962, 1966, 1967, 1968, 1969, 1971, 1974,
     1976, 1978, 1980, 1981, 1986, 1988, 1989, 1992, 1993, 1996,
     1997, 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007, 2008,

     2009, 2010, 2013, 2015, 2017, 2018, 2023, 2025, 2026, 2029,
     2030, 2033, 2034, 2036, 2037, 2038, 2039, 2040, 2042, 2043,
     2044, 2045, 2046, 2047, 2050, 2050, 2050, 2050, 2051, 2053,
     2010, 2013, 2015, 2017, 2018, 2023, 2025, 2026, 2029, 2030,
     2033, 2034, 2036, 2037, 2038, 2039, 2040, 2042, 2043, 2044,
     2045, 2046, 2047, 2055, 2056, 2061, 2063, 2051, 2053, 2064,
     2067, 2068, 2071, 2072, 2074, 2075, 2076, 2077, 2078, 2080,
     2081, 2082, 2083, 2084, 2085, 2088, 2088, 2088, 2088, 2090,
     2092, 2094, 2055, 2056, 2061, 2063, 2095, 2100, 2064, 2067,
     2068, 2071, 2072, 2074, 2075, 2076, 2077, 2078, 2080, 2081,

     2082, 2083, 2084, 2085, 2089, 2089, 2089, 2089, 2090, 2092,
     2094, 2102, 2103, 2106, 2107, 2095, 2100, 2110, 2111, 2113,
     2114, 2115, 2116, 2117, 2119, 2120, 2121, 2122, 2123, 2124,
     2128, 2129, 2130,    0,    0, 2134, 2135, 2136, 2137, 2138,
     2102, 2103, 2106, 2107, 2139, 2140, 2110, 2111, 2113, 2114,
     2115, 2116, 2117, 2119, 2120, 2121, 2122, 2123, 2124, 2128,
     2129, 2130, 2131, 2131, 2134, 2135, 2136, 2137, 2138, 2141,
     2143, 2145, 2146, 2139, 2140, 2131, 2147, 2131, 2131, 2131,
     2148, 2149, 2151, 2152, 2153, 2157,    0, 2158,    0,    0,
        0, 2131, 2131, 2159, 2160, 2161, 2162, 2163, 2141, 2143,

     2145, 2146, 2154, 2154, 2131, 2147, 2131, 2131, 2131, 2148,
     2149, 2151, 2152, 2153, 2157, 2154, 2158, 2154, 2154, 2154,
     2164, 2166, 2159, 2160, 2161, 2162, 2163, 2168, 2169, 2170,
     2171, 2154, 2154, 2172, 2174, 2175, 2176, 2180, 2177, 2177,
     2181, 2182, 2183, 2184, 2154, 2185, 2154, 2154, 2154, 2164,
     2166, 2177, 2186, 2177, 2177, 2177, 2168, 2169, 2170, 2171,
     2187, 2189, 2172, 2174, 2175, 2176, 2180, 2177, 2177, 2181,
     2182, 2183, 2184, 2191, 2185, 2192, 2193, 2194, 2195, 2197,
     2177, 2186, 2177, 2177, 2177, 2198, 2199, 2203, 2204, 2187,
     2189, 2205, 2206, 2207, 2208, 2209, 2200, 2200, 2210, 2212,

     2214, 2215, 2191, 2216, 2192, 2193, 2194, 2195, 2197, 2200,
     2217, 2200, 2200, 2200, 2198, 2199, 2203, 2204, 2218, 2219,
     2205, 2206, 2207, 2208, 2209, 2200, 2200, 2210, 2212, 2214,
     2215, 2221, 2216, 2222, 2224, 2225, 2226, 2227, 2200, 2217,
     2200, 2200, 2200, 2228, 2229, 2223, 2232, 2218, 2219, 2223,
     2234, 2237, 2242, 2244, 2245, 2246, 2247, 2248, 2249, 2246,
     2221, 2250, 2222, 2224, 2225, 2226, 2227, 2251, 2252, 2255,
     2257, 2260, 2228, 2229, 2223, 2232, 2265, 2267, 2223, 2234,
     2237, 2242, 2244, 2245, 2246, 2247, 2248, 2249, 2246, 2268,
     2250, 2269, 2270, 2271, 2272, 2269, 2251, 2252, 2255, 2257,

     2260, 2273, 2274, 2275, 2278, 2265, 2267, 2280, 2283, 2288,
     2290, 2291, 2292, 2293, 2294, 2295, 2292, 2296, 2268, 2297,
     2269, 2270, 2271, 2272, 2269, 2298, 2301, 2303, 2306, 2312,
     2273, 2274, 2275, 2278, 2313, 2314, 2280, 2283, 2288, 2290,
     2291, 2292, 2293, 2294, 2295, 2292, 2296, 2315, 2297, 2316,
     2317, 2318, 2319, 2320, 2298, 2301, 2303, 2306, 2312, 2321,
     2323, 2326, 2327, 2313, 2314, 2328, 2329, 2330, 2331, 2332,
     2333, 2334, 2335, 2337, 2340, 2341, 2315, 2342, 2316, 2317,
     2318, 2319, 2320, 2343, 2344, 2345, 2346, 2347, 2321, 2323,
     2326, 2327, 2348, 2349, 2328, 2329, 2330, 2331, 2332, 2333,

     2334, 2335, 2337, 2340, 2341, 2351, 2342, 2354, 2355, 2356,
     2357, 2358, 2343, 2344, 2345, 2346, 2347, 2359, 2360, 2361,
     2362, 2348, 2349, 2363, 2365, 2368, 2369, 2370, 2371, 2372,
     2373, 2374, 2375, 2377, 2351, 2379, 2354, 2355, 2356, 2357,
     2358, 2380, 2381, 2382, 2383, 2384, 2359, 2360, 2361, 2362,
     2385, 2386, 2363, 2365, 2368, 2369, 2370, 2371, 2372, 2373,
     2374, 2375, 2377, 2388, 2379, 2390, 2391, 2392, 2393, 2394,
     2380, 2381, 2382, 2383, 2384, 2395, 2396, 2397, 2399, 2385,
     2386, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2410,
     2411, 2413, 2388, 2416, 2390, 2391, 2392, 2393, 2394, 2417,

     2420, 2422, 2425, 2426, 2395, 2396, 2397, 2399, 2429, 2431,
     2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2410, 2411,
     2413, 2434, 2416, 2435, 2438, 2440, 2443, 2444, 2417, 2420,
     2422, 2425, 2426, 2447, 2448, 2449, 2450, 2429, 2431, 2451,
     2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461,
     2434, 2462, 2435, 2438, 2440, 2443, 2444, 2463, 2464, 2466,
     2467, 2468, 2447, 2448, 2449, 2450, 2470, 2471, 2451, 2452,
     2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2472,
     2462, 2474, 2475, 2476, 2478, 2481, 2463, 2464, 2466, 2467,
     2468, 2484, 2487, 2490, 2491, 2470, 2471, 2492, 2493, 2494,

     2495, 2496, 2497, 2498, 2499, 2501, 2503, 2505, 2472, 2507,
     2474, 2475, 2476, 2478, 2481, 2508, 2509, 2510, 2511, 2512,
     2484, 2487, 2490, 2491, 2513, 2514, 2492, 2493, 2494, 2495,
     2496, 2497, 2498, 2499, 2501, 2503, 2505, 2515, 2507, 2516,
     2517, 2518, 2519, 2520, 2508, 2509, 2510, 2511, 2512, 2521,
     2522, 2523, 2524, 2513, 2514, 2525, 2526, 2527, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2539, 2515, 2540, 2516, 2517,
     2518, 2519, 2520, 2541, 2542, 2543, 2544, 2545, 2521, 2522,
     2523, 2524, 2546, 2547, 2525, 2526, 2527, 2528, 2529, 2530,
     2531, 2532, 2533, 2534, 2539, 2548, 2540, 2549, 2550, 2551,

     2552, 2553, 2541, 2542, 2543, 2544, 2545, 2554, 2555, 2556,
     2557, 2546, 2547, 2558,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2548,    0, 2549, 2550, 2551, 2552,
     2553,    0,    0,    0,    0,    0, 2554, 2555, 2556, 2557,
        0,    0, 2558, 2564,    0, 2564, 2564, 2565,    0, 2565,
        0, 2565, 2566, 2566, 2566, 2566, 2566, 2566, 2567,    0,
     2567, 2567, 2567, 2567, 2567, 2567, 2567, 2568,    0,    0,
     2568, 2568, 2568,    0, 2568, 2568, 2569, 2569, 2569, 2569,
     2569, 2569, 2569, 2569, 2569, 2571, 2571, 2571, 2571, 2571,
     2571, 2571, 2571, 2571, 2572,    0, 2572, 2572, 2572, 2572,

     2572, 2572, 2572, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32	gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
		SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);	    

#define SQL_NEW_KEYWORD(token) \
		SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
	yyget_extra(yyscanner)->SQLyyerror(msg); \
}													

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int SQLyylex_init (yyscan_t* scanner);

int SQLyylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int SQLyylex_destroy ( yyscan_t yyscanner );



int SQLyyget_debug ( yyscan_t yyscanner );



void SQLyyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE SQLyyget_extra ( yyscan_t yyscanner );



void SQLyyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *SQLyyget_in ( yyscan_t yyscanner );



void SQLyyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *SQLyyget_out ( yyscan_t yyscanner );



void SQLyyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int SQLyyget_leng ( yyscan_t yyscanner );



char *SQLyyget_text ( yyscan_t yyscanner );



int SQLyyget_lineno ( yyscan_t yyscanner );



void SQLyyset_lineno ( int _line_number , yyscan_t yyscanner );




int SQLyyget_column  ( yyscan_t yyscanner );





void SQLyyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * SQLyyget_lval ( yyscan_t yyscanner );


void SQLyyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap ( yyscan_t yyscanner );
#else
extern int SQLyywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int SQLyylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int SQLyylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		SQLyy_load_buffer_state(yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2564 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2563 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 146:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 147:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 148:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 149:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 150:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 151:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 152:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 153:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 157:
case 158:
case 159:
case 160:
case 161:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 166:
case 167:
case 168:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 169:
case 170:
case 171:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 172:
case 173:
case 174:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 175:
case 176:
case 177:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 179:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 180:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }											 
	YY_BREAK
case 181:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 183:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }	
	YY_BREAK
case 184:
/* rule 184 can match eol */
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 187:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 190:
YY_RULE_SETUP
{}
	YY_BREAK
case 191:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 192:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 193:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( SQLyywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of SQLyylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2564 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2564 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2563);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	SQLyy_load_buffer_state(yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void SQLyy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file ,yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf ,yyscanner );

	SQLyyfree((void *) b ,yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	SQLyy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack(yyscanner);

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void SQLyypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)SQLyyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b ,yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return SQLyy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) SQLyyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE SQLyyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int SQLyyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *SQLyyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int SQLyyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *SQLyyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void SQLyyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void SQLyyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void SQLyyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "SQLyyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void SQLyyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int SQLyyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void SQLyyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * SQLyyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void SQLyyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* SQLyylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int SQLyylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* SQLyylex_init_extra has the same functionality as SQLyylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to SQLyyalloc in
 * the yyextra field.
 */
int SQLyylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    SQLyyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) SQLyyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    SQLyyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}


/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	SQLyyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        SQLyyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    SQLyyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *SQLyyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *SQLyyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void SQLyyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr yytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput (yyscanner);
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput (yyscanner);
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	while (!checkeof(ch = yyinput(yyscanner))) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput(yyscanner)) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
        {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
        }
    return nTokenID;
    }
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
	sal_Int32 nToken;
	OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	    {
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	    }
    }
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		    {
		    Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
		    size_t nLength = strlen(text);
		    size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
		    if (sStmt[nPos] == ':')
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			    nToken = SQL_TOKEN_NAME; 				
		        }
		    else
		        {
			    SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
			    nToken = SQL_TOKEN_STRING;			
		        }
		    }
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(0), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    //yy_scan_string(rNewStatement, yyscanner);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    //struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    //yy_delete_buffer(YY_CURRENT_BUFFER);
    yylex_destroy(&yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
	    return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
        {
	    m_sErrorMessage.append(": ");
	    Utf8String aError;
	    static sal_Int32 BUFFERSIZE = 256;
	    static sal_Char* Buffer = 0;
	    if(!Buffer)
		    Buffer = new sal_Char[BUFFERSIZE];

	    sal_Char *s = Buffer;
	    sal_Int32 nPos = 1;
	    sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
	    *s++ = ch;
	    while (!checkeof(ch = yyinput(yyscanner))) 
	        {
		    if (ch == ' ') 
		        {
			    if ((ch = yyinput(yyscanner)) != ' ') 
			        {
				    if (!checkeof(ch))
					    unput(ch);
			        }
			    *s = '\0';
			    aError.assign(Buffer);
			    break;
		        }
		    else
		        {
			    *s++ = ch;
			    if (++nPos == BUFFERSIZE)
			        {
				    Utf8String aBuf(Buffer);
				    delete[] Buffer;
				    BUFFERSIZE *=2;
				    Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
					    *Buffer = aBuf[i];
				    s = &Buffer[nPos];
			        }
		        }
	        }

	    m_sErrorMessage += aError;
	    delete[] Buffer;
	    Buffer = NULL;
        }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }


//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {		
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
    }
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
    {
    return SQLyylex(nullptr, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(pNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(_rNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

