#line 2 "D:\\bsw\\git-native-sync\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1584] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,  145,  151,  149,  147,  146,  149,   95,  110,  107,
      138,  110,   96,   98,   97,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  106,  105,  136,  110,
      112,  112,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  139,  137,  140,  110,  110,  120,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  110,  120,  149,  145,  145,  145,  145,  143,
       95,  110,  107,  110,  110,  110,   96,   98,   97,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      144,  106,  105,  147,  102,    0,  104,  108,   99,  101,
      100,  109,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   45,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,   67,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  103,  114,
      115,  112,    0,    0,  111,  111,  111,    4,  111,  111,
      111,  111,  111,  111,   12,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,   45,   52,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,   65,   67,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  135,  125,  135,  135,  135,  120,  135,  119,  119,

      119,    4,  119,  119,  119,  119,  119,  119,   12,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,   45,   52,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,   65,   67,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  131,  135,  135,  135,  120,
      135,    0,  141,  145,  145,  102,  145,  104,  108,   99,
      101,  100,  109,  145,  145,    4,  145,  145,  145,  145,
      145,  145,   12,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   45,   52,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,   65,
       67,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  103,
        0,  148,    1,    2,    3,    5,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,   38,    0,    0,    0,    0,   44,    0,    0,
       48,    0,    0,    0,    0,    0,    0,    0,   59,   60,

        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   76,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  115,
        0,    0,  116,  113,    1,    2,    3,    5,    6,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,   28,  111,  111,  111,
      111,  111,  111,  111,   38,  111,  111,  111,  111,   44,
      111,  111,   48,  111,  111,  111,  111,  111,  111,  111,
       59,   60,  111,   62,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   76,  111,  111,   79,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
        0,  128,  135,  123,  135,  120,    0,  126,    1,    2,
        3,    5,    6,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
       28,  119,  119,  119,  119,  119,  119,  119,   38,  119,
      119,  119,  119,   44,  119,  119,   48,  119,  119,  119,
      119,  119,  119,  119,   59,   60,  119,   62,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   76,
      119,  119,   79,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,    0,  134,  129,  135,  135,  120,

        0,  132,  141,    0,  141,  145,  145,    1,    2,    3,
        5,    6,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,   28,
      145,  145,  145,  145,  145,  145,  145,   38,  145,  145,
      145,  145,   44,  145,  145,   48,  145,  145,  145,  145,
      145,  145,  145,   59,   60,  145,   62,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,   76,  145,
      145,   79,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,    0,    0,    0,   10,    0,   13,   14,
        0,    0,    0,    0,   21,    0,   23,    0,    0,    0,

       27,    0,    0,    0,    0,    0,    0,    0,    0,   40,
       41,    0,    0,    0,    0,    0,    0,   51,   53,   36,
       54,   55,    0,   57,    0,    0,   63,    0,   66,    0,
        0,    0,   71,    0,    0,    0,    0,   77,    0,   80,
       81,   83,    0,    0,    0,    0,    0,    0,    0,   92,
        0,   94,    0,  118,    0,  117,  111,  111,  111,   10,
      111,   13,   14,  111,  111,  111,  111,   21,  111,   23,
      111,  111,  111,   27,  111,  111,  111,  111,  111,  111,
      111,  111,   40,   41,  111,  111,  111,  111,  111,  111,
       51,   53,   36,   54,   55,  111,   57,  111,  111,   63,

      111,   66,  111,  111,  111,   71,  111,  111,  111,  111,
       77,  111,   80,   81,   83,  111,  111,  111,  111,  111,
      111,  111,   92,  111,   94,  128,  135,    0,  127,  120,
      126,  119,  119,  119,   10,  119,   13,   14,  119,  119,
      119,  119,   21,  119,   23,  119,  119,  119,   27,  119,
      119,  119,  119,  119,  119,  119,  119,   40,   41,  119,
      119,  119,  119,  119,  119,   51,   53,   36,   54,   55,
      119,   57,  119,  119,   63,  119,   66,  119,  119,  119,
       71,  119,  119,  119,  119,   77,  119,   80,   81,   83,
      119,  119,  119,  119,  119,  119,  119,   92,  119,   94,

      134,    0,  133,  135,  120,  132,    0,  141,  145,  145,
      145,   10,  145,   13,   14,  145,  145,  145,  145,   21,
      145,   23,  145,  145,  145,   27,  145,  145,  145,  145,
      145,  145,  145,  145,   40,   41,  145,  145,  145,  145,
      145,  145,   51,   53,   36,   54,   55,  145,   57,  145,
      145,   63,  145,   66,  145,  145,  145,   71,  145,  145,
      145,  145,   77,  145,   80,   81,   83,  145,  145,  145,
      145,  145,  145,  145,   92,  145,   94,    0,    0,    0,
        0,    0,   16,   17,    0,    0,    0,    0,    0,    0,
       30,    0,    0,   33,   35,   34,    0,   42,    0,   46,

        0,   49,    0,    0,   56,   58,    0,   37,    0,   68,
       69,    0,    0,   73,    0,    0,    0,    0,   84,    0,
        0,    0,   88,   89,    0,   93,  111,  111,  111,  111,
      111,   16,   17,  111,  111,  111,  111,  111,  111,   30,
      111,  111,   33,   35,   34,  111,   42,  111,   46,  111,
       49,  111,  111,   56,   58,  111,   37,  111,   68,   69,
      111,  111,   73,  111,  111,  111,  111,   84,  111,  111,
      111,   88,   89,  111,   93,  121,  127,  119,  119,  119,
      119,  119,   16,   17,  119,  119,  119,  119,  119,  119,
       30,  119,  119,   33,   35,   34,  119,   42,  119,   46,

      119,   49,  119,  119,   56,   58,  119,   37,  119,   68,
       69,  119,  119,   73,  119,  119,  119,  119,   84,  119,
      119,  119,   88,   89,  119,   93,  133,  122,    0,  142,
      145,  145,  145,  145,  145,   16,   17,  145,  145,  145,
      145,  145,  145,   30,  145,  145,   33,   35,   34,  145,
       42,  145,   46,  145,   49,  145,  145,   56,   58,  145,
       37,  145,   68,   69,  145,  145,   73,  145,  145,  145,
      145,   84,  145,  145,  145,   88,   89,  145,   93,    0,
        0,    9,    0,   15,    0,   22,    0,   25,    0,   29,
       31,   32,    0,   43,   47,    0,    0,    0,   64,   70,

        0,    0,   75,   78,    0,   85,    0,   87,   90,    0,
      111,  111,    9,  111,   15,  111,   22,  111,   25,  111,
       29,   31,   32,  111,   43,   47,  111,  111,  111,   64,
       70,  111,  111,   75,   78,  111,   85,  111,   87,   90,
      111,  135,  119,  119,    9,  119,   15,  119,   22,  119,
       25,  119,   29,   31,   32,  119,   43,   47,  119,  119,
      119,   64,   70,  119,  119,   75,   78,  119,   85,  119,
       87,   90,  119,  135,  142,  142,  145,  145,    9,  145,
       15,  145,   22,  145,   25,  145,   29,   31,   32,  145,
       43,   47,  145,  145,  145,   64,   70,  145,  145,   75,

       78,  145,   85,  145,   87,   90,  145,    0,    8,   11,
        0,    0,    0,   39,   48,    0,   61,    0,    0,    0,
       86,   91,  111,    8,   11,  111,  111,  111,   39,   48,
      111,   61,  111,  111,  111,   86,   91,  124,  119,    8,
       11,  119,  119,  119,   39,   48,  119,   61,  119,  119,
      119,   86,   91,  130,  142,  145,    8,   11,  145,  145,
      145,   39,   48,  145,   61,  145,  145,  145,   86,   91,
        7,    0,   24,    0,    0,    0,   74,    0,    7,  111,
       24,  111,  111,  111,   74,  111,    7,  119,   24,  119,
      119,  119,   74,  119,    7,  145,   24,  145,  145,  145,

       74,  145,    0,    0,    0,   50,   72,   82,  111,  111,
      111,   50,   72,   82,  119,  119,  119,   50,   72,   82,
      145,  145,  145,   50,   72,   82,    0,    0,    0,  111,
      111,  111,  119,  119,  119,  145,  145,  145,    0,    0,
        0,  111,  111,  111,  119,  119,  119,  145,  145,  145,
       18,   19,   26,   18,   19,   26,   18,   19,   26,   18,
       19,   26,    0,  111,  119,  145,    0,  111,  119,  145,
        0,  111,  119,  145,    0,  111,  119,  145,   20,   20,
       20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1593] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  509, 3612,  359, 3612,  481, 3612, 3612, 3612,
     3612,  346,  341, 3612,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  415,  437,  350,
      447,  448,  458,  459,  412,  462,  392, 3612, 3612,  516,
      521,  526,  510,  529,  522,  541,  574,  590,  402,  456,
      575,  446,    0,  634,  527,  580,  586,  446,  633,  636,
      636,  636,  473,  638, 3612, 3612, 3612,    0,  695,  702,
      687,  707,  703,  751,  743,  762,  459,  532,  696,  520,
        0,  763,  538,  758,  799,  531,  806,  809,  810,  817,

      579,  705,  874,  881,  666,    0,  393,    0,  428, 3612,
        0,    0,    0,    0,  375, 3612,  728,    0,  490,  813,
      876,  877,  888,  922,  930,  569,  589,  885,  582,  952,
      881,  928,  941,  585,  974,  980,  984,  921,  652,  761,
     3612,  367,    0,  549, 3612,  437, 3612, 3612, 3612, 3612,
     3612, 3612,  651,  990,  666,  695,  708,  700,  744,  795,
      801, 3612,  803,  984,  808,  808,  851,  868,  864,  863,
      933,  968,  994,  996,  998, 1001,  994,  989,  994,  993,
      998, 1005, 1004,  998, 1019, 1031, 3612, 1028, 1022, 1037,
     1042, 1033, 1032, 1043, 1038, 1039, 1048, 1055, 1050, 1059,

     1044, 1064, 1066, 1061, 1059, 1063, 1060, 1059, 1065, 1090,
     1086, 1080, 1094, 1104, 1100, 1098, 1106, 1093, 3612, 1126,
     1154, 1159, 1173,    0,    0, 1102, 1137, 1112, 1119, 1124,
     1109, 1143, 1154, 1156,    0, 1153, 1160, 1159, 1157, 1156,
     1165, 1159, 1158, 1161, 1163, 1179, 1182, 1182, 1186, 1178,
     1174, 1179, 1178, 1182, 1187, 1200, 1195, 1214, 1213,    0,
     1213, 1210, 1224, 1223, 1217, 1215, 1223, 1218, 1220, 1229,
     1236, 1231, 1241, 1227, 1247, 1249, 1246, 1242, 1266, 1242,
     1255, 1262, 1275, 1272, 1266, 1279, 1285, 1282, 1280, 1288,
     1274,    0, 1336, 1318, 1340, 1344, 1351, 1360,    0, 1283,

     1343, 1293, 1290, 1348, 1337, 1344, 1344, 1345,    0, 1342,
     1350, 1347, 1346, 1345, 1354, 1348, 1348, 1353, 1355, 1371,
     1374, 1374, 1396, 1369, 1364, 1368, 1366, 1392, 1397, 1399,
     1393, 1410, 1403,    0, 1409, 1400, 1414, 1413, 1407, 1405,
     1413, 1410, 1411, 1420, 1427, 1423, 1433, 1419, 1439, 1462,
     1434, 1430, 1455, 1444, 1454, 1460, 1469, 1463, 1456, 1469,
     1475, 1472, 1470, 1478, 1464, 1526, 1505, 1530, 1534, 1545,
     1553, 1559, 1564,    0,  636,    0, 1585,    0,    0,    0,
        0,    0,    0, 1473, 1551, 1484, 1508, 1529, 1529, 1552,
     1552, 1553,    0, 1550, 1559, 1556, 1555, 1554, 1563, 1558,

     1565, 1568, 1569, 1585, 1587, 1586, 1590, 1580, 1576, 1592,
     1590, 1595, 1601, 1599, 1602, 1619, 1612,    0, 1618, 1610,
     1624, 1622, 1620, 1620, 1624, 1621, 1625, 1634, 1641, 1636,
     1645, 1630, 1650, 1665, 1645, 1645, 1670, 1652, 1653, 1659,
     1678, 1671, 1664, 1678, 1684, 1682, 1680, 1688, 1676,    0,
      430, 3612, 3612, 3612, 3612, 3612, 3612, 1688, 1679, 1702,
     1702, 1693, 1703, 1693, 1693, 1690, 1692, 1710, 1719, 1723,
     1709, 1728, 1723, 1736, 3612, 1741, 1725, 1740, 1727, 1728,
     1729, 1748, 1727, 1738, 1742, 1735, 1748, 3612, 1755, 1756,
     1786, 1749, 1744, 1745, 1761, 1758, 1761, 1770, 3612, 3612,

     1761, 3612, 1772, 1768, 1763, 1793, 1794, 1793, 1791, 1783,
     1797, 1794, 1802, 3612, 1803, 1800, 3612, 1796, 1807, 1809,
     1804, 1801, 1817, 1808, 1802, 1821, 1828, 1817, 1867, 1871,
     1889, 1875, 1893,    0,    0,    0,    0,    0,    0, 1834,
     1826, 1871, 1871, 1868, 1884, 1877, 1877, 1873, 1875, 1889,
     1890, 1893, 1877, 1896, 1882, 1895,    0, 1902, 1888, 1902,
     1889, 1891, 1892, 1911, 1890, 1901, 1903, 1895, 1908,    0,
     1925, 1926, 1943, 1920, 1927, 1929, 1945, 1942, 1945, 1950,
        0,    0, 1933,    0, 1943, 1937, 1932, 1956, 1957, 1957,
     1953, 1945, 1959, 1956, 1964,    0, 1965, 1962,    0, 1958,

     1968, 1969, 1989, 1974, 1988, 1978, 1984, 2004, 1994, 2001,
     2021, 2030, 2034, 2050, 2058, 2065, 2069, 2073,    0,    0,
        0,    0,    0, 1999, 1988, 2019, 2045, 2057, 2066, 2059,
     2059, 2055, 2057, 2072, 2073, 2076, 2060, 2079, 2065, 2078,
        0, 2084, 2069, 2083, 2070, 2071, 2072, 2091, 2070, 2081,
     2083, 2075, 2088,    0, 2100, 2108, 2132, 2114, 2109, 2110,
     2126, 2123, 2126, 2132,    0,    0, 2115,    0, 2126, 2120,
     2115, 2136, 2138, 2137, 2133, 2125, 2140, 2137, 2145,    0,
     2146, 2143,    0, 2139, 2149, 2150, 2170, 2149, 2170, 2172,
     2167, 2186, 2176, 2183, 2203, 2209, 2216, 2234, 2238, 2246,

     2250, 2254, 2274, 2261, 2279, 2285,    0,    0,    0,    0,
        0,    0, 2194, 2184, 2257, 2257, 2248, 2256, 2251, 2261,
     2258, 2260, 2274, 2277, 2281, 2266, 2289, 2275, 2289,    0,
     2294, 2278, 2292, 2279, 2280, 2281, 2300, 2279, 2290, 2297,
     2289, 2305,    0, 2311, 2312, 2339, 2304, 2299, 2302, 2328,
     2326, 2329, 2334,    0,    0, 2319,    0, 2329, 2323, 2324,
     2345, 2347, 2346, 2343, 2335, 2349, 2346, 2354,    0, 2355,
     2352,    0, 2349, 2362, 2363, 2357, 2361, 2375, 2363, 2359,
     2388, 2380, 2385, 2372, 2394, 2382, 3612, 2397, 3612, 3612,
     2398, 2388, 2391, 2406, 3612, 2392, 3612, 2404, 2402, 2403,

     3612, 2400, 2392, 2402, 2399, 2416, 2405, 2406, 2429, 3612,
     3612, 2416, 2419, 2416, 2417,  408, 2431, 3612, 3612, 3612,
     3612, 3612, 2431, 3612, 2444, 2435, 2437, 2452, 3612, 2440,
     2442, 2452, 3612, 2448, 2448, 2467, 2467, 3612, 2457, 3612,
     2453, 3612, 2459, 2453, 2460, 2456, 2470, 2474, 2475, 3612,
     2479, 3612, 2498, 2522, 2526, 2530, 2484, 2504, 2492,    0,
     2506,    0,    0, 2517, 2507, 2509, 2524,    0, 2510,    0,
     2522, 2520, 2521,    0, 2518, 2510, 2521, 2521, 2537, 2523,
     2524, 2544,    0,    0, 2530, 2533, 2530, 2531,  376, 2547,
        0,    0,    0,    0,    0, 2530,    0, 2543, 2534, 2534,

     2562,    0, 2550, 2551, 2571,    0, 2567, 2566, 2585, 2585,
        0, 2575,    0, 2571,    0, 2577, 2571, 2578, 2575, 2592,
     2595, 2593,    0, 2597,    0, 2611, 2615, 2640, 2644, 2649,
     2653, 2600, 2621, 2609,    0, 2644,    0,    0, 2641, 2631,
     2634, 2652,    0, 2638,    0, 2650, 2648, 2649,    0, 2646,
     2638, 2648, 2645, 2661, 2647, 2648, 2668,    0,    0, 2654,
     2657, 2654, 2655,  372, 2667,    0,    0,    0,    0,    0,
     2655,    0, 2668, 2659, 2662, 2679,    0, 2689, 2690, 2696,
        0, 2693, 2692, 2713, 2713,    0, 2703,    0, 2699,    0,
     2705, 2699, 2706, 2702, 2716, 2719, 2717,    0, 2721,    0,

     2735, 2739, 2764, 2768, 2775, 2779, 2783, 2801, 2758, 2777,
     2765,    0, 2779,    0,    0, 2776, 2766, 2768, 2783,    0,
     2769,    0, 2781, 2779, 2780,    0, 2781, 2773, 2783, 2780,
     2796, 2782, 2783, 2803,    0,    0, 2789, 2792, 2789, 2790,
      366, 2831,    0,    0,    0,    0,    0, 2802,    0, 2815,
     2806, 2806, 2834,    0, 2822, 2823, 2829,    0, 2825, 2824,
     2843, 2843,    0, 2833,    0, 2829,    0, 2836, 2834, 2841,
     2837, 2851, 2854, 2852,    0, 2856,    0, 2861, 2858, 2839,
     2864, 2846, 3612, 3612, 2866, 2876, 2868, 2878, 2881, 2892,
     3612, 2878, 2880, 3612, 3612, 3612, 2882, 3612, 2894, 3612,

     2882, 3612, 2898, 2885, 3612, 3612, 2904, 3612, 2886, 3612,
     3612, 2906, 2889, 3612, 2912, 2894, 2908, 2896, 3612, 2912,
     2895, 2914, 3612, 2901, 2920, 3612, 2921, 2918, 2899, 2937,
     2919,    0,    0, 2926, 2936, 2940, 2950, 2941, 2952,    0,
     2938, 2940,    0,    0,    0, 2942,    0, 2954,    0, 2942,
        0, 2958, 2945,    0,    0, 2964,    0, 2946,    0,    0,
     2970, 2953,    0, 2972, 2954, 2968, 2956,    0, 2972, 2955,
     2974,    0, 2961, 2980,    0, 1134, 3004, 2981, 3007, 2988,
     3013, 2995,    0,    0, 3002, 3012, 3004, 3014, 3005, 3016,
        0, 3002, 3004,    0,    0,    0, 3006,    0, 3018,    0,

     3006,    0, 3022, 3009,    0,    0, 3028,    0, 3010,    0,
        0, 3030, 3013,    0, 3032, 3014, 3028, 3016,    0, 3032,
     3015, 3034,    0, 3021, 3069,    0, 3079, 1144, 3083, 3087,
     3082, 3079, 3060, 3085, 3067,    0,    0, 3074, 3084, 3076,
     3086, 3077, 3088,    0, 3074, 3076,    0,    0,    0, 3078,
        0, 3090,    0, 3078,    0, 3095, 3082,    0,    0, 3101,
        0, 3083,    0,    0, 3103, 3086,    0, 3105, 3087, 3101,
     3089,    0, 3105, 3088, 3123,    0, 3122, 3141,    0, 3125,
     3130, 3612, 3131, 3612, 3126, 3612, 3144, 3612, 3132, 3612,
     3612, 3612, 3145, 3612, 3612, 3132, 3146, 3140, 3612, 3612,

     3144, 3151, 3612, 3612, 3154, 3612, 3142, 3612, 3612, 3140,
     3141, 3146,    0, 3147,    0, 3142,    0, 3160,    0, 3148,
        0,    0,    0, 3161,    0,    0, 3148, 3162, 3156,    0,
        0, 3160, 3183,    0,    0, 3198,    0, 3186,    0,    0,
     3183, 3210, 3188, 3193,    0, 3194,    0, 3189,    0, 3207,
        0, 3195,    0,    0,    0, 3208,    0,    0, 3195, 3209,
     3204,    0,    0, 3208, 3215,    0,    0, 3218,    0, 3206,
        0,    0, 3203, 3230, 3239, 3259, 3208, 3213,    0, 3230,
        0, 3237,    0, 3255,    0, 3243,    0,    0,    0, 3256,
        0,    0, 3243, 3257, 3251,    0,    0, 3255, 3262,    0,

        0, 3265,    0, 3253,    0,    0, 3250, 3265, 3612, 3612,
      315, 3250, 3251, 3612, 3612, 3269, 3612, 3252, 3264, 3263,
     3612, 3612, 3273,    0,    0,  218, 3258, 3259,    0,    0,
     3277,    0, 3259, 3271, 3270,    0,    0, 3321, 3298,    0,
        0,  211, 3297, 3298,    0,    0, 3316,    0, 3298, 3310,
     3309,    0,    0, 3331, 3335, 3328,    0,    0,  204, 3313,
     3314,    0,    0, 3332,    0, 3314, 3326, 3325,    0,    0,
     3612, 3335, 3612, 3331, 3321, 3337, 3612, 3327,    0, 3340,
        0, 3336, 3332, 3348,    0, 3338,    0, 3355,    0, 3347,
     3337, 3353,    0, 3360,    0, 3373,    0, 3369, 3359, 3375,

        0, 3374, 3390, 3383, 3379, 3612, 3612, 3612, 3394, 3387,
     3382,    0,    0,    0, 3397, 3390, 3385,    0,    0,    0,
     3400, 3393, 3388,    0,    0,    0, 3390, 3398, 3398, 3393,
     3401, 3401, 3396, 3404, 3404, 3413, 3421, 3421, 3431, 3432,
     3419, 3443, 3444, 3431, 3446, 3447, 3434, 3449, 3450, 3437,
     3612, 3438, 3612,    0, 3439,    0,    0, 3440,    0,    0,
     3441,    0, 3441, 3448, 3449, 3450, 3470, 3471, 3472, 3473,
     3462, 3463, 3478, 3479, 3477, 3478, 3479, 3480, 3612,    0,
        0,    0, 3612, 3546, 3552, 3557, 3566, 3575, 3584,  245,
     3593, 3602

    } ;

static const flex_int16_t yy_def[1593] =
    {   0,
     1583,    1, 1583,    3, 1583,    5,    5,    5,    5,    5,
     1583,   11, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1583, 1583, 1583, 1585, 1585, 1585,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1585, 1585, 1587, 1588, 1588, 1588, 1588, 1583,
     1588, 1588, 1588, 1588, 1588, 1583, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1583, 1588, 1588, 1583, 1583, 1589, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1590, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1585, 1585, 1585, 1585, 1585,
     1585, 1587, 1587, 1588, 1588, 1588, 1591, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1589, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1590, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1583, 1585, 1585, 1585, 1585, 1585, 1583, 1585, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1583, 1585, 1585, 1585, 1585, 1585,

     1583, 1585, 1587, 1583, 1587, 1591, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1583, 1585, 1583, 1585, 1585,
     1583, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1583, 1583, 1585, 1585, 1585, 1583, 1592, 1587, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1585, 1583, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1583, 1585, 1592, 1592,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1585, 1592, 1592, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1585, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1585, 1592, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584,
     1584, 1584, 1584, 1584, 1586, 1586, 1586, 1586, 1586, 1586,
     1588, 1588, 1588, 1588, 1588, 1588, 1583, 1583, 1583, 1584,
     1584, 1584, 1586, 1586, 1586, 1588, 1588, 1588, 1583, 1583,
     1583, 1584, 1584, 1584, 1586, 1586, 1586, 1588, 1588, 1588,
     1583, 1583, 1583, 1584, 1584, 1584, 1586, 1586, 1586, 1588,
     1588, 1588, 1583, 1584, 1586, 1588, 1583, 1584, 1586, 1588,
     1583, 1584, 1586, 1588, 1583, 1584, 1586, 1588, 1583, 1584,
     1586, 1588,    0, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583

    } ;

static const flex_int16_t yy_nxt[3696] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      534,   78,  104,  104,  104,  104,  103, 1496,   78,  104,
      104,  104,  104,   19, 1488,   19,  105,  105,  105,  105,
       19, 1480,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1472,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1255,  164,  161,  170,  165,
      377, 1202,  166,  202,  375, 1151,  144,  162,  153,  378,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  202,  172,  186,  173,  162, 1102,  178,  187,
      174,  179,  452,  175,  180,  176,  193,  181,  216,  452,
      182,  195,  189,  171,  194,  256,  190,  450,  185,  177,
      191,  376,  172,  186,  173,  196,  192,  178,  187,  174,
      179,  197,  175,  180,  176,  193,  181,  216,  198,  182,
      195,  189,  219,  194,  256,  190,  199,  203,  206,  191,
      200,  204,  257,  201,  196,  192,  261,  205,  207,  275,
      197,  210,  211,  208,  209,  217,  218,  198,  213,  289,

      214,  212,  330,  215,  145,  199,  203,  206, 1583,  200,
      204,  257,  201,  382,  383,  261,  205,  207,  275, 1583,
      210,  211,  208,  209,  217,  218, 1583,  213,  289,  214,
      212,  330,  215,  220,  220,  220,  220,  221,  222,  222,
      222,  222,  221,  222,  222,  222,  222,  226,  236,  227,
      144,  223,  144,  266,  228,  230,  223,  229,  331,  231,
      335,  267,  237,  232,  340,  238,  233,  240,  239,  234,
      224,  241,  341, 1583,  349,  242,  226,  236,  227,  235,
      223,  243,  266,  228,  230,  223,  229,  331,  231,  335,
      267,  237,  232,  340,  238,  233,  240,  239,  234,  224,

      241,  341,  244,  349,  242,  363,  268, 1583,  235,  258,
      243,  245,  414,  246,  259,  415,  250,  271,  247,  260,
      269,  248,  419,  249,  251,  272,  270,  252,  433,  273,
      253,  244,  274,  254,  363,  268,  255,  375,  258,  144,
      245,  414,  246,  259,  415,  250,  271,  247,  260,  269,
      248,  419,  249,  251,  272,  270,  252,  433,  273,  253,
      262,  274,  254,  276,  263,  255,  279,  277,  264,  283,
      284,  290,  291,  278,  265,  286,  280,  287,  447,  285,
      288,  281,  282,  373,  373,  373,  373, 1583,  453,  262,
     1583, 1583,  276,  263,  456,  279,  277,  264,  283,  284,

      290,  291,  278,  265,  286,  280,  287,  447,  285,  288,
      281,  282,  293,  293,  293,  293,  295,  453,  296,  297,
      297,  297,  297,  456,  300,  294,  301,  457, 1583,  310,
      332,  302,  298,  304,  303,  333,  458,  305,  364,  365,
      334,  306, 1583,  311,  307,  459,  312,  308, 1583,  313,
      379,  380,  381,  300,  294,  301,  457,  309,  310,  332,
      302,  298,  304,  303,  333,  458,  305,  364,  365,  334,
      306,  318,  311,  307,  459,  312,  308,  314,  313, 1583,
      319,  315,  320,  460,  342,  316,  309,  321,  324,  336,
      322,  317,  323,  337,  448,  449,  325,  338,  343,  326,

      318, 1583,  327,  339,  344,  328,  314, 1583,  329,  319,
      315,  320,  460,  342,  316, 1583,  321,  324,  336,  322,
      317,  323,  337,  448,  449,  325,  338,  343,  326, 1583,
      345,  327,  339,  344,  328,  461,  350,  329,  346,  353,
      351,  462,  347,  357,  358,  348,  352,  463,  466,  354,
      384,  467,  385,  359,  355,  356,  360,  386,  361,  345,
      387,  362, 1583, 1583,  461,  350, 1583,  346,  353,  351,
      462,  347,  357,  358,  348,  352,  463,  466,  354,  384,
      467,  385,  359,  355,  356,  360,  386,  361, 1583,  387,
      362,  366,  366,  366,  366,  368,  468,  369,  370,  370,

      370,  370,  388,  394,  367,  469,  389,  424,  471,  472,
      390,  371,  470,  391,  398,  425,  392,  395,  399,  416,
      396, 1583,  400,  397,  417,  468,  393, 1583,  401,  418,
     1583,  388,  394,  367,  469,  389,  424,  471,  472,  390,
      371,  470,  391,  398,  425,  392,  395,  399,  416,  396,
      402,  400,  397,  417,  426,  393,  408,  401,  418,  403,
      444,  404,  445, 1583,  409,  446,  405,  410,  427,  406,
      411,  407,  429,  412,  428, 1583,  413,  473,  420,  402,
      430, 1583,  421,  426,  431,  408,  422,  432,  403,  444,
      404,  445,  423,  409,  446,  405,  410,  427,  406,  411,

      407,  429,  412,  428,  434,  413,  473,  420,  435,  430,
      437,  421,  474,  431,  436,  422,  432,  441,  442,  454,
      438,  423,  464,  475,  476,  439,  440,  443,  477,  478,
      465,  480,  481,  434,  482,  479,  483,  435,  484,  437,
      455,  474,  485,  436,  486,  487,  441,  442,  454,  438,
      488,  464,  475,  476,  439,  440,  443,  477,  478,  465,
      480,  481,  492,  482,  479,  483,  493,  484,  494,  455,
      489,  485,  497,  486,  487,  490,  491,  498,  495,  488,
      496,  499,  500,  501,  502,  503,  504,  505,  506,  507,
      508,  492,  509,  511,  510,  493,  512,  494,  515,  489,

      513,  497,  516,  517,  490,  491,  498,  495,  514,  496,
      499,  500,  501,  502,  503,  504,  505,  506,  507,  508,
      518,  509,  511,  510,  519,  512,  520,  515,  521,  513,
      522,  516,  517,  523,  524,  525,  527,  514,  528,  535,
      538,  526, 1583,  220,  220,  220,  220, 1583,  295,  518,
     1342,  539,  540,  519,  541,  520,  529,  521, 1374,  522,
      369, 1583,  523,  524,  525,  527,  536,  528,  535,  538,
      526,  530,  530,  530,  530,  221,  222,  222,  222,  222,
      539,  540,  542,  541,  531,  529,  532,  537,  532,  223,
      533,  533,  533,  533,  543,  536,  544,  545,  546,  548,

      549,  550,  551,  553,  554,  555,  547,  556,  557,  552,
      558,  542,  559,  531,  560,  562,  537,  563,  223,  564,
      561,  565,  566,  543,  567,  544,  545,  546,  548,  549,
      550,  551,  553,  554,  555,  547,  556,  557,  552,  558,
      568,  559,  569,  560,  562,  570,  563,  574,  564,  561,
      565,  566,  571,  567,  575,  576,  579,  572,  573,  577,
      580,  578,  582,  583,  581,  584,  585,  586,  587,  568,
      588,  569,  589,  590,  570,  591,  574,  592,  593,  594,
      597,  571, 1583,  575,  576,  579,  572,  573,  577,  580,
      578,  582,  583,  581,  584,  585,  586,  587,  598,  588,

      599,  589,  590,  595,  591,  600,  592,  593,  594,  597,
      601,  596,  602,  603,  605,  604,  606,  607,  609,  610,
      619,  622,  623,  608, 1583, 1583, 1583,  598, 1583,  599,
     1583,  611,  595,  611,  600,  612,  612,  612,  612,  601,
      596,  602,  603,  605,  604,  606,  607,  609,  610,  619,
      622,  623,  608,  293,  293,  293,  293,  613,  613,  613,
      613,  614,  614,  614,  614,  295,  294,  296,  616,  616,
      616,  616,  620,  617,  615,  617,  624,  618,  618,  618,
      618,  298,  625,  626,  627,  628,  629,  632,  630,  633,
      634,  635,  637,  621,  638,  294,  631,  639,  636,  640,

      641,  620,  642,  615,  643,  624,  646,  647,  648,  649,
      298,  625,  626,  627,  628,  629,  632,  630,  633,  634,
      635,  637,  621,  638,  644,  631,  639,  636,  640,  641,
      645,  642,  650,  643,  651,  646,  647,  648,  649,  652,
      653,  654,  655,  658,  659,  660,  663,  656,  657,  661,
      664,  662,  666,  644,  665,  667,  668,  669,  670,  645,
      671,  650,  672,  651,  673,  674,  677,  678,  652,  653,
      654,  655,  658,  659,  660,  663,  656,  657,  661,  664,
      662,  666,  681,  665,  667,  668,  669,  670,  675,  671,
      676,  672,  679,  673,  674,  677,  678,  682,  683,  684,

      680,  685,  686,  687,  689,  688,  690,  691,  693,  694,
      708,  681,  711,  692, 1583, 1583, 1583,  675,  695,  676,
      695,  679,  696,  696,  696,  696,  682,  683,  684,  680,
      685,  686,  687,  689,  688,  690,  691,  693,  694,  708,
      712,  711,  692,  366,  366,  366,  366,  697,  697,  697,
      697,  699,  699,  699,  699, 1583,  367,  713, 1583,  368,
      698,  369,  700,  700,  700,  700,  701,  704,  701,  712,
      702,  702,  702,  702,  714,  371,  703,  703,  703,  703,
      709,  705,  705,  705,  705,  367,  713,  707,  451,  698,
      451,  715,  716,  717,  718,  451,  721,  719,  722,  723,

      724,  710,  726,  714,  371,  720,  451,  725, 1583,  709,
      451,  727,  728,  729,  730,  731,  732,  735,  733,  736,
      715,  716,  717,  718,  734,  721,  719,  722,  723,  724,
      710,  726,  737,  738,  720,  739,  725,  451,  740,  741,
      727,  728,  729,  730,  731,  732,  735,  733,  736,  742,
      743,  744,  747,  734,  748,  749,  745,  746,  750,  752,
      751,  737,  738,  755,  739,  753,  756,  740,  741,  754,
      757,  758,  759,  760,  761,  762,  763,  766,  742,  743,
      744,  747,  767,  748,  749,  745,  746,  750,  752,  751,
      770,  764,  755,  765,  753,  756,  771,  772,  754,  757,

      758,  759,  760,  761,  762,  763,  766,  768,  773,  774,
      775,  767,  776,  778,  777,  769,  779,  780,  782,  770,
      764,  783,  765,  781,  784,  771,  772,  785,  786,  787,
      788,  791,  792,  789,  793,  794,  768,  773,  774,  775,
      795,  776,  778,  777,  769,  779,  780,  782,  790,  796,
      783,  797,  781,  784,  798,  799,  785,  786,  787,  788,
      791,  792,  789,  793,  794,  800,  801,  802,  803,  795,
      804,  805,  806,  807,  808,  809,  810,  790,  796,  811,
      797,  812,  813,  798,  799,  814,  815, 1583,  819,  820,
      821,  822,  823,  824,  800,  801,  802,  803,  825,  804,

      805,  806,  807,  808,  809,  810,  816,  826,  811,  827,
      812,  813,  828,  829,  814,  815,  817,  819,  820,  821,
      822,  823,  824,  830,  831,  832,  818,  825,  833,  834,
      835,  836,  837,  838,  839,  840,  826,  841,  827,  842,
      845,  828,  829,  846,  843,  817,  844,  847,  848,  849,
      852, 1583,  830,  831,  832,  818, 1583,  833,  834,  835,
      836,  837,  838,  839,  840, 1583,  841,  850,  842,  845,
      857,  851,  846,  843,  858,  844,  847,  848,  849,  852,
      853, 1583,  853, 1583,  854,  854,  854,  854,  530,  530,
      530,  530,  533,  533,  533,  533,  850,  859,  860,  857,

      851,  531,  855,  858,  855,  861,  856,  856,  856,  856,
      533,  533,  533,  533,  862,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  859,  860,  875,  863,
      531,  876,  877,  878,  861,  879,  880,  881,  882,  883,
      884,  885,  886,  862,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  887,  888,  875,  863,  892,
      876,  877,  878,  889,  879,  880,  881,  882,  883,  884,
      885,  886,  893,  890,  894,  895,  896,  897,  898,  899,
      900,  901,  902,  891,  887,  888,  903,  904,  892,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,

     1583,  893,  890,  894,  895,  896,  897,  898,  899,  900,
      901,  902,  891,  918,  919,  903,  904,  920,  905,  906,
      907,  908,  909,  910,  911,  912,  913,  914,  915,  916,
      921,  917,  922,  923,  925,  932,  933,  924,  926,  926,
      926,  926,  918,  919, 1583,  934,  920,  612,  612,  612,
      612,  927,  927,  927,  927, 1583, 1583, 1583,  916,  921,
      917,  922,  923,  925,  932,  933,  924,  614,  614,  614,
      614,  928,  935,  928,  934,  929,  929,  929,  929,  295,
      615,  296,  930,  930,  930,  930,  931,  931,  931,  931,
      618,  618,  618,  618,  936,  298,  937,  939,  940,  941,

      942,  935,  943,  944,  945,  946,  947,  948,  949,  615,
      950,  938,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961,  936,  298,  937,  939,  940,  941,  942,
      962,  943,  944,  945,  946,  947,  948,  949,  963,  950,
      938,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  964,  967,  968,  969,  970,  971,  972,  962,
      973,  974,  965,  975,  976,  977,  978,  963,  979,  980,
      981,  982,  966,  983,  984,  985,  986,  987,  988,  989,
      990, 1583,  967,  968,  969,  970,  971,  972,  993,  973,
      974,  965,  975,  976,  977,  978,  994,  979,  980,  981,

      982,  966,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  995,  992,  996,  997,  998, 1000,  993, 1583,  999,
     1001, 1001, 1001, 1001, 1583,  994,  696,  696,  696,  696,
     1009, 1583, 1010,  697,  697,  697,  697, 1583, 1583,  991,
      995,  992,  996,  997,  998, 1000,  698, 1002,  999, 1002,
     1583, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1004, 1009,
      368, 1010,  369, 1005, 1005, 1005, 1005, 1006, 1006, 1006,
     1006,  702,  702,  702,  702,  698,  371,  704, 1007, 1007,
     1007, 1007,  704, 1011, 1012, 1013, 1014,  707,  451, 1016,
      451,  703,  703,  703,  703,  451, 1008, 1008, 1008, 1008,

     1017, 1015, 1018, 1019, 1020,  371,  451, 1021, 1583, 1022,
      451, 1023, 1011, 1012, 1013, 1014, 1024, 1025, 1016, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1017,
     1015, 1018, 1019, 1020, 1036, 1037, 1021,  451, 1022, 1038,
     1023, 1039, 1040, 1044, 1045, 1024, 1025, 1046, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1047, 1041,
     1048, 1049, 1050, 1036, 1037, 1051, 1052, 1053, 1038, 1042,
     1039, 1040, 1044, 1045, 1054, 1055, 1046, 1056, 1057, 1043,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1047, 1065, 1048,
     1049, 1050, 1066, 1067, 1051, 1052, 1053, 1068, 1042, 1069,

     1070, 1071, 1072, 1054, 1055, 1073, 1056, 1057, 1043, 1058,
     1059, 1060, 1061, 1062, 1063, 1064, 1074, 1065, 1077, 1075,
     1078, 1066, 1067, 1076, 1079, 1080, 1068, 1081, 1069, 1070,
     1071, 1072, 1082, 1083, 1073, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1092, 1093, 1074, 1094, 1077, 1075, 1078,
     1095, 1096, 1076, 1079, 1080, 1097, 1081, 1098, 1099, 1100,
     1101, 1082, 1083, 1103, 1084, 1085, 1086, 1087, 1088, 1089,
     1090, 1091, 1092, 1093, 1104, 1094, 1105, 1106, 1107, 1095,
     1096, 1108, 1109, 1110, 1097, 1111, 1098, 1099, 1100, 1101,
     1112, 1113, 1103, 1114, 1115, 1116, 1117, 1118, 1119, 1120,

     1121, 1122, 1123, 1104, 1124, 1105, 1106, 1107, 1125, 1126,
     1108, 1109, 1110, 1583, 1111,  854,  854,  854,  854, 1112,
     1113, 1583, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1122, 1123, 1127, 1124, 1128, 1129, 1130, 1125, 1126,  854,
      854,  854,  854,  856,  856,  856,  856,  856,  856,  856,
      856, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1127, 1141, 1128, 1129, 1130, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1154, 1155, 1156, 1157, 1152,
     1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
     1153, 1141, 1158, 1159, 1160, 1142, 1143, 1144, 1145, 1146,

     1147, 1148, 1149, 1150, 1154, 1155, 1156, 1157, 1152, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1153,
     1171, 1158, 1159, 1160, 1172, 1173, 1174, 1175,  926,  926,
      926,  926, 1176, 1176, 1176, 1176, 1583, 1583, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1178, 1171,
     1583, 1179, 1180, 1172, 1173, 1174, 1175, 1177, 1177, 1177,
     1177,  929,  929,  929,  929,  296,  930,  930,  930,  930,
      931,  931,  931,  931, 1181, 1182, 1183, 1178, 1184,  298,
     1179, 1180, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203,

     1205, 1206, 1207, 1181, 1182, 1183, 1208, 1184,  298, 1209,
     1204, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1205,
     1206, 1207, 1210, 1211, 1212, 1208, 1213, 1214, 1209, 1204,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
     1225, 1226, 1001, 1001, 1001, 1001, 1227, 1227, 1227, 1227,
     1583, 1210, 1211, 1212, 1583, 1213, 1214, 1583, 1583, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
     1226, 1003, 1003, 1003, 1003, 1228, 1228, 1228, 1228,  368,
     1583, 1583, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006,

     1230, 1230, 1230, 1230,  704,  371, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,  703,  703,
      703,  703, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
     1251, 1252, 1253, 1254,  371, 1231, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1258, 1259, 1260,
     1261, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1256, 1262, 1263, 1264, 1265, 1266, 1267,
     1268, 1269, 1270, 1271, 1257, 1272, 1258, 1259, 1260, 1261,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1256, 1262, 1263, 1264, 1265, 1266, 1267, 1268,

     1269, 1270, 1271, 1257, 1272, 1285, 1286, 1287, 1288, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1285, 1286, 1287, 1288, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1314, 1315, 1316, 1317, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1318,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1314, 1315, 1316, 1317, 1331, 1332, 1333, 1334,

     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1343, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
     1330, 1177, 1177, 1177, 1177, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1344, 1345, 1346, 1347,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
     1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1227, 1227, 1227, 1227,

     1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1373, 1393, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1405, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1405, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1406, 1407, 1408, 1409, 1410,

     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1434, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1438, 1438,
     1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
     1434, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1454, 1454,
     1454, 1456, 1457, 1435, 1436, 1437, 1375, 1375, 1375, 1375,
     1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1458,
     1448, 1449, 1450, 1451, 1452, 1453, 1455, 1455, 1455, 1455,
     1456, 1457, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1473, 1474, 1475, 1458, 1476,

     1477, 1478, 1479, 1481, 1482, 1483, 1484, 1485, 1486, 1583,
     1583, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1473, 1474, 1475, 1487, 1476, 1477,
     1478, 1479, 1481, 1482, 1483, 1484, 1485, 1486, 1438, 1438,
     1438, 1438, 1489, 1490, 1491, 1492, 1493, 1494, 1454, 1454,
     1454, 1454, 1375, 1375, 1375, 1375, 1487, 1495, 1497, 1498,
     1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507, 1508, 1509,
     1511, 1489, 1490, 1491, 1492, 1493, 1494, 1512, 1513, 1514,
     1504, 1517, 1518, 1519, 1515, 1510, 1495, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1505, 1506, 1507, 1508, 1509, 1511,

     1516, 1520, 1521, 1523, 1524, 1525, 1512, 1513, 1514, 1504,
     1517, 1518, 1519, 1515, 1510, 1526, 1527, 1528, 1522, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1516,
     1520, 1521, 1523, 1524, 1525, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1526, 1527, 1528, 1522, 1529, 1530,
     1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1548, 1549,
     1550, 1551, 1552, 1553, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
     1561, 1562, 1563, 1564, 1565, 1566, 1567, 1548, 1549, 1550,
     1551, 1552, 1553, 1568, 1569, 1570, 1571, 1572, 1573, 1574,

     1575, 1576, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1565, 1566, 1567, 1577, 1578, 1579, 1580,
     1581, 1582, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
     1576, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1577, 1578, 1579, 1580, 1581,
     1582,  225, 1583,  225,  225,  292, 1583,  292, 1583,  292,
      299,  299,  299,  299,  299,  299,  372, 1583,  372,  372,
      372,  372,  372,  372,  372,  374, 1583, 1583,  374,  374,
      374, 1583,  374,  374,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  706,  706,  706,  706,  706,  706,  706,

      706,  706, 1229, 1583, 1229, 1229, 1229, 1229, 1229, 1229,
     1229,   13, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583

    } ;

static const flex_int16_t yy_chk[3696] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1590,    7,    7,    7,    7,    7,    8, 1459,    8,    8,
        8,    8,    8,    9, 1442,    9,    9,    9,    9,    9,
       10, 1426,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1411,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1041,   28,   27,   29,   28,
      115,  964,   28,   40,  107,  889,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,  816,   31,   34,
       30,   31,  451,   30,   31,   30,   37,   31,   45,  146,
       31,   38,   36,   30,   37,   59,   36,  142,   34,   31,
       36,  109,   30,   34,   30,   38,   36,   31,   34,   30,
       31,   38,   30,   31,   30,   37,   31,   45,   39,   31,
       38,   36,   47,   37,   59,   36,   39,   41,   42,   36,
       39,   41,   60,   39,   38,   36,   62,   41,   42,   68,
       38,   43,   43,   42,   42,   46,   46,   39,   44,   73,

       44,   43,   87,   44,   17,   39,   41,   42,   13,   39,
       41,   60,   39,  119,  119,   62,   41,   42,   68,    0,
       43,   43,   42,   42,   46,   46,    0,   44,   73,   44,
       43,   87,   44,   50,   50,   50,   50,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   53,   55,   53,
      144,   51,  144,   65,   53,   54,   52,   53,   88,   54,
       90,   65,   55,   54,   93,   55,   54,   56,   55,   54,
       51,   56,   93,    0,   96,   56,   53,   55,   53,   54,
       51,   56,   65,   53,   54,   52,   53,   88,   54,   90,
       65,   55,   54,   93,   55,   54,   56,   55,   54,   51,

       56,   93,   57,   96,   56,  101,   66,    0,   54,   61,
       56,   57,  126,   57,   61,  127,   58,   67,   57,   61,
       66,   57,  129,   57,   58,   67,   66,   58,  134,   67,
       58,   57,   67,   58,  101,   66,   58,  375,   61,  375,
       57,  126,   57,   61,  127,   58,   67,   57,   61,   66,
       57,  129,   57,   58,   67,   66,   58,  134,   67,   58,
       64,   67,   58,   69,   64,   58,   70,   69,   64,   71,
       71,   74,   74,   69,   64,   72,   70,   72,  139,   71,
       72,   70,   70,  105,  105,  105,  105,    0,  153,   64,
        0,    0,   69,   64,  155,   70,   69,   64,   71,   71,

       74,   74,   69,   64,   72,   70,   72,  139,   71,   72,
       70,   70,   79,   79,   79,   79,   80,  153,   80,   80,
       80,   80,   80,  155,   81,   79,   81,  156,    0,   83,
       89,   81,   80,   82,   81,   89,  157,   82,  102,  102,
       89,   82,    0,   83,   82,  158,   83,   82,    0,   83,
      117,  117,  117,   81,   79,   81,  156,   82,   83,   89,
       81,   80,   82,   81,   89,  157,   82,  102,  102,   89,
       82,   85,   83,   82,  158,   83,   82,   84,   83,    0,
       85,   84,   85,  159,   94,   84,   82,   85,   86,   92,
       85,   84,   85,   92,  140,  140,   86,   92,   94,   86,

       85,    0,   86,   92,   94,   86,   84,    0,   86,   85,
       84,   85,  159,   94,   84,    0,   85,   86,   92,   85,
       84,   85,   92,  140,  140,   86,   92,   94,   86,    0,
       95,   86,   92,   94,   86,  160,   97,   86,   95,   98,
       97,  161,   95,   99,   99,   95,   97,  163,  165,   98,
      120,  166,  120,   99,   98,   98,  100,  120,  100,   95,
      120,  100,    0,    0,  160,   97,    0,   95,   98,   97,
      161,   95,   99,   99,   95,   97,  163,  165,   98,  120,
      166,  120,   99,   98,   98,  100,  120,  100,    0,  120,
      100,  103,  103,  103,  103,  104,  167,  104,  104,  104,

      104,  104,  121,  122,  103,  168,  121,  131,  169,  170,
      121,  104,  168,  121,  123,  131,  121,  122,  123,  128,
      122,    0,  123,  122,  128,  167,  121,    0,  123,  128,
        0,  121,  122,  103,  168,  121,  131,  169,  170,  121,
      104,  168,  121,  123,  131,  121,  122,  123,  128,  122,
      124,  123,  122,  128,  132,  121,  125,  123,  128,  124,
      138,  124,  138,    0,  125,  138,  124,  125,  132,  124,
      125,  124,  133,  125,  132,    0,  125,  171,  130,  124,
      133,    0,  130,  132,  133,  125,  130,  133,  124,  138,
      124,  138,  130,  125,  138,  124,  125,  132,  124,  125,

      124,  133,  125,  132,  135,  125,  171,  130,  135,  133,
      136,  130,  172,  133,  135,  130,  133,  137,  137,  154,
      136,  130,  164,  173,  174,  136,  136,  137,  175,  176,
      164,  177,  178,  135,  179,  176,  180,  135,  181,  136,
      154,  172,  182,  135,  183,  184,  137,  137,  154,  136,
      185,  164,  173,  174,  136,  136,  137,  175,  176,  164,
      177,  178,  188,  179,  176,  180,  189,  181,  190,  154,
      186,  182,  192,  183,  184,  186,  186,  193,  191,  185,
      191,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  188,  203,  204,  203,  189,  205,  190,  207,  186,

      206,  192,  208,  209,  186,  186,  193,  191,  206,  191,
      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      210,  203,  204,  203,  211,  205,  212,  207,  213,  206,
      213,  208,  209,  214,  215,  216,  217,  206,  218,  226,
      228,  216,    0,  220,  220,  220,  220,    0, 1176,  210,
     1176,  229,  230,  211,  231,  212,  220,  213, 1228,  213,
     1228,    0,  214,  215,  216,  217,  227,  218,  226,  228,
      216,  221,  221,  221,  221,  222,  222,  222,  222,  222,
      229,  230,  232,  231,  221,  220,  223,  227,  223,  222,
      223,  223,  223,  223,  233,  227,  234,  236,  237,  238,

      239,  240,  241,  242,  243,  244,  237,  245,  246,  241,
      247,  232,  248,  221,  249,  250,  227,  251,  222,  252,
      249,  253,  254,  233,  255,  234,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  237,  245,  246,  241,  247,
      256,  248,  257,  249,  250,  258,  251,  261,  252,  249,
      253,  254,  259,  255,  262,  263,  265,  259,  259,  264,
      266,  264,  267,  268,  266,  269,  270,  271,  272,  256,
      273,  257,  274,  275,  258,  276,  261,  276,  277,  278,
      280,  259,    0,  262,  263,  265,  259,  259,  264,  266,
      264,  267,  268,  266,  269,  270,  271,  272,  281,  273,

      282,  274,  275,  279,  276,  283,  276,  277,  278,  280,
      284,  279,  285,  286,  287,  286,  288,  289,  290,  291,
      300,  302,  303,  289,    0,    0,    0,  281,    0,  282,
        0,  294,  279,  294,  283,  294,  294,  294,  294,  284,
      279,  285,  286,  287,  286,  288,  289,  290,  291,  300,
      302,  303,  289,  293,  293,  293,  293,  295,  295,  295,
      295,  296,  296,  296,  296,  297,  293,  297,  297,  297,
      297,  297,  301,  298,  296,  298,  304,  298,  298,  298,
      298,  297,  305,  306,  307,  308,  310,  312,  311,  313,
      314,  315,  316,  301,  317,  293,  311,  318,  315,  319,

      320,  301,  321,  296,  322,  304,  324,  325,  326,  327,
      297,  305,  306,  307,  308,  310,  312,  311,  313,  314,
      315,  316,  301,  317,  323,  311,  318,  315,  319,  320,
      323,  321,  328,  322,  329,  324,  325,  326,  327,  330,
      331,  332,  333,  335,  336,  337,  339,  333,  333,  338,
      340,  338,  341,  323,  340,  342,  343,  344,  345,  323,
      346,  328,  347,  329,  348,  349,  351,  352,  330,  331,
      332,  333,  335,  336,  337,  339,  333,  333,  338,  340,
      338,  341,  354,  340,  342,  343,  344,  345,  350,  346,
      350,  347,  353,  348,  349,  351,  352,  355,  356,  357,

      353,  358,  359,  360,  361,  360,  362,  363,  364,  365,
      384,  354,  386,  363,    0,    0,    0,  350,  367,  350,
      367,  353,  367,  367,  367,  367,  355,  356,  357,  353,
      358,  359,  360,  361,  360,  362,  363,  364,  365,  384,
      387,  386,  363,  366,  366,  366,  366,  368,  368,  368,
      368,  369,  369,  369,  369,    0,  366,  388,    0,  370,
      368,  370,  370,  370,  370,  370,  371,  373,  371,  387,
      371,  371,  371,  371,  389,  370,  372,  372,  372,  372,
      385,  373,  373,  373,  373,  366,  388,  377,  377,  368,
      377,  390,  391,  392,  394,  377,  396,  395,  397,  398,

      399,  385,  400,  389,  370,  395,  377,  399,    0,  385,
      377,  401,  402,  403,  404,  405,  406,  408,  407,  409,
      390,  391,  392,  394,  407,  396,  395,  397,  398,  399,
      385,  400,  410,  411,  395,  412,  399,  377,  413,  414,
      401,  402,  403,  404,  405,  406,  408,  407,  409,  415,
      416,  417,  419,  407,  420,  421,  417,  417,  422,  423,
      422,  410,  411,  425,  412,  424,  426,  413,  414,  424,
      427,  428,  429,  430,  431,  432,  433,  435,  415,  416,
      417,  419,  436,  420,  421,  417,  417,  422,  423,  422,
      438,  434,  425,  434,  424,  426,  439,  440,  424,  427,

      428,  429,  430,  431,  432,  433,  435,  437,  441,  442,
      443,  436,  444,  445,  444,  437,  446,  447,  448,  438,
      434,  449,  434,  447,  458,  439,  440,  459,  460,  461,
      462,  464,  465,  463,  466,  467,  437,  441,  442,  443,
      468,  444,  445,  444,  437,  446,  447,  448,  463,  469,
      449,  470,  447,  458,  471,  472,  459,  460,  461,  462,
      464,  465,  463,  466,  467,  473,  474,  476,  477,  468,
      478,  479,  480,  481,  482,  483,  484,  463,  469,  485,
      470,  486,  487,  471,  472,  489,  490,    0,  492,  493,
      494,  495,  496,  497,  473,  474,  476,  477,  498,  478,

      479,  480,  481,  482,  483,  484,  491,  501,  485,  503,
      486,  487,  504,  505,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  506,  507,  508,  491,  498,  509,  510,
      511,  512,  513,  515,  516,  518,  501,  519,  503,  520,
      522,  504,  505,  523,  521,  491,  521,  524,  525,  526,
      528,    0,  506,  507,  508,  491,    0,  509,  510,  511,
      512,  513,  515,  516,  518,    0,  519,  527,  520,  522,
      540,  527,  523,  521,  541,  521,  524,  525,  526,  528,
      529,    0,  529,    0,  529,  529,  529,  529,  530,  530,
      530,  530,  532,  532,  532,  532,  527,  542,  543,  540,

      527,  530,  531,  541,  531,  544,  531,  531,  531,  531,
      533,  533,  533,  533,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  542,  543,  558,  545,
      530,  559,  560,  561,  544,  562,  563,  564,  565,  566,
      567,  568,  569,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  571,  572,  558,  545,  574,
      559,  560,  561,  573,  562,  563,  564,  565,  566,  567,
      568,  569,  575,  573,  576,  577,  578,  579,  580,  583,
      585,  586,  587,  573,  571,  572,  588,  589,  574,  590,
      591,  592,  593,  594,  595,  597,  598,  600,  601,  602,

        0,  575,  573,  576,  577,  578,  579,  580,  583,  585,
      586,  587,  573,  604,  605,  588,  589,  606,  590,  591,
      592,  593,  594,  595,  597,  598,  600,  601,  602,  603,
      607,  603,  608,  609,  610,  624,  625,  609,  611,  611,
      611,  611,  604,  605,    0,  626,  606,  612,  612,  612,
      612,  613,  613,  613,  613,    0,    0,    0,  603,  607,
      603,  608,  609,  610,  624,  625,  609,  614,  614,  614,
      614,  615,  627,  615,  626,  615,  615,  615,  615,  616,
      614,  616,  616,  616,  616,  616,  617,  617,  617,  617,
      618,  618,  618,  618,  628,  616,  629,  630,  631,  632,

      633,  627,  634,  635,  636,  637,  638,  639,  640,  614,
      642,  629,  643,  644,  645,  646,  647,  648,  649,  650,
      651,  652,  653,  628,  616,  629,  630,  631,  632,  633,
      655,  634,  635,  636,  637,  638,  639,  640,  656,  642,
      629,  643,  644,  645,  646,  647,  648,  649,  650,  651,
      652,  653,  657,  658,  659,  660,  661,  662,  663,  655,
      664,  667,  657,  669,  670,  671,  672,  656,  673,  674,
      675,  676,  657,  677,  678,  679,  681,  682,  684,  685,
      686,    0,  658,  659,  660,  661,  662,  663,  688,  664,
      667,  657,  669,  670,  671,  672,  689,  673,  674,  675,

      676,  657,  677,  678,  679,  681,  682,  684,  685,  686,
      687,  690,  687,  691,  692,  693,  694,  688,    0,  693,
      695,  695,  695,  695,    0,  689,  696,  696,  696,  696,
      713,    0,  714,  697,  697,  697,  697,    0,    0,  687,
      690,  687,  691,  692,  693,  694,  697,  698,  693,  698,
        0,  698,  698,  698,  698,  699,  699,  699,  699,  713,
      700,  714,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  702,  702,  702,  702,  697,  700,  703,  704,  704,
      704,  704,  705,  715,  716,  717,  718,  706,  706,  719,
      706,  703,  703,  703,  703,  706,  705,  705,  705,  705,

      720,  718,  721,  722,  723,  700,  706,  724,    0,  725,
      706,  726,  715,  716,  717,  718,  727,  728,  719,  729,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  720,
      718,  721,  722,  723,  740,  741,  724,  706,  725,  742,
      726,  744,  745,  747,  748,  727,  728,  749,  729,  731,
      732,  733,  734,  735,  736,  737,  738,  739,  750,  746,
      751,  752,  753,  740,  741,  756,  758,  759,  742,  746,
      744,  745,  747,  748,  760,  761,  749,  762,  763,  746,
      764,  765,  766,  767,  768,  770,  771,  750,  773,  751,
      752,  753,  774,  775,  756,  758,  759,  776,  746,  776,

      777,  778,  779,  760,  761,  780,  762,  763,  746,  764,
      765,  766,  767,  768,  770,  771,  781,  773,  783,  782,
      784,  774,  775,  782,  785,  786,  776,  788,  776,  777,
      778,  779,  791,  792,  780,  793,  794,  796,  798,  799,
      800,  802,  803,  804,  805,  781,  806,  783,  782,  784,
      807,  808,  782,  785,  786,  809,  788,  812,  813,  814,
      815,  791,  792,  817,  793,  794,  796,  798,  799,  800,
      802,  803,  804,  805,  817,  806,  823,  825,  826,  807,
      808,  827,  828,  830,  809,  831,  812,  813,  814,  815,
      832,  834,  817,  835,  836,  837,  839,  841,  843,  844,

      845,  846,  847,  817,  848,  823,  825,  826,  849,  851,
      827,  828,  830,    0,  831,  853,  853,  853,  853,  832,
      834,    0,  835,  836,  837,  839,  841,  843,  844,  845,
      846,  847,  857,  848,  858,  859,  861,  849,  851,  854,
      854,  854,  854,  855,  855,  855,  855,  856,  856,  856,
      856,  864,  865,  866,  867,  869,  871,  872,  873,  875,
      876,  857,  877,  858,  859,  861,  878,  879,  880,  881,
      882,  885,  886,  887,  888,  896,  898,  899,  900,  890,
      864,  865,  866,  867,  869,  871,  872,  873,  875,  876,
      890,  877,  901,  903,  904,  878,  879,  880,  881,  882,

      885,  886,  887,  888,  896,  898,  899,  900,  890,  905,
      907,  908,  909,  910,  912,  914,  916,  917,  918,  890,
      919,  901,  903,  904,  920,  921,  922,  924,  926,  926,
      926,  926,  927,  927,  927,  927,    0,    0,  905,  907,
      908,  909,  910,  912,  914,  916,  917,  918,  932,  919,
        0,  933,  934,  920,  921,  922,  924,  928,  928,  928,
      928,  929,  929,  929,  929,  930,  930,  930,  930,  930,
      931,  931,  931,  931,  936,  939,  940,  932,  941,  930,
      933,  934,  942,  944,  946,  947,  948,  950,  951,  952,
      953,  954,  955,  956,  957,  960,  961,  962,  963,  965,

      971,  973,  974,  936,  939,  940,  975,  941,  930,  976,
      965,  942,  944,  946,  947,  948,  950,  951,  952,  953,
      954,  955,  956,  957,  960,  961,  962,  963,  965,  971,
      973,  974,  978,  979,  980,  975,  982,  983,  976,  965,
      984,  985,  987,  989,  991,  992,  993,  994,  995,  996,
      997,  999, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002,
        0,  978,  979,  980,    0,  982,  983,    0,    0,  984,
      985,  987,  989,  991,  992,  993,  994,  995,  996,  997,
      999, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1004, 1005,
        0,    0, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006,

     1007, 1007, 1007, 1007, 1008, 1005, 1009, 1010, 1011, 1013,
     1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025, 1008, 1008,
     1008, 1008, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
     1037, 1038, 1039, 1040, 1005, 1009, 1010, 1011, 1013, 1016,
     1017, 1018, 1019, 1021, 1023, 1024, 1025, 1048, 1050, 1051,
     1052, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037,
     1038, 1039, 1040, 1042, 1053, 1055, 1056, 1057, 1059, 1060,
     1061, 1062, 1064, 1066, 1042, 1068, 1048, 1050, 1051, 1052,
     1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079, 1080,
     1081, 1082, 1042, 1053, 1055, 1056, 1057, 1059, 1060, 1061,

     1062, 1064, 1066, 1042, 1068, 1085, 1086, 1087, 1088, 1069,
     1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079, 1080, 1081,
     1082, 1089, 1090, 1092, 1093, 1097, 1099, 1101, 1103, 1104,
     1107, 1109, 1112, 1113, 1085, 1086, 1087, 1088, 1115, 1116,
     1117, 1118, 1120, 1121, 1122, 1124, 1125, 1127, 1128, 1129,
     1089, 1090, 1092, 1093, 1097, 1099, 1101, 1103, 1104, 1107,
     1109, 1112, 1113, 1130, 1131, 1134, 1135, 1115, 1116, 1117,
     1118, 1120, 1121, 1122, 1124, 1125, 1127, 1128, 1129, 1136,
     1137, 1138, 1139, 1141, 1142, 1146, 1148, 1150, 1152, 1153,
     1156, 1158, 1130, 1131, 1134, 1135, 1161, 1162, 1164, 1165,

     1166, 1167, 1169, 1170, 1171, 1173, 1174, 1178, 1136, 1137,
     1138, 1139, 1141, 1142, 1146, 1148, 1150, 1152, 1153, 1156,
     1158, 1177, 1177, 1177, 1177, 1161, 1162, 1164, 1165, 1166,
     1167, 1169, 1170, 1171, 1173, 1174, 1178, 1179, 1180, 1181,
     1182, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1197,
     1199, 1201, 1203, 1204, 1207, 1209, 1212, 1213, 1215, 1216,
     1217, 1218, 1220, 1221, 1222, 1224, 1179, 1180, 1181, 1182,
     1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1197, 1199,
     1201, 1203, 1204, 1207, 1209, 1212, 1213, 1215, 1216, 1217,
     1218, 1220, 1221, 1222, 1224, 1225, 1227, 1227, 1227, 1227,

     1229, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1231, 1232,
     1233, 1234, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1245,
     1246, 1250, 1252, 1254, 1225, 1256, 1257, 1260, 1262, 1265,
     1266, 1268, 1269, 1270, 1271, 1273, 1274, 1231, 1232, 1233,
     1234, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246,
     1250, 1252, 1254, 1275, 1256, 1257, 1260, 1262, 1265, 1266,
     1268, 1269, 1270, 1271, 1273, 1274, 1277, 1278, 1280, 1281,
     1283, 1285, 1287, 1289, 1293, 1296, 1297, 1298, 1301, 1302,
     1305, 1307, 1275, 1310, 1311, 1312, 1314, 1316, 1318, 1320,
     1324, 1327, 1328, 1329, 1332, 1277, 1278, 1280, 1281, 1283,

     1285, 1287, 1289, 1293, 1296, 1297, 1298, 1301, 1302, 1305,
     1307, 1333, 1310, 1311, 1312, 1314, 1316, 1318, 1320, 1324,
     1327, 1328, 1329, 1332, 1336, 1338, 1341, 1342, 1342, 1342,
     1342, 1343, 1344, 1346, 1348, 1350, 1352, 1356, 1359, 1360,
     1333, 1361, 1364, 1365, 1368, 1370, 1373, 1374, 1374, 1374,
     1374, 1377, 1378, 1336, 1338, 1341, 1375, 1375, 1375, 1375,
     1343, 1344, 1346, 1348, 1350, 1352, 1356, 1359, 1360, 1380,
     1361, 1364, 1365, 1368, 1370, 1373, 1376, 1376, 1376, 1376,
     1377, 1378, 1382, 1384, 1386, 1390, 1393, 1394, 1395, 1398,
     1399, 1402, 1404, 1407, 1408, 1412, 1413, 1416, 1380, 1418,

     1419, 1420, 1423, 1427, 1428, 1431, 1433, 1434, 1435,    0,
        0, 1382, 1384, 1386, 1390, 1393, 1394, 1395, 1398, 1399,
     1402, 1404, 1407, 1408, 1412, 1413, 1416, 1439, 1418, 1419,
     1420, 1423, 1427, 1428, 1431, 1433, 1434, 1435, 1438, 1438,
     1438, 1438, 1443, 1444, 1447, 1449, 1450, 1451, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1439, 1456, 1460, 1461,
     1464, 1466, 1467, 1468, 1472, 1474, 1475, 1476, 1478, 1480,
     1482, 1443, 1444, 1447, 1449, 1450, 1451, 1483, 1484, 1486,
     1472, 1490, 1491, 1492, 1488, 1480, 1456, 1460, 1461, 1464,
     1466, 1467, 1468, 1472, 1474, 1475, 1476, 1478, 1480, 1482,

     1488, 1494, 1496, 1498, 1499, 1500, 1483, 1484, 1486, 1472,
     1490, 1491, 1492, 1488, 1480, 1502, 1503, 1504, 1496, 1505,
     1509, 1510, 1511, 1515, 1516, 1517, 1521, 1522, 1523, 1488,
     1494, 1496, 1498, 1499, 1500, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1535, 1502, 1503, 1504, 1496, 1505, 1509,
     1510, 1511, 1515, 1516, 1517, 1521, 1522, 1523, 1536, 1537,
     1538, 1539, 1540, 1541, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1534, 1535, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
     1549, 1550, 1552, 1555, 1558, 1561, 1563, 1536, 1537, 1538,
     1539, 1540, 1541, 1564, 1565, 1566, 1567, 1568, 1569, 1570,

     1571, 1572, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1552, 1555, 1558, 1561, 1563, 1573, 1574, 1575, 1576,
     1577, 1578, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
     1572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1573, 1574, 1575, 1576, 1577,
     1578, 1584,    0, 1584, 1584, 1585,    0, 1585,    0, 1585,
     1586, 1586, 1586, 1586, 1586, 1586, 1587,    0, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1588,    0,    0, 1588, 1588,
     1588,    0, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1591, 1591, 1591, 1591, 1591, 1591, 1591,

     1591, 1591, 1592,    0, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1584 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1583 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 114:
case 115:
case 116:
case 117:
case 118:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 123:
case 124:
case 125:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 126:
case 127:
case 128:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 129:
case 130:
case 131:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 132:
case 133:
case 134:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 147:
YY_RULE_SETUP
{}
	YY_BREAK
case 148:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 149:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 150:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1584 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1584 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1583);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

