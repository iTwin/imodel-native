#line 3 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 262
#define YY_END_OF_BUFFER 263
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3660] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      257,  257,  263,  261,  259,  258,  261,  250,  223,  223,
      215,  217,  216,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  248,  223,
      225,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  251,  249,  252,  223,
      223,  232,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  223,  232,  261,
      257,  257,  257,  257,  255,  223,  223,  223,  215,  217,
      216,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  256,  257,  259,  221,    0,
      218,  220,  219,    0,    0,    0,    0,    7,    9,    0,
        0,    0,    0,    0,    0,   22,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,  103,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,  140,    0,  143,    0,  146,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      188,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  222,  226,    0,  227,  225,    0,  224,  224,
      224,  224,  224,    7,    9,  224,  224,  224,  224,  224,
      224,   22,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,   93,  103,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  129,  224,  224,  224,  224,
      140,  224,  143,  224,  146,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  188,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  247,  237,
      247,  247,  247,  232,  247,  231,  231,  231,  231,  231,
        7,    9,  231,  231,  231,  231,  231,  231,   22,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,   93,  103,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  129,  231,  231,  231,  231,  140,  231,  143,
      231,  146,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  188,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  243,  247,  247,  247,  232,
      247,    0,  253,  257,  257,  221,  257,  218,  220,  219,
      257,  257,  257,  257,    7,    9,  257,  257,  257,  257,
      257,  257,   22,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,   93,  103,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  129,  257,  257,  257,
      257,  140,  257,  143,  257,  146,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  188,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  222,
        0,  260,    0,    2,    0,    4,    5,    0,    8,    0,
        0,   12,    0,    0,    0,    0,   18,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,   57,    0,    0,    0,    0,    0,
        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   81,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,    0,  105,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  118,  119,
        0,    0,    0,    0,  127,    0,  130,  131,    0,    0,
        0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  167,    0,    0,

        0,  174,    0,    0,    0,    0,    0,  179,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  230,  227,    0,    0,  228,  224,    2,  224,    4,
        5,  224,    8,  224,  224,   12,  224,  224,  224,  224,
       18,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,   52,   57,  224,
      224,  224,  224,  224,  224,  224,  224,   68,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,   81,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,   97,

      224,  105,  106,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  118,  119,  224,  224,  224,  224,  127,  224,
      130,  131,  224,  224,  224,  224,  224,  224,  224,  142,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  167,  224,  224,  224,  174,  224,  224,  224,  224,
      224,  179,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,    0,  240,  247,  235,  247,  232,
        0,  238,  231,    2,  231,    4,    5,  231,    8,  231,

      231,   12,  231,  231,  231,  231,   18,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,   52,   57,  231,  231,  231,  231,  231,
      231,  231,  231,   68,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,   81,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,   97,  231,  105,  106,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  118,  119,
      231,  231,  231,  231,  127,  231,  130,  131,  231,  231,
      231,  231,  231,  231,  231,  142,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  167,  231,  231,
      231,  174,  231,  231,  231,  231,  231,  179,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
        0,  246,  241,  247,  247,  232,    0,  244,  253,    0,
      253,  257,  257,  257,    2,  257,    4,    5,  257,    8,
      257,  257,   12,  257,  257,  257,  257,   18,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,   52,   57,  257,  257,  257,  257,
      257,  257,  257,  257,   68,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,   81,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   97,  257,  105,  106,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  118,
      119,  257,  257,  257,  257,  127,  257,  130,  131,  257,
      257,  257,  257,  257,  257,  257,  142,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  167,  257,
      257,  257,  174,  257,  257,  257,  257,  257,  179,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,    0,   21,   23,   24,   25,    0,   29,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,    0,    0,    0,    0,    0,    0,   62,    0,    0,
       65,   66,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   86,   87,    0,
        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
      102,  104,    0,  108,  110,  112,  113,    0,    0,  116,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
      134,    0,    0,    0,    0,  144,    0,    0,    0,    0,

      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      162,    0,    0,    0,    0,    0,  168,    0,    0,    0,
        0,    0,  176,    0,    0,    0,    0,  182,  183,    0,
        0,    0,    0,  192,  193,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  207,  208,  209,
        0,  211,  213,  214,    0,  229,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,   20,  224,   21,   23,
       24,   25,  224,   29,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,   48,  224,  224,  224,  224,
      224,  224,   62,  224,  224,   65,   66,   67,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,   86,   87,  224,  224,  224,   91,  224,  224,
      224,  224,  224,  224,  224,  102,  104,  224,  108,  110,
      112,  113,  224,  224,  116,  224,  224,  224,  224,  224,
      224,  224,  128,  224,  224,  134,  224,  224,  224,  224,
      144,  224,  224,  224,  224,  150,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  162,  224,  224,  224,  224,
      224,  168,  224,  224,  224,  224,  224,  176,  224,  224,
      224,  224,  182,  183,  224,  224,  224,  224,  192,  193,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  207,  208,  209,  224,  211,  213,  214,  240,
      247,    0,  239,  232,  238,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,   20,  231,   21,   23,   24,
       25,  231,   29,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,   48,  231,  231,  231,  231,  231,
      231,   62,  231,  231,   65,   66,   67,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,   86,   87,  231,  231,  231,   91,  231,  231,  231,
      231,  231,  231,  231,  102,  104,  231,  108,  110,  112,
      113,  231,  231,  116,  231,  231,  231,  231,  231,  231,

      231,  128,  231,  231,  134,  231,  231,  231,  231,  144,
      231,  231,  231,  231,  150,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  162,  231,  231,  231,  231,  231,
      168,  231,  231,  231,  231,  231,  176,  231,  231,  231,
      231,  182,  183,  231,  231,  231,  231,  192,  193,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  207,  208,  209,  231,  211,  213,  214,  246,    0,
      245,  247,  232,  244,    0,  253,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   20,  257,   21,   23,
       24,   25,  257,   29,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,   48,  257,  257,  257,  257,
      257,  257,   62,  257,  257,   65,   66,   67,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,   86,   87,  257,  257,  257,   91,  257,  257,
      257,  257,  257,  257,  257,  102,  104,  257,  108,  110,
      112,  113,  257,  257,  116,  257,  257,  257,  257,  257,
      257,  257,  128,  257,  257,  134,  257,  257,  257,  257,
      144,  257,  257,  257,  257,  150,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  162,  257,  257,  257,  257,
      257,  168,  257,  257,  257,  257,  257,  176,  257,  257,

      257,  257,  182,  183,  257,  257,  257,  257,  192,  193,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  207,  208,  209,  257,  211,  213,  214,    1,
        3,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,   35,    0,
       37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,    0,    0,
        0,   75,   76,   77,   79,    0,    0,    0,   85,    0,
       89,    0,    0,   94,    0,    0,   98,   99,    0,    0,
      107,    0,    0,  114,  115,  117,    0,  121,    0,    0,

      125,  126,    0,  133,    0,  136,    0,    0,    0,    0,
        0,  147,    0,  149,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  161,    0,    0,    0,  170,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  181,    0,    0,
        0,    0,    0,    0,  195,    0,    0,    0,  199,  200,
      201,  205,    0,    0,    0,  210,    0,    1,    3,  224,
      224,  224,  224,   14,  224,  224,  224,  224,  224,  224,
       28,  224,  224,  224,  224,  224,   35,  224,   37,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,   69,  224,  224,  224,  224,   75,

       76,   77,   79,  224,  224,  224,   85,  224,   89,  224,
      224,   94,  224,  224,   98,   99,  224,  224,  107,  224,
      224,  114,  115,  117,  224,  121,  224,  224,  125,  126,
      224,  133,  224,  136,  224,  224,  224,  224,  224,  147,
      224,  149,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  161,  224,  224,  224,  170,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  181,  224,  224,  224,  224,
      224,  224,  195,  224,  224,  224,  199,  200,  201,  205,
      224,  224,  224,  210,  224,  233,  239,    1,    3,  231,
      231,  231,  231,   14,  231,  231,  231,  231,  231,  231,

       28,  231,  231,  231,  231,  231,   35,  231,   37,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,   69,  231,  231,  231,  231,   75,
       76,   77,   79,  231,  231,  231,   85,  231,   89,  231,
      231,   94,  231,  231,   98,   99,  231,  231,  107,  231,
      231,  114,  115,  117,  231,  121,  231,  231,  125,  126,
      231,  133,  231,  136,  231,  231,  231,  231,  231,  147,
      231,  149,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  161,  231,  231,  231,  170,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  181,  231,  231,  231,  231,

      231,  231,  195,  231,  231,  231,  199,  200,  201,  205,
      231,  231,  231,  210,  231,  245,  234,    0,  254,    1,
        3,  257,  257,  257,  257,   14,  257,  257,  257,  257,
      257,  257,   28,  257,  257,  257,  257,  257,   35,  257,
       37,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   69,  257,  257,  257,
      257,   75,   76,   77,   79,  257,  257,  257,   85,  257,
       89,  257,  257,   94,  257,  257,   98,   99,  257,  257,
      107,  257,  257,  114,  115,  117,  257,  121,  257,  257,
      125,  126,  257,  133,  257,  136,  257,  257,  257,  257,

      257,  147,  257,  149,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  161,  257,  257,  257,  170,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  181,  257,  257,
      257,  257,  257,  257,  195,  257,  257,  257,  199,  200,
      201,  205,  257,  257,  257,  210,  257,    0,   10,    0,
       13,    0,   17,    0,    0,    0,    0,    0,    0,   32,
        0,    0,   36,    0,    0,   47,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   61,    0,   64,   70,
       71,    0,   73,    0,    0,    0,    0,    0,    0,   90,
       92,   95,    0,    0,    0,    0,    0,    0,  120,    0,

        0,    0,    0,  135,    0,  138,    0,  141,  145,  148,
        0,    0,    0,    0,    0,    0,    0,    0,  159,    0,
        0,    0,    0,    0,    0,  171,  172,  173,    0,    0,
      180,    0,    0,    0,    0,    0,    0,    0,  196,    0,
      198,  206,    0,    0,    0,  212,  224,   10,  224,   13,
      224,   17,  224,  224,  224,  224,  224,  224,   32,  224,
      224,   36,  224,  224,   47,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,   61,  224,   64,   70,   71,
      224,   73,  224,  224,  224,  224,  224,  224,   90,   92,
       95,  224,  224,  224,  224,  224,  224,  120,  224,  224,

      224,  224,  135,  224,  138,  224,  141,  145,  148,  224,
      224,  224,  224,  224,  224,  224,  224,  159,  224,  224,
      224,  224,  224,  224,  171,  172,  173,  224,  224,  180,
      224,  224,  224,  224,  224,  224,  224,  196,  224,  198,
      206,  224,  224,  224,  212,  247,  231,   10,  231,   13,
      231,   17,  231,  231,  231,  231,  231,  231,   32,  231,
      231,   36,  231,  231,   47,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,   61,  231,   64,   70,   71,
      231,   73,  231,  231,  231,  231,  231,  231,   90,   92,
       95,  231,  231,  231,  231,  231,  231,  120,  231,  231,

      231,  231,  135,  231,  138,  231,  141,  145,  148,  231,
      231,  231,  231,  231,  231,  231,  231,  159,  231,  231,
      231,  231,  231,  231,  171,  172,  173,  231,  231,  180,
      231,  231,  231,  231,  231,  231,  231,  196,  231,  198,
      206,  231,  231,  231,  212,  247,  254,  254,  257,   10,
      257,   13,  257,   17,  257,  257,  257,  257,  257,  257,
       32,  257,  257,   36,  257,  257,   47,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,   61,  257,   64,
       70,   71,  257,   73,  257,  257,  257,  257,  257,  257,
       90,   92,   95,  257,  257,  257,  257,  257,  257,  120,

      257,  257,  257,  257,  135,  257,  138,  257,  141,  145,
      148,  257,  257,  257,  257,  257,  257,  257,  257,  159,
      257,  257,  257,  257,  257,  257,  171,  172,  173,  257,
      257,  180,  257,  257,  257,  257,  257,  257,  257,  196,
      257,  198,  206,  257,  257,  257,  212,    0,    0,   15,
        0,   16,    0,    0,    0,   31,    0,   34,   45,   38,
        0,    0,    0,   53,    0,    0,    0,   58,   59,   60,
        0,   72,   74,    0,    0,   82,   83,    0,   96,   97,
        0,    0,    0,  111,    0,    0,  124,    0,  137,    0,
        0,  152,  153,    0,    0,    0,  157,    0,  160,    0,

      165,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  191,    0,  197,    0,  203,  204,  224,  224,   15,
      224,   16,  224,  224,  224,   31,  224,   34,   45,   38,
      224,  224,  224,   53,  224,  224,  224,   58,   59,   60,
      224,   72,   74,  224,  224,   82,   83,  224,   96,   97,
      224,  224,  224,  111,  224,  224,  124,  224,  137,  224,
      224,  152,  153,  224,  224,  224,  157,  224,  160,  224,
      165,   84,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  191,  224,  197,  224,  203,  204,  236,  231,  231,
       15,  231,   16,  231,  231,  231,   31,  231,   34,   45,

       38,  231,  231,  231,   53,  231,  231,  231,   58,   59,
       60,  231,   72,   74,  231,  231,   82,   83,  231,   96,
       97,  231,  231,  231,  111,  231,  231,  124,  231,  137,
      231,  231,  152,  153,  231,  231,  231,  157,  231,  160,
      231,  165,   84,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  191,  231,  197,  231,  203,  204,  242,  254,
      257,  257,   15,  257,   16,  257,  257,  257,   31,  257,
       34,   45,   38,  257,  257,  257,   53,  257,  257,  257,
       58,   59,   60,  257,   72,   74,  257,  257,   82,   83,
      257,   96,   97,  257,  257,  257,  111,  257,  257,  124,

      257,  137,  257,  257,  152,  153,  257,  257,  257,  157,
      257,  160,  257,  165,   84,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  191,  257,  197,  257,  203,  204,
        0,    0,    0,    0,    0,   30,   33,    0,   49,   50,
        0,    0,    0,    0,   63,    0,    0,    0,    0,  101,
        0,    0,  123,    0,    0,    0,  154,    0,    0,    0,
        0,  166,    0,  175,    0,    0,    0,    0,  189,    0,
        0,    0,  224,  224,  224,  224,  224,   30,   33,  224,
       49,   50,  224,  224,  224,  224,   63,  224,  224,  224,
      224,  101,  224,  224,  123,  224,  224,  224,  154,  224,

      224,  224,  224,  166,  224,  175,  224,  224,  224,  224,
      189,  224,  224,  224,  231,  231,  231,  231,  231,   30,
       33,  231,   49,   50,  231,  231,  231,  231,   63,  231,
      231,  231,  231,  101,  231,  231,  123,  231,  231,  231,
      154,  231,  231,  231,  231,  166,  231,  175,  231,  231,
      231,  231,  189,  231,  231,  231,  257,  257,  257,  257,
      257,   30,   33,  257,   49,   50,  257,  257,  257,  257,
       63,  257,  257,  257,  257,  101,  257,  257,  123,  257,
      257,  257,  154,  257,  257,  257,  257,  166,  257,  175,
      257,  257,  257,  257,  189,  257,  257,  257,    6,    0,

        0,   26,    0,    0,    0,    0,    0,    0,    0,   51,
        0,   55,   56,    0,   80,    0,  100,    0,  122,  132,
        0,  151,  155,  156,  158,    0,    0,    0,  177,  178,
      184,  187,  190,  194,  202,    6,  224,  224,   26,  224,
      224,  224,  224,  224,  224,  224,   51,  224,   55,   56,
      224,   80,  224,  100,  224,  122,  132,  224,  151,  155,
      156,  158,  224,  224,  224,  177,  178,  184,  187,  190,
      194,  202,    6,  231,  231,   26,  231,  231,  231,  231,
      231,  231,  231,   51,  231,   55,   56,  231,   80,  231,
      100,  231,  122,  132,  231,  151,  155,  156,  158,  231,

      231,  231,  177,  178,  184,  187,  190,  194,  202,    6,
      257,  257,   26,  257,  257,  257,  257,  257,  257,  257,
       51,  257,   55,   56,  257,   80,  257,  100,  257,  122,
      132,  257,  151,  155,  156,  158,  257,  257,  257,  177,
      178,  184,  187,  190,  194,  202,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,   54,    0,    0,  109,
        0,  163,    0,  169,    0,    0,  224,   19,  224,  224,
      224,  224,  224,  224,  224,  224,   54,  224,  224,  109,
      224,  163,  224,  169,  224,  224,  231,   19,  231,  231,
      231,  231,  231,  231,  231,  231,   54,  231,  231,  109,

      231,  163,  231,  169,  231,  231,  257,   19,  257,  257,
      257,  257,  257,  257,  257,  257,   54,  257,  257,  109,
      257,  163,  257,  169,  257,  257,    0,   27,    0,    0,
        0,    0,    0,    0,    0,   78,    0,    0,  164,    0,
        0,  224,   27,  224,  224,  224,  224,  224,  224,  224,
       78,  224,  224,  164,  224,  224,  231,   27,  231,  231,
      231,  231,  231,  231,  231,   78,  231,  231,  164,  231,
      231,  257,   27,  257,  257,  257,  257,  257,  257,  257,
       78,  257,  257,  164,  257,  257,    0,    0,   39,    0,
       42,   43,    0,    0,   88,  139,  185,    0,  224,  224,

       39,  224,   42,   43,  224,  224,   88,  139,  185,  224,
      231,  231,   39,  231,   42,   43,  231,  231,   88,  139,
      185,  231,  257,  257,   39,  257,   42,   43,  257,  257,
       88,  139,  185,  257,   11,    0,    0,    0,    0,  186,
       11,  224,  224,  224,  224,  186,   11,  231,  231,  231,
      231,  186,   11,  257,  257,  257,  257,  186,    0,    0,
       44,    0,  224,  224,   44,  224,  231,  231,   44,  231,
      257,  257,   44,  257,   40,    0,    0,   40,  224,  224,
       40,  231,  231,   40,  257,  257,    0,    0,  224,  224,
      231,  231,  257,  257,    0,   46,  224,   46,  231,   46,

      257,   46,    0,  224,  231,  257,    0,  224,  231,  257,
        0,  224,  231,  257,    0,  224,  231,  257,    0,  224,
      231,  257,    0,  224,  231,  257,    0,  224,  231,  257,
        0,  224,  231,  257,    0,  224,  231,  257,    0,  224,
      231,  257,    0,  224,  231,  257,    0,  224,  231,  257,
        0,  224,  231,  257,   41,   41,   41,   41,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   10,   16,   16,   17,
       18,   19,   16,   20,   16,   16,   16,   21,   10,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   10,   81,   10,    1,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    3,    1,
        5,    1,    4,    1,    4,    6,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    8
    } ;

static yyconst flex_int16_t yy_base[3668] =
    {   0,
        0,    0,   82,    0,  164,    0,  234,  242,  250,  258,
      278,    0,  973, 7889,  359, 7889,  947, 7889, 7889,  949,
      341, 7889,  913,  335,  354,  350,  398,  400,  453,  343,
      345,  404,  328,  339,  454,  395,  475,  524,  513,  324,
      455,  563,  571,  401,  472,  583,  347,  851, 7889,  556,
      638,  667,  630,  682,  719,  721,  774,  432,  471,  563,
      349,  397,  661,  712,  779,  828,  772,  384,  776,  832,
      879,  632,  503,  881,    0,  401, 7889, 7889, 7889,    0,
      631,  939,  968,  931,  983, 1020, 1022, 1075,  635,  648,
      819,  394,  472,  962,  884, 1080, 1129, 1027,  461, 1077,

     1133, 1180,  722,  730, 1089,    0,  503,  959, 1209,  665,
        0,  450,    0,  907, 7889,    0,  909, 7889,  518,    0,
      893, 1238, 1181, 1233, 1231, 1281, 1334,  836,  891, 1219,
      508,  524, 1289, 1298, 1356, 1405, 1300,  514, 1336, 1409,
     1456,  894,  787, 1394,  576, 7889,  828,  541, 7889,  883,
     7889, 7889, 7889,  565,  900,  943,  569,  635,  681,  681,
      740, 1347,  988,  763,  783, 7889,  817,  838,  880, 1448,
     1017,  952,  958, 1460,  962,  993, 1011, 1036, 1021, 1055,
     1057, 1057, 1464, 1067, 1079, 1116, 1122, 1344, 1124, 1128,
     1122, 1129, 1133, 1135, 1144, 1277, 7889, 1153, 1167, 1397,

     1207, 1347, 1474, 1170, 1225, 1233, 1282, 1468, 1458, 1390,
     1506, 1506, 1299, 1320, 1357, 1414, 1458, 1455, 1479, 1479,
     1487, 1515, 1503, 1513, 1518, 1522, 1524, 1514, 1536, 1523,
     1522, 1523, 1561, 1537, 1526, 1564, 1567, 1539, 1541, 1572,
     7889, 1582, 1577, 1574, 1588, 1583, 1571, 1587, 1591, 1579,
     1582, 1603, 7889, 1643, 1652, 1658, 1664, 1673,    0, 1593,
     1658, 1657, 1653, 1669, 1658, 1654, 1668, 1673, 1667, 1661,
     1668,    0, 1665, 1684, 1671, 1718, 1691, 1673, 1701, 1721,
     1675, 1707, 1714, 1731, 1717, 1733, 1735, 1736, 1768, 1731,
     1724, 1727, 1731, 1764, 1734, 1739, 1732, 1739, 1742, 1758,

     1770, 1772,    0, 1778, 1764, 1783, 1793, 1784, 1819, 1772,
     1784, 1789, 1787, 1826, 1816, 1821, 1837, 1835, 1819, 1815,
     1831, 1839, 1837, 1830, 1848, 1845, 1834, 1850, 1838, 1871,
     1882, 1855, 1858, 1846, 1892, 1858, 1880, 1887, 1893, 1898,
     1887, 1900, 1902, 1900, 1901, 1932,    0, 1937, 1939, 1935,
     1948, 1941, 1902, 1918, 1949, 1935, 1938, 1959,    0, 1999,
     2008,  909, 2014, 2022, 2031,    0, 1949, 2009, 2007, 2010,
     2027, 2016, 2014, 2028, 2031, 2022, 2024, 2026,    0, 2024,
     2044, 2029, 2075, 2047, 2035, 2059, 2080, 2050, 2056, 2070,
     2087, 2074, 2090, 2092, 2092, 2100, 2088, 2081, 2084, 2089,

     2122, 2092, 2098, 2107, 2120, 2115, 2120, 2128, 2131,    0,
     2135, 2121, 2140, 2147, 2141, 2175, 2131, 2143, 2147, 2142,
     2184, 2170, 2177, 2193, 2191, 2175, 2175, 2193, 2201, 2194,
     2188, 2205, 2202, 2191, 2207, 2195, 2227, 2238, 2213, 2215,
     2205, 2248, 2243, 2239, 2244, 2254, 2254, 2243, 2259, 2256,
     2257, 2256, 2258,    0, 2292, 2300, 2300, 2296, 2296, 2289,
     2302, 2305, 2292, 2297, 2316, 2356, 2365, 2371,  966, 2379,
     2388, 1970, 2406,    0,  617,    0, 2408,    0,    0,    0,
     2304, 2376, 2387, 2360, 2390, 2379, 2375, 2395, 2408, 2389,
     2395, 2396,    0, 2399, 2425, 2404, 2448, 2422, 2403, 2409,

     2461, 2417, 2421, 2431, 2449, 2434, 2450, 2465, 2465, 2483,
     2460, 2456, 2459, 2464, 2492, 2470, 2475, 2468, 2479, 2473,
     2479, 2493, 2506,    0, 2502, 2487, 2512, 2521, 2524, 2544,
     2504, 2520, 2529, 2524, 2538, 2529, 2542, 2560, 2558, 2535,
     2541, 2571, 2574, 2568, 2563, 2580, 2577, 2566, 2583, 2571,
     2583, 2596, 2591, 2594, 2589, 2619, 2597, 2596, 2602, 2623,
     2615, 2610, 2626, 2634, 2626, 2624, 2637,    0, 2659, 2672,
     2659, 2652, 2666, 2654, 2657, 2661, 2649, 2659, 2684,    0,
      880, 7889, 2681, 7889, 2682, 7889, 7889, 2692, 7889, 2681,
     2688, 7889, 2684, 2691, 2678, 2701,  829, 2703, 2696, 2703,

     2712, 2700, 2716, 2718, 2709, 2712, 2713, 2713, 2713, 2735,
     2719, 2739, 2734, 2727, 2742, 2743, 2740, 2749, 2739, 2758,
     2747, 2758, 2764, 7889, 2774, 2758, 2772, 2759, 2761, 2763,
     2782, 2771, 2790, 2781, 2789, 2782, 2784, 2787, 2795, 2780,
     2793, 2785, 2794, 2805, 2813, 2822, 2802, 7889, 7889, 2814,
     2804, 2830, 2815, 2831, 2831, 2841, 2836, 2839, 7889, 2825,
     2828, 2840, 2850, 2837, 7889, 2834, 7889, 7889,  828, 2843,
     2845, 2853, 2854, 2855, 2848, 7889, 2843, 2861, 2869, 2871,
     2874, 2864, 2865, 2877, 2883, 2890, 2881, 2892, 2886, 2882,
     2894, 2890, 2899, 2890, 2902, 2901, 2898, 2897, 2907, 2898,

     2910, 7889, 2905, 2913, 2899, 2917, 2909, 7889, 2920, 2920,
     2918, 2935, 2940, 2943, 2938, 2936, 2943, 2938, 2952, 2954,
     2955, 2950, 2944, 2965, 2947, 2960, 2959, 2966, 2964, 2958,
     3016, 3021, 3029, 3038, 3044, 3049, 3012,    0, 3013,    0,
        0, 3025,    0, 3015, 3037,    0, 3033, 3040, 3027, 3050,
      823, 3050, 3041, 3046, 3051, 3040, 3056, 3058, 3049, 3050,
     3051, 3045, 3052, 3067, 3050, 3088, 3065, 3058, 3096, 3074,
     3079, 3083, 3083, 3107, 3094, 3103, 3107,    0, 3113, 3098,
     3112, 3099, 3101, 3101, 3119, 3104, 3124, 3114, 3137, 3113,
     3115, 3117, 3125, 3112, 3135, 3132, 3146, 3158, 3160, 3171,

     3153,    0,    0, 3161, 3149, 3166, 3152, 3169, 3166, 3176,
     3171, 3176,    0, 3161, 3163, 3179, 3183, 3170,    0, 3167,
        0,    0,  777, 3179, 3181, 3190, 3197, 3203, 3199,    0,
     3194, 3212, 3218, 3220, 3221, 3209, 3208, 3216, 3223, 3230,
     3221, 3232, 3224, 3220, 3232, 3228, 3236, 3226, 3238, 3236,
     3233, 3230, 3241, 3236, 3248,    0, 3248, 3261, 3256, 3268,
     3260,    0, 3269, 3269, 3265, 3280, 3277, 3280, 3283, 3275,
     3277, 3282, 3296, 3293, 3292, 3286, 3280, 3329, 3281, 3296,
     3320, 3303, 3307, 3306, 3350, 3357, 3364, 3377, 3386, 3396,
     3401, 3411, 3330,    0, 3332,    0,    0, 3384,    0, 3384,

     3390,    0, 3384, 3391, 3384, 3407,  773, 3407, 3398, 3404,
     3411, 3395, 3412, 3415, 3406, 3407, 3407, 3401, 3408, 3423,
     3406, 3439, 3427, 3419, 3447, 3434, 3435, 3452, 3445, 3464,
     3451, 3460, 3465,    0, 3470, 3455, 3469, 3456, 3458, 3458,
     3475, 3460, 3479, 3470, 3478, 3475, 3477, 3479, 3487, 3472,
     3489, 3495, 3499, 3510, 3511, 3531, 3509,    0,    0, 3518,
     3508, 3525, 3512, 3528, 3525, 3534, 3530, 3533,    0, 3518,
     3520, 3532, 3546, 3533,    0, 3529,    0,    0,  769, 3538,
     3539, 3550, 3551, 3554, 3552,    0, 3547, 3564, 3569, 3576,
     3578, 3568, 3567, 3575, 3581, 3588, 3579, 3590, 3582, 3577,

     3589, 3585, 3593, 3583, 3599, 3597, 3594, 3589, 3602, 3594,
     3606,    0, 3601, 3609, 3609, 3621, 3612,    0, 3620, 3625,
     3622, 3639, 3636, 3639, 3642, 3633, 3634, 3639, 3653, 3650,
     3649, 3643, 3641, 3662, 3640, 3655, 3653, 3661, 3661, 3670,
     3711, 3716, 3727, 3736, 3742, 3750, 3755, 3765, 3772, 3777,
     3783, 3801,    0, 3692,    0, 3719,    0,    0, 3751,    0,
     3741, 3765,    0, 3771, 3778, 3765, 3788,  743, 3788, 3779,
     3784, 3788, 3776, 3792, 3794, 3786, 3788, 3790, 3784, 3791,
     3806, 3790, 3822, 3805, 3799, 3835, 3829, 3826, 3842, 3826,
     3846, 3833, 3842, 3846,    0, 3851, 3835, 3849, 3837, 3839,

     3839, 3859, 3844, 3863, 3853, 3861, 3853, 3855, 3859, 3867,
     3867, 3880, 3880, 3884, 3897, 3899, 3910, 3892,    0,    0,
     3900, 3888, 3905, 3890, 3906, 3903, 3913, 3909, 3915,    0,
     3900, 3902, 3921, 3922, 3909,    0, 3906,    0,    0,  733,
     3917, 3920, 3929, 3941, 3942, 3937,    0, 3932, 3951, 3957,
     3959, 3960, 3948, 3947, 3954, 3960, 3967, 3959, 3970, 3962,
     3959, 3971, 3967, 3975, 3965, 3977, 3975, 3972, 3986, 3982,
     3973, 3985,    0, 3980, 3995, 3984, 4006, 3999,    0, 4008,
     4008, 4004, 4019, 4016, 4019, 4022, 4013, 4020, 4017, 4035,
     4033, 4032, 4026, 4020, 4060, 4019, 4032, 4032, 4037, 4037,

     4040, 4055, 4058, 4053, 4071, 4066, 4064, 4069, 4079, 4068,
     4076, 7889, 4084, 7889, 7889, 7889, 4092, 4079, 7889, 4089,
     4094, 4087, 4088, 4093, 4079, 4080, 4082, 4102, 4099, 4091,
     4117, 4115, 4125, 4121, 4135, 4117, 4120, 7889, 4132, 4130,
     7889, 7889, 7889, 4127, 4119, 4130, 4126, 4128, 4148, 4146,
     4144, 4133, 4134, 4140, 4147, 4156, 4154, 7889, 7889, 4156,
     4145, 4148, 7889, 4146, 4156, 4161, 4184,  767,  764, 4187,
     7889, 7889, 4187,  727, 4186, 7889, 7889, 4176, 4185, 7889,
     4180, 4179, 4192, 4186, 4184, 4186, 4204, 7889, 4185, 4204,
     4201, 4193, 4209, 4193, 4209, 7889, 4200, 4198, 4199, 4201,

     7889, 4213, 4212, 4217, 4245, 4246, 4247, 4244, 4235, 4251,
     7889, 4239, 4253, 4241, 4240, 4260, 7889, 4249, 4251, 4251,
     4264, 4256, 7889, 4264, 4256, 4251, 4267, 7889, 7889, 4255,
     4261, 4256, 4271, 7889, 7889, 4259, 4276, 4274, 4290, 4288,
     4292, 4306, 4305, 4308, 4305, 4307, 4307, 7889, 7889, 7889,
     4312, 4309, 7889, 7889, 4334, 4357, 4312, 4313, 4307, 4324,
     4320, 4318, 4324, 4348, 4336, 4343,    0, 4351,    0,    0,
        0, 4362, 4346,    0, 4353, 4365, 4359, 4360, 4365, 4351,
     4352, 4354, 4373, 4370, 4361, 4374, 4376, 4373, 4367, 4380,
     4367, 4369,    0, 4382, 4381,    0,    0,    0, 4395, 4387,

     4397, 4393, 4395, 4415, 4414, 4413, 4404, 4406, 4412, 4419,
     4428, 4426,    0,    0, 4428, 4416, 4419,    0, 4416, 4417,
     4418, 4432,  762,  758, 4431,    0,    0, 4434,  720, 4437,
        0,    0, 4427, 4439,    0, 4434, 4434, 4461, 4455, 4453,
     4454, 4471,    0, 4452, 4472, 4470, 4464, 4481, 4465, 4481,
        0, 4472, 4470, 4472, 4473,    0, 4483, 4473, 4474, 4500,
     4494, 4491, 4488, 4484, 4502,    0, 4492, 4507, 4509, 4508,
     4527,    0, 4516, 4518, 4518, 4532, 4525,    0, 4535, 4528,
     4523, 4539,    0,    0, 4526, 4534, 4528, 4542,    0,    0,
     4529, 4537, 4531, 4538, 4534, 4537, 4557, 4556, 4560, 4558,

     4560, 4561,    0,    0,    0, 4580, 4577,    0,    0, 4609,
     4614, 4625, 4630, 4636, 4641, 4592, 4593, 4588, 4628, 4623,
     4625, 4630, 4640, 4628, 4635,    0, 4643,    0,    0,    0,
     4650, 4639,    0, 4647, 4652, 4645, 4646, 4651, 4637, 4638,
     4640, 4659, 4656, 4647, 4688, 4663, 4659, 4655, 4668, 4650,
     4675,    0, 4687, 4687,    0,    0,    0, 4685, 4677, 4687,
     4683, 4685, 4705, 4702, 4701, 4691, 4692, 4698, 4705, 4714,
     4712,    0,    0, 4714, 4702, 4705,    0, 4702, 4704, 4705,
     4721,  754,  750, 4743,    0,    0, 4722,  683, 4720,    0,
        0, 4733, 4742,    0, 4739, 4739, 4752, 4747, 4745, 4746,

     4763,    0, 4744, 4762, 4759, 4751, 4767, 4751, 4767,    0,
     4758, 4756, 4757, 4758,    0, 4768, 4760, 4761, 4803, 4783,
     4780, 4778, 4791, 4810,    0, 4799, 4813, 4801, 4800, 4819,
        0, 4808, 4810, 4810, 4822, 4814,    0, 4822, 4814, 4809,
     4825,    0,    0, 4812, 4820, 4814, 4828,    0,    0, 4815,
     4824, 4818, 4827, 4823, 4827, 4861, 4862, 4865, 4864, 4867,
     4867,    0,    0,    0, 4872, 4869,    0,    0, 4888, 4893,
     4898, 4917, 4925, 4930, 4940, 4947, 4882, 4896, 4890, 4918,
     4913, 4918, 4923, 4940, 4928, 4935,    0, 4943,    0,    0,
        0, 4950, 4939,    0, 4947, 4952, 4945, 4946, 4953, 4940,

     4941, 4943, 4962, 4959, 4952, 4966, 4967, 4963, 4958, 4971,
     4952, 4965,    0, 4985, 4983,    0,    0,    0, 4987, 4979,
     4989, 4985, 4987, 5007, 5004, 5002, 4991, 4992, 4998, 5007,
     5017, 5015,    0,    0, 5017, 5005, 5008,    0, 5007, 5008,
     5009, 5023,  717,  710, 5045,    0,    0, 5024,  670, 5021,
        0,    0, 5011, 5031,    0, 5026, 5026, 5045, 5046, 5044,
     5046, 5063,    0, 5044, 5062, 5059, 5051, 5067, 5051, 5069,
        0, 5061, 5059, 5061, 5062,    0, 5074, 5064, 5065, 5106,
     5086, 5083, 5080, 5081, 5097,    0, 5086, 5105, 5101, 5100,
     5119,    0, 5108, 5110, 5110, 5122, 5114,    0, 5122, 5114,

     5109, 5127,    0,    0, 5115, 5123, 5117, 5131,    0,    0,
     5120, 5128, 5122, 5130, 5126, 5129, 5154, 5153, 5157, 5159,
     5161, 5164,    0,    0,    0, 5172, 5169,    0,    0, 7889,
     7889,  665, 5176, 5162, 5176, 7889, 5177, 5158, 5179, 5184,
     5183, 5175, 7889, 5171, 5172, 5173, 5180, 5177, 7889, 5191,
     7889, 5179, 5186, 5183, 5194, 5195, 5204, 5204, 5213, 5217,
     5202, 5215, 5226, 5221, 5232, 5234, 7889, 5220, 5237, 5223,
     5240, 7889, 7889,  633, 7889, 5221, 5238, 5230, 7889, 5247,
     7889, 5244, 5247, 7889, 5233, 5253, 7889, 7889, 5252, 5239,
     7889, 5237, 5248, 7889, 7889, 7889, 5258, 5261, 5262, 5277,

     7889, 7889, 5283, 7889, 5279, 7889, 5280, 5273,  626, 5274,
     5281, 7889, 5277, 7889, 5277,  529, 5289, 5295, 5281, 5283,
     5298, 5300, 5301, 7889, 5303, 5306, 5291, 7889, 5310, 5291,
     5314, 5312, 5297, 5310, 5307, 5314, 5315, 7889, 5314, 5335,
     5333, 5331, 5342, 5337, 7889, 5347, 5330, 5349, 7889, 7889,
     7889, 5336, 5342, 5356, 5344, 7889, 5345,    0,    0,  619,
     5357, 5343, 5359,    0, 5361, 5342, 5363, 5368, 5367, 5361,
        0, 5355, 5355, 5357, 5364, 5361,    0, 5386,    0, 5372,
     5380, 5382, 5392, 5396, 5408, 5397, 5399, 5410, 5395, 5402,
     5410, 5402, 5412, 5413,    0, 5399, 5421, 5407, 5424,    0,

        0,  616,    0, 5405, 5424, 5414,    0, 5430,    0, 5428,
     5431,    0, 5417, 5448,    0,    0, 5445, 5448,    0, 5430,
     5444,    0,    0,    0, 5454, 5449, 5454, 5468,    0,    0,
     5470,    0, 5466,    0, 5464, 5454,  613, 5455, 5462,    0,
     5458,    0, 5460,  561, 5473, 5479, 5465, 5467, 5482, 5486,
     5485,    0, 5486, 5490, 5475,    0, 5494, 5486, 5507, 5506,
     5496, 5508, 5508, 5518, 5508,    0, 5507, 5527, 5520, 5518,
     5526, 5518,    0, 5528, 5511, 5530,    0,    0,    0, 5519,
     5526, 5540, 5528,    0, 5529,  612, 5582,    0,    0,  609,
     5546, 5533, 5547,    0, 5548, 5540, 5561, 5567, 5576, 5571,

        0, 5565, 5565, 5566, 5573, 5570,    0, 5584,    0, 5570,
     5577, 5574, 5584, 5587, 5597, 5586, 5610, 5599, 5583, 5590,
     5598, 5591, 5602, 5604,    0, 5590, 5607, 5605, 5623,    0,
        0,  606,    0, 5614, 5634, 5624,    0, 5640,    0, 5637,
     5640,    0, 5626, 5646,    0,    0, 5643, 5632,    0, 5627,
     5636,    0,    0,    0, 5651, 5643, 5644, 5658,    0,    0,
     5659,    0, 5655,    0, 5654, 5645,  591, 5647, 5654,    0,
     5650,    0, 5661,  611, 5673, 5680, 5672, 5675, 5691, 5696,
     5695,    0, 5696, 5699, 5684,    0, 5703, 5684, 5705, 5703,
     5688, 5700, 5699, 5707, 5697,    0, 5696, 5716, 5709, 5707,

     5716, 5709,    0, 5720, 5703, 5722,    0,    0,    0, 5720,
     5726, 5741, 5735,    0, 5737, 5766,  662, 5771, 5781,    0,
        0,  565, 5750, 5749, 5765,    0, 5772, 5754, 5776, 5782,
     5781, 5773,    0, 5767, 5767, 5768, 5775, 5772,    0, 5786,
        0, 5772, 5779, 5776, 5786, 5788, 5797, 5787, 5812, 5800,
     5784, 5791, 5799, 5791, 5802, 5804,    0, 5791, 5824, 5820,
     5838,    0,    0,  534,    0, 5819, 5836, 5826,    0, 5842,
        0, 5839, 5842,    0, 5828, 5848,    0,    0, 5845, 5833,
        0, 5829, 5839,    0,    0,    0, 5851, 5844, 5845, 5859,
        0,    0, 5860,    0, 5856,    0, 5854, 5845,  511, 5847,

     5855,    0, 5864,    0, 5866,  714, 5884, 5891, 5878, 5881,
     5896, 5898, 5897,    0, 5898, 5901, 5886,    0, 5905, 5886,
     5907, 5905, 5890, 5902, 5900, 5907, 5898,    0, 5897, 5917,
     5910, 5908, 5916, 5909,    0, 5920, 5904, 5936,    0,    0,
        0, 5925, 5937, 5952, 5941,    0, 5943, 5957, 7889, 5950,
     7889, 5946, 7889, 5947, 5948, 5943, 5959, 5962, 5961, 7889,
     5946, 5948, 7889, 5964, 5951, 7889, 5966, 5961, 5963, 5971,
     5962, 5973, 5974, 5969, 5978, 5965, 7889, 5996, 7889, 7889,
     7889, 5997, 7889, 5989, 5989, 6004, 6001, 6012, 6005, 7889,
     7889, 7889, 6014, 6001, 6015, 6020, 6021, 6016, 7889, 6023,

     6024, 6014, 6015, 7889, 6026, 7889, 6018, 7889, 7889, 7889,
     6023, 6029, 6030, 6020, 6027, 6028, 6014, 6020, 7889, 6025,
     6043, 6040, 6062, 6066, 6058, 7889, 7889, 7889, 6059, 6069,
     7889, 6066, 6075, 6065, 6064, 6078, 6062, 6077, 7889, 6068,
     7889, 7889, 6082, 6066, 6078, 7889, 6086,    0, 6079,    0,
     6076,    0, 6077, 6078, 6073, 6089, 6092, 6092,    0, 6078,
     6081,    0, 6110, 6098,    0, 6119, 6114, 6117, 6126, 6117,
     6128, 6129, 6123, 6131, 6117,    0, 6135,    0,    0,    0,
     6134,    0, 6120, 6119, 6133, 6129, 6141, 6134,    0,    0,
        0, 6144, 6131, 6145, 6150, 6151, 6146,    0, 6154, 6156,

     6147, 6161,    0, 6173,    0, 6171,    0,    0,    0, 6176,
     6183, 6185, 6175, 6182, 6183, 6168, 6173,    0, 6177, 6182,
     6177, 6193, 6196, 6187,    0,    0,    0, 6187, 6198,    0,
     6195, 6205, 6195, 6194, 6208, 6192, 6207,    0, 6199,    0,
        0, 6214, 6199, 6224,    0, 6256, 6233,    0, 6232,    0,
     6229,    0, 6231, 6238, 6233, 6249, 6252, 6251,    0, 6236,
     6238,    0, 6254, 6241,    0, 6256, 6251, 6253, 6261, 6252,
     6263, 6264, 6259, 6268, 6255,    0, 6273,    0,    0,    0,
     6272,    0, 6258, 6257, 6271, 6275, 6288, 6287,    0,    0,
        0, 6297, 6285, 6305, 6310, 6311, 6306,    0, 6313, 6314,

     6304, 6305,    0, 6316,    0, 6308,    0,    0,    0, 6313,
     6319, 6320, 6310, 6317, 6318, 6304, 6310,    0, 6315, 6320,
     6315, 6331, 6334, 6325,    0,    0,    0, 6333, 6345,    0,
     6348, 6358, 6349, 6354, 6368, 6352, 6367,    0, 6358,    0,
        0, 6372, 6356, 6368,    0, 6389, 6400, 6414, 6384,    0,
     6378,    0, 6375,    0, 6382, 6396, 6391, 6407, 6410, 6410,
        0, 6396, 6399,    0, 6415, 6401,    0, 6416, 6410, 6412,
     6421, 6412, 6423, 6424, 6418, 6426, 6412,    0, 6430,    0,
        0,    0, 6429,    0, 6415, 6414, 6428, 6424, 6439, 6433,
        0,    0,    0, 6443, 6436, 6463, 6468, 6469, 6464,    0,

     6472, 6474, 6465, 6466,    0, 6476,    0, 6468,    0,    0,
        0, 6472, 6478, 6480, 6470, 6477, 6478, 6463, 6468,    0,
     6472, 6477, 6472, 6488, 6491, 6482,    0,    0,    0, 6482,
     6496,    0, 6494, 6504, 6500, 6512, 6526, 6510, 6525,    0,
     6517,    0,    0, 6532, 6517, 6529,    0, 6530, 6512, 7889,
     6532, 7889, 6535, 6528, 6538, 7889, 6539, 7889, 7889,  504,
     6539, 6541, 6526, 7889, 6534, 6544, 6549, 7889, 7889, 7889,
     6531, 7889, 7889, 6551, 6539, 7889, 7889, 6553, 7889, 7889,
     6556, 6549, 6551, 7889, 6557, 6572, 7889, 6564, 7889, 6581,
     6572, 7889, 7889, 6575, 6577, 6578, 7889, 6576, 7889, 6592,

     7889, 7889, 6585, 6595, 6578, 6586, 6587, 6589, 6582, 6597,
     6585, 7889, 6601, 7889, 6589, 7889, 7889, 6601, 6583,    0,
     6603,    0, 6606, 6598, 6612,    0, 6614,    0,    0,  485,
     6615, 6623, 6621,    0, 6629, 6639, 6644,    0,    0,    0,
     6627,    0,    0, 6648, 6637,    0,    0, 6651,    0,    0,
     6650, 6642, 6643,    0, 6643, 6646,    0, 6638,    0, 6655,
     6646,    0,    0, 6648, 6649, 6649,    0, 6647,    0, 6663,
        0,    0, 6656, 6666, 6649, 6656, 6661, 6664, 6658, 6679,
     6680,    0, 6696,    0, 6684,    0,    0, 6718, 6696, 6679,
        0, 6700,    0, 6709, 6702, 6712,    0, 6713,    0,    0,

      447, 6713, 6715, 6700,    0, 6708, 6718, 6723,    0,    0,
        0, 6705,    0,    0, 6725, 6713,    0,    0, 6727,    0,
        0, 6730, 6723, 6725,    0, 6725, 6727,    0, 6719,    0,
     6736, 6727,    0,    0, 6730, 6744, 6744,    0, 6742,    0,
     6758,    0,    0, 6752, 6763, 6752, 6760, 6761, 6763, 6756,
     6771, 6759,    0, 6775,    0, 6763,    0,    0, 6791, 6804,
     6784, 6767,    0, 6793,    0, 6797, 6797, 6807,    0, 6808,
        0,    0,  439, 6808, 6810, 6795,    0, 6803, 6813, 6818,
        0,    0,    0, 6801,    0,    0, 6822, 6810,    0,    0,
     6824,    0,    0, 6823, 6815, 6816,    0, 6817, 6820,    0,

     6812,    0, 6829, 6820,    0,    0, 6822, 6823, 6823,    0,
     6821,    0, 6846,    0,    0, 6840, 6856, 6840, 6855, 6856,
     6858, 6851, 6866, 6854,    0, 6870,    0, 6858,    0,    0,
     6870, 6878, 6861, 6864, 6876, 7889, 7889, 6910, 7889, 7889,
     6881, 6868, 6879, 6873, 7889, 6880, 6886, 6875, 6875, 7889,
     6875, 6902, 7889, 6904, 6902, 6904, 7889, 6920, 6917, 6927,
     6928, 7889, 6929, 7889, 6915, 6932, 6924, 6936, 7889, 6939,
     6942, 6923, 6942, 6949, 6931, 6934, 6946,    0,    0, 6968,
        0,    0, 6949, 6945, 6956, 6956,    0, 6964, 6978, 6970,
     6970,    0, 6970, 6987,    0, 6988, 6981, 6983,    0, 6991,

     6985, 6997, 6999,    0, 7001,    0, 6987, 7002, 6994, 7006,
        0, 7007, 7019, 7000, 7022, 7029, 7012, 7016, 7035,    0,
        0, 7046,    0,    0, 7038, 7024, 7034, 7028,    0, 7035,
     7041, 7032, 7033,    0, 7034, 7051,    0, 7052, 7046, 7053,
        0, 7061, 7055, 7065, 7078,    0, 7076,    0, 7068, 7083,
     7076, 7095,    0, 7096, 7098, 7078, 7097, 7104, 7086, 7089,
     7101,    0,    0, 7122,    0,    0, 7109, 7095, 7107, 7102,
        0, 7110, 7116, 7105, 7107,    0, 7107, 7134,    0, 7140,
     7132, 7134,    0, 7143, 7144, 7154, 7155,    0, 7156,    0,
     7142, 7156, 7149, 7161,    0, 7167, 7169, 7151, 7889, 7158,

     7172,  433, 7161, 7181, 7195, 7182, 7169, 7182, 7177, 7889,
     7189, 7889, 7889, 7177, 7889, 7180, 7889, 7198, 7889, 7889,
     7197, 7889, 7889, 7889, 7889, 7187, 7194, 7198, 7889, 7889,
     7216, 7889, 7889, 7889, 7889,    0, 7198, 7211,  429, 7201,
     7221, 7229, 7222, 7209, 7228, 7227,    0, 7230,    0,    0,
     7218,    0, 7221,    0, 7236,    0,    0, 7235,    0,    0,
        0,    0, 7224, 7230, 7236,    0,    0, 7254,    0,    0,
        0,    0,    0, 7236, 7249,  398, 7241, 7261, 7273, 7263,
     7251, 7272, 7267,    0, 7269,    0,    0, 7258,    0, 7261,
        0, 7276,    0,    0, 7275,    0,    0,    0,    0, 7269,

     7275, 7274,    0,    0, 7293,    0,    0,    0,    0,    0,
     7276, 7290,  393, 7279, 7299, 7311, 7300, 7287, 7310, 7305,
        0, 7307,    0,    0, 7298,    0, 7301,    0, 7317,    0,
        0, 7317,    0,    0,    0,    0, 7313, 7319, 7316,    0,
        0, 7334,    0,    0,    0,    0, 7327, 7889, 7329, 7319,
     7320, 7340, 7327, 7338, 7344, 7341, 7889, 7350, 7347, 7889,
     7337, 7889, 7351, 7889, 7355, 7351, 7361,    0, 7363, 7352,
     7353, 7368, 7357, 7366, 7372, 7369,    0, 7385, 7382,    0,
     7372,    0, 7386,    0, 7390, 7386, 7387,    0, 7389, 7378,
     7384, 7399, 7388, 7398, 7404, 7400,    0, 7409, 7406,    0,

     7396,    0, 7410,    0, 7414, 7419, 7420,    0, 7422, 7411,
     7412, 7429, 7416, 7426, 7432, 7435,    0, 7444, 7441,    0,
     7431,    0, 7445,    0, 7449, 7445, 7440, 7889, 7455, 7457,
     7462, 7458, 7463, 7465, 7466, 7889, 7468, 7465, 7889, 7470,
     7469, 7461,    0, 7485, 7482, 7487, 7481, 7485, 7488, 7489,
        0, 7492, 7490,    0, 7502, 7501, 7493,    0, 7508, 7505,
     7510, 7504, 7508, 7509, 7515,    0, 7517, 7516,    0, 7522,
     7522, 7514,    0, 7529, 7526, 7531, 7525, 7529, 7539, 7540,
        0, 7542, 7539,    0, 7544, 7545, 7538, 7542, 7889, 7535,
     7889, 7889, 7551, 7546, 7889, 7889, 7889, 7560, 7553, 7556,

        0, 7548,    0,    0, 7557, 7552,    0,    0,    0, 7566,
     7564, 7567,    0, 7561,    0,    0, 7571, 7567,    0,    0,
        0, 7581, 7574, 7577,    0, 7569,    0,    0, 7578, 7573,
        0,    0,    0, 7596, 7889, 7588, 7592, 7604, 7586, 7889,
        0, 7594, 7598, 7611, 7594,    0,    0, 7607, 7611, 7623,
     7605,    0,    0, 7611, 7615, 7627, 7609,    0, 7623, 7616,
     7889, 7636, 7633, 7622,    0, 7643, 7638, 7626,    0, 7646,
     7641, 7629,    0, 7649, 7889,  339, 7647,    0,  322, 7648,
        0,  314, 7649,    0,  309, 7650, 7644, 7651, 7648, 7654,
     7652, 7664, 7661, 7666, 7665, 7889, 7666,    0, 7667,    0,

     7668,    0, 7686, 7687, 7693, 7694, 7684, 7686, 7688, 7689,
     7685, 7686, 7687, 7688, 7702, 7712, 7713, 7714, 7706, 7707,
     7710, 7711, 7710, 7712, 7720, 7721, 7727, 7728, 7729, 7730,
      219,  211,  203,  195, 7737, 7738, 7739, 7745, 7735, 7738,
     7740, 7742, 7746, 7747, 7748, 7749, 7744, 7745, 7755, 7756,
     7762, 7763, 7764, 7767, 7889,    0,    0,    0, 7889, 7832,
     7837, 7840, 7848, 7856, 7864, 7872, 7880
    } ;

static yyconst flex_int16_t yy_def[3668] =
    {   0,
     3659,    1, 3659,    3, 3659,    5,    5,    5,    5,    5,
     3659,   11, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3659, 3659, 3659, 3661,
     3661, 3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3661, 3661, 3663,
     3664, 3664, 3664, 3664, 3659, 3664, 3664, 3659, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3659, 3664, 3659, 3659, 3665,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3661, 3661, 3661, 3661, 3661,
     3661, 3663, 3663, 3664, 3664, 3664, 3666, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3665, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3659, 3661, 3661, 3661, 3661, 3661,
     3659, 3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3659, 3661, 3661, 3661, 3661, 3661, 3659, 3661, 3663, 3659,
     3663, 3666, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3659,
     3661, 3659, 3661, 3661, 3659, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3659, 3659,
     3661, 3661, 3661, 3659, 3667, 3663, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3661, 3659, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3659, 3661, 3667, 3667, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3661, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3661, 3667, 3667, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3661, 3667,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659,
     3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3662, 3662, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659,
     3659, 3659, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3660, 3660, 3660,
     3662, 3662, 3662, 3664, 3664, 3664, 3659, 3659, 3660, 3660,
     3662, 3662, 3664, 3664, 3659, 3659, 3660, 3660, 3662, 3662,

     3664, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660,
     3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660,
     3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,    0, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659
    } ;

static yyconst flex_int16_t yy_nxt[7972] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   14,   18,   19,
       19,   19,   19,   20,   19,   14,   14,   14,   14,   14,
       19,   21,   22,   23,   19,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       48,   14,   14,   15,   16,   15,   17,   49,   14,   14,
       18,   19,   19,   19,   19,   20,   50,   51,   51,   51,

       51,   51,   19,   21,   22,   23,   19,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   75,   77,   75,   78,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   75,   48,   75,   14,   15,   16,   15,   17,   14,
       79,   14,   18,   19,   19,   19,   80,   20,   81,   82,
       82,   82,   82,   82,   19,   21,   22,   23,   19,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  106,   77,   14,   14,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  106,   48,  106,  108, 3638,   80,  109,
      109,  109,  109,  109,  108, 3637,   80,  109,  109,  109,
      109,  109,   19, 3636,   19,  110,  110,  110,  110,  110,
       19, 3635,   19,  110,  110,  110,  110,  110,  111,  112,
      113,   15,  114,  115,  111,  111,   18,  116,  116,  116,
      116,  117,  116,  111,  111,  111,  111,  111,  118,  119,

      120,  121,  118,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  111,  145,  111,  146,
      111,  111,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  111,  145,  111,  147,  111,
      148, 3593,  148,  151,  152,  154, 3591,  198,  199,  227,
      193,  155,  191,  156, 3589,  167,  252,  157,  158,  159,
      160,  161,  168,  162,  194,  192,  169,  163,  304,  170,
      164, 3587,  171,  165,  154,  172,  198,  199,  227,  193,

      155,  191,  156,  166,  167,  252,  157,  158,  159,  160,
      161,  168,  162,  194,  192,  169,  163,  304,  170,  164,
      204,  171,  165,  173,  172,  178,  305,  174,  205,  333,
      358,  175,  166,  411,  206,  195,  179,  176,  180,  243,
      177,  244,  196,  181,  245, 2232,  182,  197,  183,  204,
     2100,  475,  173,  148,  178,  305,  174,  205,  333,  358,
      175,  297,  411,  206,  195,  179,  176,  180,  243,  177,
      244,  196,  181,  245,  298,  182,  197,  183,  184,  200,
      228, 1970,  185,  201,  229, 1842,  186,  202,  230,  187,
      297, 3164,  188,  203,  231,  189,  299,  246,  190, 3122,

      207,  412,  208,  298,  209,  247,  440,  184,  200,  228,
      300,  185,  201,  229,  210,  186,  202,  230,  187,  211,
      212,  188,  203,  231,  189,  299,  246,  190,  352,  207,
      412,  208,  465,  209,  247,  440,  353, 3080,  223,  300,
      478,  479,  148,  210,  148, 2412, 2413,  525,  211,  212,
      213,  214,  224,  526,  215,  225, 3038,  352,  226,  554,
      216,  465,  217, 2708,  218,  353,  219,  223,  220,  221,
      222,  254,  254,  254,  254,  254,  525, 2511, 2512,  213,
      214,  224,  526,  215,  225,  255, 2686,  226,  554,  216,
      232,  217,  233,  218,  301,  219,  238,  220,  221,  222,

      234,  302,  235,  239,  240,  579,  303,  236,  237,  583,
      241,  588,  248,  242,  255,  249,  250, 2649,  475,  232,
      148,  233,  251,  301,  362,  238, 2546, 2611, 2612,  234,
      302,  235,  239,  240,  579,  303,  236,  237,  583,  241,
      588,  248,  242, 2606,  249,  250,  360,  360,  360,  360,
      360,  251,  256,  257,  257,  257,  257,  257, 2584,  268,
      361, 2547,  589,  269,  404, 2506,  270,  258, 2484,  271,
      349, 2447,  350,  406, 2646,  351,  469,  405, 2407,  272,
      473,  473,  473,  473,  473, 2385,  306,  407,  268,  361,
      307,  589,  269,  404,  308,  270,  258,  260,  271,  349,

      309,  350,  406,  261,  351,  262,  405,  273,  272,  263,
      264,  265,  266,  267,  274,  306,  407, 2348,  275,  307,
      590,  276, 2282,  308,  277,  591,  260,  278, 2278,  309,
     2713, 2714,  261, 2277,  262, 2150,  273,  310,  263,  264,
      265,  266,  267,  274,  279,  311,  284,  275,  280,  590,
      276,  312,  281,  277,  591,  459,  278,  285,  282,  286,
      456,  283,  457,  460,  287,  458,  310,  288, 2146,  289,
     2145,  592, 2020,  279,  311,  284, 2016,  280, 2015, 1892,
      312,  281, 1888, 1887,  459, 1764,  285,  282,  286,  456,
      283,  457,  460,  287,  458, 1686,  288,  329,  289,  290,

      592,  334,  598,  291,  313,  335,  314,  292,  315,  336,
      293,  330,  573,  294,  331,  337,  295,  332,  316,  296,
      574, 1603,  599,  317,  318, 1525,  329,  600,  290, 1444,
      334,  598,  291,  313,  335,  314,  292,  315,  336,  293,
      330,  573,  294,  331,  337,  295,  332,  316,  296,  574,
      408,  599,  317,  318,  319,  320,  600,  409,  321,  338,
      601,  339,  410,  602,  322,  518,  323,  603,  324,  340,
      325,  341,  326,  327,  328, 1366,  342,  343,  519,  408,
     1289, 1211,  582,  319,  320,  582,  409,  321,  338,  601,
      339,  410,  602,  322,  518,  323,  603,  324,  340,  325,

      341,  326,  327,  328,  344,  342,  343,  519,  580,  417,
      354,  345,  346,  355,  356,  480,  520,  418,  347,  604,
      357,  348,  477,  419,  887,  887,  887,  887,  887,  476,
      521,  253,  570,  344,  571,  153,  584,  572,  417,  354,
      345,  346,  355,  356,  585,  520,  418,  347,  604,  357,
      348,  362,  419,  363,  364,  364,  364,  364,  364,  521,
      375,  570,  150,  571,  376,  584,  572,  377,  365,  149,
      378,  586, 3659,  585,  466,  466,  466,  466,  466, 3659,
      379, 1045, 1045, 1045, 1045, 1045, 3659,  413,  467,  375,
     3659,  414,  587,  376,  612,  415,  377,  365,  367,  378,

      586,  416,  613, 3659,  368,  619,  369,  614,  380,  379,
      370,  371,  372,  373,  374,  381,  413,  467, 3659,  382,
      414,  587,  383,  612,  415,  384,  596,  367,  385, 3659,
      416,  613,  597,  368,  619,  369,  614,  380,  620,  370,
      371,  372,  373,  374,  381,  386,  610,  391,  382,  387,
      621,  383,  436,  388,  384,  596,  611,  385,  392,  389,
      393,  597,  390,  622,  623,  394,  437,  620,  395,  438,
      396, 3659,  439, 3659,  386,  610,  391, 3659,  387,  621,
     3659,  436,  388,  624,  625,  611,  626,  392,  389,  393,
     3659,  390,  622,  623,  394,  437, 3659,  395,  438,  396,

      397,  439,  441,  630,  398,  420,  442,  421,  399,  422,
      443,  400,  624,  625,  401,  626,  444,  402,  461,  423,
      403,  462,  463,  631,  424,  425, 3659, 3659,  464,  397,
     3659,  441,  630,  398,  420,  442,  421,  399,  422,  443,
      400, 3659, 3659,  401, 3659,  444,  402,  461,  423,  403,
      462,  463,  631,  424,  425,  426,  427,  464,  632,  428,
      445,  633,  446,  637,  638,  429,  639,  430,  640,  431,
      447,  432,  448,  433,  434,  435, 3659,  449,  450,  641,
      642, 3659,  643, 3659,  426,  427,  647,  632,  428,  445,
      633,  446,  637,  638,  429,  639,  430,  640,  431,  447,

      432,  448,  433,  434,  435,  451,  449,  450,  641,  642,
      489,  643,  452,  453,  490,  647,  648,  491,  659,  454,
      492,  468,  455,  469,  470,  470,  470,  470,  470, 3659,
      493, 3659,  652, 3659,  451, 3659, 3659,  653,  471,  489,
     3659,  452,  453,  490, 3659,  648,  491,  659,  454,  492,
      522,  455, 3659, 3659, 3659, 3659,  500,  523,  494,  493,
      501,  652,  524,  660,  502,  495,  653,  471,  481,  496,
      503,  661,  497,  504,  482,  498,  483, 3659,  499,  522,
      484,  485,  486,  487,  488,  500,  523,  494, 3659,  501,
     3659,  524,  660,  502,  495, 3659, 3659,  481,  496,  503,

      661,  497,  504,  482,  498,  483,  505,  499, 3659,  484,
      485,  486,  487,  488,  527,  644, 3659,  506,  528,  507,
      645,  646,  529,  531,  508,  550,  662,  509,  530,  510,
     3659,  532, 3659,  673, 3659,  505, 3659,  533, 3659,  551,
     3659, 3659,  552,  527,  644,  553,  506,  528,  507,  645,
      646,  529,  531,  508,  550,  662,  509,  530,  510,  511,
      532,  555,  673,  512,  674,  556,  533,  513,  551,  557,
      514,  552, 3659,  515,  553,  558,  516,  593,  594,  517,
      634,  534,  654,  535,  655,  536,  635,  675,  511,  636,
      555,  595,  512,  674,  556,  537,  513, 3659,  557,  514,

      538,  539,  515, 3659,  558,  516,  593,  594,  517,  634,
      534,  654,  535,  655,  536,  635,  675, 3659,  636, 3659,
      595, 3659, 3659,  575,  537, 3659,  576,  577,  649,  538,
      539,  540,  541,  578,  667,  542,  559,  668,  560,  650,
      651,  543,  676,  544, 3659,  545,  561,  546,  562,  547,
      548,  549,  575,  563,  564,  576,  577,  649, 3659, 3659,
      540,  541,  578,  667,  542,  559,  668,  560,  650,  651,
      543,  676,  544,  605,  545,  561,  546,  562,  547,  548,
      549,  565,  563,  564,  606,  607,  608,  615,  566,  567,
      616,  627, 3659,  609,  677,  568,  617,  628,  569,  678,

      663,  656,  605,  618,  664,  665,  666,  679,  629, 3659,
      565,  680,  657,  606,  607,  608,  615,  566,  567,  616,
      627,  658,  609,  677,  568,  617,  628,  569,  678,  663,
      656,  681,  618,  664,  665,  666,  679,  629,  669,  670,
      680,  657,  671,  672,  682,  683,  684,  686,  689,  690,
      658,  687,  691, 3659,  696,  699,  685,  688,  697, 3659,
      681,  692,  703,  704, 3659,  709,  693,  669,  670,  698,
      710,  671,  672,  682,  683,  684,  686,  689,  690,  694,
      687,  691,  695,  696,  699,  685,  688,  697,  700,  705,
      692,  703,  704,  707,  709,  693, 3659,  701,  698,  710,

      725,  711,  719,  716,  708,  702,  706,  713,  694,  712,
      717,  695,  718,  721,  720,  714,  726,  700,  705,  723,
      727,  722,  707,  728,  729,  724,  701,  715,  730,  725,
      711,  719,  716,  708,  702,  706,  713,  737,  712,  717,
     3659,  718,  721,  720,  714,  726, 3659, 3659,  723,  727,
      722, 3659,  728,  729,  724, 3659,  715,  730,  254,  254,
      254,  254,  254,  731, 3659,  731,  737,  732,  732,  732,
      732,  732,  255,  733,  733,  733,  733,  733,  256,  257,
      257,  257,  257,  257,  735,  740,  735,  734,  736,  736,
      736,  736,  736,  258,  738,  742,  743,  744,  745,  746,

      752,  255,  739,  747,  748,  750,  741,  753,  755,  756,
      758,  751,  754,  757,  740,  766,  734,  749,  773, 3659,
      764, 3659,  258,  738,  742,  743,  744,  745,  746,  752,
      765,  739,  747,  748,  750,  741,  753,  755,  756,  758,
      751,  754,  757,  759,  766,  767,  749,  773,  769,  764,
      768,  770,  774,  775,  760,  761,  762,  771,  776,  765,
      777,  778,  779,  763,  772,  780, 3659,  784,  785,  786,
      787, 3659,  759,  791,  767,  792,  793,  769,  794,  768,
      770,  774,  775,  760,  761,  762,  771,  776,  795,  777,
      778,  779,  763,  772,  780,  781,  784,  785,  786,  787,

      788,  782,  791,  796,  792,  793,  789,  794,  797,  790,
      798,  801,  783,  802,  803,  799,  800,  795,  806,  808,
      813,  809,  814,  807,  781,  804,  805,  815, 3659,  788,
      782,  816,  796, 3659, 3659,  789, 3659,  797,  790,  798,
      801,  783,  802,  803,  799,  800,  810,  806,  808,  813,
      809,  814,  807,  827,  804,  805,  815,  811,  817,  828,
      816,  829,  818,  819,  820,  821,  812,  830,  822,  823,
      824,  825,  826,  831,  832,  810,  833,  834,  835,  836,
      837,  843,  827,  844,  845, 3659,  811,  817,  828,  850,
      829,  818,  819,  820,  821,  812,  830,  822,  823,  824,

      825,  826,  831,  832,  838,  833,  834,  835,  836,  837,
      843,  840,  844,  845,  839,  841,  851,  846,  850,  853,
      854,  842,  847,  857,  858,  859,  863,  852,  861,  855,
      864,  879, 3659,  838, 3659,  848, 3659,  856,  849,  862,
      840, 3659,  860,  839,  841,  851,  846,  880,  853,  854,
      842,  847,  857,  858,  859,  863,  852,  861,  855,  864,
      879,  865,  867,  873,  848,  870,  856,  849,  862,  866,
      868,  860,  871,  875,  872,  874,  880,  877,  881,  882,
      883,  876,  869,  878,  884, 1049, 1049, 1049, 1049, 1049,
      865,  867,  873,  893,  870, 3659, 3659, 3659,  866,  868,

     3659,  871,  875,  872,  874, 3659,  877,  881,  882,  883,
      876,  869,  878,  884,  360,  360,  360,  360,  360,  885,
     3659,  885,  893,  886,  886,  886,  886,  886,  361,  888,
      888,  888,  888,  888,  362,  896,  363,  890,  890,  890,
      890,  890,  891,  889,  891,  894,  892,  892,  892,  892,
      892,  365,  898,  895,  899,  900,  897,  361,  901,  902,
      906,  903,  904,  908,  896,  909,  907,  911,  914,  912,
      910, 3659,  889,  913,  894,  905,  920,  922, 3659, 3659,
      365,  898,  895,  899,  900,  897,  921,  901,  902,  906,
      903,  904,  908,  929,  909,  907,  911,  914,  912,  910,

      915,  930,  913,  923,  905,  920,  922,  925,  924,  931,
      926,  916,  917,  918,  932,  921,  927,  933,  934,  935,
      919,  936,  929,  928,  940,  941,  942,  937,  943,  915,
      930,  947,  923,  938,  948, 3659,  925,  924,  931,  926,
      916,  917,  918,  932,  939,  927,  933,  934,  935,  919,
      936,  949,  928,  940,  941,  942,  937,  943,  944,  950,
      947,  951,  938,  948,  945,  952,  953,  946,  957,  954,
      958,  959,  962,  939,  955,  956,  964,  963,  965,  969,
      949,  970,  960,  961, 3659,  971,  972,  944,  950, 3659,
      951, 3659, 3659,  945,  952,  953,  946,  957,  954,  958,

      959,  962,  966,  955,  956,  964,  963,  965,  969,  983,
      970,  960,  961,  967,  971,  972,  973,  975,  976,  984,
      974,  977,  968,  985,  978,  979,  980,  981,  982,  986,
      987,  966,  988,  989,  990,  991,  992,  993,  983,  999,
     1000, 3659,  967, 1001, 3659,  973,  975,  976,  984,  974,
      977,  968,  985,  978,  979,  980,  981,  982,  986,  987,
      994,  988,  989,  990,  991,  992,  993,  996,  999, 1000,
      995,  997, 1001, 1002, 1006, 1007, 1009,  998, 1003, 1013,
     1014, 1010, 1017, 1019, 1015, 1020, 1008, 1021, 3659,  994,
     1011, 1004, 3659, 1018, 1005, 1022,  996, 3659, 1012,  995,

      997, 1016, 1002, 1006, 1007, 1009,  998, 1003, 1013, 1014,
     1010, 1017, 1019, 1015, 1020, 1008, 1021, 1023, 1035, 1011,
     1004, 1031, 1018, 1005, 1022, 1024, 1026, 1012, 1029, 1032,
     1016, 1036, 1033, 1027, 1037, 1028, 1038, 1025, 1034, 1039,
     1030, 1040, 3659, 3659, 3659, 3659, 1023, 1035, 1054, 3659,
     1031, 3659, 3659, 3659, 1024, 1026, 3659, 1029, 1032, 3659,
     1036, 1033, 1027, 1037, 1028, 1038, 1025, 1034, 1039, 1030,
     1040,  466,  466,  466,  466,  466, 1041, 1054, 1041, 3659,
     1042, 1042, 1042, 1042, 1042,  467, 1043, 1043, 1043, 1043,
     1043,  468, 3659,  469, 1046, 1046, 1046, 1046, 1046, 1047,

     1044, 1047, 1059, 1048, 1048, 1048, 1048, 1048,  471, 1050,
     1053,  581, 1055,  581,  467, 1057,  581, 1060, 1061, 1062,
     1056, 1051, 1051, 1051, 1051, 1051, 1063, 1067,  581, 1044,
     3659, 1059,  581, 1068, 1069, 1070, 1058,  471, 1064, 1065,
     1071, 1055, 1072, 1075, 1057, 1083, 1060, 1061, 1062, 1056,
     1073, 1081, 1066, 1084, 1074, 1063, 1067, 3659, 1085,  581,
     1090, 1082, 1068, 1069, 1070, 1058, 1091, 1064, 1065, 1071,
     1092, 1072, 1075, 1076, 1083, 3659, 1093, 1094, 1095, 1073,
     1081, 1066, 1084, 1074, 1077, 1078, 1079, 1085, 1086, 1090,
     1082, 1087, 1096, 1080, 1097, 1091, 1101, 1088, 3659, 1092,

     1102, 1103, 1076, 1104, 1089, 1093, 1094, 1095, 3659, 1108,
     1098, 1109, 1110, 1077, 1078, 1079, 1099, 1086, 1111, 1112,
     1087, 1096, 1080, 1097, 1113, 1101, 1088, 1100, 1105, 1102,
     1103, 1114, 1104, 1089, 1106, 1118, 1119, 1107, 1108, 1098,
     1109, 1110, 3659, 1120, 1115, 1099, 1123, 1111, 1112, 1116,
     1117, 1124, 1130, 1113, 1121, 1122, 1100, 1105, 1131, 1125,
     1114, 1126, 3659, 1106, 1118, 1119, 1107, 1132, 1133, 1144,
     1134, 1127, 1120, 1115, 1135, 1123, 1136, 1137, 1116, 1117,
     1124, 1130, 1128, 1121, 1122, 1145, 1138, 1131, 1125, 1139,
     1126, 1129, 1140, 1141, 1142, 1143, 1132, 1133, 1144, 1134,

     1127, 1146, 1147, 1135, 1148, 1136, 1137, 1149, 1150, 1151,
     1152, 1128, 1153, 1154, 1145, 1138, 1155, 1160, 1139, 1161,
     1129, 1140, 1141, 1142, 1143, 1157, 1156, 1162, 1167, 1158,
     1146, 1147, 1168, 1148, 1170, 1159, 1149, 1150, 1151, 1152,
     1174, 1153, 1154, 1169, 1163, 1155, 1160, 1175, 1161, 1164,
     1171, 1176, 1180, 1181, 1157, 1156, 1162, 1167, 1158, 1172,
     1178, 1168, 1165, 1170, 1159, 1166, 1182, 1173, 1177, 1174,
     3659, 1179, 1169, 1163, 1183, 3659, 1175, 1192, 1164, 1171,
     1176, 1180, 1181, 1196, 1184, 1193, 1197, 1190, 1172, 1178,
     1198, 1165, 1185, 1199, 1166, 1182, 1173, 1177, 1187, 1191,

     1179, 1200, 1194, 1183, 1186, 1188, 1192, 1189, 1195, 1201,
     1202, 1203, 1196, 1184, 1193, 1197, 1190, 1204, 1205, 1198,
     1206, 1185, 1199, 1207, 1208, 1209, 1210, 1187, 1191, 1212,
     1200, 1194, 1213, 1186, 1188, 1214, 1189, 1195, 1201, 1202,
     1203, 1215, 1217, 1218, 1219, 1220, 1204, 1205, 1221, 1206,
     1222, 1225, 1207, 1208, 1209, 1210, 1216, 1223, 1212, 1224,
     1226, 1213, 1227, 1231, 1214, 1232, 1233, 1228, 1236, 1237,
     1215, 1217, 1218, 1219, 1220, 1234, 1238, 1221, 1235, 1222,
     1225, 1229, 1230, 1239, 1240, 1216, 1223, 1241, 1224, 1226,
     1242, 1227, 1231, 1243, 1232, 1233, 1228, 1236, 1237, 1244,

     1245, 1246, 1248, 1249, 1234, 1238, 1250, 1235, 1247, 1251,
     1229, 1230, 1239, 1240, 1252, 1253, 1241, 1254, 1255, 1242,
     1257, 1258, 1243, 1259, 1260, 1261, 1262, 1263, 1244, 1245,
     1246, 1248, 1249, 1264, 1265, 1250, 1256, 1247, 1251, 1268,
     1272, 1269, 1266, 1252, 1253, 1273, 1254, 1255, 1274, 1257,
     1258, 1270, 1259, 1260, 1261, 1262, 1263, 1267, 1275, 1276,
     1277, 1271, 1264, 1265, 1278, 1256, 1279, 1280, 1281, 1272,
     1282, 1266, 1283, 1284, 1273, 1286, 1287, 1274, 1288, 1290,
     1270, 1291, 1292, 1293, 1294, 1285, 1267, 1275, 1276, 1277,
     1271, 1295, 1296, 1278, 1297, 1279, 1280, 1281, 1298, 1282,

     1299, 1283, 1284, 1300, 1286, 1287, 1301, 1288, 1290, 1302,
     1291, 1292, 1293, 1294, 1285, 1303, 1304, 1305, 1306, 1307,
     1295, 1296, 1308, 1297, 1309, 1310, 1311, 1298, 1312, 1299,
     1313, 1314, 1300, 1315, 1316, 1301, 1319, 1320, 1302, 1321,
     1317, 1322, 1323, 1324, 1303, 1304, 1305, 1306, 1307, 1318,
     1325, 1308, 1326, 1309, 1310, 1311, 1327, 1312, 1328, 1313,
     1314, 1329, 1315, 1316, 1330, 1319, 1320, 1335, 1321, 1317,
     1322, 1323, 1324, 1331, 1333, 1336, 1339, 1340, 1332, 1325,
     1334, 1326, 1337, 1341, 1338, 1327, 1342, 1328, 1343, 1344,
     1329, 1345, 1346, 1330, 1348, 1349, 1335, 1350, 1352, 1353,

     1354, 1351, 1331, 1333, 1336, 1339, 1340, 1332, 3659, 1334,
     3659, 1337, 1341, 1338, 1347, 1342, 3659, 1343, 1344, 3659,
     1345, 1346, 3659, 1348, 1349, 3659, 1350, 1352, 1353, 1354,
     1351,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732, 1357, 1358, 1347,  733,  733,  733,  733,  733, 1355,
     1359, 1355, 1360, 1356, 1356, 1356, 1356, 1356,  734,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736, 1361,
     1357, 1358, 1362, 1363, 1364, 1365, 1367, 1368, 1369, 1359,
     1370, 1360, 1372, 1373, 1374, 1375, 1376,  734, 1377, 1378,
     1380, 1379, 1381, 1382, 1386, 1371, 1387, 1388, 1361, 1391,

     3659, 1362, 1363, 1364, 1365, 1367, 1368, 1369, 1392, 1370,
     1393, 1372, 1373, 1374, 1375, 1376, 1383, 1377, 1378, 1380,
     1379, 1381, 1382, 1386, 1371, 1387, 1388, 1394, 1391, 1389,
     1384, 1385, 1390, 1395, 1396, 1397, 1398, 1392, 1399, 1393,
     1400, 1401, 1403, 1404, 1405, 1383, 1406, 1407, 1402, 1408,
     1409, 1412, 1413, 1414, 1415, 3659, 1394, 1416, 1389, 1384,
     1385, 1390, 1395, 1396, 1397, 1398, 1410, 1399, 1417, 1400,
     1401, 1403, 1404, 1405, 1418, 1406, 1407, 1402, 1408, 1409,
     1412, 1413, 1414, 1415, 1411, 1419, 1416, 1420, 1423, 1421,
     1424, 1427, 1428, 1429, 1430, 1410, 1431, 1417, 1432, 1433,

     1425, 1434, 1435, 1418, 1422, 1436, 1437, 1438, 1441, 1442,
     1426, 1443, 1439, 1411, 1419, 1445, 1420, 1446, 1421, 1447,
     1427, 1428, 1429, 1430, 1440, 1431, 1448, 1432, 1433, 1425,
     1434, 1435, 1449, 1422, 1436, 1437, 1438, 1441, 1442, 1426,
     1443, 1439, 1450, 1451, 1445, 1452, 1446, 1453, 1447, 1454,
     1455, 1456, 1457, 1440, 1458, 1448, 1459, 1460, 1461, 1462,
     1463, 1449, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1474, 1450, 1451, 1472, 1452, 1475, 1453, 1476, 1454, 1455,
     1456, 1457, 1473, 1458, 1477, 1459, 1460, 1461, 1462, 1463,
     1478, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1474,

     1479, 1480, 1472, 1481, 1475, 1482, 1476, 1483, 1484, 1485,
     1486, 1488, 1490, 1477, 1491, 1487, 1492, 1489, 1493, 1478,
     1494, 1495, 1496, 1497, 1498, 1499, 3659, 3659, 1503, 1479,
     1480, 1504, 1481, 3659, 1482, 1507, 1483, 1484, 1485, 1486,
     1488, 1490, 1508, 1491, 1487, 1492, 1489, 1493, 1509, 1494,
     1495, 1496, 1497, 1498, 1499, 1500, 1501, 1503, 1505, 1516,
     1504, 1517, 1506, 3659, 1507, 1510, 1510, 1510, 1510, 1510,
     3659, 1508,  886,  886,  886,  886,  886, 1509, 1502, 1511,
     1511, 1511, 1511, 1511, 1500, 1501, 3659, 1505, 1516, 3659,
     1517, 1506,  888,  888,  888,  888,  888, 1512, 3659, 1512,

     3659, 1513, 1513, 1513, 1513, 1513,  889, 1502,  362, 1518,
      363, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 1519, 1520, 1521, 1522,  365,  892,  892,  892,  892,
      892, 1523, 1524, 1526, 1527,  889, 1528, 1531, 1518, 1532,
     1529, 1533, 1534, 1535, 1536, 1537, 1539, 1538, 1540, 1541,
     1519, 1520, 1521, 1522,  365, 1530, 1545, 1546, 1547, 1550,
     1523, 1524, 1526, 1527, 1551, 1528, 1531, 1542, 1532, 1529,
     1533, 1534, 1535, 1536, 1537, 1539, 1538, 1540, 1541, 1552,
     1548, 1543, 1544, 1549, 1530, 1545, 1546, 1547, 1550, 1553,
     1554, 1555, 1556, 1551, 1557, 1558, 1542, 1559, 1560, 1562,

     1563, 1564, 1565, 1566, 1567, 1561, 1568, 1569, 1552, 1548,
     1543, 1544, 1549, 1571, 1572, 1573, 1574, 1575, 1553, 1554,
     1555, 1556, 1576, 1557, 1558, 1570, 1559, 1560, 1562, 1563,
     1564, 1565, 1566, 1567, 1561, 1568, 1569, 1577, 1578, 1579,
     1580, 3659, 1571, 1572, 1573, 1574, 1575, 1586, 1582, 1587,
     1583, 1576, 1588, 1589, 1570, 1581, 1590, 1591, 1592, 1593,
     1584, 1594, 1595, 1596, 1597, 1598, 1577, 1578, 1579, 1580,
     1585, 1600, 1601, 1602, 1604, 1605, 1586, 1599, 1587, 1606,
     1607, 1588, 1589, 1608, 1581, 1590, 1591, 1592, 1593, 1584,
     1594, 1595, 1596, 1597, 1598, 1609, 1610, 1611, 1612, 1585,

     1600, 1601, 1602, 1604, 1605, 1613, 1599, 1614, 1606, 1607,
     1615, 1616, 1608, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
     1624, 1625, 1626, 1627, 1609, 1610, 1611, 1612, 1628, 1629,
     1630, 1633, 1631, 1634, 1613, 1635, 1614, 1636, 1637, 1615,
     1616, 1632, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1626, 1627, 1638, 1639, 1640, 1641, 1628, 1629, 1630,
     1633, 1631, 1634, 1642, 1635, 1643, 1636, 1637, 1644, 1645,
     1647, 1649, 1650, 1651, 1646, 1652, 1648, 1653, 1654, 1655,
     1656, 1657, 1638, 1639, 1640, 1641, 1658, 1662, 1659, 1660,
     1663, 1664, 1642, 1666, 1643, 1665, 1667, 1644, 1645, 1647,

     1649, 1650, 1651, 1646, 1652, 1648, 1653, 1654, 1655, 1656,
     1657, 1661, 1668, 3659, 3659, 1658, 1662, 1659, 1660, 1663,
     1664, 1677, 1666, 3659, 1665, 1667, 1669, 1669, 1669, 1669,
     1669, 1042, 1042, 1042, 1042, 1042, 3659, 3659, 3659, 3659,
     1661, 1668, 1043, 1043, 1043, 1043, 1043, 1670, 1678, 1670,
     1677, 1671, 1671, 1671, 1671, 1671, 1044, 1672, 1672, 1672,
     1672, 1672,  468, 3659,  469, 1673, 1673, 1673, 1673, 1673,
     1674, 1674, 1674, 1674, 1674, 1050, 1679, 1678, 1680,  471,
     1048, 1048, 1048, 1048, 1048, 1044, 1050, 1049, 1049, 1049,
     1049, 1049, 1675, 1675, 1675, 1675, 1675, 1681, 1676, 1676,

     1676, 1676, 1676, 1053,  581, 1679,  581, 1680,  471,  581,
     1682, 1683, 1684, 1685, 1687, 1688, 1689, 1690, 1692, 1693,
     1694,  581, 1695, 3659, 1696,  581, 1681, 1697, 1698, 1700,
     1699, 1701, 1691, 1702, 1706, 3659, 3659, 1707, 1708, 1682,
     1683, 1684, 1685, 1687, 1688, 1689, 1690, 1692, 1693, 1694,
     1703, 1695,  581, 1696, 1711, 1712, 1697, 1698, 1700, 1699,
     1701, 1691, 1702, 1706, 1704, 1705, 1707, 1708, 1709, 1713,
     1714, 1710, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1703,
     1723, 1724, 1725, 1711, 1712, 1722, 1726, 1727, 1728, 1729,
     1730, 1732, 1733, 1704, 1705, 1734, 1735, 1709, 1713, 1714,

     1710, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1731, 1723,
     1724, 1725, 1736, 1737, 1722, 1726, 1727, 1728, 1729, 1730,
     1732, 1733, 1738, 1739, 1734, 1735, 1740, 1743, 1741, 1744,
     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1731, 1754, 1745,
     1755, 1736, 1737, 1742, 1756, 1757, 1758, 1761, 1762, 1746,
     1763, 1738, 1739, 1765, 1759, 1740, 1766, 1741, 1767, 1747,
     1748, 1749, 1750, 1751, 1752, 1753, 1760, 1754, 1745, 1755,
     1768, 1769, 1742, 1756, 1757, 1758, 1761, 1762, 1746, 1763,
     1770, 1771, 1765, 1759, 1772, 1766, 1773, 1767, 1774, 1775,
     1776, 1777, 1778, 1779, 1780, 1760, 1781, 1782, 1783, 1768,

     1769, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1770,
     1771, 1794, 1795, 1772, 1796, 1773, 1797, 1774, 1775, 1776,
     1777, 1778, 1779, 1780, 1798, 1781, 1782, 1783, 1799, 1792,
     1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1793, 1800,
     1794, 1795, 1801, 1796, 1802, 1797, 1803, 1804, 1805, 1806,
     1808, 1810, 1811, 1798, 1807, 1814, 1809, 1799, 1792, 1812,
     1815, 1813, 1816, 1817, 1818, 1819, 1823, 1824, 1800, 1827,
     1825, 1801, 1828, 1802, 1826, 1803, 1804, 1805, 1806, 1808,
     1810, 1811, 1829, 1807, 1814, 1809, 1820, 1821, 1812, 1815,
     1813, 1816, 1817, 1818, 1819, 1823, 1824, 1830, 1827, 1825,

     1831, 1828, 1832, 1826, 1833, 1834, 1835, 1836, 1837, 1822,
     1838, 1829, 1839, 1840, 1843, 1820, 1821, 1841, 1844, 1845,
     1846, 1847, 1848, 1849, 1850, 1851, 1830, 1852, 1853, 1831,
     1854, 1832, 3659, 1833, 1834, 1835, 1836, 1837, 1822, 1838,
     1858, 1839, 1840, 1843, 1842, 1855, 1841, 1844, 1845, 1846,
     1847, 1848, 1849, 1850, 1851, 1859, 1852, 1853, 1860, 1854,
     1861, 1856, 1862, 1857, 1863, 1864, 1865, 1866, 1867, 1858,
     1868, 1869, 1870, 1871, 1855, 1872, 1873, 1874, 1875, 1876,
     1877, 1878, 1879, 1880, 1859, 1881, 1882, 1860, 1883, 1861,
     1856, 1862, 1857, 1863, 1864, 1865, 1866, 1867, 1884, 1868,

     1869, 1870, 1871, 1885, 1872, 1873, 1874, 1875, 1876, 1877,
     1878, 1879, 1880, 1886, 1881, 1882, 1891, 1883, 1889, 1893,
     1894, 1895, 1896, 1897, 1898, 1899, 1900, 1884, 1901, 1890,
     1902, 1903, 1885, 1904, 1905, 1907, 1908, 1909, 1910, 1911,
     1912, 1913, 1886, 1914, 1906, 1891, 1915, 1889, 1893, 1894,
     1895, 1896, 1897, 1898, 1899, 1900, 1916, 1901, 1890, 1902,
     1903, 1917, 1904, 1905, 1907, 1908, 1909, 1910, 1911, 1912,
     1913, 1920, 1914, 1906, 1918, 1915, 1921, 1922, 1919, 1923,
     1924, 1925, 1926, 1927, 1928, 1916, 1929, 1930, 1931, 1932,
     1917, 1933, 1934, 1935, 1936, 1937, 1938, 1941, 1939, 1942,

     1920, 1940, 1943, 1918, 1944, 1921, 1922, 1919, 1923, 1924,
     1925, 1926, 1927, 1928, 1945, 1929, 1930, 1931, 1932, 1946,
     1933, 1934, 1935, 1936, 1937, 1938, 1941, 1939, 1942, 1947,
     1940, 1943, 1948, 1944, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1957, 1945, 3659, 3659, 3659, 3659, 1946, 1356,
     1356, 1356, 1356, 1356, 1958, 1959, 1960, 1961, 1947, 1962,
     1963, 1948, 1964, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1957, 1356, 1356, 1356, 1356, 1356, 1965, 1966, 1967,
     1968, 1971, 1972, 1958, 1959, 1960, 1961, 1969, 1962, 1963,
     1973, 1964, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,

     1982, 1986, 1983, 1987, 1988, 1989, 1965, 1966, 1967, 1968,
     1971, 1972, 1990, 1991, 1970, 1992, 1969, 1993, 1984, 1973,
     1985, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
     1986, 1983, 1987, 1988, 1989, 1994, 1995, 1996, 1997, 1998,
     1999, 1990, 1991, 2000, 1992, 2001, 1993, 1984, 2002, 1985,
     2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 2017, 2019, 1994, 1995, 1996, 1997, 1998, 1999,
     2021, 2022, 2000, 2018, 2001, 2023, 2024, 2002, 2025, 2003,
     2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
     2014, 2017, 2019, 2026, 2027, 2028, 2029, 2030, 2031, 2021,

     2022, 2032, 2018, 2033, 2023, 2024, 2035, 2025, 2036, 2037,
     2038, 2039, 2040, 2034, 2041, 2042, 2043, 2044, 2045, 2048,
     2049, 2050, 2026, 2027, 2028, 2029, 2030, 2031, 2051, 2046,
     2032, 2052, 2033, 2047, 2053, 2035, 2054, 2036, 2037, 2038,
     2039, 2040, 2034, 2041, 2042, 2043, 2044, 2045, 2048, 2049,
     2050, 2055, 2056, 2057, 2058, 2059, 2060, 2051, 2046, 2061,
     2052, 2062, 2047, 2053, 2063, 2054, 2064, 2065, 2066, 2067,
     2069, 2070, 2068, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
     2055, 2056, 2057, 2058, 2059, 2060, 2078, 2079, 2061, 2080,
     2062, 2081, 2082, 2063, 2083, 2064, 2065, 2066, 2067, 2069,

     2070, 2068, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2084,
     2085, 3659, 3659, 3659, 3659, 2078, 2079, 3659, 2080, 3659,
     2081, 2082, 3659, 2083, 1510, 1510, 1510, 1510, 1510, 2086,
     2086, 2086, 2086, 2086, 2088, 2089, 3659, 2090, 2084, 2085,
     2087, 2087, 2087, 2087, 2087, 1513, 1513, 1513, 1513, 1513,
      363, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 2091, 2092, 2088, 2089,  365, 2090, 2093, 2094, 2095,
     2096, 2097, 2098, 3659, 2101, 2099, 2102, 2103, 2104, 2105,
     2106, 2107, 2108, 2109, 2110, 2111, 2112, 3659, 2116, 2117,
     2091, 2092, 2118, 2119,  365, 2120, 2093, 2094, 2095, 2096,

     2097, 2098, 2100, 2101, 2099, 2102, 2103, 2104, 2105, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 2113, 2116, 2117, 2121,
     2122, 2118, 2119, 2123, 2120, 2124, 2125, 2126, 2127, 2128,
     2129, 2130, 2114, 2131, 2115, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2141, 2113, 2142, 2143, 2121, 2122,
     2144, 2149, 2123, 2151, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2114, 2131, 2115, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2141, 2147, 2142, 2143, 2152, 2153, 2144,
     2149, 2154, 2151, 2155, 2156, 2148, 2157, 2158, 2159, 2160,
     2161, 2162, 2163, 2165, 2166, 2167, 2168, 2169, 2170, 2171,

     2172, 2173, 2164, 2147, 2174, 2175, 2152, 2153, 2178, 2179,
     2154, 2180, 2155, 2156, 2148, 2157, 2158, 2159, 2160, 2161,
     2162, 2163, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2164, 2176, 2174, 2175, 2181, 2177, 2178, 2179, 2182,
     2180, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2192, 2193, 2194, 2195, 2196, 2197, 2199, 2200, 2198, 2201,
     2202, 2176, 2203, 2204, 2181, 2177, 2205, 2206, 2182, 2207,
     2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2194, 2195, 2196, 2197, 2199, 2200, 2198, 2201, 2202,
     2208, 2203, 2204, 2209, 2210, 2205, 2206, 2211, 2207, 2212,

     2213, 2214, 2215, 1669, 1669, 1669, 1669, 1669, 2216, 2216,
     2216, 2216, 2216, 1671, 1671, 1671, 1671, 1671, 3659, 2208,
     3659, 3659, 2209, 2210, 2220, 3659, 2211, 3659, 2212, 2213,
     2214, 2215, 2217, 2217, 2217, 2217, 2217,  468, 2221, 2222,
     1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674,
     1050, 2223, 2224, 2220,  471, 2219, 2219, 2219, 2219, 2219,
     2225, 2226, 1049, 1049, 1049, 1049, 1049, 2221, 2222, 2227,
     2228, 2229, 2230, 3659, 2233, 2231, 2234, 2235, 2236, 2237,
     2223, 2224, 2238,  471, 2239, 2240, 2241, 2242, 2243, 2225,
     2226, 2244, 2248, 2249, 2245, 2250, 2251, 2252, 2227, 2228,

     2229, 2230, 2232, 2233, 2231, 2234, 2235, 2236, 2237, 2253,
     2246, 2238, 2247, 2239, 2240, 2241, 2242, 2243, 2254, 2255,
     2244, 2248, 2249, 2245, 2250, 2251, 2252, 2256, 2257, 2258,
     2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2253, 2246,
     2267, 2247, 2268, 2269, 2270, 2271, 2272, 2254, 2255, 2273,
     2274, 2275, 2276, 2281, 2283, 2284, 2256, 2257, 2258, 2259,
     2260, 2261, 2262, 2263, 2264, 2265, 2266, 2285, 2286, 2267,
     2287, 2268, 2269, 2270, 2271, 2272, 2279, 2288, 2273, 2274,
     2275, 2276, 2281, 2283, 2284, 2289, 2290, 2280, 2291, 2292,
     2293, 2294, 2295, 2297, 2298, 2299, 2285, 2286, 2300, 2287,

     2301, 2302, 2296, 2303, 2304, 2279, 2288, 2305, 2306, 2307,
     3659, 2310, 2311, 2312, 2289, 2290, 2280, 2291, 2292, 2293,
     2294, 2295, 2297, 2298, 2299, 2313, 2314, 2300, 2315, 2301,
     2302, 2296, 2303, 2304, 2316, 2308, 2305, 2306, 2307, 2309,
     2310, 2311, 2312, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2327, 2313, 2314, 2328, 2315, 2329, 2331,
     2332, 2330, 2333, 2316, 2308, 2334, 2335, 2336, 2309, 2337,
     2338, 2339, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324,
     2325, 2326, 2327, 2340, 2341, 2328, 2342, 2329, 2331, 2332,
     2330, 2333, 2343, 2344, 2334, 2335, 2336, 2345, 2337, 2338,

     2339, 2346, 2347, 2349, 2350, 2351, 2352, 2353, 2354, 2355,
     2356, 2357, 2340, 2341, 2358, 2342, 2359, 2360, 2361, 2362,
     2363, 2343, 2344, 2364, 2365, 2366, 2345, 2367, 2368, 2369,
     2346, 2347, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2357, 2370, 2374, 2358, 2375, 2359, 2360, 2361, 2362, 2363,
     2371, 2376, 2364, 2365, 2366, 2377, 2367, 2368, 2369, 2378,
     2372, 2379, 2373, 2380, 2381, 2382, 2383, 2384, 2386, 2387,
     2370, 2374, 2388, 2375, 2389, 2390, 2391, 2392, 2393, 2371,
     2376, 2394, 2395, 2397, 2377, 2396, 2398, 2399, 2378, 2372,
     2379, 2373, 2380, 2381, 2382, 2383, 2384, 2386, 2387, 2400,

     2401, 2388, 2402, 2389, 2390, 2391, 2392, 2393, 2403, 2404,
     2394, 2395, 2397, 2405, 2396, 2398, 2399, 2406, 2408, 2409,
     2410, 2411, 2414, 2415, 2416, 2417, 2418, 2419, 2400, 2401,
     2420, 2402, 2421, 2422, 2423, 2424, 2425, 2403, 2404, 2426,
     2427, 2428, 2405, 2429, 2430, 2431, 2406, 2408, 2409, 2410,
     2411, 2414, 2415, 2416, 2417, 2418, 2419, 2432, 2433, 2420,
     2434, 2421, 2422, 2423, 2424, 2425, 2435, 2436, 2426, 2427,
     2428, 2437, 2429, 2430, 2431, 2438, 2439, 2440, 2441, 2442,
     2443, 2444, 2445, 2446, 2448, 2449, 2432, 2433, 2450, 2434,
     2451, 2452, 2453, 2454, 2455, 2435, 2436, 2456, 2457, 2458,

     2437, 2459, 2460, 2461, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2446, 2448, 2449, 2462, 2463, 2450, 2464, 2451,
     2452, 2453, 2454, 2455, 2465, 2466, 2456, 2457, 2458, 2467,
     2459, 2460, 2461, 2468, 2469, 2473, 2470, 2474, 2475, 2476,
     2477, 2478, 2479, 2480, 2462, 2463, 2471, 2464, 2472, 2481,
     2482, 2483, 2485, 2465, 2466, 2486, 2487, 2488, 2467, 2489,
     2490, 2491, 2468, 2469, 2473, 2470, 2474, 2475, 2476, 2477,
     2478, 2479, 2480, 2492, 2493, 2471, 2496, 2472, 2481, 2482,
     2483, 2485, 2497, 2498, 2486, 2487, 2488, 2499, 2489, 2490,
     2491, 2494, 2500, 2501, 2495, 2502, 2503, 2504, 2505, 2507,

     2508, 2509, 2492, 2493, 2510, 2496, 2513, 2514, 2515, 2516,
     2517, 2497, 2498, 2518, 2519, 2520, 2499, 2521, 2522, 2523,
     2494, 2500, 2501, 2495, 2502, 2503, 2504, 2505, 2507, 2508,
     2509, 2524, 2525, 2510, 2526, 2513, 2514, 2515, 2516, 2517,
     2527, 2528, 2518, 2519, 2520, 2529, 2521, 2522, 2523, 2530,
     2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540,
     2524, 2525, 2541, 2526, 2542, 2543, 2544, 2545, 3659, 2527,
     2528, 3659, 3659, 2548, 2529, 2549, 2550, 2551, 2530, 2531,
     2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2552,
     2553, 2541, 2554, 2542, 2543, 2544, 2545, 2087, 2087, 2087,

     2087, 2087, 2548, 2555, 2549, 2550, 2551, 2556, 2557, 2558,
     2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2552, 2553,
     2567, 2554, 2568, 2569, 2573, 2574, 2575, 2576, 3659, 2577,
     3659, 2578, 2555, 2579, 2580, 2581, 2556, 2557, 2558, 2559,
     2560, 2561, 2562, 2563, 2564, 2565, 2566, 2570, 2582, 2567,
     2583, 2568, 2569, 2573, 2574, 2575, 2576, 2571, 2577, 2572,
     2578, 2585, 2579, 2580, 2581, 2586, 2587, 2588, 2589, 2590,
     2591, 2592, 2593, 2596, 2597, 2594, 2570, 2582, 2595, 2583,
     2598, 2599, 2600, 2601, 2602, 2603, 2571, 2604, 2572, 2605,
     2585, 2607, 2608, 2609, 2586, 2587, 2588, 2589, 2590, 2591,

     2592, 2593, 2596, 2597, 2594, 2610, 2613, 2595, 2614, 2598,
     2599, 2600, 2601, 2602, 2603, 2615, 2604, 2616, 2605, 2617,
     2607, 2608, 2609, 2618, 2619, 2620, 2621, 2622, 2623, 2624,
     2625, 2626, 2627, 2628, 2610, 2613, 2629, 2614, 2630, 2631,
     2632, 2633, 2634, 2635, 2615, 2636, 2616, 2637, 2617, 2638,
     2639, 2640, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625,
     2626, 2627, 2628, 2641, 2642, 2629, 2643, 2630, 2631, 2632,
     2633, 2634, 2635, 2644, 2636, 2645, 2637, 2650, 2638, 2639,
     2640, 2216, 2216, 2216, 2216, 2216, 2647, 2647, 2647, 2647,
     2647, 2651, 2641, 2642, 2652, 2643, 2648, 2648, 2648, 2648,

     2648, 2653, 2644, 2654, 2645, 2655, 2650, 2656, 2657, 2658,
     2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668,
     2651, 2669, 2670, 2652, 2671, 2675, 2676, 2677, 2678, 2679,
     2653, 2680, 2654, 2681, 2655, 2682, 2656, 2657, 2658, 2659,
     2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2672,
     2669, 2670, 2683, 2671, 2675, 2676, 2677, 2678, 2679, 2673,
     2680, 2674, 2681, 2684, 2682, 2685, 2687, 2688, 2689, 2690,
     2691, 2692, 2693, 2694, 2695, 2698, 2696, 2699, 2672, 2697,
     2700, 2683, 2701, 2702, 2703, 2704, 2705, 2706, 2673, 2707,
     2674, 2709, 2684, 2710, 2685, 2687, 2688, 2689, 2690, 2691,

     2692, 2693, 2694, 2695, 2698, 2696, 2699, 2711, 2697, 2700,
     2712, 2701, 2702, 2703, 2704, 2705, 2706, 2715, 2707, 2716,
     2709, 2717, 2710, 2718, 2719, 2720, 2721, 2722, 2723, 2724,
     2725, 2726, 2727, 2728, 2729, 2730, 2711, 2731, 2732, 2712,
     2733, 2734, 2735, 2736, 2737, 2738, 2715, 2739, 2716, 2740,
     2717, 2741, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725,
     2726, 2727, 2728, 2729, 2730, 2742, 2731, 2732, 2743, 2733,
     2734, 2735, 2736, 2737, 2738, 2744, 2739, 2745, 2740, 2746,
     2741, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755,
     2756, 2757, 2758, 2759, 2742, 2760, 2761, 2743, 2762, 2763,

     2764, 2765, 2766, 2767, 2744, 2768, 2745, 2769, 2746, 2770,
     2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756,
     2757, 2758, 2759, 2771, 2760, 2761, 2772, 2762, 2763, 2764,
     2765, 2766, 2767, 2773, 2768, 2774, 2769, 2775, 2770, 2776,
     2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786,
     2787, 2788, 2771, 2789, 2790, 2772, 2791, 2792, 2793, 2794,
     2795, 2796, 2773, 2797, 2774, 2798, 2775, 2799, 2776, 2777,
     2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787,
     2788, 2800, 2789, 2790, 2801, 2791, 2792, 2793, 2794, 2795,
     2796, 2802, 2797, 2803, 2798, 2804, 2799, 2805, 2806, 2807,

     2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817,
     2800, 2818, 2819, 2801, 2820, 2821, 2822, 2823, 2824, 2825,
     2802, 2826, 2803, 2827, 2804, 2828, 2805, 2806, 2807, 2808,
     2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2829,
     2818, 2819, 2830, 2820, 2821, 2822, 2823, 2824, 2825, 2831,
     2826, 2832, 2827, 2833, 2828, 2834, 2835, 2836, 2837, 2838,
     2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2829, 2847,
     2848, 2830, 2849, 2850, 2851, 2852, 2853, 2854, 2831, 2855,
     2832, 2856, 2833, 2857, 2834, 2835, 2836, 2837, 2838, 2839,
     2840, 2841, 2842, 2843, 2844, 2845, 2846, 2858, 2847, 2848,

     2859, 2849, 2850, 2851, 2852, 2853, 2854, 2860, 2855, 2861,
     2856, 2862, 2857, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
     2870, 2871, 2872, 2873, 2874, 2875, 2858, 2876, 2877, 2859,
     2878, 2879, 2880, 2881, 2882, 2883, 2860, 2884, 2861, 2885,
     2862, 2886, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,
     2871, 2872, 2873, 2874, 2875, 2887, 2876, 2877, 2889, 2878,
     2879, 2880, 2881, 2882, 2883, 2890, 2884, 2891, 2885, 2892,
     2886, 2888, 2888, 2888, 2888, 2888, 2893, 2894, 2895, 2896,
     2897, 2898, 2899, 2900, 2887, 2901, 2902, 2889, 2903, 2904,
     2905, 2906, 2907, 2908, 2890, 2909, 2891, 2910, 2892, 2911,

     2912, 2913, 2914, 2915, 2916, 2893, 2894, 2895, 2896, 2897,
     2898, 2899, 2900, 2917, 2901, 2902, 2918, 2903, 2904, 2905,
     2906, 2907, 2908, 2919, 2909, 2920, 2910, 2921, 2911, 2912,
     2913, 2914, 2915, 2916, 2922, 2923, 2924, 2925, 2926, 2927,
     2928, 2929, 2917, 2930, 2931, 2918, 2932, 2933, 2934, 2935,
     2936, 2937, 2919, 2938, 2920, 2939, 2921, 2940, 2941, 2942,
     2943, 2944, 2945, 2922, 2923, 2924, 2925, 2926, 2927, 2928,
     2929, 2946, 2930, 2931, 2947, 2932, 2933, 2934, 2935, 2936,
     2937, 2948, 2938, 2949, 2939, 2950, 2940, 2941, 2942, 2943,
     2944, 2945, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958,

     2946, 3659, 3659, 2947, 2959, 2959, 2959, 2959, 2959, 2961,
     2948, 2962, 2949, 2963, 2950, 2647, 2647, 2647, 2647, 2647,
     2964, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2960,
     2960, 2960, 2960, 2960, 2965, 2966, 2967, 2968, 2961, 2969,
     2962, 2970, 2963, 2971, 2972, 2973, 2974, 2975, 2976, 2964,
     2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986,
     2987, 2988, 2989, 2965, 2966, 2967, 2968, 2990, 2969, 2991,
     2970, 2992, 2971, 2972, 2973, 2974, 2975, 2976, 2993, 2977,
     2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987,
     2988, 2989, 2994, 2995, 2996, 2997, 2990, 2998, 2991, 2999,

     2992, 3000, 3001, 3002, 3003, 3004, 3005, 2993, 3006, 3007,
     3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017,
     3018, 2994, 2995, 2996, 2997, 3019, 2998, 3020, 2999, 3021,
     3000, 3001, 3002, 3003, 3004, 3005, 3022, 3006, 3007, 3008,
     3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018,
     3023, 3024, 3025, 3026, 3019, 3027, 3020, 3028, 3021, 3029,
     3030, 3031, 3032, 3033, 3034, 3022, 3035, 3036, 3037, 3039,
     3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3023,
     3024, 3025, 3026, 3049, 3027, 3050, 3028, 3051, 3029, 3030,
     3031, 3032, 3033, 3034, 3052, 3035, 3036, 3037, 3039, 3040,

     3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3053, 3054,
     3055, 3056, 3049, 3057, 3050, 3058, 3051, 3059, 3060, 3061,
     3062, 3063, 3064, 3052, 3065, 3066, 3067, 3068, 3069, 3070,
     3071, 3072, 3073, 3074, 3075, 3076, 3077, 3053, 3054, 3055,
     3056, 3078, 3057, 3079, 3058, 3081, 3059, 3060, 3061, 3062,
     3063, 3064, 3082, 3065, 3066, 3067, 3068, 3069, 3070, 3071,
     3072, 3073, 3074, 3075, 3076, 3077, 3083, 3084, 3085, 3086,
     3078, 3087, 3079, 3088, 3081, 3089, 3090, 3091, 3092, 3093,
     3094, 3082, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102,
     3103, 3104, 3105, 3106, 3107, 3083, 3084, 3085, 3086, 3108,

     3087, 3109, 3088, 3110, 3089, 3090, 3091, 3092, 3093, 3094,
     3111, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103,
     3104, 3105, 3106, 3107, 3112, 3113, 3114, 3115, 3108, 3116,
     3109, 3117, 3110, 2888, 2888, 2888, 2888, 2888, 3118, 3111,
     3119, 3120, 3121, 3123, 3124, 3125, 3126, 3127, 3128, 3129,
     3130, 3131, 3132, 3112, 3113, 3114, 3115, 3133, 3116, 3134,
     3117, 3135, 3136, 3137, 3138, 3139, 3140, 3118, 3141, 3119,
     3120, 3121, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130,
     3131, 3132, 3142, 3143, 3144, 3145, 3133, 3146, 3134, 3147,
     3135, 3136, 3137, 3138, 3139, 3140, 3148, 3141, 3149, 3150,

     3151, 3152, 3153, 3154, 3155, 3156, 2959, 2959, 2959, 2959,
     2959, 3142, 3143, 3144, 3145, 3157, 3146, 3158, 3147, 2647,
     2647, 2647, 2647, 2647, 3159, 3148, 3160, 3149, 3150, 3151,
     3152, 3153, 3154, 3155, 3156, 3161, 3162, 3163, 3165, 3166,
     3167, 3168, 3169, 3170, 3157, 3171, 3158, 3172, 3173, 3174,
     3175, 3176, 3177, 3159, 3178, 3160, 3179, 3180, 3181, 3182,
     3183, 3184, 3185, 3186, 3161, 3162, 3163, 3165, 3166, 3167,
     3168, 3169, 3170, 3187, 3171, 3188, 3172, 3173, 3174, 3175,
     3176, 3177, 3189, 3178, 3190, 3179, 3180, 3181, 3182, 3183,
     3184, 3185, 3186, 3191, 3192, 3193, 3194, 3195, 3196, 3197,

     3198, 3199, 3187, 3200, 3188, 3201, 3202, 3203, 3659, 3659,
     3210, 3189, 3211, 3190, 3212, 3213, 3214, 3215, 3216, 3217,
     3218, 3659, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198,
     3199, 3219, 3200, 3220, 3201, 3202, 3203, 3204, 3205, 3210,
     3221, 3211, 3222, 3212, 3213, 3214, 3215, 3216, 3217, 3218,
     3206, 3223, 3207, 3208, 3209, 3224, 3225, 3226, 3228, 3229,
     3219, 3227, 3220, 3230, 3231, 3232, 3204, 3205, 3233, 3221,
     3234, 3222, 3235, 3236, 3237, 3238, 3239, 3240, 3247, 3206,
     3223, 3207, 3208, 3209, 3224, 3225, 3226, 3228, 3229, 3248,
     3227, 3249, 3230, 3231, 3232, 3241, 3242, 3233, 3250, 3234,

     3251, 3235, 3236, 3237, 3238, 3239, 3240, 3247, 3243, 3252,
     3244, 3245, 3246, 3253, 3254, 3255, 3256, 3257, 3248, 3258,
     3249, 3259, 3260, 3261, 3241, 3242, 3262, 3250, 3263, 3251,
     3265, 3266, 3264, 3267, 3268, 3269, 3270, 3243, 3252, 3244,
     3245, 3246, 3253, 3254, 3255, 3256, 3257, 3271, 3258, 3272,
     3259, 3260, 3261, 3273, 3274, 3262, 3275, 3263, 3276, 3265,
     3266, 3264, 3267, 3268, 3269, 3270, 3277, 3284, 3285, 3286,
     3287, 3288, 3289, 3278, 3279, 3290, 3271, 3291, 3272, 3292,
     3293, 3294, 3273, 3274, 3295, 3275, 3280, 3276, 3281, 3282,
     3283, 3296, 3297, 3298, 3299, 3277, 3284, 3285, 3286, 3287,

     3288, 3289, 3278, 3279, 3290, 3302, 3291, 3300, 3292, 3293,
     3294, 3301, 3303, 3295, 3304, 3280, 3305, 3281, 3282, 3283,
     3296, 3297, 3298, 3299, 3306, 3307, 3308, 3309, 3310, 3311,
     3312, 3313, 3314, 3659, 3302, 3659, 3300, 3659, 3321, 3322,
     3301, 3303, 3323, 3304, 3324, 3305, 3325, 3326, 3327, 3315,
     3316, 3328, 3329, 3306, 3307, 3308, 3309, 3310, 3311, 3312,
     3313, 3314, 3317, 3330, 3318, 3319, 3320, 3321, 3322, 3331,
     3332, 3323, 3333, 3324, 3334, 3325, 3326, 3327, 3315, 3316,
     3328, 3329, 3335, 3336, 3337, 3339, 3340, 3341, 3338, 3342,
     3343, 3317, 3330, 3318, 3319, 3320, 3344, 3345, 3331, 3332,

     3346, 3333, 3347, 3334, 3348, 3349, 3350, 3353, 3354, 3355,
     3356, 3335, 3336, 3337, 3339, 3340, 3341, 3338, 3342, 3343,
     3351, 3357, 3358, 3359, 3352, 3344, 3345, 3360, 3361, 3346,
     3362, 3347, 3363, 3348, 3349, 3350, 3353, 3354, 3355, 3356,
     3364, 3365, 3367, 3368, 3366, 3369, 3370, 3373, 3374, 3351,
     3357, 3358, 3359, 3352, 3371, 3375, 3360, 3361, 3372, 3362,
     3376, 3363, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3364,
     3365, 3367, 3368, 3366, 3369, 3370, 3373, 3374, 3384, 3385,
     3387, 3388, 3386, 3371, 3375, 3389, 3390, 3372, 3393, 3376,
     3394, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3391, 3395,

     3396, 3397, 3392, 3398, 3399, 3400, 3401, 3384, 3385, 3387,
     3388, 3386, 3402, 3403, 3389, 3390, 3404, 3393, 3405, 3394,
     3407, 3406, 3408, 3409, 3410, 3413, 3414, 3391, 3395, 3396,
     3397, 3392, 3398, 3399, 3400, 3401, 3411, 3415, 3416, 3417,
     3412, 3402, 3403, 3418, 3419, 3404, 3420, 3405, 3421, 3407,
     3406, 3408, 3409, 3410, 3413, 3414, 3422, 3423, 3424, 3425,
     3427, 3428, 3426, 3429, 3430, 3411, 3415, 3416, 3417, 3412,
     3431, 3432, 3418, 3419, 3433, 3420, 3434, 3421, 3435, 3436,
     3437, 3438, 3439, 3440, 3441, 3422, 3423, 3424, 3425, 3427,
     3428, 3426, 3429, 3430, 3442, 3443, 3444, 3445, 3446, 3431,

     3432, 3447, 3448, 3433, 3449, 3434, 3450, 3435, 3436, 3437,
     3438, 3439, 3440, 3441, 3451, 3452, 3453, 3454, 3455, 3456,
     3457, 3458, 3459, 3442, 3443, 3444, 3445, 3446, 3460, 3461,
     3447, 3448, 3462, 3449, 3463, 3450, 3464, 3465, 3466, 3467,
     3468, 3469, 3470, 3451, 3452, 3453, 3454, 3455, 3456, 3457,
     3458, 3459, 3471, 3472, 3473, 3474, 3475, 3460, 3461, 3476,
     3477, 3462, 3478, 3463, 3479, 3464, 3465, 3466, 3467, 3468,
     3469, 3470, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487,
     3488, 3471, 3472, 3473, 3474, 3475, 3489, 3490, 3476, 3477,
     3491, 3478, 3492, 3479, 3493, 3494, 3495, 3496, 3497, 3498,

     3499, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488,
     3500, 3501, 3502, 3503, 3504, 3489, 3490, 3505, 3506, 3491,
     3507, 3492, 3508, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3500,
     3501, 3502, 3503, 3504, 3518, 3519, 3505, 3506, 3520, 3507,
     3521, 3508, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3509,
     3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3529, 3530,
     3531, 3532, 3533, 3518, 3519, 3534, 3535, 3520, 3536, 3521,
     3537, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3538, 3539,
     3540, 3541, 3542, 3543, 3544, 3545, 3546, 3529, 3530, 3531,

     3532, 3533, 3547, 3548, 3534, 3535, 3549, 3536, 3550, 3537,
     3551, 3552, 3553, 3554, 3555, 3556, 3557, 3538, 3539, 3540,
     3541, 3542, 3543, 3544, 3545, 3546, 3558, 3559, 3560, 3561,
     3562, 3547, 3548, 3563, 3564, 3549, 3565, 3550, 3566, 3551,
     3552, 3553, 3554, 3555, 3556, 3557, 3567, 3568, 3569, 3570,
     3571, 3572, 3573, 3574, 3575, 3558, 3559, 3560, 3561, 3562,
     3576, 3577, 3563, 3564, 3578, 3565, 3579, 3566, 3580, 3581,
     3582, 3583, 3584, 3585, 3586, 3567, 3568, 3569, 3570, 3571,
     3572, 3573, 3574, 3575, 3588, 3590, 3592, 3594, 3595, 3576,
     3577, 3596, 3597, 3578, 3598, 3579, 3599, 3580, 3581, 3582,

     3583, 3584, 3585, 3586, 3600, 3601, 3602, 3603, 3604, 3605,
     3606, 3607, 3608, 3588, 3590, 3592, 3594, 3595, 3609, 3610,
     3596, 3597, 3611, 3598, 3612, 3599, 3613, 3614, 3615, 3616,
     3617, 3618, 3619, 3600, 3601, 3602, 3603, 3604, 3605, 3606,
     3607, 3608, 3620, 3621, 3622, 3623, 3624, 3609, 3610, 3625,
     3626, 3611, 3627, 3612, 3628, 3613, 3614, 3615, 3616, 3617,
     3618, 3619, 3629, 3630, 3631, 3632, 3633, 3634, 3639, 3640,
     3641, 3620, 3621, 3622, 3623, 3624, 3642, 3643, 3625, 3626,
     3644, 3627, 3645, 3628, 3646, 3647, 3648, 3649, 3650, 3651,
     3652, 3629, 3630, 3631, 3632, 3633, 3634, 3639, 3640, 3641,

     3653, 3654, 3655, 3656, 3657, 3642, 3643, 3658, 3659, 3644,
     3659, 3645, 3659, 3646, 3647, 3648, 3649, 3650, 3651, 3652,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3653,
     3654, 3655, 3656, 3657, 3659, 3659, 3658,  259, 3659,  259,
      359, 3659,  359,  366,  366,  366,  366,  366,  472, 3659,
      472,  472,  472,  472,  472,  472,  474, 3659, 3659,  474,
      474,  474, 3659,  474,  581,  581,  581,  581,  581,  581,
      581,  581, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     2218, 3659, 2218, 2218, 2218, 2218, 2218, 2218,   13, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659
    } ;

static yyconst flex_int16_t yy_chk[7972] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 3634,    7,    7,
        7,    7,    7,    7,    8, 3633,    8,    8,    8,    8,
        8,    8,    9, 3632,    9,    9,    9,    9,    9,    9,
       10, 3631,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15, 3585,   15,   21,   21,   24, 3582,   33,   34,   40,
       31,   24,   30,   24, 3579,   26,   47,   24,   24,   24,
       24,   24,   26,   25,   31,   30,   26,   25,   61,   26,
       25, 3576,   26,   25,   24,   26,   33,   34,   40,   31,

       24,   30,   24,   25,   26,   47,   24,   24,   24,   24,
       24,   26,   25,   31,   30,   26,   25,   61,   26,   25,
       36,   26,   25,   27,   26,   28,   62,   27,   36,   68,
       76,   27,   25,   92,   36,   32,   28,   27,   28,   44,
       27,   44,   32,   28,   44, 3313,   28,   32,   28,   36,
     3276,  112,   27,  112,   28,   62,   27,   36,   68,   76,
       27,   58,   92,   36,   32,   28,   27,   28,   44,   27,
       44,   32,   28,   44,   58,   28,   32,   28,   29,   35,
       41, 3239,   29,   35,   41, 3202,   29,   35,   41,   29,
       58, 2973,   29,   35,   41,   29,   59,   45,   29, 2901,

       37,   93,   37,   58,   37,   45,   99,   29,   35,   41,
       59,   29,   35,   41,   37,   29,   35,   41,   29,   37,
       37,   29,   35,   41,   29,   59,   45,   29,   73,   37,
       93,   37,  107,   37,   45,   99,   73, 2830,   39,   59,
      119,  119,  148,   37,  148, 1916, 1916,  131,   37,   37,
       38,   38,   39,  132,   38,   39, 2760,   73,   39,  138,
       38,  107,   38, 2299,   38,   73,   38,   39,   38,   38,
       38,   50,   50,   50,   50,   50,  131, 2044, 2044,   38,
       38,   39,  132,   38,   39,   50, 2264,   39,  138,   38,
       42,   38,   42,   38,   60,   38,   43,   38,   38,   38,

       42,   60,   42,   43,   43,  145,   60,   42,   42,  154,
       43,  157,   46,   43,   50,   46,   46, 2222,  475,   42,
      475,   42,   46,   60, 2086,   43, 2086, 2174, 2174,   42,
       60,   42,   43,   43,  145,   60,   42,   42,  154,   43,
      157,   46,   43, 2167,   46,   46,   81,   81,   81,   81,
       81,   46,   51,   51,   51,   51,   51,   51, 2132,   53,
       81, 2090,  158,   53,   89, 2037,   53,   51, 2002,   53,
       72, 1960,   72,   90, 2217,   72, 2217,   89, 1909,   53,
      110,  110,  110,  110,  110, 1874,   63,   90,   53,   81,
       63,  158,   53,   89,   63,   53,   51,   52,   53,   72,

       63,   72,   90,   52,   72,   52,   89,   54,   53,   52,
       52,   52,   52,   52,   54,   63,   90, 1832,   54,   63,
      159,   54, 1749,   63,   54,  160,   52,   54, 1744,   63,
     2306, 2306,   52, 1743,   52, 1588,   54,   64,   52,   52,
       52,   52,   52,   54,   55,   64,   56,   54,   55,  159,
       54,   64,   55,   54,  160,  104,   54,   56,   55,   56,
      103,   55,  103,  104,   56,  103,   64,   56, 1583,   56,
     1582,  161, 1429,   55,   64,   56, 1424,   55, 1423, 1274,
       64,   55, 1269, 1268,  104, 1140,   56,   55,   56,  103,
       55,  103,  104,   56,  103, 1068,   56,   67,   56,   57,

      161,   69,  164,   57,   65,   69,   65,   57,   65,   69,
       57,   67,  143,   57,   67,   69,   57,   67,   65,   57,
      143,  979,  165,   65,   65,  907,   67,  165,   57,  823,
       69,  164,   57,   65,   69,   65,   57,   65,   69,   57,
       67,  143,   57,   67,   69,   57,   67,   65,   57,  143,
       91,  165,   65,   65,   66,   66,  165,   91,   66,   70,
      167,   70,   91,  168,   66,  128,   66,  168,   66,   70,
       66,   70,   66,   66,   66,  751,   70,   70,  128,   91,
      669,  597,  581,   66,   66,  150,   91,   66,   70,  167,
       70,   91,  168,   66,  128,   66,  168,   66,   70,   66,

       70,   66,   66,   66,   71,   70,   70,  128,  147,   95,
       74,   71,   71,   74,   74,  121,  129,   95,   71,  169,
       74,   71,  117,   95,  362,  362,  362,  362,  362,  114,
      129,   48,  142,   71,  142,   23,  155,  142,   95,   74,
       71,   71,   74,   74,  155,  129,   95,   71,  169,   74,
       71,   82,   95,   82,   82,   82,   82,   82,   82,  129,
       84,  142,   20,  142,   84,  155,  142,   84,   82,   17,
       84,  156,   13,  155,  108,  108,  108,  108,  108,    0,
       84,  469,  469,  469,  469,  469,    0,   94,  108,   84,
        0,   94,  156,   84,  172,   94,   84,   82,   83,   84,

      156,   94,  173,    0,   83,  175,   83,  173,   85,   84,
       83,   83,   83,   83,   83,   85,   94,  108,    0,   85,
       94,  156,   85,  172,   94,   85,  163,   83,   85,    0,
       94,  173,  163,   83,  175,   83,  173,   85,  176,   83,
       83,   83,   83,   83,   85,   86,  171,   87,   85,   86,
      177,   85,   98,   86,   85,  163,  171,   85,   87,   86,
       87,  163,   86,  178,  179,   87,   98,  176,   87,   98,
       87,    0,   98,    0,   86,  171,   87,    0,   86,  177,
        0,   98,   86,  180,  181,  171,  182,   87,   86,   87,
        0,   86,  178,  179,   87,   98,    0,   87,   98,   87,

       88,   98,  100,  184,   88,   96,  100,   96,   88,   96,
      100,   88,  180,  181,   88,  182,  100,   88,  105,   96,
       88,  105,  105,  185,   96,   96,    0,    0,  105,   88,
        0,  100,  184,   88,   96,  100,   96,   88,   96,  100,
       88,    0,    0,   88,    0,  100,   88,  105,   96,   88,
      105,  105,  185,   96,   96,   97,   97,  105,  186,   97,
      101,  187,  101,  189,  190,   97,  191,   97,  192,   97,
      101,   97,  101,   97,   97,   97,    0,  101,  101,  193,
      194,    0,  195,    0,   97,   97,  198,  186,   97,  101,
      187,  101,  189,  190,   97,  191,   97,  192,   97,  101,

       97,  101,   97,   97,   97,  102,  101,  101,  193,  194,
      123,  195,  102,  102,  123,  198,  199,  123,  204,  102,
      123,  109,  102,  109,  109,  109,  109,  109,  109,    0,
      123,    0,  201,    0,  102,    0,    0,  201,  109,  123,
        0,  102,  102,  123,    0,  199,  123,  204,  102,  123,
      130,  102,    0,    0,    0,    0,  125,  130,  124,  123,
      125,  201,  130,  205,  125,  124,  201,  109,  122,  124,
      125,  206,  124,  125,  122,  124,  122,    0,  124,  130,
      122,  122,  122,  122,  122,  125,  130,  124,    0,  125,
        0,  130,  205,  125,  124,    0,    0,  122,  124,  125,

      206,  124,  125,  122,  124,  122,  126,  124,    0,  122,
      122,  122,  122,  122,  133,  196,    0,  126,  133,  126,
      196,  196,  133,  134,  126,  137,  207,  126,  133,  126,
        0,  134,    0,  213,    0,  126,    0,  134,    0,  137,
        0,    0,  137,  133,  196,  137,  126,  133,  126,  196,
      196,  133,  134,  126,  137,  207,  126,  133,  126,  127,
      134,  139,  213,  127,  214,  139,  134,  127,  137,  139,
      127,  137,    0,  127,  137,  139,  127,  162,  162,  127,
      188,  135,  202,  135,  202,  135,  188,  215,  127,  188,
      139,  162,  127,  214,  139,  135,  127,    0,  139,  127,

      135,  135,  127,    0,  139,  127,  162,  162,  127,  188,
      135,  202,  135,  202,  135,  188,  215,    0,  188,    0,
      162,    0,    0,  144,  135,    0,  144,  144,  200,  135,
      135,  136,  136,  144,  210,  136,  140,  210,  140,  200,
      200,  136,  216,  136,    0,  136,  140,  136,  140,  136,
      136,  136,  144,  140,  140,  144,  144,  200,    0,    0,
      136,  136,  144,  210,  136,  140,  210,  140,  200,  200,
      136,  216,  136,  170,  136,  140,  136,  140,  136,  136,
      136,  141,  140,  140,  170,  170,  170,  174,  141,  141,
      174,  183,    0,  170,  217,  141,  174,  183,  141,  218,

      208,  203,  170,  174,  208,  209,  209,  219,  183,    0,
      141,  220,  203,  170,  170,  170,  174,  141,  141,  174,
      183,  203,  170,  217,  141,  174,  183,  141,  218,  208,
      203,  221,  174,  208,  209,  209,  219,  183,  211,  211,
      220,  203,  212,  212,  222,  223,  224,  225,  226,  227,
      203,  225,  228,    0,  230,  232,  224,  225,  231,    0,
      221,  229,  234,  235,    0,  238,  229,  211,  211,  231,
      239,  212,  212,  222,  223,  224,  225,  226,  227,  229,
      225,  228,  229,  230,  232,  224,  225,  231,  233,  236,
      229,  234,  235,  237,  238,  229,    0,  233,  231,  239,

      247,  240,  244,  243,  237,  233,  236,  242,  229,  240,
      243,  229,  243,  245,  244,  242,  248,  233,  236,  246,
      249,  245,  237,  250,  251,  246,  233,  242,  252,  247,
      240,  244,  243,  237,  233,  236,  242,  260,  240,  243,
        0,  243,  245,  244,  242,  248,    0,    0,  246,  249,
      245,    0,  250,  251,  246,    0,  242,  252,  254,  254,
      254,  254,  254,  255,    0,  255,  260,  255,  255,  255,
      255,  255,  254,  256,  256,  256,  256,  256,  257,  257,
      257,  257,  257,  257,  258,  262,  258,  256,  258,  258,
      258,  258,  258,  257,  261,  263,  264,  265,  266,  267,

      270,  254,  261,  268,  268,  269,  262,  271,  273,  274,
      275,  269,  271,  274,  262,  278,  256,  268,  281,    0,
      277,    0,  257,  261,  263,  264,  265,  266,  267,  270,
      277,  261,  268,  268,  269,  262,  271,  273,  274,  275,
      269,  271,  274,  276,  278,  279,  268,  281,  280,  277,
      279,  280,  282,  283,  276,  276,  276,  280,  284,  277,
      285,  286,  287,  276,  280,  288,    0,  290,  291,  292,
      293,    0,  276,  295,  279,  296,  297,  280,  298,  279,
      280,  282,  283,  276,  276,  276,  280,  284,  299,  285,
      286,  287,  276,  280,  288,  289,  290,  291,  292,  293,

      294,  289,  295,  300,  296,  297,  294,  298,  301,  294,
      302,  304,  289,  305,  306,  302,  302,  299,  307,  308,
      310,  308,  311,  307,  289,  306,  306,  312,    0,  294,
      289,  313,  300,    0,    0,  294,    0,  301,  294,  302,
      304,  289,  305,  306,  302,  302,  309,  307,  308,  310,
      308,  311,  307,  319,  306,  306,  312,  309,  314,  320,
      313,  321,  314,  315,  315,  316,  309,  322,  316,  317,
      317,  318,  318,  323,  324,  309,  325,  326,  327,  328,
      329,  332,  319,  333,  334,    0,  309,  314,  320,  336,
      321,  314,  315,  315,  316,  309,  322,  316,  317,  317,

      318,  318,  323,  324,  330,  325,  326,  327,  328,  329,
      332,  331,  333,  334,  330,  331,  337,  335,  336,  338,
      339,  331,  335,  340,  341,  342,  344,  337,  343,  339,
      345,  353,    0,  330,    0,  335,    0,  339,  335,  343,
      331,    0,  342,  330,  331,  337,  335,  354,  338,  339,
      331,  335,  340,  341,  342,  344,  337,  343,  339,  345,
      353,  346,  348,  350,  335,  349,  339,  335,  343,  346,
      348,  342,  349,  351,  349,  350,  354,  352,  355,  356,
      357,  351,  348,  352,  358,  472,  472,  472,  472,  472,
      346,  348,  350,  367,  349,    0,    0,    0,  346,  348,

        0,  349,  351,  349,  350,    0,  352,  355,  356,  357,
      351,  348,  352,  358,  360,  360,  360,  360,  360,  361,
        0,  361,  367,  361,  361,  361,  361,  361,  360,  363,
      363,  363,  363,  363,  364,  369,  364,  364,  364,  364,
      364,  364,  365,  363,  365,  368,  365,  365,  365,  365,
      365,  364,  370,  368,  371,  372,  369,  360,  373,  374,
      376,  375,  375,  377,  369,  378,  376,  380,  382,  381,
      378,    0,  363,  381,  368,  375,  384,  385,    0,    0,
      364,  370,  368,  371,  372,  369,  384,  373,  374,  376,
      375,  375,  377,  388,  378,  376,  380,  382,  381,  378,

      383,  389,  381,  386,  375,  384,  385,  387,  386,  390,
      387,  383,  383,  383,  391,  384,  387,  392,  393,  394,
      383,  395,  388,  387,  397,  398,  399,  396,  400,  383,
      389,  402,  386,  396,  403,    0,  387,  386,  390,  387,
      383,  383,  383,  391,  396,  387,  392,  393,  394,  383,
      395,  404,  387,  397,  398,  399,  396,  400,  401,  405,
      402,  406,  396,  403,  401,  407,  408,  401,  411,  409,
      412,  413,  414,  396,  409,  409,  415,  414,  415,  417,
      404,  418,  413,  413,    0,  419,  420,  401,  405,    0,
      406,    0,    0,  401,  407,  408,  401,  411,  409,  412,

      413,  414,  416,  409,  409,  415,  414,  415,  417,  426,
      418,  413,  413,  416,  419,  420,  421,  422,  422,  427,
      421,  423,  416,  428,  423,  424,  424,  425,  425,  429,
      430,  416,  431,  432,  433,  434,  435,  436,  426,  439,
      440,    0,  416,  441,    0,  421,  422,  422,  427,  421,
      423,  416,  428,  423,  424,  424,  425,  425,  429,  430,
      437,  431,  432,  433,  434,  435,  436,  438,  439,  440,
      437,  438,  441,  442,  443,  444,  445,  438,  442,  447,
      448,  446,  450,  451,  449,  452,  444,  453,    0,  437,
      446,  442,    0,  450,  442,  453,  438,    0,  446,  437,

      438,  449,  442,  443,  444,  445,  438,  442,  447,  448,
      446,  450,  451,  449,  452,  444,  453,  455,  460,  446,
      442,  458,  450,  442,  453,  455,  456,  446,  457,  458,
      449,  461,  459,  456,  462,  456,  463,  455,  459,  464,
      457,  465,    0,    0,    0,    0,  455,  460,  481,    0,
      458,    0,    0,    0,  455,  456,    0,  457,  458,    0,
      461,  459,  456,  462,  456,  463,  455,  459,  464,  457,
      465,  466,  466,  466,  466,  466,  467,  481,  467,    0,
      467,  467,  467,  467,  467,  466,  468,  468,  468,  468,
      468,  470,    0,  470,  470,  470,  470,  470,  470,  471,

      468,  471,  484,  471,  471,  471,  471,  471,  470,  473,
      477,  477,  482,  477,  466,  483,  477,  485,  486,  487,
      482,  473,  473,  473,  473,  473,  488,  490,  477,  468,
        0,  484,  477,  490,  491,  492,  483,  470,  489,  489,
      492,  482,  494,  496,  483,  499,  485,  486,  487,  482,
      495,  498,  489,  500,  495,  488,  490,    0,  500,  477,
      502,  498,  490,  491,  492,  483,  503,  489,  489,  492,
      504,  494,  496,  497,  499,    0,  505,  506,  507,  495,
      498,  489,  500,  495,  497,  497,  497,  500,  501,  502,
      498,  501,  508,  497,  509,  503,  511,  501,    0,  504,

      512,  513,  497,  514,  501,  505,  506,  507,    0,  516,
      510,  517,  518,  497,  497,  497,  510,  501,  519,  520,
      501,  508,  497,  509,  521,  511,  501,  510,  515,  512,
      513,  522,  514,  501,  515,  525,  526,  515,  516,  510,
      517,  518,    0,  527,  523,  510,  528,  519,  520,  523,
      523,  528,  531,  521,  527,  527,  510,  515,  532,  529,
      522,  529,    0,  515,  525,  526,  515,  533,  534,  540,
      535,  530,  527,  523,  535,  528,  536,  536,  523,  523,
      528,  531,  530,  527,  527,  541,  537,  532,  529,  537,
      529,  530,  538,  538,  539,  539,  533,  534,  540,  535,

      530,  542,  543,  535,  544,  536,  536,  545,  546,  547,
      548,  530,  549,  550,  541,  537,  551,  553,  537,  554,
      530,  538,  538,  539,  539,  552,  551,  555,  557,  552,
      542,  543,  558,  544,  559,  552,  545,  546,  547,  548,
      561,  549,  550,  558,  556,  551,  553,  562,  554,  556,
      560,  563,  565,  566,  552,  551,  555,  557,  552,  560,
      564,  558,  556,  559,  552,  556,  567,  560,  563,  561,
        0,  564,  558,  556,  567,    0,  562,  572,  556,  560,
      563,  565,  566,  574,  569,  572,  575,  571,  560,  564,
      576,  556,  569,  577,  556,  567,  560,  563,  570,  571,

      564,  578,  573,  567,  569,  570,  572,  570,  573,  579,
      583,  585,  574,  569,  572,  575,  571,  588,  590,  576,
      591,  569,  577,  593,  594,  595,  596,  570,  571,  598,
      578,  573,  599,  569,  570,  600,  570,  573,  579,  583,
      585,  601,  602,  603,  604,  605,  588,  590,  606,  591,
      607,  609,  593,  594,  595,  596,  601,  608,  598,  608,
      610,  599,  611,  613,  600,  614,  614,  612,  616,  617,
      601,  602,  603,  604,  605,  615,  618,  606,  615,  607,
      609,  612,  612,  619,  620,  601,  608,  621,  608,  610,
      622,  611,  613,  623,  614,  614,  612,  616,  617,  625,

      626,  627,  628,  629,  615,  618,  630,  615,  627,  631,
      612,  612,  619,  620,  632,  633,  621,  634,  635,  622,
      636,  637,  623,  638,  639,  640,  641,  642,  625,  626,
      627,  628,  629,  643,  644,  630,  635,  627,  631,  646,
      647,  646,  645,  632,  633,  650,  634,  635,  651,  636,
      637,  646,  638,  639,  640,  641,  642,  645,  652,  653,
      654,  646,  643,  644,  655,  635,  656,  657,  658,  647,
      660,  645,  661,  662,  650,  663,  664,  651,  666,  670,
      646,  671,  672,  673,  674,  662,  645,  652,  653,  654,
      646,  675,  677,  655,  678,  656,  657,  658,  679,  660,

      680,  661,  662,  681,  663,  664,  682,  666,  670,  683,
      671,  672,  673,  674,  662,  684,  685,  686,  687,  688,
      675,  677,  689,  678,  690,  691,  692,  679,  693,  680,
      694,  695,  681,  696,  697,  682,  699,  700,  683,  701,
      698,  703,  704,  705,  684,  685,  686,  687,  688,  698,
      706,  689,  707,  690,  691,  692,  709,  693,  710,  694,
      695,  711,  696,  697,  712,  699,  700,  715,  701,  698,
      703,  704,  705,  713,  714,  716,  718,  719,  713,  706,
      714,  707,  717,  720,  717,  709,  721,  710,  722,  723,
      711,  724,  724,  712,  725,  726,  715,  727,  728,  729,

      730,  727,  713,  714,  716,  718,  719,  713,    0,  714,
        0,  717,  720,  717,  724,  721,    0,  722,  723,    0,
      724,  724,    0,  725,  726,    0,  727,  728,  729,  730,
      727,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  737,  739,  724,  733,  733,  733,  733,  733,  734,
      742,  734,  744,  734,  734,  734,  734,  734,  733,  735,
      735,  735,  735,  735,  736,  736,  736,  736,  736,  745,
      737,  739,  747,  748,  749,  750,  752,  753,  754,  742,
      755,  744,  756,  757,  758,  759,  760,  733,  761,  762,
      763,  762,  764,  765,  767,  755,  768,  768,  745,  770,

        0,  747,  748,  749,  750,  752,  753,  754,  771,  755,
      772,  756,  757,  758,  759,  760,  766,  761,  762,  763,
      762,  764,  765,  767,  755,  768,  768,  773,  770,  769,
      766,  766,  769,  774,  775,  776,  777,  771,  779,  772,
      780,  781,  782,  783,  784,  766,  785,  786,  781,  787,
      788,  790,  791,  792,  793,    0,  773,  794,  769,  766,
      766,  769,  774,  775,  776,  777,  789,  779,  795,  780,
      781,  782,  783,  784,  796,  785,  786,  781,  787,  788,
      790,  791,  792,  793,  789,  797,  794,  798,  800,  799,
      800,  801,  804,  805,  806,  789,  807,  795,  808,  809,

      800,  810,  811,  796,  799,  812,  814,  815,  817,  818,
      800,  820,  816,  789,  797,  824,  798,  825,  799,  826,
      801,  804,  805,  806,  816,  807,  827,  808,  809,  800,
      810,  811,  828,  799,  812,  814,  815,  817,  818,  800,
      820,  816,  829,  831,  824,  832,  825,  833,  826,  834,
      835,  836,  837,  816,  838,  827,  839,  840,  841,  842,
      843,  828,  844,  845,  846,  847,  848,  849,  850,  851,
      853,  829,  831,  852,  832,  854,  833,  855,  834,  835,
      836,  837,  852,  838,  857,  839,  840,  841,  842,  843,
      858,  844,  845,  846,  847,  848,  849,  850,  851,  853,

      859,  860,  852,  861,  854,  863,  855,  864,  865,  866,
      867,  868,  869,  857,  870,  867,  871,  868,  871,  858,
      872,  873,  874,  875,  876,  877,    0,    0,  879,  859,
      860,  880,  861,    0,  863,  882,  864,  865,  866,  867,
      868,  869,  883,  870,  867,  871,  868,  871,  884,  872,
      873,  874,  875,  876,  877,  878,  878,  879,  881,  893,
      880,  895,  881,    0,  882,  885,  885,  885,  885,  885,
        0,  883,  886,  886,  886,  886,  886,  884,  878,  887,
      887,  887,  887,  887,  878,  878,    0,  881,  893,    0,
      895,  881,  888,  888,  888,  888,  888,  889,    0,  889,

        0,  889,  889,  889,  889,  889,  888,  878,  890,  898,
      890,  890,  890,  890,  890,  890,  891,  891,  891,  891,
      891,  900,  901,  903,  904,  890,  892,  892,  892,  892,
      892,  905,  906,  908,  909,  888,  910,  912,  898,  913,
      911,  914,  915,  916,  917,  918,  919,  918,  920,  921,
      900,  901,  903,  904,  890,  911,  923,  924,  924,  926,
      905,  906,  908,  909,  927,  910,  912,  922,  913,  911,
      914,  915,  916,  917,  918,  919,  918,  920,  921,  928,
      925,  922,  922,  925,  911,  923,  924,  924,  926,  929,
      930,  931,  932,  927,  933,  935,  922,  936,  937,  938,

      939,  940,  941,  942,  943,  937,  944,  945,  928,  925,
      922,  922,  925,  946,  947,  948,  949,  950,  929,  930,
      931,  932,  951,  933,  935,  945,  936,  937,  938,  939,
      940,  941,  942,  943,  937,  944,  945,  952,  953,  954,
      955,    0,  946,  947,  948,  949,  950,  957,  956,  960,
      956,  951,  961,  962,  945,  955,  963,  964,  965,  966,
      956,  967,  968,  970,  971,  972,  952,  953,  954,  955,
      956,  973,  974,  976,  980,  981,  957,  972,  960,  982,
      983,  961,  962,  984,  955,  963,  964,  965,  966,  956,
      967,  968,  970,  971,  972,  985,  987,  988,  989,  956,

      973,  974,  976,  980,  981,  990,  972,  991,  982,  983,
      992,  993,  984,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004,  985,  987,  988,  989, 1005, 1006,
     1007, 1009, 1008, 1010,  990, 1011,  991, 1013, 1014,  992,
      993, 1008,  994,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1015, 1016, 1017, 1019, 1005, 1006, 1007,
     1009, 1008, 1010, 1020, 1011, 1021, 1013, 1014, 1022, 1023,
     1024, 1025, 1026, 1027, 1023, 1027, 1024, 1028, 1029, 1030,
     1031, 1032, 1015, 1016, 1017, 1019, 1033, 1035, 1034, 1034,
     1036, 1037, 1020, 1038, 1021, 1037, 1039, 1022, 1023, 1024,

     1025, 1026, 1027, 1023, 1027, 1024, 1028, 1029, 1030, 1031,
     1032, 1034, 1040,    0,    0, 1033, 1035, 1034, 1034, 1036,
     1037, 1054, 1038,    0, 1037, 1039, 1041, 1041, 1041, 1041,
     1041, 1042, 1042, 1042, 1042, 1042,    0,    0,    0,    0,
     1034, 1040, 1043, 1043, 1043, 1043, 1043, 1044, 1056, 1044,
     1054, 1044, 1044, 1044, 1044, 1044, 1043, 1045, 1045, 1045,
     1045, 1045, 1046,    0, 1046, 1046, 1046, 1046, 1046, 1046,
     1047, 1047, 1047, 1047, 1047, 1049, 1059, 1056, 1061, 1046,
     1048, 1048, 1048, 1048, 1048, 1043, 1051, 1049, 1049, 1049,
     1049, 1049, 1050, 1050, 1050, 1050, 1050, 1062, 1051, 1051,

     1051, 1051, 1051, 1052, 1052, 1059, 1052, 1061, 1046, 1052,
     1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1052, 1076,    0, 1077, 1052, 1062, 1078, 1079, 1080,
     1079, 1081, 1072, 1082, 1084,    0,    0, 1085, 1085, 1064,
     1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
     1083, 1076, 1052, 1077, 1087, 1088, 1078, 1079, 1080, 1079,
     1081, 1072, 1082, 1084, 1083, 1083, 1085, 1085, 1086, 1089,
     1090, 1086, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1083,
     1099, 1100, 1101, 1087, 1088, 1098, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1083, 1083, 1109, 1110, 1086, 1089, 1090,

     1086, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1106, 1099,
     1100, 1101, 1111, 1112, 1098, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1113, 1114, 1109, 1110, 1115, 1117, 1116, 1117,
     1118, 1121, 1122, 1123, 1124, 1125, 1126, 1106, 1127, 1117,
     1128, 1111, 1112, 1116, 1129, 1131, 1132, 1134, 1135, 1117,
     1137, 1113, 1114, 1141, 1133, 1115, 1142, 1116, 1143, 1118,
     1121, 1122, 1123, 1124, 1125, 1126, 1133, 1127, 1117, 1128,
     1144, 1145, 1116, 1129, 1131, 1132, 1134, 1135, 1117, 1137,
     1146, 1148, 1141, 1133, 1149, 1142, 1150, 1143, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1133, 1158, 1159, 1160, 1144,

     1145, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1146,
     1148, 1170, 1171, 1149, 1172, 1150, 1174, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1175, 1158, 1159, 1160, 1176, 1169,
     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1177,
     1170, 1171, 1178, 1172, 1180, 1174, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1175, 1184, 1189, 1185, 1176, 1169, 1188,
     1190, 1188, 1191, 1192, 1193, 1194, 1196, 1197, 1177, 1199,
     1198, 1178, 1200, 1180, 1198, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1201, 1184, 1189, 1185, 1195, 1195, 1188, 1190,
     1188, 1191, 1192, 1193, 1194, 1196, 1197, 1202, 1199, 1198,

     1203, 1200, 1204, 1198, 1205, 1206, 1207, 1208, 1209, 1195,
     1210, 1201, 1211, 1213, 1218, 1195, 1195, 1217, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1202, 1228, 1229, 1203,
     1230, 1204,    0, 1205, 1206, 1207, 1208, 1209, 1195, 1210,
     1232, 1211, 1213, 1218, 1217, 1231, 1217, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1233, 1228, 1229, 1234, 1230,
     1235, 1231, 1236, 1231, 1237, 1239, 1240, 1244, 1245, 1232,
     1246, 1247, 1248, 1249, 1231, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1260, 1233, 1261, 1262, 1234, 1264, 1235,
     1231, 1236, 1231, 1237, 1239, 1240, 1244, 1245, 1265, 1246,

     1247, 1248, 1249, 1266, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1260, 1267, 1261, 1262, 1273, 1264, 1270, 1275,
     1278, 1279, 1281, 1282, 1283, 1284, 1285, 1265, 1286, 1270,
     1287, 1289, 1266, 1290, 1291, 1292, 1293, 1294, 1295, 1297,
     1298, 1299, 1267, 1300, 1291, 1273, 1302, 1270, 1275, 1278,
     1279, 1281, 1282, 1283, 1284, 1285, 1303, 1286, 1270, 1287,
     1289, 1304, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298,
     1299, 1306, 1300, 1291, 1305, 1302, 1307, 1308, 1305, 1309,
     1310, 1312, 1313, 1314, 1315, 1303, 1316, 1318, 1319, 1320,
     1304, 1321, 1322, 1324, 1325, 1326, 1327, 1331, 1330, 1332,

     1306, 1330, 1333, 1305, 1336, 1307, 1308, 1305, 1309, 1310,
     1312, 1313, 1314, 1315, 1337, 1316, 1318, 1319, 1320, 1338,
     1321, 1322, 1324, 1325, 1326, 1327, 1331, 1330, 1332, 1339,
     1330, 1333, 1340, 1336, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1351, 1352, 1337,    0,    0,    0,    0, 1338, 1355,
     1355, 1355, 1355, 1355, 1357, 1358, 1359, 1360, 1339, 1361,
     1362, 1340, 1363, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
     1351, 1352, 1356, 1356, 1356, 1356, 1356, 1364, 1365, 1366,
     1368, 1373, 1375, 1357, 1358, 1359, 1360, 1372, 1361, 1362,
     1376, 1363, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,

     1385, 1387, 1386, 1388, 1389, 1390, 1364, 1365, 1366, 1368,
     1373, 1375, 1391, 1392, 1372, 1394, 1372, 1395, 1386, 1376,
     1386, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1387, 1386, 1388, 1389, 1390, 1399, 1400, 1401, 1402, 1403,
     1404, 1391, 1392, 1405, 1394, 1406, 1395, 1386, 1407, 1386,
     1408, 1409, 1410, 1411, 1412, 1415, 1416, 1417, 1419, 1420,
     1421, 1422, 1425, 1428, 1399, 1400, 1401, 1402, 1403, 1404,
     1430, 1433, 1405, 1425, 1406, 1434, 1436, 1407, 1437, 1408,
     1409, 1410, 1411, 1412, 1415, 1416, 1417, 1419, 1420, 1421,
     1422, 1425, 1428, 1438, 1439, 1440, 1441, 1442, 1444, 1430,

     1433, 1445, 1425, 1446, 1434, 1436, 1447, 1437, 1448, 1449,
     1450, 1452, 1453, 1446, 1454, 1455, 1457, 1458, 1459, 1461,
     1462, 1463, 1438, 1439, 1440, 1441, 1442, 1444, 1464, 1460,
     1445, 1465, 1446, 1460, 1467, 1447, 1468, 1448, 1449, 1450,
     1452, 1453, 1446, 1454, 1455, 1457, 1458, 1459, 1461, 1462,
     1463, 1469, 1470, 1471, 1473, 1474, 1475, 1464, 1460, 1476,
     1465, 1477, 1460, 1467, 1479, 1468, 1480, 1481, 1482, 1485,
     1486, 1487, 1485, 1488, 1491, 1492, 1493, 1494, 1495, 1496,
     1469, 1470, 1471, 1473, 1474, 1475, 1497, 1498, 1476, 1499,
     1477, 1500, 1501, 1479, 1502, 1480, 1481, 1482, 1485, 1486,

     1487, 1485, 1488, 1491, 1492, 1493, 1494, 1495, 1496, 1506,
     1507,    0,    0,    0,    0, 1497, 1498,    0, 1499,    0,
     1500, 1501,    0, 1502, 1510, 1510, 1510, 1510, 1510, 1511,
     1511, 1511, 1511, 1511, 1516, 1517,    0, 1518, 1506, 1507,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 1519, 1520, 1516, 1517, 1514, 1518, 1521, 1522, 1523,
     1524, 1525, 1527,    0, 1532, 1531, 1534, 1535, 1536, 1537,
     1538, 1539, 1540, 1541, 1542, 1543, 1544,    0, 1546, 1547,
     1519, 1520, 1548, 1549, 1514, 1550, 1521, 1522, 1523, 1524,

     1525, 1527, 1531, 1532, 1531, 1534, 1535, 1536, 1537, 1538,
     1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1551,
     1553, 1548, 1549, 1554, 1550, 1558, 1559, 1560, 1561, 1562,
     1563, 1564, 1545, 1565, 1545, 1566, 1567, 1568, 1569, 1570,
     1571, 1574, 1575, 1576, 1578, 1545, 1579, 1580, 1551, 1553,
     1581, 1587, 1554, 1589, 1558, 1559, 1560, 1561, 1562, 1563,
     1564, 1545, 1565, 1545, 1566, 1567, 1568, 1569, 1570, 1571,
     1574, 1575, 1576, 1578, 1584, 1579, 1580, 1592, 1593, 1581,
     1587, 1595, 1589, 1596, 1597, 1584, 1598, 1599, 1600, 1601,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1611, 1612, 1613,

     1614, 1616, 1605, 1584, 1617, 1618, 1592, 1593, 1620, 1621,
     1595, 1622, 1596, 1597, 1584, 1598, 1599, 1600, 1601, 1603,
     1604, 1605, 1606, 1607, 1608, 1609, 1611, 1612, 1613, 1614,
     1616, 1605, 1619, 1617, 1618, 1623, 1619, 1620, 1621, 1624,
     1622, 1626, 1627, 1628, 1629, 1630, 1632, 1633, 1634, 1635,
     1636, 1638, 1639, 1640, 1641, 1644, 1645, 1646, 1644, 1647,
     1650, 1619, 1651, 1652, 1623, 1619, 1653, 1654, 1624, 1655,
     1626, 1627, 1628, 1629, 1630, 1632, 1633, 1634, 1635, 1636,
     1638, 1639, 1640, 1641, 1644, 1645, 1646, 1644, 1647, 1650,
     1656, 1651, 1652, 1657, 1658, 1653, 1654, 1659, 1655, 1660,

     1661, 1665, 1666, 1669, 1669, 1669, 1669, 1669, 1670, 1670,
     1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671,    0, 1656,
        0,    0, 1657, 1658, 1677,    0, 1659,    0, 1660, 1661,
     1665, 1666, 1672, 1672, 1672, 1672, 1672, 1673, 1678, 1679,
     1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674,
     1676, 1680, 1681, 1677, 1673, 1675, 1675, 1675, 1675, 1675,
     1682, 1683, 1676, 1676, 1676, 1676, 1676, 1678, 1679, 1684,
     1685, 1686, 1688,    0, 1693, 1692, 1695, 1696, 1697, 1698,
     1680, 1681, 1699, 1673, 1700, 1701, 1702, 1703, 1704, 1682,
     1683, 1705, 1707, 1708, 1706, 1709, 1710, 1711, 1684, 1685,

     1686, 1688, 1692, 1693, 1692, 1695, 1696, 1697, 1698, 1712,
     1706, 1699, 1706, 1700, 1701, 1702, 1703, 1704, 1714, 1715,
     1705, 1707, 1708, 1706, 1709, 1710, 1711, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1712, 1706,
     1730, 1706, 1731, 1732, 1735, 1736, 1737, 1714, 1715, 1739,
     1740, 1741, 1742, 1748, 1750, 1753, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1754, 1756, 1730,
     1757, 1731, 1732, 1735, 1736, 1737, 1745, 1758, 1739, 1740,
     1741, 1742, 1748, 1750, 1753, 1759, 1760, 1745, 1761, 1762,
     1764, 1765, 1766, 1767, 1768, 1769, 1754, 1756, 1770, 1757,

     1772, 1773, 1766, 1774, 1775, 1745, 1758, 1777, 1778, 1779,
        0, 1781, 1782, 1783, 1759, 1760, 1745, 1761, 1762, 1764,
     1765, 1766, 1767, 1768, 1769, 1784, 1785, 1770, 1787, 1772,
     1773, 1766, 1774, 1775, 1788, 1780, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1789, 1790, 1791, 1793, 1794, 1795, 1796,
     1797, 1799, 1800, 1801, 1784, 1785, 1802, 1787, 1805, 1806,
     1807, 1805, 1808, 1788, 1780, 1811, 1812, 1813, 1780, 1814,
     1815, 1816, 1789, 1790, 1791, 1793, 1794, 1795, 1796, 1797,
     1799, 1800, 1801, 1817, 1818, 1802, 1819, 1805, 1806, 1807,
     1805, 1808, 1820, 1821, 1811, 1812, 1813, 1822, 1814, 1815,

     1816, 1826, 1827, 1833, 1834, 1835, 1837, 1838, 1839, 1840,
     1841, 1842, 1817, 1818, 1844, 1819, 1845, 1846, 1847, 1848,
     1850, 1820, 1821, 1852, 1853, 1854, 1822, 1855, 1856, 1857,
     1826, 1827, 1833, 1834, 1835, 1837, 1838, 1839, 1840, 1841,
     1842, 1858, 1860, 1844, 1861, 1845, 1846, 1847, 1848, 1850,
     1859, 1862, 1852, 1853, 1854, 1863, 1855, 1856, 1857, 1864,
     1859, 1865, 1859, 1866, 1868, 1869, 1870, 1871, 1876, 1877,
     1858, 1860, 1878, 1861, 1880, 1882, 1883, 1885, 1886, 1859,
     1862, 1889, 1890, 1892, 1863, 1890, 1893, 1897, 1864, 1859,
     1865, 1859, 1866, 1868, 1869, 1870, 1871, 1876, 1877, 1898,

     1899, 1878, 1900, 1880, 1882, 1883, 1885, 1886, 1903, 1905,
     1889, 1890, 1892, 1907, 1890, 1893, 1897, 1908, 1910, 1911,
     1913, 1915, 1917, 1918, 1919, 1920, 1921, 1922, 1898, 1899,
     1923, 1900, 1925, 1926, 1927, 1929, 1930, 1903, 1905, 1931,
     1932, 1933, 1907, 1934, 1935, 1936, 1908, 1910, 1911, 1913,
     1915, 1917, 1918, 1919, 1920, 1921, 1922, 1937, 1939, 1923,
     1940, 1925, 1926, 1927, 1929, 1930, 1941, 1942, 1931, 1932,
     1933, 1943, 1934, 1935, 1936, 1944, 1946, 1947, 1948, 1952,
     1953, 1954, 1955, 1957, 1961, 1962, 1937, 1939, 1963, 1940,
     1965, 1966, 1967, 1968, 1969, 1941, 1942, 1970, 1972, 1973,

     1943, 1974, 1975, 1976, 1944, 1946, 1947, 1948, 1952, 1953,
     1954, 1955, 1957, 1961, 1962, 1978, 1980, 1963, 1981, 1965,
     1966, 1967, 1968, 1969, 1982, 1983, 1970, 1972, 1973, 1984,
     1974, 1975, 1976, 1985, 1986, 1988, 1987, 1989, 1990, 1991,
     1992, 1993, 1994, 1996, 1978, 1980, 1987, 1981, 1987, 1997,
     1998, 1999, 2004, 1982, 1983, 2005, 2006, 2008, 1984, 2010,
     2011, 2013, 1985, 1986, 1988, 1987, 1989, 1990, 1991, 1992,
     1993, 1994, 1996, 2014, 2017, 1987, 2020, 1987, 1997, 1998,
     1999, 2004, 2021, 2025, 2005, 2006, 2008, 2026, 2010, 2011,
     2013, 2018, 2027, 2028, 2018, 2031, 2033, 2035, 2036, 2038,

     2039, 2041, 2014, 2017, 2043, 2020, 2045, 2046, 2047, 2048,
     2049, 2021, 2025, 2050, 2051, 2053, 2026, 2054, 2055, 2057,
     2018, 2027, 2028, 2018, 2031, 2033, 2035, 2036, 2038, 2039,
     2041, 2058, 2059, 2043, 2060, 2045, 2046, 2047, 2048, 2049,
     2061, 2062, 2050, 2051, 2053, 2063, 2054, 2055, 2057, 2064,
     2065, 2067, 2068, 2069, 2070, 2071, 2072, 2074, 2075, 2076,
     2058, 2059, 2080, 2060, 2081, 2082, 2083, 2085,    0, 2061,
     2062,    0,    0, 2091, 2063, 2092, 2093, 2095, 2064, 2065,
     2067, 2068, 2069, 2070, 2071, 2072, 2074, 2075, 2076, 2096,
     2097, 2080, 2098, 2081, 2082, 2083, 2085, 2087, 2087, 2087,

     2087, 2087, 2091, 2099, 2092, 2093, 2095, 2100, 2102, 2103,
     2104, 2105, 2106, 2108, 2110, 2111, 2112, 2113, 2096, 2097,
     2114, 2098, 2115, 2116, 2118, 2119, 2120, 2121,    0, 2122,
        0, 2123, 2099, 2124, 2126, 2127, 2100, 2102, 2103, 2104,
     2105, 2106, 2108, 2110, 2111, 2112, 2113, 2117, 2128, 2114,
     2129, 2115, 2116, 2118, 2119, 2120, 2121, 2117, 2122, 2117,
     2123, 2134, 2124, 2126, 2127, 2135, 2136, 2138, 2140, 2141,
     2143, 2144, 2147, 2150, 2151, 2148, 2117, 2128, 2148, 2129,
     2155, 2156, 2157, 2158, 2161, 2163, 2117, 2165, 2117, 2166,
     2134, 2168, 2169, 2171, 2135, 2136, 2138, 2140, 2141, 2143,

     2144, 2147, 2150, 2151, 2148, 2173, 2175, 2148, 2176, 2155,
     2156, 2157, 2158, 2161, 2163, 2177, 2165, 2178, 2166, 2179,
     2168, 2169, 2171, 2180, 2181, 2183, 2184, 2185, 2187, 2188,
     2189, 2190, 2191, 2192, 2173, 2175, 2193, 2176, 2194, 2195,
     2197, 2198, 2199, 2200, 2177, 2201, 2178, 2202, 2179, 2204,
     2205, 2206, 2180, 2181, 2183, 2184, 2185, 2187, 2188, 2189,
     2190, 2191, 2192, 2210, 2211, 2193, 2212, 2194, 2195, 2197,
     2198, 2199, 2200, 2213, 2201, 2215, 2202, 2223, 2204, 2205,
     2206, 2216, 2216, 2216, 2216, 2216, 2218, 2218, 2218, 2218,
     2218, 2224, 2210, 2211, 2225, 2212, 2219, 2219, 2219, 2219,

     2219, 2227, 2213, 2228, 2215, 2229, 2223, 2230, 2231, 2232,
     2234, 2235, 2236, 2237, 2238, 2240, 2242, 2243, 2244, 2245,
     2224, 2246, 2247, 2225, 2248, 2250, 2251, 2252, 2253, 2254,
     2227, 2255, 2228, 2256, 2229, 2258, 2230, 2231, 2232, 2234,
     2235, 2236, 2237, 2238, 2240, 2242, 2243, 2244, 2245, 2249,
     2246, 2247, 2259, 2248, 2250, 2251, 2252, 2253, 2254, 2249,
     2255, 2249, 2256, 2260, 2258, 2261, 2266, 2267, 2268, 2270,
     2272, 2273, 2275, 2276, 2279, 2282, 2280, 2283, 2249, 2280,
     2287, 2259, 2288, 2289, 2290, 2293, 2295, 2297, 2249, 2298,
     2249, 2300, 2260, 2301, 2261, 2266, 2267, 2268, 2270, 2272,

     2273, 2275, 2276, 2279, 2282, 2280, 2283, 2303, 2280, 2287,
     2305, 2288, 2289, 2290, 2293, 2295, 2297, 2307, 2298, 2308,
     2300, 2309, 2301, 2310, 2311, 2312, 2313, 2315, 2316, 2317,
     2319, 2320, 2321, 2322, 2323, 2324, 2303, 2325, 2326, 2305,
     2327, 2329, 2330, 2331, 2332, 2333, 2307, 2334, 2308, 2336,
     2309, 2337, 2310, 2311, 2312, 2313, 2315, 2316, 2317, 2319,
     2320, 2321, 2322, 2323, 2324, 2338, 2325, 2326, 2342, 2327,
     2329, 2330, 2331, 2332, 2333, 2343, 2334, 2344, 2336, 2345,
     2337, 2347, 2348, 2350, 2352, 2354, 2355, 2356, 2357, 2358,
     2359, 2361, 2362, 2364, 2338, 2365, 2367, 2342, 2368, 2369,

     2370, 2371, 2372, 2373, 2343, 2374, 2344, 2375, 2345, 2376,
     2347, 2348, 2350, 2352, 2354, 2355, 2356, 2357, 2358, 2359,
     2361, 2362, 2364, 2378, 2365, 2367, 2382, 2368, 2369, 2370,
     2371, 2372, 2373, 2384, 2374, 2385, 2375, 2386, 2376, 2387,
     2388, 2389, 2393, 2394, 2395, 2396, 2397, 2398, 2400, 2401,
     2402, 2403, 2378, 2405, 2407, 2382, 2411, 2412, 2413, 2414,
     2415, 2416, 2384, 2417, 2385, 2418, 2386, 2420, 2387, 2388,
     2389, 2393, 2394, 2395, 2396, 2397, 2398, 2400, 2401, 2402,
     2403, 2421, 2405, 2407, 2422, 2411, 2412, 2413, 2414, 2415,
     2416, 2423, 2417, 2424, 2418, 2425, 2420, 2429, 2430, 2432,

     2433, 2434, 2435, 2436, 2437, 2438, 2440, 2443, 2444, 2445,
     2421, 2447, 2449, 2422, 2451, 2453, 2454, 2455, 2456, 2457,
     2423, 2458, 2424, 2460, 2425, 2461, 2429, 2430, 2432, 2433,
     2434, 2435, 2436, 2437, 2438, 2440, 2443, 2444, 2445, 2463,
     2447, 2449, 2464, 2451, 2453, 2454, 2455, 2456, 2457, 2466,
     2458, 2467, 2460, 2468, 2461, 2469, 2470, 2471, 2472, 2473,
     2474, 2475, 2477, 2481, 2483, 2484, 2485, 2486, 2463, 2487,
     2488, 2464, 2492, 2493, 2494, 2495, 2496, 2497, 2466, 2499,
     2467, 2500, 2468, 2501, 2469, 2470, 2471, 2472, 2473, 2474,
     2475, 2477, 2481, 2483, 2484, 2485, 2486, 2502, 2487, 2488,

     2504, 2492, 2493, 2494, 2495, 2496, 2497, 2506, 2499, 2510,
     2500, 2511, 2501, 2512, 2513, 2514, 2515, 2516, 2517, 2519,
     2520, 2521, 2522, 2523, 2524, 2528, 2502, 2529, 2531, 2504,
     2532, 2533, 2534, 2535, 2536, 2537, 2506, 2539, 2510, 2542,
     2511, 2543, 2512, 2513, 2514, 2515, 2516, 2517, 2519, 2520,
     2521, 2522, 2523, 2524, 2528, 2544, 2529, 2531, 2547, 2532,
     2533, 2534, 2535, 2536, 2537, 2549, 2539, 2551, 2542, 2553,
     2543, 2546, 2546, 2546, 2546, 2546, 2554, 2555, 2556, 2557,
     2558, 2560, 2561, 2563, 2544, 2564, 2566, 2547, 2567, 2568,
     2569, 2570, 2571, 2572, 2549, 2573, 2551, 2574, 2553, 2575,

     2577, 2581, 2583, 2584, 2585, 2554, 2555, 2556, 2557, 2558,
     2560, 2561, 2563, 2586, 2564, 2566, 2587, 2567, 2568, 2569,
     2570, 2571, 2572, 2588, 2573, 2592, 2574, 2593, 2575, 2577,
     2581, 2583, 2584, 2585, 2594, 2595, 2596, 2597, 2599, 2600,
     2601, 2602, 2586, 2604, 2606, 2587, 2610, 2611, 2612, 2613,
     2614, 2615, 2588, 2616, 2592, 2617, 2593, 2619, 2620, 2621,
     2622, 2623, 2624, 2594, 2595, 2596, 2597, 2599, 2600, 2601,
     2602, 2628, 2604, 2606, 2629, 2610, 2611, 2612, 2613, 2614,
     2615, 2631, 2616, 2632, 2617, 2633, 2619, 2620, 2621, 2622,
     2623, 2624, 2634, 2635, 2636, 2637, 2639, 2642, 2643, 2644,

     2628,    0,    0, 2629, 2646, 2646, 2646, 2646, 2646, 2649,
     2631, 2651, 2632, 2653, 2633, 2647, 2647, 2647, 2647, 2647,
     2655, 2634, 2635, 2636, 2637, 2639, 2642, 2643, 2644, 2648,
     2648, 2648, 2648, 2648, 2656, 2657, 2658, 2659, 2649, 2660,
     2651, 2662, 2653, 2663, 2665, 2666, 2668, 2669, 2670, 2655,
     2671, 2672, 2673, 2674, 2675, 2676, 2677, 2679, 2683, 2685,
     2686, 2687, 2688, 2656, 2657, 2658, 2659, 2689, 2660, 2690,
     2662, 2694, 2663, 2665, 2666, 2668, 2669, 2670, 2695, 2671,
     2672, 2673, 2674, 2675, 2676, 2677, 2679, 2683, 2685, 2686,
     2687, 2688, 2696, 2697, 2698, 2699, 2689, 2701, 2690, 2702,

     2694, 2703, 2704, 2706, 2708, 2712, 2713, 2695, 2714, 2715,
     2716, 2717, 2718, 2719, 2721, 2722, 2723, 2724, 2725, 2726,
     2730, 2696, 2697, 2698, 2699, 2731, 2701, 2733, 2702, 2734,
     2703, 2704, 2706, 2708, 2712, 2713, 2735, 2714, 2715, 2716,
     2717, 2718, 2719, 2721, 2722, 2723, 2724, 2725, 2726, 2730,
     2736, 2737, 2738, 2739, 2731, 2741, 2733, 2744, 2734, 2745,
     2746, 2748, 2749, 2751, 2753, 2735, 2754, 2755, 2757, 2761,
     2762, 2763, 2765, 2766, 2767, 2771, 2774, 2775, 2778, 2736,
     2737, 2738, 2739, 2781, 2741, 2782, 2744, 2783, 2745, 2746,
     2748, 2749, 2751, 2753, 2785, 2754, 2755, 2757, 2761, 2762,

     2763, 2765, 2766, 2767, 2771, 2774, 2775, 2778, 2786, 2788,
     2790, 2791, 2781, 2794, 2782, 2795, 2783, 2796, 2798, 2800,
     2803, 2804, 2805, 2785, 2806, 2807, 2808, 2809, 2810, 2811,
     2813, 2815, 2818, 2819, 2821, 2823, 2824, 2786, 2788, 2790,
     2791, 2825, 2794, 2827, 2795, 2831, 2796, 2798, 2800, 2803,
     2804, 2805, 2832, 2806, 2807, 2808, 2809, 2810, 2811, 2813,
     2815, 2818, 2819, 2821, 2823, 2824, 2833, 2835, 2836, 2837,
     2825, 2841, 2827, 2844, 2831, 2845, 2848, 2851, 2852, 2853,
     2855, 2832, 2856, 2858, 2860, 2861, 2864, 2865, 2866, 2868,
     2870, 2873, 2874, 2875, 2876, 2833, 2835, 2836, 2837, 2877,

     2841, 2878, 2844, 2879, 2845, 2848, 2851, 2852, 2853, 2855,
     2880, 2856, 2858, 2860, 2861, 2864, 2865, 2866, 2868, 2870,
     2873, 2874, 2875, 2876, 2881, 2883, 2885, 2889, 2877, 2890,
     2878, 2892, 2879, 2888, 2888, 2888, 2888, 2888, 2894, 2880,
     2895, 2896, 2898, 2902, 2903, 2904, 2906, 2907, 2908, 2912,
     2915, 2916, 2919, 2881, 2883, 2885, 2889, 2922, 2890, 2923,
     2892, 2924, 2926, 2927, 2929, 2931, 2932, 2894, 2935, 2895,
     2896, 2898, 2902, 2903, 2904, 2906, 2907, 2908, 2912, 2915,
     2916, 2919, 2936, 2937, 2939, 2941, 2922, 2944, 2923, 2945,
     2924, 2926, 2927, 2929, 2931, 2932, 2946, 2935, 2947, 2948,

     2949, 2950, 2951, 2952, 2954, 2956, 2959, 2959, 2959, 2959,
     2959, 2936, 2937, 2939, 2941, 2961, 2944, 2962, 2945, 2960,
     2960, 2960, 2960, 2960, 2964, 2946, 2966, 2947, 2948, 2949,
     2950, 2951, 2952, 2954, 2956, 2967, 2968, 2970, 2974, 2975,
     2976, 2978, 2979, 2980, 2961, 2984, 2962, 2987, 2988, 2991,
     2994, 2995, 2996, 2964, 2998, 2966, 2999, 3001, 3003, 3004,
     3007, 3008, 3009, 3011, 2967, 2968, 2970, 2974, 2975, 2976,
     2978, 2979, 2980, 3013, 2984, 3016, 2987, 2988, 2991, 2994,
     2995, 2996, 3017, 2998, 3018, 2999, 3001, 3003, 3004, 3007,
     3008, 3009, 3011, 3019, 3020, 3021, 3022, 3023, 3024, 3026,

     3028, 3031, 3013, 3032, 3016, 3033, 3034, 3035,    0,    0,
     3041, 3017, 3042, 3018, 3043, 3044, 3046, 3047, 3048, 3049,
     3051,    0, 3019, 3020, 3021, 3022, 3023, 3024, 3026, 3028,
     3031, 3052, 3032, 3054, 3033, 3034, 3035, 3038, 3038, 3041,
     3055, 3042, 3056, 3043, 3044, 3046, 3047, 3048, 3049, 3051,
     3038, 3058, 3038, 3038, 3038, 3059, 3060, 3061, 3063, 3065,
     3052, 3061, 3054, 3066, 3067, 3068, 3038, 3038, 3070, 3055,
     3071, 3056, 3072, 3073, 3074, 3075, 3076, 3077, 3083, 3038,
     3058, 3038, 3038, 3038, 3059, 3060, 3061, 3063, 3065, 3084,
     3061, 3085, 3066, 3067, 3068, 3080, 3080, 3070, 3086, 3071,

     3088, 3072, 3073, 3074, 3075, 3076, 3077, 3083, 3080, 3089,
     3080, 3080, 3080, 3090, 3091, 3093, 3094, 3096, 3084, 3097,
     3085, 3098, 3100, 3101, 3080, 3080, 3102, 3086, 3103, 3088,
     3105, 3107, 3103, 3108, 3109, 3110, 3112, 3080, 3089, 3080,
     3080, 3080, 3090, 3091, 3093, 3094, 3096, 3113, 3097, 3114,
     3098, 3100, 3101, 3115, 3116, 3102, 3117, 3103, 3118, 3105,
     3107, 3103, 3108, 3109, 3110, 3112, 3119, 3125, 3126, 3127,
     3128, 3130, 3131, 3122, 3122, 3132, 3113, 3133, 3114, 3135,
     3136, 3138, 3115, 3116, 3139, 3117, 3122, 3118, 3122, 3122,
     3122, 3140, 3142, 3143, 3144, 3119, 3125, 3126, 3127, 3128,

     3130, 3131, 3122, 3122, 3132, 3147, 3133, 3145, 3135, 3136,
     3138, 3145, 3149, 3139, 3150, 3122, 3151, 3122, 3122, 3122,
     3140, 3142, 3143, 3144, 3152, 3154, 3155, 3156, 3157, 3158,
     3159, 3160, 3161,    0, 3147,    0, 3145,    0, 3167, 3168,
     3145, 3149, 3169, 3150, 3170, 3151, 3172, 3173, 3174, 3164,
     3164, 3175, 3177, 3152, 3154, 3155, 3156, 3157, 3158, 3159,
     3160, 3161, 3164, 3178, 3164, 3164, 3164, 3167, 3168, 3180,
     3181, 3169, 3182, 3170, 3184, 3172, 3173, 3174, 3164, 3164,
     3175, 3177, 3185, 3186, 3187, 3189, 3191, 3192, 3187, 3193,
     3194, 3164, 3178, 3164, 3164, 3164, 3196, 3197, 3180, 3181,

     3198, 3182, 3200, 3184, 3201, 3203, 3204, 3206, 3207, 3208,
     3209, 3185, 3186, 3187, 3189, 3191, 3192, 3187, 3193, 3194,
     3205, 3211, 3214, 3216, 3205, 3196, 3197, 3218, 3221, 3198,
     3226, 3200, 3227, 3201, 3203, 3204, 3206, 3207, 3208, 3209,
     3228, 3231, 3237, 3238, 3231, 3240, 3241, 3243, 3244, 3205,
     3211, 3214, 3216, 3205, 3242, 3245, 3218, 3221, 3242, 3226,
     3246, 3227, 3248, 3251, 3253, 3255, 3258, 3263, 3264, 3228,
     3231, 3237, 3238, 3231, 3240, 3241, 3243, 3244, 3265, 3268,
     3274, 3275, 3268, 3242, 3245, 3277, 3278, 3242, 3280, 3246,
     3281, 3248, 3251, 3253, 3255, 3258, 3263, 3264, 3279, 3282,

     3283, 3285, 3279, 3288, 3290, 3292, 3295, 3265, 3268, 3274,
     3275, 3268, 3300, 3301, 3277, 3278, 3302, 3280, 3305, 3281,
     3311, 3305, 3312, 3314, 3315, 3317, 3318, 3279, 3282, 3283,
     3285, 3279, 3288, 3290, 3292, 3295, 3316, 3319, 3320, 3322,
     3316, 3300, 3301, 3325, 3327, 3302, 3329, 3305, 3332, 3311,
     3305, 3312, 3314, 3315, 3317, 3318, 3337, 3338, 3339, 3342,
     3347, 3349, 3342, 3350, 3351, 3316, 3319, 3320, 3322, 3316,
     3352, 3353, 3325, 3327, 3354, 3329, 3355, 3332, 3356, 3358,
     3359, 3361, 3363, 3365, 3366, 3337, 3338, 3339, 3342, 3347,
     3349, 3342, 3350, 3351, 3367, 3369, 3370, 3371, 3372, 3352,

     3353, 3373, 3374, 3354, 3375, 3355, 3376, 3356, 3358, 3359,
     3361, 3363, 3365, 3366, 3378, 3379, 3381, 3383, 3385, 3386,
     3387, 3389, 3390, 3367, 3369, 3370, 3371, 3372, 3391, 3392,
     3373, 3374, 3393, 3375, 3394, 3376, 3395, 3396, 3398, 3399,
     3401, 3403, 3405, 3378, 3379, 3381, 3383, 3385, 3386, 3387,
     3389, 3390, 3406, 3407, 3409, 3410, 3411, 3391, 3392, 3412,
     3413, 3393, 3414, 3394, 3415, 3395, 3396, 3398, 3399, 3401,
     3403, 3405, 3416, 3418, 3419, 3421, 3423, 3425, 3426, 3427,
     3429, 3406, 3407, 3409, 3410, 3411, 3430, 3431, 3412, 3413,
     3432, 3414, 3433, 3415, 3434, 3435, 3437, 3438, 3440, 3441,

     3442, 3416, 3418, 3419, 3421, 3423, 3425, 3426, 3427, 3429,
     3444, 3445, 3446, 3447, 3448, 3430, 3431, 3449, 3450, 3432,
     3452, 3433, 3453, 3434, 3435, 3437, 3438, 3440, 3441, 3442,
     3455, 3456, 3457, 3459, 3460, 3461, 3462, 3463, 3464, 3444,
     3445, 3446, 3447, 3448, 3465, 3467, 3449, 3450, 3468, 3452,
     3470, 3453, 3471, 3472, 3474, 3475, 3476, 3477, 3478, 3455,
     3456, 3457, 3459, 3460, 3461, 3462, 3463, 3464, 3479, 3480,
     3482, 3483, 3485, 3465, 3467, 3486, 3487, 3468, 3488, 3470,
     3490, 3471, 3472, 3474, 3475, 3476, 3477, 3478, 3493, 3494,
     3498, 3499, 3500, 3502, 3505, 3506, 3510, 3479, 3480, 3482,

     3483, 3485, 3511, 3512, 3486, 3487, 3514, 3488, 3517, 3490,
     3518, 3522, 3523, 3524, 3526, 3529, 3530, 3493, 3494, 3498,
     3499, 3500, 3502, 3505, 3506, 3510, 3534, 3536, 3537, 3538,
     3539, 3511, 3512, 3542, 3543, 3514, 3544, 3517, 3545, 3518,
     3522, 3523, 3524, 3526, 3529, 3530, 3548, 3549, 3550, 3551,
     3554, 3555, 3556, 3557, 3559, 3534, 3536, 3537, 3538, 3539,
     3560, 3562, 3542, 3543, 3563, 3544, 3564, 3545, 3566, 3567,
     3568, 3570, 3571, 3572, 3574, 3548, 3549, 3550, 3551, 3554,
     3555, 3556, 3557, 3559, 3577, 3580, 3583, 3586, 3587, 3560,
     3562, 3588, 3589, 3563, 3590, 3564, 3591, 3566, 3567, 3568,

     3570, 3571, 3572, 3574, 3592, 3593, 3594, 3595, 3597, 3599,
     3601, 3603, 3604, 3577, 3580, 3583, 3586, 3587, 3605, 3606,
     3588, 3589, 3607, 3590, 3608, 3591, 3609, 3610, 3611, 3612,
     3613, 3614, 3615, 3592, 3593, 3594, 3595, 3597, 3599, 3601,
     3603, 3604, 3616, 3617, 3618, 3619, 3620, 3605, 3606, 3621,
     3622, 3607, 3623, 3608, 3624, 3609, 3610, 3611, 3612, 3613,
     3614, 3615, 3625, 3626, 3627, 3628, 3629, 3630, 3635, 3636,
     3637, 3616, 3617, 3618, 3619, 3620, 3638, 3639, 3621, 3622,
     3640, 3623, 3641, 3624, 3642, 3643, 3644, 3645, 3646, 3647,
     3648, 3625, 3626, 3627, 3628, 3629, 3630, 3635, 3636, 3637,

     3649, 3650, 3651, 3652, 3653, 3638, 3639, 3654,    0, 3640,
        0, 3641,    0, 3642, 3643, 3644, 3645, 3646, 3647, 3648,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3649,
     3650, 3651, 3652, 3653,    0,    0, 3654, 3660,    0, 3660,
     3661,    0, 3661, 3662, 3662, 3662, 3662, 3662, 3663,    0,
     3663, 3663, 3663, 3663, 3663, 3663, 3664,    0,    0, 3664,
     3664, 3664,    0, 3664, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3666,
     3667,    0, 3667, 3667, 3667, 3667, 3667, 3667, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3660 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3659 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOTH);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEADING);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRAILING);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIM);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USAGE);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 212:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 213:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 214:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 220:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 221:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 222:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 223:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 224:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 225:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 226:
case 227:
case 228:
case 229:
case 230:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 231:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 232:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 233:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 234:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 235:
case 236:
case 237:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 238:
case 239:
case 240:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 241:
case 242:
case 243:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 244:
case 245:
case 246:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 247:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 249:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 250:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 251:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 253:
/* rule 253 can match eol */
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 255:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 256:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 259:
YY_RULE_SETUP
{}
	YY_BREAK
case 260:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 261:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 262:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3660 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3660 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3659);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8StringBuffer sBuffer (256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (delim);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (ch);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8StringBuffer sBuffer(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer.charAt(i)) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									{
									if (checkForSign)
										{
										if (sBuffer.charAt(i) == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer.makeStringAndClear(), isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(ch);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(ch);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

