#line 2 "ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif


#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif


#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif


#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif


#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif


#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif


#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif


#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif


#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif


#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif


#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif


#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif


#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif


#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif


#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif


#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif


#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif


#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif


#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif


#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif


#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif


#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif


#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif


#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif


#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif


#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif


#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif


#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif


#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif



#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif


#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif



#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif





#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif


#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif


#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif


#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 148
#define YY_END_OF_BUFFER 149
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1572] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      143,  143,  149,  147,  145,  144,  147,   93,  108,  105,
      136,  108,   94,   96,   95,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  104,  103,  134,  108,
      110,  110,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  137,  135,  138,  108,  108,  118,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  108,  118,  147,  143,  143,  143,  143,  141,
       93,  108,  105,  108,  108,  108,   94,   96,   95,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      142,  104,  103,  145,  100,    0,  102,  106,   97,   99,
       98,  107,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   50,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   65,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  101,  112,  113,  110,
        0,    0,  109,  109,  109,    4,  109,  109,  109,  109,
      109,  109,   12,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,   43,   50,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,   63,   65,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  133,  123,  133,
      133,  133,  118,  133,  117,  117,  117,    4,  117,  117,

      117,  117,  117,  117,   12,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,   43,   50,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,   63,
       65,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  129,
      133,  133,  133,  118,  133,    0,  139,  143,  143,  100,
      143,  102,  106,   97,   99,   98,  107,  143,  143,    4,
      143,  143,  143,  143,  143,  143,   12,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,   43,
       50,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,   63,   65,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  101,    0,  146,    1,    2,    3,    5,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   29,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,   42,
        0,    0,   46,    0,    0,    0,    0,    0,    0,   57,
       58,    0,   60,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   74,    0,    0,   77,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,    0,    0,  114,  111,    1,    2,    3,    5,    6,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,   29,  109,
      109,  109,  109,  109,  109,   36,  109,  109,  109,  109,
       42,  109,  109,   46,  109,  109,  109,  109,  109,  109,
       57,   58,  109,   60,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,   74,  109,  109,   77,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

        0,  126,  133,  121,  133,  118,    0,  124,    1,    2,
        3,    5,    6,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   29,  117,  117,  117,  117,  117,  117,   36,  117,
      117,  117,  117,   42,  117,  117,   46,  117,  117,  117,
      117,  117,  117,   57,   58,  117,   60,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   74,  117,
      117,   77,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,    0,  132,  127,  133,  133,  118,    0,
      130,  139,    0,  139,  143,  143,    1,    2,    3,    5,

        6,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,   29,
      143,  143,  143,  143,  143,  143,   36,  143,  143,  143,
      143,   42,  143,  143,   46,  143,  143,  143,  143,  143,
      143,   57,   58,  143,   60,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   74,  143,  143,   77,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,    0,    0,    0,   10,    0,   13,   14,    0,    0,
        0,    0,   21,    0,    0,   24,    0,    0,    0,   28,
        0,    0,    0,    0,    0,    0,    0,   38,   39,    0,

        0,    0,    0,    0,    0,   49,   51,   52,   53,    0,
       55,    0,    0,   61,    0,   64,    0,    0,    0,   69,
        0,    0,    0,    0,   75,    0,   78,   79,   81,    0,
        0,    0,    0,    0,    0,    0,   90,    0,   92,    0,
      116,    0,  115,  109,  109,  109,   10,  109,   13,   14,
      109,  109,  109,  109,   21,  109,  109,   24,  109,  109,
      109,   28,  109,  109,  109,  109,  109,  109,  109,   38,
       39,  109,  109,  109,  109,  109,  109,   49,   51,   52,
       53,  109,   55,  109,  109,   61,  109,   64,  109,  109,
      109,   69,  109,  109,  109,  109,   75,  109,   78,   79,

       81,  109,  109,  109,  109,  109,  109,  109,   90,  109,
       92,  126,  133,    0,  125,  118,  124,  117,  117,  117,
       10,  117,   13,   14,  117,  117,  117,  117,   21,  117,
      117,   24,  117,  117,  117,   28,  117,  117,  117,  117,
      117,  117,  117,   38,   39,  117,  117,  117,  117,  117,
      117,   49,   51,   52,   53,  117,   55,  117,  117,   61,
      117,   64,  117,  117,  117,   69,  117,  117,  117,  117,
       75,  117,   78,   79,   81,  117,  117,  117,  117,  117,
      117,  117,   90,  117,   92,  132,    0,  131,  133,  118,
      130,    0,  139,  143,  143,  143,   10,  143,   13,   14,

      143,  143,  143,  143,   21,  143,  143,   24,  143,  143,
      143,   28,  143,  143,  143,  143,  143,  143,  143,   38,
       39,  143,  143,  143,  143,  143,  143,   49,   51,   52,
       53,  143,   55,  143,  143,   61,  143,   64,  143,  143,
      143,   69,  143,  143,  143,  143,   75,  143,   78,   79,
       81,  143,  143,  143,  143,  143,  143,  143,   90,  143,
       92,    0,    0,    0,    0,    0,   16,   17,    0,    0,
        0,    0,    0,    0,    0,   31,    0,    0,   34,   35,
        0,   40,    0,   44,    0,   47,    0,    0,   54,   56,
        0,    0,   66,   67,    0,    0,   71,    0,    0,    0,

        0,   82,    0,    0,    0,   86,   87,    0,   91,  109,
      109,  109,  109,  109,   16,   17,  109,  109,  109,  109,
      109,  109,  109,   31,  109,  109,   34,   35,  109,   40,
      109,   44,  109,   47,  109,  109,   54,   56,  109,  109,
       66,   67,  109,  109,   71,  109,  109,  109,  109,   82,
      109,  109,  109,   86,   87,  109,   91,  119,  125,  117,
      117,  117,  117,  117,   16,   17,  117,  117,  117,  117,
      117,  117,  117,   31,  117,  117,   34,   35,  117,   40,
      117,   44,  117,   47,  117,  117,   54,   56,  117,  117,
       66,   67,  117,  117,   71,  117,  117,  117,  117,   82,

      117,  117,  117,   86,   87,  117,   91,  131,  120,    0,
      140,  143,  143,  143,  143,  143,   16,   17,  143,  143,
      143,  143,  143,  143,  143,   31,  143,  143,   34,   35,
      143,   40,  143,   44,  143,   47,  143,  143,   54,   56,
      143,  143,   66,   67,  143,  143,   71,  143,  143,  143,
      143,   82,  143,  143,  143,   86,   87,  143,   91,    0,
        0,    9,    0,   15,    0,    0,   23,    0,   26,    0,
       30,   32,   33,    0,   41,   45,    0,    0,    0,   62,
       68,    0,    0,   73,   76,    0,   83,    0,   85,   88,
        0,  109,  109,    9,  109,   15,  109,  109,   23,  109,

       26,  109,   30,   32,   33,  109,   41,   45,  109,  109,
      109,   62,   68,  109,  109,   73,   76,  109,   83,  109,
       85,   88,  109,  133,  117,  117,    9,  117,   15,  117,
      117,   23,  117,   26,  117,   30,   32,   33,  117,   41,
       45,  117,  117,  117,   62,   68,  117,  117,   73,   76,
      117,   83,  117,   85,   88,  117,  133,  140,  140,  143,
      143,    9,  143,   15,  143,  143,   23,  143,   26,  143,
       30,   32,   33,  143,   41,   45,  143,  143,  143,   62,
       68,  143,  143,   73,   76,  143,   83,  143,   85,   88,
      143,    0,    8,   11,    0,   22,    0,    0,   37,   46,

        0,   59,    0,    0,    0,   84,   89,  109,    8,   11,
      109,   22,  109,  109,   37,   46,  109,   59,  109,  109,
      109,   84,   89,  122,  117,    8,   11,  117,   22,  117,
      117,   37,   46,  117,   59,  117,  117,  117,   84,   89,
      128,  140,  143,    8,   11,  143,   22,  143,  143,   37,
       46,  143,   59,  143,  143,  143,   84,   89,    7,    0,
       25,    0,    0,    0,   72,    0,    7,  109,   25,  109,
      109,  109,   72,  109,    7,  117,   25,  117,  117,  117,
       72,  117,    7,  143,   25,  143,  143,  143,   72,  143,
        0,    0,    0,   48,   70,   80,  109,  109,  109,   48,

       70,   80,  117,  117,  117,   48,   70,   80,  143,  143,
      143,   48,   70,   80,    0,    0,    0,  109,  109,  109,
      117,  117,  117,  143,  143,  143,    0,    0,    0,  109,
      109,  109,  117,  117,  117,  143,  143,  143,   18,   19,
       27,   18,   19,   27,   18,   19,   27,   18,   19,   27,
        0,  109,  117,  143,    0,  109,  117,  143,    0,  109,
      117,  143,    0,  109,  117,  143,   20,   20,   20,   20,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1581] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  537, 3588,  359, 3588,  479, 3588, 3588, 3588,
     3588,  346,  341, 3588,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  398,  410,  401,  440,  350,
      438,  444,  448,  436,  459,  454,  419, 3588, 3588,  475,
      505,  510,  494,  513,  506,  525,  558,  563,  462,  511,
      557,  502,    0,  574,  522,  573,  608,  501,  587,  615,
      619,  625,  519,  578, 3588, 3588, 3588,    0,  682,  689,
      674,  694,  690,  738,  730,  745,  515,  567,  683,  604,
        0,  736,  623,  735,  782,  615,  782,  789,  790,  799,

      633,  663,  856,  863,  870,    0,  393,    0,  432, 3588,
        0,    0,    0,    0,  375, 3588,  648,    0,  422,  855,
      870,  871,  879,  913,  918,  620,  639,  792,  635,  929,
      869,  925,  964,  642,  942,  969,  934,  977,  684,  721,
     3588,  371,    0,  495, 3588,  448, 3588, 3588, 3588, 3588,
     3588, 3588,  686,  789,  752,  754,  799,  785,  793,  797,
      809, 3588,  854,  870,  861,  863,  873,  982,  910,  910,
      931,  958,  979,  984,  987,  995,  983,  982,  982,  987,
      993,  993,  987, 1004, 1021, 3588, 1006, 1022, 1032, 1018,
     1022, 1022, 1027, 1028, 1037, 1044, 1039, 1048, 1033, 1053,

     1055, 1048, 1047, 1048, 1049, 1045, 1053, 1062, 1060, 1065,
     1089, 1086, 1084, 1087, 1089, 1081, 3588, 1115, 1119, 1145,
     1153,    0,    0, 1091, 1100, 1103, 1119, 1128, 1122, 1130,
     1136, 1137,    0, 1137, 1144, 1143, 1141, 1141, 1156, 1144,
     1143, 1147, 1148, 1165, 1167, 1167, 1173, 1162, 1162, 1160,
     1168, 1172, 1174, 1178, 1196, 1195,    0, 1199, 1204, 1206,
     1202, 1200, 1207, 1202, 1203, 1213, 1220, 1215, 1224, 1210,
     1231, 1232, 1227, 1224, 1246, 1227, 1223, 1229, 1242, 1247,
     1246, 1263, 1264, 1264, 1263, 1272, 1258,    0, 1319, 1298,
     1290, 1323, 1338, 1346,    0, 1267, 1317, 1277, 1287, 1316,

     1300, 1308, 1310, 1311,    0, 1316, 1324, 1329, 1328, 1327,
     1346, 1337, 1338, 1341, 1342, 1358, 1360, 1362, 1374, 1356,
     1354, 1352, 1363, 1367, 1365, 1360, 1378, 1381,    0, 1377,
     1387, 1391, 1389, 1390, 1391, 1396, 1397, 1406, 1413, 1408,
     1417, 1403, 1424, 1425, 1420, 1423, 1424, 1424, 1420, 1427,
     1436, 1429, 1430, 1449, 1449, 1450, 1450, 1456, 1443, 1491,
     1484, 1506, 1510, 1521, 1529, 1514, 1540,    0,  676,    0,
     1551,    0,    0,    0,    0,    0,    0, 1508, 1523, 1527,
     1530, 1535, 1519, 1527, 1527, 1528,    0, 1525, 1532, 1531,
     1532, 1532, 1557, 1535, 1536, 1539, 1541, 1557, 1559, 1559,

     1585, 1568, 1569, 1567, 1580, 1584, 1582, 1577, 1594, 1587,
        0, 1593, 1597, 1597, 1590, 1591, 1598, 1596, 1598, 1607,
     1614, 1609, 1618, 1607, 1633, 1651, 1631, 1630, 1641, 1630,
     1628, 1642, 1652, 1645, 1638, 1651, 1660, 1656, 1656, 1661,
     1649,    0,  440, 3588, 3588, 3588, 3588, 3588, 3588, 1659,
     1650, 1675, 1675, 1666, 1680, 1666, 1666, 1673, 1678, 1696,
     1703, 1705, 1708, 1692, 1711, 1698, 1711, 3588, 1716, 1700,
     1714, 1701, 1703, 1722, 1701, 1713, 1715, 1707, 1722, 3588,
     1727, 1729, 1759, 1722, 1717, 1733, 1734, 1743, 1755, 3588,
     3588, 1738, 3588, 1750, 1749, 1744, 1765, 1766, 1766, 1763,

     1755, 1769, 1766, 1775, 3588, 1776, 1773, 3588, 1769, 1779,
     1780, 1775, 1772, 1788, 1780, 1774, 1793, 1802, 1793, 1839,
     1843, 1862, 1847, 1866,    0,    0,    0,    0,    0,    0,
     1806, 1799, 1842, 1842, 1835, 1848, 1849, 1849, 1845, 1847,
     1861, 1866, 1864, 1867, 1851, 1872, 1858, 1873,    0, 1878,
     1862, 1876, 1864, 1865, 1884, 1863, 1874, 1876, 1868, 1881,
        0, 1896, 1897, 1927, 1891, 1886, 1906, 1911, 1914, 1920,
        0,    0, 1903,    0, 1913, 1907, 1902, 1923, 1924, 1926,
     1924, 1916, 1930, 1927, 1936,    0, 1938, 1935,    0, 1931,
     1941, 1942, 1962, 1937, 1958, 1946, 1942, 1961, 1964, 1961,

     1991, 2002, 2007, 2020, 2028, 2035, 2039, 2043,    0,    0,
        0,    0,    0, 1970, 1967, 2016, 2037, 2029, 2037, 2030,
     2030, 2026, 2029, 2043, 2048, 2045, 2048, 2032, 2051, 2038,
     2051,    0, 2057, 2041, 2055, 2042, 2043, 2062, 2041, 2052,
     2054, 2046, 2066,    0, 2078, 2092, 2103, 2085, 2080, 2096,
     2093, 2096, 2102,    0,    0, 2085,    0, 2095, 2090, 2085,
     2106, 2108, 2107, 2103, 2095, 2109, 2107, 2115,    0, 2116,
     2113,    0, 2109, 2119, 2120, 2140, 2113, 2132, 2127, 2137,
     2156, 2146, 2153, 2173, 2179, 2186, 2204, 2208, 2216, 2220,
     2224, 2244, 2231, 2249, 2255,    0,    0,    0,    0,    0,

        0, 2164, 2154, 2227, 2227, 2218, 2226, 2221, 2231, 2228,
     2230, 2244, 2251, 2249, 2253, 2241, 2260, 2247, 2260,    0,
     2265, 2249, 2263, 2250, 2251, 2270, 2249, 2260, 2267, 2259,
     2275,    0, 2281, 2282, 2309, 2274, 2269, 2287, 2294, 2298,
     2303,    0,    0, 2286,    0, 2298, 2292, 2287, 2314, 2315,
     2315, 2311, 2304, 2318, 2315, 2323,    0, 2324, 2321,    0,
     2317, 2328, 2332, 2327, 2324, 2344, 2332, 2326, 2347, 2347,
     2355, 2341, 2363, 2351, 3588, 2365, 3588, 3588, 2363, 2357,
     2359, 2375, 3588, 2360, 2362, 3588, 2374, 2372, 2373, 3588,
     2370, 2362, 2372, 2369, 2386, 2375, 2395, 3588, 3588, 2384,

     2388, 2385, 2386,  420, 2401, 3588, 3588, 3588, 3588, 2385,
     3588, 2413, 2404, 3588, 2418, 3588, 2408, 2409, 2415, 3588,
     2412, 2415, 2434, 2435, 3588, 2425, 3588, 2421, 3588, 2427,
     2421, 2428, 2424, 2438, 2441, 2439, 3588, 2444, 3588, 2468,
     2487, 2491, 2495, 2443, 2472, 2473,    0, 2487,    0,    0,
     2484, 2474, 2477, 2492,    0, 2477, 2479,    0, 2491, 2489,
     2490,    0, 2487, 2479, 2489, 2487, 2503, 2489, 2509,    0,
        0, 2495, 2498, 2495, 2496,  376, 2517,    0,    0,    0,
        0, 2495,    0, 2508, 2499,    0, 2513,    0, 2501, 2531,
     2537,    0, 2533, 2532, 2552, 2552,    0, 2542,    0, 2538,

        0, 2544, 2538, 2545, 2541, 2555, 2558, 2557,    0, 2561,
        0, 2575, 2579, 2604, 2608, 2613, 2617, 2570, 2608, 2596,
        0, 2610,    0,    0, 2607, 2597, 2600, 2615,    0, 2600,
     2603,    0, 2615, 2613, 2614,    0, 2611, 2603, 2613, 2610,
     2626, 2612, 2632,    0,    0, 2618, 2621, 2618, 2619,  372,
     2633,    0,    0,    0,    0, 2618,    0, 2631, 2623,    0,
     2666,    0, 2654, 2655, 2661,    0, 2657, 2656, 2675, 2675,
        0, 2665,    0, 2662,    0, 2668, 2662, 2669, 2665, 2679,
     2682, 2680,    0, 2684,    0, 2698, 2702, 2727, 2731, 2738,
     2742, 2746, 2764, 2676, 2739, 2727,    0, 2741,    0,    0,

     2738, 2728, 2730, 2745,    0, 2730, 2732,    0, 2744, 2742,
     2743,    0, 2744, 2736, 2746, 2743, 2759, 2745, 2765,    0,
        0, 2751, 2754, 2751, 2752,  366, 2793,    0,    0,    0,
        0, 2765,    0, 2778, 2769,    0, 2783,    0, 2783, 2784,
     2790,    0, 2786, 2785, 2804, 2804,    0, 2794,    0, 2790,
        0, 2796, 2791, 2798, 2798, 2812, 2815, 2813,    0, 2817,
        0, 2822, 2819, 2800, 2825, 2807, 3588, 3588, 2814, 2831,
     2839, 2831, 2841, 2843, 2854, 3588, 2840, 2842, 3588, 3588,
     2844, 3588, 2856, 3588, 2844, 3588, 2860, 2847, 3588, 3588,
     2866, 2848, 3588, 3588, 2868, 2851, 3588, 2870, 2856, 2870,

     2858, 3588, 2874, 2857, 2876, 3588, 2863, 2882, 3588, 2883,
     2880, 2861, 2900, 2882,    0,    0, 2889, 2892, 2911, 2903,
     2913, 2904, 2915,    0, 2901, 2903,    0,    0, 2905,    0,
     2917,    0, 2905,    0, 2921, 2908,    0,    0, 2927, 2909,
        0,    0, 2933, 2916,    0, 2935, 2917, 2931, 2919,    0,
     2935, 2918, 2937,    0, 2924, 2943,    0,  721, 2967, 2973,
     2970, 2951, 2976, 2958,    0,    0, 2965, 2968, 2976, 2968,
     2978, 2969, 2980,    0, 2966, 2968,    0,    0, 2970,    0,
     2982,    0, 2970,    0, 2986, 2973,    0,    0, 2992, 2974,
        0,    0, 2994, 2977,    0, 2996, 2978, 2992, 2980,    0,

     2996, 2979, 3027,    0, 3014, 3033,    0, 3043,  778, 3047,
     3051, 3046, 3043, 3024, 3049, 3031,    0,    0, 3038, 3041,
     3049, 3041, 3051, 3042, 3053,    0, 3039, 3041,    0,    0,
     3046,    0, 3058,    0, 3046,    0, 3062, 3049,    0,    0,
     3068, 3050,    0,    0, 3070, 3053,    0, 3072, 3054, 3068,
     3070,    0, 3086, 3069, 3100,    0, 3087, 3106,    0, 3090,
     3095, 3588, 3096, 3588, 3091, 3092, 3588, 3110, 3588, 3098,
     3588, 3588, 3588, 3111, 3588, 3588, 3098, 3112, 3106, 3588,
     3588, 3113, 3120, 3588, 3588, 3123, 3588, 3111, 3588, 3588,
     3108, 3109, 3114,    0, 3115,    0, 3110, 3111,    0, 3129,

        0, 3117,    0,    0,    0, 3144,    0,    0, 3131, 3145,
     3151,    0,    0, 3155, 3162,    0,    0, 3165,    0, 3153,
        0,    0, 3150, 3177, 3155, 3160,    0, 3161,    0, 3156,
     3160,    0, 3178,    0, 3166,    0,    0,    0, 3179,    0,
        0, 3166, 3180, 3174,    0,    0, 3178, 3185,    0,    0,
     3188,    0, 3176,    0,    0, 3173, 3206, 3229, 3233, 3188,
     3193,    0, 3194,    0, 3209, 3210,    0, 3228,    0, 3216,
        0,    0,    0, 3229,    0,    0, 3216, 3233, 3227,    0,
        0, 3231, 3238,    0,    0, 3241,    0, 3229,    0,    0,
     3226, 3241, 3588, 3588,  315, 3588, 3226, 3227, 3588, 3588,

     3245, 3588, 3227, 3239, 3238, 3588, 3588, 3248,    0,    0,
      218,    0, 3233, 3234,    0,    0, 3252,    0, 3234, 3246,
     3251,    0,    0, 3295, 3261,    0,    0,  211,    0, 3246,
     3271,    0,    0, 3289,    0, 3274, 3286, 3285,    0,    0,
     3307, 3311, 3303,    0,    0,  204,    0, 3288, 3289,    0,
        0, 3307,    0, 3289, 3301, 3300,    0,    0, 3588, 3310,
     3588, 3306, 3296, 3312, 3588, 3302,    0, 3315,    0, 3313,
     3303, 3319,    0, 3312,    0, 3329,    0, 3320, 3311, 3327,
        0, 3318,    0, 3346,    0, 3345, 3335, 3351,    0, 3349,
     3366, 3359, 3354, 3588, 3588, 3588, 3369, 3362, 3357,    0,

        0,    0, 3372, 3365, 3360,    0,    0,    0, 3375, 3368,
     3365,    0,    0,    0, 3361, 3369, 3372, 3367, 3375, 3375,
     3370, 3378, 3378, 3373, 3394, 3394, 3407, 3408, 3395, 3418,
     3419, 3406, 3421, 3422, 3409, 3424, 3425, 3412, 3588, 3413,
     3588,    0, 3414,    0,    0, 3415,    0,    0, 3416,    0,
     3418, 3419, 3420, 3424, 3444, 3445, 3446, 3447, 3436, 3437,
     3438, 3452, 3450, 3454, 3455, 3456, 3588,    0,    0,    0,
     3588, 3522, 3528, 3533, 3542, 3551, 3560,  245, 3569, 3578
    } ;

static const flex_int16_t yy_def[1581] =
    {   0,
     1571,    1, 1571,    3, 1571,    5,    5,    5,    5,    5,
     1571,   11, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1571, 1571, 1571, 1573, 1573, 1573,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1573, 1573, 1575, 1576, 1576, 1576, 1576, 1571,
     1576, 1576, 1576, 1576, 1576, 1571, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1571, 1576, 1576, 1571, 1571, 1577, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1578, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1573,
     1573, 1573, 1573, 1573, 1573, 1575, 1575, 1576, 1576, 1576,
     1579, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1577, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1578, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1571, 1573, 1573, 1573, 1573, 1573, 1571, 1573, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1571, 1573, 1573, 1573, 1573, 1573, 1571,
     1573, 1575, 1571, 1575, 1579, 1576, 1576, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1571, 1573, 1571, 1573, 1573, 1571, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1571, 1571, 1573, 1573, 1573,
     1571, 1580, 1575, 1576, 1576, 1576, 1576, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1571, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1571, 1573, 1580,
     1580, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1573, 1580, 1580, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1573, 1580, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572,

     1572, 1572, 1574, 1574, 1574, 1574, 1574, 1574, 1576, 1576,
     1576, 1576, 1576, 1576, 1571, 1571, 1571, 1572, 1572, 1572,
     1574, 1574, 1574, 1576, 1576, 1576, 1571, 1571, 1571, 1572,
     1572, 1572, 1574, 1574, 1574, 1576, 1576, 1576, 1571, 1571,
     1571, 1572, 1572, 1572, 1574, 1574, 1574, 1576, 1576, 1576,
     1571, 1572, 1574, 1576, 1571, 1572, 1574, 1576, 1571, 1572,
     1574, 1576, 1571, 1572, 1574, 1576, 1571, 1572, 1574, 1576,
        0, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571
    } ;

static const flex_int16_t yy_nxt[3672] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      525,   78,  104,  104,  104,  104,  103, 1484,   78,  104,
      104,  104,  104,   19, 1476,   19,  105,  105,  105,  105,
       19, 1468,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1460,  153,
      147,  154,  163,  157,  167,  182,  155,  158,  168,  156,
      183,  159,  169,  187,  160, 1236,  164,  161,  170,  165,
      371, 1184,  166,  200,  369, 1134,  144,  162,  153,  372,

      154,  163,  157,  167,  182,  155,  158,  168,  156,  183,
      159,  169,  187,  160,  171,  164,  161,  170,  165,  184,
      177,  166,  200,  172,  185,  173,  162,  193,  188,  186,
      174,  178,  189,  175,  179,  176,  191,  180,  190, 1086,
      181,  194,  444,  171,  192,  376,  377,  195,  184,  177,
      444,  442,  172,  185,  173,  370,  193,  188,  186,  174,
      178,  189,  175,  179,  176,  191,  180,  190,  201,  181,
      194,  196,  202,  192,  204,  211,  195,  212,  203,  197,
      213,  208,  209,  198,  205,  214,  199,  215,  216,  206,
      207,  210,  218,  218,  218,  218,  144,  201,  144,  217,

      196,  202,  145,  204,  211,  253,  212,  203,  197,  213,
      208,  209,  198,  205,  214,  199,  215,  216,  206,  207,
      210,  219,  220,  220,  220,  220,  219,  220,  220,  220,
      220,  224,  234,  225,  253,  221, 1571,  254,  226,  228,
      221,  227,  258,  229,  271,  285,  235,  230,  262,  236,
      231,  238,  237,  232,  222,  239,  263, 1571,  325,  240,
      224,  234,  225,  233,  221,  241,  254,  226,  228,  221,
      227,  258,  229,  271,  285,  235,  230,  262,  236,  231,
      238,  237,  232,  222,  239,  263,  242,  325,  240,  248,
     1571,  255,  233,  326,  241,  243,  256,  244, 1571,  264,

      249,  257,  245,  250,  259,  246,  251,  247,  260,  252,
     1571,  286,  287,  265,  261,  242, 1571,  272,  248,  266,
      255,  273,  326, 1571,  243,  256,  244,  274,  264,  249,
      257,  245,  250,  259,  246,  251,  247,  260,  252,  267,
      286,  287,  265,  261,  330,  275,  272,  268,  266,  334,
      273,  269,  279,  280,  270,  276,  274,  335,  343,  357,
      277,  278,  281,  407,  282,  408,  283, 1571,  267,  284,
      373,  374,  375,  330,  275,  412,  268,  369,  334,  144,
      269,  279,  280,  270,  276,  425,  335,  343,  357,  277,
      278,  281,  407,  282,  408,  283,  358,  359,  284,  289,

      289,  289,  289,  291,  412,  292,  293,  293,  293,  293,
      439,  296,  290,  297,  425, 1571,  306,  327,  298,  294,
      300,  299,  328,  445,  301,  358,  359,  329,  302, 1571,
      307,  303, 1571,  308,  304,  291,  309, 1324, 1571,  439,
      296,  290,  297, 1571,  305,  306,  327,  298,  294,  300,
      299,  328,  445,  301,  440,  441,  329,  302,  314,  307,
      303,  336,  308,  304,  310,  309,  331,  315,  311,  316,
      332,  320,  312,  305,  317,  337,  333,  318,  313,  319,
      448,  338,  321,  440,  441,  322,  449,  314,  323, 1571,
      336,  324, 1357,  310,  363,  331,  315,  311,  316,  332,

      320,  312, 1571,  317,  337,  333,  318,  313,  319,  448,
      338,  321,  344,  339,  322,  449,  345,  323,  446,  347,
      324,  340,  346,  351,  352,  341,  409,  450,  342,  348,
      451,  410,  452,  353,  349,  350,  411,  453,  354,  447,
      355,  344,  339,  356, 1571,  345, 1571,  446,  347,  454,
      340,  346,  351,  352,  341,  409,  450,  342,  348,  451,
      410,  452,  353,  349,  350,  411,  453,  354,  447,  355,
     1571, 1571,  356,  360,  360,  360,  360,  362,  454,  363,
      364,  364,  364,  364, 1571, 1571,  361,  367,  367,  367,
      367, 1571,  378,  365,  379,  416,  382,  388,  455,  380,

      383,  458,  381,  417,  384,  392,  459,  385,  456,  393,
      386,  389, 1571,  394,  390,  361,  457,  391,  460,  395,
      387,  378,  365,  379,  416,  382,  388,  455,  380,  383,
      458,  381,  417,  384,  392,  459,  385,  456,  393,  386,
      389,  396,  394,  390,  402,  457,  391,  460,  395,  387,
      397,  418,  398, 1571,  464,  403,  465,  399,  404,  413,
      400,  405,  401,  414,  406,  419, 1571,  433,  434,  415,
      396,  420,  426,  402, 1571,  466,  427,  435, 1571,  397,
      418,  398,  428,  464,  403,  465,  399,  404,  413,  400,
      405,  401,  414,  406,  419,  421,  433,  434,  415,  429,

      420,  426,  467,  422,  466,  427,  435,  423,  468,  430,
      424,  428,  469,  461,  431,  432,  436,  470,  437,  462,
      473,  438,  474,  471,  421,  475,  463,  476,  429,  472,
      477,  467,  422,  478,  479,  480,  423,  468,  430,  424,
      484,  469,  461,  431,  432,  436,  470,  437,  462,  473,
      438,  474,  471,  485,  475,  463,  476,  488,  472,  477,
      481,  491,  478,  479,  480,  482,  483,  489,  486,  484,
      487,  490,  492,  493,  494,  495,  496,  497,  498,  499,
      502,  500,  485,  501,  503,  504,  488,  506,  507,  481,
      491,  508,  509,  505,  482,  483,  489,  486,  510,  487,

      490,  492,  493,  494,  495,  496,  497,  498,  499,  502,
      500,  511,  501,  503,  504,  514,  506,  507,  515,  518,
      508,  509,  505,  512,  516,  513,  519,  510,  526,  527,
      517,  529,  218,  218,  218,  218,  521,  521,  521,  521,
      511, 1571, 1571, 1571,  514,  520, 1571,  515,  518,  522,
      528,  530,  512,  516,  513,  519,  531,  526,  527,  517,
      529,  219,  220,  220,  220,  220,  523,  532,  523,  533,
      524,  524,  524,  524,  520,  221,  534,  535,  522,  528,
      530,  536,  537,  539,  540,  531,  541,  542,  545,  546,
      538,  547,  548,  543,  549,  550,  532,  551,  533,  554,

      544,  552,  555,  556,  221,  534,  535,  553,  557,  558,
      536,  537,  539,  540,  559,  541,  542,  545,  546,  538,
      547,  548,  543,  549,  550,  560,  551,  561,  554,  544,
      552,  555,  556,  565,  562,  566,  553,  557,  558,  563,
      564,  569,  567,  559,  568,  570,  572,  573,  574,  571,
      575,  576,  577,  578,  560,  579,  561,  580,  581,  583,
      582,  584,  565,  562,  566,  587,  588,  589,  563,  564,
      569,  567,  590,  568,  570,  572,  573,  574,  571,  575,
      576,  577,  578,  585,  579,  591,  580,  581,  583,  582,
      584,  586,  592,  595,  587,  588,  589,  593,  596,  594,

      597,  590,  599,  600,  609,  612,  598,  603,  603,  603,
      603,  601,  585,  601,  591,  602,  602,  602,  602,  613,
      586,  592,  595, 1571, 1571, 1571,  593,  596,  594,  597,
     1571,  599,  600,  609,  612,  598,  289,  289,  289,  289,
      604,  604,  604,  604,  614,  615,  610,  616,  613,  290,
      617,  618,  291,  605,  292,  606,  606,  606,  606,  607,
      619,  607,  620,  608,  608,  608,  608,  611,  294,  622,
      621,  623,  624,  614,  615,  610,  616,  625,  290,  617,
      618,  628,  605,  626,  629,  630,  631,  632,  633,  619,
      627,  620,  634,  637,  638,  639,  611,  294,  622,  621,

      623,  624,  635,  640,  641,  642,  625,  643,  636,  644,
      628,  648,  626,  629,  630,  631,  632,  633,  649,  627,
      645,  634,  637,  638,  639,  646,  647,  650,  652,  651,
      655,  635,  640,  641,  642,  653,  643,  636,  644,  654,
      648,  656,  657,  658,  659,  660,  661,  649,  662,  645,
      663,  664,  666,  665,  646,  647,  650,  652,  651,  655,
      667,  668,  670,  671,  653,  672,  673,  674,  654,  669,
      656,  657,  658,  659,  660,  661,  675,  662,  678,  663,
      664,  666,  665,  676,  679,  677,  682,  680,  683,  667,
      668,  670,  671,  681,  672,  673,  674,  684,  669,  684,

     1571,  685,  685,  685,  685,  675, 1571,  678,  360,  360,
      360,  360,  676,  679,  677,  682,  680,  683, 1571, 1571,
     1571,  361,  681,  686,  686,  686,  686,  688,  688,  688,
      688,  692,  692,  692,  692,  362,  687,  363,  689,  689,
      689,  689,  690,  693,  690,  697,  691,  691,  691,  691,
      361,  365,  698,  696,  443,  700,  443,  694,  694,  694,
      694,  443,  701,  702,  703,  687,  704,  705,  706,  707,
      708,  710,  443,  699,  697,  711,  443,  712,  709,  716,
      365,  698,  717,  718,  700,  719,  720,  721,  713,  722,
     1571,  701,  702,  703,  714,  704,  705,  706,  707,  708,

      710,  715,  699,  443,  711,  725,  712,  709,  716,  726,
      727,  717,  718,  723,  719,  720,  721,  713,  722,  724,
      728,  729,  730,  714,  731,  732,  733,  736,  737,  740,
      715,  734,  735,  738,  725,  739,  741,  743,  726,  727,
      742,  744,  723,  745,  746,  747,  748,  749,  724,  728,
      729,  730,  750,  731,  732,  733,  736,  737,  740,  751,
      734,  735,  738,  754,  739,  741,  743,  755,  758,  742,
      744,  759,  745,  746,  747,  748,  749,  752,  756,  753,
      760,  750,  761,  762,  763,  764,  757,  765,  751,  766,
      767,  770,  754,  768,  771,  772,  755,  758,  773,  769,

      759,  774,  775,  776,  779,  780,  752,  756,  753,  760,
      777,  761,  762,  763,  764,  757,  765,  781,  766,  767,
      770,  782,  768,  771,  772,  778,  783,  773,  769,  784,
      774,  775,  776,  779,  780,  785,  786,  787,  788,  777,
      789,  790,  791,  792,  793,  794,  781,  795,  796,  797,
      782,  798,  799,  800,  778,  783,  801,  802,  784,  803,
     1571,  807,  808,  809,  785,  786,  787,  788,  810,  789,
      790,  791,  792,  793,  794,  811,  795,  796,  797,  804,
      798,  799,  800,  812,  813,  801,  802,  814,  803,  805,
      807,  808,  809,  815,  816,  817,  818,  810,  819,  806,

      820,  821,  822,  823,  811,  824,  825,  826,  827,  828,
      829,  832,  812,  813,  833,  830,  814,  831,  805,  834,
      835,  836,  815,  816,  817,  818,  839,  819,  806,  820,
      821,  822,  823, 1571,  824,  825,  826,  827,  828,  829,
      832,  837,  844,  833,  830,  838,  831,  845,  834,  835,
      836, 1571,  840, 1571,  840,  839,  841,  841,  841,  841,
      521,  521,  521,  521,  524,  524,  524,  524,  846,  847,
      837,  844,  848,  522,  838,  842,  845,  842,  849,  843,
      843,  843,  843,  524,  524,  524,  524,  851,  852,  853,
      854,  855,  856,  850,  857,  858,  859,  846,  847,  860,

      861,  848,  522,  862,  863,  864,  865,  849,  866,  867,
      868,  869,  870,  871,  872,  873,  851,  852,  853,  854,
      855,  856,  850,  857,  858,  859,  874,  875,  860,  861,
      879,  880,  862,  863,  864,  865,  881,  866,  867,  868,
      869,  870,  871,  872,  873,  882,  883,  876,  884,  885,
      886,  887,  888,  889,  890,  874,  875,  877,  891,  879,
      880,  892,  893,  894,  895,  881,  896,  878,  897,  898,
      899,  900,  901, 1571,  882,  883,  904,  884,  885,  886,
      887,  888,  889,  890,  905,  906,  877,  891,  907,  908,
      892,  893,  894,  895,  911,  896,  878,  897,  898,  899,

      900,  901,  902,  909,  903,  904,  918,  910,  912,  912,
      912,  912, 1571,  905,  906,  919, 1571,  907,  908,  602,
      602,  602,  602,  911,  913,  913,  913,  913, 1571, 1571,
     1571,  902,  909,  903, 1571,  918,  910,  604,  604,  604,
      604,  914,  920,  914,  919,  915,  915,  915,  915,  291,
      605,  292,  916,  916,  916,  916,  917,  917,  917,  917,
      608,  608,  608,  608,  921,  294,  922,  923,  925,  926,
      927,  920,  928,  929,  930,  931,  932,  933,  934,  605,
      935,  936,  924,  937,  938,  939,  940,  941,  942,  943,
      944,  945,  946,  921,  294,  922,  923,  925,  926,  927,

      947,  928,  929,  930,  931,  932,  933,  934,  948,  935,
      936,  924,  937,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  949,  950,  953,  954,  955,  956,  957,  947,
      958,  959,  960,  951,  961,  962,  963,  948,  964,  965,
      966,  967,  968,  952,  969,  970,  971,  972,  973,  974,
      975,  949,  978,  953,  954,  955,  956,  957,  979,  958,
      959,  960,  951,  961,  962,  963,  980,  964,  965,  966,
      967,  968,  952,  969,  970,  971,  972,  973,  974,  975,
      976,  978,  977,  981,  982,  983,  985,  979, 1571,  984,
      986,  986,  986,  986, 1571,  980,  685,  685,  685,  685,

      994, 1571,  995,  686,  686,  686,  686, 1571, 1571,  976,
     1571,  977,  981,  982,  983,  985,  687,  987,  984,  987,
     1571,  988,  988,  988,  988,  989,  989,  989,  989,  994,
      362,  995,  363,  990,  990,  990,  990,  991,  991,  991,
      991,  691,  691,  691,  691,  687,  365,  693,  992,  992,
      992,  992,  693,  996,  997,  998,  999,  696,  443, 1001,
      443,  692,  692,  692,  692,  443,  993,  993,  993,  993,
     1002, 1000, 1003, 1004, 1005,  365,  443, 1006, 1571, 1007,
      443, 1008,  996,  997,  998,  999, 1009, 1010, 1001, 1011,
     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1002,

     1000, 1003, 1004, 1005, 1021, 1022, 1006,  443, 1007, 1023,
     1008, 1024, 1025, 1029, 1030, 1009, 1010, 1031, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1032, 1026,
     1033, 1034, 1035, 1021, 1022, 1036, 1037, 1038, 1023, 1027,
     1024, 1025, 1029, 1030, 1039, 1040, 1031, 1041, 1042, 1028,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1032, 1050, 1033,
     1034, 1035, 1051, 1054, 1036, 1037, 1038, 1052, 1027, 1053,
     1055, 1056, 1057, 1039, 1040, 1058, 1041, 1042, 1028, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1059, 1050, 1061, 1062,
     1060, 1051, 1054, 1063, 1064, 1065, 1052, 1066, 1053, 1055,

     1056, 1057, 1067, 1068, 1058, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1059, 1079, 1061, 1062, 1060,
     1080, 1081, 1063, 1064, 1065, 1082, 1066, 1083, 1084, 1085,
     1089, 1067, 1068, 1087, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1088, 1079, 1090, 1091, 1092, 1080,
     1081, 1093, 1094, 1095, 1082, 1096, 1083, 1084, 1085, 1089,
     1097, 1098, 1087, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1088, 1109, 1090, 1091, 1092, 1571, 1571,
     1093, 1094, 1095, 1571, 1096,  841,  841,  841,  841, 1097,
     1098, 1110, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,

     1107, 1108, 1111, 1109,  841,  841,  841,  841,  843,  843,
      843,  843,  843,  843,  843,  843, 1112, 1113, 1114, 1115,
     1110, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1111, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1137, 1138, 1139, 1140, 1141, 1112, 1113, 1114, 1115, 1135,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1136, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1135, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1136,
     1156, 1157,  912,  912,  912,  912, 1158, 1158, 1158, 1158,

     1571, 1571, 1571, 1142, 1143, 1144, 1145, 1571, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1160, 1156,
     1157, 1159, 1159, 1159, 1159,  915,  915,  915,  915,  292,
      916,  916,  916,  916,  917,  917,  917,  917, 1161, 1162,
     1163, 1164, 1165,  294, 1166, 1167, 1168, 1160, 1169, 1170,
     1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1187, 1188, 1185, 1189, 1161, 1162, 1163,
     1164, 1165,  294, 1166, 1167, 1168, 1186, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1187, 1188, 1185, 1189, 1190, 1191, 1192, 1193,

     1194, 1195, 1196, 1197, 1198, 1186, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207,  986,  986,  986,  986, 1208,
     1208, 1208, 1208, 1571, 1212, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1198, 1571, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207,  988,  988,  988,  988, 1209, 1209,
     1209, 1209,  362, 1212, 1571,  990,  990,  990,  990,  991,
      991,  991,  991, 1211, 1211, 1211, 1211,  693,  365, 1213,
     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224,  692,  692,  692,  692, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1571,  365, 1213, 1214,

     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
     1239, 1240, 1241, 1242, 1225, 1226, 1227, 1228, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1237, 1243, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1238, 1253, 1254, 1239,
     1240, 1241, 1242, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
     1262, 1263, 1264, 1265, 1237, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1238, 1253, 1254, 1266, 1267,
     1268, 1269, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1280, 1281, 1282, 1283, 1266, 1267, 1268,

     1269, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1295, 1296, 1297, 1298,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1295, 1296, 1297, 1298, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1159, 1159, 1159, 1159, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325,

     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1208, 1208, 1208, 1208, 1358, 1358, 1358, 1358, 1359, 1359,
     1359, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1354, 1355, 1356, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,

     1385, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
     1369, 1370, 1371, 1372, 1373, 1386, 1387, 1388, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1386, 1387, 1388, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1415, 1416, 1417, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1418, 1419,
     1420, 1421, 1422, 1423, 1424, 1424, 1424, 1424, 1425, 1426,

     1427, 1428, 1415, 1416, 1417, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1418, 1419, 1420,
     1421, 1422, 1423, 1441, 1441, 1441, 1441, 1425, 1426, 1427,
     1428, 1443, 1444, 1445, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1440, 1358, 1358, 1358, 1358,
     1442, 1442, 1442, 1442, 1446, 1447, 1448, 1449, 1450, 1451,
     1443, 1444, 1445, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
     1459, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1469, 1470,
     1471, 1472, 1473, 1446, 1447, 1448, 1449, 1450, 1451, 1474,
     1475, 1477, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,

     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1469, 1470, 1471,
     1472, 1473, 1424, 1424, 1424, 1424, 1478, 1479, 1474, 1475,
     1477, 1480, 1481, 1482, 1441, 1441, 1441, 1441, 1358, 1358,
     1358, 1358, 1483, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
     1493, 1494, 1495, 1496, 1497, 1478, 1479, 1499, 1500, 1501,
     1480, 1481, 1482, 1502, 1505, 1492, 1506, 1507, 1503, 1508,
     1498, 1483, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1493,
     1494, 1495, 1496, 1497, 1504, 1509, 1499, 1500, 1501, 1511,
     1512, 1513, 1502, 1505, 1492, 1506, 1507, 1503, 1508, 1498,
     1514, 1510, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,

     1523, 1524, 1525, 1504, 1509, 1526, 1527, 1528, 1511, 1512,
     1513, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1514,
     1510, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
     1524, 1525, 1537, 1538, 1526, 1527, 1528, 1539, 1540, 1541,
     1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1542, 1543,
     1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
     1554, 1537, 1538, 1555, 1556, 1557, 1539, 1540, 1541, 1558,
     1559, 1560, 1561, 1562, 1563, 1564, 1565, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
     1566, 1567, 1555, 1556, 1557, 1568, 1569, 1570, 1558, 1559,

     1560, 1561, 1562, 1563, 1564, 1565, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1566,
     1567, 1571, 1571, 1571, 1568, 1569, 1570,  223, 1571,  223,
      223,  288, 1571,  288, 1571,  288,  295,  295,  295,  295,
      295,  295,  366, 1571,  366,  366,  366,  366,  366,  366,
      366,  368, 1571, 1571,  368,  368,  368, 1571,  368,  368,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  695,
      695,  695,  695,  695,  695,  695,  695,  695, 1210, 1571,
     1210, 1210, 1210, 1210, 1210, 1210, 1210,   13, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571
    } ;

static const flex_int16_t yy_chk[3672] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1578,    7,    7,    7,    7,    7,    8, 1446,    8,    8,
        8,    8,    8,    9, 1428,    9,    9,    9,    9,    9,
       10, 1411,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1395,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1026,   28,   27,   29,   28,
      115,  950,   28,   40,  107,  876,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,   38,   36,   34,
       30,   31,   36,   30,   31,   30,   37,   31,   36,  804,
       31,   38,  443,   30,   37,  119,  119,   38,   34,   31,
      146,  142,   30,   34,   30,  109,   38,   36,   34,   30,
       31,   36,   30,   31,   30,   37,   31,   36,   41,   31,
       38,   39,   41,   37,   42,   44,   38,   44,   41,   39,
       44,   43,   43,   39,   42,   45,   39,   46,   46,   42,
       42,   43,   50,   50,   50,   50,  144,   41,  144,   47,

       39,   41,   17,   42,   44,   59,   44,   41,   39,   44,
       43,   43,   39,   42,   45,   39,   46,   46,   42,   42,
       43,   51,   51,   51,   51,   51,   52,   52,   52,   52,
       52,   53,   55,   53,   59,   51,   13,   60,   53,   54,
       52,   53,   62,   54,   68,   73,   55,   54,   65,   55,
       54,   56,   55,   54,   51,   56,   65,    0,   87,   56,
       53,   55,   53,   54,   51,   56,   60,   53,   54,   52,
       53,   62,   54,   68,   73,   55,   54,   65,   55,   54,
       56,   55,   54,   51,   56,   65,   57,   87,   56,   58,
        0,   61,   54,   88,   56,   57,   61,   57,    0,   66,

       58,   61,   57,   58,   64,   57,   58,   57,   64,   58,
        0,   74,   74,   66,   64,   57,    0,   69,   58,   66,
       61,   69,   88,    0,   57,   61,   57,   69,   66,   58,
       61,   57,   58,   64,   57,   58,   57,   64,   58,   67,
       74,   74,   66,   64,   90,   70,   69,   67,   66,   93,
       69,   67,   71,   71,   67,   70,   69,   93,   96,  101,
       70,   70,   71,  126,   72,  127,   72,    0,   67,   72,
      117,  117,  117,   90,   70,  129,   67,  369,   93,  369,
       67,   71,   71,   67,   70,  134,   93,   96,  101,   70,
       70,   71,  126,   72,  127,   72,  102,  102,   72,   79,

       79,   79,   79,   80,  129,   80,   80,   80,   80,   80,
      139,   81,   79,   81,  134,    0,   83,   89,   81,   80,
       82,   81,   89,  153,   82,  102,  102,   89,   82,    0,
       83,   82,    0,   83,   82, 1158,   83, 1158,    0,  139,
       81,   79,   81,    0,   82,   83,   89,   81,   80,   82,
       81,   89,  153,   82,  140,  140,   89,   82,   85,   83,
       82,   94,   83,   82,   84,   83,   92,   85,   84,   85,
       92,   86,   84,   82,   85,   94,   92,   85,   84,   85,
      155,   94,   86,  140,  140,   86,  156,   85,   86,    0,
       94,   86, 1209,   84, 1209,   92,   85,   84,   85,   92,

       86,   84,    0,   85,   94,   92,   85,   84,   85,  155,
       94,   86,   97,   95,   86,  156,   97,   86,  154,   98,
       86,   95,   97,   99,   99,   95,  128,  157,   95,   98,
      158,  128,  159,   99,   98,   98,  128,  160,  100,  154,
      100,   97,   95,  100,    0,   97,    0,  154,   98,  161,
       95,   97,   99,   99,   95,  128,  157,   95,   98,  158,
      128,  159,   99,   98,   98,  128,  160,  100,  154,  100,
        0,    0,  100,  103,  103,  103,  103,  104,  161,  104,
      104,  104,  104,  104,    0,    0,  103,  105,  105,  105,
      105,    0,  120,  104,  120,  131,  121,  122,  163,  120,

      121,  165,  120,  131,  121,  123,  166,  121,  164,  123,
      121,  122,    0,  123,  122,  103,  164,  122,  167,  123,
      121,  120,  104,  120,  131,  121,  122,  163,  120,  121,
      165,  120,  131,  121,  123,  166,  121,  164,  123,  121,
      122,  124,  123,  122,  125,  164,  122,  167,  123,  121,
      124,  132,  124,    0,  169,  125,  170,  124,  125,  130,
      124,  125,  124,  130,  125,  132,    0,  137,  137,  130,
      124,  132,  135,  125,    0,  171,  135,  137,    0,  124,
      132,  124,  135,  169,  125,  170,  124,  125,  130,  124,
      125,  124,  130,  125,  132,  133,  137,  137,  130,  136,

      132,  135,  172,  133,  171,  135,  137,  133,  173,  136,
      133,  135,  174,  168,  136,  136,  138,  175,  138,  168,
      177,  138,  178,  176,  133,  179,  168,  180,  136,  176,
      181,  172,  133,  182,  183,  184,  133,  173,  136,  133,
      187,  174,  168,  136,  136,  138,  175,  138,  168,  177,
      138,  178,  176,  188,  179,  168,  180,  190,  176,  181,
      185,  192,  182,  183,  184,  185,  185,  191,  189,  187,
      189,  191,  193,  194,  195,  196,  197,  198,  199,  200,
      202,  201,  188,  201,  203,  204,  190,  205,  206,  185,
      192,  207,  208,  204,  185,  185,  191,  189,  209,  189,

      191,  193,  194,  195,  196,  197,  198,  199,  200,  202,
      201,  210,  201,  203,  204,  212,  205,  206,  213,  215,
      207,  208,  204,  211,  214,  211,  216,  209,  224,  225,
      214,  226,  218,  218,  218,  218,  219,  219,  219,  219,
      210,    0,    0,    0,  212,  218,    0,  213,  215,  219,
      225,  227,  211,  214,  211,  216,  228,  224,  225,  214,
      226,  220,  220,  220,  220,  220,  221,  229,  221,  230,
      221,  221,  221,  221,  218,  220,  231,  232,  219,  225,
      227,  234,  235,  236,  237,  228,  238,  239,  240,  241,
      235,  242,  243,  239,  244,  245,  229,  246,  230,  248,

      239,  247,  249,  250,  220,  231,  232,  247,  251,  252,
      234,  235,  236,  237,  253,  238,  239,  240,  241,  235,
      242,  243,  239,  244,  245,  254,  246,  255,  248,  239,
      247,  249,  250,  258,  256,  259,  247,  251,  252,  256,
      256,  261,  260,  253,  260,  262,  263,  264,  265,  262,
      266,  267,  268,  269,  254,  270,  255,  271,  272,  273,
      272,  274,  258,  256,  259,  276,  277,  278,  256,  256,
      261,  260,  279,  260,  262,  263,  264,  265,  262,  266,
      267,  268,  269,  275,  270,  280,  271,  272,  273,  272,
      274,  275,  281,  283,  276,  277,  278,  282,  284,  282,

      285,  279,  286,  287,  296,  298,  285,  291,  291,  291,
      291,  290,  275,  290,  280,  290,  290,  290,  290,  299,
      275,  281,  283,    0,    0,    0,  282,  284,  282,  285,
        0,  286,  287,  296,  298,  285,  289,  289,  289,  289,
      292,  292,  292,  292,  300,  301,  297,  302,  299,  289,
      303,  304,  293,  292,  293,  293,  293,  293,  293,  294,
      306,  294,  307,  294,  294,  294,  294,  297,  293,  308,
      307,  309,  310,  300,  301,  297,  302,  311,  289,  303,
      304,  312,  292,  311,  313,  314,  315,  316,  317,  306,
      311,  307,  318,  320,  321,  322,  297,  293,  308,  307,

      309,  310,  319,  323,  324,  325,  311,  326,  319,  327,
      312,  330,  311,  313,  314,  315,  316,  317,  331,  311,
      328,  318,  320,  321,  322,  328,  328,  332,  333,  332,
      335,  319,  323,  324,  325,  334,  326,  319,  327,  334,
      330,  336,  337,  338,  339,  340,  341,  331,  342,  328,
      343,  344,  345,  344,  328,  328,  332,  333,  332,  335,
      346,  347,  348,  349,  334,  350,  351,  352,  334,  347,
      336,  337,  338,  339,  340,  341,  353,  342,  355,  343,
      344,  345,  344,  354,  356,  354,  358,  357,  359,  346,
      347,  348,  349,  357,  350,  351,  352,  361,  347,  361,

        0,  361,  361,  361,  361,  353,    0,  355,  360,  360,
      360,  360,  354,  356,  354,  358,  357,  359,    0,    0,
        0,  360,  357,  362,  362,  362,  362,  363,  363,  363,
      363,  366,  366,  366,  366,  364,  362,  364,  364,  364,
      364,  364,  365,  367,  365,  378,  365,  365,  365,  365,
      360,  364,  379,  371,  371,  380,  371,  367,  367,  367,
      367,  371,  381,  382,  383,  362,  384,  385,  386,  388,
      389,  390,  371,  379,  378,  391,  371,  392,  389,  394,
      364,  379,  395,  396,  380,  397,  398,  399,  393,  400,
        0,  381,  382,  383,  393,  384,  385,  386,  388,  389,

      390,  393,  379,  371,  391,  402,  392,  389,  394,  403,
      404,  395,  396,  401,  397,  398,  399,  393,  400,  401,
      405,  406,  407,  393,  408,  409,  410,  412,  413,  415,
      393,  410,  410,  414,  402,  414,  416,  417,  403,  404,
      416,  418,  401,  419,  420,  421,  422,  423,  401,  405,
      406,  407,  424,  408,  409,  410,  412,  413,  415,  425,
      410,  410,  414,  427,  414,  416,  417,  428,  430,  416,
      418,  431,  419,  420,  421,  422,  423,  426,  429,  426,
      432,  424,  433,  434,  435,  436,  429,  436,  425,  437,
      438,  440,  427,  439,  441,  450,  428,  430,  451,  439,

      431,  452,  453,  454,  456,  457,  426,  429,  426,  432,
      455,  433,  434,  435,  436,  429,  436,  458,  437,  438,
      440,  459,  439,  441,  450,  455,  460,  451,  439,  461,
      452,  453,  454,  456,  457,  462,  463,  464,  465,  455,
      466,  467,  469,  470,  471,  472,  458,  473,  474,  475,
      459,  476,  477,  478,  455,  460,  479,  481,  461,  482,
        0,  484,  485,  486,  462,  463,  464,  465,  487,  466,
      467,  469,  470,  471,  472,  488,  473,  474,  475,  483,
      476,  477,  478,  489,  492,  479,  481,  494,  482,  483,
      484,  485,  486,  495,  496,  497,  498,  487,  499,  483,

      500,  501,  502,  503,  488,  504,  506,  507,  509,  510,
      511,  513,  489,  492,  514,  512,  494,  512,  483,  515,
      516,  517,  495,  496,  497,  498,  519,  499,  483,  500,
      501,  502,  503,    0,  504,  506,  507,  509,  510,  511,
      513,  518,  531,  514,  512,  518,  512,  532,  515,  516,
      517,    0,  520,    0,  520,  519,  520,  520,  520,  520,
      521,  521,  521,  521,  523,  523,  523,  523,  533,  534,
      518,  531,  535,  521,  518,  522,  532,  522,  536,  522,
      522,  522,  522,  524,  524,  524,  524,  537,  538,  539,
      540,  541,  542,  536,  543,  544,  545,  533,  534,  546,

      547,  535,  521,  548,  550,  551,  552,  536,  553,  554,
      555,  556,  557,  558,  559,  560,  537,  538,  539,  540,
      541,  542,  536,  543,  544,  545,  562,  563,  546,  547,
      565,  566,  548,  550,  551,  552,  567,  553,  554,  555,
      556,  557,  558,  559,  560,  568,  569,  564,  570,  573,
      575,  576,  577,  578,  579,  562,  563,  564,  580,  565,
      566,  581,  582,  583,  584,  567,  585,  564,  587,  588,
      590,  591,  592,    0,  568,  569,  594,  570,  573,  575,
      576,  577,  578,  579,  595,  596,  564,  580,  597,  598,
      581,  582,  583,  584,  600,  585,  564,  587,  588,  590,

      591,  592,  593,  599,  593,  594,  614,  599,  601,  601,
      601,  601,    0,  595,  596,  615,    0,  597,  598,  602,
      602,  602,  602,  600,  603,  603,  603,  603,    0,    0,
        0,  593,  599,  593,    0,  614,  599,  604,  604,  604,
      604,  605,  616,  605,  615,  605,  605,  605,  605,  606,
      604,  606,  606,  606,  606,  606,  607,  607,  607,  607,
      608,  608,  608,  608,  617,  606,  618,  619,  620,  621,
      622,  616,  623,  624,  625,  626,  627,  628,  629,  604,
      630,  631,  619,  633,  634,  635,  636,  637,  638,  639,
      640,  641,  642,  617,  606,  618,  619,  620,  621,  622,

      643,  623,  624,  625,  626,  627,  628,  629,  645,  630,
      631,  619,  633,  634,  635,  636,  637,  638,  639,  640,
      641,  642,  646,  647,  648,  649,  650,  651,  652,  643,
      653,  656,  658,  647,  659,  660,  661,  645,  662,  663,
      664,  665,  666,  647,  667,  668,  670,  671,  673,  674,
      675,  646,  677,  648,  649,  650,  651,  652,  678,  653,
      656,  658,  647,  659,  660,  661,  679,  662,  663,  664,
      665,  666,  647,  667,  668,  670,  671,  673,  674,  675,
      676,  677,  676,  680,  681,  682,  683,  678,    0,  682,
      684,  684,  684,  684,    0,  679,  685,  685,  685,  685,

      702,    0,  703,  686,  686,  686,  686,    0,    0,  676,
        0,  676,  680,  681,  682,  683,  686,  687,  682,  687,
        0,  687,  687,  687,  687,  688,  688,  688,  688,  702,
      689,  703,  689,  689,  689,  689,  689,  690,  690,  690,
      690,  691,  691,  691,  691,  686,  689,  692,  693,  693,
      693,  693,  694,  704,  705,  706,  707,  695,  695,  708,
      695,  692,  692,  692,  692,  695,  694,  694,  694,  694,
      709,  707,  710,  711,  712,  689,  695,  713,    0,  714,
      695,  715,  704,  705,  706,  707,  716,  717,  708,  718,
      719,  721,  722,  723,  724,  725,  726,  727,  728,  709,

      707,  710,  711,  712,  729,  730,  713,  695,  714,  731,
      715,  733,  734,  736,  737,  716,  717,  738,  718,  719,
      721,  722,  723,  724,  725,  726,  727,  728,  739,  735,
      740,  741,  744,  729,  730,  746,  747,  748,  731,  735,
      733,  734,  736,  737,  749,  750,  738,  751,  752,  735,
      753,  754,  755,  756,  758,  759,  761,  739,  762,  740,
      741,  744,  763,  765,  746,  747,  748,  764,  735,  764,
      766,  767,  768,  749,  750,  769,  751,  752,  735,  753,
      754,  755,  756,  758,  759,  761,  770,  762,  771,  772,
      770,  763,  765,  773,  774,  776,  764,  779,  764,  766,

      767,  768,  780,  781,  769,  782,  784,  785,  787,  788,
      789,  791,  792,  793,  794,  770,  795,  771,  772,  770,
      796,  797,  773,  774,  776,  800,  779,  801,  802,  803,
      810,  780,  781,  805,  782,  784,  785,  787,  788,  789,
      791,  792,  793,  794,  805,  795,  812,  813,  815,  796,
      797,  817,  818,  819,  800,  821,  801,  802,  803,  810,
      822,  823,  805,  824,  826,  828,  830,  831,  832,  833,
      834,  835,  836,  805,  838,  812,  813,  815,    0,    0,
      817,  818,  819,    0,  821,  840,  840,  840,  840,  822,
      823,  844,  824,  826,  828,  830,  831,  832,  833,  834,

      835,  836,  845,  838,  841,  841,  841,  841,  842,  842,
      842,  842,  843,  843,  843,  843,  846,  848,  851,  852,
      844,  853,  854,  856,  857,  859,  860,  861,  863,  864,
      865,  845,  866,  867,  868,  869,  872,  873,  874,  875,
      882,  884,  885,  887,  889,  846,  848,  851,  852,  877,
      853,  854,  856,  857,  859,  860,  861,  863,  864,  865,
      877,  866,  867,  868,  869,  872,  873,  874,  875,  882,
      884,  885,  887,  889,  890,  891,  893,  894,  877,  895,
      896,  898,  900,  902,  903,  904,  905,  906,  907,  877,
      908,  910,  912,  912,  912,  912,  913,  913,  913,  913,

        0,    0,    0,  890,  891,  893,  894,    0,  895,  896,
      898,  900,  902,  903,  904,  905,  906,  907,  918,  908,
      910,  914,  914,  914,  914,  915,  915,  915,  915,  916,
      916,  916,  916,  916,  917,  917,  917,  917,  919,  920,
      922,  925,  926,  916,  927,  928,  930,  918,  931,  933,
      934,  935,  937,  938,  939,  940,  941,  942,  943,  946,
      947,  948,  949,  956,  958,  951,  959,  919,  920,  922,
      925,  926,  916,  927,  928,  930,  951,  931,  933,  934,
      935,  937,  938,  939,  940,  941,  942,  943,  946,  947,
      948,  949,  956,  958,  951,  959,  961,  963,  964,  965,

      967,  968,  969,  970,  972,  951,  974,  976,  977,  978,
      979,  980,  981,  982,  984,  986,  986,  986,  986,  987,
      987,  987,  987,    0,  994,  961,  963,  964,  965,  967,
      968,  969,  970,  972,    0,  974,  976,  977,  978,  979,
      980,  981,  982,  984,  988,  988,  988,  988,  989,  989,
      989,  989,  990,  994,    0,  990,  990,  990,  990,  991,
      991,  991,  991,  992,  992,  992,  992,  993,  990,  995,
      996,  998, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010,
     1011,  993,  993,  993,  993, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1022, 1023, 1024, 1025,    0,  990,  995,  996,

      998, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011,
     1032, 1034, 1035, 1037, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1022, 1023, 1024, 1025, 1027, 1039, 1040, 1041, 1043,
     1044, 1045, 1046, 1048, 1050, 1052, 1027, 1053, 1054, 1032,
     1034, 1035, 1037, 1055, 1056, 1057, 1058, 1060, 1062, 1063,
     1064, 1065, 1066, 1069, 1027, 1039, 1040, 1041, 1043, 1044,
     1045, 1046, 1048, 1050, 1052, 1027, 1053, 1054, 1070, 1071,
     1072, 1073, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1064,
     1065, 1066, 1069, 1074, 1075, 1077, 1078, 1081, 1083, 1085,
     1087, 1088, 1091, 1092, 1095, 1096, 1098, 1070, 1071, 1072,

     1073, 1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1110,
     1111, 1112, 1074, 1075, 1077, 1078, 1081, 1083, 1085, 1087,
     1088, 1091, 1092, 1095, 1096, 1098, 1113, 1114, 1117, 1118,
     1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1110, 1111,
     1112, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1129, 1131,
     1133, 1135, 1136, 1139, 1140, 1113, 1114, 1117, 1118, 1143,
     1144, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1155, 1156,
     1119, 1120, 1121, 1122, 1123, 1125, 1126, 1129, 1131, 1133,
     1135, 1136, 1139, 1140, 1159, 1159, 1159, 1159, 1143, 1144,
     1146, 1147, 1148, 1149, 1151, 1152, 1153, 1155, 1156, 1160,

     1161, 1162, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1175, 1176, 1179, 1181, 1183, 1185, 1186, 1189, 1190,
     1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1160, 1161,
     1162, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1175, 1176, 1179, 1181, 1183, 1185, 1186, 1189, 1190, 1193,
     1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1205, 1206,
     1208, 1208, 1208, 1208, 1210, 1210, 1210, 1210, 1211, 1211,
     1211, 1211, 1212, 1213, 1214, 1215, 1216, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1227, 1228, 1203, 1205, 1206, 1231,
     1233, 1235, 1237, 1238, 1241, 1242, 1245, 1246, 1248, 1249,

     1250, 1212, 1213, 1214, 1215, 1216, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1227, 1228, 1251, 1253, 1254, 1231, 1233,
     1235, 1237, 1238, 1241, 1242, 1245, 1246, 1248, 1249, 1250,
     1255, 1257, 1258, 1260, 1261, 1263, 1265, 1266, 1268, 1270,
     1274, 1277, 1278, 1279, 1251, 1253, 1254, 1282, 1283, 1286,
     1288, 1291, 1292, 1293, 1295, 1297, 1298, 1300, 1302, 1255,
     1257, 1258, 1260, 1261, 1263, 1265, 1266, 1268, 1270, 1274,
     1277, 1278, 1279, 1306, 1309, 1310, 1282, 1283, 1286, 1288,
     1291, 1292, 1293, 1295, 1297, 1298, 1300, 1302, 1311, 1314,
     1315, 1318, 1320, 1323, 1324, 1324, 1324, 1324, 1325, 1326,

     1328, 1330, 1306, 1309, 1310, 1331, 1333, 1335, 1339, 1342,
     1343, 1344, 1347, 1348, 1351, 1353, 1356, 1311, 1314, 1315,
     1318, 1320, 1323, 1357, 1357, 1357, 1357, 1325, 1326, 1328,
     1330, 1360, 1361, 1363, 1331, 1333, 1335, 1339, 1342, 1343,
     1344, 1347, 1348, 1351, 1353, 1356, 1358, 1358, 1358, 1358,
     1359, 1359, 1359, 1359, 1365, 1366, 1368, 1370, 1374, 1377,
     1360, 1361, 1363, 1378, 1379, 1382, 1383, 1386, 1388, 1391,
     1392, 1397, 1398, 1401, 1403, 1404, 1405, 1408, 1413, 1414,
     1417, 1419, 1420, 1365, 1366, 1368, 1370, 1374, 1377, 1421,
     1425, 1430, 1378, 1379, 1382, 1383, 1386, 1388, 1391, 1392,

     1397, 1398, 1401, 1403, 1404, 1405, 1408, 1413, 1414, 1417,
     1419, 1420, 1424, 1424, 1424, 1424, 1431, 1434, 1421, 1425,
     1430, 1436, 1437, 1438, 1441, 1441, 1441, 1441, 1442, 1442,
     1442, 1442, 1443, 1448, 1449, 1452, 1454, 1455, 1456, 1460,
     1462, 1463, 1464, 1466, 1468, 1431, 1434, 1470, 1471, 1472,
     1436, 1437, 1438, 1474, 1478, 1460, 1479, 1480, 1476, 1482,
     1468, 1443, 1448, 1449, 1452, 1454, 1455, 1456, 1460, 1462,
     1463, 1464, 1466, 1468, 1476, 1484, 1470, 1471, 1472, 1486,
     1487, 1488, 1474, 1478, 1460, 1479, 1480, 1476, 1482, 1468,
     1490, 1484, 1491, 1492, 1493, 1497, 1498, 1499, 1503, 1504,

     1505, 1509, 1510, 1476, 1484, 1511, 1515, 1516, 1486, 1487,
     1488, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1490,
     1484, 1491, 1492, 1493, 1497, 1498, 1499, 1503, 1504, 1505,
     1509, 1510, 1525, 1526, 1511, 1515, 1516, 1527, 1528, 1529,
     1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1530, 1531,
     1532, 1533, 1534, 1535, 1536, 1537, 1538, 1540, 1543, 1546,
     1549, 1525, 1526, 1551, 1552, 1553, 1527, 1528, 1529, 1554,
     1555, 1556, 1557, 1558, 1559, 1560, 1561, 1530, 1531, 1532,
     1533, 1534, 1535, 1536, 1537, 1538, 1540, 1543, 1546, 1549,
     1562, 1563, 1551, 1552, 1553, 1564, 1565, 1566, 1554, 1555,

     1556, 1557, 1558, 1559, 1560, 1561,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1562,
     1563,    0,    0,    0, 1564, 1565, 1566, 1572,    0, 1572,
     1572, 1573,    0, 1573,    0, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1575,    0, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1576,    0,    0, 1576, 1576, 1576,    0, 1576, 1576,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580,    0,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5





#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif




#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );





    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r





int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT

    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);

#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1













extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1572 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1571 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 112:
case 113:
case 114:
case 115:
case 116:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 121:
case 122:
case 123:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 124:
case 125:
case 126:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 127:
case 128:
case 129:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 130:
case 131:
case 132:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 139:
/* rule 139 can match eol */
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 145:
YY_RULE_SETUP
{}
	YY_BREAK
case 146:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 147:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 148:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1572 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1572 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1571);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }



        b->yy_is_interactive = 0;


	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{

	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        if (! YY_CURRENT_BUFFER)
            return 0;

    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        if (! YY_CURRENT_BUFFER)
            return 0;

    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );

    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;


        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );

    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

