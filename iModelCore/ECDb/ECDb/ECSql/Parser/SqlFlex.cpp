#line 3 "c:\\dev\\bsw\\dgndb\\06dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\dgndb\\06dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 259
#define YY_END_OF_BUFFER 260
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3660] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      254,  254,  260,  258,  256,  255,  258,  247,  220,  220,
      212,  214,  213,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  245,  220,
      222,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  248,  246,  249,  220,
      220,  229,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  220,  229,  258,
      254,  254,  254,  254,  252,  220,  220,  220,  212,  214,
      213,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  253,  254,  256,  218,    0,
      215,  217,  216,    0,    0,    0,    0,    7,    9,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,  103,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      129,    0,    0,    0,    0,  140,    0,  143,    0,  146,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  188,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  219,  223,    0,  224,  222,    0,  221,
      221,  221,  221,  221,    7,    9,  221,  221,  221,  221,
      221,  221,   21,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,   93,  103,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  129,  221,  221,
      221,  221,  140,  221,  143,  221,  146,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  188,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      244,  234,  244,  244,  244,  229,  244,  228,  228,  228,
      228,  228,    7,    9,  228,  228,  228,  228,  228,  228,
       21,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   93,  103,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  129,  228,  228,  228,  228,
      140,  228,  143,  228,  146,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  188,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  240,  244,
      244,  244,  229,  244,    0,  250,  254,  254,  218,  254,
      215,  217,  216,  254,  254,  254,  254,    7,    9,  254,
      254,  254,  254,  254,  254,   21,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   93,  103,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      129,  254,  254,  254,  254,  140,  254,  143,  254,  146,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  188,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  219,    0,  257,    0,    2,    0,    4,
        5,    0,    8,    0,    0,   12,    0,    0,    0,    0,

       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   51,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   68,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   81,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
        0,  105,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,  119,    0,    0,    0,    0,  127,
        0,  130,  131,    0,    0,    0,    0,    0,    0,    0,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  167,    0,    0,    0,  174,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  227,  224,    0,    0,  225,
      221,    2,  221,    4,    5,  221,    8,  221,  221,   12,
      221,  221,  221,  221,   18,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
       51,   56,  221,  221,  221,  221,  221,  221,  221,  221,
      221,   68,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,   81,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,   97,  221,  105,  106,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  117,  119,  221,
      221,  221,  221,  127,  221,  130,  131,  221,  221,  221,
      221,  221,  221,  221,  142,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  167,  221,  221,  221,
      174,  221,  221,  221,  221,  221,  179,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,    0,  237,
      244,  232,  244,  229,    0,  235,  228,    2,  228,    4,

        5,  228,    8,  228,  228,   12,  228,  228,  228,  228,
       18,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,   51,   56,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   68,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   81,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   97,
      228,  105,  106,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  117,  119,  228,  228,  228,  228,  127,
      228,  130,  131,  228,  228,  228,  228,  228,  228,  228,
      142,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  167,  228,  228,  228,  174,  228,  228,  228,
      228,  228,  179,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,    0,  243,  238,  244,  244,  229,
        0,  241,  250,    0,  250,  254,  254,  254,    2,  254,
        4,    5,  254,    8,  254,  254,   12,  254,  254,  254,
      254,   18,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,   51,   56,  254,
      254,  254,  254,  254,  254,  254,  254,  254,   68,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,   81,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       97,  254,  105,  106,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  117,  119,  254,  254,  254,  254,
      127,  254,  130,  131,  254,  254,  254,  254,  254,  254,
      254,  142,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  167,  254,  254,  254,  174,  254,  254,
      254,  254,  254,  179,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,   22,   23,   24,
        0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   47,    0,    0,    0,    0,    0,    0,
       61,    0,    0,   64,   65,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,   87,    0,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,  102,  104,    0,  108,  110,  111,
      112,    0,    0,  115,    0,    0,    0,    0,    0,    0,
        0,    0,  128,    0,    0,  134,    0,    0,    0,    0,

      144,    0,    0,    0,    0,  150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  162,    0,    0,    0,    0,
        0,  168,    0,    0,    0,    0,    0,  176,    0,    0,
        0,    0,  182,  183,    0,    0,    0,  191,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
      205,  206,    0,  208,  210,  211,    0,  226,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,   20,  221,
       22,   23,   24,  221,   28,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,   47,  221,  221,  221,
      221,  221,  221,   61,  221,  221,   64,   65,  221,   67,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,   86,   87,  221,  221,  221,   91,
      221,  221,  221,  221,  221,  221,  221,  102,  104,  221,
      108,  110,  111,  112,  221,  221,  115,  221,  221,  221,
      221,  221,  221,  221,  221,  128,  221,  221,  134,  221,
      221,  221,  221,  144,  221,  221,  221,  221,  150,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  162,  221,
      221,  221,  221,  221,  168,  221,  221,  221,  221,  221,
      176,  221,  221,  221,  221,  182,  183,  221,  221,  221,
      191,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  204,  205,  206,  221,  208,  210,  211,  237,
      244,    0,  236,  229,  235,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   20,  228,   22,   23,   24,
      228,   28,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,   47,  228,  228,  228,  228,  228,  228,
       61,  228,  228,   64,   65,  228,   67,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   86,   87,  228,  228,  228,   91,  228,  228,  228,
      228,  228,  228,  228,  102,  104,  228,  108,  110,  111,
      112,  228,  228,  115,  228,  228,  228,  228,  228,  228,

      228,  228,  128,  228,  228,  134,  228,  228,  228,  228,
      144,  228,  228,  228,  228,  150,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  162,  228,  228,  228,  228,
      228,  168,  228,  228,  228,  228,  228,  176,  228,  228,
      228,  228,  182,  183,  228,  228,  228,  191,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  204,
      205,  206,  228,  208,  210,  211,  243,    0,  242,  244,
      229,  241,    0,  250,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,   20,  254,   22,   23,   24,  254,
       28,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,   47,  254,  254,  254,  254,  254,  254,   61,
      254,  254,   64,   65,  254,   67,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       86,   87,  254,  254,  254,   91,  254,  254,  254,  254,
      254,  254,  254,  102,  104,  254,  108,  110,  111,  112,
      254,  254,  115,  254,  254,  254,  254,  254,  254,  254,
      254,  128,  254,  254,  134,  254,  254,  254,  254,  144,
      254,  254,  254,  254,  150,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  162,  254,  254,  254,  254,  254,
      168,  254,  254,  254,  254,  254,  176,  254,  254,  254,

      254,  182,  183,  254,  254,  254,  191,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  204,  205,
      206,  254,  208,  210,  211,    1,    3,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,   27,    0,
        0,    0,    0,    0,   34,    0,   36,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   69,    0,    0,    0,    0,   75,   76,
       77,   79,    0,    0,    0,   85,    0,   89,    0,    0,
       94,    0,    0,   98,   99,    0,    0,  107,    0,  113,
      114,  116,  118,    0,  121,    0,    0,  125,  126,    0,

      133,    0,  136,    0,    0,    0,    0,    0,  147,    0,
      149,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  181,    0,    0,    0,    0,    0,
      193,    0,    0,    0,  197,  198,  202,    0,    0,    0,
      207,    0,    1,    3,  221,  221,  221,  221,   14,  221,
      221,  221,  221,  221,  221,   27,  221,  221,  221,  221,
      221,   34,  221,   36,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
       69,  221,  221,  221,  221,   75,   76,   77,   79,  221,

      221,  221,   85,  221,   89,  221,  221,   94,  221,  221,
       98,   99,  221,  221,  107,  221,  113,  114,  116,  118,
      221,  121,  221,  221,  125,  126,  221,  133,  221,  136,
      221,  221,  221,  221,  221,  147,  221,  149,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  161,  221,  221,
      221,  170,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  181,  221,  221,  221,  221,  221,  193,  221,  221,
      221,  197,  198,  202,  221,  221,  221,  207,  221,  230,
      236,    1,    3,  228,  228,  228,  228,   14,  228,  228,
      228,  228,  228,  228,   27,  228,  228,  228,  228,  228,

       34,  228,   36,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   69,
      228,  228,  228,  228,   75,   76,   77,   79,  228,  228,
      228,   85,  228,   89,  228,  228,   94,  228,  228,   98,
       99,  228,  228,  107,  228,  113,  114,  116,  118,  228,
      121,  228,  228,  125,  126,  228,  133,  228,  136,  228,
      228,  228,  228,  228,  147,  228,  149,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  161,  228,  228,  228,
      170,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      181,  228,  228,  228,  228,  228,  193,  228,  228,  228,

      197,  198,  202,  228,  228,  228,  207,  228,  242,  231,
        0,  251,    1,    3,  254,  254,  254,  254,   14,  254,
      254,  254,  254,  254,  254,   27,  254,  254,  254,  254,
      254,   34,  254,   36,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       69,  254,  254,  254,  254,   75,   76,   77,   79,  254,
      254,  254,   85,  254,   89,  254,  254,   94,  254,  254,
       98,   99,  254,  254,  107,  254,  113,  114,  116,  118,
      254,  121,  254,  254,  125,  126,  254,  133,  254,  136,
      254,  254,  254,  254,  254,  147,  254,  149,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  161,  254,  254,
      254,  170,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  181,  254,  254,  254,  254,  254,  193,  254,  254,
      254,  197,  198,  202,  254,  254,  254,  207,  254,    0,
       10,    0,   13,    0,   17,    0,    0,    0,    0,    0,
        0,   31,    0,    0,   35,    0,    0,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,    0,
       63,    0,   70,   71,    0,   73,    0,    0,    0,    0,
        0,    0,   90,   92,   95,    0,    0,    0,    0,    0,
      120,    0,    0,    0,    0,  135,    0,  138,    0,  141,

      145,  148,    0,    0,    0,    0,    0,    0,    0,    0,
      159,    0,    0,    0,    0,    0,    0,  171,  172,  173,
        0,    0,  180,    0,    0,    0,    0,    0,    0,  194,
        0,  196,  203,    0,    0,    0,  209,  221,   10,  221,
       13,  221,   17,  221,  221,  221,  221,  221,  221,   31,
      221,  221,   35,  221,  221,   46,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,   60,  221,   63,  221,
       70,   71,  221,   73,  221,  221,  221,  221,  221,  221,
       90,   92,   95,  221,  221,  221,  221,  221,  120,  221,
      221,  221,  221,  135,  221,  138,  221,  141,  145,  148,

      221,  221,  221,  221,  221,  221,  221,  221,  159,  221,
      221,  221,  221,  221,  221,  171,  172,  173,  221,  221,
      180,  221,  221,  221,  221,  221,  221,  194,  221,  196,
      203,  221,  221,  221,  209,  244,  228,   10,  228,   13,
      228,   17,  228,  228,  228,  228,  228,  228,   31,  228,
      228,   35,  228,  228,   46,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   60,  228,   63,  228,   70,
       71,  228,   73,  228,  228,  228,  228,  228,  228,   90,
       92,   95,  228,  228,  228,  228,  228,  120,  228,  228,
      228,  228,  135,  228,  138,  228,  141,  145,  148,  228,

      228,  228,  228,  228,  228,  228,  228,  159,  228,  228,
      228,  228,  228,  228,  171,  172,  173,  228,  228,  180,
      228,  228,  228,  228,  228,  228,  194,  228,  196,  203,
      228,  228,  228,  209,  244,  251,  251,  254,   10,  254,
       13,  254,   17,  254,  254,  254,  254,  254,  254,   31,
      254,  254,   35,  254,  254,   46,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   60,  254,   63,  254,
       70,   71,  254,   73,  254,  254,  254,  254,  254,  254,
       90,   92,   95,  254,  254,  254,  254,  254,  120,  254,
      254,  254,  254,  135,  254,  138,  254,  141,  145,  148,

      254,  254,  254,  254,  254,  254,  254,  254,  159,  254,
      254,  254,  254,  254,  254,  171,  172,  173,  254,  254,
      180,  254,  254,  254,  254,  254,  254,  194,  254,  196,
      203,  254,  254,  254,  209,    0,    0,   15,    0,   16,
        0,    0,    0,   30,    0,   33,   44,   37,    0,    0,
        0,   52,    0,    0,    0,   57,   58,   59,    0,    0,
       72,   74,    0,    0,   82,   83,    0,   96,   97,    0,
        0,    0,    0,    0,  124,    0,  137,    0,    0,  152,
      153,    0,    0,    0,  157,    0,  160,    0,  165,   84,
        0,    0,    0,    0,    0,    0,    0,    0,  190,    0,

      195,    0,  200,  201,  221,  221,   15,  221,   16,  221,
      221,  221,   30,  221,   33,   44,   37,  221,  221,  221,
       52,  221,  221,  221,   57,   58,   59,  221,  221,   72,
       74,  221,  221,   82,   83,  221,   96,   97,  221,  221,
      221,  221,  221,  124,  221,  137,  221,  221,  152,  153,
      221,  221,  221,  157,  221,  160,  221,  165,   84,  221,
      221,  221,  221,  221,  221,  221,  221,  190,  221,  195,
      221,  200,  201,  233,  228,  228,   15,  228,   16,  228,
      228,  228,   30,  228,   33,   44,   37,  228,  228,  228,
       52,  228,  228,  228,   57,   58,   59,  228,  228,   72,

       74,  228,  228,   82,   83,  228,   96,   97,  228,  228,
      228,  228,  228,  124,  228,  137,  228,  228,  152,  153,
      228,  228,  228,  157,  228,  160,  228,  165,   84,  228,
      228,  228,  228,  228,  228,  228,  228,  190,  228,  195,
      228,  200,  201,  239,  251,  254,  254,   15,  254,   16,
      254,  254,  254,   30,  254,   33,   44,   37,  254,  254,
      254,   52,  254,  254,  254,   57,   58,   59,  254,  254,
       72,   74,  254,  254,   82,   83,  254,   96,   97,  254,
      254,  254,  254,  254,  124,  254,  137,  254,  254,  152,
      153,  254,  254,  254,  157,  254,  160,  254,  165,   84,

      254,  254,  254,  254,  254,  254,  254,  254,  190,  254,
      195,  254,  200,  201,    0,    0,    0,    0,    0,   29,
       32,    0,   48,   49,    0,    0,    0,    0,   62,    0,
        0,    0,    0,    0,  101,    0,    0,  123,    0,    0,
        0,  154,    0,    0,    0,    0,  166,    0,  175,    0,
        0,    0,    0,    0,    0,    0,  221,  221,  221,  221,
      221,   29,   32,  221,   48,   49,  221,  221,  221,  221,
       62,  221,  221,  221,  221,  221,  101,  221,  221,  123,
      221,  221,  221,  154,  221,  221,  221,  221,  166,  221,
      175,  221,  221,  221,  221,  221,  221,  221,  228,  228,

      228,  228,  228,   29,   32,  228,   48,   49,  228,  228,
      228,  228,   62,  228,  228,  228,  228,  228,  101,  228,
      228,  123,  228,  228,  228,  154,  228,  228,  228,  228,
      166,  228,  175,  228,  228,  228,  228,  228,  228,  228,
      254,  254,  254,  254,  254,   29,   32,  254,   48,   49,
      254,  254,  254,  254,   62,  254,  254,  254,  254,  254,
      101,  254,  254,  123,  254,  254,  254,  154,  254,  254,
      254,  254,  166,  254,  175,  254,  254,  254,  254,  254,
      254,  254,    6,    0,    0,   25,    0,    0,    0,    0,
        0,    0,    0,   50,    0,   54,   55,    0,    0,   80,

        0,  100,    0,  122,  132,    0,  151,  155,  156,  158,
        0,    0,    0,  177,  178,  184,  187,  189,  192,  199,
        6,  221,  221,   25,  221,  221,  221,  221,  221,  221,
      221,   50,  221,   54,   55,  221,  221,   80,  221,  100,
      221,  122,  132,  221,  151,  155,  156,  158,  221,  221,
      221,  177,  178,  184,  187,  189,  192,  199,    6,  228,
      228,   25,  228,  228,  228,  228,  228,  228,  228,   50,
      228,   54,   55,  228,  228,   80,  228,  100,  228,  122,
      132,  228,  151,  155,  156,  158,  228,  228,  228,  177,
      178,  184,  187,  189,  192,  199,    6,  254,  254,   25,

      254,  254,  254,  254,  254,  254,  254,   50,  254,   54,
       55,  254,  254,   80,  254,  100,  254,  122,  132,  254,
      151,  155,  156,  158,  254,  254,  254,  177,  178,  184,
      187,  189,  192,  199,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,   53,    0,    0,    0,  109,    0,
      163,    0,  169,    0,    0,  221,   19,  221,  221,  221,
      221,  221,  221,  221,  221,   53,  221,  221,  221,  109,
      221,  163,  221,  169,  221,  221,  228,   19,  228,  228,
      228,  228,  228,  228,  228,  228,   53,  228,  228,  228,
      109,  228,  163,  228,  169,  228,  228,  254,   19,  254,

      254,  254,  254,  254,  254,  254,  254,   53,  254,  254,
      254,  109,  254,  163,  254,  169,  254,  254,    0,   26,
        0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
        0,  164,    0,    0,  221,   26,  221,  221,  221,  221,
      221,  221,  221,  221,   78,  221,  221,  164,  221,  221,
      228,   26,  228,  228,  228,  228,  228,  228,  228,  228,
       78,  228,  228,  164,  228,  228,  254,   26,  254,  254,
      254,  254,  254,  254,  254,  254,   78,  254,  254,  164,
      254,  254,    0,    0,   38,    0,   41,   42,    0,    0,
       66,   88,  139,  185,    0,  221,  221,   38,  221,   41,

       42,  221,  221,   66,   88,  139,  185,  221,  228,  228,
       38,  228,   41,   42,  228,  228,   66,   88,  139,  185,
      228,  254,  254,   38,  254,   41,   42,  254,  254,   66,
       88,  139,  185,  254,   11,    0,    0,    0,    0,  186,
       11,  221,  221,  221,  221,  186,   11,  228,  228,  228,
      228,  186,   11,  254,  254,  254,  254,  186,    0,    0,
       43,    0,  221,  221,   43,  221,  228,  228,   43,  228,
      254,  254,   43,  254,   39,    0,    0,   39,  221,  221,
       39,  228,  228,   39,  254,  254,    0,    0,  221,  221,
      228,  228,  254,  254,    0,   45,  221,   45,  228,   45,

      254,   45,    0,  221,  228,  254,    0,  221,  228,  254,
        0,  221,  228,  254,    0,  221,  228,  254,    0,  221,
      228,  254,    0,  221,  228,  254,    0,  221,  228,  254,
        0,  221,  228,  254,    0,  221,  228,  254,    0,  221,
      228,  254,    0,  221,  228,  254,    0,  221,  228,  254,
        0,  221,  228,  254,   40,   40,   40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   10,   16,   16,   17,
       18,   19,   16,   20,   16,   16,   16,   21,   10,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   10,   81,   10,    1,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    3,    1,
        5,    1,    4,    1,    4,    6,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    8
    } ;

static yyconst flex_int16_t yy_base[3668] =
    {   0,
        0,    0,   82,    0,  164,    0,  234,  242,  250,  258,
      278,    0, 1168, 7878,  359, 7878, 1144, 7878, 7878, 1150,
      341, 7878, 1136,  335,  354,  350,  398,  445,  498,  343,
      345,  395,  328,  339,  424,  411,  503,  552,  400,  324,
      451,  556,  603,  457,  452,  506,  347, 1048, 7878,  622,
      644,  673,  617,  668,  695,  742,  795,  388,  450,  663,
      352,  400,  725,  482,  800,  849,  747,  390,  797,  853,
      900,  546,  500,  742,    0,  458, 7878, 7878, 7878,    0,
      919,  941,  970,  962, 1014,  963, 1064, 1117,  562,  548,
      739,  502,  517,  964,  845, 1022, 1166, 1059,  506, 1086,

     1170, 1217,  609,  740,  911,    0,  552,  965, 1246,  671,
        0,  440,    0, 1102, 7878,    0, 1110, 7878,  425,    0,
     1100, 1275, 1116, 1241, 1118, 1326, 1379,  625,  630, 1027,
      564,  576, 1268, 1162, 1332, 1428, 1313,  598, 1384, 1432,
     1479,  795,  743, 1481,  619, 7878, 1041,  493, 7878, 1115,
     7878, 7878, 7878,  624, 1061,  853,  628,  665,  673,  670,
      695, 1033,  804,  688,  692, 7878,  719,  920,  745, 1471,
      980,  770,  839, 1384,  780,  787,  804,  859,  857,  858,
      918,  920,  975, 1254,  971,  984, 1010, 1015, 1258, 1035,
     1072, 1065, 1093, 1089, 1124, 1152, 1322, 7878, 1167, 1154,

     1420, 1193, 1218, 1369, 1471, 1167, 1179, 1201, 1490, 1476,
     1223, 1495, 1493, 1274, 1270, 1295, 1311, 1305, 1300, 1328,
     1331, 1353, 1370, 1360, 1521, 1532, 1384, 1394, 1419, 1538,
     1429, 1526, 1433, 1533, 1492, 1529, 1545, 1541, 1546, 1545,
     1551, 7878, 1579, 1585, 1586, 1543, 1579, 1550, 1590, 1593,
     1579, 1583, 1602, 7878, 1613, 1646, 1651, 1658, 1673,    0,
     1634, 1649, 1651, 1639, 1655, 1644, 1650, 1664, 1671, 1659,
     1657, 1659,    0, 1656, 1688, 1665, 1711, 1706, 1663, 1694,
     1723, 1696, 1695, 1702, 1724, 1709, 1711, 1727, 1730, 1729,
     1763, 1724, 1718, 1721, 1732, 1757, 1736, 1758, 1753, 1759,

     1755, 1758, 1767, 1768,    0, 1775, 1760, 1802, 1788, 1811,
     1812, 1776, 1776, 1791, 1807, 1820, 1807, 1813, 1831, 1829,
     1827, 1823, 1839, 1842, 1835, 1828, 1848, 1846, 1838, 1858,
     1849, 1869, 1875, 1871, 1878, 1868, 1893, 1878, 1877, 1883,
     1913, 1892, 1882, 1909, 1919, 1895, 1896, 1929,    0, 1934,
     1929, 1932, 1928, 1934, 1942, 1944, 1946, 1933, 1939, 1957,
        0, 1997, 2006,  948, 2012, 2020, 2029,    0, 1989, 2007,
     2022, 2010, 2026, 2015, 2012, 2026, 2029, 2020, 2022, 2024,
        0, 2022, 2066, 2028, 2072, 2045, 2027, 2055, 2089, 2033,
     2032, 2062, 2080, 2068, 2069, 2086, 2088, 2089, 2122, 2085,

     2078, 2081, 2088, 2117, 2090, 2095, 2090, 2096, 2096, 2112,
     2127, 2129,    0, 2135, 2120, 2150, 2145, 2139, 2162, 2135,
     2139, 2147, 2143, 2175, 2172, 2179, 2192, 2191, 2179, 2171,
     2187, 2202, 2195, 2188, 2205, 2202, 2191, 2208, 2197, 2208,
     2236, 2217, 2220, 2209, 2253, 2219, 2235, 2226, 2257, 2248,
     2240, 2261, 2255, 2259, 2259, 2260,    0, 2291, 2294, 2291,
     2272, 2297, 2279, 2280, 2294, 2291, 2298, 2316, 2356, 2365,
     2371, 1619, 2379, 2388, 2394, 2415,    0,  552,    0, 2418,
        0,    0,    0, 2306, 2380, 2387, 2321, 2390, 2380, 2378,
     2394, 2397, 2405, 2396, 2400,    0, 2404, 2430, 2411, 2437,

     2432, 2410, 2414, 2450, 2417, 2421, 2428, 2456, 2442, 2451,
     2469, 2471, 2470, 2474, 2469, 2464, 2468, 2474, 2493, 2477,
     2481, 2475, 2481, 2475, 2479, 2487, 2513,    0, 2498, 2483,
     2528, 2538, 2537, 2528, 2496, 2495, 2514, 2521, 2546, 2529,
     2543, 2576, 2576, 2555, 2547, 2563, 2568, 2562, 2558, 2582,
     2582, 2571, 2588, 2579, 2590, 2595, 2600, 2604, 2592, 2624,
     2601, 2600, 2603, 2624, 2615, 2608, 2631, 2640, 2645, 2643,
     2650,    0, 2659, 2655, 2654, 2653, 2667, 2662, 2664, 2669,
     2661, 2665, 2687,    0, 1114, 7878, 2685, 7878, 2689, 7878,
     7878, 2699, 7878, 2688, 2694, 7878, 2689, 2696, 2683, 2706,

     1062, 2709, 2701, 2717, 2697, 2713, 2716, 2708, 2709, 2711,
     2705, 2712, 2727, 2713, 2744, 2733, 2744, 2734, 2738, 2736,
     2749, 2740, 2762, 2749, 2761, 2754, 2768, 7878, 2773, 2758,
     2773, 2760, 2762, 2763, 2780, 2765, 2785, 2778, 2794, 2781,
     2783, 2785, 2796, 2783, 2797, 2792, 2801, 2813, 2816, 2827,
     2809, 7878, 7878, 2820, 2809, 2827, 2814, 2832, 2829, 2839,
     2834, 2838, 2841, 7878, 2827, 2829, 2853, 2850, 2838, 7878,
     2834, 7878, 7878, 1034, 2843, 2845, 2854, 2859, 2863, 2856,
     7878, 2851, 2870, 2876, 2880, 2882, 2871, 2870, 2878, 2885,
     2892, 2883, 2895, 2887, 2882, 2894, 2890, 2901, 2891, 2904,

     2903, 2900, 2894, 2910, 2902, 2915, 7878, 2914, 2927, 2913,
     2925, 2918, 7878, 2927, 2929, 2926, 2942, 2934, 2943, 2946,
     2937, 2939, 2939, 2956, 2953, 2945, 2939, 2967, 2941, 2954,
     2953, 2965, 2964, 2960, 3017, 3022, 3031, 3040, 3046, 3051,
     2985,    0, 2986,    0,    0, 3000,    0, 3005, 3020,    0,
     3033, 3040, 3027, 3050, 1021, 3050, 3041, 3049, 3037, 3053,
     3056, 3047, 3048, 3048, 3042, 3049, 3065, 3048, 3082, 3063,
     3059, 3095, 3069, 3071, 3091, 3086, 3106, 3093, 3102, 3094,
     3107,    0, 3112, 3096, 3112, 3097, 3100, 3100, 3117, 3102,
     3121, 3113, 3121, 3113, 3115, 3119, 3127, 3113, 3143, 3140,

     3144, 3157, 3159, 3175, 3151,    0,    0, 3159, 3147, 3165,
     3151, 3167, 3165, 3174, 3169, 3172, 3175,    0, 3161, 3163,
     3176, 3183, 3171,    0, 3169,    0,    0, 1020, 3180, 3187,
     3197, 3205, 3211, 3198,    0, 3195, 3213, 3218, 3219, 3220,
     3209, 3209, 3216, 3223, 3230, 3221, 3232, 3224, 3219, 3231,
     3228, 3236, 3226, 3238, 3236, 3235, 3229, 3245, 3240, 3255,
        0, 3256, 3269, 3255, 3269, 3261,    0, 3269, 3268, 3264,
     3280, 3272, 3280, 3283, 3275, 3276, 3278, 3293, 3290, 3282,
     3277, 3303, 3277, 3290, 3318, 3294, 3297, 3295, 3352, 3357,
     3375, 3380, 3389, 3398, 3403, 3413, 3321,    0, 3328,    0,

        0, 3357,    0, 3386, 3392,    0, 3386, 3393, 3386, 3409,
     1019, 3409, 3400, 3413, 3395, 3412, 3414, 3405, 3407, 3407,
     3401, 3408, 3423, 3406, 3439, 3421, 3420, 3447, 3435, 3432,
     3457, 3441, 3465, 3452, 3461, 3453, 3466,    0, 3472, 3456,
     3470, 3457, 3459, 3459, 3476, 3461, 3480, 3471, 3490, 3477,
     3479, 3481, 3489, 3480, 3505, 3497, 3501, 3512, 3513, 3533,
     3511,    0,    0, 3520, 3509, 3527, 3512, 3529, 3526, 3535,
     3530, 3534, 3537,    0, 3520, 3529, 3550, 3549, 3536,    0,
     3532,    0,    0, 1017, 3541, 3543, 3552, 3567, 3568, 3555,
        0, 3550, 3567, 3578, 3580, 3582, 3571, 3570, 3577, 3583,

     3590, 3581, 3592, 3584, 3579, 3591, 3587, 3601, 3591, 3603,
     3601, 3598, 3612, 3608, 3600, 3612,    0, 3617, 3625, 3612,
     3624, 3615,    0, 3629, 3629, 3626, 3642, 3634, 3642, 3645,
     3636, 3637, 3639, 3654, 3651, 3643, 3643, 3663, 3644, 3657,
     3655, 3663, 3664, 3669, 3714, 3719, 3727, 3736, 3742, 3750,
     3755, 3765, 3772, 3777, 3783, 3801,    0, 3719,    0, 3747,
        0,    0, 3753,    0, 3760, 3778,    0, 3772, 3779, 3766,
     3789, 1010, 3789, 3780, 3788, 3776, 3792, 3794, 3786, 3788,
     3790, 3784, 3791, 3806, 3790, 3822, 3805, 3799, 3835, 3829,
     3826, 3842, 3826, 3846, 3833, 3842, 3834, 3847,    0, 3852,

     3836, 3851, 3838, 3840, 3842, 3859, 3845, 3864, 3854, 3866,
     3853, 3855, 3860, 3879, 3867, 3889, 3881, 3887, 3898, 3899,
     3915, 3891,    0,    0, 3899, 3887, 3905, 3891, 3907, 3905,
     3914, 3909, 3916, 3919,    0, 3902, 3904, 3916, 3925, 3914,
        0, 3919,    0,    0, 1008, 3930, 3934, 3942, 3951, 3952,
     3941,    0, 3936, 3953, 3958, 3959, 3960, 3949, 3949, 3956,
     3963, 3970, 3961, 3974, 3966, 3961, 3973, 3969, 3977, 3967,
     3979, 3979, 3976, 3976, 3992, 3985, 4000,    0, 4002, 4010,
     3998, 4010, 4001,    0, 4009, 4008, 4004, 4020, 4013, 4021,
     4025, 4016, 4018, 4018, 4035, 4032, 4024, 4018, 4038, 4019,

     4034, 4058, 4038, 4042, 4037, 4040, 4055, 4052, 4069, 4064,
     4062, 4067, 4078, 4067, 4074, 7878, 4083, 7878, 7878, 4088,
     4079, 7878, 4086, 4092, 4085, 4086, 4091, 4077, 4078, 4080,
     4099, 4098, 4089, 4117, 4110, 4107, 4117, 4130, 4113, 4115,
     7878, 4127, 4126, 7878, 7878, 4129, 7878, 4127, 4119, 4129,
     4125, 4127, 4147, 4144, 4143, 4132, 4133, 4139, 4146, 4155,
     4153, 7878, 7878, 4155, 4145, 4148, 7878, 4151, 4153, 4161,
     4183, 1039,  992, 4185, 7878, 7878, 4184,  938, 7878, 7878,
     7878, 4173, 4182, 7878, 4177, 4188, 4177, 4191, 4186, 4184,
     4186, 4203, 7878, 4184, 4202, 4200, 4192, 4208, 4192, 4208,

     7878, 4199, 4197, 4198, 4202, 7878, 4218, 4209, 4217, 4241,
     4246, 4246, 4243, 4233, 4249, 7878, 4237, 4252, 4241, 4240,
     4259, 7878, 4248, 4250, 4250, 4262, 4255, 7878, 4263, 4255,
     4250, 4266, 7878, 7878, 4255, 4253, 4266, 7878, 4257, 4271,
     4266, 4280, 4284, 4287, 4301, 4304, 4301, 4303, 4303, 7878,
     7878, 7878, 4308, 4306, 7878, 7878, 4326, 4334, 4304, 4305,
     4305, 4322, 4317, 4317, 4322, 4338, 4327, 4334,    0, 4342,
        0,    0, 4349, 4338,    0, 4348, 4353, 4346, 4347, 4352,
     4338, 4342, 4344, 4365, 4362, 4353, 4384, 4368, 4364, 4358,
     4372, 4359, 4361,    0, 4380, 4378,    0,    0, 4381,    0,

     4378, 4376, 4387, 4384, 4387, 4407, 4406, 4404, 4393, 4394,
     4400, 4407, 4419, 4417,    0,    0, 4421, 4409, 4412,    0,
     4409, 4410, 4411, 4426,  970,  923, 4441,    0,    0, 4433,
      876,    0,    0,    0, 4419, 4434,    0, 4429, 4443, 4432,
     4453, 4447, 4445, 4446, 4463,    0, 4444, 4464, 4463, 4452,
     4468, 4453, 4469,    0, 4463, 4461, 4465, 4466,    0, 4476,
     4466, 4467, 4500, 4488, 4491, 4488, 4484, 4501,    0, 4492,
     4512, 4501, 4500, 4519,    0, 4508, 4510, 4510, 4524, 4516,
        0, 4524, 4516, 4511, 4527,    0,    0, 4518, 4517, 4534,
        0, 4521, 4529, 4523, 4530, 4527, 4536, 4548, 4557, 4554,

     4556, 4558,    0,    0,    0, 4563, 4566,    0,    0, 4586,
     4594, 4607, 4614, 4620, 4625, 4576, 4577, 4578, 4612, 4607,
     4608, 4613, 4623, 4611, 4618,    0, 4626,    0,    0, 4633,
     4622,    0, 4630, 4635, 4628, 4629, 4634, 4620, 4621, 4623,
     4642, 4639, 4630, 4671, 4646, 4642, 4636, 4651, 4632, 4659,
        0, 4671, 4671,    0,    0, 4672,    0, 4669, 4661, 4671,
     4667, 4669, 4689, 4687, 4686, 4675, 4676, 4682, 4689, 4698,
     4696,    0,    0, 4698, 4686, 4689,    0, 4687, 4688, 4689,
     4705,  890,  885, 4726,    0,    0, 4706,  844,    0,    0,
        0, 4717, 4726,    0, 4723, 4734, 4723, 4737, 4731, 4729,

     4730, 4747,    0, 4728, 4746, 4744, 4734, 4751, 4735, 4751,
        0, 4742, 4740, 4741, 4742,    0, 4752, 4744, 4745, 4786,
     4767, 4764, 4787, 4779, 4795,    0, 4783, 4797, 4785, 4784,
     4803,    0, 4792, 4794, 4794, 4806, 4798,    0, 4806, 4798,
     4793, 4809,    0,    0, 4796, 4797, 4810,    0, 4798, 4807,
     4801, 4808, 4806, 4809, 4842, 4848, 4845, 4849, 4849,    0,
        0,    0, 4854, 4851,    0,    0, 4870, 4875, 4880, 4899,
     4907, 4912, 4922, 4929, 4862, 4863, 4871, 4888, 4896, 4900,
     4905, 4922, 4910, 4917,    0, 4925,    0,    0, 4932, 4921,
        0, 4929, 4934, 4927, 4928, 4933, 4919, 4922, 4924, 4943,

     4940, 4931, 4965, 4948, 4944, 4938, 4951, 4932, 4934,    0,
     4946, 4958,    0,    0, 4964,    0, 4961, 4961, 4972, 4968,
     4970, 4990, 4987, 4985, 4974, 4975, 4981, 4988, 4999, 4997,
        0,    0, 4999, 4987, 4990,    0, 4989, 4990, 4991, 5005,
      834,  798, 5027,    0,    0, 5006,  756,    0,    0,    0,
     4992, 5001,    0, 5009, 5020, 5015, 5035, 5029, 5028, 5029,
     5046,    0, 5027, 5045, 5042, 5034, 5050, 5034, 5050,    0,
     5043, 5041, 5042, 5044,    0, 5056, 5046, 5047, 5088, 5068,
     5065, 5062, 5065, 5081,    0, 5074, 5096, 5084, 5083, 5102,
        0, 5091, 5093, 5093, 5105, 5097,    0, 5105, 5097, 5092,

     5108,    0,    0, 5097, 5098, 5111,    0, 5099, 5109, 5103,
     5110, 5107, 5110, 5122, 5138, 5135, 5142, 5142,    0,    0,
        0, 5150, 5150,    0,    0, 7878, 7878,  743, 5157, 5143,
     5157, 7878, 5158, 5139, 5160, 5165, 5164, 5156, 7878, 5150,
     5150, 5151, 5160, 5157, 7878, 5171, 7878, 5157, 5164, 5163,
     5173, 5174, 5184, 5173, 5195, 5186, 5183, 5190, 5204, 5199,
     5212, 5204, 5216, 7878, 5202, 5219, 5205, 5222, 7878, 7878,
      673, 7878, 5203, 5220, 5210, 7878, 5226, 7878, 5225, 5228,
     7878, 5214, 5234, 7878, 7878, 5231, 5221, 7878, 5217, 7878,
     7878, 7878, 7878, 5236, 5230, 5231, 5258, 7878, 7878, 5259,

     7878, 5260, 7878, 5258, 5251,  656, 5255, 5262, 7878, 5258,
     7878, 5258,  486, 5270, 5276, 5262, 5264, 5279, 5281, 5280,
     7878, 5281, 5284, 5271, 7878, 5290, 5271, 5292, 5290, 5277,
     5289, 5286, 5294, 5284, 7878, 5283, 5316, 5306, 5319, 5311,
     7878, 5324, 5310, 5329, 7878, 7878, 5316, 5322, 5336, 5324,
     7878, 5325,    0,    0,  653, 5337, 5323, 5337,    0, 5338,
     5319, 5340, 5347, 5346, 5338,    0, 5332, 5332, 5335, 5342,
     5339,    0, 5354,    0, 5340, 5347, 5357, 5367, 5373, 5382,
     5374, 5378, 5391, 5375, 5382, 5390, 5382, 5392, 5383, 5394,
        0, 5380, 5398, 5387, 5404,    0,    0,  639,    0, 5385,

     5402, 5392,    0, 5410,    0, 5407, 5410,    0, 5397, 5417,
        0,    0, 5414, 5430,    0, 5411,    0,    0,    0,    0,
     5429, 5426, 5427, 5444,    0,    0, 5449,    0, 5445,    0,
     5444, 5434,  592, 5435, 5442,    0, 5438,    0, 5438,  735,
     5450, 5456, 5442, 5446, 5461, 5463, 5462,    0, 5463, 5468,
     5453,    0, 5472, 5454, 5475, 5473, 5471, 5483, 5485, 5492,
     5485,    0, 5487, 5507, 5497, 5505, 5497,    0, 5507, 5490,
     5509,    0,    0, 5496, 5502, 5516, 5504,    0, 5505,  747,
     5531,    0,    0,  579, 5526, 5512, 5526,    0, 5528, 5509,
     5530, 5548, 5547, 5539,    0, 5533, 5533, 5534, 5541, 5538,

        0, 5552,    0, 5541, 5551, 5548, 5558, 5559, 5568, 5557,
     5564, 5570, 5554, 5561, 5569, 5561, 5571, 5573, 5586,    0,
     5572, 5589, 5588, 5605,    0,    0,  557,    0, 5586, 5603,
     5593,    0, 5609,    0, 5606, 5609,    0, 5595, 5618,    0,
        0, 5618, 5605,    0, 5603,    0,    0,    0,    0, 5621,
     5614, 5615, 5629,    0,    0, 5630,    0, 5626,    0, 5624,
     5614,  554, 5615, 5631,    0, 5627,    0, 5627,  830, 5640,
     5646, 5632, 5647, 5662, 5664, 5663,    0, 5664, 5667, 5652,
        0, 5671, 5652, 5676, 5677, 5662, 5674, 5671, 5678, 5668,
        0, 5667, 5687, 5677, 5685, 5677,    0, 5687, 5670, 5698,

        0,    0, 5685, 5691, 5706, 5694,    0, 5695, 5732,  973,
     5748, 5753,    0,    0,  547, 5725, 5711, 5725,    0, 5726,
     5710, 5744, 5749, 5748, 5740,    0, 5734, 5734, 5735, 5742,
     5743,    0, 5757,    0, 5743, 5751, 5748, 5758, 5759, 5768,
     5757, 5763, 5770, 5754, 5761, 5769, 5761, 5772, 5772, 5784,
        0, 5773, 5803, 5789, 5806,    0,    0,  513,    0, 5787,
     5804, 5794,    0, 5810,    0, 5807, 5814,    0, 5800, 5820,
        0,    0, 5818, 5805,    0, 5803,    0,    0,    0,    0,
     5821, 5814, 5815, 5829,    0,    0, 5830,    0, 5826,    0,
     5824, 5814,  506, 5815, 5830,    0, 5826,    0, 5826,  935,

     5838, 5847, 5846, 5848, 5863, 5865, 5864,    0, 5865, 5868,
     5853,    0, 5876, 5857, 5878, 5877, 5862, 5874, 5871, 5878,
     5868,    0, 5867, 5887, 5877, 5885, 5877,    0, 5887, 5870,
     5897,    0,    0, 5884, 5890, 5904, 5895,    0, 5909, 5923,
     7878, 5916, 7878, 5912, 7878, 5913, 5914, 5909, 5925, 5932,
     5931, 7878, 5916, 5919, 7878, 5935, 5921, 7878, 5936, 5930,
     5932, 5940, 5931, 5942, 5943, 5937, 5945, 5931, 7878, 5957,
     7878, 5945, 7878, 7878, 5957, 7878, 5943, 5945, 5972, 5968,
     5979, 5972, 7878, 7878, 7878, 5981, 5968, 5982, 5987, 5992,
     7878, 5993, 5994, 5985, 5986, 7878, 5996, 7878, 5988, 7878,

     7878, 7878, 5992, 5998, 5999, 5989, 5996, 5997, 5982, 5987,
     7878, 5991, 6004, 5999, 6015, 6018, 6012, 7878, 7878, 7878,
     6025, 6035, 7878, 6032, 6041, 6031, 6043, 6027, 6042, 7878,
     6037, 7878, 7878, 6051, 6035, 6048, 7878, 6055,    0, 6048,
        0, 6044,    0, 6045, 6046, 6041, 6057, 6060, 6059,    0,
     6044, 6046,    0, 6062, 6056,    0, 6071, 6065, 6067, 6078,
     6082, 6093, 6094, 6088, 6096, 6082,    0, 6100,    0, 6088,
        0,    0, 6104,    0, 6090, 6089, 6104, 6100, 6111, 6104,
        0,    0,    0, 6113, 6100, 6114, 6119, 6120,    0, 6121,
     6122, 6112, 6113,    0, 6131,    0, 6123,    0,    0,    0,

     6127, 6133, 6137, 6140, 6147, 6148, 6133, 6138,    0, 6142,
     6147, 6142, 6162, 6165, 6156,    0,    0,    0, 6157, 6167,
        0, 6164, 6173, 6163, 6175, 6159, 6174,    0, 6165,    0,
        0, 6179, 6163, 6175,    0, 6221, 6191,    0, 6184,    0,
     6180,    0, 6181, 6185, 6197, 6213, 6216, 6215,    0, 6204,
     6206,    0, 6222, 6209,    0, 6224, 6218, 6220, 6228, 6219,
     6230, 6231, 6225, 6233, 6219,    0, 6237,    0, 6225,    0,
        0, 6237,    0, 6223, 6222, 6236, 6236, 6247, 6240,    0,
        0,    0, 6249, 6239, 6270, 6275, 6276,    0, 6277, 6282,
     6272, 6273,    0, 6284,    0, 6276,    0,    0,    0, 6280,

     6286, 6287, 6277, 6284, 6285, 6270, 6275,    0, 6279, 6284,
     6279, 6295, 6298, 6289,    0,    0,    0, 6289, 6303,    0,
     6300, 6309, 6299, 6314, 6315, 6330,    0, 6321,    0,    0,
     6335, 6323, 6335,    0, 6354, 6359, 6364, 6342,    0, 6351,
        0, 6347,    0, 6352, 6353, 6348, 6364, 6370, 6369,    0,
     6354, 6356,    0, 6372, 6358,    0, 6373, 6367, 6369, 6377,
     6368, 6379, 6380, 6374, 6382, 6368,    0, 6388,    0, 6376,
        0,    0, 6388,    0, 6374, 6377, 6391, 6387, 6414, 6407,
        0,    0,    0, 6420, 6407, 6421, 6426, 6430,    0, 6431,
     6432, 6422, 6423,    0, 6433,    0, 6425,    0,    0,    0,

     6429, 6435, 6436, 6426, 6433, 6434, 6419, 6424,    0, 6428,
     6435, 6430, 6446, 6449, 6444,    0,    0,    0, 6444, 6454,
        0, 6467, 6476, 6470, 6482, 6466, 6481,    0, 6475,    0,
        0, 6489, 6473, 6485,    0, 6486, 6468, 7878, 6488, 7878,
     6491, 6483, 6493, 7878, 6494, 7878, 7878,  497, 6494, 6496,
     6481, 7878, 6489, 6499, 6506, 7878, 7878, 7878, 6488, 6489,
     7878, 7878, 6509, 6501, 7878, 7878, 6515, 7878, 7878, 6514,
     6522, 6523, 6527, 6529, 7878, 6521, 7878, 6538, 6532, 7878,
     7878, 6534, 6535, 6535, 7878, 6533, 7878, 6549, 7878, 7878,
     6542, 6552, 6535, 6542, 6543, 6545, 6538, 6540, 7878, 6556,

     7878, 6544, 7878, 7878, 6558, 6540,    0, 6560,    0, 6563,
     6559, 6569,    0, 6570,    0,    0,  459, 6586, 6588, 6577,
        0, 6585, 6595, 6600,    0,    0,    0, 6585, 6586,    0,
        0, 6606, 6594,    0,    0, 6608,    0,    0, 6607, 6599,
     6600, 6600, 6602,    0, 6594,    0, 6611, 6602,    0,    0,
     6604, 6605, 6605,    0, 6605,    0, 6621,    0,    0, 6614,
     6624, 6611, 6618, 6619, 6637, 6630, 6636,    0, 6652,    0,
     6640,    0,    0, 6672, 6652, 6642,    0, 6662,    0, 6665,
     6657, 6667,    0, 6668,    0,    0,  456, 6668, 6670, 6655,
        0, 6663, 6673, 6680,    0,    0,    0, 6662, 6663,    0,

        0, 6683, 6675,    0,    0, 6689,    0,    0, 6688, 6680,
     6681, 6681, 6683,    0, 6675,    0, 6703, 6694,    0,    0,
     6700, 6701, 6701,    0, 6699,    0, 6723,    0,    0, 6716,
     6726, 6709, 6716, 6717, 6719, 6712, 6714,    0, 6730,    0,
     6718,    0,    0, 6756, 6775, 6735, 6726,    0, 6746,    0,
     6749, 6758, 6768,    0, 6769,    0,    0,  446, 6769, 6771,
     6756,    0, 6764, 6774, 6779,    0,    0,    0, 6764, 6765,
        0,    0, 6785, 6773,    0,    0, 6787,    0,    0, 6786,
     6778, 6779, 6779, 6781,    0, 6773,    0, 6790, 6781,    0,
        0, 6783, 6784, 6784,    0, 6782,    0, 6807,    0,    0,

     6800, 6810, 6810, 6817, 6818, 6820, 6813, 6815,    0, 6831,
        0, 6819,    0,    0, 6831, 6841, 6823, 6826, 6838, 7878,
     7878, 6865, 7878, 7878, 6841, 6827, 6837, 6831, 7878, 6841,
     6839, 6846, 6838, 6838, 7878, 6849, 6883, 7878, 6884, 6876,
     6877, 7878, 6885, 6879, 6889, 6891, 7878, 6890, 7878, 6881,
     6895, 6887, 6899, 6900, 6902, 6882, 6901, 6908, 6891, 6897,
     6909,    0,    0, 6923,    0,    0, 6923, 6926, 6936, 6930,
        0, 6940, 6938, 6944, 6933, 6933,    0, 6933, 6953,    0,
     6954, 6946, 6947,    0, 6955, 6949, 6959, 6960,    0, 6961,
        0, 6947, 6966, 6958, 6979, 6980, 6982, 6972, 6992, 6999,

     6981, 6986, 6998,    0,    0, 7003,    0,    0, 7003, 6989,
     6999, 6993,    0, 7003, 7004, 7010, 6999, 7000,    0, 7003,
     7020,    0, 7022, 7017, 7018,    0, 7035, 7029, 7039, 7050,
        0, 7052,    0, 7038, 7055, 7047, 7059, 7060, 7062, 7042,
     7061, 7068, 7050, 7056, 7068,    0,    0, 7097,    0,    0,
     7071, 7057, 7067, 7061,    0, 7071, 7069, 7075, 7064, 7065,
        0, 7068, 7085,    0, 7097, 7106, 7107,    0, 7115, 7109,
     7119, 7123,    0, 7120,    0, 7106, 7120, 7117, 7129, 7130,
     7132, 7112, 7878, 7118, 7131,  409, 7120, 7140, 7142, 7147,
     7143, 7156, 7151, 7878, 7163, 7878, 7878, 7158, 7153, 7878,

     7156, 7878, 7173, 7878, 7878, 7172, 7878, 7878, 7878, 7878,
     7161, 7167, 7164, 7878, 7878, 7182, 7878, 7878, 7878, 7878,
        0, 7164, 7177,  399, 7170, 7190, 7191, 7192, 7179, 7192,
     7188,    0, 7190,    0,    0, 7184, 7180,    0, 7186,    0,
     7201,    0,    0, 7209,    0,    0,    0,    0, 7198, 7204,
     7211,    0,    0, 7232,    0,    0,    0,    0,    0, 7211,
     7224,  382, 7217, 7237, 7238, 7239, 7226, 7239, 7235,    0,
     7240,    0,    0, 7234, 7229,    0, 7232,    0, 7247,    0,
        0, 7246,    0,    0,    0,    0, 7235, 7241, 7238,    0,
        0, 7285,    0,    0,    0,    0,    0, 7239, 7255,  376,

     7244, 7273, 7286, 7274, 7261, 7287, 7285,    0, 7287,    0,
        0, 7281, 7276,    0, 7279,    0, 7294,    0,    0, 7293,
        0,    0,    0,    0, 7282, 7288, 7288,    0,    0, 7306,
        0,    0,    0,    0, 7299, 7878, 7301, 7291, 7292, 7307,
     7294, 7305, 7313, 7309, 7878, 7318, 7328, 7325, 7878, 7324,
     7878, 7338, 7878, 7343, 7339, 7340,    0, 7344, 7333, 7334,
     7349, 7336, 7345, 7350, 7346,    0, 7346, 7359, 7356,    0,
     7346,    0, 7360,    0, 7364, 7360, 7361,    0, 7363, 7352,
     7355, 7373, 7360, 7378, 7383, 7379,    0, 7388, 7398, 7396,
        0, 7386,    0, 7400,    0, 7406, 7402, 7403,    0, 7405,

     7394, 7395, 7410, 7397, 7406, 7414, 7410,    0, 7410, 7420,
     7417,    0, 7407,    0, 7421,    0, 7425, 7421, 7418, 7878,
     7436, 7433, 7447, 7441, 7445, 7455, 7456, 7444, 7878, 7460,
     7457, 7878, 7464, 7463, 7455,    0, 7470, 7467, 7472, 7466,
     7470, 7471, 7475, 7462,    0, 7478, 7475,    0, 7480, 7479,
     7471,    0, 7486, 7483, 7490, 7487, 7491, 7501, 7502, 7489,
        0, 7514, 7511,    0, 7517, 7516, 7508,    0, 7525, 7522,
     7527, 7521, 7525, 7526, 7527, 7514,    0, 7530, 7530,    0,
     7535, 7534, 7527, 7530, 7878, 7522, 7878, 7878, 7531, 7526,
     7878, 7878, 7878, 7878, 7540, 7535, 7541,    0, 7533,    0,

        0, 7551, 7546,    0,    0,    0,    0, 7560, 7562, 7565,
        0, 7558,    0,    0, 7567, 7562,    0,    0,    0,    0,
     7578, 7571, 7574,    0, 7566,    0,    0, 7575, 7570,    0,
        0,    0,    0, 7584, 7878, 7576, 7580, 7595, 7577, 7878,
        0, 7583, 7587, 7599, 7581,    0,    0, 7587, 7591, 7603,
     7587,    0,    0, 7596, 7600, 7621, 7603,    0, 7617, 7614,
     7878, 7634, 7630, 7618,    0, 7638, 7635, 7623,    0, 7643,
     7638, 7626,    0, 7646, 7878,  336, 7635,    0,  322, 7636,
        0,  314, 7637,    0,  309, 7641, 7635, 7640, 7637, 7642,
     7639, 7644, 7641, 7646, 7647, 7878, 7651,    0, 7652,    0,

     7662,    0, 7680, 7681, 7691, 7692, 7681, 7682, 7683, 7686,
     7682, 7683, 7684, 7685, 7699, 7700, 7701, 7702, 7697, 7698,
     7699, 7700, 7698, 7699, 7700, 7701, 7707, 7710, 7714, 7715,
      219,  211,  203,  195, 7731, 7732, 7733, 7743, 7733, 7735,
     7736, 7737, 7743, 7744, 7745, 7746, 7741, 7742, 7743, 7744,
     7750, 7754, 7755, 7756, 7878,    0,    0,    0, 7878, 7821,
     7826, 7829, 7837, 7845, 7853, 7861, 7869
    } ;

static yyconst flex_int16_t yy_def[3668] =
    {   0,
     3659,    1, 3659,    3, 3659,    5,    5,    5,    5,    5,
     3659,   11, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3659, 3659, 3659, 3661,
     3661, 3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3661, 3661, 3663,
     3664, 3664, 3664, 3664, 3659, 3664, 3664, 3659, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3659, 3664, 3659, 3659, 3665,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3661, 3661,
     3661, 3661, 3661, 3661, 3663, 3663, 3664, 3664, 3664, 3666,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3665, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3659, 3661,
     3661, 3661, 3661, 3661, 3659, 3661, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3659, 3661, 3661, 3661, 3661, 3661,
     3659, 3661, 3663, 3659, 3663, 3666, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3659,
     3661, 3659, 3661, 3661, 3659, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3659, 3659, 3661, 3661,
     3661, 3659, 3667, 3663, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661,
     3659, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3659, 3661,
     3667, 3667, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3661, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3661, 3667, 3667, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3661, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3661, 3667, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662,

     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3664, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3664, 3664, 3664,

     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3659, 3659, 3659,
     3660, 3660, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3662, 3662, 3664, 3664, 3664, 3664, 3664, 3664, 3659, 3659,
     3659, 3659, 3660, 3660, 3660, 3660, 3662, 3662, 3662, 3662,
     3664, 3664, 3664, 3664, 3659, 3659, 3659, 3660, 3660, 3660,
     3662, 3662, 3662, 3664, 3664, 3664, 3659, 3659, 3660, 3660,
     3662, 3662, 3664, 3664, 3659, 3659, 3660, 3660, 3662, 3662,

     3664, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660,
     3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660,
     3662, 3664, 3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,
     3659, 3660, 3662, 3664, 3659, 3660, 3662, 3664,    0, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659
    } ;

static yyconst flex_int16_t yy_nxt[7961] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   14,   18,   19,
       19,   19,   19,   20,   19,   14,   14,   14,   14,   14,
       19,   21,   22,   23,   19,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       48,   14,   14,   15,   16,   15,   17,   49,   14,   14,
       18,   19,   19,   19,   19,   20,   50,   51,   51,   51,

       51,   51,   19,   21,   22,   23,   19,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   75,   77,   75,   78,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   75,   48,   75,   14,   15,   16,   15,   17,   14,
       79,   14,   18,   19,   19,   19,   80,   20,   81,   82,
       82,   82,   82,   82,   19,   21,   22,   23,   19,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  106,   77,   14,   14,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  106,   48,  106,  108, 3638,   80,  109,
      109,  109,  109,  109,  108, 3637,   80,  109,  109,  109,
      109,  109,   19, 3636,   19,  110,  110,  110,  110,  110,
       19, 3635,   19,  110,  110,  110,  110,  110,  111,  112,
      113,   15,  114,  115,  111,  111,   18,  116,  116,  116,
      116,  117,  116,  111,  111,  111,  111,  111,  118,  119,

      120,  121,  118,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  111,  145,  111,  146,
      111,  111,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  111,  145,  111,  147,  111,
      148, 3593,  148,  151,  152,  154, 3591,  199,  200,  228,
      194,  155,  192,  156, 3589,  167,  253,  157,  158,  159,
      160,  161,  168,  162,  195,  193,  169,  163, 3587,  170,
      164,  306,  171,  165,  154,  172,  199,  200,  228,  194,

      155,  192,  156,  166,  167,  253,  157,  158,  159,  160,
      161,  168,  162,  195,  193,  169,  163,  299,  170,  164,
      306,  171,  165,  173,  172,  224,  196,  174, 2225,  307,
      300,  175,  166,  197, 2094,  335,  205,  176,  198,  225,
      177,  478,  226,  148,  206,  227,  299,  481,  482,  201,
      207, 1965,  173,  202,  224,  196,  174,  203,  307,  300,
      175, 1838,  197,  204,  335,  205,  176,  198,  225,  177,
      178,  226,  179,  206,  227,  301,  229,  247,  201,  207,
      230,  180,  202,  181,  231,  248,  203,  360,  182,  302,
      232,  183,  204,  184,  148,  244,  148,  245, 3148,  178,

      246,  179, 2404, 2405,  301,  229,  247,  312, 3106,  230,
      180, 3064,  181,  231,  248,  313,  360,  182,  302,  232,
      183,  314,  184,  185,  244,  354,  245,  186,  208,  246,
      209,  187,  210,  355,  188,  249,  312,  189,  250,  251,
      190,  414,  211,  191,  313,  252,  415,  212,  213, 3022,
      314,  443,  185,  478,  354,  148,  186,  208, 2697,  209,
      187,  210,  355,  188,  249, 2676,  189,  250,  251,  190,
      414,  211,  191,  409,  252,  415,  212,  213,  214,  215,
      443,  468,  216,  233,  351,  234,  352,  410,  217,  353,
      218,  407,  219,  235,  220,  236,  221,  222,  223, 2638,

      237,  238,  409,  529,  408,  530, 2596,  214,  215, 2575,
      468,  216,  233,  351,  234,  352,  410,  217,  353,  218,
      407,  219,  235,  220,  236,  221,  222,  223,  239,  237,
      238, 2537,  529,  408,  530,  240,  241,  255,  255,  255,
      255,  255,  242,  558, 2497,  243,  269,  459,  583,  460,
      270,  256,  461,  271,  522,  524,  272,  239,  257,  258,
      258,  258,  258,  258,  240,  241,  273,  523,  587,  525,
      592,  242,  558,  259,  243,  269,  459,  583,  460,  270,
      256,  461,  271,  522,  524,  272,  476,  476,  476,  476,
      476, 2476,  593,  274,  303,  273,  523,  587,  525,  592,

      275,  304,  259,  261,  276, 2438,  305,  277, 2399,  262,
      278,  263,  594,  279,  595,  264,  265,  266,  267,  268,
      280,  593,  274,  303,  281, 2378,  596,  602,  282,  275,
      304,  603,  261,  276,  283,  305,  277,  284,  262,  278,
      263,  594,  279,  595,  264,  265,  266,  267,  268,  280,
      308, 2502, 2503,  281,  309,  596,  602,  282,  310,  364,
      603, 2536,  604,  283,  311,  462,  284,  285,  577,  286,
      411,  356,  331,  463,  357,  358,  578,  412,  287,  308,
      288,  359,  413,  309,  607,  289,  332,  310,  290,  333,
      291,  604,  334,  311,  462, 2340,  285,  577,  286,  411,

      356,  331,  463,  357,  358,  578,  412,  287, 2276,  288,
      359,  413,  615,  607,  289,  332, 2272,  290,  333,  291,
      292,  334,  336,  622,  293,  315,  337,  316,  294,  317,
      338,  295,  623,  574,  296,  575,  339,  297,  576,  318,
      298,  615,  600,  624,  319,  320, 2601, 2602,  601,  292,
     2271,  336,  622,  293,  315,  337,  316,  294,  317,  338,
      295,  623,  574,  296,  575,  339,  297,  576,  318,  298,
      420,  600,  624,  319,  320,  321,  322,  601,  421,  323,
      340,  590,  341,  616,  422,  324,  625,  325,  617,  326,
      342,  327,  343,  328,  329,  330, 2145,  344,  345,  420,

      626,  627,  591, 2141,  321,  322, 2140,  421,  323,  340,
      590,  341,  616,  422,  324,  625,  325,  617,  326,  342,
      327,  343,  328,  329,  330,  346,  344,  345, 2016,  626,
      627,  591,  347,  348,  362,  362,  362,  362,  362,  349,
      464, 2012,  350,  465,  466,  605,  628,  629,  363,  606,
      467, 2702, 2703,  364,  346,  365,  366,  366,  366,  366,
      366,  347,  348,  891,  891,  891,  891,  891,  349,  464,
      367,  350,  465,  466,  605,  628,  629,  363,  606,  467,
      469,  469,  469,  469,  469, 2635, 2011,  472,  388,  416,
     1889,  377,  389,  417,  470,  378,  390,  418,  379,  367,

      369,  380,  391,  419,  630,  392,  370,  634,  371,  613,
     1885,  381,  372,  373,  374,  375,  376,  388,  416,  614,
      377,  389,  417,  470,  378,  390,  418,  379,  635,  369,
      380,  391,  419,  630,  392,  370,  634,  371,  613,  382,
      381,  372,  373,  374,  375,  376,  383,  423,  614,  424,
      384,  425,  636,  385,  637, 1884,  386,  635,  526,  387,
     1763,  426, 1684,  597,  598,  527,  427,  428,  382, 1604,
      528, 1525, 1447, 1368,  641,  383,  423,  599,  424,  384,
      425,  636,  385,  637,  439,  386, 1294,  526,  387,  393,
      426,  394,  597,  598,  527,  427,  428,  588,  440,  528,

      395,  441,  396,  641,  442,  589,  599,  397,  642,  643,
      398,  444,  399,  439, 1215,  445,  586,  586,  393,  446,
      394,  584,  483,  480,  479,  447,  588,  440,  254,  395,
      441,  396,  644,  442,  589,  645,  397,  642,  643,  398,
      444,  399,  400,  503,  445,  492,  401,  504,  446,  493,
      402,  505,  494,  403,  447,  495,  404,  506,  153,  405,
      507,  644,  406,  150,  645,  496,  149, 3659, 3659,  646,
     3659,  400,  503, 3659,  492,  401,  504, 3659,  493,  402,
      505,  494,  403, 3659,  495,  404,  506,  535,  405,  507,
      647,  406,  429,  430,  496,  536,  431,  448,  646,  449,

      651,  537,  432,  652,  433,  665,  434,  450,  435,  451,
      436,  437,  438, 3659,  452,  453,  535,  666,  656,  647,
     3659,  429,  430,  657,  536,  431,  448, 3659,  449,  651,
      537,  432,  652,  433,  665,  434,  450,  435,  451,  436,
      437,  438,  454,  452,  453,  667,  666,  656, 3659,  455,
      456, 3659,  657,  658, 3659,  659,  457, 3659,  471,  458,
      472,  473,  473,  473,  473,  473,  497,  672, 3659, 3659,
      673,  454, 3659,  498,  667,  474, 3659,  499,  455,  456,
      500,  631,  658,  501,  659,  457,  502,  632,  458, 3659,
     3659, 3659, 3659,  531,  638,  497,  672,  532,  633,  673,

      639,  533,  498,  640,  474,  484,  499,  534,  678,  500,
      631,  485,  501,  486,  679,  502,  632,  487,  488,  489,
      490,  491,  531,  638, 3659,  680,  532,  633, 3659,  639,
      533, 3659,  640, 3659,  484, 3659,  534,  678,  554,  681,
      485,  682,  486,  679,  683, 3659,  487,  488,  489,  490,
      491,  508,  555,  509,  680,  556,  684,  538,  557,  539,
      648,  540,  510,  685,  511,  649,  650,  554,  681,  512,
      682,  541,  513,  683,  514, 3659,  542,  543, 3659, 3659,
      508,  555,  509, 3659,  556,  684,  538,  557,  539,  648,
      540,  510,  685,  511,  649,  650,  660,  686,  512,  687,

      541,  513,  688,  514,  515,  542,  543,  661,  516,  559,
      694,  618,  517,  560,  619,  518,  662,  561,  519,  695,
      620,  520, 3659,  562,  521,  660,  686,  621,  687, 3659,
     3659,  688, 3659,  515, 3659, 3659,  661,  516,  559,  694,
      618,  517,  560,  619,  518,  662,  561,  519,  695,  620,
      520,  653,  562,  521,  544,  545,  621,  696,  546,  563,
      701,  564,  654,  655,  547,  704,  548, 3659,  549,  565,
      550,  566,  551,  552,  553, 3659,  567,  568, 3659, 3659,
      653, 3659, 3659,  544,  545, 3659,  696,  546,  563,  701,
      564,  654,  655,  547,  704,  548,  608,  549,  565,  550,

      566,  551,  552,  553,  569,  567,  568,  609,  610,  611,
      579,  570,  571,  580,  581,  663,  612,  708,  572,  664,
      582,  573,  668,  670,  671,  608,  669,  674,  675,  676,
      677, 3659, 3659,  569, 3659, 3659,  609,  610,  611,  579,
      570,  571,  580,  581,  663,  612,  708,  572,  664,  582,
      573,  668,  670,  671,  689,  669,  674,  675,  676,  677,
      705,  691,  702,  697,  690,  692,  709,  712,  698,  706,
      710,  693,  714,  703,  715, 3659,  726,  707,  713,  729,
      716,  699, 3659,  689,  700, 3659, 3659,  711,  717,  705,
      691,  702,  697,  690,  692,  709,  712,  698,  706,  710,

      693,  714,  703,  715,  718,  726,  707,  713,  729,  716,
      699,  721,  719,  700,  724,  727,  711,  717,  722,  730,
      723,  728,  731,  732,  720,  733,  725,  734,  255,  255,
      255,  255,  255,  718, 1049, 1049, 1049, 1049, 1049, 3659,
      721,  719,  256,  724,  727, 3659, 3659,  722,  730,  723,
      728,  731,  732,  720,  733,  725,  734,  735, 3659,  735,
     3659,  736,  736,  736,  736,  736,  737,  737,  737,  737,
      737,  256,  257,  258,  258,  258,  258,  258,  741,  744,
      738,  746,  747,  748,  739,  742,  739,  259,  740,  740,
      740,  740,  740,  743,  749,  750,  756,  754,  757,  758,

      745,  751,  752,  755,  761,  769, 3659,  741,  744,  738,
      746,  747,  748,  759,  742,  753,  259,  760, 3659, 3659,
     3659, 3659,  743,  749,  750,  756,  754,  757,  758,  745,
      751,  752,  755,  761,  769,  767,  762, 3659,  770,  776,
      777,  778,  759,  771,  753,  768,  760,  763,  764,  765,
      772,  779,  780,  773,  781,  782,  766,  783,  784,  774,
      788, 3659,  789,  790,  767,  762,  775,  770,  776,  777,
      778,  791,  771, 3659,  768,  795,  763,  764,  765,  772,
      779,  780,  773,  781,  782,  766,  783,  784,  774,  788,
      785,  789,  790,  792,  796,  775,  786,  797,  798,  793,

      791,  799,  794,  800,  795,  801,  802,  787,  805,  806,
     3659,  803,  804,  810,  819, 3659, 3659, 3659,  811,  785,
      817, 3659,  792,  796,  818,  786,  797,  798,  793,  820,
      799,  794,  800,  807,  801,  802,  787,  805,  806,  814,
      803,  804,  810,  819,  808,  809,  812,  811,  813,  817,
      815,  821,  822,  818,  824,  825,  823,  826,  820,  816,
      827,  832,  807,  828,  829,  830,  831,  833,  814,  834,
      835,  836,  837,  808,  809,  812,  838,  813,  839,  815,
      821,  822,  840,  824,  825,  823,  826,  841,  816,  827,
      832,  842,  828,  829,  830,  831,  833,  848,  834,  835,

      836,  837,  843,  849,  845,  838,  850,  839,  846,  855,
     3659,  840,  844,  856,  847,  858,  841,  862,  851,  863,
      842,  868, 3659,  852,  857,  869,  848, 3659, 3659, 3659,
     3659,  843,  849,  845,  864,  850,  853,  846,  855,  854,
      859,  844,  856,  847,  858,  866,  862,  851,  863,  860,
      868,  865,  852,  857,  869,  875,  867,  861,  870,  872,
      878,  880,  876,  864,  877,  853,  871,  873,  854,  859,
      881,  883,  879,  884,  866,  885,  882,  886,  860,  874,
      865,  887,  888, 3659,  875,  867,  861,  870,  872,  878,
      880,  876, 3659,  877, 3659,  871,  873, 3659, 3659,  881,

      883,  879,  884, 3659,  885,  882,  886, 3659,  874, 3659,
      887,  888,  362,  362,  362,  362,  362,  889, 3659,  889,
     3659,  890,  890,  890,  890,  890,  363,  892,  892,  892,
      892,  892,  364,  897,  365,  894,  894,  894,  894,  894,
      895,  893,  895,  898,  896,  896,  896,  896,  896,  367,
      900,  899,  902,  903,  904,  363,  905,  906,  910,  907,
      908,  912,  897,  913,  911,  914, 3659,  917, 3659,  925,
      893,  901,  898,  909,  923, 3659,  932,  933,  367,  900,
      899,  902,  903,  904,  924,  905,  906,  910,  907,  908,
      912,  915,  913,  911,  914,  916,  917,  918,  925,  926,

      901,  934,  909,  923,  927,  932,  933,  935,  919,  920,
      921,  936,  937,  924,  938,  939,  928,  922,  940,  929,
      915,  944,  945,  946,  916,  930,  918,  947,  926,  951,
      934,  952,  931,  927,  953,  954,  935,  919,  920,  921,
      936,  937,  955,  938,  939,  928,  922,  940,  929,  941,
      944,  945,  946,  948,  930,  942,  947,  956,  951,  949,
      952,  931,  950,  953,  954,  957,  943,  958,  961,  962,
      966,  955,  959,  960,  968,  967,  969,  975,  941,  973,
     3659,  963,  948,  974,  942,  976,  956,  977,  949,  970,
     3659,  950,  964,  965,  957,  943,  958,  961,  962,  966,

      971,  959,  960,  968,  967,  969,  975,  978,  973,  972,
      963,  979,  974,  988,  976,  989,  977,  990,  970,  980,
      981,  964,  965,  982,  984,  985,  983,  986,  987,  971,
      991,  992,  993,  994,  995,  996,  978,  997,  972,  998,
      979,  999,  988, 1004,  989, 1005,  990, 1006,  980,  981,
     1011, 1000,  982,  984,  985,  983,  986,  987, 1014,  991,
      992,  993,  994,  995,  996, 1001,  997, 3659,  998, 1002,
      999, 1012, 1004, 1018, 1005, 1003, 1006, 1019, 1007, 1011,
     1000, 1022, 1013, 1008, 1015, 1024, 1020, 1014, 1025, 1026,
     3659, 3659, 1023, 1016, 1001, 3659, 1009, 1027, 1002, 1010,

     1012, 1017, 1018, 1021, 1003, 1036, 1019, 1007, 1039, 1040,
     1022, 1013, 1008, 1015, 1024, 1020, 1028, 1025, 1026, 1034,
     1031, 1023, 1016, 1041, 1029, 1009, 1027, 1032, 1010, 1033,
     1017, 1035, 1021, 1037, 1036, 1042, 1030, 1039, 1040, 1038,
     1043, 1044, 3659, 3659, 3659, 1028, 3659, 3659, 1034, 1031,
     1058, 3659, 1041, 1029, 3659, 3659, 1032, 3659, 1033, 3659,
     1035, 3659, 1037, 1063, 1042, 1030, 3659, 3659, 1038, 1043,
     1044,  469,  469,  469,  469,  469, 1045, 3659, 1045, 1058,
     1046, 1046, 1046, 1046, 1046,  470, 1047, 1047, 1047, 1047,
     1047,  471, 1063,  472, 1050, 1050, 1050, 1050, 1050, 1051,

     1048, 1051, 3659, 1052, 1052, 1052, 1052, 1052,  474, 1053,
     1053, 1053, 1053, 1053,  470, 1061, 1059, 1064, 1054, 1065,
     1057,  585, 1066,  585, 1060, 1067,  585, 1068, 1069, 1048,
     1055, 1055, 1055, 1055, 1055, 1073, 1062,  474,  585, 1074,
     3659, 1070,  585, 1071, 1061, 1059, 1064, 1075, 1065, 1072,
     1078, 1066, 1086, 1060, 1067, 1076, 1068, 1069, 1087, 1077,
     1093, 1084, 1079, 1088, 1073, 1062, 1094, 1095, 1074,  585,
     1070, 1085, 1071, 1080, 1081, 1082, 1075, 1089, 1072, 1078,
     1090, 1086, 1083, 1096, 1076, 1097, 1091, 1087, 1077, 1093,
     1084, 1079, 1088, 1092, 1098, 1094, 1095, 1099, 1100, 1101,

     1085, 1102, 1080, 1081, 1082, 1105, 1089, 1103, 1106, 1090,
     1107, 1083, 1096, 1108, 1097, 1091, 1112, 1113, 1104, 1114,
     1115, 1116, 1092, 1098, 1117, 1118, 1099, 1100, 1101, 1109,
     1102, 1122, 1123, 1136, 1105, 1110, 1103, 1106, 1111, 1107,
     1134, 3659, 1108, 3659, 1135, 1112, 1113, 1104, 1114, 1115,
     1116, 1119, 1137, 1117, 1118, 1131, 1120, 1121, 1109, 1124,
     1122, 1123, 1136, 1127, 1110, 1138, 1132, 1111, 1128, 1134,
     1125, 1126, 1129, 1135, 1130, 1133, 1141, 1142, 1139, 3659,
     1119, 1137, 1140, 3659, 1131, 1120, 1121, 1143, 1124, 1149,
     1144, 1150, 1127, 1151, 1138, 1132, 1152, 1128, 1153, 1125,

     1126, 1129, 1154, 1130, 1133, 1141, 1142, 1139, 1145, 1146,
     1155, 1140, 1147, 1148, 1156, 1157, 1143, 1158, 1149, 1144,
     1150, 1159, 1151, 1160, 1162, 1152, 1165, 1153, 1163, 1166,
     1167, 1154, 1172, 1161, 1164, 1175, 1173, 1145, 1146, 1155,
     1179, 1147, 1148, 1156, 1157, 1180, 1158, 1174, 3659, 1168,
     1159, 1176, 1160, 1162, 1169, 1165, 1181, 1163, 1166, 1167,
     1177, 1172, 1161, 1164, 1175, 1173, 1183, 1170, 1178, 1179,
     1171, 1185, 1186, 1182, 1180, 3659, 1174, 1184, 1168, 1187,
     1176, 1192, 1195, 1169, 1189, 1181, 1197, 1188, 1193, 1177,
     1194, 1200, 1190, 1201, 1196, 1183, 1170, 1178, 1202, 1171,

     1185, 1186, 1182, 1198, 1191, 1203, 1184, 1204, 1187, 1199,
     1192, 1195, 1205, 1189, 1206, 1197, 1188, 1193, 1207, 1194,
     1200, 1190, 1201, 1196, 1208, 1209, 1210, 1202, 1211, 1212,
     1213, 1214, 1198, 1191, 1203, 1216, 1204, 1217, 1199, 1220,
     1221, 1205, 1222, 1206, 1223, 1224, 1218, 1207, 1225, 1226,
     1228, 1227, 1229, 1208, 1209, 1210, 1230, 1211, 1212, 1213,
     1214, 1219, 1234, 1239, 1216, 1240, 1217, 1237, 1220, 1221,
     1238, 1222, 1231, 1223, 1224, 1218, 1241, 1225, 1226, 1228,
     1227, 1229, 1235, 1236, 1242, 1230, 1232, 1233, 1243, 1244,
     1219, 1234, 1239, 1245, 1240, 1246, 1237, 1247, 1248, 1238,

     1249, 1231, 1250, 1252, 1253, 1241, 1254, 1255, 1256, 1251,
     1257, 1235, 1236, 1242, 1258, 1232, 1233, 1243, 1244, 1261,
     1262, 1263, 1245, 1259, 1246, 1264, 1247, 1248, 1265, 1249,
     1266, 1250, 1252, 1253, 1267, 1254, 1255, 1256, 1251, 1257,
     1268, 1260, 1269, 1258, 1272, 1270, 1273, 1276, 1261, 1262,
     1263, 1277, 1259, 1278, 1264, 1279, 1274, 1265, 1280, 1266,
     1271, 1281, 1282, 1267, 1283, 1284, 1275, 1285, 1286, 1268,
     1260, 1269, 1287, 1288, 1270, 1291, 1276, 1292, 1293, 1295,
     1277, 1296, 1278, 1297, 1279, 1274, 1289, 1280, 1298, 1271,
     1281, 1282, 1299, 1283, 1284, 1275, 1285, 1286, 1290, 1300,

     1301, 1287, 1288, 1302, 1291, 1303, 1292, 1293, 1295, 1304,
     1296, 1305, 1297, 1306, 1307, 1289, 1308, 1298, 1309, 1310,
     1311, 1299, 1312, 1313, 1314, 1315, 1316, 1290, 1300, 1301,
     1317, 1318, 1302, 1319, 1303, 1320, 1321, 1322, 1304, 1324,
     1305, 1325, 1306, 1307, 1326, 1308, 1323, 1309, 1310, 1311,
     1327, 1312, 1313, 1314, 1315, 1316, 1328, 1329, 1330, 1317,
     1318, 1331, 1319, 1332, 1320, 1321, 1322, 1333, 1324, 1334,
     1325, 1335, 1336, 1326, 1337, 1338, 1339, 1342, 1340, 1327,
     1341, 1343, 1344, 1345, 1346, 1328, 1329, 1330, 1350, 1351,
     1331, 1352, 1332, 1347, 1348, 1353, 1333, 1354, 1334, 1355,

     1335, 1336, 1356, 1337, 1338, 1339, 1342, 1340, 3659, 1341,
     1343, 1344, 1345, 1346, 1359, 1360, 1349, 1350, 1351, 3659,
     1352, 3659, 1347, 1348, 1353, 1361, 1354, 3659, 1355, 3659,
     3659, 1356,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736, 1362, 1359, 1360, 1349,  737,  737,  737,  737,
      737, 1357, 1363, 1357, 1361, 1358, 1358, 1358, 1358, 1358,
      738,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740, 1362, 1364, 1365, 1366, 1367, 1369, 1370, 1371, 1373,
     1374, 1363, 1375, 1376, 1377, 1378, 1379, 1381, 1380,  738,
     1382, 1383, 1387, 1372, 1392, 3659, 3659, 1388, 1389, 3659,

     1393, 1364, 1365, 1366, 1367, 1369, 1370, 1371, 1373, 1374,
     1384, 1375, 1376, 1377, 1378, 1379, 1381, 1380, 1394, 1382,
     1383, 1387, 1372, 1392, 1385, 1386, 1388, 1389, 1390, 1393,
     1395, 1391, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1384,
     1405, 1403, 1406, 1407, 1408, 1409, 1410, 1394, 1404, 1411,
     1412, 1414, 1415, 1385, 1386, 1416, 1417, 1390, 1418, 1395,
     1391, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1413, 1405,
     1403, 1406, 1407, 1408, 1409, 1410, 1419, 1404, 1411, 1412,
     1414, 1415, 1420, 1421, 1416, 1417, 1422, 1418, 1423, 1429,
     1430, 1431, 1425, 1432, 1426, 1433, 1434, 1413, 1435, 1436,

     1437, 1438, 1439, 1424, 1427, 1419, 1440, 1441, 1444, 1442,
     1445, 1420, 1421, 1446, 1428, 1422, 1448, 1423, 1429, 1430,
     1431, 1443, 1432, 1449, 1433, 1434, 1450, 1435, 1436, 1437,
     1438, 1439, 1424, 1427, 1451, 1440, 1441, 1444, 1442, 1445,
     1452, 1453, 1446, 1428, 1454, 1448, 1455, 1456, 1457, 1458,
     1443, 1459, 1449, 1460, 1461, 1450, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1451, 1469, 1470, 1471, 1472, 1473, 1452,
     1453, 1474, 1475, 1454, 1477, 1455, 1456, 1457, 1458, 1478,
     1459, 1476, 1460, 1461, 1479, 1462, 1463, 1464, 1465, 1466,
     1467, 1468, 1480, 1469, 1470, 1471, 1472, 1473, 1481, 1482,

     1474, 1475, 1483, 1477, 1484, 1485, 1486, 1487, 1478, 1488,
     1489, 1490, 1491, 1479, 1492, 1493, 1495, 1494, 1496, 1497,
     1498, 1480, 1499, 3659, 1503, 1504, 1507, 1481, 1482, 1500,
     1501, 1483, 1508, 1484, 1485, 1486, 1487, 1509, 1488, 1489,
     1490, 1491, 3659, 1492, 1493, 1495, 1494, 1496, 1497, 1498,
     1516, 1499, 1502, 1503, 1504, 1507, 1505, 1517, 1500, 1501,
     1506, 1508, 3659, 3659, 3659, 3659, 1509, 1510, 1510, 1510,
     1510, 1510,  890,  890,  890,  890,  890, 3659, 3659, 1516,
     3659, 1502, 1518, 3659, 3659, 1505, 1517, 3659, 3659, 1506,
     1511, 1511, 1511, 1511, 1511,  892,  892,  892,  892,  892,

     1512, 3659, 1512, 3659, 1513, 1513, 1513, 1513, 1513,  893,
      364, 1518,  365, 1514, 1514, 1514, 1514, 1514, 1515, 1515,
     1515, 1515, 1515, 1519, 1520, 1521, 1522,  367,  896,  896,
      896,  896,  896, 1523, 1524, 1526, 1527, 1530,  893, 1531,
     1532, 1533, 1528, 1534, 1535, 1536, 1538, 1537, 1539, 1540,
     1544, 3659, 1519, 1520, 1521, 1522,  367, 1529, 1545, 1546,
     1549, 1550, 1523, 1524, 1526, 1527, 1530, 1541, 1531, 1532,
     1533, 1528, 1534, 1535, 1536, 1538, 1537, 1539, 1540, 1544,
     1547, 1542, 1543, 1548, 1551, 1552, 1529, 1545, 1546, 1549,
     1550, 1553, 1554, 1555, 1556, 1557, 1541, 1558, 1559, 1560,

     1562, 1563, 1564, 1565, 1566, 1567, 1561, 1568, 3659, 1547,
     1542, 1543, 1548, 1551, 1552, 1571, 1572, 1573, 1574, 1569,
     1553, 1554, 1555, 1556, 1557, 1575, 1558, 1559, 1560, 1562,
     1563, 1564, 1565, 1566, 1567, 1561, 1568, 1570, 1576, 1577,
     1578, 1579, 1580, 3659, 1571, 1572, 1573, 1574, 1569, 1586,
     1582, 1587, 1583, 1588, 1575, 1589, 1590, 1581, 1591, 1592,
     1593, 1594, 1584, 1595, 1596, 1597, 1570, 1576, 1577, 1578,
     1579, 1580, 1585, 1598, 1601, 1602, 1603, 1605, 1586, 1606,
     1587, 1607, 1588, 1599, 1589, 1590, 1581, 1591, 1592, 1593,
     1594, 1584, 1595, 1596, 1597, 1600, 1608, 1609, 1610, 1611,

     1612, 1585, 1598, 1601, 1602, 1603, 1605, 1613, 1606, 1614,
     1607, 1615, 1599, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1600, 1608, 1609, 1610, 1611, 1612,
     1627, 1628, 1629, 1630, 1631, 3659, 1613, 1634, 1614, 1635,
     1615, 1636, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
     1624, 1625, 1626, 1637, 1638, 1632, 1639, 1640, 1641, 1627,
     1628, 1629, 1630, 1631, 1633, 1642, 1634, 1643, 1635, 1644,
     1636, 1645, 1646, 1647, 1648, 1649, 1650, 1652, 1651, 1653,
     1654, 1655, 1637, 1638, 1632, 1639, 1640, 1641, 1656, 1657,
     1658, 1660, 1661, 1662, 1642, 1664, 1643, 1663, 1644, 1665,

     1645, 1646, 1647, 1648, 1649, 1650, 1652, 1651, 1653, 1654,
     1655, 1666, 1659, 3659, 3659, 3659, 3659, 1656, 1657, 1658,
     1660, 1661, 1662, 3659, 1664, 3659, 1663, 3659, 1665, 1667,
     1667, 1667, 1667, 1667, 1046, 1046, 1046, 1046, 1046, 3659,
     1666, 1659, 1047, 1047, 1047, 1047, 1047, 1668, 1675, 1668,
     3659, 1669, 1669, 1669, 1669, 1669, 1048, 1670, 1670, 1670,
     1670, 1670,  471, 3659,  472, 1671, 1671, 1671, 1671, 1671,
     1672, 1672, 1672, 1672, 1672, 1054, 1676, 1675, 1677,  474,
     1052, 1052, 1052, 1052, 1052, 1048, 1054, 1053, 1053, 1053,
     1053, 1053, 1673, 1673, 1673, 1673, 1673, 1678, 1674, 1674,

     1674, 1674, 1674, 1057,  585, 1676,  585, 1677,  474,  585,
     1679, 1680, 1681, 1682, 1683, 1685, 1686, 1687, 1689, 1690,
     1691,  585, 1692, 3659, 1693,  585, 1678, 1694, 1695, 1697,
     1696, 1698, 1688, 1699, 1703, 3659, 3659, 1704, 1705, 1679,
     1680, 1681, 1682, 1683, 1685, 1686, 1687, 1689, 1690, 1691,
     1700, 1692,  585, 1693, 1708, 1709, 1694, 1695, 1697, 1696,
     1698, 1688, 1699, 1703, 1701, 1702, 1704, 1705, 1706, 1710,
     1711, 1707, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1700,
     1719, 1721, 1722, 1708, 1709, 1723, 1724, 1720, 1725, 1726,
     1727, 1730, 1731, 1701, 1702, 1728, 1732, 1706, 1710, 1711,

     1707, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1733, 1719,
     1721, 1722, 1734, 1729, 1723, 1724, 1720, 1725, 1726, 1727,
     1730, 1731, 1735, 1736, 1728, 1732, 1737, 1738, 1739, 1745,
     1746, 1747, 1741, 1748, 1742, 1749, 1750, 1733, 1751, 1752,
     1753, 1734, 1729, 1740, 1743, 1754, 1755, 1756, 1757, 1758,
     1760, 1735, 1736, 1761, 1744, 1737, 1738, 1739, 1745, 1746,
     1747, 1759, 1748, 1762, 1749, 1750, 1764, 1751, 1752, 1753,
     1765, 1766, 1740, 1743, 1754, 1755, 1756, 1757, 1758, 1760,
     1767, 1768, 1761, 1744, 1769, 1770, 1771, 1772, 1773, 1774,
     1759, 1775, 1762, 1776, 1777, 1764, 1778, 1779, 1780, 1765,

     1766, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1767,
     1768, 1789, 1790, 1769, 1770, 1771, 1772, 1773, 1774, 1791,
     1775, 1793, 1776, 1777, 1794, 1778, 1779, 1780, 1792, 1795,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1796, 1797,
     1789, 1790, 1798, 1799, 1800, 1801, 1802, 1803, 1791, 1804,
     1793, 1805, 1806, 1794, 1807, 1808, 1811, 1809, 1795, 1810,
     1812, 1813, 1814, 1815, 1816, 1817, 1819, 1796, 1797, 1820,
     1823, 1798, 1799, 1800, 1801, 1802, 1803, 1824, 1804, 1825,
     1805, 1806, 1826, 1807, 1808, 1811, 1809, 1818, 1810, 1812,
     1813, 1814, 1815, 1816, 1817, 1819, 1821, 1827, 1820, 1823,

     1822, 1828, 1829, 1830, 1831, 1832, 1824, 1833, 1825, 1834,
     1835, 1826, 1836, 1837, 1839, 1840, 1818, 1841, 1842, 1843,
     1844, 1845, 1846, 1847, 1848, 1821, 1827, 1849, 1850, 1822,
     1828, 1829, 1830, 1831, 1832, 1854, 1833, 1855, 1834, 1835,
     1838, 1836, 1837, 1839, 1840, 1851, 1841, 1842, 1843, 1844,
     1845, 1846, 1847, 1848, 1856, 1857, 1849, 1850, 1858, 1859,
     1860, 1852, 1861, 1853, 1854, 1862, 1855, 1863, 1864, 1865,
     1866, 1867, 1868, 1869, 1851, 1870, 1871, 1872, 1873, 1874,
     1875, 1876, 1877, 1856, 1857, 1878, 1879, 1858, 1859, 1860,
     1852, 1861, 1853, 1880, 1862, 1881, 1863, 1864, 1865, 1866,

     1867, 1868, 1869, 1882, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1883, 1888, 1878, 1879, 1886, 1890, 1891, 1892,
     1893, 1894, 1880, 1895, 1881, 1896, 1897, 1887, 1898, 1899,
     1900, 1901, 1882, 1902, 1904, 1905, 1906, 1907, 1908, 1909,
     1910, 1883, 1888, 1903, 1911, 1886, 1890, 1891, 1892, 1893,
     1894, 1912, 1895, 1913, 1896, 1897, 1887, 1898, 1899, 1900,
     1901, 1914, 1902, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1915, 1917, 1903, 1911, 1916, 1918, 1919, 1920, 1921, 1922,
     1912, 1923, 1913, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
     1914, 1931, 1932, 1933, 1934, 1935, 1938, 1939, 1936, 1915,

     1917, 1937, 1940, 1916, 1918, 1919, 1920, 1921, 1922, 1941,
     1923, 1942, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1943,
     1931, 1932, 1933, 1934, 1935, 1938, 1939, 1936, 1944, 1945,
     1937, 1940, 1946, 1947, 1948, 1949, 1950, 1951, 1941, 1952,
     1942, 1358, 1358, 1358, 1358, 1358, 1953, 1954, 1943, 1358,
     1358, 1358, 1358, 1358, 1955, 1956, 1957, 1944, 1945, 1958,
     1959, 1946, 1947, 1948, 1949, 1950, 1951, 1960, 1952, 1961,
     1962, 1963, 3659, 1966, 1964, 1953, 1954, 1967, 1968, 1969,
     1970, 1971, 1972, 1955, 1956, 1957, 1973, 1974, 1958, 1959,
     1975, 1976, 1977, 1981, 1982, 1983, 1960, 1984, 1961, 1962,

     1963, 1965, 1966, 1964, 1985, 1986, 1967, 1968, 1969, 1970,
     1971, 1972, 1978, 1987, 1988, 1973, 1974, 1989, 1990, 1975,
     1976, 1977, 1981, 1982, 1983, 1991, 1984, 1992, 1979, 1993,
     1980, 1994, 1995, 1985, 1986, 1996, 1997, 1998, 1999, 2000,
     2001, 1978, 1987, 1988, 2002, 2003, 1989, 1990, 2004, 2005,
     2006, 2007, 2008, 2009, 1991, 2010, 1992, 1979, 1993, 1980,
     1994, 1995, 2015, 2017, 1996, 1997, 1998, 1999, 2000, 2001,
     2018, 2019, 2013, 2002, 2003, 2020, 2021, 2004, 2005, 2006,
     2007, 2008, 2009, 2014, 2010, 2022, 2023, 2024, 2025, 2026,
     2027, 2015, 2017, 2028, 2031, 2032, 2029, 2033, 2034, 2018,

     2019, 2013, 2035, 2036, 2020, 2021, 2030, 2037, 2038, 2039,
     2040, 2041, 2014, 2044, 2022, 2023, 2024, 2025, 2026, 2027,
     2045, 2046, 2028, 2031, 2032, 2029, 2033, 2034, 2047, 2042,
     2048, 2035, 2036, 2043, 2049, 2030, 2037, 2038, 2039, 2040,
     2041, 2050, 2044, 2051, 2052, 2053, 2054, 2055, 2056, 2045,
     2046, 2057, 2058, 2059, 2060, 2061, 2062, 2047, 2042, 2048,
     2065, 2063, 2043, 2049, 2064, 2066, 2067, 2068, 2069, 2070,
     2050, 2071, 2051, 2052, 2053, 2054, 2055, 2056, 2072, 2073,
     2057, 2058, 2059, 2060, 2061, 2062, 2074, 2075, 2076, 2065,
     2063, 2077, 2078, 2064, 2066, 2067, 2068, 2069, 2070, 2079,

     2071, 1510, 1510, 1510, 1510, 1510, 3659, 2072, 2073, 2080,
     2080, 2080, 2080, 2080, 3659, 2074, 2075, 2076, 2082, 2083,
     2077, 2078, 2081, 2081, 2081, 2081, 2081, 2084, 2079, 1513,
     1513, 1513, 1513, 1513,  365, 1514, 1514, 1514, 1514, 1514,
     1515, 1515, 1515, 1515, 1515, 2085, 2086, 2082, 2083,  367,
     2087, 2088, 2089, 2090, 2091, 2092, 2084, 2095, 2093, 2096,
     2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
     3659, 2110, 2111, 2112, 2085, 2086, 2113, 2114,  367, 2087,
     2088, 2089, 2090, 2091, 2092, 2094, 2095, 2093, 2096, 2097,
     2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,

     2110, 2111, 2112, 2115, 2116, 2113, 2114, 2117, 2118, 2119,
     2120, 2121, 2122, 2123, 2124, 2108, 2125, 2109, 2126, 2127,
     2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2107, 2136,
     2137, 2138, 2115, 2116, 2139, 2144, 2117, 2118, 2119, 2120,
     2121, 2122, 2123, 2124, 2108, 2125, 2109, 2126, 2127, 2128,
     2129, 2130, 2131, 2132, 2133, 2134, 2135, 2142, 2136, 2137,
     2138, 2146, 2147, 2139, 2144, 2148, 2149, 2150, 2143, 2151,
     2152, 2153, 2154, 2155, 2156, 2157, 2160, 2158, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2142, 2159, 2169, 2170,
     2146, 2147, 2173, 2174, 2148, 2149, 2150, 2143, 2151, 2152,

     2153, 2154, 2155, 2156, 2157, 2160, 2158, 2161, 2162, 2163,
     2164, 2165, 2166, 2167, 2168, 2171, 2159, 2169, 2170, 2172,
     2175, 2173, 2174, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
     2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2194, 2195, 2193, 2196, 2171, 2197, 2198, 2199, 2172, 2175,
     2200, 2201, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2194,
     2195, 2193, 2196, 2202, 2197, 2198, 2199, 2203, 2204, 2200,
     2201, 2205, 2206, 2207, 2208, 1667, 1667, 1667, 1667, 1667,
     2209, 2209, 2209, 2209, 2209, 1669, 1669, 1669, 1669, 1669,

     3659, 3659, 2202, 3659, 2213, 2214, 2203, 2204, 3659, 3659,
     2205, 2206, 2207, 2208, 2210, 2210, 2210, 2210, 2210,  471,
     2215, 2216, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672,
     1672, 1672, 1054, 2213, 2214, 2217,  474, 2212, 2212, 2212,
     2212, 2212, 2218, 2219, 1053, 1053, 1053, 1053, 1053, 2215,
     2216, 2220, 2221, 2222, 2223, 3659, 2226, 2224, 2227, 2228,
     2229, 2230, 2231, 2232, 2217,  474, 2233, 2234, 2235, 2236,
     2237, 2218, 2219, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
     2220, 2221, 2222, 2223, 2225, 2226, 2224, 2227, 2228, 2229,
     2230, 2231, 2232, 2238, 2248, 2233, 2234, 2235, 2236, 2237,

     2249, 2250, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2239,
     2251, 2240, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
     2260, 2261, 2238, 2248, 2262, 2263, 2264, 2265, 2266, 2249,
     2250, 2267, 2268, 2269, 2270, 2275, 2277, 2278, 2239, 2251,
     2240, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260,
     2261, 2279, 2280, 2262, 2263, 2264, 2265, 2266, 2273, 2281,
     2267, 2268, 2269, 2270, 2275, 2277, 2278, 2282, 2283, 2274,
     2284, 2285, 2286, 2287, 2288, 2289, 2291, 2292, 2293, 2294,
     2279, 2280, 2295, 2296, 2297, 2290, 2298, 2273, 2281, 2299,
     2300, 2301, 3659, 2304, 2305, 2306, 2282, 2283, 2274, 2284,

     2285, 2286, 2287, 2288, 2289, 2291, 2292, 2293, 2294, 2307,
     2308, 2295, 2296, 2297, 2290, 2298, 2309, 2302, 2299, 2300,
     2301, 2303, 2304, 2305, 2306, 2310, 2311, 2312, 2313, 2314,
     2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2307, 2308,
     2323, 2325, 2326, 2324, 2327, 2309, 2302, 2328, 2329, 2330,
     2303, 2331, 2332, 2333, 2310, 2311, 2312, 2313, 2314, 2315,
     2316, 2317, 2318, 2319, 2320, 2321, 2322, 2334, 2335, 2323,
     2325, 2326, 2324, 2327, 2336, 2337, 2328, 2329, 2330, 2338,
     2331, 2332, 2333, 2339, 2341, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2351, 2352, 2334, 2335, 2353, 2354,

     2355, 2356, 2357, 2336, 2337, 2358, 2359, 2360, 2338, 2361,
     2362, 2366, 2339, 2341, 2342, 2343, 2344, 2345, 2346, 2347,
     2348, 2349, 2350, 2351, 2352, 2367, 2368, 2353, 2354, 2355,
     2356, 2357, 2363, 2369, 2358, 2359, 2360, 2370, 2361, 2362,
     2366, 2371, 2364, 2372, 2365, 2373, 2374, 2375, 2376, 2377,
     2379, 2380, 2381, 2382, 2367, 2368, 2383, 2384, 2385, 2386,
     2387, 2363, 2369, 2390, 2388, 2391, 2370, 2389, 2392, 2393,
     2371, 2364, 2372, 2365, 2373, 2374, 2375, 2376, 2377, 2379,
     2380, 2381, 2382, 2394, 2395, 2383, 2384, 2385, 2386, 2387,
     2396, 2397, 2390, 2388, 2391, 2398, 2389, 2392, 2393, 2400,

     2401, 2402, 2403, 2406, 2407, 2408, 2409, 2410, 2411, 2412,
     2413, 2414, 2394, 2395, 2415, 2416, 2417, 2418, 2419, 2396,
     2397, 2420, 2421, 2422, 2398, 2423, 2424, 2425, 2400, 2401,
     2402, 2403, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413,
     2414, 2426, 2427, 2415, 2416, 2417, 2418, 2419, 2428, 2429,
     2420, 2421, 2422, 2430, 2423, 2424, 2425, 2431, 2432, 2433,
     2434, 2435, 2436, 2437, 2439, 2440, 2441, 2442, 2443, 2444,
     2426, 2427, 2445, 2446, 2447, 2448, 2449, 2428, 2429, 2450,
     2451, 2452, 2430, 2453, 2454, 2455, 2431, 2432, 2433, 2434,
     2435, 2436, 2437, 2439, 2440, 2441, 2442, 2443, 2444, 2456,

     2457, 2445, 2446, 2447, 2448, 2449, 2458, 2459, 2450, 2451,
     2452, 2460, 2453, 2454, 2455, 2461, 2464, 2465, 2466, 2467,
     2468, 2469, 2470, 2471, 2472, 2462, 2473, 2463, 2456, 2457,
     2474, 2475, 2477, 2478, 2479, 2458, 2459, 2480, 2481, 2482,
     2460, 2483, 2484, 2485, 2461, 2464, 2465, 2466, 2467, 2468,
     2469, 2470, 2471, 2472, 2462, 2473, 2463, 2488, 2489, 2474,
     2475, 2477, 2478, 2479, 2490, 2491, 2480, 2481, 2482, 2492,
     2483, 2484, 2485, 2486, 2493, 2494, 2487, 2495, 2496, 2498,
     2499, 2500, 2501, 2504, 2505, 2506, 2488, 2489, 2507, 2508,
     2509, 2510, 2511, 2490, 2491, 2512, 2513, 2514, 2492, 2515,

     2516, 2517, 2486, 2493, 2494, 2487, 2495, 2496, 2498, 2499,
     2500, 2501, 2504, 2505, 2506, 2518, 2519, 2507, 2508, 2509,
     2510, 2511, 2520, 2521, 2512, 2513, 2514, 2522, 2515, 2516,
     2517, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,
     2532, 2533, 2534, 2535, 2518, 2519, 2081, 2081, 2081, 2081,
     2081, 2520, 2521, 2538, 2539, 2540, 2522, 2541, 2542, 2543,
     2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532,
     2533, 2534, 2535, 2544, 2545, 2546, 2547, 2548, 2549, 2550,
     2551, 2552, 2538, 2539, 2540, 2553, 2541, 2542, 2543, 2554,
     2555, 2556, 2557, 2558, 2559, 2563, 2564, 2565, 2566, 2567,

     2568, 2560, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,
     2552, 2561, 2569, 2562, 2553, 2570, 2571, 2572, 2554, 2555,
     2556, 2557, 2558, 2559, 2563, 2564, 2565, 2566, 2567, 2568,
     2560, 2573, 2574, 2576, 2577, 2578, 2579, 2580, 2581, 2582,
     2561, 2569, 2562, 2583, 2570, 2571, 2572, 2584, 2585, 2587,
     2588, 2586, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2597,
     2573, 2574, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2598,
     2599, 2600, 2583, 2603, 2604, 2605, 2584, 2585, 2587, 2588,
     2586, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2597, 2606,
     2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2598, 2599,

     2600, 2615, 2603, 2604, 2605, 2616, 2617, 2618, 2619, 2620,
     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2606, 2607,
     2608, 2609, 2610, 2611, 2612, 2613, 2614, 2629, 2630, 2631,
     2615, 2632, 2633, 2634, 2616, 2617, 2618, 2619, 2620, 2621,
     2622, 2623, 2624, 2625, 2626, 2627, 2628, 2209, 2209, 2209,
     2209, 2209, 2639, 2640, 2641, 2642, 2629, 2630, 2631, 2643,
     2632, 2633, 2634, 2636, 2636, 2636, 2636, 2636, 2637, 2637,
     2637, 2637, 2637, 2644, 2645, 2646, 2647, 2648, 2649, 2650,
     2651, 2639, 2640, 2641, 2642, 2652, 2653, 2654, 2643, 2655,
     2656, 2657, 2658, 2659, 2660, 2664, 2665, 2666, 2667, 2668,

     2661, 2669, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651,
     2662, 2670, 2663, 2671, 2652, 2653, 2654, 2672, 2655, 2656,
     2657, 2658, 2659, 2660, 2664, 2665, 2666, 2667, 2668, 2661,
     2669, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2662,
     2670, 2663, 2671, 2682, 2683, 2684, 2672, 2685, 2686, 2688,
     2689, 2687, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2698,
     2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2699, 2700,
     2701, 2704, 2682, 2683, 2684, 2705, 2685, 2686, 2688, 2689,
     2687, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2698, 2706,
     2707, 2708, 2709, 2710, 2711, 2712, 2713, 2699, 2700, 2701,

     2704, 2714, 2715, 2716, 2705, 2717, 2718, 2719, 2720, 2721,
     2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2706, 2707,
     2708, 2709, 2710, 2711, 2712, 2713, 2730, 2731, 2732, 2733,
     2714, 2715, 2716, 2734, 2717, 2718, 2719, 2720, 2721, 2722,
     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2735, 2736, 2737,
     2738, 2739, 2740, 2741, 2742, 2730, 2731, 2732, 2733, 2743,
     2744, 2745, 2734, 2746, 2747, 2748, 2749, 2750, 2751, 2752,
     2753, 2754, 2755, 2756, 2757, 2758, 2735, 2736, 2737, 2738,
     2739, 2740, 2741, 2742, 2759, 2760, 2761, 2762, 2743, 2744,
     2745, 2763, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,

     2754, 2755, 2756, 2757, 2758, 2764, 2765, 2766, 2767, 2768,
     2769, 2770, 2771, 2759, 2760, 2761, 2762, 2772, 2773, 2774,
     2763, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783,
     2784, 2785, 2786, 2787, 2764, 2765, 2766, 2767, 2768, 2769,
     2770, 2771, 2788, 2789, 2790, 2791, 2772, 2773, 2774, 2792,
     2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784,
     2785, 2786, 2787, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
     2800, 2788, 2789, 2790, 2791, 2801, 2802, 2803, 2792, 2804,
     2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814,
     2815, 2816, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800,

     2817, 2818, 2819, 2820, 2801, 2802, 2803, 2821, 2804, 2805,
     2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815,
     2816, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2817,
     2818, 2819, 2820, 2830, 2831, 2832, 2821, 2833, 2834, 2835,
     2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845,
     2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2846, 2847,
     2848, 2849, 2830, 2831, 2832, 2850, 2833, 2834, 2835, 2836,
     2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2851,
     2852, 2853, 2854, 2855, 2856, 2857, 2858, 2846, 2847, 2848,
     2849, 2859, 2860, 2861, 2850, 2862, 2863, 2864, 2865, 2866,

     2867, 2868, 2869, 2870, 2871, 2872, 2873, 3659, 2851, 2852,
     2853, 2854, 2855, 2856, 2857, 2858, 2875, 2876, 2877, 2878,
     2859, 2860, 2861, 2879, 2862, 2863, 2864, 2865, 2866, 2867,
     2868, 2869, 2870, 2871, 2872, 2873, 2874, 2874, 2874, 2874,
     2874, 2880, 2881, 2882, 2883, 2875, 2876, 2877, 2878, 2884,
     2885, 2886, 2879, 2887, 2888, 2889, 2890, 2891, 2892, 2893,
     2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903,
     2880, 2881, 2882, 2883, 2904, 2905, 2906, 2907, 2884, 2885,
     2886, 2908, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894,
     2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2909,

     2910, 2911, 2912, 2904, 2905, 2906, 2907, 2913, 2914, 2915,
     2908, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924,
     2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2909, 2910,
     2911, 2912, 2933, 2934, 2935, 2936, 2913, 2914, 2915, 2937,
     2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925,
     2926, 2927, 2928, 2929, 2930, 2931, 2932, 2938, 2939, 2940,
     2941, 2933, 2934, 2935, 2936, 2942, 2943, 2946, 2937, 2944,
     2944, 2944, 2944, 2944, 2636, 2636, 2636, 2636, 2636, 2945,
     2945, 2945, 2945, 2945, 2947, 2948, 2938, 2939, 2940, 2941,
     2949, 2950, 2951, 2952, 2942, 2943, 2946, 2953, 2954, 2955,

     2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965,
     2966, 2967, 2968, 2947, 2948, 2969, 2970, 2971, 2972, 2949,
     2950, 2951, 2952, 2973, 2974, 2975, 2953, 2954, 2955, 2956,
     2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2976, 2977, 2969, 2970, 2971, 2972, 2978, 2979,
     2980, 2981, 2973, 2974, 2975, 2982, 2983, 2984, 2985, 2986,
     2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2976, 2977, 2998, 2999, 3000, 3001, 2978, 2979, 2980,
     2981, 3002, 3003, 3004, 2982, 2983, 2984, 2985, 2986, 2987,
     2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,

     3005, 3006, 2998, 2999, 3000, 3001, 3007, 3008, 3009, 3010,
     3002, 3003, 3004, 3011, 3012, 3013, 3014, 3015, 3016, 3017,
     3018, 3019, 3020, 3021, 3023, 3024, 3025, 3026, 3027, 3005,
     3006, 3028, 3029, 3030, 3031, 3007, 3008, 3009, 3010, 3032,
     3033, 3034, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018,
     3019, 3020, 3021, 3023, 3024, 3025, 3026, 3027, 3035, 3036,
     3028, 3029, 3030, 3031, 3037, 3038, 3039, 3040, 3032, 3033,
     3034, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
     3050, 3051, 3052, 3053, 3054, 3055, 3056, 3035, 3036, 3057,
     3058, 3059, 3060, 3037, 3038, 3039, 3040, 3061, 3062, 3063,

     3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050,
     3051, 3052, 3053, 3054, 3055, 3056, 3065, 3066, 3057, 3058,
     3059, 3060, 3067, 3068, 3069, 3070, 3061, 3062, 3063, 3071,
     3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081,
     3082, 3083, 3084, 3085, 3086, 3065, 3066, 3087, 3088, 3089,
     3090, 3067, 3068, 3069, 3070, 3091, 3092, 3093, 3071, 3072,
     3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082,
     3083, 3084, 3085, 3086, 3094, 3095, 3087, 3088, 3089, 3090,
     3096, 3097, 3098, 3099, 3091, 3092, 3093, 2874, 2874, 2874,
     2874, 2874, 3100, 3101, 3102, 3103, 3104, 3105, 3107, 3108,

     3109, 3110, 3111, 3094, 3095, 3112, 3113, 3114, 3115, 3096,
     3097, 3098, 3099, 3116, 3117, 3118, 3119, 3120, 3121, 3122,
     3123, 3100, 3101, 3102, 3103, 3104, 3105, 3107, 3108, 3109,
     3110, 3111, 3124, 3125, 3112, 3113, 3114, 3115, 3126, 3127,
     3128, 3129, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123,
     3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139,
     3140, 3124, 3125, 3659, 3659, 3659, 3141, 3126, 3127, 3128,
     3129, 2944, 2944, 2944, 2944, 2944, 3142, 3143, 3144, 3130,
     3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140,
     2636, 2636, 2636, 2636, 2636, 3141, 3145, 3146, 3147, 3149,

     3150, 3151, 3152, 3153, 3154, 3142, 3143, 3144, 3155, 3156,
     3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166,
     3167, 3168, 3169, 3170, 3171, 3145, 3146, 3147, 3149, 3150,
     3151, 3152, 3153, 3154, 3172, 3173, 3174, 3155, 3156, 3157,
     3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167,
     3168, 3169, 3170, 3171, 3175, 3176, 3177, 3178, 3179, 3180,
     3181, 3182, 3183, 3172, 3173, 3174, 3184, 3185, 3186, 3187,
     3194, 3195, 3196, 3197, 3198, 3199, 3659, 3200, 3659, 3659,
     3659, 3201, 3202, 3175, 3176, 3177, 3178, 3179, 3180, 3181,
     3182, 3183, 3188, 3189, 3203, 3184, 3185, 3186, 3187, 3194,

     3195, 3196, 3197, 3198, 3199, 3190, 3200, 3191, 3192, 3193,
     3201, 3202, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3213,
     3211, 3188, 3189, 3203, 3212, 3214, 3215, 3216, 3217, 3218,
     3219, 3220, 3221, 3222, 3190, 3223, 3191, 3192, 3193, 3224,
     3225, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3213, 3211,
     3226, 3227, 3232, 3212, 3214, 3215, 3216, 3217, 3218, 3219,
     3220, 3221, 3222, 3228, 3223, 3229, 3230, 3231, 3224, 3225,
     3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3226,
     3227, 3232, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249,
     3251, 3252, 3228, 3250, 3229, 3230, 3231, 3253, 3254, 3233,

     3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3255, 3256,
     3257, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3251,
     3252, 3258, 3250, 3259, 3260, 3261, 3253, 3254, 3262, 3263,
     3264, 3265, 3270, 3271, 3272, 3273, 3274, 3255, 3256, 3257,
     3275, 3276, 3277, 3266, 3278, 3267, 3268, 3269, 3279, 3280,
     3258, 3281, 3259, 3260, 3261, 3282, 3283, 3262, 3263, 3264,
     3265, 3270, 3271, 3272, 3273, 3274, 3284, 3285, 3286, 3275,
     3276, 3277, 3266, 3278, 3267, 3268, 3269, 3279, 3280, 3287,
     3281, 3289, 3290, 3288, 3282, 3283, 3291, 3292, 3293, 3294,
     3295, 3296, 3297, 3298, 3299, 3284, 3285, 3286, 3300, 3301,

     3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3287, 3316,
     3289, 3290, 3288, 3317, 3318, 3291, 3292, 3293, 3294, 3295,
     3296, 3297, 3298, 3299, 3302, 3303, 3319, 3300, 3301, 3308,
     3309, 3310, 3311, 3312, 3313, 3314, 3315, 3304, 3316, 3305,
     3306, 3307, 3317, 3318, 3320, 3321, 3322, 3323, 3324, 3327,
     3328, 3329, 3325, 3302, 3303, 3319, 3326, 3330, 3331, 3332,
     3333, 3334, 3335, 3336, 3337, 3338, 3304, 3339, 3305, 3306,
     3307, 3340, 3341, 3320, 3321, 3322, 3323, 3324, 3327, 3328,
     3329, 3325, 3342, 3343, 3344, 3326, 3330, 3331, 3332, 3333,
     3334, 3335, 3336, 3337, 3338, 3345, 3339, 3346, 3347, 3348,

     3340, 3341, 3349, 3350, 3351, 3352, 3353, 3354, 3356, 3357,
     3355, 3342, 3343, 3344, 3358, 3359, 3360, 3362, 3363, 3364,
     3361, 3365, 3366, 3367, 3345, 3368, 3346, 3347, 3348, 3369,
     3370, 3349, 3350, 3351, 3352, 3353, 3354, 3356, 3357, 3355,
     3371, 3372, 3373, 3358, 3359, 3360, 3362, 3363, 3364, 3361,
     3365, 3366, 3367, 3374, 3368, 3377, 3378, 3375, 3369, 3370,
     3376, 3379, 3380, 3381, 3383, 3384, 3385, 3382, 3386, 3371,
     3372, 3373, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394,
     3395, 3659, 3374, 3398, 3377, 3378, 3375, 3399, 3400, 3376,
     3379, 3380, 3381, 3383, 3384, 3385, 3382, 3386, 3401, 3404,

     3405, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395,
     3396, 3402, 3398, 3397, 3406, 3403, 3399, 3400, 3407, 3408,
     3409, 3410, 3411, 3412, 3413, 3414, 3415, 3401, 3404, 3405,
     3416, 3417, 3419, 3420, 3418, 3421, 3422, 3423, 3424, 3396,
     3402, 3425, 3397, 3406, 3403, 3426, 3427, 3407, 3408, 3409,
     3410, 3411, 3412, 3413, 3414, 3415, 3428, 3429, 3430, 3416,
     3417, 3419, 3420, 3418, 3421, 3422, 3423, 3424, 3431, 3432,
     3425, 3433, 3434, 3435, 3426, 3427, 3436, 3437, 3438, 3439,
     3440, 3441, 3442, 3443, 3444, 3428, 3429, 3430, 3445, 3446,
     3447, 3448, 3449, 3450, 3451, 3452, 3453, 3431, 3432, 3454,

     3433, 3434, 3435, 3455, 3456, 3436, 3437, 3438, 3439, 3440,
     3441, 3442, 3443, 3444, 3457, 3458, 3459, 3445, 3446, 3447,
     3448, 3449, 3450, 3451, 3452, 3453, 3460, 3461, 3454, 3462,
     3463, 3464, 3455, 3456, 3465, 3466, 3467, 3468, 3469, 3470,
     3471, 3472, 3473, 3457, 3458, 3459, 3474, 3475, 3476, 3477,
     3478, 3479, 3480, 3481, 3482, 3460, 3461, 3483, 3462, 3463,
     3464, 3484, 3485, 3465, 3466, 3467, 3468, 3469, 3470, 3471,
     3472, 3473, 3486, 3487, 3488, 3474, 3475, 3476, 3477, 3478,
     3479, 3480, 3481, 3482, 3489, 3490, 3483, 3491, 3492, 3493,
     3484, 3485, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501,

     3502, 3486, 3487, 3488, 3503, 3504, 3505, 3506, 3507, 3508,
     3509, 3510, 3511, 3489, 3490, 3512, 3491, 3492, 3493, 3513,
     3514, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502,
     3515, 3516, 3517, 3503, 3504, 3505, 3506, 3507, 3508, 3509,
     3510, 3511, 3518, 3519, 3512, 3520, 3521, 3522, 3513, 3514,
     3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3515,
     3516, 3517, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539,
     3540, 3518, 3519, 3541, 3520, 3521, 3522, 3542, 3543, 3523,
     3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3544, 3545,
     3546, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540,

     3547, 3548, 3541, 3549, 3550, 3551, 3542, 3543, 3552, 3553,
     3554, 3555, 3556, 3557, 3558, 3559, 3560, 3544, 3545, 3546,
     3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3547,
     3548, 3570, 3549, 3550, 3551, 3571, 3572, 3552, 3553, 3554,
     3555, 3556, 3557, 3558, 3559, 3560, 3573, 3574, 3575, 3561,
     3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3576, 3577,
     3570, 3578, 3579, 3580, 3571, 3572, 3581, 3582, 3583, 3584,
     3585, 3586, 3588, 3590, 3592, 3573, 3574, 3575, 3594, 3595,
     3596, 3597, 3598, 3599, 3600, 3601, 3602, 3576, 3577, 3603,
     3578, 3579, 3580, 3604, 3605, 3581, 3582, 3583, 3584, 3585,

     3586, 3588, 3590, 3592, 3606, 3607, 3608, 3594, 3595, 3596,
     3597, 3598, 3599, 3600, 3601, 3602, 3609, 3610, 3603, 3611,
     3612, 3613, 3604, 3605, 3614, 3615, 3616, 3617, 3618, 3619,
     3620, 3621, 3622, 3606, 3607, 3608, 3623, 3624, 3625, 3626,
     3627, 3628, 3629, 3630, 3631, 3609, 3610, 3632, 3611, 3612,
     3613, 3633, 3634, 3614, 3615, 3616, 3617, 3618, 3619, 3620,
     3621, 3622, 3639, 3640, 3641, 3623, 3624, 3625, 3626, 3627,
     3628, 3629, 3630, 3631, 3642, 3643, 3632, 3644, 3645, 3646,
     3633, 3634, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654,
     3655, 3639, 3640, 3641, 3656, 3657, 3658, 3659, 3659, 3659,

     3659, 3659, 3659, 3642, 3643, 3659, 3644, 3645, 3646, 3659,
     3659, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655,
     3659, 3659, 3659, 3656, 3657, 3658,  260, 3659,  260,  361,
     3659,  361,  368,  368,  368,  368,  368,  475, 3659,  475,
      475,  475,  475,  475,  475,  477, 3659, 3659,  477,  477,
      477, 3659,  477,  585,  585,  585,  585,  585,  585,  585,
      585, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 2211,
     3659, 2211, 2211, 2211, 2211, 2211, 2211,   13, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659
    } ;

static yyconst flex_int16_t yy_chk[7961] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 3634,    7,    7,
        7,    7,    7,    7,    8, 3633,    8,    8,    8,    8,
        8,    8,    9, 3632,    9,    9,    9,    9,    9,    9,
       10, 3631,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15, 3585,   15,   21,   21,   24, 3582,   33,   34,   40,
       31,   24,   30,   24, 3579,   26,   47,   24,   24,   24,
       24,   24,   26,   25,   31,   30,   26,   25, 3576,   26,
       25,   61,   26,   25,   24,   26,   33,   34,   40,   31,

       24,   30,   24,   25,   26,   47,   24,   24,   24,   24,
       24,   26,   25,   31,   30,   26,   25,   58,   26,   25,
       61,   26,   25,   27,   26,   39,   32,   27, 3300,   62,
       58,   27,   25,   32, 3262,   68,   36,   27,   32,   39,
       27,  112,   39,  112,   36,   39,   58,  119,  119,   35,
       36, 3224,   27,   35,   39,   32,   27,   35,   62,   58,
       27, 3186,   32,   35,   68,   36,   27,   32,   39,   27,
       28,   39,   28,   36,   39,   59,   41,   45,   35,   36,
       41,   28,   35,   28,   41,   45,   35,   76,   28,   59,
       41,   28,   35,   28,  148,   44,  148,   44, 2958,   28,

       44,   28, 1913, 1913,   59,   41,   45,   64, 2887,   41,
       28, 2817,   28,   41,   45,   64,   76,   28,   59,   41,
       28,   64,   28,   29,   44,   73,   44,   29,   37,   44,
       37,   29,   37,   73,   29,   46,   64,   29,   46,   46,
       29,   92,   37,   29,   64,   46,   93,   37,   37, 2748,
       64,   99,   29,  478,   73,  478,   29,   37, 2293,   37,
       29,   37,   73,   29,   46, 2258,   29,   46,   46,   29,
       92,   37,   29,   90,   46,   93,   37,   37,   38,   38,
       99,  107,   38,   42,   72,   42,   72,   90,   38,   72,
       38,   89,   38,   42,   38,   42,   38,   38,   38, 2215,

       42,   42,   90,  131,   89,  132, 2162,   38,   38, 2127,
      107,   38,   42,   72,   42,   72,   90,   38,   72,   38,
       89,   38,   42,   38,   42,   38,   38,   38,   43,   42,
       42, 2084,  131,   89,  132,   43,   43,   50,   50,   50,
       50,   50,   43,  138, 2033,   43,   53,  103,  145,  103,
       53,   50,  103,   53,  128,  129,   53,   43,   51,   51,
       51,   51,   51,   51,   43,   43,   53,  128,  154,  129,
      157,   43,  138,   51,   43,   53,  103,  145,  103,   53,
       50,  103,   53,  128,  129,   53,  110,  110,  110,  110,
      110, 1998,  158,   54,   60,   53,  128,  154,  129,  157,

       54,   60,   51,   52,   54, 1955,   60,   54, 1906,   52,
       54,   52,  159,   54,  160,   52,   52,   52,   52,   52,
       55,  158,   54,   60,   55, 1871,  161,  164,   55,   54,
       60,  165,   52,   54,   55,   60,   54,   55,   52,   54,
       52,  159,   54,  160,   52,   52,   52,   52,   52,   55,
       63, 2040, 2040,   55,   63,  161,  164,   55,   63, 2080,
      165, 2080,  167,   55,   63,  104,   55,   56,  143,   56,
       91,   74,   67,  104,   74,   74,  143,   91,   56,   63,
       56,   74,   91,   63,  169,   56,   67,   63,   56,   67,
       56,  167,   67,   63,  104, 1828,   56,  143,   56,   91,

       74,   67,  104,   74,   74,  143,   91,   56, 1747,   56,
       74,   91,  172,  169,   56,   67, 1742,   56,   67,   56,
       57,   67,   69,  175,   57,   65,   69,   65,   57,   65,
       69,   57,  176,  142,   57,  142,   69,   57,  142,   65,
       57,  172,  163,  177,   65,   65, 2169, 2169,  163,   57,
     1741,   69,  175,   57,   65,   69,   65,   57,   65,   69,
       57,  176,  142,   57,  142,   69,   57,  142,   65,   57,
       95,  163,  177,   65,   65,   66,   66,  163,   95,   66,
       70,  156,   70,  173,   95,   66,  178,   66,  173,   66,
       70,   66,   70,   66,   66,   66, 1588,   70,   70,   95,

      179,  180,  156, 1583,   66,   66, 1582,   95,   66,   70,
      156,   70,  173,   95,   66,  178,   66,  173,   66,   70,
       66,   70,   66,   66,   66,   71,   70,   70, 1431,  179,
      180,  156,   71,   71,   81,   81,   81,   81,   81,   71,
      105, 1426,   71,  105,  105,  168,  181,  182,   81,  168,
      105, 2300, 2300,   82,   71,   82,   82,   82,   82,   82,
       82,   71,   71,  364,  364,  364,  364,  364,   71,  105,
       82,   71,  105,  105,  168,  181,  182,   81,  168,  105,
      108,  108,  108,  108,  108, 2210, 1425, 2210,   86,   94,
     1278,   84,   86,   94,  108,   84,   86,   94,   84,   82,

       83,   84,   86,   94,  183,   86,   83,  185,   83,  171,
     1273,   84,   83,   83,   83,   83,   83,   86,   94,  171,
       84,   86,   94,  108,   84,   86,   94,   84,  186,   83,
       84,   86,   94,  183,   86,   83,  185,   83,  171,   85,
       84,   83,   83,   83,   83,   83,   85,   96,  171,   96,
       85,   96,  187,   85,  188, 1272,   85,  186,  130,   85,
     1145,   96, 1072,  162,  162,  130,   96,   96,   85,  984,
      130,  911,  828,  755,  190,   85,   96,  162,   96,   85,
       96,  187,   85,  188,   98,   85,  674,  130,   85,   87,
       96,   87,  162,  162,  130,   96,   96,  155,   98,  130,

       87,   98,   87,  190,   98,  155,  162,   87,  191,  192,
       87,  100,   87,   98,  601,  100,  585,  150,   87,  100,
       87,  147,  121,  117,  114,  100,  155,   98,   48,   87,
       98,   87,  193,   98,  155,  194,   87,  191,  192,   87,
      100,   87,   88,  125,  100,  123,   88,  125,  100,  123,
       88,  125,  123,   88,  100,  123,   88,  125,   23,   88,
      125,  193,   88,   20,  194,  123,   17,   13,    0,  195,
        0,   88,  125,    0,  123,   88,  125,    0,  123,   88,
      125,  123,   88,    0,  123,   88,  125,  134,   88,  125,
      196,   88,   97,   97,  123,  134,   97,  101,  195,  101,

      199,  134,   97,  200,   97,  206,   97,  101,   97,  101,
       97,   97,   97,    0,  101,  101,  134,  207,  202,  196,
        0,   97,   97,  202,  134,   97,  101,    0,  101,  199,
      134,   97,  200,   97,  206,   97,  101,   97,  101,   97,
       97,   97,  102,  101,  101,  208,  207,  202,    0,  102,
      102,    0,  202,  203,    0,  203,  102,    0,  109,  102,
      109,  109,  109,  109,  109,  109,  124,  211,    0,    0,
      211,  102,    0,  124,  208,  109,    0,  124,  102,  102,
      124,  184,  203,  124,  203,  102,  124,  184,  102,    0,
        0,    0,    0,  133,  189,  124,  211,  133,  184,  211,

      189,  133,  124,  189,  109,  122,  124,  133,  214,  124,
      184,  122,  124,  122,  215,  124,  184,  122,  122,  122,
      122,  122,  133,  189,    0,  216,  133,  184,    0,  189,
      133,    0,  189,    0,  122,    0,  133,  214,  137,  217,
      122,  218,  122,  215,  219,    0,  122,  122,  122,  122,
      122,  126,  137,  126,  216,  137,  220,  135,  137,  135,
      197,  135,  126,  221,  126,  197,  197,  137,  217,  126,
      218,  135,  126,  219,  126,    0,  135,  135,    0,    0,
      126,  137,  126,    0,  137,  220,  135,  137,  135,  197,
      135,  126,  221,  126,  197,  197,  204,  222,  126,  223,

      135,  126,  224,  126,  127,  135,  135,  204,  127,  139,
      227,  174,  127,  139,  174,  127,  204,  139,  127,  228,
      174,  127,    0,  139,  127,  204,  222,  174,  223,    0,
        0,  224,    0,  127,    0,    0,  204,  127,  139,  227,
      174,  127,  139,  174,  127,  204,  139,  127,  228,  174,
      127,  201,  139,  127,  136,  136,  174,  229,  136,  140,
      231,  140,  201,  201,  136,  233,  136,    0,  136,  140,
      136,  140,  136,  136,  136,    0,  140,  140,    0,    0,
      201,    0,    0,  136,  136,    0,  229,  136,  140,  231,
      140,  201,  201,  136,  233,  136,  170,  136,  140,  136,

      140,  136,  136,  136,  141,  140,  140,  170,  170,  170,
      144,  141,  141,  144,  144,  205,  170,  235,  141,  205,
      144,  141,  209,  210,  210,  170,  209,  212,  212,  213,
      213,    0,    0,  141,    0,    0,  170,  170,  170,  144,
      141,  141,  144,  144,  205,  170,  235,  141,  205,  144,
      141,  209,  210,  210,  225,  209,  212,  212,  213,  213,
      234,  226,  232,  230,  225,  226,  236,  238,  230,  234,
      237,  226,  239,  232,  240,    0,  246,  234,  238,  248,
      241,  230,    0,  225,  230,    0,    0,  237,  241,  234,
      226,  232,  230,  225,  226,  236,  238,  230,  234,  237,

      226,  239,  232,  240,  243,  246,  234,  238,  248,  241,
      230,  244,  243,  230,  245,  247,  237,  241,  244,  249,
      244,  247,  250,  251,  243,  252,  245,  253,  255,  255,
      255,  255,  255,  243,  472,  472,  472,  472,  472,    0,
      244,  243,  255,  245,  247,    0,    0,  244,  249,  244,
      247,  250,  251,  243,  252,  245,  253,  256,    0,  256,
        0,  256,  256,  256,  256,  256,  257,  257,  257,  257,
      257,  255,  258,  258,  258,  258,  258,  258,  261,  263,
      257,  264,  265,  266,  259,  262,  259,  258,  259,  259,
      259,  259,  259,  262,  267,  268,  271,  270,  272,  274,

      263,  269,  269,  270,  276,  279,    0,  261,  263,  257,
      264,  265,  266,  275,  262,  269,  258,  275,    0,    0,
        0,    0,  262,  267,  268,  271,  270,  272,  274,  263,
      269,  269,  270,  276,  279,  278,  277,    0,  280,  282,
      283,  284,  275,  280,  269,  278,  275,  277,  277,  277,
      281,  285,  286,  281,  287,  288,  277,  289,  290,  281,
      292,    0,  293,  294,  278,  277,  281,  280,  282,  283,
      284,  295,  280,    0,  278,  297,  277,  277,  277,  281,
      285,  286,  281,  287,  288,  277,  289,  290,  281,  292,
      291,  293,  294,  296,  298,  281,  291,  299,  300,  296,

      295,  301,  296,  302,  297,  303,  304,  291,  306,  307,
        0,  304,  304,  309,  313,    0,    0,    0,  309,  291,
      312,    0,  296,  298,  312,  291,  299,  300,  296,  314,
      301,  296,  302,  308,  303,  304,  291,  306,  307,  311,
      304,  304,  309,  313,  308,  308,  310,  309,  310,  312,
      311,  315,  316,  312,  317,  317,  316,  318,  314,  311,
      318,  321,  308,  319,  319,  320,  320,  322,  311,  323,
      324,  325,  326,  308,  308,  310,  327,  310,  328,  311,
      315,  316,  329,  317,  317,  316,  318,  330,  311,  318,
      321,  331,  319,  319,  320,  320,  322,  334,  323,  324,

      325,  326,  332,  335,  333,  327,  336,  328,  333,  338,
        0,  329,  332,  339,  333,  340,  330,  342,  337,  343,
      331,  346,    0,  337,  339,  347,  334,    0,    0,    0,
        0,  332,  335,  333,  344,  336,  337,  333,  338,  337,
      341,  332,  339,  333,  340,  345,  342,  337,  343,  341,
      346,  344,  337,  339,  347,  351,  345,  341,  348,  350,
      352,  353,  351,  344,  351,  337,  348,  350,  337,  341,
      354,  355,  352,  356,  345,  357,  354,  358,  341,  350,
      344,  359,  360,    0,  351,  345,  341,  348,  350,  352,
      353,  351,    0,  351,    0,  348,  350,    0,    0,  354,

      355,  352,  356,    0,  357,  354,  358,    0,  350,    0,
      359,  360,  362,  362,  362,  362,  362,  363,    0,  363,
        0,  363,  363,  363,  363,  363,  362,  365,  365,  365,
      365,  365,  366,  369,  366,  366,  366,  366,  366,  366,
      367,  365,  367,  370,  367,  367,  367,  367,  367,  366,
      371,  370,  372,  373,  374,  362,  375,  376,  378,  377,
      377,  379,  369,  380,  378,  382,    0,  384,    0,  387,
      365,  371,  370,  377,  386,    0,  390,  391,  366,  371,
      370,  372,  373,  374,  386,  375,  376,  378,  377,  377,
      379,  383,  380,  378,  382,  383,  384,  385,  387,  388,

      371,  392,  377,  386,  388,  390,  391,  393,  385,  385,
      385,  394,  395,  386,  396,  397,  389,  385,  398,  389,
      383,  400,  401,  402,  383,  389,  385,  403,  388,  405,
      392,  406,  389,  388,  407,  408,  393,  385,  385,  385,
      394,  395,  409,  396,  397,  389,  385,  398,  389,  399,
      400,  401,  402,  404,  389,  399,  403,  410,  405,  404,
      406,  389,  404,  407,  408,  411,  399,  412,  414,  415,
      417,  409,  412,  412,  418,  417,  418,  421,  399,  420,
        0,  416,  404,  420,  399,  422,  410,  423,  404,  419,
        0,  404,  416,  416,  411,  399,  412,  414,  415,  417,

      419,  412,  412,  418,  417,  418,  421,  424,  420,  419,
      416,  424,  420,  429,  422,  430,  423,  431,  419,  425,
      425,  416,  416,  426,  427,  427,  426,  428,  428,  419,
      432,  433,  434,  435,  436,  437,  424,  438,  419,  439,
      424,  440,  429,  442,  430,  443,  431,  444,  425,  425,
      446,  440,  426,  427,  427,  426,  428,  428,  448,  432,
      433,  434,  435,  436,  437,  441,  438,    0,  439,  441,
      440,  447,  442,  450,  443,  441,  444,  451,  445,  446,
      440,  453,  447,  445,  449,  454,  452,  448,  455,  456,
        0,    0,  453,  449,  441,    0,  445,  456,  441,  445,

      447,  449,  450,  452,  441,  461,  451,  445,  463,  464,
      453,  447,  445,  449,  454,  452,  458,  455,  456,  460,
      459,  453,  449,  465,  458,  445,  456,  459,  445,  459,
      449,  460,  452,  462,  461,  466,  458,  463,  464,  462,
      467,  468,    0,    0,    0,  458,    0,    0,  460,  459,
      484,    0,  465,  458,    0,    0,  459,    0,  459,    0,
      460,    0,  462,  487,  466,  458,    0,    0,  462,  467,
      468,  469,  469,  469,  469,  469,  470,    0,  470,  484,
      470,  470,  470,  470,  470,  469,  471,  471,  471,  471,
      471,  473,  487,  473,  473,  473,  473,  473,  473,  474,

      471,  474,    0,  474,  474,  474,  474,  474,  473,  475,
      475,  475,  475,  475,  469,  486,  485,  488,  476,  489,
      480,  480,  490,  480,  485,  491,  480,  492,  492,  471,
      476,  476,  476,  476,  476,  494,  486,  473,  480,  495,
        0,  492,  480,  493,  486,  485,  488,  497,  489,  493,
      499,  490,  502,  485,  491,  498,  492,  492,  503,  498,
      505,  501,  500,  503,  494,  486,  506,  507,  495,  480,
      492,  501,  493,  500,  500,  500,  497,  504,  493,  499,
      504,  502,  500,  508,  498,  509,  504,  503,  498,  505,
      501,  500,  503,  504,  510,  506,  507,  511,  512,  513,

      501,  514,  500,  500,  500,  515,  504,  514,  516,  504,
      517,  500,  508,  518,  509,  504,  520,  521,  514,  522,
      523,  524,  504,  510,  525,  526,  511,  512,  513,  519,
      514,  529,  530,  536,  515,  519,  514,  516,  519,  517,
      535,    0,  518,    0,  535,  520,  521,  514,  522,  523,
      524,  527,  537,  525,  526,  534,  527,  527,  519,  531,
      529,  530,  536,  532,  519,  538,  534,  519,  532,  535,
      531,  531,  533,  535,  533,  534,  540,  540,  539,    0,
      527,  537,  539,    0,  534,  527,  527,  541,  531,  544,
      541,  545,  532,  546,  538,  534,  547,  532,  548,  531,

      531,  533,  549,  533,  534,  540,  540,  539,  542,  542,
      550,  539,  543,  543,  551,  552,  541,  553,  544,  541,
      545,  554,  546,  555,  556,  547,  557,  548,  556,  558,
      559,  549,  561,  555,  556,  563,  562,  542,  542,  550,
      565,  543,  543,  551,  552,  566,  553,  562,    0,  560,
      554,  564,  555,  556,  560,  557,  567,  556,  558,  559,
      564,  561,  555,  556,  563,  562,  568,  560,  564,  565,
      560,  569,  570,  567,  566,    0,  562,  568,  560,  571,
      564,  574,  575,  560,  573,  567,  576,  571,  574,  564,
      574,  578,  573,  579,  575,  568,  560,  564,  580,  560,

      569,  570,  567,  577,  573,  581,  568,  582,  571,  577,
      574,  575,  583,  573,  587,  576,  571,  574,  589,  574,
      578,  573,  579,  575,  592,  594,  595,  580,  597,  598,
      599,  600,  577,  573,  581,  602,  582,  603,  577,  605,
      606,  583,  607,  587,  608,  609,  604,  589,  610,  611,
      612,  611,  613,  592,  594,  595,  614,  597,  598,  599,
      600,  604,  616,  619,  602,  620,  603,  618,  605,  606,
      618,  607,  615,  608,  609,  604,  621,  610,  611,  612,
      611,  613,  617,  617,  622,  614,  615,  615,  623,  624,
      604,  616,  619,  625,  620,  626,  618,  627,  629,  618,

      630,  615,  631,  632,  633,  621,  634,  635,  636,  631,
      637,  617,  617,  622,  638,  615,  615,  623,  624,  640,
      641,  642,  625,  639,  626,  643,  627,  629,  644,  630,
      645,  631,  632,  633,  646,  634,  635,  636,  631,  637,
      647,  639,  648,  638,  650,  649,  650,  651,  640,  641,
      642,  654,  639,  655,  643,  656,  650,  644,  657,  645,
      649,  658,  659,  646,  660,  661,  650,  662,  663,  647,
      639,  648,  665,  666,  649,  668,  651,  669,  671,  675,
      654,  676,  655,  677,  656,  650,  667,  657,  678,  649,
      658,  659,  679,  660,  661,  650,  662,  663,  667,  680,

      682,  665,  666,  683,  668,  684,  669,  671,  675,  685,
      676,  686,  677,  687,  688,  667,  689,  678,  690,  691,
      692,  679,  693,  694,  695,  696,  697,  667,  680,  682,
      698,  699,  683,  700,  684,  701,  702,  703,  685,  704,
      686,  705,  687,  688,  706,  689,  703,  690,  691,  692,
      708,  693,  694,  695,  696,  697,  709,  710,  711,  698,
      699,  712,  700,  714,  701,  702,  703,  715,  704,  716,
      705,  717,  718,  706,  719,  720,  721,  723,  722,  708,
      722,  724,  725,  726,  727,  709,  710,  711,  729,  730,
      712,  731,  714,  728,  728,  731,  715,  732,  716,  733,

      717,  718,  734,  719,  720,  721,  723,  722,    0,  722,
      724,  725,  726,  727,  741,  743,  728,  729,  730,    0,
      731,    0,  728,  728,  731,  746,  732,    0,  733,    0,
        0,  734,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  748,  741,  743,  728,  737,  737,  737,  737,
      737,  738,  749,  738,  746,  738,  738,  738,  738,  738,
      737,  739,  739,  739,  739,  739,  740,  740,  740,  740,
      740,  748,  751,  752,  753,  754,  756,  757,  758,  759,
      760,  749,  761,  762,  763,  764,  765,  766,  765,  737,
      767,  768,  770,  758,  773,    0,    0,  771,  771,    0,

      774,  751,  752,  753,  754,  756,  757,  758,  759,  760,
      769,  761,  762,  763,  764,  765,  766,  765,  775,  767,
      768,  770,  758,  773,  769,  769,  771,  771,  772,  774,
      776,  772,  777,  778,  779,  780,  781,  783,  784,  769,
      786,  785,  787,  788,  789,  790,  791,  775,  785,  792,
      793,  794,  795,  769,  769,  796,  797,  772,  798,  776,
      772,  777,  778,  779,  780,  781,  783,  784,  793,  786,
      785,  787,  788,  789,  790,  791,  799,  785,  792,  793,
      794,  795,  800,  801,  796,  797,  802,  798,  803,  805,
      808,  809,  804,  810,  804,  811,  812,  793,  813,  814,

      815,  816,  817,  803,  804,  799,  819,  820,  822,  821,
      823,  800,  801,  825,  804,  802,  829,  803,  805,  808,
      809,  821,  810,  830,  811,  812,  831,  813,  814,  815,
      816,  817,  803,  804,  832,  819,  820,  822,  821,  823,
      833,  834,  825,  804,  836,  829,  837,  838,  839,  840,
      821,  841,  830,  842,  843,  831,  844,  845,  846,  847,
      848,  849,  850,  832,  851,  852,  853,  854,  855,  833,
      834,  856,  857,  836,  858,  837,  838,  839,  840,  859,
      841,  857,  842,  843,  860,  844,  845,  846,  847,  848,
      849,  850,  862,  851,  852,  853,  854,  855,  863,  864,

      856,  857,  865,  858,  866,  868,  869,  870,  859,  871,
      872,  873,  874,  860,  875,  876,  877,  876,  878,  879,
      880,  862,  881,    0,  883,  884,  886,  863,  864,  882,
      882,  865,  887,  866,  868,  869,  870,  888,  871,  872,
      873,  874,    0,  875,  876,  877,  876,  878,  879,  880,
      897,  881,  882,  883,  884,  886,  885,  899,  882,  882,
      885,  887,    0,    0,    0,    0,  888,  889,  889,  889,
      889,  889,  890,  890,  890,  890,  890,    0,    0,  897,
        0,  882,  902,    0,    0,  885,  899,    0,    0,  885,
      891,  891,  891,  891,  891,  892,  892,  892,  892,  892,

      893,    0,  893,    0,  893,  893,  893,  893,  893,  892,
      894,  902,  894,  894,  894,  894,  894,  894,  895,  895,
      895,  895,  895,  904,  905,  907,  908,  894,  896,  896,
      896,  896,  896,  909,  910,  912,  913,  915,  892,  916,
      917,  918,  914,  919,  920,  921,  922,  921,  923,  924,
      926,    0,  904,  905,  907,  908,  894,  914,  927,  927,
      929,  930,  909,  910,  912,  913,  915,  925,  916,  917,
      918,  914,  919,  920,  921,  922,  921,  923,  924,  926,
      928,  925,  925,  928,  931,  932,  914,  927,  927,  929,
      930,  933,  934,  935,  936,  937,  925,  939,  940,  941,

      942,  943,  944,  945,  946,  947,  941,  948,    0,  928,
      925,  925,  928,  931,  932,  950,  951,  952,  953,  949,
      933,  934,  935,  936,  937,  954,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  941,  948,  949,  955,  956,
      957,  958,  959,    0,  950,  951,  952,  953,  949,  961,
      960,  964,  960,  965,  954,  966,  967,  959,  968,  969,
      970,  971,  960,  972,  973,  975,  949,  955,  956,  957,
      958,  959,  960,  976,  978,  979,  981,  985,  961,  986,
      964,  987,  965,  977,  966,  967,  959,  968,  969,  970,
      971,  960,  972,  973,  975,  977,  988,  989,  990,  992,

      993,  960,  976,  978,  979,  981,  985,  994,  986,  995,
      987,  996,  977,  997,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007,  977,  988,  989,  990,  992,  993,
     1008, 1009, 1010, 1011, 1012,    0,  994, 1014,  995, 1015,
      996, 1016,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1018, 1019, 1013, 1020, 1021, 1022, 1008,
     1009, 1010, 1011, 1012, 1013, 1024, 1014, 1025, 1015, 1026,
     1016, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1032, 1034,
     1035, 1036, 1018, 1019, 1013, 1020, 1021, 1022, 1037, 1038,
     1038, 1039, 1040, 1041, 1024, 1042, 1025, 1041, 1026, 1043,

     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1032, 1034, 1035,
     1036, 1044, 1038,    0,    0,    0,    0, 1037, 1038, 1038,
     1039, 1040, 1041,    0, 1042,    0, 1041,    0, 1043, 1045,
     1045, 1045, 1045, 1045, 1046, 1046, 1046, 1046, 1046,    0,
     1044, 1038, 1047, 1047, 1047, 1047, 1047, 1048, 1058, 1048,
        0, 1048, 1048, 1048, 1048, 1048, 1047, 1049, 1049, 1049,
     1049, 1049, 1050,    0, 1050, 1050, 1050, 1050, 1050, 1050,
     1051, 1051, 1051, 1051, 1051, 1053, 1060, 1058, 1063, 1050,
     1052, 1052, 1052, 1052, 1052, 1047, 1055, 1053, 1053, 1053,
     1053, 1053, 1054, 1054, 1054, 1054, 1054, 1065, 1055, 1055,

     1055, 1055, 1055, 1056, 1056, 1060, 1056, 1063, 1050, 1056,
     1066, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077,
     1078, 1056, 1079,    0, 1080, 1056, 1065, 1081, 1082, 1083,
     1082, 1084, 1075, 1085, 1087,    0,    0, 1088, 1088, 1066,
     1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078,
     1086, 1079, 1056, 1080, 1090, 1091, 1081, 1082, 1083, 1082,
     1084, 1075, 1085, 1087, 1086, 1086, 1088, 1088, 1089, 1092,
     1093, 1089, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1086,
     1102, 1103, 1104, 1090, 1091, 1105, 1106, 1102, 1107, 1108,
     1109, 1111, 1112, 1086, 1086, 1110, 1113, 1089, 1092, 1093,

     1089, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1114, 1102,
     1103, 1104, 1115, 1110, 1105, 1106, 1102, 1107, 1108, 1109,
     1111, 1112, 1116, 1117, 1110, 1113, 1118, 1119, 1120, 1122,
     1125, 1126, 1121, 1127, 1121, 1128, 1129, 1114, 1130, 1131,
     1132, 1115, 1110, 1120, 1121, 1133, 1134, 1136, 1137, 1138,
     1139, 1116, 1117, 1140, 1121, 1118, 1119, 1120, 1122, 1125,
     1126, 1138, 1127, 1142, 1128, 1129, 1146, 1130, 1131, 1132,
     1147, 1148, 1120, 1121, 1133, 1134, 1136, 1137, 1138, 1139,
     1149, 1150, 1140, 1121, 1151, 1153, 1154, 1155, 1156, 1157,
     1138, 1158, 1142, 1159, 1160, 1146, 1161, 1162, 1163, 1147,

     1148, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1149,
     1150, 1172, 1173, 1151, 1153, 1154, 1155, 1156, 1157, 1174,
     1158, 1175, 1159, 1160, 1176, 1161, 1162, 1163, 1174, 1177,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1179, 1180,
     1172, 1173, 1181, 1182, 1183, 1185, 1186, 1187, 1174, 1188,
     1175, 1189, 1190, 1176, 1191, 1192, 1194, 1193, 1177, 1193,
     1195, 1196, 1197, 1198, 1199, 1199, 1200, 1179, 1180, 1201,
     1203, 1181, 1182, 1183, 1185, 1186, 1187, 1204, 1188, 1205,
     1189, 1190, 1206, 1191, 1192, 1194, 1193, 1199, 1193, 1195,
     1196, 1197, 1198, 1199, 1199, 1200, 1202, 1207, 1201, 1203,

     1202, 1208, 1209, 1210, 1211, 1212, 1204, 1213, 1205, 1214,
     1215, 1206, 1217, 1220, 1221, 1223, 1199, 1224, 1225, 1226,
     1227, 1228, 1229, 1230, 1231, 1202, 1207, 1232, 1233, 1202,
     1208, 1209, 1210, 1211, 1212, 1235, 1213, 1236, 1214, 1215,
     1220, 1217, 1220, 1221, 1223, 1234, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1237, 1238, 1232, 1233, 1239, 1240,
     1242, 1234, 1243, 1234, 1235, 1246, 1236, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1234, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1264, 1237, 1238, 1265, 1266, 1239, 1240, 1242,
     1234, 1243, 1234, 1268, 1246, 1269, 1248, 1249, 1250, 1251,

     1252, 1253, 1254, 1270, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1264, 1271, 1277, 1265, 1266, 1274, 1282, 1283, 1285,
     1286, 1287, 1268, 1288, 1269, 1289, 1290, 1274, 1291, 1292,
     1294, 1295, 1270, 1296, 1297, 1298, 1299, 1300, 1302, 1303,
     1304, 1271, 1277, 1296, 1305, 1274, 1282, 1283, 1285, 1286,
     1287, 1307, 1288, 1308, 1289, 1290, 1274, 1291, 1292, 1294,
     1295, 1309, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1304,
     1310, 1311, 1296, 1305, 1310, 1312, 1313, 1314, 1315, 1317,
     1307, 1318, 1308, 1319, 1320, 1321, 1323, 1324, 1325, 1326,
     1309, 1327, 1329, 1330, 1331, 1332, 1336, 1337, 1335, 1310,

     1311, 1335, 1339, 1310, 1312, 1313, 1314, 1315, 1317, 1340,
     1318, 1341, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1342,
     1327, 1329, 1330, 1331, 1332, 1336, 1337, 1335, 1343, 1344,
     1335, 1339, 1345, 1346, 1347, 1348, 1349, 1353, 1340, 1354,
     1341, 1357, 1357, 1357, 1357, 1357, 1359, 1360, 1342, 1358,
     1358, 1358, 1358, 1358, 1361, 1362, 1363, 1343, 1344, 1364,
     1365, 1345, 1346, 1347, 1348, 1349, 1353, 1366, 1354, 1367,
     1368, 1370,    0, 1374, 1373, 1359, 1360, 1376, 1377, 1378,
     1379, 1380, 1381, 1361, 1362, 1363, 1382, 1383, 1364, 1365,
     1384, 1385, 1386, 1388, 1389, 1390, 1366, 1391, 1367, 1368,

     1370, 1373, 1374, 1373, 1392, 1393, 1376, 1377, 1378, 1379,
     1380, 1381, 1387, 1395, 1396, 1382, 1383, 1399, 1401, 1384,
     1385, 1386, 1388, 1389, 1390, 1402, 1391, 1403, 1387, 1404,
     1387, 1405, 1406, 1392, 1393, 1407, 1408, 1409, 1410, 1411,
     1412, 1387, 1395, 1396, 1413, 1414, 1399, 1401, 1417, 1418,
     1419, 1421, 1422, 1423, 1402, 1424, 1403, 1387, 1404, 1387,
     1405, 1406, 1430, 1435, 1407, 1408, 1409, 1410, 1411, 1412,
     1436, 1438, 1427, 1413, 1414, 1439, 1440, 1417, 1418, 1419,
     1421, 1422, 1423, 1427, 1424, 1441, 1442, 1443, 1444, 1445,
     1447, 1430, 1435, 1448, 1450, 1451, 1449, 1452, 1453, 1436,

     1438, 1427, 1455, 1456, 1439, 1440, 1449, 1457, 1458, 1460,
     1461, 1462, 1427, 1464, 1441, 1442, 1443, 1444, 1445, 1447,
     1465, 1466, 1448, 1450, 1451, 1449, 1452, 1453, 1467, 1463,
     1468, 1455, 1456, 1463, 1470, 1449, 1457, 1458, 1460, 1461,
     1462, 1471, 1464, 1472, 1473, 1474, 1476, 1477, 1478, 1465,
     1466, 1479, 1480, 1482, 1483, 1484, 1485, 1467, 1463, 1468,
     1489, 1488, 1463, 1470, 1488, 1490, 1492, 1493, 1494, 1495,
     1471, 1496, 1472, 1473, 1474, 1476, 1477, 1478, 1497, 1498,
     1479, 1480, 1482, 1483, 1484, 1485, 1499, 1500, 1501, 1489,
     1488, 1502, 1506, 1488, 1490, 1492, 1493, 1494, 1495, 1507,

     1496, 1510, 1510, 1510, 1510, 1510,    0, 1497, 1498, 1511,
     1511, 1511, 1511, 1511,    0, 1499, 1500, 1501, 1516, 1517,
     1502, 1506, 1512, 1512, 1512, 1512, 1512, 1518, 1507, 1513,
     1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514,
     1515, 1515, 1515, 1515, 1515, 1519, 1520, 1516, 1517, 1514,
     1521, 1522, 1523, 1524, 1525, 1527, 1518, 1531, 1530, 1533,
     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
        0, 1545, 1546, 1547, 1519, 1520, 1548, 1549, 1514, 1521,
     1522, 1523, 1524, 1525, 1527, 1530, 1531, 1530, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,

     1545, 1546, 1547, 1550, 1552, 1548, 1549, 1553, 1556, 1558,
     1559, 1560, 1561, 1562, 1563, 1544, 1564, 1544, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1574, 1575, 1576, 1544, 1578,
     1579, 1580, 1550, 1552, 1581, 1587, 1553, 1556, 1558, 1559,
     1560, 1561, 1562, 1563, 1544, 1564, 1544, 1565, 1566, 1567,
     1568, 1569, 1570, 1571, 1574, 1575, 1576, 1584, 1578, 1579,
     1580, 1592, 1593, 1581, 1587, 1595, 1596, 1597, 1584, 1598,
     1599, 1600, 1601, 1602, 1604, 1605, 1607, 1606, 1608, 1609,
     1610, 1612, 1613, 1614, 1615, 1617, 1584, 1606, 1618, 1619,
     1592, 1593, 1621, 1622, 1595, 1596, 1597, 1584, 1598, 1599,

     1600, 1601, 1602, 1604, 1605, 1607, 1606, 1608, 1609, 1610,
     1612, 1613, 1614, 1615, 1617, 1620, 1606, 1618, 1619, 1620,
     1623, 1621, 1622, 1624, 1625, 1627, 1628, 1629, 1630, 1631,
     1633, 1634, 1635, 1636, 1637, 1639, 1640, 1641, 1642, 1645,
     1646, 1647, 1645, 1649, 1620, 1650, 1651, 1652, 1620, 1623,
     1653, 1654, 1624, 1625, 1627, 1628, 1629, 1630, 1631, 1633,
     1634, 1635, 1636, 1637, 1639, 1640, 1641, 1642, 1645, 1646,
     1647, 1645, 1649, 1655, 1650, 1651, 1652, 1656, 1657, 1653,
     1654, 1658, 1659, 1663, 1664, 1667, 1667, 1667, 1667, 1667,
     1668, 1668, 1668, 1668, 1668, 1669, 1669, 1669, 1669, 1669,

        0,    0, 1655,    0, 1675, 1676, 1656, 1657,    0,    0,
     1658, 1659, 1663, 1664, 1670, 1670, 1670, 1670, 1670, 1671,
     1677, 1678, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672,
     1672, 1672, 1674, 1675, 1676, 1679, 1671, 1673, 1673, 1673,
     1673, 1673, 1680, 1681, 1674, 1674, 1674, 1674, 1674, 1677,
     1678, 1682, 1683, 1684, 1686,    0, 1690, 1689, 1692, 1693,
     1694, 1695, 1696, 1697, 1679, 1671, 1698, 1699, 1700, 1701,
     1702, 1680, 1681, 1704, 1705, 1706, 1707, 1708, 1709, 1711,
     1682, 1683, 1684, 1686, 1689, 1690, 1689, 1692, 1693, 1694,
     1695, 1696, 1697, 1703, 1712, 1698, 1699, 1700, 1701, 1702,

     1715, 1717, 1704, 1705, 1706, 1707, 1708, 1709, 1711, 1703,
     1718, 1703, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1727, 1728, 1703, 1712, 1729, 1730, 1733, 1734, 1735, 1715,
     1717, 1737, 1738, 1739, 1740, 1746, 1751, 1752, 1703, 1718,
     1703, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
     1728, 1754, 1755, 1729, 1730, 1733, 1734, 1735, 1743, 1756,
     1737, 1738, 1739, 1740, 1746, 1751, 1752, 1757, 1758, 1743,
     1759, 1760, 1761, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1754, 1755, 1771, 1772, 1773, 1765, 1774, 1743, 1756, 1776,
     1777, 1778,    0, 1780, 1781, 1782, 1757, 1758, 1743, 1759,

     1760, 1761, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1783,
     1784, 1771, 1772, 1773, 1765, 1774, 1786, 1779, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1787, 1788, 1789, 1790, 1792,
     1793, 1794, 1795, 1796, 1798, 1799, 1800, 1801, 1783, 1784,
     1804, 1805, 1806, 1804, 1808, 1786, 1779, 1809, 1810, 1811,
     1779, 1812, 1813, 1814, 1787, 1788, 1789, 1790, 1792, 1793,
     1794, 1795, 1796, 1798, 1799, 1800, 1801, 1815, 1816, 1804,
     1805, 1806, 1804, 1808, 1817, 1818, 1809, 1810, 1811, 1822,
     1812, 1813, 1814, 1823, 1829, 1830, 1831, 1833, 1834, 1835,
     1836, 1837, 1838, 1840, 1841, 1842, 1815, 1816, 1843, 1844,

     1846, 1848, 1849, 1817, 1818, 1850, 1851, 1852, 1822, 1853,
     1854, 1856, 1823, 1829, 1830, 1831, 1833, 1834, 1835, 1836,
     1837, 1838, 1840, 1841, 1842, 1857, 1858, 1843, 1844, 1846,
     1848, 1849, 1855, 1859, 1850, 1851, 1852, 1860, 1853, 1854,
     1856, 1861, 1855, 1862, 1855, 1863, 1865, 1866, 1867, 1868,
     1873, 1874, 1875, 1877, 1857, 1858, 1879, 1880, 1882, 1883,
     1886, 1855, 1859, 1889, 1887, 1894, 1860, 1887, 1895, 1896,
     1861, 1855, 1862, 1855, 1863, 1865, 1866, 1867, 1868, 1873,
     1874, 1875, 1877, 1897, 1900, 1879, 1880, 1882, 1883, 1886,
     1902, 1904, 1889, 1887, 1894, 1905, 1887, 1895, 1896, 1907,

     1908, 1910, 1912, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1922, 1923, 1897, 1900, 1924, 1926, 1927, 1928, 1929, 1902,
     1904, 1930, 1931, 1932, 1905, 1933, 1934, 1936, 1907, 1908,
     1910, 1912, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1922,
     1923, 1937, 1938, 1924, 1926, 1927, 1928, 1929, 1939, 1940,
     1930, 1931, 1932, 1942, 1933, 1934, 1936, 1943, 1944, 1947,
     1948, 1949, 1950, 1952, 1956, 1957, 1958, 1960, 1961, 1962,
     1937, 1938, 1963, 1964, 1965, 1967, 1968, 1939, 1940, 1969,
     1970, 1971, 1942, 1973, 1975, 1976, 1943, 1944, 1947, 1948,
     1949, 1950, 1952, 1956, 1957, 1958, 1960, 1961, 1962, 1977,

     1978, 1963, 1964, 1965, 1967, 1968, 1979, 1980, 1969, 1970,
     1971, 1981, 1973, 1975, 1976, 1982, 1983, 1984, 1985, 1986,
     1987, 1988, 1989, 1990, 1992, 1982, 1993, 1982, 1977, 1978,
     1994, 1995, 2000, 2001, 2002, 1979, 1980, 2004, 2006, 2007,
     1981, 2009, 2010, 2013, 1982, 1983, 1984, 1985, 1986, 1987,
     1988, 1989, 1990, 1992, 1982, 1993, 1982, 2016, 2021, 1994,
     1995, 2000, 2001, 2002, 2022, 2023, 2004, 2006, 2007, 2024,
     2009, 2010, 2013, 2014, 2027, 2029, 2014, 2031, 2032, 2034,
     2035, 2037, 2039, 2041, 2042, 2043, 2016, 2021, 2044, 2045,
     2046, 2047, 2049, 2022, 2023, 2050, 2051, 2053, 2024, 2054,

     2055, 2056, 2014, 2027, 2029, 2014, 2031, 2032, 2034, 2035,
     2037, 2039, 2041, 2042, 2043, 2057, 2058, 2044, 2045, 2046,
     2047, 2049, 2059, 2060, 2050, 2051, 2053, 2061, 2054, 2055,
     2056, 2063, 2064, 2065, 2066, 2067, 2069, 2070, 2071, 2074,
     2075, 2076, 2077, 2079, 2057, 2058, 2081, 2081, 2081, 2081,
     2081, 2059, 2060, 2085, 2086, 2087, 2061, 2089, 2090, 2091,
     2063, 2064, 2065, 2066, 2067, 2069, 2070, 2071, 2074, 2075,
     2076, 2077, 2079, 2092, 2093, 2094, 2096, 2097, 2098, 2099,
     2100, 2102, 2085, 2086, 2087, 2104, 2089, 2090, 2091, 2105,
     2106, 2107, 2108, 2109, 2110, 2112, 2113, 2114, 2115, 2116,

     2117, 2111, 2092, 2093, 2094, 2096, 2097, 2098, 2099, 2100,
     2102, 2111, 2118, 2111, 2104, 2119, 2121, 2122, 2105, 2106,
     2107, 2108, 2109, 2110, 2112, 2113, 2114, 2115, 2116, 2117,
     2111, 2123, 2124, 2129, 2130, 2131, 2133, 2135, 2136, 2138,
     2111, 2118, 2111, 2139, 2119, 2121, 2122, 2142, 2143, 2145,
     2150, 2143, 2151, 2152, 2153, 2156, 2158, 2160, 2161, 2163,
     2123, 2124, 2129, 2130, 2131, 2133, 2135, 2136, 2138, 2164,
     2166, 2168, 2139, 2170, 2171, 2172, 2142, 2143, 2145, 2150,
     2143, 2151, 2152, 2153, 2156, 2158, 2160, 2161, 2163, 2173,
     2174, 2175, 2176, 2178, 2179, 2180, 2182, 2183, 2164, 2166,

     2168, 2184, 2170, 2171, 2172, 2185, 2186, 2187, 2188, 2189,
     2190, 2192, 2193, 2194, 2195, 2196, 2198, 2199, 2173, 2174,
     2175, 2176, 2178, 2179, 2180, 2182, 2183, 2200, 2203, 2204,
     2184, 2205, 2206, 2208, 2185, 2186, 2187, 2188, 2189, 2190,
     2192, 2193, 2194, 2195, 2196, 2198, 2199, 2209, 2209, 2209,
     2209, 2209, 2216, 2217, 2218, 2220, 2200, 2203, 2204, 2221,
     2205, 2206, 2208, 2211, 2211, 2211, 2211, 2211, 2212, 2212,
     2212, 2212, 2212, 2222, 2223, 2224, 2225, 2227, 2228, 2229,
     2230, 2216, 2217, 2218, 2220, 2231, 2233, 2235, 2221, 2236,
     2237, 2238, 2239, 2240, 2241, 2243, 2244, 2245, 2246, 2247,

     2242, 2248, 2222, 2223, 2224, 2225, 2227, 2228, 2229, 2230,
     2242, 2249, 2242, 2250, 2231, 2233, 2235, 2252, 2236, 2237,
     2238, 2239, 2240, 2241, 2243, 2244, 2245, 2246, 2247, 2242,
     2248, 2253, 2254, 2255, 2260, 2261, 2262, 2264, 2266, 2242,
     2249, 2242, 2250, 2267, 2269, 2270, 2252, 2273, 2274, 2276,
     2281, 2274, 2282, 2283, 2284, 2287, 2289, 2291, 2292, 2294,
     2253, 2254, 2255, 2260, 2261, 2262, 2264, 2266, 2295, 2297,
     2299, 2301, 2267, 2269, 2270, 2302, 2273, 2274, 2276, 2281,
     2274, 2282, 2283, 2284, 2287, 2289, 2291, 2292, 2294, 2303,
     2304, 2305, 2306, 2307, 2309, 2310, 2311, 2295, 2297, 2299,

     2301, 2313, 2314, 2315, 2302, 2316, 2317, 2318, 2319, 2320,
     2321, 2323, 2324, 2325, 2326, 2327, 2329, 2330, 2303, 2304,
     2305, 2306, 2307, 2309, 2310, 2311, 2331, 2334, 2335, 2336,
     2313, 2314, 2315, 2337, 2316, 2317, 2318, 2319, 2320, 2321,
     2323, 2324, 2325, 2326, 2327, 2329, 2330, 2339, 2340, 2342,
     2344, 2346, 2347, 2348, 2349, 2331, 2334, 2335, 2336, 2350,
     2351, 2353, 2337, 2354, 2356, 2357, 2359, 2360, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2368, 2339, 2340, 2342, 2344,
     2346, 2347, 2348, 2349, 2370, 2372, 2375, 2377, 2350, 2351,
     2353, 2378, 2354, 2356, 2357, 2359, 2360, 2361, 2362, 2363,

     2364, 2365, 2366, 2367, 2368, 2379, 2380, 2381, 2382, 2386,
     2387, 2388, 2389, 2370, 2372, 2375, 2377, 2390, 2392, 2393,
     2378, 2394, 2395, 2397, 2399, 2403, 2404, 2405, 2406, 2407,
     2408, 2409, 2410, 2412, 2379, 2380, 2381, 2382, 2386, 2387,
     2388, 2389, 2413, 2414, 2415, 2416, 2390, 2392, 2393, 2417,
     2394, 2395, 2397, 2399, 2403, 2404, 2405, 2406, 2407, 2408,
     2409, 2410, 2412, 2421, 2422, 2424, 2425, 2426, 2427, 2428,
     2429, 2413, 2414, 2415, 2416, 2431, 2434, 2435, 2417, 2436,
     2438, 2440, 2442, 2444, 2445, 2446, 2447, 2448, 2449, 2451,
     2452, 2454, 2421, 2422, 2424, 2425, 2426, 2427, 2428, 2429,

     2455, 2457, 2458, 2459, 2431, 2434, 2435, 2460, 2436, 2438,
     2440, 2442, 2444, 2445, 2446, 2447, 2448, 2449, 2451, 2452,
     2454, 2461, 2462, 2463, 2464, 2465, 2466, 2468, 2470, 2455,
     2457, 2458, 2459, 2473, 2475, 2476, 2460, 2477, 2478, 2479,
     2480, 2484, 2485, 2486, 2487, 2488, 2490, 2491, 2492, 2493,
     2461, 2462, 2463, 2464, 2465, 2466, 2468, 2470, 2495, 2497,
     2501, 2502, 2473, 2475, 2476, 2503, 2477, 2478, 2479, 2480,
     2484, 2485, 2486, 2487, 2488, 2490, 2491, 2492, 2493, 2504,
     2505, 2506, 2507, 2508, 2510, 2511, 2512, 2495, 2497, 2501,
     2502, 2513, 2514, 2515, 2503, 2519, 2520, 2522, 2523, 2524,

     2525, 2526, 2527, 2529, 2532, 2533, 2534,    0, 2504, 2505,
     2506, 2507, 2508, 2510, 2511, 2512, 2537, 2539, 2541, 2543,
     2513, 2514, 2515, 2544, 2519, 2520, 2522, 2523, 2524, 2525,
     2526, 2527, 2529, 2532, 2533, 2534, 2536, 2536, 2536, 2536,
     2536, 2545, 2546, 2547, 2548, 2537, 2539, 2541, 2543, 2550,
     2551, 2553, 2544, 2554, 2556, 2557, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2567, 2569, 2572, 2574, 2575, 2576,
     2545, 2546, 2547, 2548, 2577, 2578, 2579, 2583, 2550, 2551,
     2553, 2584, 2554, 2556, 2557, 2558, 2559, 2560, 2561, 2562,
     2563, 2564, 2565, 2567, 2569, 2572, 2574, 2575, 2576, 2585,

     2586, 2587, 2589, 2577, 2578, 2579, 2583, 2590, 2591, 2592,
     2584, 2594, 2596, 2600, 2601, 2602, 2603, 2604, 2605, 2606,
     2607, 2609, 2610, 2611, 2612, 2613, 2614, 2618, 2585, 2586,
     2587, 2589, 2619, 2621, 2622, 2623, 2590, 2591, 2592, 2624,
     2594, 2596, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607,
     2609, 2610, 2611, 2612, 2613, 2614, 2618, 2625, 2626, 2628,
     2631, 2619, 2621, 2622, 2623, 2632, 2633, 2638, 2624, 2635,
     2635, 2635, 2635, 2635, 2636, 2636, 2636, 2636, 2636, 2637,
     2637, 2637, 2637, 2637, 2640, 2642, 2625, 2626, 2628, 2631,
     2644, 2645, 2646, 2647, 2632, 2633, 2638, 2648, 2649, 2651,

     2652, 2654, 2655, 2657, 2658, 2659, 2660, 2661, 2662, 2663,
     2664, 2665, 2666, 2640, 2642, 2668, 2670, 2673, 2675, 2644,
     2645, 2646, 2647, 2676, 2677, 2678, 2648, 2649, 2651, 2652,
     2654, 2655, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664,
     2665, 2666, 2679, 2680, 2668, 2670, 2673, 2675, 2684, 2685,
     2686, 2687, 2676, 2677, 2678, 2688, 2690, 2691, 2692, 2693,
     2695, 2697, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708,
     2710, 2679, 2680, 2711, 2712, 2713, 2714, 2684, 2685, 2686,
     2687, 2715, 2719, 2720, 2688, 2690, 2691, 2692, 2693, 2695,
     2697, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2710,

     2722, 2723, 2711, 2712, 2713, 2714, 2724, 2725, 2726, 2727,
     2715, 2719, 2720, 2729, 2732, 2733, 2734, 2736, 2737, 2739,
     2741, 2742, 2743, 2745, 2749, 2750, 2751, 2753, 2754, 2722,
     2723, 2755, 2759, 2760, 2763, 2724, 2725, 2726, 2727, 2764,
     2767, 2770, 2729, 2732, 2733, 2734, 2736, 2737, 2739, 2741,
     2742, 2743, 2745, 2749, 2750, 2751, 2753, 2754, 2771, 2772,
     2755, 2759, 2760, 2763, 2773, 2774, 2776, 2778, 2764, 2767,
     2770, 2779, 2782, 2783, 2784, 2786, 2788, 2791, 2792, 2793,
     2794, 2795, 2796, 2797, 2798, 2800, 2802, 2771, 2772, 2805,
     2806, 2808, 2810, 2773, 2774, 2776, 2778, 2811, 2812, 2814,

     2779, 2782, 2783, 2784, 2786, 2788, 2791, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2800, 2802, 2818, 2819, 2805, 2806,
     2808, 2810, 2820, 2822, 2823, 2824, 2811, 2812, 2814, 2828,
     2829, 2832, 2833, 2836, 2839, 2840, 2841, 2842, 2843, 2845,
     2847, 2848, 2851, 2852, 2853, 2818, 2819, 2855, 2857, 2860,
     2861, 2820, 2822, 2823, 2824, 2862, 2863, 2864, 2828, 2829,
     2832, 2833, 2836, 2839, 2840, 2841, 2842, 2843, 2845, 2847,
     2848, 2851, 2852, 2853, 2865, 2866, 2855, 2857, 2860, 2861,
     2867, 2869, 2871, 2875, 2862, 2863, 2864, 2874, 2874, 2874,
     2874, 2874, 2876, 2878, 2880, 2881, 2882, 2884, 2888, 2889,

     2890, 2892, 2893, 2865, 2866, 2894, 2898, 2899, 2902, 2867,
     2869, 2871, 2875, 2903, 2906, 2909, 2910, 2911, 2912, 2913,
     2915, 2876, 2878, 2880, 2881, 2882, 2884, 2888, 2889, 2890,
     2892, 2893, 2917, 2918, 2894, 2898, 2899, 2902, 2921, 2922,
     2923, 2925, 2903, 2906, 2909, 2910, 2911, 2912, 2913, 2915,
     2927, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2939,
     2941, 2917, 2918,    0,    0,    0, 2946, 2921, 2922, 2923,
     2925, 2944, 2944, 2944, 2944, 2944, 2947, 2949, 2951, 2927,
     2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2939, 2941,
     2945, 2945, 2945, 2945, 2945, 2946, 2952, 2953, 2955, 2959,

     2960, 2961, 2963, 2964, 2965, 2947, 2949, 2951, 2969, 2970,
     2973, 2974, 2977, 2980, 2981, 2982, 2983, 2984, 2986, 2988,
     2989, 2992, 2993, 2994, 2996, 2952, 2953, 2955, 2959, 2960,
     2961, 2963, 2964, 2965, 2998, 3001, 3002, 2969, 2970, 2973,
     2974, 2977, 2980, 2981, 2982, 2983, 2984, 2986, 2988, 2989,
     2992, 2993, 2994, 2996, 3003, 3004, 3005, 3006, 3007, 3008,
     3010, 3012, 3015, 2998, 3001, 3002, 3016, 3017, 3018, 3019,
     3025, 3026, 3027, 3028, 3030, 3031,    0, 3032,    0,    0,
        0, 3033, 3034, 3003, 3004, 3005, 3006, 3007, 3008, 3010,
     3012, 3015, 3022, 3022, 3036, 3016, 3017, 3018, 3019, 3025,

     3026, 3027, 3028, 3030, 3031, 3022, 3032, 3022, 3022, 3022,
     3033, 3034, 3037, 3039, 3040, 3041, 3043, 3044, 3045, 3048,
     3046, 3022, 3022, 3036, 3046, 3050, 3051, 3052, 3053, 3054,
     3055, 3056, 3057, 3058, 3022, 3059, 3022, 3022, 3022, 3060,
     3061, 3037, 3039, 3040, 3041, 3043, 3044, 3045, 3048, 3046,
     3064, 3064, 3067, 3046, 3050, 3051, 3052, 3053, 3054, 3055,
     3056, 3057, 3058, 3064, 3059, 3064, 3064, 3064, 3060, 3061,
     3068, 3069, 3070, 3072, 3073, 3074, 3075, 3076, 3078, 3064,
     3064, 3067, 3079, 3081, 3082, 3083, 3085, 3086, 3087, 3088,
     3090, 3092, 3064, 3088, 3064, 3064, 3064, 3093, 3094, 3068,

     3069, 3070, 3072, 3073, 3074, 3075, 3076, 3078, 3095, 3096,
     3097, 3079, 3081, 3082, 3083, 3085, 3086, 3087, 3088, 3090,
     3092, 3098, 3088, 3099, 3100, 3101, 3093, 3094, 3102, 3103,
     3106, 3106, 3109, 3110, 3111, 3112, 3114, 3095, 3096, 3097,
     3115, 3116, 3117, 3106, 3118, 3106, 3106, 3106, 3120, 3121,
     3098, 3123, 3099, 3100, 3101, 3124, 3125, 3102, 3103, 3106,
     3106, 3109, 3110, 3111, 3112, 3114, 3127, 3128, 3129, 3115,
     3116, 3117, 3106, 3118, 3106, 3106, 3106, 3120, 3121, 3130,
     3123, 3132, 3134, 3130, 3124, 3125, 3135, 3136, 3137, 3138,
     3139, 3140, 3141, 3142, 3143, 3127, 3128, 3129, 3144, 3145,

     3151, 3152, 3153, 3154, 3156, 3157, 3158, 3159, 3130, 3160,
     3132, 3134, 3130, 3162, 3163, 3135, 3136, 3137, 3138, 3139,
     3140, 3141, 3142, 3143, 3148, 3148, 3165, 3144, 3145, 3151,
     3152, 3153, 3154, 3156, 3157, 3158, 3159, 3148, 3160, 3148,
     3148, 3148, 3162, 3163, 3166, 3167, 3169, 3170, 3171, 3174,
     3176, 3177, 3172, 3148, 3148, 3165, 3172, 3178, 3179, 3180,
     3181, 3182, 3184, 3185, 3187, 3188, 3148, 3189, 3148, 3148,
     3148, 3189, 3190, 3166, 3167, 3169, 3170, 3171, 3174, 3176,
     3177, 3172, 3191, 3192, 3193, 3172, 3178, 3179, 3180, 3181,
     3182, 3184, 3185, 3187, 3188, 3195, 3189, 3198, 3199, 3201,

     3189, 3190, 3203, 3206, 3211, 3212, 3213, 3216, 3222, 3223,
     3216, 3191, 3192, 3193, 3225, 3226, 3227, 3228, 3229, 3230,
     3227, 3231, 3233, 3236, 3195, 3237, 3198, 3199, 3201, 3239,
     3241, 3203, 3206, 3211, 3212, 3213, 3216, 3222, 3223, 3216,
     3244, 3249, 3250, 3225, 3226, 3227, 3228, 3229, 3230, 3227,
     3231, 3233, 3236, 3251, 3237, 3260, 3261, 3254, 3239, 3241,
     3254, 3263, 3264, 3265, 3266, 3267, 3268, 3265, 3269, 3244,
     3249, 3250, 3271, 3274, 3275, 3277, 3279, 3282, 3287, 3288,
     3289,    0, 3251, 3298, 3260, 3261, 3254, 3299, 3301, 3254,
     3263, 3264, 3265, 3266, 3267, 3268, 3265, 3269, 3302, 3304,

     3305, 3271, 3274, 3275, 3277, 3279, 3282, 3287, 3288, 3289,
     3292, 3303, 3298, 3292, 3306, 3303, 3299, 3301, 3307, 3309,
     3312, 3313, 3315, 3317, 3320, 3325, 3326, 3302, 3304, 3305,
     3327, 3330, 3335, 3337, 3330, 3338, 3339, 3340, 3341, 3292,
     3303, 3342, 3292, 3306, 3303, 3343, 3344, 3307, 3309, 3312,
     3313, 3315, 3317, 3320, 3325, 3326, 3346, 3347, 3348, 3327,
     3330, 3335, 3337, 3330, 3338, 3339, 3340, 3341, 3350, 3352,
     3342, 3354, 3355, 3356, 3343, 3344, 3358, 3359, 3360, 3361,
     3362, 3363, 3364, 3365, 3367, 3346, 3347, 3348, 3368, 3369,
     3371, 3373, 3375, 3376, 3377, 3379, 3380, 3350, 3352, 3381,

     3354, 3355, 3356, 3382, 3383, 3358, 3359, 3360, 3361, 3362,
     3363, 3364, 3365, 3367, 3384, 3385, 3386, 3368, 3369, 3371,
     3373, 3375, 3376, 3377, 3379, 3380, 3388, 3389, 3381, 3390,
     3392, 3394, 3382, 3383, 3396, 3397, 3398, 3400, 3401, 3402,
     3403, 3404, 3405, 3384, 3385, 3386, 3406, 3407, 3409, 3410,
     3411, 3413, 3415, 3417, 3418, 3388, 3389, 3419, 3390, 3392,
     3394, 3421, 3422, 3396, 3397, 3398, 3400, 3401, 3402, 3403,
     3404, 3405, 3423, 3424, 3425, 3406, 3407, 3409, 3410, 3411,
     3413, 3415, 3417, 3418, 3426, 3427, 3419, 3428, 3430, 3431,
     3421, 3422, 3433, 3434, 3435, 3437, 3438, 3439, 3440, 3441,

     3442, 3423, 3424, 3425, 3443, 3444, 3446, 3447, 3449, 3450,
     3451, 3453, 3454, 3426, 3427, 3455, 3428, 3430, 3431, 3456,
     3457, 3433, 3434, 3435, 3437, 3438, 3439, 3440, 3441, 3442,
     3458, 3459, 3460, 3443, 3444, 3446, 3447, 3449, 3450, 3451,
     3453, 3454, 3462, 3463, 3455, 3465, 3466, 3467, 3456, 3457,
     3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3478, 3458,
     3459, 3460, 3479, 3481, 3482, 3483, 3484, 3486, 3489, 3490,
     3495, 3462, 3463, 3496, 3465, 3466, 3467, 3497, 3499, 3469,
     3470, 3471, 3472, 3473, 3474, 3475, 3476, 3478, 3502, 3503,
     3508, 3479, 3481, 3482, 3483, 3484, 3486, 3489, 3490, 3495,

     3509, 3510, 3496, 3512, 3515, 3516, 3497, 3499, 3521, 3522,
     3523, 3525, 3528, 3529, 3534, 3536, 3537, 3502, 3503, 3508,
     3538, 3539, 3542, 3543, 3544, 3545, 3548, 3549, 3550, 3509,
     3510, 3551, 3512, 3515, 3516, 3554, 3555, 3521, 3522, 3523,
     3525, 3528, 3529, 3534, 3536, 3537, 3556, 3557, 3559, 3538,
     3539, 3542, 3543, 3544, 3545, 3548, 3549, 3550, 3560, 3562,
     3551, 3563, 3564, 3566, 3554, 3555, 3567, 3568, 3570, 3571,
     3572, 3574, 3577, 3580, 3583, 3556, 3557, 3559, 3586, 3587,
     3588, 3589, 3590, 3591, 3592, 3593, 3594, 3560, 3562, 3595,
     3563, 3564, 3566, 3597, 3599, 3567, 3568, 3570, 3571, 3572,

     3574, 3577, 3580, 3583, 3601, 3603, 3604, 3586, 3587, 3588,
     3589, 3590, 3591, 3592, 3593, 3594, 3605, 3606, 3595, 3607,
     3608, 3609, 3597, 3599, 3610, 3611, 3612, 3613, 3614, 3615,
     3616, 3617, 3618, 3601, 3603, 3604, 3619, 3620, 3621, 3622,
     3623, 3624, 3625, 3626, 3627, 3605, 3606, 3628, 3607, 3608,
     3609, 3629, 3630, 3610, 3611, 3612, 3613, 3614, 3615, 3616,
     3617, 3618, 3635, 3636, 3637, 3619, 3620, 3621, 3622, 3623,
     3624, 3625, 3626, 3627, 3638, 3639, 3628, 3640, 3641, 3642,
     3629, 3630, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650,
     3651, 3635, 3636, 3637, 3652, 3653, 3654,    0,    0,    0,

        0,    0,    0, 3638, 3639,    0, 3640, 3641, 3642,    0,
        0, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651,
        0,    0,    0, 3652, 3653, 3654, 3660,    0, 3660, 3661,
        0, 3661, 3662, 3662, 3662, 3662, 3662, 3663,    0, 3663,
     3663, 3663, 3663, 3663, 3663, 3664,    0,    0, 3664, 3664,
     3664,    0, 3664, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3667,
        0, 3667, 3667, 3667, 3667, 3667, 3667, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,

     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3660 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3659 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 220:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 221:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 222:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 223:
case 224:
case 225:
case 226:
case 227:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 228:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 231:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 232:
case 233:
case 234:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 235:
case 236:
case 237:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 238:
case 239:
case 240:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 241:
case 242:
case 243:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 244:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 249:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 250:
/* rule 250 can match eol */
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 253:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
YY_RULE_SETUP
{}
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 258:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 259:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3660 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3660 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3659);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8StringBuffer sBuffer (256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (delim);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (delim);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (ch);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8StringBuffer sBuffer(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer.charAt(i)) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									{
									if (checkForSign)
										{
										if (sBuffer.charAt(i) == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer.makeStringAndClear(), isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(ch);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(ch);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

