#line 3 "c:\\dev\\bsw\\dgndb\\06dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\dgndb\\06dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 259
#define YY_END_OF_BUFFER 260
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3661] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      254,  254,  260,  258,  256,  255,  258,  220,  247,  220,
      212,  214,  213,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  220,  245,  220,
      222,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  248,  246,  249,  220,
      220,  229,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  220,  229,  258,
      254,  254,  254,  254,  252,  220,  220,  220,  220,  212,
      214,  213,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  253,  220,  256,  218,
        0,  215,  217,  216,    0,    0,    0,    0,    7,    9,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,  103,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  129,    0,    0,    0,    0,  140,    0,  143,    0,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  188,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  219,  223,    0,  224,  222,    0,
      221,  221,  221,  221,  221,    7,    9,  221,  221,  221,
      221,  221,  221,   21,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,   93,  103,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  129,  221,
      221,  221,  221,  140,  221,  143,  221,  146,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  188,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  244,  234,  244,  244,  244,  229,  244,  228,  228,
      228,  228,  228,    7,    9,  228,  228,  228,  228,  228,
      228,   21,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,   93,  103,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  129,  228,  228,  228,
      228,  140,  228,  143,  228,  146,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  188,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  240,
      244,  244,  244,  229,  244,    0,  250,  254,  254,  218,
      254,  215,  217,  216,  254,  254,  254,  254,    7,    9,
      254,  254,  254,  254,  254,  254,   21,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,   93,  103,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  129,  254,  254,  254,  254,  140,  254,  143,  254,
      146,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  188,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  219,    0,  257,    0,    2,    0,
        4,    5,    0,    8,    0,    0,   12,    0,    0,    0,

        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   51,   56,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       97,    0,  105,  106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  117,  119,    0,    0,    0,    0,
      127,    0,  130,  131,    0,    0,    0,    0,    0,    0,
        0,  142,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  167,    0,    0,    0,  174,    0,    0,
        0,    0,    0,  179,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  227,  224,    0,    0,
      225,  221,    2,  221,    4,    5,  221,    8,  221,  221,
       12,  221,  221,  221,  221,   18,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,   51,   56,  221,  221,  221,  221,  221,  221,  221,
      221,  221,   68,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,   81,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,   97,  221,  105,  106,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  117,  119,
      221,  221,  221,  221,  127,  221,  130,  131,  221,  221,
      221,  221,  221,  221,  221,  142,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  167,  221,  221,
      221,  174,  221,  221,  221,  221,  221,  179,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,    0,
      237,  244,  232,  244,  229,    0,  235,  228,    2,  228,

        4,    5,  228,    8,  228,  228,   12,  228,  228,  228,
      228,   18,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   51,   56,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   68,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   81,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
       97,  228,  105,  106,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  117,  119,  228,  228,  228,  228,
      127,  228,  130,  131,  228,  228,  228,  228,  228,  228,
      228,  142,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  167,  228,  228,  228,  174,  228,  228,
      228,  228,  228,  179,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,    0,  243,  238,  244,  244,
      229,    0,  241,  250,    0,  250,  254,  254,  254,    2,
      254,    4,    5,  254,    8,  254,  254,   12,  254,  254,
      254,  254,   18,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,   51,   56,
      254,  254,  254,  254,  254,  254,  254,  254,  254,   68,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       81,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,   97,  254,  105,  106,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  117,  119,  254,  254,  254,
      254,  127,  254,  130,  131,  254,  254,  254,  254,  254,
      254,  254,  142,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  167,  254,  254,  254,  174,  254,
      254,  254,  254,  254,  179,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,   22,   23,
       24,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
        0,   61,    0,    0,   64,   65,    0,   67,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   86,   87,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,  102,  104,    0,  108,  110,
      111,  112,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,  128,    0,    0,  134,    0,    0,    0,

        0,  144,    0,    0,    0,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,  168,    0,    0,    0,    0,    0,  176,    0,
        0,    0,    0,  182,  183,    0,    0,    0,  191,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      204,  205,  206,    0,  208,  210,  211,    0,  226,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,   20,
      221,   22,   23,   24,  221,   28,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,   47,  221,  221,
      221,  221,  221,  221,   61,  221,  221,   64,   65,  221,

       67,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,   86,   87,  221,  221,  221,
       91,  221,  221,  221,  221,  221,  221,  221,  102,  104,
      221,  108,  110,  111,  112,  221,  221,  115,  221,  221,
      221,  221,  221,  221,  221,  221,  128,  221,  221,  134,
      221,  221,  221,  221,  144,  221,  221,  221,  221,  150,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  162,
      221,  221,  221,  221,  221,  168,  221,  221,  221,  221,
      221,  176,  221,  221,  221,  221,  182,  183,  221,  221,
      221,  191,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  204,  205,  206,  221,  208,  210,  211,
      237,  244,    0,  236,  229,  235,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,   20,  228,   22,   23,
       24,  228,   28,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,   47,  228,  228,  228,  228,  228,
      228,   61,  228,  228,   64,   65,  228,   67,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,   86,   87,  228,  228,  228,   91,  228,  228,
      228,  228,  228,  228,  228,  102,  104,  228,  108,  110,
      111,  112,  228,  228,  115,  228,  228,  228,  228,  228,

      228,  228,  228,  128,  228,  228,  134,  228,  228,  228,
      228,  144,  228,  228,  228,  228,  150,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  162,  228,  228,  228,
      228,  228,  168,  228,  228,  228,  228,  228,  176,  228,
      228,  228,  228,  182,  183,  228,  228,  228,  191,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      204,  205,  206,  228,  208,  210,  211,  243,    0,  242,
      244,  229,  241,    0,  250,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,   20,  254,   22,   23,   24,
      254,   28,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,   47,  254,  254,  254,  254,  254,  254,
       61,  254,  254,   64,   65,  254,   67,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,   86,   87,  254,  254,  254,   91,  254,  254,  254,
      254,  254,  254,  254,  102,  104,  254,  108,  110,  111,
      112,  254,  254,  115,  254,  254,  254,  254,  254,  254,
      254,  254,  128,  254,  254,  134,  254,  254,  254,  254,
      144,  254,  254,  254,  254,  150,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  162,  254,  254,  254,  254,
      254,  168,  254,  254,  254,  254,  254,  176,  254,  254,

      254,  254,  182,  183,  254,  254,  254,  191,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  204,
      205,  206,  254,  208,  210,  211,    1,    3,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,   27,
        0,    0,    0,    0,    0,   34,    0,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   69,    0,    0,    0,    0,   75,
       76,   77,   79,    0,    0,    0,   85,    0,   89,    0,
        0,   94,    0,    0,   98,   99,    0,    0,  107,    0,
      113,  114,  116,  118,    0,  121,    0,    0,  125,  126,

        0,  133,    0,  136,    0,    0,    0,    0,    0,  147,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  161,    0,    0,    0,  170,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  181,    0,    0,    0,    0,
        0,  193,    0,    0,    0,  197,  198,  202,    0,    0,
        0,  207,    0,    1,    3,  221,  221,  221,  221,   14,
      221,  221,  221,  221,  221,  221,   27,  221,  221,  221,
      221,  221,   34,  221,   36,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,   69,  221,  221,  221,  221,   75,   76,   77,   79,

      221,  221,  221,   85,  221,   89,  221,  221,   94,  221,
      221,   98,   99,  221,  221,  107,  221,  113,  114,  116,
      118,  221,  121,  221,  221,  125,  126,  221,  133,  221,
      136,  221,  221,  221,  221,  221,  147,  221,  149,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  161,  221,
      221,  221,  170,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  181,  221,  221,  221,  221,  221,  193,  221,
      221,  221,  197,  198,  202,  221,  221,  221,  207,  221,
      230,  236,    1,    3,  228,  228,  228,  228,   14,  228,
      228,  228,  228,  228,  228,   27,  228,  228,  228,  228,

      228,   34,  228,   36,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
       69,  228,  228,  228,  228,   75,   76,   77,   79,  228,
      228,  228,   85,  228,   89,  228,  228,   94,  228,  228,
       98,   99,  228,  228,  107,  228,  113,  114,  116,  118,
      228,  121,  228,  228,  125,  126,  228,  133,  228,  136,
      228,  228,  228,  228,  228,  147,  228,  149,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  161,  228,  228,
      228,  170,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  181,  228,  228,  228,  228,  228,  193,  228,  228,

      228,  197,  198,  202,  228,  228,  228,  207,  228,  242,
      231,    0,  251,    1,    3,  254,  254,  254,  254,   14,
      254,  254,  254,  254,  254,  254,   27,  254,  254,  254,
      254,  254,   34,  254,   36,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,   69,  254,  254,  254,  254,   75,   76,   77,   79,
      254,  254,  254,   85,  254,   89,  254,  254,   94,  254,
      254,   98,   99,  254,  254,  107,  254,  113,  114,  116,
      118,  254,  121,  254,  254,  125,  126,  254,  133,  254,
      136,  254,  254,  254,  254,  254,  147,  254,  149,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  161,  254,
      254,  254,  170,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  181,  254,  254,  254,  254,  254,  193,  254,
      254,  254,  197,  198,  202,  254,  254,  254,  207,  254,
        0,   10,    0,   13,    0,   17,    0,    0,    0,    0,
        0,    0,   31,    0,    0,   35,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
        0,   63,    0,   70,   71,    0,   73,    0,    0,    0,
        0,    0,    0,   90,   92,   95,    0,    0,    0,    0,
        0,  120,    0,    0,    0,    0,  135,    0,  138,    0,

      141,  145,  148,    0,    0,    0,    0,    0,    0,    0,
        0,  159,    0,    0,    0,    0,    0,    0,  171,  172,
      173,    0,    0,  180,    0,    0,    0,    0,    0,    0,
      194,    0,  196,  203,    0,    0,    0,  209,  221,   10,
      221,   13,  221,   17,  221,  221,  221,  221,  221,  221,
       31,  221,  221,   35,  221,  221,   46,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,   60,  221,   63,
      221,   70,   71,  221,   73,  221,  221,  221,  221,  221,
      221,   90,   92,   95,  221,  221,  221,  221,  221,  120,
      221,  221,  221,  221,  135,  221,  138,  221,  141,  145,

      148,  221,  221,  221,  221,  221,  221,  221,  221,  159,
      221,  221,  221,  221,  221,  221,  171,  172,  173,  221,
      221,  180,  221,  221,  221,  221,  221,  221,  194,  221,
      196,  203,  221,  221,  221,  209,  244,  228,   10,  228,
       13,  228,   17,  228,  228,  228,  228,  228,  228,   31,
      228,  228,   35,  228,  228,   46,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,   60,  228,   63,  228,
       70,   71,  228,   73,  228,  228,  228,  228,  228,  228,
       90,   92,   95,  228,  228,  228,  228,  228,  120,  228,
      228,  228,  228,  135,  228,  138,  228,  141,  145,  148,

      228,  228,  228,  228,  228,  228,  228,  228,  159,  228,
      228,  228,  228,  228,  228,  171,  172,  173,  228,  228,
      180,  228,  228,  228,  228,  228,  228,  194,  228,  196,
      203,  228,  228,  228,  209,  244,  251,  251,  254,   10,
      254,   13,  254,   17,  254,  254,  254,  254,  254,  254,
       31,  254,  254,   35,  254,  254,   46,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,   60,  254,   63,
      254,   70,   71,  254,   73,  254,  254,  254,  254,  254,
      254,   90,   92,   95,  254,  254,  254,  254,  254,  120,
      254,  254,  254,  254,  135,  254,  138,  254,  141,  145,

      148,  254,  254,  254,  254,  254,  254,  254,  254,  159,
      254,  254,  254,  254,  254,  254,  171,  172,  173,  254,
      254,  180,  254,  254,  254,  254,  254,  254,  194,  254,
      196,  203,  254,  254,  254,  209,    0,    0,   15,    0,
       16,    0,    0,    0,   30,    0,   33,   44,   37,    0,
        0,    0,   52,    0,    0,    0,   57,   58,   59,    0,
        0,   72,   74,    0,    0,   82,   83,    0,   96,   97,
        0,    0,    0,    0,    0,  124,    0,  137,    0,    0,
      152,  153,    0,    0,    0,  157,    0,  160,    0,  165,
       84,    0,    0,    0,    0,    0,    0,    0,    0,  190,

        0,  195,    0,  200,  201,  221,  221,   15,  221,   16,
      221,  221,  221,   30,  221,   33,   44,   37,  221,  221,
      221,   52,  221,  221,  221,   57,   58,   59,  221,  221,
       72,   74,  221,  221,   82,   83,  221,   96,   97,  221,
      221,  221,  221,  221,  124,  221,  137,  221,  221,  152,
      153,  221,  221,  221,  157,  221,  160,  221,  165,   84,
      221,  221,  221,  221,  221,  221,  221,  221,  190,  221,
      195,  221,  200,  201,  233,  228,  228,   15,  228,   16,
      228,  228,  228,   30,  228,   33,   44,   37,  228,  228,
      228,   52,  228,  228,  228,   57,   58,   59,  228,  228,

       72,   74,  228,  228,   82,   83,  228,   96,   97,  228,
      228,  228,  228,  228,  124,  228,  137,  228,  228,  152,
      153,  228,  228,  228,  157,  228,  160,  228,  165,   84,
      228,  228,  228,  228,  228,  228,  228,  228,  190,  228,
      195,  228,  200,  201,  239,  251,  254,  254,   15,  254,
       16,  254,  254,  254,   30,  254,   33,   44,   37,  254,
      254,  254,   52,  254,  254,  254,   57,   58,   59,  254,
      254,   72,   74,  254,  254,   82,   83,  254,   96,   97,
      254,  254,  254,  254,  254,  124,  254,  137,  254,  254,
      152,  153,  254,  254,  254,  157,  254,  160,  254,  165,

       84,  254,  254,  254,  254,  254,  254,  254,  254,  190,
      254,  195,  254,  200,  201,    0,    0,    0,    0,    0,
       29,   32,    0,   48,   49,    0,    0,    0,    0,   62,
        0,    0,    0,    0,    0,  101,    0,    0,  123,    0,
        0,    0,  154,    0,    0,    0,    0,  166,    0,  175,
        0,    0,    0,    0,    0,    0,    0,  221,  221,  221,
      221,  221,   29,   32,  221,   48,   49,  221,  221,  221,
      221,   62,  221,  221,  221,  221,  221,  101,  221,  221,
      123,  221,  221,  221,  154,  221,  221,  221,  221,  166,
      221,  175,  221,  221,  221,  221,  221,  221,  221,  228,

      228,  228,  228,  228,   29,   32,  228,   48,   49,  228,
      228,  228,  228,   62,  228,  228,  228,  228,  228,  101,
      228,  228,  123,  228,  228,  228,  154,  228,  228,  228,
      228,  166,  228,  175,  228,  228,  228,  228,  228,  228,
      228,  254,  254,  254,  254,  254,   29,   32,  254,   48,
       49,  254,  254,  254,  254,   62,  254,  254,  254,  254,
      254,  101,  254,  254,  123,  254,  254,  254,  154,  254,
      254,  254,  254,  166,  254,  175,  254,  254,  254,  254,
      254,  254,  254,    6,    0,    0,   25,    0,    0,    0,
        0,    0,    0,    0,   50,    0,   54,   55,    0,    0,

       80,    0,  100,    0,  122,  132,    0,  151,  155,  156,
      158,    0,    0,    0,  177,  178,  184,  187,  189,  192,
      199,    6,  221,  221,   25,  221,  221,  221,  221,  221,
      221,  221,   50,  221,   54,   55,  221,  221,   80,  221,
      100,  221,  122,  132,  221,  151,  155,  156,  158,  221,
      221,  221,  177,  178,  184,  187,  189,  192,  199,    6,
      228,  228,   25,  228,  228,  228,  228,  228,  228,  228,
       50,  228,   54,   55,  228,  228,   80,  228,  100,  228,
      122,  132,  228,  151,  155,  156,  158,  228,  228,  228,
      177,  178,  184,  187,  189,  192,  199,    6,  254,  254,

       25,  254,  254,  254,  254,  254,  254,  254,   50,  254,
       54,   55,  254,  254,   80,  254,  100,  254,  122,  132,
      254,  151,  155,  156,  158,  254,  254,  254,  177,  178,
      184,  187,  189,  192,  199,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,   53,    0,    0,    0,  109,
        0,  163,    0,  169,    0,    0,  221,   19,  221,  221,
      221,  221,  221,  221,  221,  221,   53,  221,  221,  221,
      109,  221,  163,  221,  169,  221,  221,  228,   19,  228,
      228,  228,  228,  228,  228,  228,  228,   53,  228,  228,
      228,  109,  228,  163,  228,  169,  228,  228,  254,   19,

      254,  254,  254,  254,  254,  254,  254,  254,   53,  254,
      254,  254,  109,  254,  163,  254,  169,  254,  254,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,   78,
        0,    0,  164,    0,    0,  221,   26,  221,  221,  221,
      221,  221,  221,  221,  221,   78,  221,  221,  164,  221,
      221,  228,   26,  228,  228,  228,  228,  228,  228,  228,
      228,   78,  228,  228,  164,  228,  228,  254,   26,  254,
      254,  254,  254,  254,  254,  254,  254,   78,  254,  254,
      164,  254,  254,    0,    0,   38,    0,   41,   42,    0,
        0,   66,   88,  139,  185,    0,  221,  221,   38,  221,

       41,   42,  221,  221,   66,   88,  139,  185,  221,  228,
      228,   38,  228,   41,   42,  228,  228,   66,   88,  139,
      185,  228,  254,  254,   38,  254,   41,   42,  254,  254,
       66,   88,  139,  185,  254,   11,    0,    0,    0,    0,
      186,   11,  221,  221,  221,  221,  186,   11,  228,  228,
      228,  228,  186,   11,  254,  254,  254,  254,  186,    0,
        0,   43,    0,  221,  221,   43,  221,  228,  228,   43,
      228,  254,  254,   43,  254,   39,    0,    0,   39,  221,
      221,   39,  228,  228,   39,  254,  254,    0,    0,  221,
      221,  228,  228,  254,  254,    0,   45,  221,   45,  228,

       45,  254,   45,    0,  221,  228,  254,    0,  221,  228,
      254,    0,  221,  228,  254,    0,  221,  228,  254,    0,
      221,  228,  254,    0,  221,  228,  254,    0,  221,  228,
      254,    0,  221,  228,  254,    0,  221,  228,  254,    0,
      221,  228,  254,    0,  221,  228,  254,    0,  221,  228,
      254,    0,  221,  228,  254,   40,   40,   40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   17,   18,
       19,   20,   17,   21,   17,   17,   17,   22,   11,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   11,   82,   11,    9,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    8
    } ;

static yyconst flex_int16_t yy_base[3669] =
    {   0,
        0,    0,   83,    0,  166,    0,  236,  244,  252,  260,
      281,    0, 1172, 7892,  363, 7892, 1147, 7892, 7892, 1153,
      344, 7892, 1139,  338,  357,  353,  401,  448,  501,  346,
      348,  398,  331,  342,  427,  414,  506,  555,  403,  327,
      454,  559,  606,  460,  455,  509,  350, 1051, 7892,  625,
      647,  676,  620,  671,  698,  745,  798,  391,  453,  666,
      355,  403,  728,  485,  803,  852,  750,  393,  800,  856,
      903,  549,  503,  745,    0,  461, 7892, 7892, 7892,    0,
      922,  944,  973,  965, 1017,  966, 1067, 1120,  565,  551,
      742,  505,  520,  967,  848, 1025, 1169, 1062,  509, 1089,

     1173, 1220,  612,  743,  914,    0,  555,  968, 1249,  674,
        0,  444,    0, 1105, 7892,    0,    0, 1113, 7892,  428,
        0, 1103, 1278, 1119, 1244, 1121, 1329, 1382,  628,  633,
     1030,  567,  579, 1271, 1165, 1335, 1431, 1316,  601, 1387,
     1435, 1482,  798,  746, 1484,  622, 7892, 1044,  497, 7892,
     1119, 7892, 7892, 7892,  627, 1064,  856,  631,  668,  676,
      673,  698, 1036,  807,  691,  695, 7892,  722,  923,  748,
     1474,  983,  773,  842, 1387,  783,  790,  807,  862,  860,
      861,  921,  923,  978, 1257,  974,  987, 1013, 1018, 1261,
     1038, 1075, 1068, 1096, 1092, 1127, 1155, 1325, 7892, 1170,

     1157, 1423, 1196, 1221, 1372, 1474, 1170, 1182, 1204, 1493,
     1479, 1226, 1498, 1496, 1277, 1273, 1298, 1314, 1308, 1303,
     1331, 1334, 1356, 1373, 1363, 1524, 1535, 1387, 1397, 1422,
     1541, 1432, 1529, 1436, 1536, 1495, 1532, 1548, 1544, 1549,
     1548, 1554, 7892, 1582, 1588, 1589, 1546, 1582, 1553, 1593,
     1596, 1582, 1586, 1605, 7892, 1616, 1649, 1654, 1661, 1676,
        0, 1637, 1652, 1654, 1642, 1658, 1647, 1653, 1667, 1674,
     1662, 1660, 1662,    0, 1659, 1691, 1668, 1714, 1709, 1666,
     1697, 1726, 1699, 1698, 1705, 1727, 1712, 1714, 1730, 1733,
     1732, 1766, 1727, 1721, 1724, 1735, 1760, 1739, 1761, 1756,

     1762, 1758, 1761, 1770, 1771,    0, 1778, 1763, 1805, 1791,
     1814, 1815, 1779, 1779, 1794, 1810, 1823, 1810, 1816, 1834,
     1832, 1830, 1826, 1842, 1845, 1838, 1831, 1851, 1849, 1841,
     1861, 1852, 1872, 1878, 1874, 1881, 1871, 1896, 1881, 1880,
     1886, 1916, 1895, 1885, 1912, 1922, 1898, 1899, 1932,    0,
     1937, 1932, 1935, 1931, 1937, 1945, 1947, 1949, 1936, 1942,
     1960,    0, 2000, 2009,  951, 2015, 2023, 2032,    0, 1992,
     2010, 2025, 2013, 2029, 2018, 2015, 2029, 2032, 2023, 2025,
     2027,    0, 2025, 2069, 2031, 2075, 2048, 2030, 2058, 2092,
     2036, 2035, 2065, 2083, 2071, 2072, 2089, 2091, 2092, 2125,

     2088, 2081, 2084, 2091, 2120, 2093, 2098, 2093, 2099, 2099,
     2115, 2130, 2132,    0, 2138, 2123, 2153, 2148, 2142, 2165,
     2138, 2142, 2150, 2146, 2178, 2175, 2182, 2195, 2194, 2182,
     2174, 2190, 2205, 2198, 2191, 2208, 2205, 2194, 2211, 2200,
     2211, 2239, 2220, 2223, 2212, 2256, 2222, 2238, 2229, 2260,
     2251, 2243, 2264, 2258, 2262, 2262, 2263,    0, 2294, 2297,
     2294, 2275, 2300, 2282, 2283, 2297, 2294, 2301, 2319, 2359,
     2368, 2374, 1622, 2382, 2391, 2397, 2403,    0,  556,    0,
     2422,    0,    0,    0, 2309, 2389, 2399, 2324, 2401, 2390,
     2387, 2403, 2405, 2399, 2399, 2400,    0, 2398, 2422, 2406,

     2446, 2430, 2408, 2437, 2460, 2432, 2440, 2450, 2465, 2450,
     2451, 2467, 2470, 2470, 2500, 2465, 2458, 2463, 2467, 2500,
     2469, 2473, 2473, 2490, 2493, 2495, 2503, 2505,    0, 2514,
     2501, 2521, 2529, 2516, 2528, 2513, 2522, 2529, 2541, 2555,
     2550, 2555, 2568, 2569, 2560, 2559, 2577, 2580, 2573, 2566,
     2583, 2580, 2569, 2586, 2575, 2600, 2616, 2592, 2594, 2583,
     2627, 2591, 2617, 2593, 2631, 2631, 2622, 2635, 2639, 2635,
     2634, 2642,    0, 2658, 2681, 2640, 2633, 2675, 2640, 2672,
     2681, 2669, 2673, 2693,    0, 1118, 7892, 2690, 7892, 2692,
     7892, 7892, 2697, 7892, 2686, 2692, 7892, 2686, 2693, 2680,

     2703, 1065, 2703, 2695, 2705, 2691, 2708, 2711, 2702, 2705,
     2722, 2725, 2723, 2740, 2725, 2744, 2744, 2736, 2743, 2752,
     2751, 2754, 2738, 2757, 2744, 2753, 2748, 2762, 7892, 2767,
     2751, 2788, 2753, 2757, 2764, 2792, 2780, 2801, 2791, 2800,
     2792, 2794, 2796, 2804, 2789, 2802, 2795, 2799, 2810, 2813,
     2853, 2802, 7892, 7892, 2813, 2801, 2821, 2806, 2822, 2821,
     2840, 2844, 2848, 2854, 7892, 2839, 2841, 2854, 2863, 2850,
     7892, 2846, 7892, 7892, 1037, 2855, 2857, 2866, 2867, 2868,
     2855, 7892, 2851, 2868, 2873, 2874, 2876, 2865, 2864, 2871,
     2879, 2888, 2886, 2906, 2899, 2897, 2909, 2906, 2914, 2905,

     2917, 2915, 2912, 2906, 2921, 2912, 2924, 7892, 2918, 2926,
     2912, 2924, 2916, 7892, 2924, 2923, 2920, 2936, 2928, 2936,
     2941, 2934, 2952, 2943, 2962, 2968, 2960, 2955, 2979, 2954,
     2968, 2966, 2975, 2974, 2969, 3026, 3031, 3036, 3045, 3051,
     3056, 3030,    0, 3047,    0,    0, 3052,    0, 3041, 3047,
        0, 3041, 3048, 3035, 3058, 1024, 3058, 3049, 3057, 3045,
     3062, 3064, 3055, 3056, 3056, 3051, 3058, 3073, 3056, 3089,
     3071, 3095, 3102, 3098, 3107, 3110, 3095, 3114, 3101, 3110,
     3102, 3115,    0, 3120, 3105, 3119, 3106, 3108, 3108, 3126,
     3111, 3131, 3121, 3146, 3120, 3122, 3145, 3160, 3145, 3158,

     3150, 3155, 3166, 3167, 3188, 3159,    0,    0, 3168, 3156,
     3173, 3158, 3174, 3173, 3183, 3178, 3183, 3186,    0, 3169,
     3171, 3200, 3209, 3197,    0, 3195,    0,    0, 1023, 3211,
     3212, 3220, 3221, 3222, 3209,    0, 3204, 3221, 3226, 3228,
     3229, 3217, 3216, 3223, 3231, 3239, 3230, 3242, 3234, 3229,
     3241, 3237, 3246, 3245, 3262, 3260, 3258, 3254, 3274, 3266,
     3278,    0, 3272, 3280, 3266, 3278, 3269,    0, 3277, 3277,
     3273, 3288, 3280, 3288, 3293, 3285, 3286, 3290, 3304, 3301,
     3293, 3288, 3323, 3288, 3317, 3323, 3323, 3328, 3324, 3352,
     3358, 3370, 3381, 3396, 3404, 3387, 3409, 3379,    0, 3388,

        0,    0, 3404,    0, 3393, 3399,    0, 3393, 3401, 3388,
     3411, 1022, 3412, 3404, 3412, 3400, 3416, 3418, 3409, 3411,
     3411, 3405, 3412, 3427, 3410, 3447, 3425, 3448, 3455, 3430,
     3437, 3441, 3448, 3467, 3454, 3464, 3457, 3470,    0, 3475,
     3459, 3473, 3460, 3463, 3463, 3480, 3465, 3485, 3475, 3495,
     3474, 3477, 3490, 3504, 3499, 3512, 3504, 3508, 3519, 3520,
     3540, 3513,    0,    0, 3521, 3510, 3528, 3514, 3531, 3528,
     3538, 3534, 3537, 3540,    0, 3523, 3526, 3539, 3557, 3547,
        0, 3544,    0,    0, 1020, 3555, 3564, 3573, 3574, 3575,
     3562,    0, 3557, 3574, 3580, 3581, 3583, 3572, 3572, 3580,

     3586, 3594, 3585, 3596, 3588, 3583, 3595, 3591, 3599, 3590,
     3608, 3608, 3606, 3606, 3615, 3607, 3631,    0, 3625, 3633,
     3619, 3631, 3622,    0, 3631, 3630, 3627, 3643, 3636, 3645,
     3648, 3640, 3641, 3643, 3658, 3655, 3647, 3641, 3690, 3648,
     3663, 3662, 3670, 3672, 3676, 3704, 3725, 3733, 3742, 3748,
     3757, 3762, 3777, 3782, 3787, 3805, 3808,    0, 3696,    0,
     3727,    0,    0, 3757,    0, 3751, 3757,    0, 3751, 3775,
     3766, 3789, 1013, 3799, 3790, 3800, 3785, 3804, 3807, 3798,
     3799, 3799, 3794, 3801, 3816, 3802, 3829, 3817, 3809, 3816,
     3825, 3822, 3826, 3817, 3840, 3843, 3852, 3844, 3858,    0,

     3863, 3847, 3862, 3849, 3851, 3851, 3869, 3854, 3874, 3866,
     3877, 3865, 3867, 3869, 3878, 3863, 3876, 3868, 3872, 3886,
     3901, 3929, 3903,    0,    0, 3911, 3899, 3919, 3905, 3921,
     3918, 3927, 3923, 3926, 3929,    0, 3912, 3916, 3928, 3937,
     3924,    0, 3920,    0,    0, 1011, 3929, 3930, 3938, 3940,
     3946, 3934,    0, 3933, 3955, 3970, 3971, 3972, 3961, 3961,
     3969, 3975, 3982, 3973, 3985, 3977, 3972, 3984, 3980, 3989,
     3979, 3991, 3989, 3986, 3981, 3994, 3986, 3997,    0, 3991,
     4002, 3991, 4007, 4003,    0, 4021, 4020, 4016, 4032, 4024,
     4032, 4036, 4027, 4029, 4029, 4046, 4043, 4035, 4029, 4055,

     4029, 4042, 4041, 4046, 4045, 4042, 4043, 4047, 4044, 4065,
     4076, 4074, 4079, 4090, 4078, 4085, 7892, 4094, 7892, 7892,
     4099, 4090, 7892, 4097, 4103, 4096, 4097, 4102, 4088, 4090,
     4092, 4111, 4108, 4099, 4128, 4114, 4110, 4104, 4117, 4102,
     4118, 7892, 4140, 4139, 7892, 7892, 4141, 7892, 4138, 4130,
     4140, 4136, 4138, 4158, 4155, 4154, 4143, 4144, 4150, 4157,
     4167, 4165, 7892, 7892, 4167, 4155, 4158, 7892, 4155, 4156,
     4157, 4171, 1042,  995, 4189, 7892, 7892, 4176,  941, 7892,
     7892, 7892, 4170, 4194, 7892, 4190, 4201, 4191, 4204, 4198,
     4196, 4197, 4214, 7892, 4195, 4213, 4211, 4203, 4219, 4203,

     4219, 7892, 4211, 4209, 4210, 4211, 7892, 4222, 4212, 4213,
     4258, 4238, 4243, 4245, 4244, 4260, 7892, 4248, 4264, 4252,
     4251, 4270, 7892, 4259, 4261, 4261, 4273, 4266, 7892, 4274,
     4266, 4261, 4277, 7892, 7892, 4265, 4266, 4279, 7892, 4267,
     4275, 4269, 4276, 4277, 4288, 4305, 4316, 4313, 4315, 4315,
     7892, 7892, 7892, 4320, 4318, 7892, 7892, 4337, 4345, 4315,
     4316, 4317, 4334, 4329, 4327, 4332, 4342, 4330, 4337,    0,
     4350,    0,    0, 4357, 4346,    0, 4354, 4359, 4352, 4355,
     4360, 4346, 4347, 4349, 4368, 4365, 4364, 4387, 4380, 4376,
     4370, 4391, 4379, 4381,    0, 4393, 4391,    0,    0, 4392,

        0, 4389, 4381, 4397, 4393, 4395, 4415, 4412, 4410, 4399,
     4402, 4408, 4415, 4424, 4422,    0,    0, 4424, 4412, 4423,
        0, 4421, 4422, 4423, 4444,  973,  926, 4443,    0,    0,
     4453,  879,    0,    0,    0, 4439, 4448,    0, 4444, 4455,
     4444, 4457, 4452, 4453, 4454, 4471,    0, 4452, 4470, 4467,
     4459, 4477, 4461, 4477,    0, 4468, 4466, 4467, 4477,    0,
     4488, 4478, 4479, 4511, 4506, 4503, 4508, 4498, 4514,    0,
     4503, 4517, 4505, 4505, 4527,    0, 4516, 4518, 4518, 4530,
     4522,    0, 4530, 4524, 4519, 4535,    0,    0, 4522, 4523,
     4536,    0, 4532, 4541, 4535, 4542, 4545, 4548, 4567, 4570,

     4567, 4569, 4569,    0,    0,    0, 4574, 4571,    0,    0,
     4596, 4605, 4619, 4624, 4630, 4635, 4584, 4614, 4608, 4625,
     4621, 4619, 4624, 4634, 4622, 4629,    0, 4637,    0,    0,
     4644, 4633,    0, 4641, 4646, 4639, 4640, 4645, 4631, 4632,
     4634, 4653, 4650, 4641, 4682, 4657, 4653, 4647, 4689, 4670,
     4672,    0, 4684, 4682,    0,    0, 4683,    0, 4680, 4672,
     4682, 4678, 4680, 4700, 4698, 4697, 4686, 4687, 4693, 4700,
     4709, 4707,    0,    0, 4709, 4697, 4700,    0, 4698, 4699,
     4700, 4739,  893,  888, 4741,    0,    0, 4744,  847,    0,
        0,    0, 4730, 4739,    0, 4734, 4745, 4734, 4747, 4741,

     4739, 4740, 4758,    0, 4739, 4757, 4755, 4745, 4762, 4746,
     4762,    0, 4753, 4751, 4752, 4753,    0, 4763, 4755, 4756,
     4797, 4806, 4803, 4800, 4790, 4806,    0, 4794, 4808, 4796,
     4795, 4814,    0, 4803, 4805, 4805, 4817, 4809,    0, 4817,
     4809, 4804, 4820,    0,    0, 4807, 4808, 4821,    0, 4809,
     4818, 4812, 4819, 4840, 4846, 4858, 4861, 4858, 4860, 4860,
        0,    0,    0, 4865, 4862,    0,    0, 4881, 4886, 4891,
     4910, 4918, 4923, 4933, 4941, 4873, 4874, 4883, 4913, 4914,
     4912, 4917, 4933, 4921, 4928,    0, 4936,    0,    0, 4943,
     4932,    0, 4940, 4945, 4938, 4939, 4944, 4930, 4933, 4935,

     4954, 4951, 4942, 4976, 4960, 4956, 4950, 4963, 4944, 4946,
        0, 4972, 4975,    0,    0, 4976,    0, 4973, 4972, 4983,
     4979, 4981, 5001, 4998, 4996, 4985, 4986, 4992, 4999, 5010,
     5008,    0,    0, 5010, 4998, 5001,    0, 5001, 5002, 5003,
     5017,  837,  801, 5038,    0,    0, 5018,  759,    0,    0,
        0, 5004, 5026,    0, 5021, 5038, 5027, 5046, 5040, 5039,
     5040, 5057,    0, 5038, 5056, 5053, 5045, 5061, 5045, 5061,
        0, 5054, 5052, 5053, 5055,    0, 5068, 5058, 5059, 5100,
     5080, 5077, 5087, 5077, 5098,    0, 5086, 5107, 5095, 5094,
     5113,    0, 5102, 5104, 5104, 5116, 5108,    0, 5116, 5108,

     5103, 5119,    0,    0, 5108, 5109, 5122,    0, 5110, 5121,
     5115, 5122, 5119, 5122, 5147, 5150, 5152, 5154, 5154,    0,
        0,    0, 5162, 5161,    0,    0, 7892, 7892,  746, 5168,
     5154, 5168, 7892, 5169, 5150, 5171, 5176, 5175, 5167, 7892,
     5161, 5161, 5162, 5171, 5168, 7892, 5182, 7892, 5168, 5175,
     5175, 5185, 5186, 5196, 5185, 5206, 5211, 5195, 5208, 5216,
     5211, 5223, 5215, 5227, 7892, 5213, 5230, 5216, 5233, 7892,
     7892,  676, 7892, 5214, 5231, 5221, 7892, 5237, 7892, 5236,
     5239, 7892, 5225, 5245, 7892, 7892, 5242, 5233, 7892, 5229,
     7892, 7892, 7892, 7892, 5248, 5242, 5256, 5270, 7892, 7892,

     5276, 7892, 5272, 7892, 5270, 5263,  659, 5266, 5273, 7892,
     5269, 7892, 5269,  489, 5281, 5287, 5273, 5275, 5290, 5292,
     5291, 7892, 5292, 5295, 5282, 7892, 5301, 5282, 5303, 5301,
     5289, 5301, 5298, 5306, 5296, 7892, 5308, 5328, 5323, 5331,
     5323, 7892, 5336, 5321, 5340, 7892, 7892, 5327, 5333, 5347,
     5335, 7892, 5336,    0,    0,  656, 5348, 5334, 5348,    0,
     5349, 5330, 5351, 5358, 5357, 5349,    0, 5343, 5343, 5347,
     5354, 5351,    0, 5366,    0, 5352, 5372, 5369, 5384, 5385,
     5394, 5386, 5389, 5402, 5386, 5393, 5401, 5393, 5403, 5394,
     5405,    0, 5391, 5409, 5398, 5415,    0,    0,  642,    0,

     5396, 5413, 5403,    0, 5422,    0, 5419, 5422,    0, 5409,
     5429,    0,    0, 5439, 5438,    0, 5423,    0,    0,    0,
        0, 5446, 5438, 5439, 5460,    0,    0, 5461,    0, 5457,
        0, 5455, 5445,  595, 5446, 5453,    0, 5449,    0, 5449,
      738, 5461, 5467, 5453, 5457, 5472, 5474, 5473,    0, 5474,
     5480, 5465,    0, 5484, 5466, 5487, 5498, 5483, 5500, 5497,
     5504, 5497,    0, 5498, 5518, 5508, 5516, 5508,    0, 5518,
     5501, 5520,    0,    0, 5507, 5513, 5527, 5515,    0, 5516,
      750, 5542,    0,    0,  582, 5538, 5524, 5538,    0, 5540,
     5521, 5555, 5560, 5559, 5551,    0, 5545, 5545, 5546, 5553,

     5550,    0, 5564,    0, 5553, 5562, 5559, 5569, 5570, 5579,
     5568, 5588, 5582, 5567, 5574, 5582, 5574, 5594, 5585, 5598,
        0, 5584, 5614, 5600, 5617,    0,    0,  560,    0, 5598,
     5615, 5605,    0, 5621,    0, 5618, 5621,    0, 5607, 5630,
        0,    0, 5629, 5616,    0, 5614,    0,    0,    0,    0,
     5632, 5625, 5627, 5642,    0,    0, 5643,    0, 5639,    0,
     5637, 5637,  557, 5638, 5645,    0, 5642,    0, 5642,  833,
     5660, 5667, 5657, 5659, 5674, 5676, 5675,    0, 5676, 5679,
     5664,    0, 5683, 5664, 5688, 5688, 5673, 5685, 5682, 5689,
     5679,    0, 5679, 5700, 5690, 5698, 5690,    0, 5710, 5693,

     5712,    0,    0, 5700, 5706, 5726, 5715,    0, 5720, 5744,
      976, 5759, 5773,    0,    0,  550, 5737, 5723, 5737,    0,
     5738, 5722, 5750, 5756, 5756, 5748,    0, 5742, 5742, 5753,
     5760, 5757,    0, 5772,    0, 5758, 5765, 5762, 5772, 5773,
     5782, 5772, 5774, 5791, 5775, 5782, 5790, 5782, 5793, 5785,
     5796,    0, 5785, 5809, 5796, 5814,    0,    0,  516,    0,
     5795, 5812, 5802,    0, 5828,    0, 5825, 5828,    0, 5815,
     5835,    0,    0, 5832, 5819,    0, 5817,    0,    0,    0,
        0, 5835, 5829, 5831, 5849,    0,    0, 5850,    0, 5846,
        0, 5844, 5834,  509, 5835, 5842,    0, 5838,    0, 5838,

      938, 5850, 5859, 5852, 5855, 5871, 5873, 5872,    0, 5873,
     5886, 5871,    0, 5890, 5872, 5893, 5891, 5876, 5888, 5885,
     5892, 5883,    0, 5883, 5907, 5897, 5905, 5897,    0, 5907,
     5890, 5909,    0,    0, 5896, 5902, 5916, 5907,    0, 5915,
     5930, 7892, 5924, 7892, 5920, 7892, 5921, 5922, 5927, 5943,
     5946, 5946, 7892, 5931, 5933, 7892, 5949, 5935, 7892, 5950,
     5944, 5947, 5956, 5951, 5962, 5963, 5957, 5965, 5951, 7892,
     5969, 7892, 5957, 7892, 7892, 5969, 7892, 5955, 5957, 5978,
     5975, 5987, 5980, 7892, 7892, 7892, 5989, 5976, 6000, 6005,
     6006, 7892, 6008, 6009, 5999, 6000, 7892, 6010, 7892, 6002,

     7892, 7892, 7892, 6006, 6013, 6015, 6009, 6016, 6017, 6002,
     6007, 7892, 6011, 6016, 6011, 6027, 6030, 6024, 7892, 7892,
     7892, 6031, 6042, 7892, 6040, 6049, 6039, 6051, 6045, 6060,
     7892, 6051, 7892, 7892, 6066, 6050, 6062, 7892, 6069,    0,
     6062,    0, 6058,    0, 6059, 6061, 6057, 6077, 6080, 6079,
        0, 6064, 6066,    0, 6082, 6068,    0, 6083, 6077, 6079,
     6090, 6088, 6100, 6102, 6096, 6104, 6090,    0, 6118,    0,
     6106,    0,    0, 6118,    0, 6105, 6104, 6118, 6114, 6125,
     6118,    0,    0,    0, 6127, 6115, 6130, 6139, 6140,    0,
     6141, 6142, 6132, 6133,    0, 6143,    0, 6135,    0,    0,

        0, 6139, 6145, 6149, 6146, 6154, 6156, 6141, 6146,    0,
     6150, 6165, 6160, 6176, 6180, 6171,    0,    0,    0, 6171,
     6181,    0, 6178, 6187, 6177, 6190, 6175, 6194,    0, 6185,
        0,    0, 6199, 6183, 6195,    0, 6212, 6210,    0, 6210,
        0, 6207,    0, 6209, 6210, 6205, 6221, 6229, 6228,    0,
     6213, 6215,    0, 6231, 6217,    0, 6232, 6226, 6229, 6237,
     6228, 6239, 6240, 6234, 6242, 6229,    0, 6248,    0, 6240,
        0,    0, 6252,    0, 6238, 6237, 6251, 6255, 6273, 6267,
        0,    0,    0, 6277, 6264, 6278, 6283, 6289,    0, 6290,
     6291, 6281, 6282,    0, 6292,    0, 6284,    0,    0,    0,

     6288, 6295, 6296, 6286, 6293, 6294, 6279, 6284,    0, 6289,
     6295, 6294, 6310, 6313, 6304,    0,    0,    0, 6304, 6322,
        0, 6326, 6336, 6327, 6339, 6323, 6338,    0, 6334,    0,
        0, 6348, 6332, 6344,    0, 6366, 6381, 6390, 6361,    0,
     6354,    0, 6351,    0, 6353, 6372, 6367, 6383, 6386, 6385,
        0, 6372, 6375,    0, 6392, 6378,    0, 6393, 6387, 6389,
     6397, 6388, 6399, 6400, 6394, 6402, 6388,    0, 6406,    0,
     6394,    0,    0, 6406,    0, 6392, 6391, 6405, 6406, 6417,
     6411,    0,    0,    0, 6421, 6426, 6440, 6445, 6446,    0,
     6447, 6450, 6441, 6443,    0, 6453,    0, 6445,    0,    0,

        0, 6449, 6455, 6456, 6446, 6453, 6454, 6439, 6444,    0,
     6448, 6453, 6448, 6464, 6467, 6458,    0,    0,    0, 6458,
     6473,    0, 6470, 6480, 6471, 6501, 6485, 6500,    0, 6491,
        0,    0, 6505, 6491, 6504,    0, 6506, 6488, 7892, 6508,
     7892, 6511, 6503, 6513, 7892, 6514, 7892, 7892,  500, 6514,
     6516, 6501, 7892, 6509, 6519, 6524, 7892, 7892, 7892, 6506,
     6507, 7892, 7892, 6527, 6515, 7892, 7892, 6529, 7892, 7892,
     6533, 6525, 6527, 6528, 6548, 7892, 6540, 7892, 6557, 6548,
     7892, 7892, 6550, 6553, 6554, 7892, 6553, 7892, 6569, 7892,
     7892, 6562, 6572, 6555, 6562, 6563, 6565, 6558, 6560, 7892,

     6576, 7892, 6564, 7892, 7892, 6576, 6558,    0, 6578,    0,
     6581, 6573, 6583,    0, 6589,    0,    0,  462, 6589, 6592,
     6578,    0, 6604, 6614, 6619,    0,    0,    0, 6601, 6602,
        0,    0, 6624, 6613,    0,    0, 6628,    0,    0, 6627,
     6619, 6620, 6620, 6622,    0, 6614,    0, 6631, 6622,    0,
        0, 6624, 6625, 6625,    0, 6623,    0, 6639,    0,    0,
     6632, 6642, 6625, 6632, 6638, 6640, 6634, 6637,    0, 6671,
        0, 6659,    0,    0, 6696, 6671, 6653,    0, 6673,    0,
     6678, 6671, 6687,    0, 6688,    0,    0,  459, 6688, 6690,
     6675,    0, 6683, 6693, 6698,    0,    0,    0, 6680, 6681,

        0,    0, 6701, 6689,    0,    0, 6703,    0,    0, 6707,
     6699, 6701, 6702, 6704,    0, 6696,    0, 6713, 6704,    0,
        0, 6706, 6720, 6720,    0, 6718,    0, 6734,    0,    0,
     6727, 6739, 6723, 6736, 6737, 6739, 6732, 6734,    0, 6750,
        0, 6738,    0,    0, 6766, 6782, 6755, 6742,    0, 6762,
        0, 6766, 6764, 6781,    0, 6782,    0,    0,  449, 6782,
     6784, 6769,    0, 6778, 6788, 6793,    0,    0,    0, 6775,
     6776,    0,    0, 6798, 6787,    0,    0, 6801,    0,    0,
     6800, 6792, 6793, 6793, 6796,    0, 6788,    0, 6805, 6796,
        0,    0, 6798, 6799, 6799,    0, 6802,    0, 6823,    0,

        0, 6816, 6827, 6816, 6830, 6831, 6833, 6826, 6828,    0,
     6845,    0, 6833,    0,    0, 6845, 6852, 6834, 6839, 6852,
     7892, 7892, 6881, 7892, 7892, 6855, 6841, 6851, 6845, 7892,
     6855, 6854, 6860, 6850, 6858, 7892, 6866, 6889, 7892, 6897,
     6889, 6890, 7892, 6898, 6892, 6903, 6906, 7892, 6904, 7892,
     6890, 6905, 6901, 6913, 6914, 6916, 6896, 6915, 6923, 6905,
     6909, 6929,    0,    0, 6939,    0,    0, 6940, 6932, 6949,
     6943,    0, 6953, 6951, 6957, 6947, 6947,    0, 6947, 6964,
        0, 6965, 6959, 6961,    0, 6969, 6963, 6973, 6974,    0,
     6975,    0, 6962, 6978, 6978, 6995, 6996, 6999, 6985, 7006,

     7014, 6996, 6999, 7011,    0,    0, 7017,    0,    0, 7014,
     7002, 7013, 7007,    0, 7017, 7015, 7021, 7012, 7014,    0,
     7017, 7035,    0, 7036, 7029, 7038,    0, 7051, 7045, 7056,
     7066,    0, 7063,    0, 7053, 7067, 7060, 7072, 7073, 7075,
     7055, 7075, 7082, 7064, 7067, 7079,    0,    0, 7113,    0,
        0, 7084, 7071, 7081, 7075,    0, 7085, 7083, 7089, 7079,
     7079,    0, 7080, 7105,    0, 7114, 7112, 7120,    0, 7128,
     7122, 7132, 7133,    0, 7135,    0, 7121, 7136, 7128, 7142,
     7144, 7146, 7126, 7892, 7132, 7145,  412, 7134, 7155, 7183,
     7156, 7153, 7171, 7166, 7892, 7169, 7892, 7892, 7172, 7168,

     7892, 7171, 7892, 7186, 7892, 7892, 7185, 7892, 7892, 7892,
     7892, 7174, 7180, 7177, 7892, 7892, 7195, 7892, 7892, 7892,
     7892,    0, 7178, 7192,  402, 7181, 7201, 7204, 7206, 7193,
     7207, 7202,    0, 7204,    0,    0, 7199, 7194,    0, 7207,
        0, 7227,    0,    0, 7226,    0,    0,    0,    0, 7216,
     7228, 7227,    0,    0, 7245,    0,    0,    0,    0,    0,
     7227, 7240,  385, 7230, 7250, 7251, 7252, 7239, 7254, 7249,
        0, 7251,    0,    0, 7245, 7242,    0, 7246,    0, 7261,
        0,    0, 7260,    0,    0,    0,    0, 7249, 7255, 7252,
        0,    0, 7289,    0,    0,    0,    0,    0, 7252, 7265,

      379, 7264, 7290, 7299, 7302, 7290, 7303, 7298,    0, 7300,
        0,    0, 7294, 7289,    0, 7292,    0, 7307,    0,    0,
     7307,    0,    0,    0,    0, 7296, 7302, 7299,    0,    0,
     7317,    0,    0,    0,    0, 7314, 7892, 7316, 7305, 7306,
     7321, 7308, 7318, 7323, 7329, 7892, 7334, 7344, 7342, 7892,
     7338, 7892, 7354, 7892, 7358, 7354, 7355,    0, 7357, 7346,
     7347, 7362, 7349, 7358, 7364, 7360,    0, 7360, 7370, 7367,
        0, 7359,    0, 7374,    0, 7378, 7374, 7375,    0, 7377,
     7366, 7368, 7383, 7380, 7394, 7399, 7396,    0, 7402, 7414,
     7411,    0, 7401,    0, 7415,    0, 7419, 7415, 7416,    0,

     7418, 7407, 7408, 7424, 7411, 7420, 7425, 7421,    0, 7423,
     7434, 7431,    0, 7421,    0, 7435,    0, 7439, 7435, 7431,
     7892, 7446, 7453, 7463, 7457, 7462, 7469, 7472, 7459, 7892,
     7475, 7472, 7892, 7477, 7476, 7468,    0, 7483, 7480, 7485,
     7480, 7484, 7485, 7486, 7473,    0, 7491, 7489,    0, 7494,
     7493, 7485,    0, 7500, 7497, 7503, 7497, 7511, 7517, 7518,
     7506,    0, 7528, 7527,    0, 7532, 7531, 7523,    0, 7538,
     7535, 7540, 7534, 7538, 7539, 7541, 7528,    0, 7544, 7541,
        0, 7546, 7547, 7541, 7544, 7892, 7536, 7892, 7892, 7545,
     7540, 7892, 7892, 7892, 7892, 7554, 7548, 7551,    0, 7553,

        0,    0, 7567, 7562,    0,    0,    0,    0, 7577, 7576,
     7581,    0, 7573,    0,    0, 7582, 7577,    0,    0,    0,
        0, 7591, 7584, 7587,    0, 7579,    0,    0, 7588, 7583,
        0,    0,    0,    0, 7598, 7892, 7590, 7594, 7606, 7588,
     7892,    0, 7596, 7601, 7613, 7595,    0,    0, 7601, 7605,
     7617, 7600,    0,    0, 7606, 7620, 7637, 7619,    0, 7634,
     7628, 7892, 7650, 7645, 7633,    0, 7653, 7648, 7636,    0,
     7656, 7651, 7639,    0, 7659, 7892,  339, 7649,    0,  325,
     7650,    0,  317, 7651,    0,  312, 7652, 7646, 7653, 7651,
     7656, 7653, 7658, 7655, 7660, 7660, 7892, 7661,    0, 7672,

        0, 7678,    0, 7696, 7698, 7705, 7708, 7696, 7697, 7698,
     7699, 7695, 7696, 7697, 7698, 7712, 7714, 7715, 7716, 7708,
     7709, 7712, 7714, 7712, 7713, 7714, 7715, 7721, 7723, 7724,
     7735,  221,  213,  205,  197, 7747, 7748, 7750, 7757, 7749,
     7750, 7751, 7752, 7756, 7757, 7758, 7759, 7754, 7755, 7757,
     7758, 7764, 7765, 7766, 7769, 7892,    0,    0,    0, 7892,
     7835, 7840, 7843, 7851, 7859, 7867, 7875, 7883
    } ;

static yyconst flex_int16_t yy_def[3669] =
    {   0,
     3660,    1, 3660,    3, 3660,    5,    5,    5,    5,    5,
     3660,   11, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3660, 3660, 3660, 3662,
     3662, 3662, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3662, 3662, 3664,
     3665, 3665, 3665, 3665, 3660, 3665, 3665, 3665, 3660, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3660, 3665, 3660, 3660,
     3666, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3662,
     3662, 3662, 3662, 3662, 3662, 3664, 3664, 3665, 3665, 3665,
     3667, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3666, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3660,
     3662, 3662, 3662, 3662, 3662, 3660, 3662, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3660, 3662, 3662, 3662, 3662,
     3662, 3660, 3662, 3664, 3660, 3664, 3667, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3660, 3662, 3660, 3662, 3662, 3660, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3660, 3660, 3662,
     3662, 3662, 3660, 3668, 3664, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3662, 3660, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3660,
     3662, 3668, 3668, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3662, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3662, 3668, 3668, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3662, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3662, 3668, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3663,

     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3660, 3660,
     3660, 3661, 3661, 3661, 3661, 3661, 3661, 3663, 3663, 3663,
     3663, 3663, 3663, 3665, 3665, 3665, 3665, 3665, 3665, 3660,
     3660, 3660, 3660, 3661, 3661, 3661, 3661, 3663, 3663, 3663,
     3663, 3665, 3665, 3665, 3665, 3660, 3660, 3660, 3661, 3661,
     3661, 3663, 3663, 3663, 3665, 3665, 3665, 3660, 3660, 3661,
     3661, 3663, 3663, 3665, 3665, 3660, 3660, 3661, 3661, 3663,

     3663, 3665, 3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663,
     3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663, 3665, 3660,
     3661, 3663, 3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663,
     3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663, 3665, 3660,
     3661, 3663, 3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663,
     3665, 3660, 3661, 3663, 3665, 3660, 3661, 3663, 3665,    0,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660
    } ;

static yyconst flex_int16_t yy_nxt[7976] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   14,
       14,   18,   21,   22,   23,   18,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   14,
       47,   14,   14,   14,   14,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   18,   19,   18,   18,   18,   18,   20,   50,   51,

       51,   51,   51,   51,   18,   21,   22,   23,   18,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   75,   77,   75,   78,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   75,   48,   75,   14,   15,   16,   15,
       17,   14,   79,   18,   18,   19,   18,   18,   18,   80,
       20,   81,   82,   82,   82,   82,   82,   18,   21,   22,
       23,   18,   83,   84,   85,   86,   87,   88,   89,   90,

       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  106,   77,   14,
       14,   83,   84,   85,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  106,   48,  106,  108,
     3639,   80,  109,  109,  109,  109,  109,  108, 3638,   80,
      109,  109,  109,  109,  109,   18, 3637,   18,  110,  110,
      110,  110,  110,   18, 3636,   18,  110,  110,  110,  110,
      110,  111,  112,  113,   15,  114,  115,  111,  116,  116,
       19,  117,  117,  117,  117,  118,  117,  111,  111,  111,

      111,  111,  119,  120,  121,  122,  119,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      111,  146,  111,  147,  111,  111,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  145,  111,
      146,  111,  148,  111,  149, 3594,  149,  152,  153,  155,
     3592,  200,  201,  229,  195,  156,  193,  157, 3590,  168,
      254,  158,  159,  160,  161,  162,  169,  163,  196,  194,
      170,  164, 3588,  171,  165,  307,  172,  166,  155,  173,

      200,  201,  229,  195,  156,  193,  157,  167,  168,  254,
      158,  159,  160,  161,  162,  169,  163,  196,  194,  170,
      164,  300,  171,  165,  307,  172,  166,  174,  173,  225,
      197,  175, 2226,  308,  301,  176,  167,  198, 2095,  336,
      206,  177,  199,  226,  178,  479,  227,  149,  207,  228,
      300,  482,  483,  202,  208, 1966,  174,  203,  225,  197,
      175,  204,  308,  301,  176, 1839,  198,  205,  336,  206,
      177,  199,  226,  178,  179,  227,  180,  207,  228,  302,
      230,  248,  202,  208,  231,  181,  203,  182,  232,  249,
      204,  361,  183,  303,  233,  184,  205,  185,  149,  245,

      149,  246, 3149,  179,  247,  180, 2405, 2406,  302,  230,
      248,  313, 3107,  231,  181, 3065,  182,  232,  249,  314,
      361,  183,  303,  233,  184,  315,  185,  186,  245,  355,
      246,  187,  209,  247,  210,  188,  211,  356,  189,  250,
      313,  190,  251,  252,  191,  415,  212,  192,  314,  253,
      416,  213,  214, 3023,  315,  444,  186,  479,  355,  149,
      187,  209, 2698,  210,  188,  211,  356,  189,  250, 2677,
      190,  251,  252,  191,  415,  212,  192,  410,  253,  416,
      213,  214,  215,  216,  444,  469,  217,  234,  352,  235,
      353,  411,  218,  354,  219,  408,  220,  236,  221,  237,

      222,  223,  224, 2639,  238,  239,  410,  530,  409,  531,
     2597,  215,  216, 2576,  469,  217,  234,  352,  235,  353,
      411,  218,  354,  219,  408,  220,  236,  221,  237,  222,
      223,  224,  240,  238,  239, 2538,  530,  409,  531,  241,
      242,  256,  256,  256,  256,  256,  243,  559, 2498,  244,
      270,  460,  584,  461,  271,  257,  462,  272,  523,  525,
      273,  240,  258,  259,  259,  259,  259,  259,  241,  242,
      274,  524,  588,  526,  593,  243,  559,  260,  244,  270,
      460,  584,  461,  271,  257,  462,  272,  523,  525,  273,
      477,  477,  477,  477,  477, 2477,  594,  275,  304,  274,

      524,  588,  526,  593,  276,  305,  260,  262,  277, 2439,
      306,  278, 2400,  263,  279,  264,  595,  280,  596,  265,
      266,  267,  268,  269,  281,  594,  275,  304,  282, 2379,
      597,  603,  283,  276,  305,  604,  262,  277,  284,  306,
      278,  285,  263,  279,  264,  595,  280,  596,  265,  266,
      267,  268,  269,  281,  309, 2503, 2504,  282,  310,  597,
      603,  283,  311,  365,  604, 2537,  605,  284,  312,  463,
      285,  286,  578,  287,  412,  357,  332,  464,  358,  359,
      579,  413,  288,  309,  289,  360,  414,  310,  608,  290,
      333,  311,  291,  334,  292,  605,  335,  312,  463, 2341,

      286,  578,  287,  412,  357,  332,  464,  358,  359,  579,
      413,  288, 2277,  289,  360,  414,  616,  608,  290,  333,
     2273,  291,  334,  292,  293,  335,  337,  623,  294,  316,
      338,  317,  295,  318,  339,  296,  624,  575,  297,  576,
      340,  298,  577,  319,  299,  616,  601,  625,  320,  321,
     2602, 2603,  602,  293, 2272,  337,  623,  294,  316,  338,
      317,  295,  318,  339,  296,  624,  575,  297,  576,  340,
      298,  577,  319,  299,  421,  601,  625,  320,  321,  322,
      323,  602,  422,  324,  341,  591,  342,  617,  423,  325,
      626,  326,  618,  327,  343,  328,  344,  329,  330,  331,

     2146,  345,  346,  421,  627,  628,  592, 2142,  322,  323,
     2141,  422,  324,  341,  591,  342,  617,  423,  325,  626,
      326,  618,  327,  343,  328,  344,  329,  330,  331,  347,
      345,  346, 2017,  627,  628,  592,  348,  349,  363,  363,
      363,  363,  363,  350,  465, 2013,  351,  466,  467,  606,
      629,  630,  364,  607,  468, 2703, 2704,  365,  347,  366,
      367,  367,  367,  367,  367,  348,  349,  892,  892,  892,
      892,  892,  350,  465,  368,  351,  466,  467,  606,  629,
      630,  364,  607,  468,  470,  470,  470,  470,  470, 2636,
     2012,  473,  389,  417, 1890,  378,  390,  418,  471,  379,

      391,  419,  380,  368,  370,  381,  392,  420,  631,  393,
      371,  635,  372,  614, 1886,  382,  373,  374,  375,  376,
      377,  389,  417,  615,  378,  390,  418,  471,  379,  391,
      419,  380,  636,  370,  381,  392,  420,  631,  393,  371,
      635,  372,  614,  383,  382,  373,  374,  375,  376,  377,
      384,  424,  615,  425,  385,  426,  637,  386,  638, 1885,
      387,  636,  527,  388, 1764,  427, 1685,  598,  599,  528,
      428,  429,  383, 1605,  529, 1526, 1448, 1369,  642,  384,
      424,  600,  425,  385,  426,  637,  386,  638,  440,  387,
     1295,  527,  388,  394,  427,  395,  598,  599,  528,  428,

      429,  589,  441,  529,  396,  442,  397,  642,  443,  590,
      600,  398,  643,  644,  399,  445,  400,  440, 1216,  446,
      587,  587,  394,  447,  395,  585,  484,  481,  480,  448,
      589,  441,  255,  396,  442,  397,  645,  443,  590,  646,
      398,  643,  644,  399,  445,  400,  401,  504,  446,  493,
      402,  505,  447,  494,  403,  506,  495,  404,  448,  496,
      405,  507,  154,  406,  508,  645,  407,  151,  646,  497,
      150, 3660, 3660,  647, 3660,  401,  504, 3660,  493,  402,
      505, 3660,  494,  403,  506,  495,  404, 3660,  496,  405,
      507,  536,  406,  508,  648,  407,  430,  431,  497,  537,

      432,  449,  647,  450,  652,  538,  433,  653,  434,  666,
      435,  451,  436,  452,  437,  438,  439, 3660,  453,  454,
      536,  667,  657,  648, 3660,  430,  431,  658,  537,  432,
      449, 3660,  450,  652,  538,  433,  653,  434,  666,  435,
      451,  436,  452,  437,  438,  439,  455,  453,  454,  668,
      667,  657, 3660,  456,  457, 3660,  658,  659, 3660,  660,
      458, 3660,  472,  459,  473,  474,  474,  474,  474,  474,
      498,  673, 3660, 3660,  674,  455, 3660,  499,  668,  475,
     3660,  500,  456,  457,  501,  632,  659,  502,  660,  458,
      503,  633,  459, 3660, 3660, 3660, 3660,  532,  639,  498,

      673,  533,  634,  674,  640,  534,  499,  641,  475,  485,
      500,  535,  679,  501,  632,  486,  502,  487,  680,  503,
      633,  488,  489,  490,  491,  492,  532,  639, 3660,  681,
      533,  634, 3660,  640,  534, 3660,  641, 3660,  485, 3660,
      535,  679,  555,  682,  486,  683,  487,  680,  684, 3660,
      488,  489,  490,  491,  492,  509,  556,  510,  681,  557,
      685,  539,  558,  540,  649,  541,  511,  686,  512,  650,
      651,  555,  682,  513,  683,  542,  514,  684,  515, 3660,
      543,  544, 3660, 3660,  509,  556,  510, 3660,  557,  685,
      539,  558,  540,  649,  541,  511,  686,  512,  650,  651,

      661,  687,  513,  688,  542,  514,  689,  515,  516,  543,
      544,  662,  517,  560,  695,  619,  518,  561,  620,  519,
      663,  562,  520,  696,  621,  521, 3660,  563,  522,  661,
      687,  622,  688, 3660, 3660,  689, 3660,  516, 3660, 3660,
      662,  517,  560,  695,  619,  518,  561,  620,  519,  663,
      562,  520,  696,  621,  521,  654,  563,  522,  545,  546,
      622,  697,  547,  564,  702,  565,  655,  656,  548,  705,
      549, 3660,  550,  566,  551,  567,  552,  553,  554, 3660,
      568,  569, 3660, 3660,  654, 3660, 3660,  545,  546, 3660,
      697,  547,  564,  702,  565,  655,  656,  548,  705,  549,

      609,  550,  566,  551,  567,  552,  553,  554,  570,  568,
      569,  610,  611,  612,  580,  571,  572,  581,  582,  664,
      613,  709,  573,  665,  583,  574,  669,  671,  672,  609,
      670,  675,  676,  677,  678, 3660, 3660,  570, 3660, 3660,
      610,  611,  612,  580,  571,  572,  581,  582,  664,  613,
      709,  573,  665,  583,  574,  669,  671,  672,  690,  670,
      675,  676,  677,  678,  706,  692,  703,  698,  691,  693,
      710,  713,  699,  707,  711,  694,  715,  704,  716, 3660,
      727,  708,  714,  730,  717,  700, 3660,  690,  701, 3660,
     3660,  712,  718,  706,  692,  703,  698,  691,  693,  710,

      713,  699,  707,  711,  694,  715,  704,  716,  719,  727,
      708,  714,  730,  717,  700,  722,  720,  701,  725,  728,
      712,  718,  723,  731,  724,  729,  732,  733,  721,  734,
      726,  735,  256,  256,  256,  256,  256,  719, 1050, 1050,
     1050, 1050, 1050, 3660,  722,  720,  257,  725,  728, 3660,
     3660,  723,  731,  724,  729,  732,  733,  721,  734,  726,
      735,  736, 3660,  736, 3660,  737,  737,  737,  737,  737,
      738,  738,  738,  738,  738,  257,  258,  259,  259,  259,
      259,  259,  742,  745,  739,  747,  748,  749,  740,  743,
      740,  260,  741,  741,  741,  741,  741,  744,  750,  751,

      757,  755,  758,  759,  746,  752,  753,  756,  762,  770,
     3660,  742,  745,  739,  747,  748,  749,  760,  743,  754,
      260,  761, 3660, 3660, 3660, 3660,  744,  750,  751,  757,
      755,  758,  759,  746,  752,  753,  756,  762,  770,  768,
      763, 3660,  771,  777,  778,  779,  760,  772,  754,  769,
      761,  764,  765,  766,  773,  780,  781,  774,  782,  783,
      767,  784,  785,  775,  789, 3660,  790,  791,  768,  763,
      776,  771,  777,  778,  779,  792,  772, 3660,  769,  796,
      764,  765,  766,  773,  780,  781,  774,  782,  783,  767,
      784,  785,  775,  789,  786,  790,  791,  793,  797,  776,

      787,  798,  799,  794,  792,  800,  795,  801,  796,  802,
      803,  788,  806,  807, 3660,  804,  805,  811,  820, 3660,
     3660, 3660,  812,  786,  818, 3660,  793,  797,  819,  787,
      798,  799,  794,  821,  800,  795,  801,  808,  802,  803,
      788,  806,  807,  815,  804,  805,  811,  820,  809,  810,
      813,  812,  814,  818,  816,  822,  823,  819,  825,  826,
      824,  827,  821,  817,  828,  833,  808,  829,  830,  831,
      832,  834,  815,  835,  836,  837,  838,  809,  810,  813,
      839,  814,  840,  816,  822,  823,  841,  825,  826,  824,
      827,  842,  817,  828,  833,  843,  829,  830,  831,  832,

      834,  849,  835,  836,  837,  838,  844,  850,  846,  839,
      851,  840,  847,  856, 3660,  841,  845,  857,  848,  859,
      842,  863,  852,  864,  843,  869, 3660,  853,  858,  870,
      849, 3660, 3660, 3660, 3660,  844,  850,  846,  865,  851,
      854,  847,  856,  855,  860,  845,  857,  848,  859,  867,
      863,  852,  864,  861,  869,  866,  853,  858,  870,  876,
      868,  862,  871,  873,  879,  881,  877,  865,  878,  854,
      872,  874,  855,  860,  882,  884,  880,  885,  867,  886,
      883,  887,  861,  875,  866,  888,  889, 3660,  876,  868,
      862,  871,  873,  879,  881,  877, 3660,  878, 3660,  872,

      874, 3660, 3660,  882,  884,  880,  885, 3660,  886,  883,
      887, 3660,  875, 3660,  888,  889,  363,  363,  363,  363,
      363,  890, 3660,  890, 3660,  891,  891,  891,  891,  891,
      364,  893,  893,  893,  893,  893,  365,  898,  366,  895,
      895,  895,  895,  895,  896,  894,  896,  899,  897,  897,
      897,  897,  897,  368,  901,  900,  903,  904,  905,  364,
      906,  907,  911,  908,  909,  913,  898,  914,  912,  915,
     3660,  918, 3660,  926,  894,  902,  899,  910,  924, 3660,
      933,  934,  368,  901,  900,  903,  904,  905,  925,  906,
      907,  911,  908,  909,  913,  916,  914,  912,  915,  917,

      918,  919,  926,  927,  902,  935,  910,  924,  928,  933,
      934,  936,  920,  921,  922,  937,  938,  925,  939,  940,
      929,  923,  941,  930,  916,  945,  946,  947,  917,  931,
      919,  948,  927,  952,  935,  953,  932,  928,  954,  955,
      936,  920,  921,  922,  937,  938,  956,  939,  940,  929,
      923,  941,  930,  942,  945,  946,  947,  949,  931,  943,
      948,  957,  952,  950,  953,  932,  951,  954,  955,  958,
      944,  959,  962,  963,  967,  956,  960,  961,  969,  968,
      970,  976,  942,  974, 3660,  964,  949,  975,  943,  977,
      957,  978,  950,  971, 3660,  951,  965,  966,  958,  944,

      959,  962,  963,  967,  972,  960,  961,  969,  968,  970,
      976,  979,  974,  973,  964,  980,  975,  989,  977,  990,
      978,  991,  971,  981,  982,  965,  966,  983,  985,  986,
      984,  987,  988,  972,  992,  993,  994,  995,  996,  997,
      979,  998,  973,  999,  980, 1000,  989, 1005,  990, 1006,
      991, 1007,  981,  982, 1012, 1001,  983,  985,  986,  984,
      987,  988, 1015,  992,  993,  994,  995,  996,  997, 1002,
      998, 3660,  999, 1003, 1000, 1013, 1005, 1019, 1006, 1004,
     1007, 1020, 1008, 1012, 1001, 1023, 1014, 1009, 1016, 1025,
     1021, 1015, 1026, 1027, 3660, 3660, 1024, 1017, 1002, 3660,

     1010, 1028, 1003, 1011, 1013, 1018, 1019, 1022, 1004, 1037,
     1020, 1008, 1040, 1041, 1023, 1014, 1009, 1016, 1025, 1021,
     1029, 1026, 1027, 1035, 1032, 1024, 1017, 1042, 1030, 1010,
     1028, 1033, 1011, 1034, 1018, 1036, 1022, 1038, 1037, 1043,
     1031, 1040, 1041, 1039, 1044, 1045, 3660, 3660, 3660, 1029,
     3660, 3660, 1035, 1032, 1059, 3660, 1042, 1030, 3660, 3660,
     1033, 3660, 1034, 3660, 1036, 3660, 1038, 1064, 1043, 1031,
     3660, 3660, 1039, 1044, 1045,  470,  470,  470,  470,  470,
     1046, 3660, 1046, 1059, 1047, 1047, 1047, 1047, 1047,  471,
     1048, 1048, 1048, 1048, 1048,  472, 1064,  473, 1051, 1051,

     1051, 1051, 1051, 1052, 1049, 1052, 1055, 1053, 1053, 1053,
     1053, 1053,  475, 1054, 1054, 1054, 1054, 1054,  471, 1056,
     1056, 1056, 1056, 1056, 1058,  586, 1060,  586, 1062, 1065,
     1066,  586, 1067, 1049, 1061, 1068, 1069, 1070, 1072, 1074,
     1075,  475, 1076,  586, 1073, 3660, 1079,  586, 1077, 1063,
     1071, 1087, 1078, 3660, 3660, 1060, 3660, 1062, 1065, 1066,
     1085, 1067, 3660, 1061, 1068, 1069, 1070, 1072, 1074, 1075,
     1086, 1076, 1080, 1073,  586, 1079, 1094, 1077, 1063, 1071,
     1087, 1078, 1088, 1081, 1082, 1083, 1095, 1089, 1090, 1085,
     1096, 1091, 1084, 1097, 1098, 1099, 1100, 1092, 1101, 1086,

     1102, 1080, 1106, 1107, 1093, 1094, 1108, 1109, 3660, 1113,
     1114, 1088, 1081, 1082, 1083, 1095, 1089, 1090, 1115, 1096,
     1091, 1084, 1097, 1098, 1099, 1100, 1092, 1101, 1103, 1102,
     1116, 1106, 1107, 1093, 1104, 1108, 1109, 1110, 1113, 1114,
     1117, 1118, 1119, 1111, 1120, 1105, 1112, 1115, 1123, 1121,
     1122, 1124, 1130, 1125, 1131, 1128, 1132, 1103, 1135, 1116,
     1129, 1137, 1136, 1104, 1126, 1127, 1110, 1133, 1138, 1117,
     1118, 1119, 1111, 1120, 1105, 1112, 1134, 1123, 1121, 1122,
     1124, 1130, 1125, 1131, 1128, 1132, 1139, 1135, 1140, 1129,
     1137, 1136, 1141, 1126, 1127, 1150, 1133, 1138, 1142, 1143,

     1144, 1146, 1147, 1145, 1151, 1134, 1148, 1149, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1139, 1159, 1140, 1160, 1166,
     1167, 1141, 1168, 1173, 1150, 3660, 1176, 1142, 1143, 1144,
     1146, 1147, 1145, 1151, 1161, 1148, 1149, 1152, 1153, 1154,
     1155, 1156, 1157, 1158, 1162, 1159, 1163, 1160, 1166, 1167,
     1164, 1168, 1173, 1169, 1174, 1176, 1165, 1180, 1170, 1177,
     1181, 1182, 1186, 1161, 1187, 1175, 1184, 1198, 1178, 1196,
     1201, 1171, 1188, 1162, 1172, 1163, 1179, 1185, 1183, 1164,
     1189, 1197, 1169, 1174, 1190, 1165, 1180, 1170, 1177, 1181,
     1182, 1186, 1191, 1187, 1175, 1184, 1198, 1178, 1196, 1201,

     1171, 1188, 1202, 1172, 1192, 1179, 1185, 1183, 1193, 1189,
     1197, 1203, 1199, 1190, 1204, 1194, 1205, 1195, 1200, 1206,
     1207, 1191, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1217, 1202, 1218, 1192, 1221, 1219, 1222, 1193, 1223, 1224,
     1203, 1199, 1225, 1204, 1194, 1205, 1195, 1200, 1206, 1207,
     1220, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217,
     1226, 1218, 1229, 1221, 1219, 1222, 1230, 1223, 1224, 1231,
     1227, 1225, 1228, 1232, 1235, 1236, 1237, 1238, 1240, 1220,
     1239, 1241, 1242, 1243, 1244, 1245, 1246, 1233, 1234, 1226,
     1247, 1229, 1248, 1249, 1250, 1230, 3660, 1253, 1231, 1227,

     1254, 1228, 1232, 1235, 1236, 1237, 1238, 1240, 1255, 1239,
     1241, 1242, 1243, 1244, 1245, 1246, 1233, 1234, 1251, 1247,
     1256, 1248, 1249, 1250, 1257, 1252, 1253, 1258, 1259, 1254,
     1260, 1262, 1263, 1264, 1265, 1266, 1267, 1255, 1268, 1269,
     1270, 1277, 3660, 1271, 3660, 1278, 1279, 1251, 1261, 1256,
     1280, 1281, 1282, 1257, 1252, 1283, 1258, 1259, 1272, 1260,
     1262, 1263, 1264, 1265, 1266, 1267, 1284, 1268, 1269, 1270,
     1277, 1273, 1271, 1274, 1278, 1279, 1285, 1261, 1286, 1280,
     1281, 1282, 1287, 1275, 1283, 1288, 1289, 1272, 1290, 1292,
     1293, 1294, 1296, 1276, 1297, 1284, 1298, 1299, 1300, 1301,

     1291, 1302, 1303, 1304, 1305, 1285, 1306, 1286, 1307, 1308,
     1309, 1287, 1275, 1310, 1288, 1289, 1311, 1290, 1292, 1293,
     1294, 1296, 1276, 1297, 1312, 1298, 1299, 1300, 1301, 1291,
     1302, 1303, 1304, 1305, 1313, 1306, 1314, 1307, 1308, 1309,
     1315, 1316, 1310, 1317, 1318, 1311, 1319, 1320, 1321, 1322,
     1323, 1325, 1326, 1312, 1327, 1328, 1329, 1330, 1331, 1324,
     1332, 1333, 1334, 1313, 1335, 1314, 1336, 1337, 1338, 1315,
     1316, 1339, 1317, 1318, 1340, 1319, 1320, 1321, 1322, 1323,
     1325, 1326, 1343, 1327, 1328, 1329, 1330, 1331, 1344, 1332,
     1333, 1334, 1341, 1335, 1342, 1336, 1337, 1338, 1345, 1346,

     1339, 1347, 1351, 1340, 1352, 1353, 1348, 1349, 1355, 1354,
     1356, 1343, 1357, 3660, 3660, 3660, 3660, 1344, 3660, 3660,
     3660, 1341, 3660, 1342, 3660, 3660, 3660, 1345, 1346, 1350,
     1347, 1351, 3660, 1352, 1353, 1348, 1349, 1355, 1354, 1356,
     3660, 1357,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  738,  738,  738,  738,  738, 1358, 1350, 1358,
     1360, 1359, 1359, 1359, 1359, 1359,  739,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1360,
     1375, 1376, 1377, 1378, 1379,  739, 1380, 1382, 1381, 1383,

     1384, 1388, 1373, 3660, 3660, 3660, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1385, 1375,
     1376, 1377, 1378, 1379, 1393, 1380, 1382, 1381, 1383, 1384,
     1388, 1373, 1386, 1387, 1389, 1390, 1391, 1394, 1395, 1392,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1385, 1403, 1404,
     1406, 1407, 1408, 1393, 1409, 1410, 1405, 1411, 1412, 1415,
     1416, 1386, 1387, 1389, 1390, 1391, 1394, 1395, 1392, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1413, 1403, 1404, 1406,
     1407, 1408, 1417, 1409, 1410, 1405, 1411, 1412, 1415, 1416,
     1418, 1419, 1420, 1421, 1414, 1422, 1423, 1424, 1430, 3660,

     1431, 1432, 1433, 1434, 1435, 1413, 1426, 1436, 1427, 1437,
     1438, 1417, 1425, 1439, 1440, 1441, 1442, 3660, 1428, 1418,
     1419, 1420, 1421, 1414, 1422, 1423, 1424, 1430, 1429, 1431,
     1432, 1433, 1434, 1435, 1443, 1445, 1436, 1446, 1437, 1438,
     1447, 1425, 1439, 1440, 1441, 1442, 1444, 1428, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1429, 1458, 1459,
     1460, 1461, 1462, 1443, 1445, 1463, 1446, 1464, 1465, 1447,
     1466, 1467, 1468, 1469, 1470, 1444, 1471, 1449, 1450, 1451,
     1452, 1453, 1454, 1455, 1456, 1457, 1472, 1458, 1459, 1460,
     1461, 1462, 1473, 1474, 1463, 1475, 1464, 1465, 1476, 1466,

     1467, 1468, 1469, 1470, 1478, 1471, 1479, 1477, 1480, 1481,
     1482, 1483, 1484, 1485, 1486, 1472, 1487, 1488, 1489, 1490,
     1491, 1473, 1474, 1492, 1475, 1493, 1494, 1476, 1495, 1496,
     1497, 1498, 1499, 1478, 1500, 1479, 1504, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 3660, 1487, 1488, 1489, 1490, 1491,
     1501, 1502, 1492, 1505, 1493, 1494, 1508, 1495, 1496, 1497,
     1498, 1499, 1506, 1500, 1509, 1504, 1507, 1510, 1511, 1511,
     1511, 1511, 1511, 1503,  891,  891,  891,  891,  891, 1501,
     1502, 3660, 1505, 3660, 3660, 1508, 1512, 1512, 1512, 1512,
     1512, 1506, 3660, 1509, 3660, 1507, 1510,  893,  893,  893,

      893,  893, 1503, 1516, 1516, 1516, 1516, 1516, 1513, 1517,
     1513,  894, 1514, 1514, 1514, 1514, 1514,  365, 1518,  366,
     1515, 1515, 1515, 1515, 1515,  897,  897,  897,  897,  897,
     1519, 1520, 1521, 1522,  368, 1523, 1524, 1525, 1517, 1527,
      894, 1528, 1529, 1531, 1532, 1533, 1534, 1518, 1535, 1536,
     1537, 1539, 1538, 1540, 1541, 1545, 1550, 1530, 3660, 1519,
     1520, 1521, 1522,  368, 1523, 1524, 1525, 1551, 1527, 1552,
     1528, 1529, 1531, 1532, 1533, 1534, 1542, 1535, 1536, 1537,
     1539, 1538, 1540, 1541, 1545, 1550, 1530, 1546, 1547, 1548,
     1543, 1544, 1549, 1553, 1554, 1555, 1551, 1556, 1552, 1557,

     1558, 1559, 1560, 1561, 1563, 1542, 1564, 1565, 1566, 1567,
     1562, 1568, 1569, 1572, 3660, 1573, 1546, 1547, 1548, 1543,
     1544, 1549, 1553, 1554, 1555, 1570, 1556, 1574, 1557, 1558,
     1559, 1560, 1561, 1563, 1575, 1564, 1565, 1566, 1567, 1562,
     1568, 1569, 1572, 1571, 1573, 1576, 1577, 1578, 1579, 1580,
     1581, 3660, 1587, 1588, 1570, 1589, 1574, 1590, 1583, 1591,
     1584, 1592, 1593, 1575, 1594, 1582, 1595, 1596, 1597, 1598,
     1585, 1599, 1571, 1600, 1576, 1577, 1578, 1579, 1580, 1581,
     1586, 1587, 1588, 1602, 1589, 1601, 1590, 1603, 1591, 1604,
     1592, 1593, 1606, 1594, 1582, 1595, 1596, 1597, 1598, 1585,

     1599, 1607, 1600, 1608, 1609, 1610, 1611, 1612, 1613, 1586,
     1614, 1615, 1602, 1616, 1601, 1617, 1603, 1618, 1604, 1619,
     1620, 1606, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
     1607, 1629, 1608, 1609, 1610, 1611, 1612, 1613, 1630, 1614,
     1615, 1631, 1616, 1632, 1617, 1635, 1618, 1636, 1619, 1620,
     1633, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1634,
     1629, 1637, 1638, 1639, 1640, 1641, 1642, 1630, 1643, 1644,
     1631, 1645, 1632, 1646, 1635, 1647, 1636, 1648, 1649, 1633,
     1650, 1651, 1653, 1652, 1654, 1655, 1656, 1657, 3660, 3660,
     1637, 1638, 1639, 1640, 1641, 1642, 1661, 1643, 1644, 1662,

     1645, 1663, 1646, 1665, 1647, 1664, 1648, 1649, 1666, 1650,
     1651, 1653, 1652, 1654, 1655, 1656, 1657, 1658, 1659, 1667,
     1668, 1668, 1668, 1668, 1668, 1661, 1676, 3660, 1662, 3660,
     1663, 3660, 1665, 3660, 1664, 3660, 3660, 1666, 3660, 3660,
     1660, 1047, 1047, 1047, 1047, 1047, 1658, 1659, 1667, 1048,
     1048, 1048, 1048, 1048, 1669, 1676, 1669, 1677, 1670, 1670,
     1670, 1670, 1670, 1049, 1671, 1671, 1671, 1671, 1671, 1660,
      472, 3660,  473, 1672, 1672, 1672, 1672, 1672, 1673, 1673,
     1673, 1673, 1673, 1678, 3660, 1055, 1677,  475, 3660, 1679,
     1680, 1681, 1049, 1053, 1053, 1053, 1053, 1053, 1054, 1054,

     1054, 1054, 1054, 1674, 1674, 1674, 1674, 1674, 1055, 1682,
     1058,  586, 1678,  586, 1683, 1684,  475,  586, 1679, 1680,
     1681, 1675, 1675, 1675, 1675, 1675, 1686, 1687, 1690,  586,
     1688, 3660, 1691,  586, 1692, 1693, 1694, 1695, 1682, 1696,
     1698, 1697, 1699, 1683, 1684, 1689, 1700, 1704, 1705, 1706,
     1707, 1709, 1710, 1708, 1711, 1686, 1687, 1690, 1701, 1688,
      586, 1691, 1712, 1692, 1693, 1694, 1695, 1713, 1696, 1698,
     1697, 1699, 1702, 1703, 1689, 1700, 1704, 1705, 1706, 1707,
     1709, 1710, 1708, 1711, 1714, 1715, 1716, 1701, 1717, 1718,
     1719, 1712, 1720, 1722, 1723, 1724, 1713, 1725, 1726, 1721,

     1727, 1702, 1703, 1728, 1731, 1732, 1733, 1729, 1734, 1735,
     1736, 1737, 1738, 1714, 1715, 1716, 1739, 1717, 1718, 1719,
     3660, 1720, 1722, 1723, 1724, 1730, 1725, 1726, 1721, 1727,
     3660, 1740, 1728, 1731, 1732, 1733, 1729, 1734, 1735, 1736,
     1737, 1738, 1746, 1747, 1748, 1739, 1741, 1742, 1749, 1743,
     1750, 1751, 1752, 1753, 1730, 1754, 1755, 1756, 1757, 1744,
     1740, 1758, 1759, 1761, 1762, 1763, 1765, 1766, 1767, 1745,
     1768, 1746, 1747, 1748, 1760, 1741, 1769, 1749, 1770, 1750,
     1751, 1752, 1753, 1771, 1754, 1755, 1756, 1757, 1744, 1772,
     1758, 1759, 1761, 1762, 1763, 1765, 1766, 1767, 1745, 1768,

     1773, 1774, 1775, 1760, 1776, 1769, 1777, 1770, 1778, 1779,
     1780, 1781, 1771, 1782, 1783, 1784, 1785, 1786, 1772, 1787,
     1788, 1789, 1790, 1791, 1794, 1792, 1795, 1796, 1797, 1773,
     1774, 1775, 1798, 1776, 1793, 1777, 1799, 1778, 1779, 1780,
     1781, 1800, 1782, 1783, 1784, 1785, 1786, 1801, 1787, 1788,
     1789, 1790, 1791, 1794, 1792, 1795, 1796, 1797, 1802, 1803,
     1804, 1798, 1805, 1806, 1807, 1799, 1808, 1809, 1812, 1810,
     1800, 1811, 1813, 1814, 1815, 1816, 1801, 1820, 1821, 1824,
     1822, 1825, 1817, 1818, 1823, 1826, 1827, 1802, 1803, 1804,
     1828, 1805, 1806, 1807, 1829, 1808, 1809, 1812, 1810, 1830,

     1811, 1813, 1814, 1815, 1816, 1819, 1820, 1821, 1824, 1822,
     1825, 1817, 1818, 1823, 1826, 1827, 1831, 1832, 1833, 1828,
     1834, 1835, 1836, 1829, 1837, 1838, 1840, 1841, 1830, 1842,
     1843, 1844, 1845, 1846, 1819, 1847, 1848, 1849, 1850, 1851,
     1855, 1856, 1857, 1858, 3660, 1831, 1832, 1833, 1859, 1834,
     1835, 1836, 1839, 1837, 1838, 1840, 1841, 1852, 1842, 1843,
     1844, 1845, 1846, 1860, 1847, 1848, 1849, 1850, 1851, 1855,
     1856, 1857, 1858, 1853, 1861, 1854, 1862, 1859, 1863, 1864,
     1865, 1866, 1867, 1868, 1869, 1870, 1852, 1871, 1872, 1873,
     1874, 1875, 1860, 1876, 1877, 1878, 1879, 1880, 1881, 1882,

     1883, 1884, 1853, 1861, 1854, 1862, 1889, 1863, 1864, 1865,
     1866, 1867, 1868, 1869, 1870, 1891, 1871, 1872, 1873, 1874,
     1875, 1887, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
     1884, 1892, 1888, 1893, 1894, 1889, 1895, 1896, 1897, 1898,
     1899, 1900, 1901, 1902, 1891, 1903, 1905, 1906, 1907, 1908,
     1887, 1909, 1910, 1911, 1912, 1904, 1913, 1914, 1915, 3660,
     1892, 1888, 1893, 1894, 1918, 1895, 1896, 1897, 1898, 1899,
     1900, 1901, 1902, 1919, 1903, 1905, 1906, 1907, 1908, 1920,
     1909, 1910, 1911, 1912, 1904, 1913, 1914, 1915, 1916, 1921,
     1922, 1923, 1917, 1918, 1924, 1925, 1926, 1927, 1928, 1929,

     1930, 1931, 1919, 1932, 1933, 1934, 1935, 1936, 1920, 1937,
     1939, 1940, 1938, 1941, 1942, 1943, 1944, 1916, 1921, 1922,
     1923, 1917, 1945, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
     1931, 1946, 1932, 1933, 1934, 1935, 1936, 1947, 1937, 1939,
     1940, 1938, 1941, 1942, 1943, 1944, 1948, 1949, 1950, 1951,
     1952, 1945, 1953, 1359, 1359, 1359, 1359, 1359, 1954, 1955,
     1946, 1359, 1359, 1359, 1359, 1359, 1947, 1956, 1957, 1958,
     1959, 1960, 1961, 1962, 1963, 1948, 1949, 1950, 1951, 1952,
     1964, 1953, 1967, 1965, 1968, 1969, 1970, 1954, 1955, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1956, 1957, 1958, 1959,

     1960, 1961, 1962, 1963, 1978, 3660, 1982, 1983, 1984, 1964,
     1966, 1967, 1965, 1968, 1969, 1970, 1979, 1985, 1971, 1972,
     1973, 1974, 1975, 1976, 1977, 1986, 1987, 1988, 1989, 1990,
     1991, 1992, 1980, 1978, 1981, 1982, 1983, 1984, 1993, 1994,
     1995, 1996, 1997, 1998, 1999, 1979, 1985, 2000, 2001, 2002,
     2003, 2004, 2005, 2006, 1986, 1987, 1988, 1989, 1990, 1991,
     1992, 1980, 2007, 1981, 2008, 2009, 2010, 1993, 1994, 1995,
     1996, 1997, 1998, 1999, 2011, 2014, 2000, 2001, 2002, 2003,
     2004, 2005, 2006, 2016, 2018, 2019, 2015, 2020, 2021, 2022,
     2023, 2007, 2024, 2008, 2009, 2010, 2025, 2026, 2027, 2028,

     2029, 2030, 2032, 2011, 2014, 2033, 2034, 2035, 2036, 2037,
     2038, 2031, 2016, 2018, 2019, 2015, 2020, 2021, 2022, 2023,
     2039, 2024, 2040, 2041, 2042, 2025, 2026, 2027, 2028, 2029,
     2030, 2032, 2045, 2046, 2033, 2034, 2035, 2036, 2037, 2038,
     2031, 2043, 2047, 2048, 2049, 2044, 2050, 2051, 2052, 2039,
     2053, 2040, 2041, 2042, 2054, 2055, 2056, 2057, 2058, 2059,
     2060, 2045, 2046, 2061, 2062, 2063, 2064, 2066, 2067, 2065,
     2043, 2047, 2048, 2049, 2044, 2050, 2051, 2052, 2068, 2053,
     2069, 2070, 2071, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
     2072, 2073, 2061, 2062, 2063, 2064, 2066, 2067, 2065, 2074,

     2075, 2076, 2077, 2078, 2079, 2080, 3660, 2068, 3660, 2069,
     2070, 2071, 1511, 1511, 1511, 1511, 1511, 3660, 3660, 2072,
     2073, 2081, 2081, 2081, 2081, 2081, 3660, 2083, 2074, 2075,
     2076, 2077, 2078, 2079, 2080, 2082, 2082, 2082, 2082, 2082,
     1514, 1514, 1514, 1514, 1514,  366, 1515, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 2083, 2084, 2085, 2086,
      368, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 3660, 2096,
     2094, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
     2106, 2107, 3660, 2111, 2112, 2113, 2084, 2085, 2086,  368,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2095, 2096, 2094,

     2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
     2107, 2108, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
     2119, 2120, 2121, 2122, 2123, 2124, 2125, 2109, 2126, 2110,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2108, 2137, 2138, 2139, 2114, 2115, 2116, 2117, 2118, 2119,
     2120, 2121, 2122, 2123, 2124, 2125, 2109, 2126, 2110, 2127,
     2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2140,
     2137, 2138, 2139, 2143, 2145, 2147, 2148, 2149, 2150, 2151,
     2152, 2153, 2154, 2155, 2144, 2156, 2157, 2158, 2161, 2159,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2140, 2160,

     2170, 2171, 2143, 2145, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2144, 2156, 2157, 2158, 2161, 2159, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2169, 2172, 2160, 2170,
     2171, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2192, 2193, 2195, 2196, 2194, 2197, 2172, 2198, 2199, 2200,
     2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
     2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2195, 2196, 2194, 2197, 2201, 2198, 2199, 2200, 2202,
     2203, 2204, 2205, 2206, 2207, 2208, 2209, 1668, 1668, 1668,

     1668, 1668, 2210, 2210, 2210, 2210, 2210, 1670, 1670, 1670,
     1670, 1670, 3660, 3660, 2201, 3660, 2214, 2215, 2202, 2203,
     2204, 2205, 2206, 2207, 2208, 2209, 2211, 2211, 2211, 2211,
     2211,  472, 3660, 2216, 1672, 1672, 1672, 1672, 1672, 1673,
     1673, 1673, 1673, 1673, 1055, 2214, 2215, 2217,  475, 2213,
     2213, 2213, 2213, 2213, 2218, 2219, 2220, 1054, 1054, 1054,
     1054, 1054, 2216, 2221, 2222, 2223, 2224, 3660, 2227, 2225,
     2228, 2229, 2230, 2231, 2232, 2233, 2217,  475, 2234, 2235,
     2236, 2237, 2238, 2218, 2219, 2220, 2242, 2243, 2244, 2245,
     2246, 2247, 2221, 2222, 2223, 2224, 2226, 2227, 2225, 2228,

     2229, 2230, 2231, 2232, 2233, 2239, 2248, 2234, 2235, 2236,
     2237, 2238, 2249, 2250, 2251, 2242, 2243, 2244, 2245, 2246,
     2247, 2240, 2252, 2241, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2260, 2261, 2262, 2239, 2248, 2263, 2264, 2265, 2266,
     2267, 2249, 2250, 2251, 2268, 2269, 2270, 2271, 2276, 2278,
     2240, 2252, 2241, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
     2260, 2261, 2262, 2279, 2280, 2263, 2264, 2265, 2266, 2267,
     2274, 2281, 2282, 2268, 2269, 2270, 2271, 2276, 2278, 2283,
     2284, 2275, 2285, 2286, 2287, 2288, 2289, 2290, 2292, 2293,
     2294, 2295, 2279, 2280, 2296, 2297, 2298, 2291, 2299, 2274,

     2281, 2282, 2300, 2301, 2302, 3660, 2305, 2306, 2283, 2284,
     2275, 2285, 2286, 2287, 2288, 2289, 2290, 2292, 2293, 2294,
     2295, 2307, 2308, 2296, 2297, 2298, 2291, 2299, 2309, 2310,
     2303, 2300, 2301, 2302, 2304, 2305, 2306, 2311, 2312, 2313,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2307, 2308, 2324, 2326, 2327, 2325, 2328, 2309, 2310, 2303,
     2329, 2330, 2331, 2304, 2332, 2333, 2311, 2312, 2313, 2314,
     2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2334,
     2335, 2324, 2326, 2327, 2325, 2328, 2336, 2337, 2338, 2329,
     2330, 2331, 2339, 2332, 2333, 2340, 2342, 2343, 2344, 2345,

     2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2334, 2335,
     2354, 2355, 2356, 2357, 2358, 2336, 2337, 2338, 2359, 2360,
     2361, 2339, 2362, 2363, 2340, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2367, 2368, 2354,
     2355, 2356, 2357, 2358, 2364, 2369, 2370, 2359, 2360, 2361,
     2371, 2362, 2363, 2372, 2365, 2373, 2366, 2374, 2375, 2376,
     2377, 2378, 2380, 2381, 2382, 2383, 2367, 2368, 2384, 2385,
     2386, 2387, 2388, 2364, 2369, 2370, 2391, 2389, 2392, 2371,
     2390, 2393, 2372, 2365, 2373, 2366, 2374, 2375, 2376, 2377,
     2378, 2380, 2381, 2382, 2383, 2394, 2395, 2384, 2385, 2386,

     2387, 2388, 2396, 2397, 2398, 2391, 2389, 2392, 2399, 2390,
     2393, 2401, 2402, 2403, 2404, 2407, 2408, 2409, 2410, 2411,
     2412, 2413, 2414, 2415, 2394, 2395, 2416, 2417, 2418, 2419,
     2420, 2396, 2397, 2398, 2421, 2422, 2423, 2399, 2424, 2425,
     2401, 2402, 2403, 2404, 2407, 2408, 2409, 2410, 2411, 2412,
     2413, 2414, 2415, 2426, 2427, 2416, 2417, 2418, 2419, 2420,
     2428, 2429, 2430, 2421, 2422, 2423, 2431, 2424, 2425, 2432,
     2433, 2434, 2435, 2436, 2437, 2438, 2440, 2441, 2442, 2443,
     2444, 2445, 2426, 2427, 2446, 2447, 2448, 2449, 2450, 2428,
     2429, 2430, 2451, 2452, 2453, 2431, 2454, 2455, 2432, 2433,

     2434, 2435, 2436, 2437, 2438, 2440, 2441, 2442, 2443, 2444,
     2445, 2456, 2457, 2446, 2447, 2448, 2449, 2450, 2458, 2459,
     2460, 2451, 2452, 2453, 2461, 2454, 2455, 2462, 2465, 2466,
     2467, 2468, 2469, 2470, 2471, 2472, 2473, 2463, 2474, 2464,
     2456, 2457, 2475, 2476, 2478, 2479, 2480, 2458, 2459, 2460,
     2481, 2482, 2483, 2461, 2484, 2485, 2462, 2465, 2466, 2467,
     2468, 2469, 2470, 2471, 2472, 2473, 2463, 2474, 2464, 2486,
     2489, 2475, 2476, 2478, 2479, 2480, 2490, 2491, 2492, 2481,
     2482, 2483, 2487, 2484, 2485, 2488, 2493, 2494, 2495, 2496,
     2497, 2499, 2500, 2501, 2502, 2505, 2506, 2507, 2486, 2489,

     2508, 2509, 2510, 2511, 2512, 2490, 2491, 2492, 2513, 2514,
     2515, 2487, 2516, 2517, 2488, 2493, 2494, 2495, 2496, 2497,
     2499, 2500, 2501, 2502, 2505, 2506, 2507, 2518, 2519, 2508,
     2509, 2510, 2511, 2512, 2520, 2521, 2522, 2513, 2514, 2515,
     2523, 2516, 2517, 2524, 2525, 2526, 2527, 2528, 2529, 2530,
     2531, 2532, 2533, 2534, 2535, 2536, 2518, 2519, 2082, 2082,
     2082, 2082, 2082, 2520, 2521, 2522, 2539, 2540, 2541, 2523,
     2542, 2543, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,
     2532, 2533, 2534, 2535, 2536, 2544, 2545, 2546, 2547, 2548,
     2549, 2550, 2551, 2552, 2553, 2539, 2540, 2541, 2554, 2542,

     2543, 2555, 2556, 2557, 2558, 2559, 2560, 3660, 2564, 3660,
     2565, 2566, 2567, 2568, 2544, 2545, 2546, 2547, 2548, 2549,
     2550, 2551, 2552, 2553, 2569, 2570, 2561, 2554, 2571, 2572,
     2555, 2556, 2557, 2558, 2559, 2560, 2562, 2564, 2563, 2565,
     2566, 2567, 2568, 2573, 2574, 2575, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2569, 2570, 2561, 2584, 2571, 2572, 2585,
     2586, 2588, 2589, 2587, 2590, 2562, 2591, 2563, 2592, 2593,
     2594, 2595, 2573, 2574, 2575, 2577, 2578, 2579, 2580, 2581,
     2582, 2583, 2596, 2598, 2599, 2584, 2600, 2601, 2585, 2586,
     2588, 2589, 2587, 2590, 2604, 2591, 2605, 2592, 2593, 2594,

     2595, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614,
     2615, 2596, 2598, 2599, 2616, 2600, 2601, 2617, 2618, 2619,
     2620, 2621, 2622, 2604, 2623, 2605, 2624, 2625, 2626, 2627,
     2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615,
     2628, 2629, 2630, 2616, 2631, 2632, 2617, 2618, 2619, 2620,
     2621, 2622, 2633, 2623, 2634, 2624, 2625, 2626, 2627, 2635,
     2210, 2210, 2210, 2210, 2210, 2640, 2641, 2642, 2643, 2628,
     2629, 2630, 2644, 2631, 2632, 2637, 2637, 2637, 2637, 2637,
     2645, 2633, 2646, 2634, 2647, 2648, 2649, 2650, 2635, 2638,
     2638, 2638, 2638, 2638, 2640, 2641, 2642, 2643, 2651, 2652,

     2653, 2644, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2645,
     2661, 2646, 2662, 2647, 2648, 2649, 2650, 2665, 2666, 2667,
     2668, 2669, 2663, 2670, 2664, 2671, 2672, 2651, 2652, 2653,
     2673, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2674, 2661,
     2675, 2662, 2676, 2678, 2679, 2680, 2665, 2666, 2667, 2668,
     2669, 2663, 2670, 2664, 2671, 2672, 2681, 2682, 2683, 2673,
     2684, 2685, 2686, 2687, 2689, 2690, 2688, 2674, 2691, 2675,
     2692, 2676, 2678, 2679, 2680, 2693, 2694, 2695, 2696, 2697,
     2699, 2700, 2701, 2702, 2705, 2681, 2682, 2683, 2706, 2684,
     2685, 2686, 2687, 2689, 2690, 2688, 2707, 2691, 2708, 2692,

     2709, 2710, 2711, 2712, 2693, 2694, 2695, 2696, 2697, 2699,
     2700, 2701, 2702, 2705, 2713, 2714, 2715, 2706, 2716, 2717,
     2718, 2719, 2720, 2721, 2722, 2707, 2723, 2708, 2724, 2709,
     2710, 2711, 2712, 2725, 2726, 2727, 2728, 2729, 2730, 2731,
     2732, 2733, 2734, 2713, 2714, 2715, 2735, 2716, 2717, 2718,
     2719, 2720, 2721, 2722, 2736, 2723, 2737, 2724, 2738, 2739,
     2740, 2741, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732,
     2733, 2734, 2742, 2743, 2744, 2735, 2745, 2746, 2747, 2748,
     2749, 2750, 2751, 2736, 2752, 2737, 2753, 2738, 2739, 2740,
     2741, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762,

     2763, 2742, 2743, 2744, 2764, 2745, 2746, 2747, 2748, 2749,
     2750, 2751, 2765, 2752, 2766, 2753, 2767, 2768, 2769, 2770,
     2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763,
     2771, 2772, 2773, 2764, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2765, 2781, 2766, 2782, 2767, 2768, 2769, 2770, 2783,
     2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2771,
     2772, 2773, 2793, 2774, 2775, 2776, 2777, 2778, 2779, 2780,
     2794, 2781, 2795, 2782, 2796, 2797, 2798, 2799, 2783, 2784,
     2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2800, 2801,
     2802, 2793, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2794,

     2810, 2795, 2811, 2796, 2797, 2798, 2799, 2812, 2813, 2814,
     2815, 2816, 2817, 2818, 2819, 2820, 2821, 2800, 2801, 2802,
     2822, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2823, 2810,
     2824, 2811, 2825, 2826, 2827, 2828, 2812, 2813, 2814, 2815,
     2816, 2817, 2818, 2819, 2820, 2821, 2829, 2830, 2831, 2822,
     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2823, 2839, 2824,
     2840, 2825, 2826, 2827, 2828, 2841, 2842, 2843, 2844, 2845,
     2846, 2847, 2848, 2849, 2850, 2829, 2830, 2831, 2851, 2832,
     2833, 2834, 2835, 2836, 2837, 2838, 2852, 2839, 2853, 2840,
     2854, 2855, 2856, 2857, 2841, 2842, 2843, 2844, 2845, 2846,

     2847, 2848, 2849, 2850, 2858, 2859, 2860, 2851, 2861, 2862,
     2863, 2864, 2865, 2866, 2867, 2852, 2868, 2853, 2869, 2854,
     2855, 2856, 2857, 2870, 2871, 2872, 2873, 2874, 2875, 2875,
     2875, 2875, 2875, 2858, 2859, 2860, 2876, 2861, 2862, 2863,
     2864, 2865, 2866, 2867, 2877, 2868, 2878, 2869, 2879, 2880,
     2881, 2882, 2870, 2871, 2872, 2873, 2874, 2883, 2884, 2885,
     2886, 2887, 2888, 2889, 2890, 2876, 2891, 2892, 2893, 2894,
     2895, 2896, 2897, 2877, 2898, 2878, 2899, 2879, 2880, 2881,
     2882, 2900, 2901, 2902, 2903, 2904, 2883, 2884, 2885, 2886,
     2887, 2888, 2889, 2890, 2905, 2891, 2892, 2893, 2894, 2895,

     2896, 2897, 2906, 2898, 2907, 2899, 2908, 2909, 2910, 2911,
     2900, 2901, 2902, 2903, 2904, 2912, 2913, 2914, 2915, 2916,
     2917, 2918, 2919, 2905, 2920, 2921, 2922, 2923, 2924, 2925,
     2926, 2906, 2927, 2907, 2928, 2908, 2909, 2910, 2911, 2929,
     2930, 2931, 2932, 2933, 2912, 2913, 2914, 2915, 2916, 2917,
     2918, 2919, 2934, 2920, 2921, 2922, 2923, 2924, 2925, 2926,
     2935, 2927, 2936, 2928, 2937, 2938, 2939, 2940, 2929, 2930,
     2931, 2932, 2933, 2941, 2942, 2943, 2944, 3660, 3660, 3660,
     3660, 2934, 2945, 2945, 2945, 2945, 2945, 2947, 2948, 2935,
     2949, 2936, 2950, 2937, 2938, 2939, 2940, 2637, 2637, 2637,

     2637, 2637, 2941, 2942, 2943, 2944, 2946, 2946, 2946, 2946,
     2946, 2951, 2952, 2953, 2954, 2955, 2947, 2948, 2956, 2949,
     2957, 2950, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965,
     2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975,
     2951, 2952, 2953, 2954, 2955, 2976, 2977, 2956, 2978, 2957,
     2979, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2980,
     2981, 2982, 2983, 2984, 2976, 2977, 2985, 2978, 2986, 2979,
     2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 2980, 2981,

     2982, 2983, 2984, 3005, 3006, 2985, 3007, 2986, 3008, 2987,
     2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,
     2998, 2999, 3000, 3001, 3002, 3003, 3004, 3009, 3010, 3011,
     3012, 3013, 3005, 3006, 3014, 3007, 3015, 3008, 3016, 3017,
     3018, 3019, 3020, 3021, 3022, 3024, 3025, 3026, 3027, 3028,
     3029, 3030, 3031, 3032, 3033, 3034, 3009, 3010, 3011, 3012,
     3013, 3035, 3036, 3014, 3037, 3015, 3038, 3016, 3017, 3018,
     3019, 3020, 3021, 3022, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3031, 3032, 3033, 3034, 3039, 3040, 3041, 3042, 3043,
     3035, 3036, 3044, 3037, 3045, 3038, 3046, 3047, 3048, 3049,

     3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059,
     3060, 3061, 3062, 3063, 3039, 3040, 3041, 3042, 3043, 3064,
     3066, 3044, 3067, 3045, 3068, 3046, 3047, 3048, 3049, 3050,
     3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060,
     3061, 3062, 3063, 3069, 3070, 3071, 3072, 3073, 3064, 3066,
     3074, 3067, 3075, 3068, 3076, 3077, 3078, 3079, 3080, 3081,
     3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091,
     3092, 3093, 3069, 3070, 3071, 3072, 3073, 3094, 3095, 3074,
     3096, 3075, 3097, 3076, 3077, 3078, 3079, 3080, 3081, 3082,
     3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092,

     3093, 3098, 3099, 3100, 3101, 3102, 3094, 3095, 3103, 3096,
     3104, 3097, 2875, 2875, 2875, 2875, 2875, 3105, 3106, 3108,
     3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118,
     3098, 3099, 3100, 3101, 3102, 3119, 3120, 3103, 3121, 3104,
     3122, 3123, 3124, 3125, 3126, 3127, 3105, 3106, 3108, 3109,
     3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3128,
     3129, 3130, 3131, 3132, 3119, 3120, 3133, 3121, 3134, 3122,
     3123, 3124, 3125, 3126, 3127, 3135, 3136, 3137, 3138, 3139,
     3140, 3141, 2945, 2945, 2945, 2945, 2945, 3142, 3128, 3129,
     3130, 3131, 3132, 3143, 3144, 3133, 3145, 3134, 2637, 2637,

     2637, 2637, 2637, 3146, 3135, 3136, 3137, 3138, 3139, 3140,
     3141, 3147, 3148, 3150, 3151, 3152, 3142, 3153, 3154, 3155,
     3156, 3157, 3143, 3144, 3158, 3145, 3159, 3160, 3161, 3162,
     3163, 3164, 3146, 3165, 3166, 3167, 3168, 3169, 3170, 3171,
     3147, 3148, 3150, 3151, 3152, 3172, 3153, 3154, 3155, 3156,
     3157, 3173, 3174, 3158, 3175, 3159, 3160, 3161, 3162, 3163,
     3164, 3176, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3177,
     3178, 3179, 3180, 3181, 3172, 3182, 3183, 3184, 3185, 3186,
     3173, 3174, 3187, 3175, 3188, 3195, 3196, 3197, 3198, 3199,
     3176, 3200, 3201, 3660, 3202, 3660, 3660, 3660, 3177, 3178,

     3179, 3180, 3181, 3203, 3182, 3183, 3184, 3185, 3186, 3189,
     3190, 3187, 3204, 3188, 3195, 3196, 3197, 3198, 3199, 3205,
     3200, 3201, 3191, 3202, 3192, 3193, 3194, 3206, 3207, 3208,
     3209, 3210, 3203, 3211, 3214, 3215, 3212, 3216, 3189, 3190,
     3213, 3204, 3217, 3218, 3219, 3220, 3221, 3222, 3205, 3223,
     3224, 3191, 3225, 3192, 3193, 3194, 3206, 3207, 3208, 3209,
     3210, 3226, 3211, 3214, 3215, 3212, 3216, 3227, 3228, 3213,
     3233, 3217, 3218, 3219, 3220, 3221, 3222, 3234, 3223, 3224,
     3229, 3225, 3230, 3231, 3232, 3235, 3236, 3237, 3238, 3239,
     3226, 3240, 3241, 3242, 3243, 3244, 3227, 3228, 3245, 3233,

     3246, 3247, 3248, 3249, 3250, 3252, 3234, 3253, 3251, 3229,
     3254, 3230, 3231, 3232, 3235, 3236, 3237, 3238, 3239, 3255,
     3240, 3241, 3242, 3243, 3244, 3256, 3257, 3245, 3258, 3246,
     3247, 3248, 3249, 3250, 3252, 3259, 3253, 3251, 3260, 3254,
     3261, 3262, 3263, 3264, 3271, 3265, 3266, 3272, 3255, 3273,
     3274, 3275, 3276, 3277, 3256, 3257, 3278, 3258, 3267, 3279,
     3268, 3269, 3270, 3280, 3259, 3281, 3282, 3260, 3283, 3261,
     3262, 3263, 3264, 3271, 3265, 3266, 3272, 3284, 3273, 3274,
     3275, 3276, 3277, 3285, 3286, 3278, 3287, 3267, 3279, 3268,
     3269, 3270, 3280, 3290, 3281, 3282, 3288, 3283, 3291, 3292,

     3289, 3293, 3294, 3295, 3296, 3297, 3284, 3298, 3299, 3300,
     3301, 3302, 3285, 3286, 3309, 3287, 3310, 3311, 3312, 3313,
     3314, 3315, 3290, 3316, 3317, 3288, 3318, 3291, 3292, 3289,
     3293, 3294, 3295, 3296, 3297, 3319, 3298, 3299, 3300, 3301,
     3302, 3303, 3304, 3309, 3320, 3310, 3311, 3312, 3313, 3314,
     3315, 3321, 3316, 3317, 3305, 3318, 3306, 3307, 3308, 3322,
     3323, 3324, 3325, 3326, 3319, 3328, 3329, 3327, 3330, 3331,
     3303, 3304, 3332, 3320, 3333, 3334, 3335, 3336, 3337, 3338,
     3321, 3339, 3342, 3305, 3660, 3306, 3307, 3308, 3322, 3323,
     3324, 3325, 3326, 3343, 3328, 3329, 3327, 3330, 3331, 3344,

     3345, 3332, 3346, 3333, 3334, 3335, 3336, 3337, 3338, 3340,
     3339, 3342, 3347, 3341, 3348, 3349, 3350, 3351, 3352, 3353,
     3354, 3355, 3343, 3357, 3356, 3358, 3359, 3360, 3344, 3345,
     3361, 3346, 3363, 3364, 3362, 3365, 3366, 3367, 3340, 3368,
     3369, 3347, 3341, 3348, 3349, 3350, 3351, 3352, 3353, 3354,
     3355, 3370, 3357, 3356, 3358, 3359, 3360, 3371, 3372, 3361,
     3373, 3363, 3364, 3362, 3365, 3366, 3367, 3374, 3368, 3369,
     3375, 3376, 3378, 3379, 3377, 3380, 3381, 3382, 3384, 3385,
     3370, 3383, 3386, 3387, 3388, 3389, 3371, 3372, 3390, 3373,
     3391, 3392, 3393, 3394, 3395, 3396, 3374, 3399, 3400, 3375,

     3376, 3378, 3379, 3377, 3380, 3381, 3382, 3384, 3385, 3401,
     3383, 3386, 3387, 3388, 3389, 3397, 3402, 3390, 3398, 3391,
     3392, 3393, 3394, 3395, 3396, 3403, 3399, 3400, 3405, 3404,
     3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3401, 3414,
     3415, 3416, 3417, 3418, 3397, 3402, 3419, 3398, 3420, 3421,
     3422, 3423, 3424, 3425, 3403, 3426, 3427, 3405, 3404, 3406,
     3407, 3408, 3409, 3410, 3411, 3412, 3413, 3428, 3414, 3415,
     3416, 3417, 3418, 3429, 3430, 3419, 3431, 3420, 3421, 3422,
     3423, 3424, 3425, 3432, 3426, 3427, 3433, 3434, 3435, 3436,
     3437, 3438, 3439, 3440, 3441, 3442, 3428, 3443, 3444, 3445,

     3446, 3447, 3429, 3430, 3448, 3431, 3449, 3450, 3451, 3452,
     3453, 3454, 3432, 3455, 3456, 3433, 3434, 3435, 3436, 3437,
     3438, 3439, 3440, 3441, 3442, 3457, 3443, 3444, 3445, 3446,
     3447, 3458, 3459, 3448, 3460, 3449, 3450, 3451, 3452, 3453,
     3454, 3461, 3455, 3456, 3462, 3463, 3464, 3465, 3466, 3467,
     3468, 3469, 3470, 3471, 3457, 3472, 3473, 3474, 3475, 3476,
     3458, 3459, 3477, 3460, 3478, 3479, 3480, 3481, 3482, 3483,
     3461, 3484, 3485, 3462, 3463, 3464, 3465, 3466, 3467, 3468,
     3469, 3470, 3471, 3486, 3472, 3473, 3474, 3475, 3476, 3487,
     3488, 3477, 3489, 3478, 3479, 3480, 3481, 3482, 3483, 3490,

     3484, 3485, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498,
     3499, 3500, 3486, 3501, 3502, 3503, 3504, 3505, 3487, 3488,
     3506, 3489, 3507, 3508, 3509, 3510, 3511, 3512, 3490, 3513,
     3514, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3515, 3501, 3502, 3503, 3504, 3505, 3516, 3517, 3506,
     3518, 3507, 3508, 3509, 3510, 3511, 3512, 3519, 3513, 3514,
     3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
     3515, 3530, 3531, 3532, 3533, 3534, 3516, 3517, 3535, 3518,
     3536, 3537, 3538, 3539, 3540, 3541, 3519, 3542, 3543, 3520,
     3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3544,

     3530, 3531, 3532, 3533, 3534, 3545, 3546, 3535, 3547, 3536,
     3537, 3538, 3539, 3540, 3541, 3548, 3542, 3543, 3549, 3550,
     3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3544, 3559,
     3560, 3561, 3562, 3563, 3545, 3546, 3564, 3547, 3565, 3566,
     3567, 3568, 3569, 3570, 3548, 3571, 3572, 3549, 3550, 3551,
     3552, 3553, 3554, 3555, 3556, 3557, 3558, 3573, 3559, 3560,
     3561, 3562, 3563, 3574, 3575, 3564, 3576, 3565, 3566, 3567,
     3568, 3569, 3570, 3577, 3571, 3572, 3578, 3579, 3580, 3581,
     3582, 3583, 3584, 3585, 3586, 3587, 3573, 3589, 3591, 3593,
     3595, 3596, 3574, 3575, 3597, 3576, 3598, 3599, 3600, 3601,

     3602, 3603, 3577, 3604, 3605, 3578, 3579, 3580, 3581, 3582,
     3583, 3584, 3585, 3586, 3587, 3606, 3589, 3591, 3593, 3595,
     3596, 3607, 3608, 3597, 3609, 3598, 3599, 3600, 3601, 3602,
     3603, 3610, 3604, 3605, 3611, 3612, 3613, 3614, 3615, 3616,
     3617, 3618, 3619, 3620, 3606, 3621, 3622, 3623, 3624, 3625,
     3607, 3608, 3626, 3609, 3627, 3628, 3629, 3630, 3631, 3632,
     3610, 3633, 3634, 3611, 3612, 3613, 3614, 3615, 3616, 3617,
     3618, 3619, 3620, 3635, 3621, 3622, 3623, 3624, 3625, 3640,
     3641, 3626, 3642, 3627, 3628, 3629, 3630, 3631, 3632, 3643,
     3633, 3634, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651,

     3652, 3653, 3635, 3654, 3655, 3656, 3657, 3658, 3640, 3641,
     3659, 3642, 3660, 3660, 3660, 3660, 3660, 3660, 3643, 3660,
     3660, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652,
     3653, 3660, 3654, 3655, 3656, 3657, 3658, 3660, 3660, 3659,
      261, 3660,  261,  362, 3660,  362,  369,  369,  369,  369,
      369,  476, 3660,  476,  476,  476,  476,  476,  476,  478,
     3660, 3660,  478,  478,  478, 3660,  478,  586,  586,  586,
      586,  586,  586,  586,  586, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 2212, 3660, 2212, 2212, 2212, 2212, 2212,
     2212,   13, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660
    } ;

static yyconst flex_int16_t yy_chk[7976] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     3635,    7,    7,    7,    7,    7,    7,    8, 3634,    8,
        8,    8,    8,    8,    8,    9, 3633,    9,    9,    9,
        9,    9,    9,   10, 3632,   10,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   15, 3586,   15,   21,   21,   24,
     3583,   33,   34,   40,   31,   24,   30,   24, 3580,   26,
       47,   24,   24,   24,   24,   24,   26,   25,   31,   30,
       26,   25, 3577,   26,   25,   61,   26,   25,   24,   26,

       33,   34,   40,   31,   24,   30,   24,   25,   26,   47,
       24,   24,   24,   24,   24,   26,   25,   31,   30,   26,
       25,   58,   26,   25,   61,   26,   25,   27,   26,   39,
       32,   27, 3301,   62,   58,   27,   25,   32, 3263,   68,
       36,   27,   32,   39,   27,  112,   39,  112,   36,   39,
       58,  120,  120,   35,   36, 3225,   27,   35,   39,   32,
       27,   35,   62,   58,   27, 3187,   32,   35,   68,   36,
       27,   32,   39,   27,   28,   39,   28,   36,   39,   59,
       41,   45,   35,   36,   41,   28,   35,   28,   41,   45,
       35,   76,   28,   59,   41,   28,   35,   28,  149,   44,

      149,   44, 2959,   28,   44,   28, 1914, 1914,   59,   41,
       45,   64, 2888,   41,   28, 2818,   28,   41,   45,   64,
       76,   28,   59,   41,   28,   64,   28,   29,   44,   73,
       44,   29,   37,   44,   37,   29,   37,   73,   29,   46,
       64,   29,   46,   46,   29,   92,   37,   29,   64,   46,
       93,   37,   37, 2749,   64,   99,   29,  479,   73,  479,
       29,   37, 2294,   37,   29,   37,   73,   29,   46, 2259,
       29,   46,   46,   29,   92,   37,   29,   90,   46,   93,
       37,   37,   38,   38,   99,  107,   38,   42,   72,   42,
       72,   90,   38,   72,   38,   89,   38,   42,   38,   42,

       38,   38,   38, 2216,   42,   42,   90,  132,   89,  133,
     2163,   38,   38, 2128,  107,   38,   42,   72,   42,   72,
       90,   38,   72,   38,   89,   38,   42,   38,   42,   38,
       38,   38,   43,   42,   42, 2085,  132,   89,  133,   43,
       43,   50,   50,   50,   50,   50,   43,  139, 2034,   43,
       53,  103,  146,  103,   53,   50,  103,   53,  129,  130,
       53,   43,   51,   51,   51,   51,   51,   51,   43,   43,
       53,  129,  155,  130,  158,   43,  139,   51,   43,   53,
      103,  146,  103,   53,   50,  103,   53,  129,  130,   53,
      110,  110,  110,  110,  110, 1999,  159,   54,   60,   53,

      129,  155,  130,  158,   54,   60,   51,   52,   54, 1956,
       60,   54, 1907,   52,   54,   52,  160,   54,  161,   52,
       52,   52,   52,   52,   55,  159,   54,   60,   55, 1872,
      162,  165,   55,   54,   60,  166,   52,   54,   55,   60,
       54,   55,   52,   54,   52,  160,   54,  161,   52,   52,
       52,   52,   52,   55,   63, 2041, 2041,   55,   63,  162,
      165,   55,   63, 2081,  166, 2081,  168,   55,   63,  104,
       55,   56,  144,   56,   91,   74,   67,  104,   74,   74,
      144,   91,   56,   63,   56,   74,   91,   63,  170,   56,
       67,   63,   56,   67,   56,  168,   67,   63,  104, 1829,

       56,  144,   56,   91,   74,   67,  104,   74,   74,  144,
       91,   56, 1748,   56,   74,   91,  173,  170,   56,   67,
     1743,   56,   67,   56,   57,   67,   69,  176,   57,   65,
       69,   65,   57,   65,   69,   57,  177,  143,   57,  143,
       69,   57,  143,   65,   57,  173,  164,  178,   65,   65,
     2170, 2170,  164,   57, 1742,   69,  176,   57,   65,   69,
       65,   57,   65,   69,   57,  177,  143,   57,  143,   69,
       57,  143,   65,   57,   95,  164,  178,   65,   65,   66,
       66,  164,   95,   66,   70,  157,   70,  174,   95,   66,
      179,   66,  174,   66,   70,   66,   70,   66,   66,   66,

     1589,   70,   70,   95,  180,  181,  157, 1584,   66,   66,
     1583,   95,   66,   70,  157,   70,  174,   95,   66,  179,
       66,  174,   66,   70,   66,   70,   66,   66,   66,   71,
       70,   70, 1432,  180,  181,  157,   71,   71,   81,   81,
       81,   81,   81,   71,  105, 1427,   71,  105,  105,  169,
      182,  183,   81,  169,  105, 2301, 2301,   82,   71,   82,
       82,   82,   82,   82,   82,   71,   71,  365,  365,  365,
      365,  365,   71,  105,   82,   71,  105,  105,  169,  182,
      183,   81,  169,  105,  108,  108,  108,  108,  108, 2211,
     1426, 2211,   86,   94, 1279,   84,   86,   94,  108,   84,

       86,   94,   84,   82,   83,   84,   86,   94,  184,   86,
       83,  186,   83,  172, 1274,   84,   83,   83,   83,   83,
       83,   86,   94,  172,   84,   86,   94,  108,   84,   86,
       94,   84,  187,   83,   84,   86,   94,  184,   86,   83,
      186,   83,  172,   85,   84,   83,   83,   83,   83,   83,
       85,   96,  172,   96,   85,   96,  188,   85,  189, 1273,
       85,  187,  131,   85, 1146,   96, 1073,  163,  163,  131,
       96,   96,   85,  985,  131,  912,  829,  756,  191,   85,
       96,  163,   96,   85,   96,  188,   85,  189,   98,   85,
      675,  131,   85,   87,   96,   87,  163,  163,  131,   96,

       96,  156,   98,  131,   87,   98,   87,  191,   98,  156,
      163,   87,  192,  193,   87,  100,   87,   98,  602,  100,
      586,  151,   87,  100,   87,  148,  122,  118,  114,  100,
      156,   98,   48,   87,   98,   87,  194,   98,  156,  195,
       87,  192,  193,   87,  100,   87,   88,  126,  100,  124,
       88,  126,  100,  124,   88,  126,  124,   88,  100,  124,
       88,  126,   23,   88,  126,  194,   88,   20,  195,  124,
       17,   13,    0,  196,    0,   88,  126,    0,  124,   88,
      126,    0,  124,   88,  126,  124,   88,    0,  124,   88,
      126,  135,   88,  126,  197,   88,   97,   97,  124,  135,

       97,  101,  196,  101,  200,  135,   97,  201,   97,  207,
       97,  101,   97,  101,   97,   97,   97,    0,  101,  101,
      135,  208,  203,  197,    0,   97,   97,  203,  135,   97,
      101,    0,  101,  200,  135,   97,  201,   97,  207,   97,
      101,   97,  101,   97,   97,   97,  102,  101,  101,  209,
      208,  203,    0,  102,  102,    0,  203,  204,    0,  204,
      102,    0,  109,  102,  109,  109,  109,  109,  109,  109,
      125,  212,    0,    0,  212,  102,    0,  125,  209,  109,
        0,  125,  102,  102,  125,  185,  204,  125,  204,  102,
      125,  185,  102,    0,    0,    0,    0,  134,  190,  125,

      212,  134,  185,  212,  190,  134,  125,  190,  109,  123,
      125,  134,  215,  125,  185,  123,  125,  123,  216,  125,
      185,  123,  123,  123,  123,  123,  134,  190,    0,  217,
      134,  185,    0,  190,  134,    0,  190,    0,  123,    0,
      134,  215,  138,  218,  123,  219,  123,  216,  220,    0,
      123,  123,  123,  123,  123,  127,  138,  127,  217,  138,
      221,  136,  138,  136,  198,  136,  127,  222,  127,  198,
      198,  138,  218,  127,  219,  136,  127,  220,  127,    0,
      136,  136,    0,    0,  127,  138,  127,    0,  138,  221,
      136,  138,  136,  198,  136,  127,  222,  127,  198,  198,

      205,  223,  127,  224,  136,  127,  225,  127,  128,  136,
      136,  205,  128,  140,  228,  175,  128,  140,  175,  128,
      205,  140,  128,  229,  175,  128,    0,  140,  128,  205,
      223,  175,  224,    0,    0,  225,    0,  128,    0,    0,
      205,  128,  140,  228,  175,  128,  140,  175,  128,  205,
      140,  128,  229,  175,  128,  202,  140,  128,  137,  137,
      175,  230,  137,  141,  232,  141,  202,  202,  137,  234,
      137,    0,  137,  141,  137,  141,  137,  137,  137,    0,
      141,  141,    0,    0,  202,    0,    0,  137,  137,    0,
      230,  137,  141,  232,  141,  202,  202,  137,  234,  137,

      171,  137,  141,  137,  141,  137,  137,  137,  142,  141,
      141,  171,  171,  171,  145,  142,  142,  145,  145,  206,
      171,  236,  142,  206,  145,  142,  210,  211,  211,  171,
      210,  213,  213,  214,  214,    0,    0,  142,    0,    0,
      171,  171,  171,  145,  142,  142,  145,  145,  206,  171,
      236,  142,  206,  145,  142,  210,  211,  211,  226,  210,
      213,  213,  214,  214,  235,  227,  233,  231,  226,  227,
      237,  239,  231,  235,  238,  227,  240,  233,  241,    0,
      247,  235,  239,  249,  242,  231,    0,  226,  231,    0,
        0,  238,  242,  235,  227,  233,  231,  226,  227,  237,

      239,  231,  235,  238,  227,  240,  233,  241,  244,  247,
      235,  239,  249,  242,  231,  245,  244,  231,  246,  248,
      238,  242,  245,  250,  245,  248,  251,  252,  244,  253,
      246,  254,  256,  256,  256,  256,  256,  244,  473,  473,
      473,  473,  473,    0,  245,  244,  256,  246,  248,    0,
        0,  245,  250,  245,  248,  251,  252,  244,  253,  246,
      254,  257,    0,  257,    0,  257,  257,  257,  257,  257,
      258,  258,  258,  258,  258,  256,  259,  259,  259,  259,
      259,  259,  262,  264,  258,  265,  266,  267,  260,  263,
      260,  259,  260,  260,  260,  260,  260,  263,  268,  269,

      272,  271,  273,  275,  264,  270,  270,  271,  277,  280,
        0,  262,  264,  258,  265,  266,  267,  276,  263,  270,
      259,  276,    0,    0,    0,    0,  263,  268,  269,  272,
      271,  273,  275,  264,  270,  270,  271,  277,  280,  279,
      278,    0,  281,  283,  284,  285,  276,  281,  270,  279,
      276,  278,  278,  278,  282,  286,  287,  282,  288,  289,
      278,  290,  291,  282,  293,    0,  294,  295,  279,  278,
      282,  281,  283,  284,  285,  296,  281,    0,  279,  298,
      278,  278,  278,  282,  286,  287,  282,  288,  289,  278,
      290,  291,  282,  293,  292,  294,  295,  297,  299,  282,

      292,  300,  301,  297,  296,  302,  297,  303,  298,  304,
      305,  292,  307,  308,    0,  305,  305,  310,  314,    0,
        0,    0,  310,  292,  313,    0,  297,  299,  313,  292,
      300,  301,  297,  315,  302,  297,  303,  309,  304,  305,
      292,  307,  308,  312,  305,  305,  310,  314,  309,  309,
      311,  310,  311,  313,  312,  316,  317,  313,  318,  318,
      317,  319,  315,  312,  319,  322,  309,  320,  320,  321,
      321,  323,  312,  324,  325,  326,  327,  309,  309,  311,
      328,  311,  329,  312,  316,  317,  330,  318,  318,  317,
      319,  331,  312,  319,  322,  332,  320,  320,  321,  321,

      323,  335,  324,  325,  326,  327,  333,  336,  334,  328,
      337,  329,  334,  339,    0,  330,  333,  340,  334,  341,
      331,  343,  338,  344,  332,  347,    0,  338,  340,  348,
      335,    0,    0,    0,    0,  333,  336,  334,  345,  337,
      338,  334,  339,  338,  342,  333,  340,  334,  341,  346,
      343,  338,  344,  342,  347,  345,  338,  340,  348,  352,
      346,  342,  349,  351,  353,  354,  352,  345,  352,  338,
      349,  351,  338,  342,  355,  356,  353,  357,  346,  358,
      355,  359,  342,  351,  345,  360,  361,    0,  352,  346,
      342,  349,  351,  353,  354,  352,    0,  352,    0,  349,

      351,    0,    0,  355,  356,  353,  357,    0,  358,  355,
      359,    0,  351,    0,  360,  361,  363,  363,  363,  363,
      363,  364,    0,  364,    0,  364,  364,  364,  364,  364,
      363,  366,  366,  366,  366,  366,  367,  370,  367,  367,
      367,  367,  367,  367,  368,  366,  368,  371,  368,  368,
      368,  368,  368,  367,  372,  371,  373,  374,  375,  363,
      376,  377,  379,  378,  378,  380,  370,  381,  379,  383,
        0,  385,    0,  388,  366,  372,  371,  378,  387,    0,
      391,  392,  367,  372,  371,  373,  374,  375,  387,  376,
      377,  379,  378,  378,  380,  384,  381,  379,  383,  384,

      385,  386,  388,  389,  372,  393,  378,  387,  389,  391,
      392,  394,  386,  386,  386,  395,  396,  387,  397,  398,
      390,  386,  399,  390,  384,  401,  402,  403,  384,  390,
      386,  404,  389,  406,  393,  407,  390,  389,  408,  409,
      394,  386,  386,  386,  395,  396,  410,  397,  398,  390,
      386,  399,  390,  400,  401,  402,  403,  405,  390,  400,
      404,  411,  406,  405,  407,  390,  405,  408,  409,  412,
      400,  413,  415,  416,  418,  410,  413,  413,  419,  418,
      419,  422,  400,  421,    0,  417,  405,  421,  400,  423,
      411,  424,  405,  420,    0,  405,  417,  417,  412,  400,

      413,  415,  416,  418,  420,  413,  413,  419,  418,  419,
      422,  425,  421,  420,  417,  425,  421,  430,  423,  431,
      424,  432,  420,  426,  426,  417,  417,  427,  428,  428,
      427,  429,  429,  420,  433,  434,  435,  436,  437,  438,
      425,  439,  420,  440,  425,  441,  430,  443,  431,  444,
      432,  445,  426,  426,  447,  441,  427,  428,  428,  427,
      429,  429,  449,  433,  434,  435,  436,  437,  438,  442,
      439,    0,  440,  442,  441,  448,  443,  451,  444,  442,
      445,  452,  446,  447,  441,  454,  448,  446,  450,  455,
      453,  449,  456,  457,    0,    0,  454,  450,  442,    0,

      446,  457,  442,  446,  448,  450,  451,  453,  442,  462,
      452,  446,  464,  465,  454,  448,  446,  450,  455,  453,
      459,  456,  457,  461,  460,  454,  450,  466,  459,  446,
      457,  460,  446,  460,  450,  461,  453,  463,  462,  467,
      459,  464,  465,  463,  468,  469,    0,    0,    0,  459,
        0,    0,  461,  460,  485,    0,  466,  459,    0,    0,
      460,    0,  460,    0,  461,    0,  463,  488,  467,  459,
        0,    0,  463,  468,  469,  470,  470,  470,  470,  470,
      471,    0,  471,  485,  471,  471,  471,  471,  471,  470,
      472,  472,  472,  472,  472,  474,  488,  474,  474,  474,

      474,  474,  474,  475,  472,  475,  477,  475,  475,  475,
      475,  475,  474,  476,  476,  476,  476,  476,  470,  477,
      477,  477,  477,  477,  481,  481,  486,  481,  487,  489,
      490,  481,  491,  472,  486,  492,  493,  493,  494,  495,
      496,  474,  498,  481,  494,    0,  500,  481,  499,  487,
      493,  503,  499,    0,    0,  486,    0,  487,  489,  490,
      502,  491,    0,  486,  492,  493,  493,  494,  495,  496,
      502,  498,  501,  494,  481,  500,  506,  499,  487,  493,
      503,  499,  504,  501,  501,  501,  507,  504,  505,  502,
      508,  505,  501,  509,  510,  511,  512,  505,  513,  502,

      514,  501,  516,  517,  505,  506,  518,  519,    0,  521,
      522,  504,  501,  501,  501,  507,  504,  505,  523,  508,
      505,  501,  509,  510,  511,  512,  505,  513,  515,  514,
      524,  516,  517,  505,  515,  518,  519,  520,  521,  522,
      525,  526,  527,  520,  528,  515,  520,  523,  530,  528,
      528,  531,  534,  532,  534,  533,  535,  515,  536,  524,
      533,  537,  536,  515,  532,  532,  520,  535,  538,  525,
      526,  527,  520,  528,  515,  520,  535,  530,  528,  528,
      531,  534,  532,  534,  533,  535,  539,  536,  540,  533,
      537,  536,  540,  532,  532,  545,  535,  538,  541,  541,

      542,  543,  543,  542,  546,  535,  544,  544,  547,  548,
      549,  550,  551,  552,  553,  539,  554,  540,  555,  558,
      559,  540,  560,  562,  545,    0,  564,  541,  541,  542,
      543,  543,  542,  546,  556,  544,  544,  547,  548,  549,
      550,  551,  552,  553,  556,  554,  557,  555,  558,  559,
      557,  560,  562,  561,  563,  564,  557,  566,  561,  565,
      567,  568,  570,  556,  571,  563,  569,  577,  565,  576,
      579,  561,  572,  556,  561,  557,  565,  569,  568,  557,
      572,  576,  561,  563,  574,  557,  566,  561,  565,  567,
      568,  570,  574,  571,  563,  569,  577,  565,  576,  579,

      561,  572,  580,  561,  574,  565,  569,  568,  575,  572,
      576,  581,  578,  574,  582,  575,  583,  575,  578,  584,
      588,  574,  590,  593,  595,  596,  598,  599,  600,  601,
      603,  580,  604,  574,  606,  605,  607,  575,  608,  609,
      581,  578,  610,  582,  575,  583,  575,  578,  584,  588,
      605,  590,  593,  595,  596,  598,  599,  600,  601,  603,
      611,  604,  613,  606,  605,  607,  614,  608,  609,  615,
      612,  610,  612,  616,  617,  618,  618,  619,  620,  605,
      619,  621,  622,  623,  624,  625,  626,  616,  616,  611,
      627,  613,  628,  630,  631,  614,    0,  633,  615,  612,

      634,  612,  616,  617,  618,  618,  619,  620,  635,  619,
      621,  622,  623,  624,  625,  626,  616,  616,  632,  627,
      636,  628,  630,  631,  637,  632,  633,  638,  639,  634,
      640,  641,  642,  643,  644,  645,  646,  635,  647,  648,
      649,  652,    0,  650,    0,  655,  656,  632,  640,  636,
      657,  658,  659,  637,  632,  660,  638,  639,  650,  640,
      641,  642,  643,  644,  645,  646,  661,  647,  648,  649,
      652,  651,  650,  651,  655,  656,  662,  640,  663,  657,
      658,  659,  664,  651,  660,  666,  667,  650,  668,  669,
      670,  672,  676,  651,  677,  661,  678,  679,  680,  681,

      668,  683,  684,  685,  686,  662,  687,  663,  688,  689,
      690,  664,  651,  691,  666,  667,  692,  668,  669,  670,
      672,  676,  651,  677,  693,  678,  679,  680,  681,  668,
      683,  684,  685,  686,  694,  687,  695,  688,  689,  690,
      696,  697,  691,  698,  699,  692,  700,  701,  702,  703,
      704,  705,  706,  693,  707,  709,  710,  711,  712,  704,
      713,  715,  716,  694,  717,  695,  718,  719,  720,  696,
      697,  721,  698,  699,  722,  700,  701,  702,  703,  704,
      705,  706,  724,  707,  709,  710,  711,  712,  725,  713,
      715,  716,  723,  717,  723,  718,  719,  720,  726,  727,

      721,  728,  730,  722,  731,  732,  729,  729,  733,  732,
      734,  724,  735,    0,    0,    0,    0,  725,    0,    0,
        0,  723,    0,  723,    0,    0,    0,  726,  727,  729,
      728,  730,    0,  731,  732,  729,  729,  733,  732,  734,
        0,  735,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  738,  738,  738,  738,  738,  739,  729,  739,
      742,  739,  739,  739,  739,  739,  738,  740,  740,  740,
      740,  740,  741,  741,  741,  741,  741,  744,  747,  749,
      750,  752,  753,  754,  755,  757,  758,  759,  760,  742,
      761,  762,  763,  764,  765,  738,  766,  767,  766,  768,

      769,  771,  759,    0,    0,    0,  744,  747,  749,  750,
      752,  753,  754,  755,  757,  758,  759,  760,  770,  761,
      762,  763,  764,  765,  774,  766,  767,  766,  768,  769,
      771,  759,  770,  770,  772,  772,  773,  775,  776,  773,
      777,  778,  779,  780,  781,  782,  784,  770,  785,  786,
      787,  788,  789,  774,  790,  791,  786,  792,  793,  795,
      796,  770,  770,  772,  772,  773,  775,  776,  773,  777,
      778,  779,  780,  781,  782,  784,  794,  785,  786,  787,
      788,  789,  797,  790,  791,  786,  792,  793,  795,  796,
      798,  799,  800,  801,  794,  802,  803,  804,  806,    0,

      809,  810,  811,  812,  813,  794,  805,  814,  805,  815,
      816,  797,  804,  817,  818,  820,  821,    0,  805,  798,
      799,  800,  801,  794,  802,  803,  804,  806,  805,  809,
      810,  811,  812,  813,  822,  823,  814,  824,  815,  816,
      826,  804,  817,  818,  820,  821,  822,  805,  830,  831,
      832,  833,  834,  835,  837,  838,  839,  805,  840,  841,
      842,  843,  844,  822,  823,  845,  824,  846,  847,  826,
      848,  849,  850,  851,  852,  822,  853,  830,  831,  832,
      833,  834,  835,  837,  838,  839,  854,  840,  841,  842,
      843,  844,  855,  856,  845,  857,  846,  847,  858,  848,

      849,  850,  851,  852,  859,  853,  860,  858,  861,  863,
      864,  865,  866,  867,  869,  854,  870,  871,  872,  873,
      874,  855,  856,  875,  857,  876,  877,  858,  877,  878,
      879,  880,  881,  859,  882,  860,  884,  861,  863,  864,
      865,  866,  867,  869,    0,  870,  871,  872,  873,  874,
      883,  883,  875,  885,  876,  877,  887,  877,  878,  879,
      880,  881,  886,  882,  888,  884,  886,  889,  890,  890,
      890,  890,  890,  883,  891,  891,  891,  891,  891,  883,
      883,    0,  885,    0,    0,  887,  892,  892,  892,  892,
      892,  886,    0,  888,    0,  886,  889,  893,  893,  893,

      893,  893,  883,  896,  896,  896,  896,  896,  894,  898,
      894,  893,  894,  894,  894,  894,  894,  895,  900,  895,
      895,  895,  895,  895,  895,  897,  897,  897,  897,  897,
      903,  905,  906,  908,  895,  909,  910,  911,  898,  913,
      893,  914,  915,  916,  917,  918,  919,  900,  920,  921,
      922,  923,  922,  924,  925,  927,  930,  915,    0,  903,
      905,  906,  908,  895,  909,  910,  911,  931,  913,  932,
      914,  915,  916,  917,  918,  919,  926,  920,  921,  922,
      923,  922,  924,  925,  927,  930,  915,  928,  928,  929,
      926,  926,  929,  933,  934,  935,  931,  936,  932,  937,

      938,  940,  941,  942,  943,  926,  944,  945,  946,  947,
      942,  948,  949,  951,    0,  952,  928,  928,  929,  926,
      926,  929,  933,  934,  935,  950,  936,  953,  937,  938,
      940,  941,  942,  943,  954,  944,  945,  946,  947,  942,
      948,  949,  951,  950,  952,  955,  956,  957,  958,  959,
      960,    0,  962,  965,  950,  966,  953,  967,  961,  968,
      961,  969,  970,  954,  971,  960,  972,  973,  974,  976,
      961,  977,  950,  978,  955,  956,  957,  958,  959,  960,
      961,  962,  965,  979,  966,  978,  967,  980,  968,  982,
      969,  970,  986,  971,  960,  972,  973,  974,  976,  961,

      977,  987,  978,  988,  989,  990,  991,  993,  994,  961,
      995,  996,  979,  997,  978,  998,  980,  999,  982, 1000,
     1001,  986, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
      987, 1010,  988,  989,  990,  991,  993,  994, 1011,  995,
      996, 1012,  997, 1013,  998, 1015,  999, 1016, 1000, 1001,
     1014, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014,
     1010, 1017, 1019, 1020, 1021, 1022, 1023, 1011, 1025, 1026,
     1012, 1027, 1013, 1028, 1015, 1029, 1016, 1030, 1031, 1014,
     1032, 1033, 1034, 1033, 1035, 1036, 1037, 1038,    0,    0,
     1017, 1019, 1020, 1021, 1022, 1023, 1040, 1025, 1026, 1041,

     1027, 1042, 1028, 1043, 1029, 1042, 1030, 1031, 1044, 1032,
     1033, 1034, 1033, 1035, 1036, 1037, 1038, 1039, 1039, 1045,
     1046, 1046, 1046, 1046, 1046, 1040, 1059,    0, 1041,    0,
     1042,    0, 1043,    0, 1042,    0,    0, 1044,    0,    0,
     1039, 1047, 1047, 1047, 1047, 1047, 1039, 1039, 1045, 1048,
     1048, 1048, 1048, 1048, 1049, 1059, 1049, 1061, 1049, 1049,
     1049, 1049, 1049, 1048, 1050, 1050, 1050, 1050, 1050, 1039,
     1051,    0, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1052,
     1052, 1052, 1052, 1064,    0, 1054, 1061, 1051,    0, 1066,
     1067, 1069, 1048, 1053, 1053, 1053, 1053, 1053, 1054, 1054,

     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1056, 1070,
     1057, 1057, 1064, 1057, 1071, 1072, 1051, 1057, 1066, 1067,
     1069, 1056, 1056, 1056, 1056, 1056, 1074, 1075, 1077, 1057,
     1076,    0, 1078, 1057, 1079, 1080, 1081, 1082, 1070, 1083,
     1084, 1083, 1085, 1071, 1072, 1076, 1086, 1088, 1089, 1089,
     1090, 1091, 1092, 1090, 1093, 1074, 1075, 1077, 1087, 1076,
     1057, 1078, 1094, 1079, 1080, 1081, 1082, 1095, 1083, 1084,
     1083, 1085, 1087, 1087, 1076, 1086, 1088, 1089, 1089, 1090,
     1091, 1092, 1090, 1093, 1096, 1097, 1098, 1087, 1099, 1101,
     1102, 1094, 1103, 1104, 1105, 1106, 1095, 1107, 1108, 1103,

     1109, 1087, 1087, 1110, 1112, 1113, 1114, 1111, 1115, 1116,
     1117, 1118, 1119, 1096, 1097, 1098, 1120, 1099, 1101, 1102,
        0, 1103, 1104, 1105, 1106, 1111, 1107, 1108, 1103, 1109,
        0, 1121, 1110, 1112, 1113, 1114, 1111, 1115, 1116, 1117,
     1118, 1119, 1123, 1126, 1127, 1120, 1121, 1122, 1128, 1122,
     1129, 1130, 1131, 1132, 1111, 1133, 1134, 1135, 1137, 1122,
     1121, 1138, 1139, 1140, 1141, 1143, 1147, 1148, 1149, 1122,
     1150, 1123, 1126, 1127, 1139, 1121, 1151, 1128, 1152, 1129,
     1130, 1131, 1132, 1154, 1133, 1134, 1135, 1137, 1122, 1155,
     1138, 1139, 1140, 1141, 1143, 1147, 1148, 1149, 1122, 1150,

     1156, 1157, 1158, 1139, 1159, 1151, 1160, 1152, 1161, 1162,
     1163, 1164, 1154, 1165, 1166, 1167, 1168, 1169, 1155, 1170,
     1171, 1172, 1173, 1174, 1176, 1175, 1177, 1178, 1180, 1156,
     1157, 1158, 1181, 1159, 1175, 1160, 1182, 1161, 1162, 1163,
     1164, 1183, 1165, 1166, 1167, 1168, 1169, 1184, 1170, 1171,
     1172, 1173, 1174, 1176, 1175, 1177, 1178, 1180, 1186, 1187,
     1188, 1181, 1189, 1190, 1191, 1182, 1192, 1193, 1195, 1194,
     1183, 1194, 1196, 1197, 1198, 1199, 1184, 1201, 1202, 1204,
     1203, 1205, 1200, 1200, 1203, 1206, 1207, 1186, 1187, 1188,
     1208, 1189, 1190, 1191, 1209, 1192, 1193, 1195, 1194, 1210,

     1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1203,
     1205, 1200, 1200, 1203, 1206, 1207, 1211, 1212, 1213, 1208,
     1214, 1215, 1216, 1209, 1218, 1221, 1222, 1224, 1210, 1225,
     1226, 1227, 1228, 1229, 1200, 1230, 1231, 1232, 1233, 1234,
     1236, 1237, 1238, 1239,    0, 1211, 1212, 1213, 1240, 1214,
     1215, 1216, 1221, 1218, 1221, 1222, 1224, 1235, 1225, 1226,
     1227, 1228, 1229, 1241, 1230, 1231, 1232, 1233, 1234, 1236,
     1237, 1238, 1239, 1235, 1243, 1235, 1244, 1240, 1247, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1235, 1256, 1257, 1258,
     1259, 1260, 1241, 1261, 1262, 1265, 1266, 1267, 1269, 1270,

     1271, 1272, 1235, 1243, 1235, 1244, 1278, 1247, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1283, 1256, 1257, 1258, 1259,
     1260, 1275, 1261, 1262, 1265, 1266, 1267, 1269, 1270, 1271,
     1272, 1284, 1275, 1286, 1287, 1278, 1288, 1289, 1290, 1291,
     1292, 1293, 1295, 1296, 1283, 1297, 1298, 1299, 1300, 1301,
     1275, 1303, 1304, 1305, 1306, 1297, 1308, 1309, 1310,    0,
     1284, 1275, 1286, 1287, 1312, 1288, 1289, 1290, 1291, 1292,
     1293, 1295, 1296, 1313, 1297, 1298, 1299, 1300, 1301, 1314,
     1303, 1304, 1305, 1306, 1297, 1308, 1309, 1310, 1311, 1315,
     1316, 1318, 1311, 1312, 1319, 1320, 1321, 1322, 1324, 1325,

     1326, 1327, 1313, 1328, 1330, 1331, 1332, 1333, 1314, 1336,
     1337, 1338, 1336, 1340, 1341, 1342, 1343, 1311, 1315, 1316,
     1318, 1311, 1344, 1319, 1320, 1321, 1322, 1324, 1325, 1326,
     1327, 1345, 1328, 1330, 1331, 1332, 1333, 1346, 1336, 1337,
     1338, 1336, 1340, 1341, 1342, 1343, 1347, 1348, 1349, 1350,
     1354, 1344, 1355, 1358, 1358, 1358, 1358, 1358, 1360, 1361,
     1345, 1359, 1359, 1359, 1359, 1359, 1346, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1347, 1348, 1349, 1350, 1354,
     1371, 1355, 1375, 1374, 1377, 1378, 1379, 1360, 1361, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1362, 1363, 1364, 1365,

     1366, 1367, 1368, 1369, 1387,    0, 1389, 1390, 1391, 1371,
     1374, 1375, 1374, 1377, 1378, 1379, 1388, 1392, 1380, 1381,
     1382, 1383, 1384, 1385, 1386, 1393, 1394, 1396, 1397, 1400,
     1402, 1403, 1388, 1387, 1388, 1389, 1390, 1391, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1388, 1392, 1411, 1412, 1413,
     1414, 1415, 1418, 1419, 1393, 1394, 1396, 1397, 1400, 1402,
     1403, 1388, 1420, 1388, 1422, 1423, 1424, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1425, 1428, 1411, 1412, 1413, 1414,
     1415, 1418, 1419, 1431, 1436, 1437, 1428, 1439, 1440, 1441,
     1442, 1420, 1443, 1422, 1423, 1424, 1444, 1445, 1446, 1448,

     1449, 1450, 1451, 1425, 1428, 1452, 1453, 1454, 1456, 1457,
     1458, 1450, 1431, 1436, 1437, 1428, 1439, 1440, 1441, 1442,
     1459, 1443, 1461, 1462, 1463, 1444, 1445, 1446, 1448, 1449,
     1450, 1451, 1465, 1466, 1452, 1453, 1454, 1456, 1457, 1458,
     1450, 1464, 1467, 1468, 1469, 1464, 1471, 1472, 1473, 1459,
     1474, 1461, 1462, 1463, 1475, 1477, 1478, 1479, 1480, 1481,
     1483, 1465, 1466, 1484, 1485, 1486, 1489, 1490, 1491, 1489,
     1464, 1467, 1468, 1469, 1464, 1471, 1472, 1473, 1493, 1474,
     1494, 1495, 1496, 1475, 1477, 1478, 1479, 1480, 1481, 1483,
     1497, 1498, 1484, 1485, 1486, 1489, 1490, 1491, 1489, 1499,

     1500, 1501, 1502, 1503, 1507, 1508,    0, 1493,    0, 1494,
     1495, 1496, 1511, 1511, 1511, 1511, 1511,    0,    0, 1497,
     1498, 1512, 1512, 1512, 1512, 1512,    0, 1517, 1499, 1500,
     1501, 1502, 1503, 1507, 1508, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 1517, 1518, 1519, 1520,
     1515, 1521, 1522, 1523, 1524, 1525, 1526, 1528,    0, 1532,
     1531, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544,    0, 1546, 1547, 1548, 1518, 1519, 1520, 1515,
     1521, 1522, 1523, 1524, 1525, 1526, 1528, 1531, 1532, 1531,

     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1553, 1554,
     1557, 1559, 1560, 1561, 1562, 1563, 1564, 1545, 1565, 1545,
     1566, 1567, 1568, 1569, 1570, 1571, 1572, 1575, 1576, 1577,
     1545, 1579, 1580, 1581, 1549, 1550, 1551, 1553, 1554, 1557,
     1559, 1560, 1561, 1562, 1563, 1564, 1545, 1565, 1545, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1575, 1576, 1577, 1582,
     1579, 1580, 1581, 1585, 1588, 1593, 1594, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1585, 1603, 1605, 1606, 1608, 1607,
     1609, 1610, 1611, 1613, 1614, 1615, 1616, 1618, 1582, 1607,

     1619, 1620, 1585, 1588, 1593, 1594, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1585, 1603, 1605, 1606, 1608, 1607, 1609,
     1610, 1611, 1613, 1614, 1615, 1616, 1618, 1621, 1607, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1628, 1629, 1630,
     1631, 1632, 1634, 1635, 1636, 1637, 1638, 1640, 1641, 1642,
     1643, 1646, 1647, 1648, 1646, 1650, 1621, 1651, 1652, 1653,
     1621, 1622, 1623, 1624, 1625, 1626, 1628, 1629, 1630, 1631,
     1632, 1634, 1635, 1636, 1637, 1638, 1640, 1641, 1642, 1643,
     1646, 1647, 1648, 1646, 1650, 1654, 1651, 1652, 1653, 1655,
     1656, 1657, 1658, 1659, 1660, 1664, 1665, 1668, 1668, 1668,

     1668, 1668, 1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670,
     1670, 1670,    0,    0, 1654,    0, 1676, 1677, 1655, 1656,
     1657, 1658, 1659, 1660, 1664, 1665, 1671, 1671, 1671, 1671,
     1671, 1672,    0, 1678, 1672, 1672, 1672, 1672, 1672, 1673,
     1673, 1673, 1673, 1673, 1675, 1676, 1677, 1679, 1672, 1674,
     1674, 1674, 1674, 1674, 1680, 1681, 1682, 1675, 1675, 1675,
     1675, 1675, 1678, 1683, 1684, 1685, 1687,    0, 1691, 1690,
     1693, 1694, 1695, 1696, 1697, 1698, 1679, 1672, 1699, 1700,
     1701, 1702, 1703, 1680, 1681, 1682, 1705, 1706, 1707, 1708,
     1709, 1710, 1683, 1684, 1685, 1687, 1690, 1691, 1690, 1693,

     1694, 1695, 1696, 1697, 1698, 1704, 1712, 1699, 1700, 1701,
     1702, 1703, 1713, 1716, 1718, 1705, 1706, 1707, 1708, 1709,
     1710, 1704, 1719, 1704, 1720, 1721, 1722, 1723, 1724, 1725,
     1726, 1727, 1728, 1729, 1704, 1712, 1730, 1731, 1734, 1735,
     1736, 1713, 1716, 1718, 1738, 1739, 1740, 1741, 1747, 1752,
     1704, 1719, 1704, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1727, 1728, 1729, 1753, 1755, 1730, 1731, 1734, 1735, 1736,
     1744, 1756, 1757, 1738, 1739, 1740, 1741, 1747, 1752, 1758,
     1759, 1744, 1760, 1761, 1762, 1764, 1765, 1766, 1767, 1768,
     1769, 1770, 1753, 1755, 1772, 1773, 1774, 1766, 1775, 1744,

     1756, 1757, 1777, 1778, 1779,    0, 1781, 1782, 1758, 1759,
     1744, 1760, 1761, 1762, 1764, 1765, 1766, 1767, 1768, 1769,
     1770, 1783, 1784, 1772, 1773, 1774, 1766, 1775, 1785, 1787,
     1780, 1777, 1778, 1779, 1780, 1781, 1782, 1788, 1789, 1790,
     1791, 1793, 1794, 1795, 1796, 1797, 1799, 1800, 1801, 1802,
     1783, 1784, 1805, 1806, 1807, 1805, 1809, 1785, 1787, 1780,
     1810, 1811, 1812, 1780, 1813, 1814, 1788, 1789, 1790, 1791,
     1793, 1794, 1795, 1796, 1797, 1799, 1800, 1801, 1802, 1815,
     1816, 1805, 1806, 1807, 1805, 1809, 1817, 1818, 1819, 1810,
     1811, 1812, 1823, 1813, 1814, 1824, 1830, 1831, 1832, 1834,

     1835, 1836, 1837, 1838, 1839, 1841, 1842, 1843, 1815, 1816,
     1844, 1845, 1847, 1849, 1850, 1817, 1818, 1819, 1851, 1852,
     1853, 1823, 1854, 1855, 1824, 1830, 1831, 1832, 1834, 1835,
     1836, 1837, 1838, 1839, 1841, 1842, 1843, 1857, 1858, 1844,
     1845, 1847, 1849, 1850, 1856, 1859, 1860, 1851, 1852, 1853,
     1861, 1854, 1855, 1862, 1856, 1863, 1856, 1864, 1866, 1867,
     1868, 1869, 1874, 1875, 1876, 1878, 1857, 1858, 1880, 1881,
     1883, 1884, 1887, 1856, 1859, 1860, 1890, 1888, 1895, 1861,
     1888, 1896, 1862, 1856, 1863, 1856, 1864, 1866, 1867, 1868,
     1869, 1874, 1875, 1876, 1878, 1897, 1898, 1880, 1881, 1883,

     1884, 1887, 1901, 1903, 1905, 1890, 1888, 1895, 1906, 1888,
     1896, 1908, 1909, 1911, 1913, 1915, 1916, 1917, 1918, 1919,
     1920, 1921, 1923, 1924, 1897, 1898, 1925, 1927, 1928, 1929,
     1930, 1901, 1903, 1905, 1931, 1932, 1933, 1906, 1934, 1935,
     1908, 1909, 1911, 1913, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 1923, 1924, 1937, 1938, 1925, 1927, 1928, 1929, 1930,
     1939, 1940, 1941, 1931, 1932, 1933, 1943, 1934, 1935, 1944,
     1945, 1948, 1949, 1950, 1951, 1953, 1957, 1958, 1959, 1961,
     1962, 1963, 1937, 1938, 1964, 1965, 1966, 1968, 1969, 1939,
     1940, 1941, 1970, 1971, 1972, 1943, 1974, 1976, 1944, 1945,

     1948, 1949, 1950, 1951, 1953, 1957, 1958, 1959, 1961, 1962,
     1963, 1977, 1978, 1964, 1965, 1966, 1968, 1969, 1979, 1980,
     1981, 1970, 1971, 1972, 1982, 1974, 1976, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1993, 1983, 1994, 1983,
     1977, 1978, 1995, 1996, 2001, 2002, 2003, 1979, 1980, 1981,
     2005, 2007, 2008, 1982, 2010, 2011, 1983, 1984, 1985, 1986,
     1987, 1988, 1989, 1990, 1991, 1993, 1983, 1994, 1983, 2014,
     2017, 1995, 1996, 2001, 2002, 2003, 2022, 2023, 2024, 2005,
     2007, 2008, 2015, 2010, 2011, 2015, 2025, 2028, 2030, 2032,
     2033, 2035, 2036, 2038, 2040, 2042, 2043, 2044, 2014, 2017,

     2045, 2046, 2047, 2048, 2050, 2022, 2023, 2024, 2051, 2052,
     2054, 2015, 2055, 2056, 2015, 2025, 2028, 2030, 2032, 2033,
     2035, 2036, 2038, 2040, 2042, 2043, 2044, 2057, 2058, 2045,
     2046, 2047, 2048, 2050, 2059, 2060, 2061, 2051, 2052, 2054,
     2062, 2055, 2056, 2064, 2065, 2066, 2067, 2068, 2070, 2071,
     2072, 2075, 2076, 2077, 2078, 2080, 2057, 2058, 2082, 2082,
     2082, 2082, 2082, 2059, 2060, 2061, 2086, 2087, 2088, 2062,
     2090, 2091, 2064, 2065, 2066, 2067, 2068, 2070, 2071, 2072,
     2075, 2076, 2077, 2078, 2080, 2092, 2093, 2094, 2095, 2097,
     2098, 2099, 2100, 2101, 2103, 2086, 2087, 2088, 2105, 2090,

     2091, 2106, 2107, 2108, 2109, 2110, 2111,    0, 2113,    0,
     2114, 2115, 2116, 2117, 2092, 2093, 2094, 2095, 2097, 2098,
     2099, 2100, 2101, 2103, 2118, 2119, 2112, 2105, 2120, 2122,
     2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2112, 2114,
     2115, 2116, 2117, 2123, 2124, 2125, 2130, 2131, 2132, 2134,
     2136, 2137, 2139, 2118, 2119, 2112, 2140, 2120, 2122, 2143,
     2144, 2146, 2151, 2144, 2152, 2112, 2153, 2112, 2154, 2157,
     2159, 2161, 2123, 2124, 2125, 2130, 2131, 2132, 2134, 2136,
     2137, 2139, 2162, 2164, 2165, 2140, 2167, 2169, 2143, 2144,
     2146, 2151, 2144, 2152, 2171, 2153, 2172, 2154, 2157, 2159,

     2161, 2173, 2174, 2175, 2176, 2177, 2179, 2180, 2181, 2183,
     2184, 2162, 2164, 2165, 2185, 2167, 2169, 2186, 2187, 2188,
     2189, 2190, 2191, 2171, 2193, 2172, 2194, 2195, 2196, 2197,
     2173, 2174, 2175, 2176, 2177, 2179, 2180, 2181, 2183, 2184,
     2199, 2200, 2201, 2185, 2204, 2205, 2186, 2187, 2188, 2189,
     2190, 2191, 2206, 2193, 2207, 2194, 2195, 2196, 2197, 2209,
     2210, 2210, 2210, 2210, 2210, 2217, 2218, 2219, 2221, 2199,
     2200, 2201, 2222, 2204, 2205, 2212, 2212, 2212, 2212, 2212,
     2223, 2206, 2224, 2207, 2225, 2226, 2228, 2229, 2209, 2213,
     2213, 2213, 2213, 2213, 2217, 2218, 2219, 2221, 2230, 2231,

     2232, 2222, 2234, 2236, 2237, 2238, 2239, 2240, 2241, 2223,
     2242, 2224, 2243, 2225, 2226, 2228, 2229, 2244, 2245, 2246,
     2247, 2248, 2243, 2249, 2243, 2250, 2251, 2230, 2231, 2232,
     2253, 2234, 2236, 2237, 2238, 2239, 2240, 2241, 2254, 2242,
     2255, 2243, 2256, 2261, 2262, 2263, 2244, 2245, 2246, 2247,
     2248, 2243, 2249, 2243, 2250, 2251, 2265, 2267, 2268, 2253,
     2270, 2271, 2274, 2275, 2277, 2282, 2275, 2254, 2283, 2255,
     2284, 2256, 2261, 2262, 2263, 2285, 2288, 2290, 2292, 2293,
     2295, 2296, 2298, 2300, 2302, 2265, 2267, 2268, 2303, 2270,
     2271, 2274, 2275, 2277, 2282, 2275, 2304, 2283, 2305, 2284,

     2306, 2307, 2308, 2310, 2285, 2288, 2290, 2292, 2293, 2295,
     2296, 2298, 2300, 2302, 2311, 2312, 2314, 2303, 2315, 2316,
     2317, 2318, 2319, 2320, 2321, 2304, 2322, 2305, 2324, 2306,
     2307, 2308, 2310, 2325, 2326, 2327, 2328, 2330, 2331, 2332,
     2335, 2336, 2337, 2311, 2312, 2314, 2338, 2315, 2316, 2317,
     2318, 2319, 2320, 2321, 2340, 2322, 2341, 2324, 2343, 2345,
     2347, 2348, 2325, 2326, 2327, 2328, 2330, 2331, 2332, 2335,
     2336, 2337, 2349, 2350, 2351, 2338, 2352, 2354, 2355, 2357,
     2358, 2360, 2361, 2340, 2362, 2341, 2363, 2343, 2345, 2347,
     2348, 2364, 2365, 2366, 2367, 2368, 2369, 2371, 2373, 2376,

     2378, 2349, 2350, 2351, 2379, 2352, 2354, 2355, 2357, 2358,
     2360, 2361, 2380, 2362, 2381, 2363, 2382, 2383, 2387, 2388,
     2364, 2365, 2366, 2367, 2368, 2369, 2371, 2373, 2376, 2378,
     2389, 2390, 2391, 2379, 2393, 2394, 2395, 2396, 2398, 2400,
     2404, 2380, 2405, 2381, 2406, 2382, 2383, 2387, 2388, 2407,
     2408, 2409, 2410, 2411, 2413, 2414, 2415, 2416, 2417, 2389,
     2390, 2391, 2418, 2393, 2394, 2395, 2396, 2398, 2400, 2404,
     2422, 2405, 2423, 2406, 2425, 2426, 2427, 2428, 2407, 2408,
     2409, 2410, 2411, 2413, 2414, 2415, 2416, 2417, 2429, 2430,
     2432, 2418, 2435, 2436, 2437, 2439, 2441, 2443, 2445, 2422,

     2446, 2423, 2447, 2425, 2426, 2427, 2428, 2448, 2449, 2450,
     2452, 2453, 2455, 2456, 2458, 2459, 2460, 2429, 2430, 2432,
     2461, 2435, 2436, 2437, 2439, 2441, 2443, 2445, 2462, 2446,
     2463, 2447, 2464, 2465, 2466, 2467, 2448, 2449, 2450, 2452,
     2453, 2455, 2456, 2458, 2459, 2460, 2469, 2471, 2474, 2461,
     2476, 2477, 2478, 2479, 2480, 2481, 2485, 2462, 2486, 2463,
     2487, 2464, 2465, 2466, 2467, 2488, 2489, 2491, 2492, 2493,
     2494, 2496, 2498, 2502, 2503, 2469, 2471, 2474, 2504, 2476,
     2477, 2478, 2479, 2480, 2481, 2485, 2505, 2486, 2506, 2487,
     2507, 2508, 2509, 2511, 2488, 2489, 2491, 2492, 2493, 2494,

     2496, 2498, 2502, 2503, 2512, 2513, 2514, 2504, 2515, 2516,
     2520, 2521, 2523, 2524, 2525, 2505, 2526, 2506, 2527, 2507,
     2508, 2509, 2511, 2528, 2530, 2533, 2534, 2535, 2537, 2537,
     2537, 2537, 2537, 2512, 2513, 2514, 2538, 2515, 2516, 2520,
     2521, 2523, 2524, 2525, 2540, 2526, 2542, 2527, 2544, 2545,
     2546, 2547, 2528, 2530, 2533, 2534, 2535, 2548, 2549, 2551,
     2552, 2554, 2555, 2557, 2558, 2538, 2559, 2560, 2561, 2562,
     2563, 2564, 2565, 2540, 2566, 2542, 2568, 2544, 2545, 2546,
     2547, 2570, 2573, 2575, 2576, 2577, 2548, 2549, 2551, 2552,
     2554, 2555, 2557, 2558, 2578, 2559, 2560, 2561, 2562, 2563,

     2564, 2565, 2579, 2566, 2580, 2568, 2584, 2585, 2586, 2587,
     2570, 2573, 2575, 2576, 2577, 2588, 2590, 2591, 2592, 2593,
     2595, 2597, 2601, 2578, 2602, 2603, 2604, 2605, 2606, 2607,
     2608, 2579, 2610, 2580, 2611, 2584, 2585, 2586, 2587, 2612,
     2613, 2614, 2615, 2619, 2588, 2590, 2591, 2592, 2593, 2595,
     2597, 2601, 2620, 2602, 2603, 2604, 2605, 2606, 2607, 2608,
     2622, 2610, 2623, 2611, 2624, 2625, 2626, 2627, 2612, 2613,
     2614, 2615, 2619, 2629, 2632, 2633, 2634,    0,    0,    0,
        0, 2620, 2636, 2636, 2636, 2636, 2636, 2639, 2641, 2622,
     2643, 2623, 2645, 2624, 2625, 2626, 2627, 2637, 2637, 2637,

     2637, 2637, 2629, 2632, 2633, 2634, 2638, 2638, 2638, 2638,
     2638, 2646, 2647, 2648, 2649, 2650, 2639, 2641, 2652, 2643,
     2653, 2645, 2655, 2656, 2658, 2659, 2660, 2661, 2662, 2663,
     2664, 2665, 2666, 2667, 2669, 2671, 2674, 2676, 2677, 2678,
     2646, 2647, 2648, 2649, 2650, 2679, 2680, 2652, 2681, 2653,
     2685, 2655, 2656, 2658, 2659, 2660, 2661, 2662, 2663, 2664,
     2665, 2666, 2667, 2669, 2671, 2674, 2676, 2677, 2678, 2686,
     2687, 2688, 2689, 2691, 2679, 2680, 2692, 2681, 2693, 2685,
     2694, 2696, 2698, 2702, 2703, 2704, 2705, 2706, 2707, 2708,
     2709, 2711, 2712, 2713, 2714, 2715, 2716, 2720, 2686, 2687,

     2688, 2689, 2691, 2721, 2723, 2692, 2724, 2693, 2725, 2694,
     2696, 2698, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709,
     2711, 2712, 2713, 2714, 2715, 2716, 2720, 2726, 2727, 2728,
     2730, 2733, 2721, 2723, 2734, 2724, 2735, 2725, 2737, 2738,
     2740, 2742, 2743, 2744, 2746, 2750, 2751, 2752, 2754, 2755,
     2756, 2760, 2761, 2764, 2765, 2768, 2726, 2727, 2728, 2730,
     2733, 2771, 2772, 2734, 2773, 2735, 2774, 2737, 2738, 2740,
     2742, 2743, 2744, 2746, 2750, 2751, 2752, 2754, 2755, 2756,
     2760, 2761, 2764, 2765, 2768, 2775, 2777, 2779, 2780, 2783,
     2771, 2772, 2784, 2773, 2785, 2774, 2787, 2789, 2792, 2793,

     2794, 2795, 2796, 2797, 2798, 2799, 2801, 2803, 2806, 2807,
     2809, 2811, 2812, 2813, 2775, 2777, 2779, 2780, 2783, 2815,
     2819, 2784, 2820, 2785, 2821, 2787, 2789, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2799, 2801, 2803, 2806, 2807, 2809,
     2811, 2812, 2813, 2823, 2824, 2825, 2829, 2830, 2815, 2819,
     2833, 2820, 2834, 2821, 2837, 2840, 2841, 2842, 2843, 2844,
     2846, 2848, 2849, 2852, 2853, 2854, 2856, 2858, 2861, 2862,
     2863, 2864, 2823, 2824, 2825, 2829, 2830, 2865, 2866, 2833,
     2867, 2834, 2868, 2837, 2840, 2841, 2842, 2843, 2844, 2846,
     2848, 2849, 2852, 2853, 2854, 2856, 2858, 2861, 2862, 2863,

     2864, 2870, 2872, 2876, 2877, 2879, 2865, 2866, 2881, 2867,
     2882, 2868, 2875, 2875, 2875, 2875, 2875, 2883, 2885, 2889,
     2890, 2891, 2893, 2894, 2895, 2899, 2900, 2903, 2904, 2907,
     2870, 2872, 2876, 2877, 2879, 2910, 2911, 2881, 2912, 2882,
     2913, 2914, 2916, 2918, 2919, 2922, 2883, 2885, 2889, 2890,
     2891, 2893, 2894, 2895, 2899, 2900, 2903, 2904, 2907, 2923,
     2924, 2926, 2928, 2931, 2910, 2911, 2932, 2912, 2933, 2913,
     2914, 2916, 2918, 2919, 2922, 2934, 2935, 2936, 2937, 2938,
     2940, 2942, 2945, 2945, 2945, 2945, 2945, 2947, 2923, 2924,
     2926, 2928, 2931, 2948, 2950, 2932, 2952, 2933, 2946, 2946,

     2946, 2946, 2946, 2953, 2934, 2935, 2936, 2937, 2938, 2940,
     2942, 2954, 2956, 2960, 2961, 2962, 2947, 2964, 2965, 2966,
     2970, 2971, 2948, 2950, 2974, 2952, 2975, 2978, 2981, 2982,
     2983, 2984, 2953, 2985, 2987, 2989, 2990, 2993, 2994, 2995,
     2954, 2956, 2960, 2961, 2962, 2997, 2964, 2965, 2966, 2970,
     2971, 2999, 3002, 2974, 3003, 2975, 2978, 2981, 2982, 2983,
     2984, 3004, 2985, 2987, 2989, 2990, 2993, 2994, 2995, 3005,
     3006, 3007, 3008, 3009, 2997, 3011, 3013, 3016, 3017, 3018,
     2999, 3002, 3019, 3003, 3020, 3026, 3027, 3028, 3029, 3031,
     3004, 3032, 3033,    0, 3034,    0,    0,    0, 3005, 3006,

     3007, 3008, 3009, 3035, 3011, 3013, 3016, 3017, 3018, 3023,
     3023, 3019, 3037, 3020, 3026, 3027, 3028, 3029, 3031, 3038,
     3032, 3033, 3023, 3034, 3023, 3023, 3023, 3040, 3041, 3042,
     3044, 3045, 3035, 3046, 3049, 3051, 3047, 3052, 3023, 3023,
     3047, 3037, 3053, 3054, 3055, 3056, 3057, 3058, 3038, 3059,
     3060, 3023, 3061, 3023, 3023, 3023, 3040, 3041, 3042, 3044,
     3045, 3062, 3046, 3049, 3051, 3047, 3052, 3065, 3065, 3047,
     3068, 3053, 3054, 3055, 3056, 3057, 3058, 3069, 3059, 3060,
     3065, 3061, 3065, 3065, 3065, 3070, 3071, 3073, 3074, 3075,
     3062, 3076, 3077, 3079, 3080, 3082, 3065, 3065, 3083, 3068,

     3084, 3086, 3087, 3088, 3089, 3091, 3069, 3093, 3089, 3065,
     3094, 3065, 3065, 3065, 3070, 3071, 3073, 3074, 3075, 3095,
     3076, 3077, 3079, 3080, 3082, 3096, 3097, 3083, 3098, 3084,
     3086, 3087, 3088, 3089, 3091, 3099, 3093, 3089, 3100, 3094,
     3101, 3102, 3103, 3104, 3110, 3107, 3107, 3111, 3095, 3112,
     3113, 3115, 3116, 3117, 3096, 3097, 3118, 3098, 3107, 3119,
     3107, 3107, 3107, 3121, 3099, 3122, 3124, 3100, 3125, 3101,
     3102, 3103, 3104, 3110, 3107, 3107, 3111, 3126, 3112, 3113,
     3115, 3116, 3117, 3128, 3129, 3118, 3130, 3107, 3119, 3107,
     3107, 3107, 3121, 3133, 3122, 3124, 3131, 3125, 3135, 3136,

     3131, 3137, 3138, 3139, 3140, 3141, 3126, 3142, 3143, 3144,
     3145, 3146, 3128, 3129, 3152, 3130, 3153, 3154, 3155, 3157,
     3158, 3159, 3133, 3160, 3161, 3131, 3163, 3135, 3136, 3131,
     3137, 3138, 3139, 3140, 3141, 3164, 3142, 3143, 3144, 3145,
     3146, 3149, 3149, 3152, 3166, 3153, 3154, 3155, 3157, 3158,
     3159, 3167, 3160, 3161, 3149, 3163, 3149, 3149, 3149, 3168,
     3170, 3171, 3172, 3173, 3164, 3175, 3177, 3173, 3178, 3179,
     3149, 3149, 3180, 3166, 3181, 3182, 3183, 3185, 3186, 3188,
     3167, 3189, 3191, 3149,    0, 3149, 3149, 3149, 3168, 3170,
     3171, 3172, 3173, 3192, 3175, 3177, 3173, 3178, 3179, 3193,

     3194, 3180, 3196, 3181, 3182, 3183, 3185, 3186, 3188, 3190,
     3189, 3191, 3199, 3190, 3200, 3202, 3204, 3207, 3212, 3213,
     3214, 3217, 3192, 3223, 3217, 3224, 3226, 3227, 3193, 3194,
     3228, 3196, 3229, 3230, 3228, 3231, 3232, 3234, 3190, 3237,
     3238, 3199, 3190, 3200, 3202, 3204, 3207, 3212, 3213, 3214,
     3217, 3240, 3223, 3217, 3224, 3226, 3227, 3242, 3245, 3228,
     3250, 3229, 3230, 3228, 3231, 3232, 3234, 3251, 3237, 3238,
     3252, 3255, 3261, 3262, 3255, 3264, 3265, 3266, 3267, 3268,
     3240, 3266, 3269, 3270, 3272, 3275, 3242, 3245, 3276, 3250,
     3278, 3280, 3283, 3288, 3289, 3290, 3251, 3299, 3300, 3252,

     3255, 3261, 3262, 3255, 3264, 3265, 3266, 3267, 3268, 3302,
     3266, 3269, 3270, 3272, 3275, 3293, 3303, 3276, 3293, 3278,
     3280, 3283, 3288, 3289, 3290, 3304, 3299, 3300, 3305, 3304,
     3306, 3307, 3308, 3310, 3313, 3314, 3316, 3318, 3302, 3321,
     3326, 3327, 3328, 3331, 3293, 3303, 3331, 3293, 3336, 3338,
     3339, 3340, 3341, 3342, 3304, 3343, 3344, 3305, 3304, 3306,
     3307, 3308, 3310, 3313, 3314, 3316, 3318, 3345, 3321, 3326,
     3327, 3328, 3331, 3347, 3348, 3331, 3349, 3336, 3338, 3339,
     3340, 3341, 3342, 3351, 3343, 3344, 3353, 3355, 3356, 3357,
     3359, 3360, 3361, 3362, 3363, 3364, 3345, 3365, 3366, 3368,

     3369, 3370, 3347, 3348, 3372, 3349, 3374, 3376, 3377, 3378,
     3380, 3381, 3351, 3382, 3383, 3353, 3355, 3356, 3357, 3359,
     3360, 3361, 3362, 3363, 3364, 3384, 3365, 3366, 3368, 3369,
     3370, 3385, 3386, 3372, 3387, 3374, 3376, 3377, 3378, 3380,
     3381, 3389, 3382, 3383, 3390, 3391, 3393, 3395, 3397, 3398,
     3399, 3401, 3402, 3403, 3384, 3404, 3405, 3406, 3407, 3408,
     3385, 3386, 3410, 3387, 3411, 3412, 3414, 3416, 3418, 3419,
     3389, 3420, 3422, 3390, 3391, 3393, 3395, 3397, 3398, 3399,
     3401, 3402, 3403, 3423, 3404, 3405, 3406, 3407, 3408, 3424,
     3425, 3410, 3426, 3411, 3412, 3414, 3416, 3418, 3419, 3427,

     3420, 3422, 3428, 3429, 3431, 3432, 3434, 3435, 3436, 3438,
     3439, 3440, 3423, 3441, 3442, 3443, 3444, 3445, 3424, 3425,
     3447, 3426, 3448, 3450, 3451, 3452, 3454, 3455, 3427, 3456,
     3457, 3428, 3429, 3431, 3432, 3434, 3435, 3436, 3438, 3439,
     3440, 3458, 3441, 3442, 3443, 3444, 3445, 3459, 3460, 3447,
     3461, 3448, 3450, 3451, 3452, 3454, 3455, 3463, 3456, 3457,
     3464, 3466, 3467, 3468, 3470, 3471, 3472, 3473, 3474, 3475,
     3458, 3476, 3477, 3479, 3480, 3482, 3459, 3460, 3483, 3461,
     3484, 3485, 3487, 3490, 3491, 3496, 3463, 3497, 3498, 3464,
     3466, 3467, 3468, 3470, 3471, 3472, 3473, 3474, 3475, 3500,

     3476, 3477, 3479, 3480, 3482, 3503, 3504, 3483, 3509, 3484,
     3485, 3487, 3490, 3491, 3496, 3510, 3497, 3498, 3511, 3513,
     3516, 3517, 3522, 3523, 3524, 3526, 3529, 3530, 3500, 3535,
     3537, 3538, 3539, 3540, 3503, 3504, 3543, 3509, 3544, 3545,
     3546, 3549, 3550, 3551, 3510, 3552, 3555, 3511, 3513, 3516,
     3517, 3522, 3523, 3524, 3526, 3529, 3530, 3556, 3535, 3537,
     3538, 3539, 3540, 3557, 3558, 3543, 3560, 3544, 3545, 3546,
     3549, 3550, 3551, 3561, 3552, 3555, 3563, 3564, 3565, 3567,
     3568, 3569, 3571, 3572, 3573, 3575, 3556, 3578, 3581, 3584,
     3587, 3588, 3557, 3558, 3589, 3560, 3590, 3591, 3592, 3593,

     3594, 3595, 3561, 3596, 3598, 3563, 3564, 3565, 3567, 3568,
     3569, 3571, 3572, 3573, 3575, 3600, 3578, 3581, 3584, 3587,
     3588, 3602, 3604, 3589, 3605, 3590, 3591, 3592, 3593, 3594,
     3595, 3606, 3596, 3598, 3607, 3608, 3609, 3610, 3611, 3612,
     3613, 3614, 3615, 3616, 3600, 3617, 3618, 3619, 3620, 3621,
     3602, 3604, 3622, 3605, 3623, 3624, 3625, 3626, 3627, 3628,
     3606, 3629, 3630, 3607, 3608, 3609, 3610, 3611, 3612, 3613,
     3614, 3615, 3616, 3631, 3617, 3618, 3619, 3620, 3621, 3636,
     3637, 3622, 3638, 3623, 3624, 3625, 3626, 3627, 3628, 3639,
     3629, 3630, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647,

     3648, 3649, 3631, 3650, 3651, 3652, 3653, 3654, 3636, 3637,
     3655, 3638,    0,    0,    0,    0,    0,    0, 3639,    0,
        0, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648,
     3649,    0, 3650, 3651, 3652, 3653, 3654,    0,    0, 3655,
     3661,    0, 3661, 3662,    0, 3662, 3663, 3663, 3663, 3663,
     3663, 3664,    0, 3664, 3664, 3664, 3664, 3664, 3664, 3665,
        0,    0, 3665, 3665, 3665,    0, 3665, 3666, 3666, 3666,
     3666, 3666, 3666, 3666, 3666, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3668,    0, 3668, 3668, 3668, 3668, 3668,
     3668, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,

     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3661 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3660 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 220:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 221:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 222:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 223:
case 224:
case 225:
case 226:
case 227:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 228:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 231:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 232:
case 233:
case 234:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 235:
case 236:
case 237:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 238:
case 239:
case 240:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 241:
case 242:
case 243:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 244:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 249:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 250:
/* rule 250 can match eol */
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 253:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
YY_RULE_SETUP
{}
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 258:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 259:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3661 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3661 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3660);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

