//#line 2 "D:\\bsw\\git-native-master\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1604] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,  146,  152,  150,  148,  147,  150,   96,  111,  108,
      139,  111,   97,   99,   98,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  107,  106,  137,  111,
      113,  113,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  140,  138,  141,  111,  111,  121,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  111,  121,  150,  146,  146,  146,  146,  144,
       96,  111,  108,  111,  111,  111,   97,   99,   98,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      145,  107,  106,  148,  103,    0,  105,  109,  100,  102,
      101,  110,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   46,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,   68,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,  115,
      116,  113,    0,    0,  112,  112,  112,    4,  112,  112,
      112,  112,  112,  112,   12,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   46,   53,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   66,   68,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  136,  126,  136,  136,  136,  121,  136,  120,  120,

      120,    4,  120,  120,  120,  120,  120,  120,   12,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   46,   53,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,   66,   68,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  132,  136,  136,  136,  121,
      136,    0,  142,  146,  146,  103,  146,  105,  109,  100,
      102,  101,  110,  146,  146,    4,  146,  146,  146,  146,
      146,  146,   12,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   46,   53,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   66,
       68,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  104,
        0,  149,    1,    2,    3,    5,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
        0,    0,    0,   39,    0,    0,    0,    0,   45,    0,
        0,   49,    0,    0,    0,    0,    0,    0,    0,   60,

       61,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   77,    0,    0,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,    0,    0,  117,  114,    1,    2,    3,    5,    6,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   29,  112,
      112,  112,  112,  112,  112,  112,   39,  112,  112,  112,
      112,   45,  112,  112,   49,  112,  112,  112,  112,  112,
      112,  112,   60,   61,  112,   63,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   77,  112,  112,

       80,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,    0,  129,  136,  124,  136,  121,    0,  127,
        1,    2,    3,    5,    6,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   29,  120,  120,  120,  120,  120,  120,
      120,   39,  120,  120,  120,  120,   45,  120,  120,   49,
      120,  120,  120,  120,  120,  120,  120,   60,   61,  120,
       63,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   77,  120,  120,   80,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,    0,  135,  130,

      136,  136,  121,    0,  133,  142,    0,  142,  146,  146,
        1,    2,    3,    5,    6,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,   29,  146,  146,  146,  146,  146,  146,
      146,   39,  146,  146,  146,  146,   45,  146,  146,   49,
      146,  146,  146,  146,  146,  146,  146,   60,   61,  146,
       63,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   77,  146,  146,   80,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,    0,    0,    0,
       10,    0,   13,   14,    0,    0,    0,    0,   21,    0,

        0,   24,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,   41,   42,    0,    0,    0,    0,
        0,    0,   52,   54,   37,   55,   56,    0,   58,    0,
        0,   64,    0,   67,    0,    0,    0,   72,    0,    0,
        0,    0,   78,    0,   81,   82,   84,    0,    0,    0,
        0,    0,    0,    0,   93,    0,   95,    0,  119,    0,
      118,  112,  112,  112,   10,  112,   13,   14,  112,  112,
      112,  112,   21,  112,  112,   24,  112,  112,  112,   28,
      112,  112,  112,  112,  112,  112,  112,  112,   41,   42,
      112,  112,  112,  112,  112,  112,   52,   54,   37,   55,

       56,  112,   58,  112,  112,   64,  112,   67,  112,  112,
      112,   72,  112,  112,  112,  112,   78,  112,   81,   82,
       84,  112,  112,  112,  112,  112,  112,  112,   93,  112,
       95,  129,  136,    0,  128,  121,  127,  120,  120,  120,
       10,  120,   13,   14,  120,  120,  120,  120,   21,  120,
      120,   24,  120,  120,  120,   28,  120,  120,  120,  120,
      120,  120,  120,  120,   41,   42,  120,  120,  120,  120,
      120,  120,   52,   54,   37,   55,   56,  120,   58,  120,
      120,   64,  120,   67,  120,  120,  120,   72,  120,  120,
      120,  120,   78,  120,   81,   82,   84,  120,  120,  120,

      120,  120,  120,  120,   93,  120,   95,  135,    0,  134,
      136,  121,  133,    0,  142,  146,  146,  146,   10,  146,
       13,   14,  146,  146,  146,  146,   21,  146,  146,   24,
      146,  146,  146,   28,  146,  146,  146,  146,  146,  146,
      146,  146,   41,   42,  146,  146,  146,  146,  146,  146,
       52,   54,   37,   55,   56,  146,   58,  146,  146,   64,
      146,   67,  146,  146,  146,   72,  146,  146,  146,  146,
       78,  146,   81,   82,   84,  146,  146,  146,  146,  146,
      146,  146,   93,  146,   95,    0,    0,    0,    0,    0,
       16,   17,    0,    0,    0,    0,    0,    0,    0,   31,

        0,    0,   34,   36,   35,    0,   43,    0,   47,    0,
       50,    0,    0,   57,   59,    0,   38,    0,   69,   70,
        0,    0,   74,    0,    0,    0,    0,   85,    0,    0,
        0,   89,   90,    0,   94,  112,  112,  112,  112,  112,
       16,   17,  112,  112,  112,  112,  112,  112,  112,   31,
      112,  112,   34,   36,   35,  112,   43,  112,   47,  112,
       50,  112,  112,   57,   59,  112,   38,  112,   69,   70,
      112,  112,   74,  112,  112,  112,  112,   85,  112,  112,
      112,   89,   90,  112,   94,  122,  128,  120,  120,  120,
      120,  120,   16,   17,  120,  120,  120,  120,  120,  120,

      120,   31,  120,  120,   34,   36,   35,  120,   43,  120,
       47,  120,   50,  120,  120,   57,   59,  120,   38,  120,
       69,   70,  120,  120,   74,  120,  120,  120,  120,   85,
      120,  120,  120,   89,   90,  120,   94,  134,  123,    0,
      143,  146,  146,  146,  146,  146,   16,   17,  146,  146,
      146,  146,  146,  146,  146,   31,  146,  146,   34,   36,
       35,  146,   43,  146,   47,  146,   50,  146,  146,   57,
       59,  146,   38,  146,   69,   70,  146,  146,   74,  146,
      146,  146,  146,   85,  146,  146,  146,   89,   90,  146,
       94,    0,    0,    9,    0,   15,    0,    0,   23,    0,

       26,    0,   30,   32,   33,    0,   44,   48,    0,    0,
        0,   65,   71,    0,    0,   76,   79,    0,   86,    0,
       88,   91,    0,  112,  112,    9,  112,   15,  112,  112,
       23,  112,   26,  112,   30,   32,   33,  112,   44,   48,
      112,  112,  112,   65,   71,  112,  112,   76,   79,  112,
       86,  112,   88,   91,  112,  136,  120,  120,    9,  120,
       15,  120,  120,   23,  120,   26,  120,   30,   32,   33,
      120,   44,   48,  120,  120,  120,   65,   71,  120,  120,
       76,   79,  120,   86,  120,   88,   91,  120,  136,  143,
      143,  146,  146,    9,  146,   15,  146,  146,   23,  146,

       26,  146,   30,   32,   33,  146,   44,   48,  146,  146,
      146,   65,   71,  146,  146,   76,   79,  146,   86,  146,
       88,   91,  146,    0,    8,   11,    0,   22,    0,    0,
       40,   49,    0,   62,    0,    0,    0,   87,   92,  112,
        8,   11,  112,   22,  112,  112,   40,   49,  112,   62,
      112,  112,  112,   87,   92,  125,  120,    8,   11,  120,
       22,  120,  120,   40,   49,  120,   62,  120,  120,  120,
       87,   92,  131,  143,  146,    8,   11,  146,   22,  146,
      146,   40,   49,  146,   62,  146,  146,  146,   87,   92,
        7,    0,   25,    0,    0,    0,   75,    0,    7,  112,

       25,  112,  112,  112,   75,  112,    7,  120,   25,  120,
      120,  120,   75,  120,    7,  146,   25,  146,  146,  146,
       75,  146,    0,    0,    0,   51,   73,   83,  112,  112,
      112,   51,   73,   83,  120,  120,  120,   51,   73,   83,
      146,  146,  146,   51,   73,   83,    0,    0,    0,  112,
      112,  112,  120,  120,  120,  146,  146,  146,    0,    0,
        0,  112,  112,  112,  120,  120,  120,  146,  146,  146,
       18,   19,   27,   18,   19,   27,   18,   19,   27,   18,
       19,   27,    0,  112,  120,  146,    0,  112,  120,  146,
        0,  112,  120,  146,    0,  112,  120,  146,   20,   20,

       20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[1613] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  509, 3651,  359, 3651,  481, 3651, 3651, 3651,
     3651,  346,  341, 3651,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  415,  437,  350,
      447,  448,  458,  459,  412,  462,  392, 3651, 3651,  516,
      521,  526,  510,  529,  522,  541,  574,  590,  402,  456,
      575,  446,    0,  634,  527,  580,  586,  446,  633,  636,
      636,  636,  473,  638, 3651, 3651, 3651,    0,  695,  702,
      687,  707,  703,  751,  743,  762,  459,  532,  696,  520,
        0,  763,  538,  758,  799,  531,  806,  809,  810,  817,

      579,  705,  874,  881,  666,    0,  393,    0,  428, 3651,
        0,    0,    0,    0,  375, 3651,  728,    0,  490,  813,
      876,  877,  888,  922,  930,  569,  589,  885,  582,  952,
      881,  928,  941,  585,  974,  980,  984,  921,  652,  761,
     3651,  367,    0,  549, 3651,  437, 3651, 3651, 3651, 3651,
     3651, 3651,  651,  990,  666,  695,  708,  700,  744,  795,
      801, 3651,  803,  984,  808,  808,  851,  992,  861,  862,
      865,  868,  948,  984,  994, 1000,  994,  989,  995,  995,
     1002, 1007, 1005, 1003, 1031, 1031, 3651, 1032, 1024, 1041,
     1042, 1038, 1036, 1043, 1038, 1039, 1049, 1056, 1051, 1060,

     1045, 1066, 1068, 1061, 1061, 1063, 1064, 1060, 1082, 1094,
     1088, 1082, 1099, 1101, 1100, 1099, 1108, 1094, 3651, 1126,
     1156, 1161, 1175,    0,    0, 1103, 1153, 1113, 1122, 1130,
     1115, 1133, 1144, 1156,    0, 1153, 1160, 1159, 1157, 1157,
     1173, 1161, 1161, 1164, 1165, 1183, 1186, 1186, 1190, 1182,
     1178, 1182, 1180, 1190, 1203, 1202, 1197, 1218, 1216,    0,
     1220, 1212, 1226, 1226, 1219, 1218, 1226, 1221, 1223, 1233,
     1241, 1237, 1246, 1231, 1251, 1253, 1248, 1245, 1270, 1250,
     1255, 1262, 1272, 1274, 1267, 1280, 1289, 1285, 1283, 1291,
     1277,    0, 1339, 1315, 1320, 1343, 1358, 1366,    0, 1286,

     1337, 1296, 1293, 1336, 1320, 1328, 1328, 1330,    0, 1327,
     1344, 1340, 1346, 1346, 1370, 1348, 1357, 1360, 1361, 1377,
     1380, 1380, 1394, 1375, 1370, 1375, 1380, 1384, 1388, 1386,
     1380, 1398, 1401,    0, 1397, 1394, 1416, 1412, 1410, 1414,
     1422, 1417, 1419, 1428, 1435, 1431, 1441, 1426, 1446, 1454,
     1441, 1444, 1459, 1445, 1441, 1447, 1456, 1449, 1443, 1469,
     1469, 1472, 1480, 1477, 1463, 1511, 1525, 1530, 1502, 1537,
     1546, 1554, 1559,    0,  636,    0, 1578,    0,    0,    0,
        0,    0,    0, 1502, 1540, 1530, 1543, 1554, 1539, 1546,
     1546, 1551,    0, 1548, 1556, 1553, 1552, 1552, 1581, 1556,

     1559, 1562, 1563, 1579, 1581, 1580, 1599, 1579, 1574, 1588,
     1589, 1600, 1605, 1603, 1597, 1617, 1614,    0, 1615, 1606,
     1620, 1627, 1613, 1615, 1616, 1621, 1622, 1631, 1639, 1637,
     1646, 1631, 1657, 1672, 1653, 1649, 1664, 1652, 1648, 1664,
     1676, 1669, 1662, 1677, 1681, 1682, 1680, 1688, 1676,    0,
      430, 3651, 3651, 3651, 3651, 3651, 3651, 1686, 1676, 1699,
     1699, 1691, 1703, 1694, 1695, 1697, 1700, 1714, 1723, 1726,
     1730, 1714, 1733, 1722, 1735, 3651, 1740, 1724, 1738, 1725,
     1727, 1730, 1749, 1728, 1741, 1743, 1735, 1748, 3651, 1753,
     1754, 1786, 1747, 1745, 1746, 1762, 1765, 1769, 1774, 3651,

     3651, 1761, 3651, 1777, 1773, 1768, 1792, 1793, 1792, 1788,
     1781, 1796, 1795, 1803, 3651, 1804, 1801, 3651, 1798, 1808,
     1809, 1800, 1802, 1818, 1809, 1803, 1822, 1833, 1824, 1870,
     1874, 1893, 1878, 1897,    0,    0,    0,    0,    0,    0,
     1838, 1832, 1873, 1873, 1865, 1877, 1880, 1880, 1876, 1878,
     1893, 1898, 1895, 1898, 1882, 1903, 1890, 1904,    0, 1909,
     1894, 1908, 1895, 1896, 1897, 1916, 1895, 1906, 1908, 1900,
     1923,    0, 1928, 1930, 1958, 1923, 1920, 1931, 1947, 1945,
     1948, 1953,    0,    0, 1936,    0, 1946, 1940, 1935, 1960,
     1962, 1961, 1958, 1950, 1964, 1962, 1970,    0, 1971, 1968,

        0, 1964, 1974, 1977, 1976, 1976, 1994, 1984, 1988, 2007,
     1998, 2005, 2036, 2040, 2054, 2058, 2066, 2073, 2077, 2081,
        0,    0,    0,    0,    0, 2003, 1992, 2025, 2055, 2065,
     2074, 2067, 2067, 2063, 2065, 2079, 2084, 2082, 2085, 2069,
     2088, 2074, 2088,    0, 2094, 2078, 2092, 2079, 2080, 2081,
     2100, 2079, 2090, 2092, 2084, 2106,    0, 2116, 2130, 2141,
     2123, 2118, 2119, 2135, 2132, 2135, 2140,    0,    0, 2124,
        0, 2135, 2129, 2124, 2146, 2147, 2146, 2142, 2134, 2149,
     2146, 2154,    0, 2155, 2152,    0, 2148, 2158, 2160, 2178,
     2159, 2178, 2182, 2176, 2195, 2185, 2192, 2212, 2217, 2225,

     2243, 2221, 2250, 2254, 2258, 2276, 2268, 2280, 2300,    0,
        0,    0,    0,    0,    0, 2246, 2241, 2264, 2264, 2264,
     2277, 2266, 2267, 2264, 2269, 2283, 2288, 2285, 2288, 2272,
     2297, 2284, 2297,    0, 2302, 2286, 2301, 2288, 2290, 2294,
     2313, 2292, 2309, 2311, 2303, 2316,    0, 2324, 2329, 2342,
     2325, 2320, 2321, 2340, 2337, 2341, 2346,    0,    0, 2329,
        0, 2343, 2337, 2334, 2355, 2356, 2355, 2352, 2344, 2358,
     2355, 2366,    0, 2367, 2364,    0, 2366, 2376, 2377, 2382,
     2369, 2386, 2378, 2377, 2400, 2390, 2397, 2383, 2402, 2395,
     3651, 2409, 3651, 3651, 2406, 2397, 2399, 2414, 3651, 2399,

     2402, 3651, 2414, 2412, 2413, 3651, 2413, 2405, 2415, 2418,
     2434, 2420, 2421, 2444, 3651, 3651, 2434, 2441, 2438, 2439,
      408, 2454, 3651, 3651, 3651, 3651, 3651, 2442, 3651, 2455,
     2446, 2446, 2461, 3651, 2453, 2455, 2462, 3651, 2458, 2457,
     2476, 2477, 3651, 2467, 3651, 2463, 3651, 2469, 2466, 2473,
     2469, 2489, 2492, 2490, 3651, 2494, 3651, 2527, 2537, 2541,
     2545, 2490, 2509, 2497,    0, 2518,    0,    0, 2515, 2521,
     2526, 2541,    0, 2526, 2528,    0, 2540, 2538, 2539,    0,
     2538, 2530, 2540, 2537, 2553, 2539, 2540, 2560,    0,    0,
     2546, 2549, 2546, 2547,  376, 2564,    0,    0,    0,    0,

        0, 2546,    0, 2559, 2550, 2550, 2567,    0, 2555, 2563,
     2586,    0, 2585, 2584, 2603, 2603,    0, 2593,    0, 2589,
        0, 2595, 2591, 2598, 2594, 2608, 2611, 2609,    0, 2613,
        0, 2627, 2631, 2656, 2660, 2665, 2669, 2616, 2635, 2647,
        0, 2661,    0,    0, 2658, 2651, 2653, 2668,    0, 2653,
     2655,    0, 2667, 2665, 2666,    0, 2663, 2655, 2665, 2662,
     2678, 2664, 2665, 2685,    0,    0, 2671, 2674, 2671, 2672,
      372, 2713,    0,    0,    0,    0,    0, 2672,    0, 2685,
     2679, 2679, 2718,    0, 2706, 2707, 2715,    0, 2711, 2710,
     2730, 2730,    0, 2720,    0, 2716,    0, 2722, 2716, 2723,

     2719, 2733, 2736, 2734,    0, 2738,    0, 2752, 2781, 2785,
     2789, 2796, 2800, 2804, 2822, 2779, 2798, 2786,    0, 2800,
        0,    0, 2797, 2787, 2789, 2804,    0, 2789, 2791,    0,
     2803, 2801, 2806,    0, 2803, 2795, 2805, 2802, 2818, 2804,
     2805, 2825,    0,    0, 2811, 2814, 2811, 2825,  366, 2852,
        0,    0,    0,    0,    0, 2824,    0, 2837, 2828, 2841,
     2856,    0, 2844, 2845, 2851,    0, 2847, 2846, 2865, 2865,
        0, 2855,    0, 2852,    0, 2862, 2856, 2863, 2859, 2873,
     2876, 2874,    0, 2878,    0, 2883, 2880, 2861, 2886, 2881,
     3651, 3651, 2888, 2891, 2899, 2903, 2913, 2904, 2915, 3651,

     2901, 2903, 3651, 3651, 3651, 2905, 3651, 2917, 3651, 2905,
     3651, 2921, 2908, 3651, 3651, 2927, 3651, 2909, 3651, 3651,
     2933, 2916, 3651, 2935, 2917, 2931, 2919, 3651, 2935, 2918,
     2937, 3651, 2924, 2943, 3651, 2944, 2954, 2935, 2960, 2942,
        0,    0, 2961, 2964, 2972, 2964, 2974, 2965, 2976,    0,
     2962, 2964,    0,    0,    0, 2966,    0, 2978,    0, 2966,
        0, 2982, 2973,    0,    0, 2992,    0, 2974,    0,    0,
     2994, 2977,    0, 2996, 2978, 2992, 2980,    0, 2996, 2979,
     2998,    0, 2998, 3017,    0, 1134, 3041, 3018, 3015, 3012,
     3037, 3019,    0,    0, 3026, 3029, 3037, 3029, 3039, 3030,

     3045,    0, 3031, 3033,    0,    0,    0, 3035,    0, 3047,
        0, 3035,    0, 3051, 3038,    0,    0, 3057,    0, 3039,
        0,    0, 3059, 3042,    0, 3061, 3043, 3057, 3045,    0,
     3070, 3053, 3072,    0, 3059, 3094,    0, 3104, 1510, 3108,
     3116, 3111, 3108, 3089, 3114, 3096,    0,    0, 3103, 3106,
     3114, 3106, 3116, 3107, 3118,    0, 3105, 3107,    0,    0,
        0, 3109,    0, 3121,    0, 3109,    0, 3125, 3112,    0,
        0, 3131,    0, 3113,    0,    0, 3133, 3116,    0, 3135,
     3117, 3131, 3119,    0, 3135, 3130, 3165,    0, 3152, 3171,
        0, 3155, 3160, 3651, 3161, 3651, 3156, 3157, 3651, 3175,

     3651, 3163, 3651, 3651, 3651, 3176, 3651, 3651, 3163, 3178,
     3172, 3651, 3651, 3176, 3183, 3651, 3651, 3186, 3651, 3174,
     3651, 3651, 3171, 3172, 3177,    0, 3178,    0, 3173, 3174,
        0, 3192,    0, 3180,    0,    0,    0, 3193,    0,    0,
     3180, 3206, 3216,    0,    0, 3220, 3227,    0,    0, 3230,
        0, 3218,    0,    0, 3215, 3242, 3220, 3225,    0, 3227,
        0, 3222, 3223,    0, 3241,    0, 3229,    0,    0,    0,
     3242,    0,    0, 3229, 3243, 3237,    0,    0, 3241, 3248,
        0,    0, 3251,    0, 3239,    0,    0, 3236, 3271, 3292,
     3296, 3251, 3278,    0, 3279,    0, 3274, 3275,    0, 3293,

        0, 3281,    0,    0,    0, 3295,    0,    0, 3282, 3296,
     3290,    0,    0, 3294, 3301,    0,    0, 3304,    0, 3292,
        0,    0, 3289, 3304, 3651, 3651,  315, 3651, 3289, 3290,
     3651, 3651, 3308, 3651, 3290, 3302, 3301, 3651, 3651, 3311,
        0,    0,  218,    0, 3296, 3297,    0,    0, 3315,    0,
     3297, 3309, 3314,    0,    0, 3358, 3350,    0,    0,  211,
        0, 3335, 3337,    0,    0, 3355,    0, 3337, 3349, 3348,
        0,    0, 3370, 3374, 3366,    0,    0,  204,    0, 3351,
     3352,    0,    0, 3370,    0, 3352, 3364, 3363,    0,    0,
     3651, 3373, 3651, 3369, 3359, 3375, 3651, 3365,    0, 3378,

        0, 3376, 3371, 3387,    0, 3378,    0, 3392,    0, 3386,
     3377, 3408,    0, 3399,    0, 3412,    0, 3408, 3398, 3414,
        0, 3412, 3428, 3421, 3416, 3651, 3651, 3651, 3432, 3425,
     3420,    0,    0,    0, 3435, 3428, 3423,    0,    0,    0,
     3438, 3431, 3428,    0,    0,    0, 3429, 3437, 3437, 3432,
     3440, 3440, 3435, 3443, 3456, 3451, 3460, 3460, 3470, 3471,
     3458, 3481, 3482, 3469, 3484, 3485, 3472, 3487, 3488, 3475,
     3651, 3476, 3651,    0, 3477,    0,    0, 3478,    0,    0,
     3479,    0, 3481, 3487, 3488, 3489, 3509, 3510, 3511, 3512,
     3501, 3515, 3516, 3518, 3516, 3517, 3518, 3519, 3651,    0,

        0,    0, 3651, 3585, 3591, 3596, 3605, 3614, 3623,  245,
     3632, 3641
    } ;

static const flex_int16_t yy_def[1613] =
    {   0,
     1603,    1, 1603,    3, 1603,    5,    5,    5,    5,    5,
     1603,   11, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1603, 1603, 1603, 1605, 1605, 1605,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,

     1606, 1606, 1605, 1605, 1607, 1608, 1608, 1608, 1608, 1603,
     1608, 1608, 1608, 1608, 1608, 1603, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1603, 1608, 1608, 1603, 1603, 1609, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1610, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606,

     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1605, 1605, 1605, 1605, 1605,
     1605, 1607, 1607, 1608, 1608, 1608, 1611, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1609, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1610, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,

     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1603, 1605, 1605, 1605, 1605, 1605, 1603, 1605,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1603, 1605, 1605,

     1605, 1605, 1605, 1603, 1605, 1607, 1603, 1607, 1611, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,

     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1603, 1605, 1603, 1605, 1605, 1603, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,

     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1603, 1603, 1605,
     1605, 1605, 1603, 1612, 1607, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1605, 1603, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,

     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1603, 1605, 1612,
     1612, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1605, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1605, 1612,
     1612, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1605, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1605, 1612, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604,

     1604, 1604, 1604, 1604, 1604, 1604, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604,
     1604, 1604, 1604, 1604, 1606, 1606, 1606, 1606, 1606, 1606,
     1608, 1608, 1608, 1608, 1608, 1608, 1603, 1603, 1603, 1604,
     1604, 1604, 1606, 1606, 1606, 1608, 1608, 1608, 1603, 1603,
     1603, 1604, 1604, 1604, 1606, 1606, 1606, 1608, 1608, 1608,
     1603, 1603, 1603, 1604, 1604, 1604, 1606, 1606, 1606, 1608,
     1608, 1608, 1603, 1604, 1606, 1608, 1603, 1604, 1606, 1608,
     1603, 1604, 1606, 1608, 1603, 1604, 1606, 1608, 1603, 1604,

     1606, 1608,    0, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603
    } ;

static const flex_int16_t yy_nxt[3735] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      535,   78,  104,  104,  104,  104,  103, 1516,   78,  104,
      104,  104,  104,   19, 1508,   19,  105,  105,  105,  105,
       19, 1500,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1492,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1267,  164,  161,  170,  165,
      377, 1213,  166,  202,  375, 1161,  144,  162,  153,  378,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  202,  172,  186,  173,  162, 1111,  178,  187,
      174,  179,  452,  175,  180,  176,  193,  181,  216,  452,
      182,  195,  189,  171,  194,  256,  190,  450,  185,  177,
      191,  376,  172,  186,  173,  196,  192,  178,  187,  174,
      179,  197,  175,  180,  176,  193,  181,  216,  198,  182,
      195,  189,  219,  194,  256,  190,  199,  203,  206,  191,
      200,  204,  257,  201,  196,  192,  261,  205,  207,  275,
      197,  210,  211,  208,  209,  217,  218,  198,  213,  289,

      214,  212,  330,  215,  145,  199,  203,  206, 1603,  200,
      204,  257,  201,  382,  383,  261,  205,  207,  275, 1603,
      210,  211,  208,  209,  217,  218, 1603,  213,  289,  214,
      212,  330,  215,  220,  220,  220,  220,  221,  222,  222,
      222,  222,  221,  222,  222,  222,  222,  226,  236,  227,
      144,  223,  144,  266,  228,  230,  223,  229,  331,  231,
      335,  267,  237,  232,  340,  238,  233,  240,  239,  234,
      224,  241,  341, 1603,  349,  242,  226,  236,  227,  235,
      223,  243,  266,  228,  230,  223,  229,  331,  231,  335,
      267,  237,  232,  340,  238,  233,  240,  239,  234,  224,

      241,  341,  244,  349,  242,  363,  268, 1603,  235,  258,
      243,  245,  414,  246,  259,  415,  250,  271,  247,  260,
      269,  248,  419,  249,  251,  272,  270,  252,  433,  273,
      253,  244,  274,  254,  363,  268,  255,  375,  258,  144,
      245,  414,  246,  259,  415,  250,  271,  247,  260,  269,
      248,  419,  249,  251,  272,  270,  252,  433,  273,  253,
      262,  274,  254,  276,  263,  255,  279,  277,  264,  283,
      284,  290,  291,  278,  265,  286,  280,  287,  447,  285,
      288,  281,  282,  373,  373,  373,  373, 1603,  453,  262,
     1603, 1603,  276,  263,  456,  279,  277,  264,  283,  284,

      290,  291,  278,  265,  286,  280,  287,  447,  285,  288,
      281,  282,  293,  293,  293,  293,  295,  453,  296,  297,
      297,  297,  297,  456,  300,  294,  301,  457, 1603,  310,
      332,  302,  298,  304,  303,  333,  458,  305,  364,  365,
      334,  306, 1603,  311,  307,  459,  312,  308, 1603,  313,
      379,  380,  381,  300,  294,  301,  457,  309,  310,  332,
      302,  298,  304,  303,  333,  458,  305,  364,  365,  334,
      306,  318,  311,  307,  459,  312,  308,  314,  313, 1603,
      319,  315,  320,  460,  342,  316,  309,  321,  324,  336,
      322,  317,  323,  337,  448,  449,  325,  338,  343,  326,

      318, 1603,  327,  339,  344,  328,  314, 1603,  329,  319,
      315,  320,  460,  342,  316, 1603,  321,  324,  336,  322,
      317,  323,  337,  448,  449,  325,  338,  343,  326, 1603,
      345,  327,  339,  344,  328,  461,  350,  329,  346,  353,
      351,  462,  347,  357,  358,  348,  352,  463,  466,  354,
      384,  467,  385,  359,  355,  356,  360,  386,  361,  345,
      387,  362, 1603, 1603,  461,  350, 1603,  346,  353,  351,
      462,  347,  357,  358,  348,  352,  463,  466,  354,  384,
      467,  385,  359,  355,  356,  360,  386,  361, 1603,  387,
      362,  366,  366,  366,  366,  368,  468,  369,  370,  370,

      370,  370,  388,  394,  367,  472,  389,  424,  473,  474,
      390,  371,  475,  391,  398,  425,  392,  395,  399,  416,
      396, 1603,  400,  397,  417,  468,  393, 1603,  401,  418,
     1603,  388,  394,  367,  472,  389,  424,  473,  474,  390,
      371,  475,  391,  398,  425,  392,  395,  399,  416,  396,
      402,  400,  397,  417,  426,  393,  408,  401,  418,  403,
      444,  404,  445, 1603,  409,  446,  405,  410,  427,  406,
      411,  407,  429,  412,  428, 1603,  413,  476,  420,  402,
      430, 1603,  421,  426,  431,  408,  422,  432,  403,  444,
      404,  445,  423,  409,  446,  405,  410,  427,  406,  411,

      407,  429,  412,  428,  434,  413,  476,  420,  435,  430,
      437,  421,  477,  431,  436,  422,  432,  441,  442,  454,
      438,  423,  464,  469,  478,  439,  440,  443,  479,  470,
      465,  481,  482,  434,  480,  483,  471,  435,  484,  437,
      455,  477,  485,  436,  486,  487,  441,  442,  454,  438,
      488,  464,  469,  478,  439,  440,  443,  479,  470,  465,
      481,  482,  489,  480,  483,  471,  493,  484,  494,  455,
      490,  485,  495,  486,  487,  491,  492,  498,  496,  488,
      497,  499,  501,  502,  503,  500,  504,  505,  506,  507,
      508,  489,  509,  512,  510,  493,  511,  494,  513,  490,

      514,  495,  516,  517,  491,  492,  498,  496,  515,  497,
      499,  501,  502,  503,  500,  504,  505,  506,  507,  508,
      518,  509,  512,  510,  519,  511,  520,  513,  521,  514,
      524,  516,  517,  522,  525,  523,  526,  515,  528,  529,
      536,  539,  527,  220,  220,  220,  220, 1603,  295,  518,
     1356, 1603, 1603,  519,  540,  520,  530,  521,  541,  524,
      542, 1603,  522,  525,  523,  526, 1603,  528,  529,  536,
      539,  527,  543,  531,  531,  531,  531,  221,  222,  222,
      222,  222,  537,  540,  544,  530,  532,  541,  533,  542,
      533,  223,  534,  534,  534,  534,  545,  546,  547,  549,

      550,  543,  551,  538,  552,  555,  548,  556,  557,  558,
      553,  537,  559,  544,  560,  532,  561,  554,  562,  564,
      223,  565,  566,  567,  563,  545,  546,  547,  549,  550,
      568,  551,  538,  552,  555,  548,  556,  557,  558,  553,
      569,  559,  570,  560,  571,  561,  554,  562,  564,  572,
      565,  566,  567,  563,  576,  573,  577,  578,  581,  568,
      574,  575,  579,  582,  580,  584,  585,  583,  586,  569,
      587,  570,  588,  571,  589,  590,  591,  592,  572,  593,
      595,  594,  596,  576,  573,  577,  578,  581,  599,  574,
      575,  579,  582,  580,  584,  585,  583,  586,  600,  587,

      601,  588,  602,  589,  590,  591,  592,  597,  593,  595,
      594,  596,  603,  604,  605,  598,  606,  599,  607,  608,
      609,  611,  612,  621,  624,  625,  610,  600,  613,  601,
      613,  602,  614,  614,  614,  614,  597,  615,  615,  615,
      615,  603,  604,  605,  598,  606, 1603,  607,  608,  609,
      611,  612,  621,  624,  625,  610,  293,  293,  293,  293,
      616,  616,  616,  616,  626,  627,  622,  628,  629,  294,
      630,  631,  295,  617,  296,  618,  618,  618,  618,  619,
      634,  619,  632,  620,  620,  620,  620,  623,  298,  635,
      633,  636,  640,  626,  627,  622,  628,  629,  294,  630,

      631,  637,  617,  641,  642,  643,  644,  638,  645,  634,
      646,  632,  649,  650,  639,  651,  623,  298,  635,  633,
      636,  640,  647,  652,  653,  654,  655,  656,  648,  657,
      637,  661,  641,  642,  643,  644,  638,  645,  662,  646,
      658,  649,  650,  639,  651,  659,  660,  663,  664,  666,
      665,  647,  652,  653,  654,  655,  656,  648,  657,  667,
      661,  669,  670,  668,  671,  672,  673,  662,  674,  658,
      675,  676,  677,  680,  659,  660,  663,  664,  666,  665,
      678,  681,  679,  684,  685,  686,  687,  688,  667,  689,
      669,  670,  668,  671,  672,  673,  682,  674,  692,  675,

      676,  677,  680,  690,  683,  691,  693,  696,  697,  678,
      681,  679,  684,  685,  686,  687,  688,  694,  689,  702,
      702,  702,  702,  695, 1389,  682,  369,  692,  366,  366,
      366,  366,  690,  683,  691,  693,  696,  697,  698,  711,
      698,  367,  699,  699,  699,  699,  694,  700,  700,  700,
      700,  368,  695,  369,  703,  703,  703,  703,  714,  704,
      701,  704,  707,  705,  705,  705,  705,  371,  711,  712,
      367,  706,  706,  706,  706,  715,  708,  708,  708,  708,
      710,  451,  716,  451,  717,  718,  719,  714,  451,  701,
      713,  720,  721,  724,  722,  725,  371,  726,  712,  451,

      730, 1603,  723,  451,  715,  731,  732,  733,  734,  735,
      736,  716,  727,  717,  718,  719,  739,  740,  728,  713,
      720,  721,  724,  722,  725,  729,  726,  737,  741,  730,
      451,  723,  742,  738,  731,  732,  733,  734,  735,  736,
      743,  727,  744,  745,  746,  739,  740,  728,  747,  751,
      752,  753,  756,  748,  729,  759,  737,  741,  749,  750,
      757,  742,  738,  754,  758,  755,  760,  761,  762,  743,
      763,  744,  745,  746,  764,  765,  766,  747,  751,  752,
      753,  756,  748,  767,  759,  770,  771,  749,  750,  757,
      774,  775,  754,  758,  755,  760,  761,  762,  768,  763,

      769,  772,  776,  764,  765,  766,  777,  778,  779,  773,
      782,  780,  767,  781,  770,  771,  783,  784,  786,  774,
      775,  787,  788,  785,  789,  790,  791,  768,  792,  769,
      772,  776,  795,  793,  796,  777,  778,  779,  773,  782,
      780,  797,  781,  798,  799,  783,  784,  786,  794,  800,
      787,  788,  785,  789,  790,  791,  801,  792,  802,  803,
      804,  795,  793,  796,  805,  806,  807,  808,  809,  810,
      797,  811,  798,  799,  812,  813,  814,  794,  800,  815,
      816,  817,  818,  819,  820,  801,  824,  802,  803,  804,
      825,  826,  827,  805,  806,  807,  808,  809,  810,  828,

      811,  829,  830,  812,  813,  814,  821,  831,  815,  816,
      817,  818,  819,  820,  832,  824,  822,  833,  834,  825,
      826,  827,  835,  836,  837,  838,  823,  839,  828,  840,
      829,  830,  841,  842,  843,  844,  831,  845,  846,  847,
      848,  850,  849,  832,  851,  822,  833,  834,  852,  853,
      854,  835,  836,  837,  838,  823,  839,  857,  840, 1603,
     1603,  841,  842,  843,  844, 1603,  845,  846,  847,  848,
      850,  849,  855,  851,  862, 1603,  856,  852,  853,  854,
      863, 1603, 1603,  858, 1603,  858,  857,  859,  859,  859,
      859,  531,  531,  531,  531,  534,  534,  534,  534,  864,

      865,  855,  866,  862,  532,  856,  860,  867,  860,  863,
      861,  861,  861,  861,  534,  534,  534,  534,  869,  870,
      871,  872,  868,  873,  874,  875,  876,  877,  864,  865,
      878,  866,  879,  532,  880,  881,  867,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  869,  870,  871,
      872,  868,  873,  874,  875,  876,  877,  892,  893,  878,
      894,  879,  898,  880,  881,  899,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  900,  901,  895,  902,
      903,  904,  905,  906,  907,  908,  892,  893,  896,  894,
      909,  898,  910,  911,  899,  912,  913,  914,  897,  915,

      916,  917,  918,  919,  920,  900,  901,  921,  902,  903,
      904,  905,  906,  907,  908,  924,  922,  896,  923,  909,
      925,  910,  911,  926,  912,  913,  914,  897,  915,  916,
      917,  918,  919,  920,  927,  928,  921,  929,  931,  938,
      939,  930, 1603, 1603,  924,  922, 1603,  923, 1603,  925,
     1603,  940,  926,  932,  932,  932,  932,  614,  614,  614,
      614, 1603, 1603,  927,  928, 1603,  929,  931,  938,  939,
      930,  933,  933,  933,  933,  616,  616,  616,  616,  934,
      940,  934,  941,  935,  935,  935,  935,  295,  617,  296,
      936,  936,  936,  936,  937,  937,  937,  937,  620,  620,

      620,  620,  942,  298,  943,  945,  946,  947,  948,  949,
      950,  941,  951,  952,  953,  954,  955,  617,  956,  944,
      957,  958,  959,  960,  961,  962,  963,  964,  965,  966,
      967,  942,  298,  943,  945,  946,  947,  948,  949,  950,
      968,  951,  952,  953,  954,  955,  969,  956,  944,  957,
      958,  959,  960,  961,  962,  963,  964,  965,  966,  967,
      970,  971,  974,  975,  976,  977,  978,  979,  980,  968,
      981,  972,  982,  983,  984,  969,  985,  986,  987,  988,
      989,  973,  990,  991,  992,  993,  994,  995,  996,  970,
      997,  974,  975,  976,  977,  978,  979,  980, 1000,  981,

      972,  982,  983,  984, 1001,  985,  986,  987,  988,  989,
      973,  990,  991,  992,  993,  994,  995,  996,  998,  997,
      999, 1002, 1003, 1004, 1005, 1007, 1603, 1000, 1006, 1008,
     1008, 1008, 1008, 1001,  699,  699,  699,  699, 1011, 1011,
     1011, 1011,  700,  700,  700,  700, 1603,  998, 1603,  999,
     1002, 1003, 1004, 1005, 1007,  701, 1009, 1006, 1009, 1603,
     1010, 1010, 1010, 1010,  368, 1603,  369, 1012, 1012, 1012,
     1012, 1013, 1013, 1013, 1013,  705,  705,  705,  705,  707,
      371, 1603, 1016,  707,  701, 1014, 1014, 1014, 1014, 1017,
     1018, 1019, 1603,  706,  706,  706,  706, 1015, 1015, 1015,

     1015, 1020,  710,  451, 1023,  451, 1024, 1021, 1025,  371,
      451, 1016, 1026, 1027, 1028, 1029, 1030, 1031, 1017, 1018,
     1019,  451, 1022, 1603, 1032,  451, 1033, 1034, 1035, 1036,
     1020, 1037, 1038, 1023, 1039, 1024, 1021, 1025, 1040, 1041,
     1042, 1026, 1027, 1028, 1029, 1030, 1031, 1043, 1044, 1045,
     1046, 1022,  451, 1032, 1047, 1033, 1034, 1035, 1036, 1048,
     1037, 1038, 1049, 1039, 1052, 1053, 1054, 1040, 1041, 1042,
     1055, 1056, 1050, 1057, 1058, 1059, 1043, 1044, 1045, 1046,
     1060, 1061, 1051, 1047, 1062, 1063, 1064, 1065, 1048, 1066,
     1067, 1068, 1069, 1052, 1053, 1054, 1070, 1071, 1072, 1055,

     1056, 1050, 1057, 1058, 1059, 1073, 1074, 1075, 1078, 1060,
     1061, 1051, 1079, 1062, 1063, 1064, 1065, 1080, 1066, 1067,
     1068, 1069, 1076, 1081, 1077, 1070, 1071, 1072, 1082, 1083,
     1085, 1086, 1087, 1084, 1073, 1074, 1075, 1078, 1088, 1089,
     1090, 1079, 1091, 1092, 1093, 1094, 1080, 1095, 1096, 1097,
     1098, 1076, 1081, 1077, 1099, 1100, 1101, 1082, 1083, 1085,
     1086, 1087, 1084, 1102, 1103, 1104, 1105, 1088, 1089, 1090,
     1106, 1091, 1092, 1093, 1094, 1107, 1095, 1096, 1097, 1098,
     1108, 1109, 1110, 1099, 1100, 1101, 1112, 1114, 1115, 1116,
     1117, 1118, 1102, 1103, 1104, 1105, 1119, 1113, 1120, 1106,

     1121, 1122, 1123, 1124, 1107, 1125, 1126, 1127, 1128, 1108,
     1109, 1110, 1129, 1130, 1131, 1112, 1114, 1115, 1116, 1117,
     1118, 1132, 1133, 1134, 1135, 1119, 1113, 1120, 1603, 1121,
     1122, 1123, 1124, 1603, 1125, 1126, 1127, 1128, 1136, 1137,
     1138, 1129, 1130, 1131,  859,  859,  859,  859, 1139, 1140,
     1132, 1133, 1134, 1135,  859,  859,  859,  859,  861,  861,
      861,  861,  861,  861,  861,  861, 1141, 1136, 1137, 1138,
     1142, 1143, 1144, 1145, 1146, 1147, 1148, 1139, 1140, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1164, 1165, 1166, 1167, 1141, 1162, 1168, 1169, 1142,

     1143, 1144, 1145, 1146, 1147, 1148, 1170, 1163, 1149, 1150,
     1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
     1164, 1165, 1166, 1167, 1171, 1162, 1168, 1169, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1170, 1163, 1179, 1180, 1181,
     1182, 1183, 1184, 1185,  932,  932,  932,  932, 1186, 1186,
     1186, 1186, 1603, 1171, 1603, 1603, 1603, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1188, 1189, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1187, 1187, 1187, 1187,  935,  935,  935,
      935,  296,  936,  936,  936,  936,  937,  937,  937,  937,
     1190, 1191, 1192, 1188, 1189,  298, 1193, 1194, 1195, 1196,

     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1603, 1216, 1217, 1190,
     1191, 1192, 1218, 1219,  298, 1193, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1220, 1221,
     1222, 1218, 1219, 1223, 1224, 1225, 1215, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1008,
     1008, 1008, 1008, 1603, 1214, 1603, 1603, 1220, 1221, 1222,
     1603, 1603, 1223, 1224, 1225, 1215, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1238,

     1238, 1238, 1010, 1010, 1010, 1010, 1239, 1239, 1239, 1239,
      368, 1603, 1603, 1012, 1012, 1012, 1012, 1013, 1013, 1013,
     1013, 1241, 1241, 1241, 1241,  707,  371, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,  706,
      706,  706,  706, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1264, 1265,  371, 1242, 1243, 1244, 1245,
     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1266, 1270,
     1271, 1272, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
     1262, 1263, 1264, 1265, 1268, 1273, 1274, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1269, 1283, 1266, 1270, 1271,

     1272, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1268, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1269, 1283, 1296, 1297, 1298, 1299,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1296, 1297, 1298, 1299, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1325, 1326, 1327, 1328, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,

     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1340, 1341, 1325, 1326, 1327, 1328, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1329,
     1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
     1340, 1341, 1354, 1355, 1357, 1358, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1187, 1187,
     1187, 1187, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
     1367, 1354, 1355, 1357, 1358, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,

     1384, 1385, 1386, 1387, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1388, 1238, 1238, 1238, 1238, 1390, 1390, 1390, 1390, 1384,
     1385, 1386, 1387, 1391, 1391, 1391, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1388,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1420, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1419, 1421, 1422, 1423, 1424, 1425,

     1426, 1427, 1428, 1429, 1430, 1431, 1432, 1420, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1447, 1448, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1449, 1433, 1434, 1435,
     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1448, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1456, 1456, 1456, 1457, 1458, 1449, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1603, 1603, 1450, 1451, 1452, 1453, 1454, 1455, 1473, 1473,
     1473, 1473, 1457, 1458, 1475, 1459, 1460, 1461, 1462, 1463,

     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1390,
     1390, 1390, 1390, 1474, 1474, 1474, 1474, 1476, 1477, 1478,
     1479, 1480, 1481, 1475, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1493, 1494, 1495, 1496, 1497, 1498,
     1499, 1501, 1502, 1503, 1504, 1505, 1476, 1477, 1478, 1479,
     1480, 1481, 1506, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1501, 1502, 1503, 1504, 1505, 1456, 1456, 1456, 1456, 1507,
     1509, 1506, 1510, 1511, 1512, 1513, 1514, 1473, 1473, 1473,
     1473, 1390, 1390, 1390, 1390, 1515, 1517, 1518, 1519, 1520,

     1521, 1522, 1523, 1525, 1526, 1527, 1528, 1529, 1507, 1509,
     1531, 1510, 1511, 1512, 1513, 1514, 1532, 1533, 1524, 1534,
     1537, 1535, 1538, 1530, 1515, 1517, 1518, 1519, 1520, 1521,
     1522, 1523, 1525, 1526, 1527, 1528, 1529, 1536, 1539, 1531,
     1540, 1541, 1543, 1544, 1545, 1532, 1533, 1524, 1534, 1537,
     1535, 1538, 1530, 1546, 1547, 1548, 1549, 1542, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1536, 1539, 1558, 1540,
     1541, 1543, 1544, 1545, 1559, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1546, 1547, 1548, 1549, 1542, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1567, 1568, 1558, 1569, 1570,

     1571, 1572, 1573, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
     1566, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1584, 1585, 1586, 1567, 1568, 1587, 1569, 1570, 1571,
     1572, 1573, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1596, 1597, 1587, 1598, 1599, 1600, 1601,
     1602, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1596, 1597, 1603, 1598, 1599, 1600, 1601, 1602,
      225, 1603,  225,  225,  292, 1603,  292, 1603,  292,  299,

      299,  299,  299,  299,  299,  372, 1603,  372,  372,  372,
      372,  372,  372,  372,  374, 1603, 1603,  374,  374,  374,
     1603,  374,  374,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  709,  709,  709,  709,  709,  709,  709,  709,
      709, 1240, 1603, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
       13, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603
    } ;

static const flex_int16_t yy_chk[3735] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     1610,    7,    7,    7,    7,    7,    8, 1478,    8,    8,
        8,    8,    8,    9, 1460,    9,    9,    9,    9,    9,
       10, 1443,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1427,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1049,   28,   27,   29,   28,
      115,  971,   28,   40,  107,  895,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   40,   30,   34,   30,   27,  821,   31,   34,
       30,   31,  451,   30,   31,   30,   37,   31,   45,  146,
       31,   38,   36,   30,   37,   59,   36,  142,   34,   31,
       36,  109,   30,   34,   30,   38,   36,   31,   34,   30,
       31,   38,   30,   31,   30,   37,   31,   45,   39,   31,
       38,   36,   47,   37,   59,   36,   39,   41,   42,   36,
       39,   41,   60,   39,   38,   36,   62,   41,   42,   68,
       38,   43,   43,   42,   42,   46,   46,   39,   44,   73,

       44,   43,   87,   44,   17,   39,   41,   42,   13,   39,
       41,   60,   39,  119,  119,   62,   41,   42,   68,    0,
       43,   43,   42,   42,   46,   46,    0,   44,   73,   44,
       43,   87,   44,   50,   50,   50,   50,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   53,   55,   53,
      144,   51,  144,   65,   53,   54,   52,   53,   88,   54,
       90,   65,   55,   54,   93,   55,   54,   56,   55,   54,
       51,   56,   93,    0,   96,   56,   53,   55,   53,   54,
       51,   56,   65,   53,   54,   52,   53,   88,   54,   90,
       65,   55,   54,   93,   55,   54,   56,   55,   54,   51,

       56,   93,   57,   96,   56,  101,   66,    0,   54,   61,
       56,   57,  126,   57,   61,  127,   58,   67,   57,   61,
       66,   57,  129,   57,   58,   67,   66,   58,  134,   67,
       58,   57,   67,   58,  101,   66,   58,  375,   61,  375,
       57,  126,   57,   61,  127,   58,   67,   57,   61,   66,
       57,  129,   57,   58,   67,   66,   58,  134,   67,   58,
       64,   67,   58,   69,   64,   58,   70,   69,   64,   71,
       71,   74,   74,   69,   64,   72,   70,   72,  139,   71,
       72,   70,   70,  105,  105,  105,  105,    0,  153,   64,
        0,    0,   69,   64,  155,   70,   69,   64,   71,   71,

       74,   74,   69,   64,   72,   70,   72,  139,   71,   72,
       70,   70,   79,   79,   79,   79,   80,  153,   80,   80,
       80,   80,   80,  155,   81,   79,   81,  156,    0,   83,
       89,   81,   80,   82,   81,   89,  157,   82,  102,  102,
       89,   82,    0,   83,   82,  158,   83,   82,    0,   83,
      117,  117,  117,   81,   79,   81,  156,   82,   83,   89,
       81,   80,   82,   81,   89,  157,   82,  102,  102,   89,
       82,   85,   83,   82,  158,   83,   82,   84,   83,    0,
       85,   84,   85,  159,   94,   84,   82,   85,   86,   92,
       85,   84,   85,   92,  140,  140,   86,   92,   94,   86,

       85,    0,   86,   92,   94,   86,   84,    0,   86,   85,
       84,   85,  159,   94,   84,    0,   85,   86,   92,   85,
       84,   85,   92,  140,  140,   86,   92,   94,   86,    0,
       95,   86,   92,   94,   86,  160,   97,   86,   95,   98,
       97,  161,   95,   99,   99,   95,   97,  163,  165,   98,
      120,  166,  120,   99,   98,   98,  100,  120,  100,   95,
      120,  100,    0,    0,  160,   97,    0,   95,   98,   97,
      161,   95,   99,   99,   95,   97,  163,  165,   98,  120,
      166,  120,   99,   98,   98,  100,  120,  100,    0,  120,
      100,  103,  103,  103,  103,  104,  167,  104,  104,  104,

      104,  104,  121,  122,  103,  169,  121,  131,  170,  171,
      121,  104,  172,  121,  123,  131,  121,  122,  123,  128,
      122,    0,  123,  122,  128,  167,  121,    0,  123,  128,
        0,  121,  122,  103,  169,  121,  131,  170,  171,  121,
      104,  172,  121,  123,  131,  121,  122,  123,  128,  122,
      124,  123,  122,  128,  132,  121,  125,  123,  128,  124,
      138,  124,  138,    0,  125,  138,  124,  125,  132,  124,
      125,  124,  133,  125,  132,    0,  125,  173,  130,  124,
      133,    0,  130,  132,  133,  125,  130,  133,  124,  138,
      124,  138,  130,  125,  138,  124,  125,  132,  124,  125,

      124,  133,  125,  132,  135,  125,  173,  130,  135,  133,
      136,  130,  174,  133,  135,  130,  133,  137,  137,  154,
      136,  130,  164,  168,  175,  136,  136,  137,  176,  168,
      164,  177,  178,  135,  176,  179,  168,  135,  180,  136,
      154,  174,  181,  135,  182,  183,  137,  137,  154,  136,
      184,  164,  168,  175,  136,  136,  137,  176,  168,  164,
      177,  178,  185,  176,  179,  168,  188,  180,  189,  154,
      186,  181,  190,  182,  183,  186,  186,  192,  191,  184,
      191,  193,  194,  195,  196,  193,  197,  198,  199,  200,
      201,  185,  202,  204,  203,  188,  203,  189,  205,  186,

      206,  190,  207,  208,  186,  186,  192,  191,  206,  191,
      193,  194,  195,  196,  193,  197,  198,  199,  200,  201,
      209,  202,  204,  203,  210,  203,  211,  205,  212,  206,
      214,  207,  208,  213,  215,  213,  216,  206,  217,  218,
      226,  228,  216,  220,  220,  220,  220,    0, 1186,  209,
     1186,    0,    0,  210,  229,  211,  220,  212,  230,  214,
      231,    0,  213,  215,  213,  216,    0,  217,  218,  226,
      228,  216,  232,  221,  221,  221,  221,  222,  222,  222,
      222,  222,  227,  229,  233,  220,  221,  230,  223,  231,
      223,  222,  223,  223,  223,  223,  234,  236,  237,  238,

      239,  232,  240,  227,  241,  242,  237,  243,  244,  245,
      241,  227,  246,  233,  247,  221,  248,  241,  249,  250,
      222,  251,  252,  253,  249,  234,  236,  237,  238,  239,
      254,  240,  227,  241,  242,  237,  243,  244,  245,  241,
      255,  246,  256,  247,  257,  248,  241,  249,  250,  258,
      251,  252,  253,  249,  261,  259,  262,  263,  265,  254,
      259,  259,  264,  266,  264,  267,  268,  266,  269,  255,
      270,  256,  271,  257,  272,  273,  274,  275,  258,  276,
      277,  276,  278,  261,  259,  262,  263,  265,  280,  259,
      259,  264,  266,  264,  267,  268,  266,  269,  281,  270,

      282,  271,  283,  272,  273,  274,  275,  279,  276,  277,
      276,  278,  284,  285,  286,  279,  286,  280,  287,  288,
      289,  290,  291,  300,  302,  303,  289,  281,  294,  282,
      294,  283,  294,  294,  294,  294,  279,  295,  295,  295,
      295,  284,  285,  286,  279,  286,    0,  287,  288,  289,
      290,  291,  300,  302,  303,  289,  293,  293,  293,  293,
      296,  296,  296,  296,  304,  305,  301,  306,  307,  293,
      308,  310,  297,  296,  297,  297,  297,  297,  297,  298,
      312,  298,  311,  298,  298,  298,  298,  301,  297,  313,
      311,  314,  316,  304,  305,  301,  306,  307,  293,  308,

      310,  315,  296,  317,  318,  319,  320,  315,  321,  312,
      322,  311,  324,  325,  315,  326,  301,  297,  313,  311,
      314,  316,  323,  327,  328,  329,  330,  331,  323,  332,
      315,  335,  317,  318,  319,  320,  315,  321,  336,  322,
      333,  324,  325,  315,  326,  333,  333,  337,  338,  339,
      338,  323,  327,  328,  329,  330,  331,  323,  332,  340,
      335,  341,  342,  340,  343,  344,  345,  336,  346,  333,
      347,  348,  349,  351,  333,  333,  337,  338,  339,  338,
      350,  352,  350,  354,  355,  356,  357,  358,  340,  359,
      341,  342,  340,  343,  344,  345,  353,  346,  361,  347,

      348,  349,  351,  360,  353,  360,  362,  364,  365,  350,
      352,  350,  354,  355,  356,  357,  358,  363,  359,  369,
      369,  369,  369,  363, 1239,  353, 1239,  361,  366,  366,
      366,  366,  360,  353,  360,  362,  364,  365,  367,  384,
      367,  366,  367,  367,  367,  367,  363,  368,  368,  368,
      368,  370,  363,  370,  370,  370,  370,  370,  386,  371,
      368,  371,  373,  371,  371,  371,  371,  370,  384,  385,
      366,  372,  372,  372,  372,  387,  373,  373,  373,  373,
      377,  377,  388,  377,  389,  390,  391,  386,  377,  368,
      385,  392,  394,  396,  395,  397,  370,  398,  385,  377,

      400,    0,  395,  377,  387,  401,  402,  403,  404,  405,
      406,  388,  399,  389,  390,  391,  408,  409,  399,  385,
      392,  394,  396,  395,  397,  399,  398,  407,  410,  400,
      377,  395,  411,  407,  401,  402,  403,  404,  405,  406,
      412,  399,  413,  414,  415,  408,  409,  399,  416,  419,
      420,  421,  423,  417,  399,  425,  407,  410,  417,  417,
      424,  411,  407,  422,  424,  422,  426,  427,  428,  412,
      429,  413,  414,  415,  430,  431,  432,  416,  419,  420,
      421,  423,  417,  433,  425,  435,  436,  417,  417,  424,
      438,  439,  422,  424,  422,  426,  427,  428,  434,  429,

      434,  437,  440,  430,  431,  432,  441,  442,  443,  437,
      445,  444,  433,  444,  435,  436,  446,  447,  448,  438,
      439,  449,  458,  447,  459,  460,  461,  434,  462,  434,
      437,  440,  464,  463,  465,  441,  442,  443,  437,  445,
      444,  466,  444,  467,  468,  446,  447,  448,  463,  469,
      449,  458,  447,  459,  460,  461,  470,  462,  471,  472,
      473,  464,  463,  465,  474,  475,  477,  478,  479,  480,
      466,  481,  467,  468,  482,  483,  484,  463,  469,  485,
      486,  487,  488,  490,  491,  470,  493,  471,  472,  473,
      494,  495,  496,  474,  475,  477,  478,  479,  480,  497,

      481,  498,  499,  482,  483,  484,  492,  502,  485,  486,
      487,  488,  490,  491,  504,  493,  492,  505,  506,  494,
      495,  496,  507,  508,  509,  510,  492,  511,  497,  512,
      498,  499,  513,  514,  516,  517,  502,  519,  520,  521,
      522,  523,  522,  504,  524,  492,  505,  506,  525,  526,
      527,  507,  508,  509,  510,  492,  511,  529,  512,    0,
        0,  513,  514,  516,  517,    0,  519,  520,  521,  522,
      523,  522,  528,  524,  541,    0,  528,  525,  526,  527,
      542,    0,    0,  530,    0,  530,  529,  530,  530,  530,
      530,  531,  531,  531,  531,  533,  533,  533,  533,  543,

      544,  528,  545,  541,  531,  528,  532,  546,  532,  542,
      532,  532,  532,  532,  534,  534,  534,  534,  547,  548,
      549,  550,  546,  551,  552,  553,  554,  555,  543,  544,
      556,  545,  557,  531,  558,  560,  546,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  570,  547,  548,  549,
      550,  546,  551,  552,  553,  554,  555,  571,  573,  556,
      574,  557,  576,  558,  560,  577,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  578,  579,  575,  580,
      581,  582,  585,  587,  588,  589,  571,  573,  575,  574,
      590,  576,  591,  592,  577,  593,  594,  595,  575,  596,

      597,  599,  600,  602,  603,  578,  579,  604,  580,  581,
      582,  585,  587,  588,  589,  606,  605,  575,  605,  590,
      607,  591,  592,  608,  593,  594,  595,  575,  596,  597,
      599,  600,  602,  603,  609,  610,  604,  611,  612,  626,
      627,  611,    0,    0,  606,  605,    0,  605,    0,  607,
        0,  628,  608,  613,  613,  613,  613,  614,  614,  614,
      614,    0,    0,  609,  610,    0,  611,  612,  626,  627,
      611,  615,  615,  615,  615,  616,  616,  616,  616,  617,
      628,  617,  629,  617,  617,  617,  617,  618,  616,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  620,  620,

      620,  620,  630,  618,  631,  632,  633,  634,  635,  636,
      637,  629,  638,  639,  640,  641,  642,  616,  643,  631,
      645,  646,  647,  648,  649,  650,  651,  652,  653,  654,
      655,  630,  618,  631,  632,  633,  634,  635,  636,  637,
      656,  638,  639,  640,  641,  642,  658,  643,  631,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      659,  660,  661,  662,  663,  664,  665,  666,  667,  656,
      670,  660,  672,  673,  674,  658,  675,  676,  677,  678,
      679,  660,  680,  681,  682,  684,  685,  687,  688,  659,
      689,  661,  662,  663,  664,  665,  666,  667,  691,  670,

      660,  672,  673,  674,  692,  675,  676,  677,  678,  679,
      660,  680,  681,  682,  684,  685,  687,  688,  690,  689,
      690,  693,  694,  695,  696,  697,    0,  691,  696,  698,
      698,  698,  698,  692,  699,  699,  699,  699,  702,  702,
      702,  702,  700,  700,  700,  700,    0,  690,    0,  690,
      693,  694,  695,  696,  697,  700,  701,  696,  701,    0,
      701,  701,  701,  701,  703,    0,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  705,  705,  705,  705,  706,
      703,    0,  716,  708,  700,  707,  707,  707,  707,  717,
      718,  719,    0,  706,  706,  706,  706,  708,  708,  708,

      708,  720,  709,  709,  722,  709,  723,  721,  724,  703,
      709,  716,  725,  726,  727,  728,  729,  730,  717,  718,
      719,  709,  721,    0,  731,  709,  732,  733,  735,  736,
      720,  737,  738,  722,  739,  723,  721,  724,  740,  741,
      742,  725,  726,  727,  728,  729,  730,  743,  744,  745,
      746,  721,  709,  731,  748,  732,  733,  735,  736,  749,
      737,  738,  750,  739,  751,  752,  753,  740,  741,  742,
      754,  755,  750,  756,  757,  760,  743,  744,  745,  746,
      762,  763,  750,  748,  764,  765,  766,  767,  749,  768,
      769,  770,  771,  751,  752,  753,  772,  774,  775,  754,

      755,  750,  756,  757,  760,  777,  778,  779,  781,  762,
      763,  750,  782,  764,  765,  766,  767,  783,  768,  769,
      770,  771,  780,  784,  780,  772,  774,  775,  785,  786,
      787,  788,  789,  786,  777,  778,  779,  781,  790,  792,
      795,  782,  796,  797,  798,  800,  783,  801,  803,  804,
      805,  780,  784,  780,  807,  808,  809,  785,  786,  787,
      788,  789,  786,  810,  811,  812,  813,  790,  792,  795,
      814,  796,  797,  798,  800,  817,  801,  803,  804,  805,
      818,  819,  820,  807,  808,  809,  822,  828,  830,  831,
      832,  833,  810,  811,  812,  813,  835,  822,  836,  814,

      837,  839,  840,  841,  817,  842,  844,  846,  848,  818,
      819,  820,  849,  850,  851,  822,  828,  830,  831,  832,
      833,  852,  853,  854,  856,  835,  822,  836,    0,  837,
      839,  840,  841,    0,  842,  844,  846,  848,  862,  863,
      864,  849,  850,  851,  858,  858,  858,  858,  866,  869,
      852,  853,  854,  856,  859,  859,  859,  859,  860,  860,
      860,  860,  861,  861,  861,  861,  870,  862,  863,  864,
      871,  872,  874,  875,  877,  878,  879,  866,  869,  881,
      882,  883,  884,  885,  886,  887,  888,  891,  892,  893,
      894,  902,  904,  905,  906,  870,  896,  907,  909,  871,

      872,  874,  875,  877,  878,  879,  910,  896,  881,  882,
      883,  884,  885,  886,  887,  888,  891,  892,  893,  894,
      902,  904,  905,  906,  911,  896,  907,  909,  913,  914,
      915,  916,  918,  920,  922,  910,  896,  923,  924,  925,
      926,  927,  928,  930,  932,  932,  932,  932,  933,  933,
      933,  933,    0,  911,    0,    0,    0,  913,  914,  915,
      916,  918,  920,  922,  938,  939,  923,  924,  925,  926,
      927,  928,  930,  934,  934,  934,  934,  935,  935,  935,
      935,  936,  936,  936,  936,  936,  937,  937,  937,  937,
      940,  942,  945,  938,  939,  936,  946,  947,  948,  950,

      951,  953,  954,  955,  957,  958,  959,  960,  961,  962,
      963,  964,  967,  968,  969,  970,    0,  978,  980,  940,
      942,  945,  981,  982,  936,  946,  947,  948,  950,  951,
      953,  954,  955,  957,  958,  959,  960,  961,  962,  963,
      964,  967,  968,  969,  970,  972,  978,  980,  983,  985,
      986,  981,  982,  987,  989,  990,  972,  991,  992,  994,
      996,  998,  999, 1000, 1001, 1002, 1003, 1004, 1006, 1008,
     1008, 1008, 1008,    0,  972,    0,    0,  983,  985,  986,
        0,    0,  987,  989,  990,  972,  991,  992,  994,  996,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1009,

     1009, 1009, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011,
     1012,    0,    0, 1012, 1012, 1012, 1012, 1013, 1013, 1013,
     1013, 1014, 1014, 1014, 1014, 1015, 1012, 1016, 1017, 1018,
     1020, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1015,
     1015, 1015, 1015, 1033, 1035, 1036, 1037, 1038, 1039, 1040,
     1041, 1042, 1045, 1046, 1047, 1012, 1016, 1017, 1018, 1020,
     1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1048, 1056,
     1058, 1059, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1045, 1046, 1047, 1050, 1060, 1061, 1063, 1064, 1065,
     1067, 1068, 1069, 1070, 1072, 1050, 1074, 1048, 1056, 1058,

     1059, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1086,
     1087, 1088, 1089, 1050, 1060, 1061, 1063, 1064, 1065, 1067,
     1068, 1069, 1070, 1072, 1050, 1074, 1090, 1093, 1094, 1095,
     1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1086, 1087,
     1088, 1089, 1096, 1097, 1098, 1099, 1101, 1102, 1106, 1108,
     1110, 1112, 1113, 1116, 1118, 1090, 1093, 1094, 1095, 1121,
     1122, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1133, 1134,
     1136, 1096, 1097, 1098, 1099, 1101, 1102, 1106, 1108, 1110,
     1112, 1113, 1116, 1118, 1137, 1138, 1139, 1140, 1121, 1122,
     1124, 1125, 1126, 1127, 1129, 1130, 1131, 1133, 1134, 1136,

     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1156,
     1158, 1160, 1162, 1137, 1138, 1139, 1140, 1163, 1166, 1168,
     1171, 1172, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1156, 1158,
     1160, 1162, 1183, 1184, 1188, 1189, 1163, 1166, 1168, 1171,
     1172, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1187, 1187,
     1187, 1187, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199,
     1200, 1183, 1184, 1188, 1189, 1201, 1203, 1204, 1208, 1210,
     1212, 1214, 1215, 1218, 1220, 1223, 1224, 1226, 1227, 1228,
     1229, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200,

     1231, 1232, 1233, 1235, 1201, 1203, 1204, 1208, 1210, 1212,
     1214, 1215, 1218, 1220, 1223, 1224, 1226, 1227, 1228, 1229,
     1236, 1238, 1238, 1238, 1238, 1240, 1240, 1240, 1240, 1231,
     1232, 1233, 1235, 1241, 1241, 1241, 1241, 1242, 1243, 1244,
     1245, 1246, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1236,
     1257, 1258, 1262, 1264, 1266, 1268, 1269, 1272, 1274, 1277,
     1278, 1280, 1281, 1282, 1283, 1285, 1242, 1243, 1244, 1245,
     1246, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1286, 1257,
     1258, 1262, 1264, 1266, 1268, 1269, 1272, 1274, 1277, 1278,
     1280, 1281, 1282, 1283, 1285, 1287, 1289, 1290, 1292, 1293,

     1295, 1297, 1298, 1300, 1302, 1306, 1309, 1286, 1310, 1311,
     1314, 1315, 1318, 1320, 1323, 1324, 1325, 1327, 1329, 1330,
     1332, 1334, 1338, 1341, 1287, 1289, 1290, 1292, 1293, 1295,
     1297, 1298, 1300, 1302, 1306, 1309, 1342, 1310, 1311, 1314,
     1315, 1318, 1320, 1323, 1324, 1325, 1327, 1329, 1330, 1332,
     1334, 1338, 1341, 1343, 1346, 1347, 1350, 1352, 1355, 1356,
     1356, 1356, 1356, 1357, 1358, 1342, 1360, 1362, 1363, 1365,
     1367, 1371, 1374, 1375, 1376, 1379, 1380, 1383, 1385, 1388,
        0,    0, 1343, 1346, 1347, 1350, 1352, 1355, 1389, 1389,
     1389, 1389, 1357, 1358, 1392, 1360, 1362, 1363, 1365, 1367,

     1371, 1374, 1375, 1376, 1379, 1380, 1383, 1385, 1388, 1390,
     1390, 1390, 1390, 1391, 1391, 1391, 1391, 1393, 1395, 1397,
     1398, 1400, 1402, 1392, 1406, 1409, 1410, 1411, 1414, 1415,
     1418, 1420, 1423, 1424, 1429, 1430, 1433, 1435, 1436, 1437,
     1440, 1445, 1446, 1449, 1451, 1452, 1393, 1395, 1397, 1398,
     1400, 1402, 1453, 1406, 1409, 1410, 1411, 1414, 1415, 1418,
     1420, 1423, 1424, 1429, 1430, 1433, 1435, 1436, 1437, 1440,
     1445, 1446, 1449, 1451, 1452, 1456, 1456, 1456, 1456, 1457,
     1462, 1453, 1463, 1466, 1468, 1469, 1470, 1473, 1473, 1473,
     1473, 1474, 1474, 1474, 1474, 1475, 1480, 1481, 1484, 1486,

     1487, 1488, 1492, 1494, 1495, 1496, 1498, 1500, 1457, 1462,
     1502, 1463, 1466, 1468, 1469, 1470, 1503, 1504, 1492, 1506,
     1510, 1508, 1511, 1500, 1475, 1480, 1481, 1484, 1486, 1487,
     1488, 1492, 1494, 1495, 1496, 1498, 1500, 1508, 1512, 1502,
     1514, 1516, 1518, 1519, 1520, 1503, 1504, 1492, 1506, 1510,
     1508, 1511, 1500, 1522, 1523, 1524, 1525, 1516, 1529, 1530,
     1531, 1535, 1536, 1537, 1541, 1542, 1508, 1512, 1543, 1514,
     1516, 1518, 1519, 1520, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1522, 1523, 1524, 1525, 1516, 1529, 1530, 1531,
     1535, 1536, 1537, 1541, 1542, 1555, 1556, 1543, 1557, 1558,

     1559, 1560, 1561, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
     1554, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
     1572, 1575, 1578, 1581, 1555, 1556, 1583, 1557, 1558, 1559,
     1560, 1561, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1572,
     1575, 1578, 1581, 1592, 1593, 1583, 1594, 1595, 1596, 1597,
     1598, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1592, 1593,    0, 1594, 1595, 1596, 1597, 1598,
     1604,    0, 1604, 1604, 1605,    0, 1605,    0, 1605, 1606,

     1606, 1606, 1606, 1606, 1606, 1607,    0, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1608,    0,    0, 1608, 1608, 1608,
        0, 1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1612,    0, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1604 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1603 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 115:
case 116:
case 117:
case 118:
case 119:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 124:
case 125:
case 126:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 127:
case 128:
case 129:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 130:
case 131:
case 132:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 133:
case 134:
case 135:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 148:
YY_RULE_SETUP
{}
	YY_BREAK
case 149:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 150:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1604 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1604 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1603);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

