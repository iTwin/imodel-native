#line 2 "D:\\bsw\\git-native4\\src\\imodel-native\\iModelCore\\ECDb\\Scripts\\\\..\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1568] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      141,  141,  147,  145,  143,  142,  145,  106,  103,  134,
      106,   93,   95,   94,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  102,  101,  132,  106,  108,
      108,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  135,  133,  136,  106,  106,  116,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  106,  116,  145,  141,  141,  141,  141,  139,  106,
      103,  106,  106,  106,   93,   95,   94,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  140,  102,
      101,  143,   99,    0,  104,   96,   98,   97,  105,    0,
        0,    4,    0,    0,    0,    0,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   43,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   63,   65,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,  110,  111,  108,    0,    0,  107,
      107,  107,    4,  107,  107,  107,  107,  107,  107,   12,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   43,   50,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   63,   65,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  131,  121,  131,  131,  131,  116,
      131,  115,  115,  115,    4,  115,  115,  115,  115,  115,

      115,   12,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   43,   50,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,   63,   65,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  127,  131,  131,  131,
      116,  131,    0,  137,  141,  141,   99,  141,  104,   96,
       98,   97,  105,  141,  141,    4,  141,  141,  141,  141,
      141,  141,   12,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,   43,   50,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,   63,   65,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  100,    0,  144,
        1,    2,    3,    5,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
       36,    0,    0,    0,    0,   42,    0,    0,   46,    0,
        0,    0,    0,    0,    0,   57,   58,    0,   60,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       74,    0,    0,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  111,    0,    0,  112,
      109,    1,    2,    3,    5,    6,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   29,  107,  107,  107,  107,  107,
      107,   36,  107,  107,  107,  107,   42,  107,  107,   46,
      107,  107,  107,  107,  107,  107,   57,   58,  107,   60,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   74,  107,  107,   77,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,    0,  124,  131,  119,

      131,  116,    0,  122,    1,    2,    3,    5,    6,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,   29,  115,  115,
      115,  115,  115,  115,   36,  115,  115,  115,  115,   42,
      115,  115,   46,  115,  115,  115,  115,  115,  115,   57,
       58,  115,   60,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   74,  115,  115,   77,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
      130,  125,  131,  131,  116,    0,  128,  137,    0,  137,
      141,  141,    1,    2,    3,    5,    6,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,   29,  141,  141,  141,  141,
      141,  141,   36,  141,  141,  141,  141,   42,  141,  141,
       46,  141,  141,  141,  141,  141,  141,   57,   58,  141,
       60,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,   74,  141,  141,   77,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,    0,    0,    0,
       10,    0,   13,   14,    0,    0,    0,    0,   21,    0,
        0,   24,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,   38,   39,    0,    0,    0,    0,    0,

        0,   49,   51,   52,   53,    0,   55,    0,    0,   61,
        0,   64,    0,    0,    0,   69,    0,    0,    0,    0,
       75,    0,   78,   79,   81,    0,    0,    0,    0,    0,
        0,    0,   90,    0,   92,    0,  114,    0,  113,  107,
      107,  107,   10,  107,   13,   14,  107,  107,  107,  107,
       21,  107,  107,   24,  107,  107,  107,   28,  107,  107,
      107,  107,  107,  107,  107,   38,   39,  107,  107,  107,
      107,  107,  107,   49,   51,   52,   53,  107,   55,  107,
      107,   61,  107,   64,  107,  107,  107,   69,  107,  107,
      107,  107,   75,  107,   78,   79,   81,  107,  107,  107,

      107,  107,  107,  107,   90,  107,   92,  124,  131,    0,
      123,  116,  122,  115,  115,  115,   10,  115,   13,   14,
      115,  115,  115,  115,   21,  115,  115,   24,  115,  115,
      115,   28,  115,  115,  115,  115,  115,  115,  115,   38,
       39,  115,  115,  115,  115,  115,  115,   49,   51,   52,
       53,  115,   55,  115,  115,   61,  115,   64,  115,  115,
      115,   69,  115,  115,  115,  115,   75,  115,   78,   79,
       81,  115,  115,  115,  115,  115,  115,  115,   90,  115,
       92,  130,    0,  129,  131,  116,  128,    0,  137,  141,
      141,  141,   10,  141,   13,   14,  141,  141,  141,  141,

       21,  141,  141,   24,  141,  141,  141,   28,  141,  141,
      141,  141,  141,  141,  141,   38,   39,  141,  141,  141,
      141,  141,  141,   49,   51,   52,   53,  141,   55,  141,
      141,   61,  141,   64,  141,  141,  141,   69,  141,  141,
      141,  141,   75,  141,   78,   79,   81,  141,  141,  141,
      141,  141,  141,  141,   90,  141,   92,    0,    0,    0,
        0,    0,   16,   17,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,   34,   35,    0,   40,    0,   44,
        0,   47,    0,    0,   54,   56,    0,    0,   66,   67,
        0,    0,   71,    0,    0,    0,    0,   82,    0,    0,

        0,   86,   87,    0,   91,  107,  107,  107,  107,  107,
       16,   17,  107,  107,  107,  107,  107,  107,  107,   31,
      107,  107,   34,   35,  107,   40,  107,   44,  107,   47,
      107,  107,   54,   56,  107,  107,   66,   67,  107,  107,
       71,  107,  107,  107,  107,   82,  107,  107,  107,   86,
       87,  107,   91,  117,  123,  115,  115,  115,  115,  115,
       16,   17,  115,  115,  115,  115,  115,  115,  115,   31,
      115,  115,   34,   35,  115,   40,  115,   44,  115,   47,
      115,  115,   54,   56,  115,  115,   66,   67,  115,  115,
       71,  115,  115,  115,  115,   82,  115,  115,  115,   86,

       87,  115,   91,  129,  118,    0,  138,  141,  141,  141,
      141,  141,   16,   17,  141,  141,  141,  141,  141,  141,
      141,   31,  141,  141,   34,   35,  141,   40,  141,   44,
      141,   47,  141,  141,   54,   56,  141,  141,   66,   67,
      141,  141,   71,  141,  141,  141,  141,   82,  141,  141,
      141,   86,   87,  141,   91,    0,    0,    9,    0,   15,
        0,    0,   23,    0,   26,    0,   30,   32,   33,    0,
       41,   45,    0,    0,    0,   62,   68,    0,    0,   73,
       76,    0,   83,    0,   85,   88,    0,  107,  107,    9,
      107,   15,  107,  107,   23,  107,   26,  107,   30,   32,

       33,  107,   41,   45,  107,  107,  107,   62,   68,  107,
      107,   73,   76,  107,   83,  107,   85,   88,  107,  131,
      115,  115,    9,  115,   15,  115,  115,   23,  115,   26,
      115,   30,   32,   33,  115,   41,   45,  115,  115,  115,
       62,   68,  115,  115,   73,   76,  115,   83,  115,   85,
       88,  115,  131,  138,  138,  141,  141,    9,  141,   15,
      141,  141,   23,  141,   26,  141,   30,   32,   33,  141,
       41,   45,  141,  141,  141,   62,   68,  141,  141,   73,
       76,  141,   83,  141,   85,   88,  141,    0,    8,   11,
        0,   22,    0,    0,   37,   46,    0,   59,    0,    0,

        0,   84,   89,  107,    8,   11,  107,   22,  107,  107,
       37,   46,  107,   59,  107,  107,  107,   84,   89,  120,
      115,    8,   11,  115,   22,  115,  115,   37,   46,  115,
       59,  115,  115,  115,   84,   89,  126,  138,  141,    8,
       11,  141,   22,  141,  141,   37,   46,  141,   59,  141,
      141,  141,   84,   89,    7,    0,   25,    0,    0,    0,
       72,    0,    7,  107,   25,  107,  107,  107,   72,  107,
        7,  115,   25,  115,  115,  115,   72,  115,    7,  141,
       25,  141,  141,  141,   72,  141,    0,    0,    0,   48,
       70,   80,  107,  107,  107,   48,   70,   80,  115,  115,

      115,   48,   70,   80,  141,  141,  141,   48,   70,   80,
        0,    0,    0,  107,  107,  107,  115,  115,  115,  141,
      141,  141,    0,    0,    0,  107,  107,  107,  115,  115,
      115,  141,  141,  141,   18,   19,   27,   18,   19,   27,
       18,   19,   27,   18,   19,   27,    0,  107,  115,  141,
        0,  107,  115,  141,    0,  107,  115,  141,    0,  107,
      115,  141,   20,   20,   20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   11,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   51,   11,   80,   11,   81,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static const YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    3,    8,    1,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        1,    9
    } ;

static const flex_int16_t yy_base[1577] =
    {   0,
        0,    0,   82,    0,  164,    0,  233,  240,  247,  254,
      274,    0,  604, 3596,  355, 3596,  573, 3596, 3596, 3596,
      548,  338, 3596,  340,  328,  340,  342,  353,  387,  392,
      326,  345,  386,  333,  393,  350,  402,  435,  335,  439,
      440,  449,  449,  355,  442,  426, 3596, 3596,  506,  511,
      516,  500,  519,  512,  531,  564,  569,  349,  413,  563,
      403,    0,  580,  517,  579,  614,  441,  593,  621,  625,
      631,  461,  584, 3596, 3596, 3596,    0,  688,  695,  680,
      700,  696,  744,  736,  751,  446,  465,  689,  508,    0,
      742,  528,  741,  788,  507,  788,  795,  630,  798,  538,

      698,  855,  862,  659,    0,  387,    0,  478, 3596,    0,
        0,    0,  485, 3596,  661,    0,  417,  847,  867,  863,
      911,  903,  918,  556,  639,  856,  629,  909,  766,  908,
      955,  628,  955,  962,  963,  972,  655,  799, 3596,  417,
        0,  492, 3596,  448, 3596, 3596, 3596, 3596, 3596,  654,
      786,  688,  697,  767,  785,  799,  818,  843, 3596,  852,
      953,  858,  856,  908,  973,  915,  954,  959,  961,  980,
      984,  989, 1015,  985, 1004, 1004, 1010, 1015, 1013, 1007,
     1024, 1017, 3596, 1023, 1027, 1027, 1020, 1015, 1027, 1022,
     1023, 1032, 1039, 1034, 1045, 1030, 1051, 1079, 1048, 1064,

     1065, 1070, 1068, 1074, 1083, 1076, 1069, 1082, 1088, 1085,
     1083, 1091, 1077, 3596, 1139, 1143, 1148, 1157,    0,    0,
     1086, 1142, 1096, 1093, 1151, 1135, 1142, 1142, 1143,    0,
     1140, 1147, 1146, 1144, 1143, 1159, 1145, 1145, 1150, 1151,
     1168, 1171, 1171, 1199, 1168, 1166, 1186, 1191, 1199, 1197,
     1191, 1208, 1201,    0, 1207, 1211, 1211, 1204, 1199, 1211,
     1206, 1207, 1216, 1223, 1218, 1228, 1214, 1235, 1259, 1231,
     1227, 1252, 1253, 1251, 1257, 1266, 1260, 1253, 1266, 1272,
     1269, 1267, 1275, 1261,    0, 1323, 1331, 1337, 1341, 1348,
     1357,    0, 1270, 1323, 1280, 1277, 1335, 1324, 1340, 1340,

     1343,    0, 1340, 1347, 1346, 1344, 1343, 1359, 1345, 1345,
     1350, 1351, 1368, 1371, 1371, 1376, 1368, 1366, 1368, 1381,
     1390, 1389, 1384, 1405, 1398,    0, 1404, 1410, 1408, 1406,
     1402, 1409, 1404, 1407, 1416, 1423, 1418, 1428, 1414, 1435,
     1436, 1431, 1431, 1442, 1431, 1442, 1451, 1464, 1457, 1450,
     1465, 1471, 1468, 1466, 1474, 1460, 1522, 1502, 1526, 1493,
     1541, 1549, 1530, 1559,    0,  538,    0, 1580,    0,    0,
        0,    0,    0, 1469, 1524, 1479, 1519, 1537, 1525, 1534,
     1535, 1547,    0, 1544, 1551, 1551, 1549, 1548, 1575, 1551,
     1550, 1554, 1563, 1579, 1581, 1580, 1595, 1574, 1573, 1571,

     1575, 1591, 1590, 1584, 1602, 1606,    0, 1600, 1615, 1611,
     1614, 1616, 1615, 1610, 1611, 1627, 1635, 1630, 1639, 1624,
     1644, 1645, 1640, 1640, 1644, 1648, 1644, 1650, 1661, 1654,
     1657, 1671, 1675, 1674, 1676, 1679, 1666,    0,  447, 3596,
     3596, 3596, 3596, 3596, 3596, 1676, 1666, 1696, 1696, 1687,
     1699, 1687, 1687, 1683, 1685, 1700, 1705, 1705, 1711, 1700,
     1719, 1705, 1719, 3596, 1724, 1718, 1732, 1719, 1721, 1740,
     1719, 1731, 1733, 1725, 1738, 3596, 1747, 1750, 1763, 1742,
     1737, 1754, 1751, 1754, 1759, 3596, 3596, 1742, 3596, 1752,
     1753, 1752, 1774, 1775, 1775, 1771, 1766, 1786, 1783, 1791,

     3596, 1793, 1790, 3596, 1786, 1797, 1798, 1798, 1790, 1804,
     1796, 1793, 1814, 1804, 1811, 1862, 1866, 1874, 1843, 1880,
        0,    0,    0,    0,    0,    0, 1809, 1818, 1852, 1861,
     1853, 1871, 1864, 1864, 1860, 1862, 1876, 1882, 1879, 1882,
     1866, 1885, 1871, 1884,    0, 1889, 1875, 1890, 1877, 1878,
     1897, 1876, 1888, 1890, 1882, 1895,    0, 1906, 1916, 1934,
     1909, 1914, 1930, 1927, 1930, 1935,    0,    0, 1920,    0,
     1930, 1924, 1919, 1940, 1941, 1940, 1936, 1930, 1945, 1942,
     1950,    0, 1951, 1948,    0, 1944, 1954, 1955, 1964, 1947,
     1961, 1955, 1971, 1990, 1981, 1986, 2008, 2012, 2019, 2024,

     2042, 2049, 2053, 2057,    0,    0,    0,    0,    0, 1985,
     1974, 2026, 2029, 2021, 2048, 2042, 2043, 2040, 2043, 2058,
     2063, 2060, 2063, 2047, 2067, 2053, 2066,    0, 2071, 2055,
     2069, 2056, 2057, 2076, 2055, 2066, 2068, 2060, 2076,    0,
     2082, 2084, 2116, 2077, 2092, 2108, 2106, 2110, 2116,    0,
        0, 2101,    0, 2111, 2105, 2100, 2121, 2122, 2121, 2117,
     2109, 2124, 2121, 2129,    0, 2130, 2127,    0, 2123, 2133,
     2134, 2128, 2126, 2146, 2135, 2149, 2168, 2159, 2167, 2187,
     2191, 2196, 2215, 2200, 2222, 2226, 2230, 2247, 2239, 2256,
     2274,    0,    0,    0,    0,    0,    0, 2217, 2206, 2235,

     2235, 2226, 2241, 2230, 2230, 2228, 2236, 2255, 2261, 2258,
     2261, 2248, 2267, 2254, 2272,    0, 2277, 2261, 2275, 2262,
     2263, 2283, 2262, 2273, 2275, 2267, 2285,    0, 2290, 2291,
     2307, 2285, 2283, 2299, 2296, 2311, 2316,    0,    0, 2299,
        0, 2309, 2307, 2302, 2324, 2325, 2324, 2323, 2315, 2329,
     2326, 2334,    0, 2335, 2333,    0, 2329, 2339, 2340, 2337,
     2332, 2352, 2343, 2340, 2359, 2362, 2355, 2347, 2372, 2360,
     3596, 2374, 3596, 3596, 2375, 2365, 2368, 2383, 3596, 2368,
     2373, 3596, 2385, 2383, 2384, 3596, 2381, 2373, 2384, 2381,
     2397, 2383, 2403, 3596, 3596, 2394, 2397, 2394, 2397,  427,

     2427, 3596, 3596, 3596, 3596, 2399, 3596, 2412, 2403, 3596,
     2423, 3596, 2417, 2418, 2424, 3596, 2420, 2422, 2441, 2443,
     3596, 2433, 3596, 2432, 3596, 2438, 2432, 2439, 2435, 2449,
     2453, 2451, 3596, 2455, 3596, 2498, 2502, 2506, 2510, 2454,
     2473, 2461,    0, 2481,    0,    0, 2500, 2490, 2492, 2507,
        0, 2492, 2494,    0, 2507, 2505, 2506,    0, 2503, 2495,
     2505, 2502, 2518, 2504, 2524,    0,    0, 2510, 2513, 2510,
     2511,  426, 2526,    0,    0,    0,    0, 2510,    0, 2523,
     2514,    0, 2529,    0, 2517, 2518, 2524,    0, 2549, 2548,
     2567, 2567,    0, 2557,    0, 2553,    0, 2560, 2554, 2561,

     2557, 2571, 2574, 2572,    0, 2576,    0, 2590, 2594, 2598,
     2619, 2624, 2628, 2572, 2597, 2607,    0, 2621,    0,    0,
     2618, 2608, 2611, 2627,    0, 2612, 2614,    0, 2626, 2624,
     2625,    0, 2622, 2614, 2624, 2621, 2637, 2623, 2643,    0,
        0, 2629, 2632, 2629, 2630,  418, 2642,    0,    0,    0,
        0, 2630,    0, 2643, 2634,    0, 2648,    0, 2665, 2666,
     2672,    0, 2668, 2667, 2686, 2687,    0, 2677,    0, 2673,
        0, 2679, 2673, 2680, 2676, 2690, 2693, 2691,    0, 2695,
        0, 2709, 2713, 2738, 2742, 2749, 2753, 2757, 2774, 2687,
     2706, 2737,    0, 2751,    0,    0, 2748, 2738, 2740, 2755,

        0, 2740, 2742,    0, 2754, 2752, 2753,    0, 2754, 2746,
     2756, 2753, 2769, 2755, 2775,    0,    0, 2761, 2764, 2761,
     2762,  367, 2803,    0,    0,    0,    0, 2762,    0, 2787,
     2778,    0, 2792,    0, 2780, 2794, 2800,    0, 2796, 2795,
     2814, 2814,    0, 2804,    0, 2800,    0, 2806, 2801, 2808,
     2808, 2822, 2825, 2823,    0, 2827,    0, 2832, 2829, 2810,
     2835, 2817, 3596, 3596, 2824, 2828, 2848, 2840, 2850, 2841,
     2863, 3596, 2850, 2852, 3596, 3596, 2854, 3596, 2866, 3596,
     2854, 3596, 2870, 2857, 3596, 3596, 2876, 2858, 3596, 3596,
     2878, 2861, 3596, 2880, 2866, 2880, 2868, 3596, 2884, 2867,

     2886, 3596, 2873, 2892, 3596, 2893, 2890, 2871, 2897, 2891,
        0,    0, 2898, 2901, 2909, 2912, 2923, 2914, 2925,    0,
     2911, 2913,    0,    0, 2915,    0, 2927,    0, 2915,    0,
     2931, 2918,    0,    0, 2937, 2919,    0,    0, 2943, 2926,
        0, 2945, 2927, 2941, 2929,    0, 2945, 2928, 2947,    0,
     2934, 2953,    0,  727, 2977, 2955, 2979, 2961, 2986, 2968,
        0,    0, 2975, 2978, 2986, 2978, 2988, 2979, 2990,    0,
     2976, 2978,    0,    0, 2980,    0, 2992,    0, 2980,    0,
     2996, 2983,    0,    0, 3002, 2984,    0,    0, 3004, 2987,
        0, 3006, 2988, 3002, 2990,    0, 3006, 2989, 3009,    0,

     3023, 3043,    0, 3053,  829, 3057, 3061, 3056, 3053, 3034,
     3059, 3041,    0,    0, 3048, 3051, 3059, 3051, 3061, 3052,
     3063,    0, 3049, 3051,    0,    0, 3054,    0, 3067,    0,
     3055,    0, 3071, 3058,    0,    0, 3077, 3059,    0,    0,
     3079, 3062,    0, 3081, 3063, 3077, 3065,    0, 3095, 3079,
     3110,    0, 3097, 3116,    0, 3100, 3105, 3596, 3106, 3596,
     3101, 3102, 3596, 3120, 3596, 3108, 3596, 3596, 3596, 3121,
     3596, 3596, 3108, 3122, 3116, 3596, 3596, 3121, 3129, 3596,
     3596, 3132, 3596, 3120, 3596, 3596, 3117, 3118, 3123,    0,
     3124,    0, 3119, 3120,    0, 3138,    0, 3126,    0,    0,

        0, 3139,    0,    0, 3140, 3155, 3161,    0,    0, 3165,
     3172,    0,    0, 3175,    0, 3163,    0,    0, 3160, 3187,
     3165, 3170,    0, 3171,    0, 3166, 3168,    0, 3187,    0,
     3175,    0,    0,    0, 3188,    0,    0, 3175, 3189, 3183,
        0,    0, 3187, 3194,    0,    0, 3197,    0, 3185,    0,
        0, 3182, 3216, 3238, 3242, 3198, 3204,    0, 3224,    0,
     3219, 3220,    0, 3238,    0, 3226,    0,    0,    0, 3239,
        0,    0, 3226, 3241, 3236,    0,    0, 3240, 3247,    0,
        0, 3250,    0, 3238,    0,    0, 3235, 3250, 3596, 3596,
      305, 3596, 3235, 3236, 3596, 3596, 3254, 3596, 3236, 3248,

     3247, 3596, 3596, 3257,    0,    0,  216,    0, 3242, 3243,
        0,    0, 3261,    0, 3243, 3255, 3261,    0,    0, 3304,
     3272,    0,    0,  209,    0, 3280, 3281,    0,    0, 3299,
        0, 3282, 3295, 3294,    0,    0, 3316, 3320, 3312,    0,
        0,  202,    0, 3297, 3298,    0,    0, 3316,    0, 3298,
     3310, 3309,    0,    0, 3596, 3319, 3596, 3315, 3305, 3321,
     3596, 3311,    0, 3324,    0, 3323, 3314, 3332,    0, 3322,
        0, 3338,    0, 3331, 3321, 3338,    0, 3343,    0, 3356,
        0, 3353, 3344, 3360,    0, 3358, 3374, 3368, 3363, 3596,
     3596, 3596, 3378, 3371, 3366,    0,    0,    0, 3381, 3374,

     3369,    0,    0,    0, 3384, 3377, 3375,    0,    0,    0,
     3372, 3382, 3382, 3377, 3385, 3385, 3380, 3388, 3388, 3396,
     3404, 3404, 3415, 3417, 3404, 3427, 3428, 3415, 3430, 3431,
     3418, 3433, 3434, 3421, 3596, 3422, 3596,    0, 3423,    0,
        0, 3424,    0,    0, 3425,    0, 3428, 3430, 3433, 3434,
     3454, 3455, 3456, 3457, 3446, 3447, 3461, 3462, 3460, 3462,
     3464, 3465, 3596,    0,    0,    0, 3596, 3530, 3536, 3541,
     3550, 3559, 3568,  242, 3577, 3586
    } ;

static const flex_int16_t yy_def[1577] =
    {   0,
     1567,    1, 1567,    3, 1567,    5,    5,    5,    5,    5,
     1567,   11, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1567, 1567, 1567, 1569, 1569, 1569, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,

     1570, 1569, 1569, 1571, 1572, 1572, 1572, 1572, 1567, 1572,
     1572, 1572, 1572, 1567, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1567, 1572,
     1572, 1567, 1567, 1573, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1574, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,

     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1569, 1569, 1569, 1569,
     1569, 1569, 1571, 1571, 1572, 1572, 1572, 1575, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1574, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1567, 1569, 1569, 1569,

     1569, 1569, 1567, 1569, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1567,
     1569, 1569, 1569, 1569, 1569, 1567, 1569, 1571, 1567, 1571,
     1575, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,

     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1567, 1569, 1567,
     1569, 1569, 1567, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1567, 1567, 1569, 1569, 1569, 1567, 1576, 1571, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1569, 1567, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,

     1570, 1570, 1570, 1567, 1569, 1576, 1576, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,

     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1569, 1576, 1576, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1569, 1576, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1567, 1567, 1567, 1567,
     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1570, 1570,

     1570, 1570, 1570, 1570, 1572, 1572, 1572, 1572, 1572, 1572,
     1567, 1567, 1567, 1568, 1568, 1568, 1570, 1570, 1570, 1572,
     1572, 1572, 1567, 1567, 1567, 1568, 1568, 1568, 1570, 1570,
     1570, 1572, 1572, 1572, 1567, 1567, 1567, 1568, 1568, 1568,
     1570, 1570, 1570, 1572, 1572, 1572, 1567, 1568, 1570, 1572,
     1567, 1568, 1570, 1572, 1567, 1568, 1570, 1572, 1567, 1568,
     1570, 1572, 1567, 1568, 1570, 1572,    0, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567
    } ;

static const flex_int16_t yy_nxt[3679] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       18,   18,   18,   18,   21,   18,   14,   14,   14,   14,
       18,   22,   23,   24,   18,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   14,   35,   36,   37,   38,
       39,   14,   40,   41,   42,   43,   44,   45,   14,   14,
       14,   14,   14,   14,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   14,   35,   36,   37,   38,   39,
       14,   40,   41,   42,   43,   44,   45,   14,   14,   46,
       47,   14,   14,   15,   16,   15,   17,   48,   14,   18,
       19,   20,   18,   18,   18,   18,   21,   49,   50,   51,

       51,   51,   18,   22,   23,   24,   18,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   62,   68,   69,   70,   71,   72,   73,
       62,   62,   62,   74,   62,   75,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   62,   68,   69,   70,   71,   72,   73,   62,
       62,   46,   47,   62,   14,   15,   16,   15,   17,   14,
       76,   18,   19,   20,   18,   18,   18,   77,   21,   78,
       79,   79,   79,   79,   18,   22,   23,   24,   18,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,

       91,   92,   93,   94,   95,   90,   96,   97,   98,   99,
      100,  101,   90,   90,   90,   74,   14,   14,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   90,   96,   97,   98,   99,  100,
      101,   90,   90,   46,   47,   90,  102,  521,   77,  103,
      103,  103,  103,  102, 1480,   77,  103,  103,  103,  103,
       18, 1472,   18,  104,  104,  104,  104,   18, 1464,   18,
      104,  104,  104,  104,  105,  106,  107,   15,  108,  109,
      105,  110,  111,   20,  112,  112,  112,  112,  113,  112,
      105,  105,  105,  105,  114,  115,  116,  117,  114,  118,

      119,  120,  121,  122,  123,  124,  125,  126,  127,  105,
      128,  129,  130,  131,  132,  105,  133,  134,  135,  136,
      137,  138,  105,  105,  105,  139,  105,  105,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  105,  128,
      129,  130,  131,  132,  105,  133,  134,  135,  136,  137,
      138,  105,  105,  140,  141,  105,  142, 1456,  142,  145,
      146,  147,  148,  149,  150,  154,  151,  160,  179,  155,
      180,  152,  184,  156,  153,  188,  157,  197,  164,  158,
      211,  161,  165,  189,  162, 1232,  166,  163,  366,  159,
      142,  250,  167,  150,  154,  151,  160,  179,  155,  180,

      152,  184,  156,  153,  188,  157,  197,  164,  158,  211,
      161,  165,  189,  162,  168,  166,  163,  174,  159,  181,
      250,  167,  185,  169,  182,  170,  186,  190,  175,  183,
      171,  176,  187,  172,  177,  173, 1180,  178,  251,  372,
      373,  191,  255,  168, 1130, 1082,  174,  192,  181,  440,
      440,  185,  169,  182,  170,  186,  190,  175,  183,  171,
      176,  187,  172,  177,  173,  193,  178,  251,  198,  201,
      191,  255,  199,  194,  212,  213,  192,  195,  200,  202,
      196,  205,  206,  268,  203,  204,  282,  208,  322,  209,
      323,  207,  210,  142,  193,  142,  438,  198,  201,  368,

      367,  199,  194,  212,  213,  214,  195,  200,  202,  196,
      205,  206,  268,  203,  204,  282,  208,  322,  209,  323,
      207,  210,  215,  215,  215,  215,  216,  217,  217,  217,
      217,  216,  217,  217,  217,  217,  221,  231,  222,  366,
      218,  142,  259,  223,  225,  218,  224,  327,  226,  340,
      260,  232,  227,  331,  233,  228,  235,  234,  229,  219,
      236,  332,  144,  354,  237,  221,  231,  222,  230,  218,
      238,  259,  223,  225,  218,  224,  327,  226,  340,  260,
      232,  227,  331,  233,  228,  235,  234,  229,  219,  236,
      332,  239,  354,  237,  245,  143,  252,  230,  403,  238,

      240,  253,  241, 1567,  261,  246,  254,  242,  247,  256,
      243,  248,  244,  257,  249, 1567,  283,  284,  262,  258,
      239, 1567,  269,  245,  263,  252,  270,  403, 1567,  240,
      253,  241,  271,  261,  246,  254,  242,  247,  256,  243,
      248,  244,  257,  249,  264,  283,  284,  262,  258, 1567,
      272,  269,  265,  263, 1567,  270,  266,  276,  277,  267,
      273,  271,  348,  349,  404,  274,  275,  278,  408,  279,
      421,  280,  350,  264,  281,  364,  364,  364,  364,  272,
      435,  265,  369,  370,  371,  266,  276,  277,  267,  273,
      441,  348,  349,  404,  274,  275,  278,  408,  279,  421,

      280,  350, 1567,  281,  286,  286,  286,  286,  288,  435,
      289,  290,  290,  290,  290,  444,  293,  287,  294,  441,
     1567,  303,  324,  295,  291,  297,  296,  325,  445,  298,
      355,  356,  326,  299, 1567,  304,  300, 1567,  305,  301,
      288,  306, 1320, 1567,  444,  293,  287,  294, 1567,  302,
      303,  324,  295,  291,  297,  296,  325,  445,  298,  355,
      356,  326,  299,  311,  304,  300,  333,  305,  301,  307,
      306,  328,  312,  308,  313,  329,  317,  309,  302,  314,
      334,  330,  315,  310,  316, 1567,  335,  318, 1567, 1567,
      319,  412,  311,  320,  446,  333,  321, 1567,  307,  413,

      328,  312,  308,  313,  329,  317,  309, 1567,  314,  334,
      330,  315,  310,  316,  442,  335,  318,  341,  336,  319,
      412,  342,  320,  446,  344,  321,  337,  343,  413,  447,
      338,  436,  437,  339,  345,  443,  351,  448,  352,  346,
      347,  353, 1353,  442,  360, 1567,  341,  336, 1567, 1567,
      342, 1567, 1567,  344, 1567,  337,  343,  449,  447,  338,
      436,  437,  339,  345,  443,  351,  448,  352,  346,  347,
      353,  357,  357,  357,  357,  359, 1567,  360,  361,  361,
      361,  361,  450,  374,  358,  375,  449, 1567,  384,  405,
      376,  362,  378,  377,  406,  451,  379,  454,  455,  407,

      380, 1567,  385,  381, 1567,  386,  382, 1567,  387, 1567,
     1567,  450,  374,  358,  375, 1567,  383,  384,  405,  376,
      362,  378,  377,  406,  451,  379,  454,  455,  407,  380,
      392,  385,  381,  414,  386,  382,  388,  387,  409,  393,
      389,  394,  410,  398,  390,  383,  395,  415,  411,  396,
      391,  397,  456,  416,  399, 1567, 1567,  400,  460,  392,
      401, 1567,  414,  402, 1567,  388, 1567,  409,  393,  389,
      394,  410,  398,  390, 1567,  395,  415,  411,  396,  391,
      397,  456,  416,  399,  422,  417,  400,  460,  423,  401,
      452,  425,  402,  418,  424,  429,  430,  419,  453,  461,

      420,  426,  462,  457,  463,  431,  427,  428,  464,  458,
      432,  465,  433,  422,  417,  434,  459,  423,  466,  452,
      425,  469,  418,  424,  429,  430,  419,  453,  461,  420,
      426,  462,  457,  463,  431,  427,  428,  464,  458,  432,
      465,  433,  467,  470,  434,  459,  471,  466,  468,  472,
      469,  473,  474,  475,  476,  477,  480,  481,  484,  485,
      478,  479,  482,  486,  483,  487,  488,  489,  490,  491,
      492,  467,  470,  493,  494,  471,  495,  468,  472,  498,
      473,  474,  475,  476,  477,  480,  481,  484,  485,  478,
      479,  482,  486,  483,  487,  488,  489,  490,  491,  492,

      499,  500,  493,  494,  496,  495,  497,  502,  498,  501,
      503,  504,  505,  506,  507,  508,  510,  509,  511,  512,
      514,  515,  522,  525,  526,  513, 1567, 1567, 1567,  499,
      500, 1567, 1567,  496, 1567,  497,  502, 1567,  501,  503,
      504,  505,  506,  507,  508,  510,  509,  511,  512,  514,
      515,  522,  525,  526,  513,  215,  215,  215,  215,  517,
      517,  517,  517,  216,  217,  217,  217,  217,  516,  519,
      523,  519,  518,  520,  520,  520,  520,  218,  527,  528,
      529,  530,  531,  532,  533,  535,  536,  537,  541,  538,
      542,  524,  534,  543,  544,  539,  545,  516,  546,  523,

      547,  518,  540, 1567,  550,  551,  218,  527,  528,  529,
      530,  531,  532,  533,  535,  536,  537,  541,  538,  542,
      524,  534,  543,  544,  539,  545,  548,  546,  552,  547,
      553,  540,  549,  550,  551,  554,  555,  556,  557,  558,
      561,  562,  565,  566,  559,  560,  563,  567,  564,  568,
      569,  570,  571,  572,  573,  548,  574,  552,  575,  553,
      576,  549,  579,  580,  554,  555,  556,  557,  558,  561,
      562,  565,  566,  559,  560,  563,  567,  564,  568,  569,
      570,  571,  572,  573,  577,  574,  578,  575,  581,  576,
      583,  579,  580,  584,  585,  586,  582,  587,  588,  589,

      591,  590,  592,  593,  595,  596,  605,  608,  609,  594,
     1567, 1567, 1567,  577, 1567,  578, 1567,  581, 1567,  583,
     1567, 1567,  584,  585,  586,  582,  587,  588,  589,  591,
      590,  592,  593,  595,  596,  605,  608,  609,  594,  286,
      286,  286,  286,  597, 1567,  597, 1567,  598,  598,  598,
      598,  606,  287,  599,  599,  599,  599,  600,  600,  600,
      600,  288,  610,  289,  602,  602,  602,  602,  611,  603,
      601,  603,  607,  604,  604,  604,  604,  291,  612,  613,
      606,  287,  614,  615,  616,  618,  619,  620,  624,  621,
      625,  610,  617,  626,  627,  622,  628,  611,  629,  601,

      630,  607,  623,  631,  633,  634,  291,  612,  613,  632,
      635,  614,  615,  616,  618,  619,  620,  624,  621,  625,
      636,  617,  626,  627,  622,  628,  637,  629,  638,  630,
      639,  623,  631,  633,  634,  640,  641,  644,  632,  635,
      645,  642,  643,  646,  648,  647,  649,  651,  652,  636,
      650,  653,  654,  655,  656,  637,  657,  638,  658,  639,
      659,  660,  662,  661,  640,  641,  644,  663,  666,  645,
      642,  643,  646,  648,  647,  649,  651,  652,  664,  650,
      653,  654,  655,  656,  667,  657,  665,  658,  668,  659,
      660,  662,  661,  669,  670,  671,  663,  666,  672,  674,

      673,  675,  676,  678,  679,  693,  696,  664,  677,  684,
      684,  684,  684,  667,  680,  665,  680,  668,  681,  681,
      681,  681,  669,  670,  671, 1567, 1567,  672,  674,  673,
      675,  676,  678,  679,  693,  696, 1567,  677,  357,  357,
      357,  357,  682,  682,  682,  682,  688,  688,  688,  688,
      697,  358,  694, 1567,  359,  683,  360,  685,  685,  685,
      685,  686,  689,  686,  698,  687,  687,  687,  687,  699,
      362, 1567,  700,  695,  701,  690,  690,  690,  690,  697,
      358,  694,  692,  439,  683,  439,  702,  703,  704,  439,
      706,  707,  708,  698,  712,  713,  705,  714,  699,  362,

      439,  700,  695,  701,  439,  709,  715,  716,  717,  718,
      721,  710,  722,  723,  724,  702,  703,  704,  711,  706,
      707,  708,  719,  712,  713,  705,  714,  725,  720,  726,
      727,  439,  728,  732,  709,  715,  716,  717,  718,  721,
      710,  722,  723,  724,  729,  733,  734,  711,  735,  730,
      731,  719,  736,  739,  740,  741,  725,  720,  726,  727,
      737,  728,  732,  742,  738,  743,  744,  745,  746,  747,
      748,  750,  749,  729,  733,  734,  751,  735,  730,  731,
      752,  736,  739,  740,  741,  754,  755,  756,  753,  737,
      757,  758,  742,  738,  743,  744,  745,  746,  747,  748,

      750,  749,  759,  762,  760,  751,  761,  763,  766,  752,
      767,  768,  764,  769,  754,  755,  756,  753,  765,  757,
      758,  770,  771,  772,  775,  776,  777,  778,  773,  779,
      780,  759,  762,  760,  781,  761,  763,  766,  782,  767,
      768,  764,  769,  774,  783,  784,  785,  765,  786,  787,
      770,  771,  772,  775,  776,  777,  778,  773,  779,  780,
      788,  789,  790,  781,  791,  792,  793,  782,  794,  795,
      796,  797,  774,  783,  784,  785,  798,  786,  787,  799,
      803,  804,  800,  805,  806,  807,  808,  809,  810,  788,
      789,  790,  801,  791,  792,  793,  811,  794,  795,  796,

      797,  812,  802,  813,  814,  798,  815,  816,  799,  803,
      804,  817,  805,  806,  807,  808,  809,  810,  818,  819,
      820,  801,  821,  822,  823,  811,  824,  825,  828,  829,
      812,  802,  813,  814,  830,  815,  816,  826,  831,  827,
      817,  832,  833,  835,  840, 1567,  834,  818,  819,  820,
     1567,  821,  822,  823, 1567,  824,  825,  828,  829,  520,
      520,  520,  520,  830, 1567,  841,  826,  831,  827, 1567,
      832,  833,  835,  840,  836,  834,  836,  842,  837,  837,
      837,  837,  517,  517,  517,  517,  838,  843,  838,  844,
      839,  839,  839,  839,  841,  518,  520,  520,  520,  520,

      845,  847,  848,  849,  850,  851,  842,  852,  853,  854,
      855,  856,  857,  858,  859,  846,  843,  860,  844,  861,
      862,  863,  864,  865,  518,  866,  867,  868,  869,  845,
      847,  848,  849,  850,  851,  870,  852,  853,  854,  855,
      856,  857,  858,  859,  846,  871,  860,  875,  861,  862,
      863,  864,  865,  872,  866,  867,  868,  869,  876,  877,
      878,  879,  880,  873,  870,  881,  882,  883,  884,  885,
      886,  887,  888,  874,  871,  889,  875,  890,  891,  892,
      893,  894,  895,  896,  897,  900,  901,  876,  877,  878,
      879,  880,  873,  902,  881,  882,  883,  884,  885,  886,

      887,  888,  874,  898,  889,  899,  890,  891,  892,  893,
      894,  895,  896,  897,  900,  901,  903,  904,  907,  905,
      914,  915,  902,  906,  908,  908,  908,  908,  598,  598,
      598,  598,  898, 1567,  899,  909,  909,  909,  909, 1567,
      600,  600,  600,  600, 1567,  903,  904,  907,  905,  914,
      915,  916,  906,  601,  910,  917,  910,  918,  911,  911,
      911,  911,  288, 1567,  289,  912,  912,  912,  912,  913,
      913,  913,  913,  604,  604,  604,  604,  919,  291,  921,
      916,  922,  601,  923,  917,  924,  918,  925,  926,  927,
      928,  929,  920,  930,  931,  932,  933,  934,  935,  936,

      937,  938,  939,  940,  941,  942,  919,  291,  921,  943,
      922,  944,  923,  945,  924,  949,  925,  926,  927,  928,
      929,  920,  930,  931,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  946,  950,  951,  943,  952,
      944,  953,  945,  954,  949,  947,  955,  956,  957,  958,
      959,  960,  961,  962,  963,  948,  964,  965,  966,  967,
      968,  969,  970,  971,  974,  950,  951,  972,  952,  973,
      953,  975,  954,  976,  947,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  948,  964,  965,  966,  967,  968,
      969,  970,  971,  974,  977,  978,  972,  979,  973,  981,

      975,  980,  976,  982,  982,  982,  982,  681,  681,  681,
      681, 1567,  682,  682,  682,  682,  985,  985,  985,  985,
     1567, 1567, 1567,  977,  978,  683,  979,  983,  981,  983,
      980,  984,  984,  984,  984,  359, 1567,  360,  986,  986,
      986,  986,  987,  987,  987,  987,  687,  687,  687,  687,
      689,  362,  990,  991,  683,  988,  988,  988,  988,  689,
      992,  993,  994,  688,  688,  688,  688,  997,  998, 1567,
      995,  999,  989,  989,  989,  989,  692,  439, 1000,  439,
      362,  990,  991,  439, 1001,  996, 1002, 1003, 1004,  992,
      993,  994, 1005, 1006,  439, 1007,  997,  998,  439,  995,

      999, 1008, 1009, 1010, 1011, 1012, 1013, 1000, 1014, 1015,
     1016, 1017, 1018, 1001,  996, 1002, 1003, 1004, 1019, 1020,
     1021, 1005, 1006, 1025, 1007,  439, 1022, 1026, 1027, 1028,
     1008, 1009, 1010, 1011, 1012, 1013, 1023, 1014, 1015, 1016,
     1017, 1018, 1029, 1030, 1031, 1032, 1024, 1019, 1020, 1021,
     1033, 1034, 1025, 1035, 1036, 1037, 1026, 1027, 1028, 1038,
     1039, 1040, 1041, 1042, 1043, 1023, 1044, 1045, 1046, 1047,
     1050, 1029, 1030, 1031, 1032, 1024, 1048, 1051, 1049, 1033,
     1034, 1052, 1035, 1036, 1037, 1053, 1054, 1057, 1038, 1039,
     1040, 1041, 1042, 1043, 1058, 1044, 1045, 1046, 1047, 1050,

     1055, 1059, 1060, 1061, 1056, 1048, 1051, 1049, 1062, 1063,
     1052, 1064, 1065, 1066, 1053, 1054, 1057, 1067, 1068, 1069,
     1070, 1071, 1072, 1058, 1073, 1074, 1075, 1076, 1077, 1055,
     1059, 1060, 1061, 1056, 1078, 1079, 1080, 1062, 1063, 1081,
     1064, 1065, 1066, 1085, 1086, 1087, 1067, 1068, 1069, 1070,
     1071, 1072, 1088, 1073, 1074, 1075, 1076, 1077, 1083, 1089,
     1090, 1091, 1092, 1078, 1079, 1080, 1093, 1094, 1081, 1084,
     1095, 1096, 1085, 1086, 1087, 1097, 1098, 1099, 1100, 1101,
     1102, 1088, 1103, 1104, 1105, 1567, 1567, 1083, 1089, 1090,
     1091, 1092, 1567, 1567, 1567, 1093, 1094, 1567, 1084, 1095,

     1096, 1106, 1107, 1108, 1097, 1098, 1099, 1100, 1101, 1102,
     1109, 1103, 1104, 1105,  837,  837,  837,  837,  837,  837,
      837,  837,  839,  839,  839,  839,  839,  839,  839,  839,
     1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1109,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1126, 1127, 1128, 1129, 1133, 1134, 1135, 1131, 1136, 1137,
     1138, 1139, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1133, 1134, 1135, 1131, 1136, 1137, 1138,
     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1132, 1146, 1147,

     1148, 1149, 1150, 1151, 1152, 1153,  908,  908,  908,  908,
     1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1567, 1156,
     1140, 1141, 1142, 1143, 1144, 1145, 1157, 1146, 1147, 1148,
     1149, 1150, 1151, 1152, 1153,  911,  911,  911,  911,  289,
      912,  912,  912,  912,  913,  913,  913,  913, 1156, 1158,
     1159, 1160, 1161,  291, 1162, 1157, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1181, 1183, 1184, 1185, 1186, 1158, 1159,
     1160, 1161,  291, 1162, 1182, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,

     1178, 1179, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1182, 1193, 1194, 1195, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203,  982,  982,  982,  982, 1204,
     1204, 1204, 1204, 1567, 1208, 1209, 1187, 1188, 1189, 1190,
     1191, 1192, 1567, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203,  984,  984,  984,  984, 1205, 1205,
     1205, 1205,  359, 1208, 1209,  986,  986,  986,  986,  987,
      987,  987,  987, 1207, 1207, 1207, 1207,  689,  362, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
      688,  688,  688,  688, 1221, 1222, 1223, 1224, 1225, 1226,

     1227, 1228, 1229, 1230, 1231, 1567, 1235,  362, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1236,
     1237, 1238, 1239, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1233, 1235, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1248, 1234, 1249, 1250, 1236, 1237,
     1238, 1239, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1260, 1261, 1233, 1262, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1234, 1249, 1250, 1263, 1264, 1265,
     1266, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1267, 1262, 1268, 1269, 1270, 1271, 1272, 1273,

     1274, 1275, 1276, 1277, 1278, 1279, 1263, 1264, 1265, 1266,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
     1290, 1267, 1291, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1279, 1292, 1293, 1294, 1295, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1296, 1291, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1292, 1293, 1294, 1295, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1296,
     1321, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1155, 1155, 1155, 1155, 1309, 1310, 1311,

     1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1322, 1321,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1322, 1350, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1351, 1350, 1352, 1204,
     1204, 1204, 1204, 1354, 1354, 1354, 1354, 1355, 1355, 1355,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1351, 1370, 1352, 1371, 1372,

     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1383, 1370, 1384, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1385,
     1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1383, 1399, 1384, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1412, 1399, 1413, 1400, 1401, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1414, 1415, 1416,

     1417, 1418, 1419, 1420, 1420, 1420, 1420, 1421, 1422, 1423,
     1424, 1412, 1425, 1413, 1426, 1427, 1428, 1429, 1430, 1431,
     1432, 1433, 1434, 1435, 1436, 1567, 1414, 1415, 1416, 1417,
     1418, 1419, 1437, 1437, 1437, 1437, 1421, 1422, 1423, 1424,
     1439, 1425, 1440, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1354, 1354, 1354, 1354, 1438, 1438,
     1438, 1438, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1439,
     1448, 1440, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1465, 1466, 1467, 1468,
     1469, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1470, 1448,

     1471, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1457, 1458,
     1459, 1460, 1461, 1462, 1463, 1465, 1466, 1467, 1468, 1469,
     1420, 1420, 1420, 1420, 1473, 1474, 1475, 1470, 1476, 1471,
     1477, 1478, 1437, 1437, 1437, 1437, 1354, 1354, 1354, 1354,
     1479, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1489, 1490,
     1491, 1492, 1493, 1473, 1474, 1475, 1495, 1476, 1496, 1477,
     1478, 1497, 1498, 1488, 1501, 1502, 1499, 1503, 1494, 1479,
     1481, 1482, 1483, 1484, 1485, 1486, 1487, 1489, 1490, 1491,
     1492, 1493, 1500, 1504, 1505, 1495, 1507, 1496, 1508, 1509,
     1497, 1498, 1488, 1501, 1502, 1499, 1503, 1494, 1510, 1511,

     1506, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
     1521, 1500, 1504, 1505, 1522, 1507, 1523, 1508, 1509, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1510, 1511, 1506,
     1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
     1532, 1533, 1534, 1522, 1535, 1523, 1536, 1537, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1538, 1539, 1540, 1541,
     1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1532,
     1533, 1534, 1551, 1535, 1552, 1536, 1537, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1561, 1562,

     1563, 1551, 1564, 1552, 1565, 1566, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1561, 1562, 1563,
     1567, 1564, 1567, 1565, 1566,  220, 1567,  220,  220,  285,
     1567,  285, 1567,  285,  292,  292,  292,  292,  292,  292,
      363, 1567,  363,  363,  363,  363,  363,  363,  363,  365,
     1567, 1567,  365,  365,  365, 1567,  365,  365,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  691,  691,  691,
      691,  691,  691,  691,  691,  691, 1206, 1567, 1206, 1206,
     1206, 1206, 1206, 1206, 1206,   13, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567
    } ;

static const flex_int16_t yy_chk[3679] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 1574,    7,    7,
        7,    7,    7,    8, 1442,    8,    8,    8,    8,    8,
        9, 1424,    9,    9,    9,    9,    9,   10, 1407,   10,
       10,   10,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   15, 1391,   15,   22,
       22,   22,   24,   24,   25,   26,   25,   27,   31,   26,
       32,   25,   34,   26,   25,   36,   26,   39,   28,   26,
       44,   27,   28,   36,   27, 1022,   28,   27,  106,   26,
      106,   58,   28,   25,   26,   25,   27,   31,   26,   32,

       25,   34,   26,   25,   36,   26,   39,   28,   26,   44,
       27,   28,   36,   27,   29,   28,   27,   30,   26,   33,
       58,   28,   35,   29,   33,   29,   35,   37,   30,   33,
       29,   30,   35,   29,   30,   29,  946,   30,   59,  117,
      117,   37,   61,   29,  872,  800,   30,   37,   33,  439,
      144,   35,   29,   33,   29,   35,   37,   30,   33,   29,
       30,   35,   29,   30,   29,   38,   30,   59,   40,   41,
       37,   61,   40,   38,   45,   45,   37,   38,   40,   41,
       38,   42,   42,   67,   41,   41,   72,   43,   86,   43,
       87,   42,   43,  142,   38,  142,  140,   40,   41,  113,

      108,   40,   38,   45,   45,   46,   38,   40,   41,   38,
       42,   42,   67,   41,   41,   72,   43,   86,   43,   87,
       42,   43,   49,   49,   49,   49,   50,   50,   50,   50,
       50,   51,   51,   51,   51,   51,   52,   54,   52,  366,
       50,  366,   64,   52,   53,   51,   52,   89,   53,   95,
       64,   54,   53,   92,   54,   53,   55,   54,   53,   50,
       55,   92,   21,  100,   55,   52,   54,   52,   53,   50,
       55,   64,   52,   53,   51,   52,   89,   53,   95,   64,
       54,   53,   92,   54,   53,   55,   54,   53,   50,   55,
       92,   56,  100,   55,   57,   17,   60,   53,  124,   55,

       56,   60,   56,   13,   65,   57,   60,   56,   57,   63,
       56,   57,   56,   63,   57,    0,   73,   73,   65,   63,
       56,    0,   68,   57,   65,   60,   68,  124,    0,   56,
       60,   56,   68,   65,   57,   60,   56,   57,   63,   56,
       57,   56,   63,   57,   66,   73,   73,   65,   63,    0,
       69,   68,   66,   65,    0,   68,   66,   70,   70,   66,
       69,   68,   98,   98,  125,   69,   69,   70,  127,   71,
      132,   71,   98,   66,   71,  104,  104,  104,  104,   69,
      137,   66,  115,  115,  115,   66,   70,   70,   66,   69,
      150,   98,   98,  125,   69,   69,   70,  127,   71,  132,

       71,   98,    0,   71,   78,   78,   78,   78,   79,  137,
       79,   79,   79,   79,   79,  152,   80,   78,   80,  150,
        0,   82,   88,   80,   79,   81,   80,   88,  153,   81,
      101,  101,   88,   81,    0,   82,   81,    0,   82,   81,
     1154,   82, 1154,    0,  152,   80,   78,   80,    0,   81,
       82,   88,   80,   79,   81,   80,   88,  153,   81,  101,
      101,   88,   81,   84,   82,   81,   93,   82,   81,   83,
       82,   91,   84,   83,   84,   91,   85,   83,   81,   84,
       93,   91,   84,   83,   84,    0,   93,   85,    0,    0,
       85,  129,   84,   85,  154,   93,   85,    0,   83,  129,

       91,   84,   83,   84,   91,   85,   83,    0,   84,   93,
       91,   84,   83,   84,  151,   93,   85,   96,   94,   85,
      129,   96,   85,  154,   97,   85,   94,   96,  129,  155,
       94,  138,  138,   94,   97,  151,   99,  156,   99,   97,
       97,   99, 1205,  151, 1205,    0,   96,   94,    0,    0,
       96,    0,    0,   97,    0,   94,   96,  157,  155,   94,
      138,  138,   94,   97,  151,   99,  156,   99,   97,   97,
       99,  102,  102,  102,  102,  103,    0,  103,  103,  103,
      103,  103,  158,  118,  102,  118,  157,    0,  120,  126,
      118,  103,  119,  118,  126,  160,  119,  162,  163,  126,

      119,    0,  120,  119,    0,  120,  119,    0,  120,    0,
        0,  158,  118,  102,  118,    0,  119,  120,  126,  118,
      103,  119,  118,  126,  160,  119,  162,  163,  126,  119,
      122,  120,  119,  130,  120,  119,  121,  120,  128,  122,
      121,  122,  128,  123,  121,  119,  122,  130,  128,  122,
      121,  122,  164,  130,  123,    0,    0,  123,  166,  122,
      123,    0,  130,  123,    0,  121,    0,  128,  122,  121,
      122,  128,  123,  121,    0,  122,  130,  128,  122,  121,
      122,  164,  130,  123,  133,  131,  123,  166,  133,  123,
      161,  134,  123,  131,  133,  135,  135,  131,  161,  167,

      131,  134,  168,  165,  169,  135,  134,  134,  170,  165,
      136,  171,  136,  133,  131,  136,  165,  133,  172,  161,
      134,  174,  131,  133,  135,  135,  131,  161,  167,  131,
      134,  168,  165,  169,  135,  134,  134,  170,  165,  136,
      171,  136,  173,  175,  136,  165,  176,  172,  173,  177,
      174,  178,  179,  180,  181,  182,  184,  185,  187,  188,
      182,  182,  186,  188,  186,  189,  190,  191,  192,  193,
      194,  173,  175,  195,  196,  176,  197,  173,  177,  199,
      178,  179,  180,  181,  182,  184,  185,  187,  188,  182,
      182,  186,  188,  186,  189,  190,  191,  192,  193,  194,

      200,  201,  195,  196,  198,  197,  198,  202,  199,  201,
      203,  204,  205,  206,  207,  208,  209,  208,  210,  211,
      212,  213,  221,  223,  224,  211,    0,    0,    0,  200,
      201,    0,    0,  198,    0,  198,  202,    0,  201,  203,
      204,  205,  206,  207,  208,  209,  208,  210,  211,  212,
      213,  221,  223,  224,  211,  215,  215,  215,  215,  216,
      216,  216,  216,  217,  217,  217,  217,  217,  215,  218,
      222,  218,  216,  218,  218,  218,  218,  217,  225,  226,
      227,  228,  229,  231,  232,  233,  234,  235,  237,  236,
      238,  222,  232,  239,  240,  236,  241,  215,  242,  222,

      243,  216,  236,    0,  245,  246,  217,  225,  226,  227,
      228,  229,  231,  232,  233,  234,  235,  237,  236,  238,
      222,  232,  239,  240,  236,  241,  244,  242,  247,  243,
      248,  236,  244,  245,  246,  249,  250,  251,  252,  253,
      255,  256,  258,  259,  253,  253,  257,  259,  257,  260,
      261,  262,  263,  264,  265,  244,  266,  247,  267,  248,
      268,  244,  270,  271,  249,  250,  251,  252,  253,  255,
      256,  258,  259,  253,  253,  257,  259,  257,  260,  261,
      262,  263,  264,  265,  269,  266,  269,  267,  272,  268,
      273,  270,  271,  274,  275,  276,  272,  277,  278,  279,

      280,  279,  281,  282,  283,  284,  293,  295,  296,  282,
        0,    0,    0,  269,    0,  269,    0,  272,    0,  273,
        0,    0,  274,  275,  276,  272,  277,  278,  279,  280,
      279,  281,  282,  283,  284,  293,  295,  296,  282,  286,
      286,  286,  286,  287,    0,  287,    0,  287,  287,  287,
      287,  294,  286,  288,  288,  288,  288,  289,  289,  289,
      289,  290,  297,  290,  290,  290,  290,  290,  298,  291,
      289,  291,  294,  291,  291,  291,  291,  290,  299,  300,
      294,  286,  301,  303,  304,  305,  306,  307,  309,  308,
      310,  297,  304,  311,  312,  308,  313,  298,  314,  289,

      315,  294,  308,  316,  317,  318,  290,  299,  300,  316,
      319,  301,  303,  304,  305,  306,  307,  309,  308,  310,
      320,  304,  311,  312,  308,  313,  321,  314,  322,  315,
      323,  308,  316,  317,  318,  324,  325,  327,  316,  319,
      328,  325,  325,  329,  330,  329,  331,  332,  333,  320,
      331,  334,  335,  336,  337,  321,  338,  322,  339,  323,
      340,  341,  342,  341,  324,  325,  327,  343,  345,  328,
      325,  325,  329,  330,  329,  331,  332,  333,  344,  331,
      334,  335,  336,  337,  346,  338,  344,  339,  347,  340,
      341,  342,  341,  348,  349,  350,  343,  345,  351,  352,

      351,  353,  354,  355,  356,  374,  376,  344,  354,  360,
      360,  360,  360,  346,  358,  344,  358,  347,  358,  358,
      358,  358,  348,  349,  350,    0,    0,  351,  352,  351,
      353,  354,  355,  356,  374,  376,    0,  354,  357,  357,
      357,  357,  359,  359,  359,  359,  363,  363,  363,  363,
      377,  357,  375,    0,  361,  359,  361,  361,  361,  361,
      361,  362,  364,  362,  378,  362,  362,  362,  362,  379,
      361,    0,  380,  375,  381,  364,  364,  364,  364,  377,
      357,  375,  368,  368,  359,  368,  382,  384,  385,  368,
      386,  387,  388,  378,  390,  391,  385,  392,  379,  361,

      368,  380,  375,  381,  368,  389,  393,  394,  395,  396,
      398,  389,  399,  400,  401,  382,  384,  385,  389,  386,
      387,  388,  397,  390,  391,  385,  392,  402,  397,  403,
      404,  368,  405,  408,  389,  393,  394,  395,  396,  398,
      389,  399,  400,  401,  406,  409,  410,  389,  410,  406,
      406,  397,  411,  413,  414,  415,  402,  397,  403,  404,
      412,  405,  408,  416,  412,  417,  418,  419,  420,  421,
      422,  423,  422,  406,  409,  410,  424,  410,  406,  406,
      425,  411,  413,  414,  415,  426,  427,  428,  425,  412,
      429,  430,  416,  412,  417,  418,  419,  420,  421,  422,

      423,  422,  431,  433,  432,  424,  432,  434,  436,  425,
      437,  446,  435,  447,  426,  427,  428,  425,  435,  429,
      430,  448,  449,  450,  452,  453,  454,  455,  451,  456,
      457,  431,  433,  432,  458,  432,  434,  436,  459,  437,
      446,  435,  447,  451,  460,  461,  462,  435,  463,  465,
      448,  449,  450,  452,  453,  454,  455,  451,  456,  457,
      466,  467,  468,  458,  469,  470,  471,  459,  472,  473,
      474,  475,  451,  460,  461,  462,  477,  463,  465,  478,
      480,  481,  479,  482,  483,  484,  485,  488,  490,  466,
      467,  468,  479,  469,  470,  471,  491,  472,  473,  474,

      475,  492,  479,  493,  494,  477,  495,  496,  478,  480,
      481,  497,  482,  483,  484,  485,  488,  490,  498,  499,
      500,  479,  502,  503,  505,  491,  506,  507,  509,  510,
      492,  479,  493,  494,  511,  495,  496,  508,  512,  508,
      497,  513,  514,  515,  527,    0,  514,  498,  499,  500,
        0,  502,  503,  505,    0,  506,  507,  509,  510,  519,
      519,  519,  519,  511,    0,  528,  508,  512,  508,    0,
      513,  514,  515,  527,  516,  514,  516,  529,  516,  516,
      516,  516,  517,  517,  517,  517,  518,  530,  518,  531,
      518,  518,  518,  518,  528,  517,  520,  520,  520,  520,

      532,  533,  534,  535,  536,  537,  529,  538,  539,  540,
      541,  542,  543,  544,  546,  532,  530,  547,  531,  548,
      549,  550,  551,  552,  517,  553,  554,  555,  556,  532,
      533,  534,  535,  536,  537,  558,  538,  539,  540,  541,
      542,  543,  544,  546,  532,  559,  547,  561,  548,  549,
      550,  551,  552,  560,  553,  554,  555,  556,  562,  563,
      564,  565,  566,  560,  558,  569,  571,  572,  573,  574,
      575,  576,  577,  560,  559,  578,  561,  579,  580,  581,
      583,  584,  586,  587,  588,  590,  591,  562,  563,  564,
      565,  566,  560,  592,  569,  571,  572,  573,  574,  575,

      576,  577,  560,  589,  578,  589,  579,  580,  581,  583,
      584,  586,  587,  588,  590,  591,  593,  594,  596,  595,
      610,  611,  592,  595,  597,  597,  597,  597,  598,  598,
      598,  598,  589,    0,  589,  599,  599,  599,  599,    0,
      600,  600,  600,  600,    0,  593,  594,  596,  595,  610,
      611,  612,  595,  600,  601,  613,  601,  614,  601,  601,
      601,  601,  602,    0,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  604,  604,  604,  604,  615,  602,  616,
      612,  617,  600,  618,  613,  619,  614,  620,  621,  622,
      623,  624,  615,  625,  626,  627,  629,  630,  631,  632,

      633,  634,  635,  636,  637,  638,  615,  602,  616,  639,
      617,  641,  618,  642,  619,  644,  620,  621,  622,  623,
      624,  615,  625,  626,  627,  629,  630,  631,  632,  633,
      634,  635,  636,  637,  638,  643,  645,  646,  639,  647,
      641,  648,  642,  649,  644,  643,  652,  654,  655,  656,
      657,  658,  659,  660,  661,  643,  662,  663,  664,  666,
      667,  669,  670,  671,  673,  645,  646,  672,  647,  672,
      648,  674,  649,  675,  643,  652,  654,  655,  656,  657,
      658,  659,  660,  661,  643,  662,  663,  664,  666,  667,
      669,  670,  671,  673,  676,  677,  672,  678,  672,  679,

      674,  678,  675,  680,  680,  680,  680,  681,  681,  681,
      681,    0,  682,  682,  682,  682,  684,  684,  684,  684,
        0,    0,    0,  676,  677,  682,  678,  683,  679,  683,
      678,  683,  683,  683,  683,  685,    0,  685,  685,  685,
      685,  685,  686,  686,  686,  686,  687,  687,  687,  687,
      688,  685,  698,  699,  682,  689,  689,  689,  689,  690,
      700,  701,  702,  688,  688,  688,  688,  704,  705,    0,
      703,  706,  690,  690,  690,  690,  691,  691,  707,  691,
      685,  698,  699,  691,  708,  703,  709,  710,  711,  700,
      701,  702,  712,  713,  691,  714,  704,  705,  691,  703,

      706,  715,  717,  718,  719,  720,  721,  707,  722,  723,
      724,  725,  726,  708,  703,  709,  710,  711,  727,  729,
      730,  712,  713,  732,  714,  691,  731,  733,  734,  735,
      715,  717,  718,  719,  720,  721,  731,  722,  723,  724,
      725,  726,  736,  737,  740,  742,  731,  727,  729,  730,
      743,  744,  732,  745,  746,  747,  733,  734,  735,  748,
      749,  750,  751,  752,  754,  731,  755,  757,  758,  759,
      761,  736,  737,  740,  742,  731,  760,  762,  760,  743,
      744,  763,  745,  746,  747,  764,  765,  767,  748,  749,
      750,  751,  752,  754,  768,  755,  757,  758,  759,  761,

      766,  769,  770,  772,  766,  760,  762,  760,  775,  776,
      763,  777,  778,  780,  764,  765,  767,  781,  783,  784,
      785,  787,  788,  768,  789,  790,  791,  792,  793,  766,
      769,  770,  772,  766,  796,  797,  798,  775,  776,  799,
      777,  778,  780,  806,  808,  809,  781,  783,  784,  785,
      787,  788,  811,  789,  790,  791,  792,  793,  801,  813,
      814,  815,  817,  796,  797,  798,  818,  819,  799,  801,
      820,  822,  806,  808,  809,  824,  826,  827,  828,  829,
      830,  811,  831,  832,  834,    0,    0,  801,  813,  814,
      815,  817,    0,    0,    0,  818,  819,    0,  801,  820,

      822,  840,  841,  842,  824,  826,  827,  828,  829,  830,
      844,  831,  832,  834,  836,  836,  836,  836,  837,  837,
      837,  837,  838,  838,  838,  838,  839,  839,  839,  839,
      840,  841,  842,  847,  848,  849,  850,  852,  853,  844,
      855,  856,  857,  859,  860,  861,  862,  863,  864,  865,
      868,  869,  870,  871,  878,  880,  881,  873,  883,  885,
      886,  887,  847,  848,  849,  850,  852,  853,  873,  855,
      856,  857,  859,  860,  861,  862,  863,  864,  865,  868,
      869,  870,  871,  878,  880,  881,  873,  883,  885,  886,
      887,  889,  890,  891,  892,  894,  896,  873,  898,  899,

      900,  901,  902,  903,  904,  906,  908,  908,  908,  908,
      909,  909,  909,  909,  910,  910,  910,  910,    0,  914,
      889,  890,  891,  892,  894,  896,  915,  898,  899,  900,
      901,  902,  903,  904,  906,  911,  911,  911,  911,  912,
      912,  912,  912,  912,  913,  913,  913,  913,  914,  916,
      918,  921,  922,  912,  923,  915,  924,  926,  927,  929,
      930,  931,  933,  934,  935,  936,  937,  938,  939,  942,
      943,  944,  945,  947,  952,  954,  955,  957,  916,  918,
      921,  922,  912,  923,  947,  924,  926,  927,  929,  930,
      931,  933,  934,  935,  936,  937,  938,  939,  942,  943,

      944,  945,  947,  952,  954,  955,  957,  959,  960,  961,
      963,  964,  965,  947,  966,  968,  970,  972,  973,  974,
      975,  976,  977,  978,  980,  982,  982,  982,  982,  983,
      983,  983,  983,    0,  990,  991,  959,  960,  961,  963,
      964,  965,    0,  966,  968,  970,  972,  973,  974,  975,
      976,  977,  978,  980,  984,  984,  984,  984,  985,  985,
      985,  985,  986,  990,  991,  986,  986,  986,  986,  987,
      987,  987,  987,  988,  988,  988,  988,  989,  986,  992,
      994,  997,  998,  999, 1000, 1002, 1003, 1005, 1006, 1007,
      989,  989,  989,  989, 1009, 1010, 1011, 1012, 1013, 1014,

     1015, 1018, 1019, 1020, 1021,    0, 1028,  986,  992,  994,
      997,  998,  999, 1000, 1002, 1003, 1005, 1006, 1007, 1030,
     1031, 1033, 1035, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1018, 1019, 1020, 1021, 1023, 1028, 1036, 1037, 1039, 1040,
     1041, 1042, 1044, 1046, 1048, 1023, 1049, 1050, 1030, 1031,
     1033, 1035, 1051, 1052, 1053, 1054, 1056, 1058, 1059, 1060,
     1061, 1062, 1065, 1023, 1066, 1036, 1037, 1039, 1040, 1041,
     1042, 1044, 1046, 1048, 1023, 1049, 1050, 1067, 1068, 1069,
     1070, 1051, 1052, 1053, 1054, 1056, 1058, 1059, 1060, 1061,
     1062, 1065, 1071, 1066, 1073, 1074, 1077, 1079, 1081, 1083,

     1084, 1087, 1088, 1091, 1092, 1094, 1067, 1068, 1069, 1070,
     1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1106, 1107,
     1108, 1071, 1109, 1073, 1074, 1077, 1079, 1081, 1083, 1084,
     1087, 1088, 1091, 1092, 1094, 1110, 1113, 1114, 1115, 1095,
     1096, 1097, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108,
     1116, 1109, 1117, 1118, 1119, 1121, 1122, 1125, 1127, 1129,
     1131, 1132, 1135, 1136, 1110, 1113, 1114, 1115, 1139, 1140,
     1142, 1143, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1116,
     1156, 1117, 1118, 1119, 1121, 1122, 1125, 1127, 1129, 1131,
     1132, 1135, 1136, 1155, 1155, 1155, 1155, 1139, 1140, 1142,

     1143, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1157, 1156,
     1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1171, 1172, 1175, 1177, 1179, 1181, 1182, 1185, 1186, 1189,
     1190, 1192, 1193, 1194, 1195, 1197, 1198, 1157, 1199, 1158,
     1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171,
     1172, 1175, 1177, 1179, 1181, 1182, 1185, 1186, 1189, 1190,
     1192, 1193, 1194, 1195, 1197, 1198, 1201, 1199, 1202, 1204,
     1204, 1204, 1204, 1206, 1206, 1206, 1206, 1207, 1207, 1207,
     1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218,
     1219, 1220, 1221, 1223, 1224, 1201, 1227, 1202, 1229, 1231,

     1233, 1234, 1237, 1238, 1241, 1242, 1244, 1245, 1246, 1247,
     1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1223, 1224, 1249, 1227, 1250, 1229, 1231, 1233,
     1234, 1237, 1238, 1241, 1242, 1244, 1245, 1246, 1247, 1251,
     1253, 1254, 1256, 1257, 1259, 1261, 1262, 1264, 1266, 1270,
     1273, 1274, 1275, 1249, 1278, 1250, 1279, 1282, 1284, 1287,
     1288, 1289, 1291, 1293, 1294, 1296, 1298, 1302, 1251, 1253,
     1254, 1256, 1257, 1259, 1261, 1262, 1264, 1266, 1270, 1273,
     1274, 1275, 1305, 1278, 1306, 1279, 1282, 1284, 1287, 1288,
     1289, 1291, 1293, 1294, 1296, 1298, 1302, 1307, 1310, 1311,

     1314, 1316, 1319, 1320, 1320, 1320, 1320, 1321, 1322, 1324,
     1326, 1305, 1327, 1306, 1329, 1331, 1335, 1338, 1339, 1340,
     1343, 1344, 1347, 1349, 1352,    0, 1307, 1310, 1311, 1314,
     1316, 1319, 1353, 1353, 1353, 1353, 1321, 1322, 1324, 1326,
     1356, 1327, 1357, 1329, 1331, 1335, 1338, 1339, 1340, 1343,
     1344, 1347, 1349, 1352, 1354, 1354, 1354, 1354, 1355, 1355,
     1355, 1355, 1359, 1361, 1362, 1364, 1366, 1370, 1373, 1356,
     1374, 1357, 1375, 1378, 1379, 1382, 1384, 1387, 1388, 1393,
     1394, 1397, 1399, 1400, 1401, 1404, 1409, 1410, 1413, 1415,
     1416, 1359, 1361, 1362, 1364, 1366, 1370, 1373, 1417, 1374,

     1421, 1375, 1378, 1379, 1382, 1384, 1387, 1388, 1393, 1394,
     1397, 1399, 1400, 1401, 1404, 1409, 1410, 1413, 1415, 1416,
     1420, 1420, 1420, 1420, 1426, 1427, 1430, 1417, 1432, 1421,
     1433, 1434, 1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438,
     1439, 1444, 1445, 1448, 1450, 1451, 1452, 1456, 1458, 1459,
     1460, 1462, 1464, 1426, 1427, 1430, 1466, 1432, 1467, 1433,
     1434, 1468, 1470, 1456, 1474, 1475, 1472, 1476, 1464, 1439,
     1444, 1445, 1448, 1450, 1451, 1452, 1456, 1458, 1459, 1460,
     1462, 1464, 1472, 1478, 1480, 1466, 1482, 1467, 1483, 1484,
     1468, 1470, 1456, 1474, 1475, 1472, 1476, 1464, 1486, 1487,

     1480, 1488, 1489, 1493, 1494, 1495, 1499, 1500, 1501, 1505,
     1506, 1472, 1478, 1480, 1507, 1482, 1511, 1483, 1484, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1486, 1487, 1480,
     1488, 1489, 1493, 1494, 1495, 1499, 1500, 1501, 1505, 1506,
     1520, 1521, 1522, 1507, 1523, 1511, 1524, 1525, 1512, 1513,
     1514, 1515, 1516, 1517, 1518, 1519, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1536, 1539, 1542, 1545, 1520,
     1521, 1522, 1547, 1523, 1548, 1524, 1525, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1526, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1536, 1539, 1542, 1545, 1557, 1558,

     1559, 1547, 1560, 1548, 1561, 1562, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1557, 1558, 1559,
        0, 1560,    0, 1561, 1562, 1568,    0, 1568, 1568, 1569,
        0, 1569,    0, 1569, 1570, 1570, 1570, 1570, 1570, 1570,
     1571,    0, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572,
        0,    0, 1572, 1572, 1572,    0, 1572, 1572, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1576,    0, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1568 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1567 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 110:
case 111:
case 112:
case 113:
case 114:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 119:
case 120:
case 121:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 122:
case 123:
case 124:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 125:
case 126:
case 127:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 128:
case 129:
case 130:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return parseString(yyscanner); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' , 0, true);}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return gatherString(yyscanner,'#' ,2); }
	YY_BREAK
case 137:
/* rule 137 can match eol */
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return gatherString(yyscanner,']' ,0, true); }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner,yytext); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 143:
YY_RULE_SETUP
{}
	YY_BREAK
case 144:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 145:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 146:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1568 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1568 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1567);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *    ''    'a string'    'quote '' within string'
 *    ""    "a string"    "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
//------------------------------------------------------------------------------
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                    case 0:
                        {
                        bool isNumeric = checkForArrayIndex;
                        if (checkForArrayIndex)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    continue;
                                isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
                                }
                            }

                        bool checkForSign = true;
                        if(isNumeric)
                            {
                            for (size_t i = 0; i < sBuffer.size(); i++)
                                {
                                if (sBuffer[i] == '-' || sBuffer[i] == '+')
                                    {
                                    if (checkForSign)
                                        {
                                        if (sBuffer[i] == '-')
                                            {
                                            YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                            return SQL_TOKEN_INVALIDSYMBOL;
                                            }
                                        checkForSign = false;
                                        }
                                    else
                                        {
                                        YY_FATAL_ERROR("Invalid array index. Only positive integer is expected.");
                                        return SQL_TOKEN_INVALIDSYMBOL;
                                        }
                                    }
                                }
                            }

                        SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
                        return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
                        }
                    case 1:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                        return SQL_TOKEN_STRING;
                    case 2:
                        SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                        return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
    case IParseContext::KEY_EVERY:
    case IParseContext::KEY_ANY:
    case IParseContext::KEY_SOME:
    case IParseContext::KEY_COLLECT:
    case IParseContext::KEY_FUSION:
    case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(pNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    auto newNode = new OSQLParseNode(_rNewValue, eNodeType, nNodeID);
    m_pGarbageCollector.push_back(newNode);
    newNode->m_container = &m_pGarbageCollector;
    return newNode;
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

