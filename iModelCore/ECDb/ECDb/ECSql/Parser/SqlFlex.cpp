#line 2 "ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505)
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define SQLyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SQLyy_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define SQLyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SQLyy_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define SQLyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SQLyy_scan_buffer
#endif

    
#ifdef yy_scan_string
#define SQLyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SQLyy_scan_string
#endif

    
#ifdef yy_scan_bytes
#define SQLyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SQLyy_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define SQLyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SQLyy_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define SQLyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SQLyy_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define SQLyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SQLyy_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define SQLyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define SQLyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SQLyypush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define SQLyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SQLyypop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define SQLyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SQLyyensure_buffer_stack
#endif

    
#ifdef yylex
#define SQLyylex_ALREADY_DEFINED
#else
#define yylex SQLyylex
#endif

    
#ifdef yyrestart
#define SQLyyrestart_ALREADY_DEFINED
#else
#define yyrestart SQLyyrestart
#endif

    
#ifdef yylex_init
#define SQLyylex_init_ALREADY_DEFINED
#else
#define yylex_init SQLyylex_init
#endif

    
#ifdef yylex_init_extra
#define SQLyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SQLyylex_init_extra
#endif

    
#ifdef yylex_destroy
#define SQLyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SQLyylex_destroy
#endif

    
#ifdef yyget_debug
#define SQLyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug SQLyyget_debug
#endif

    
#ifdef yyset_debug
#define SQLyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug SQLyyset_debug
#endif

    
#ifdef yyget_extra
#define SQLyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra SQLyyget_extra
#endif

    
#ifdef yyset_extra
#define SQLyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra SQLyyset_extra
#endif

    
#ifdef yyget_in
#define SQLyyget_in_ALREADY_DEFINED
#else
#define yyget_in SQLyyget_in
#endif

    
#ifdef yyset_in
#define SQLyyset_in_ALREADY_DEFINED
#else
#define yyset_in SQLyyset_in
#endif

    
#ifdef yyget_out
#define SQLyyget_out_ALREADY_DEFINED
#else
#define yyget_out SQLyyget_out
#endif

    
#ifdef yyset_out
#define SQLyyset_out_ALREADY_DEFINED
#else
#define yyset_out SQLyyset_out
#endif

    
#ifdef yyget_leng
#define SQLyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng SQLyyget_leng
#endif

    
#ifdef yyget_text
#define SQLyyget_text_ALREADY_DEFINED
#else
#define yyget_text SQLyyget_text
#endif

    
#ifdef yyget_lineno
#define SQLyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SQLyyget_lineno
#endif

    
#ifdef yyset_lineno
#define SQLyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SQLyyset_lineno
#endif

    
        
#ifdef yyget_column
#define SQLyyget_column_ALREADY_DEFINED
#else
#define yyget_column SQLyyget_column
#endif

        
#ifdef yyset_column
#define SQLyyset_column_ALREADY_DEFINED
#else
#define yyset_column SQLyyset_column
#endif

    
    
#ifdef yywrap
#define SQLyywrap_ALREADY_DEFINED
#else
#define yywrap SQLyywrap
#endif




    
#ifdef yyget_lval
#define SQLyyget_lval_ALREADY_DEFINED
#else
#define yyget_lval SQLyyget_lval
#endif

    
#ifdef yyset_lval
#define SQLyyset_lval_ALREADY_DEFINED
#else
#define yyset_lval SQLyyset_lval
#endif






#ifdef yyalloc
#define SQLyyalloc_ALREADY_DEFINED
#else
#define yyalloc SQLyyalloc
#endif

    
#ifdef yyrealloc
#define SQLyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc SQLyyrealloc
#endif

    
#ifdef yyfree
#define SQLyyfree_ALREADY_DEFINED
#else
#define yyfree SQLyyfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define SQLyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2140] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      177,  177,  183,  181,  179,  178,  181,  127,  142,  139,
      170,  142,  128,  130,  129,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  138,  137,  168,  142,
      144,  144,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  171,  169,  172,  142,  142,  152,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  142,  152,  181,  177,  177,  177,  177,  175,
      127,  142,  139,  142,  142,  142,  128,  130,  129,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      176,  138,  137,  179,  134,    0,  136,  140,  131,  133,
      132,  141,    0,    0,    4,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   62,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,    0,    0,   83,

        0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  135,  146,  147,
      144,    0,    0,  143,  143,  143,    4,  143,  143,  143,
      143,  143,  143,   12,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   55,   62,  143,
      143,  143,  143,  143,  143,  143,  143,   76,  143,  143,
      143,   83,  143,   85,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  167,
      157,  167,  167,  167,  152,  167,  151,  151,  151,    4,
      151,  151,  151,  151,  151,  151,   12,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
       55,   62,  151,  151,  151,  151,  151,  151,  151,  151,
       76,  151,  151,  151,   83,  151,   85,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  163,  167,  167,  167,  152,  167,    0,  173,

      177,  177,  134,  177,  136,  140,  131,  133,  132,  141,
      177,  177,    4,  177,  177,  177,  177,  177,  177,   12,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,   55,   62,  177,  177,  177,  177,  177,
      177,  177,  177,   76,  177,  177,  177,   83,  177,   85,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  135,    0,  180,    1,    2,
        3,    5,    6,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,   54,    0,    0,
       58,    0,   64,    0,    0,    0,    0,    0,    0,    0,
       72,   73,    0,   75,    0,   78,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,  104,    0,    0,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  147,    0,    0,
      148,  145,    1,    2,    3,    5,    6,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   32,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   46,  143,  143,  143,
      143,   54,  143,  143,   58,  143,   64,  143,  143,  143,
      143,  143,  143,  143,   72,   73,  143,   75,  143,   78,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,   99,  143,
      143,  104,  143,  143,  107,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
        0,  160,  167,  155,  167,  152,    0,  158,    1,    2,

        3,    5,    6,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   32,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   46,  151,  151,  151,  151,   54,  151,  151,
       58,  151,   64,  151,  151,  151,  151,  151,  151,  151,
       72,   73,  151,   75,  151,   78,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   99,  151,  151,  104,  151,  151,
      107,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    0,  166,  161,  167,

      167,  152,    0,  164,  173,    0,  173,  177,  177,    1,
        2,    3,    5,    6,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,   32,  177,  177,  177,  177,  177,  177,
      177,  177,  177,   46,  177,  177,  177,  177,   54,  177,
      177,   58,  177,   64,  177,  177,  177,  177,  177,  177,
      177,   72,   73,  177,   75,  177,   78,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,   99,  177,  177,  104,  177,
      177,  107,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,    0,    0,    0,
       10,    0,   13,   14,    0,    0,    0,    0,    0,   23,
        0,    0,   26,    0,    0,    0,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   48,   49,
        0,    0,    0,    0,    0,    0,   61,   63,   41,   66,
       67,   68,    0,   70,    0,    0,    0,    0,    0,   81,
        0,   84,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,   95,   96,    0,    0,  100,    0,    0,    0,
      105,    0,  108,  109,  110,    0,  113,    0,    0,    0,
        0,    0,    0,    0,    0,  123,    0,    0,  125,    0,

      150,    0,  149,  143,  143,  143,   10,  143,   13,   14,
      143,  143,  143,  143,  143,   23,  143,  143,   26,  143,
      143,  143,   31,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   48,   49,  143,  143,  143,  143,
      143,  143,   61,   63,   41,   66,   67,   68,  143,   70,
      143,  143,  143,  143,  143,   81,  143,   84,  143,  143,
      143,  143,   89,  143,  143,  143,  143,  143,   95,   96,
      143,  143,  100,  143,  143,  143,  105,  143,  108,  109,
      110,  143,  113,  143,  143,  143,  143,  143,  143,  143,
      143,  123,  143,  143,  125,  160,  167,    0,  159,  152,

      158,  151,  151,  151,   10,  151,   13,   14,  151,  151,
      151,  151,  151,   23,  151,  151,   26,  151,  151,  151,
       31,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   48,   49,  151,  151,  151,  151,  151,  151,
       61,   63,   41,   66,   67,   68,  151,   70,  151,  151,
      151,  151,  151,   81,  151,   84,  151,  151,  151,  151,
       89,  151,  151,  151,  151,  151,   95,   96,  151,  151,
      100,  151,  151,  151,  105,  151,  108,  109,  110,  151,
      113,  151,  151,  151,  151,  151,  151,  151,  151,  123,
      151,  151,  125,  166,    0,  165,  167,  152,  164,    0,

      173,  177,  177,  177,   10,  177,   13,   14,  177,  177,
      177,  177,  177,   23,  177,  177,   26,  177,  177,  177,
       31,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,   48,   49,  177,  177,  177,  177,  177,  177,
       61,   63,   41,   66,   67,   68,  177,   70,  177,  177,
      177,  177,  177,   81,  177,   84,  177,  177,  177,  177,
       89,  177,  177,  177,  177,  177,   95,   96,  177,  177,
      100,  177,  177,  177,  105,  177,  108,  109,  110,  177,
      113,  177,  177,  177,  177,  177,  177,  177,  177,  123,
      177,  177,  125,    0,    0,    0,    0,    0,   16,   17,

        0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
        0,    0,   38,    0,   40,   39,    0,    0,   50,    0,
       56,    0,   59,    0,    0,    0,   69,   71,    0,    0,
        0,   80,   42,    0,    0,   86,    0,   88,    0,    0,
        0,    0,   94,    0,   98,    0,  102,    0,    0,    0,
      112,    0,  115,    0,    0,    0,  119,  120,    0,  124,
        0,  143,  143,  143,  143,  143,   16,   17,  143,  143,
      143,  143,  143,  143,  143,  143,   34,  143,  143,  143,
       38,  143,   40,   39,  143,  143,   50,  143,   56,  143,
       59,  143,  143,  143,   69,   71,  143,  143,  143,   80,

       42,  143,  143,   86,  143,   88,  143,  143,  143,  143,
       94,  143,   98,  143,  102,  143,  143,  143,  112,  143,
      115,  143,  143,  143,  119,  120,  143,  124,  143,  153,
      159,  151,  151,  151,  151,  151,   16,   17,  151,  151,
      151,  151,  151,  151,  151,  151,   34,  151,  151,  151,
       38,  151,   40,   39,  151,  151,   50,  151,   56,  151,
       59,  151,  151,  151,   69,   71,  151,  151,  151,   80,
       42,  151,  151,   86,  151,   88,  151,  151,  151,  151,
       94,  151,   98,  151,  102,  151,  151,  151,  112,  151,
      115,  151,  151,  151,  119,  120,  151,  124,  151,  165,

      154,    0,  174,  177,  177,  177,  177,  177,   16,   17,
      177,  177,  177,  177,  177,  177,  177,  177,   34,  177,
      177,  177,   38,  177,   40,   39,  177,  177,   50,  177,
       56,  177,   59,  177,  177,  177,   69,   71,  177,  177,
      177,   80,   42,  177,  177,   86,  177,   88,  177,  177,
      177,  177,   94,  177,   98,  177,  102,  177,  177,  177,
      112,  177,  115,  177,  177,  177,  119,  120,  177,  124,
      177,    0,    0,    9,    0,    0,    0,    0,   24,    0,
        0,   28,    0,   33,   35,    0,   37,   43,    0,    0,
        0,   52,    0,   53,   57,    0,    0,    0,    0,   77,

        0,   82,    0,   87,    0,    0,   92,    0,    0,    0,
      103,  106,    0,    0,  116,    0,  118,  121,    0,  126,
      143,  143,    9,  143,  143,  143,  143,   24,  143,  143,
       28,  143,   33,   35,  143,   37,   43,  143,  143,  143,
       52,  143,   53,   57,  143,  143,  143,  143,   77,  143,
       82,  143,   87,  143,  143,   92,  143,  143,  143,  103,
      106,  143,  143,  116,  143,  118,  121,  143,  126,  167,
      151,  151,    9,  151,  151,  151,  151,   24,  151,  151,
       28,  151,   33,   35,  151,   37,   43,  151,  151,  151,
       52,  151,   53,   57,  151,  151,  151,  151,   77,  151,

       82,  151,   87,  151,  151,   92,  151,  151,  151,  103,
      106,  151,  151,  116,  151,  118,  121,  151,  126,  167,
      174,  174,  177,  177,    9,  177,  177,  177,  177,   24,
      177,  177,   28,  177,   33,   35,  177,   37,   43,  177,
      177,  177,   52,  177,   53,   57,  177,  177,  177,  177,
       77,  177,   82,  177,   87,  177,  177,   92,  177,  177,
      177,  103,  106,  177,  177,  116,  177,  118,  121,  177,
      126,    0,    8,   11,   15,    0,   19,    0,    0,    0,
       36,    0,    0,   47,    0,   58,    0,    0,   74,    0,
       30,    0,    0,    0,    0,    0,    0,    0,  117,  122,

      143,    8,   11,   15,  143,   19,  143,  143,  143,   36,
      143,  143,   47,  143,   58,  143,  143,   74,  143,   30,
      143,  143,  143,  143,  143,  143,  143,  117,  122,  156,
      151,    8,   11,   15,  151,   19,  151,  151,  151,   36,
      151,  151,   47,  151,   58,  151,  151,   74,  151,   30,
      151,  151,  151,  151,  151,  151,  151,  117,  122,  162,
      174,  177,    8,   11,   15,  177,   19,  177,  177,  177,
       36,  177,  177,   47,  177,   58,  177,  177,   74,  177,
       30,  177,  177,  177,  177,  177,  177,  177,  117,  122,
        7,    0,    0,    0,   27,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
      143,  143,  143,   27,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,    7,  151,
      151,  151,   27,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,    7,  177,  177,
      177,   27,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,   18,    0,    0,    0,
        0,    0,   45,    0,   60,    0,   79,   90,    0,   93,
       97,    0,  111,  114,   18,  143,  143,  143,  143,  143,
       45,  143,   60,  143,   79,   90,  143,   93,   97,  143,

      111,  114,   18,  151,  151,  151,  151,  151,   45,  151,
       60,  151,   79,   90,  151,   93,   97,  151,  111,  114,
       18,  177,  177,  177,  177,  177,   45,  177,   60,  177,
       79,   90,  177,   93,   97,  177,  111,  114,    0,    0,
       25,    0,    0,    0,   65,    0,  101,  143,  143,   25,
      143,  143,  143,   65,  143,  101,  151,  151,   25,  151,
      151,  151,   65,  151,  101,  177,  177,   25,  177,  177,
      177,   65,  177,  101,    0,    0,    0,   44,    0,    0,
      143,  143,  143,   44,  143,  143,  151,  151,  151,   44,
      151,  151,  177,  177,  177,   44,  177,  177,   20,   21,

       29,   51,   91,   20,   21,   29,   51,   91,   20,   21,
       29,   51,   91,   20,   21,   29,   51,   91,    0,  143,
      151,  177,    0,  143,  151,  177,    0,  143,  151,  177,
        0,  143,  151,  177,   22,   22,   22,   22,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   19,
       19,   20,   19,   21,   19,   19,   19,   22,   12,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   52,   12,   81,   12,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        3,    1,    5,    1,    4,    1,    4,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    3,    8,    1,    6,    6,    6,    6,    6,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    9
    } ;

static const flex_int16_t yy_base[2149] =
    {   0,
        0,    0,   83,    0,  166,    0,  235,  242,  249,  256,
      277,    0,  829, 4711,  359, 4711,  802, 4711, 4711, 4711,
     4711,  346,  341, 4711,  343,  332,  347,  346,  348,  386,
      394,  332,  354,  385,  343,  416,  410,  441,  486,  425,
      479,  461,  449,  500,  367,  460,  739, 4711, 4711,  532,
      547,  562,  546,  561,  562,  573,  607,  615,  389,  415,
      599,  405,    0,  662,  521,  631,  701,  639,  667,  693,
      694,  710,  421,  725, 4711, 4711, 4711,    0,  772,  779,
      706,  774,  775,  786,  820,  828,  456,  482,  783,  474,
        0,  850,  560,  861,  906,  780,  899,  881,  898,  944,

      514,  909,  972,  979,  696,    0,  393,    0,  763, 4711,
        0,    0,    0,    0,  375, 4711,  480,    0,  415,  940,
      985,  978,  855, 1018, 1026,  502,  545,  966,  535, 1048,
      563, 1059, 1104,  977, 1097, 1079, 1096, 1142,  584, 1008,
     4711,  705,    0,  487, 4711,  779, 4711, 4711, 4711, 4711,
     4711, 4711,  608,  755,  622,  628,  638,  646,  696,  725,
      763, 4711,  763,  833,  823, 1030,  828, 1138,  831,  871,
      884,  890,  936,  973,  997, 1049, 1021, 1089, 1021, 1126,
     1039, 1056, 1075, 1094, 1131, 1145, 4711, 1133, 1141, 1162,
     1159, 1148, 1154, 1155, 1160, 1180, 1167, 1172, 1189, 1184,

     1182, 1202, 1200, 1190, 1209, 1197, 1198, 1216, 1204, 1219,
     1212, 1200, 1208, 1216, 1214, 1212, 1219, 1228, 1229, 1218,
     1219, 1264, 1237, 1244, 1242, 1253, 1254, 4711, 1285, 1306,
     1315, 1333,    0,    0, 1252, 1280, 1282, 1279, 1285, 1292,
     1302, 1303, 1307,    0, 1305, 1317, 1315, 1318, 1312, 1323,
     1314, 1318, 1324, 1325, 1342, 1345, 1345, 1354, 1340, 1358,
     1339, 1362, 1340, 1344, 1354, 1356, 1376, 1374,    0, 1378,
     1382, 1389, 1389, 1377, 1384, 1382, 1390, 1394, 1419, 1394,
     1407, 1403, 1401, 1428, 1426, 1416, 1433, 1422, 1427, 1446,
     1432, 1451, 1441, 1426, 1435, 1446, 1442, 1441, 1447, 1457,

     1459, 1448, 1449, 1483, 1467, 1464, 1478, 1474, 1484,    0,
     1517, 1536, 1523, 1542, 1549, 1565,    0, 1491, 1541, 1517,
     1532, 1543, 1528, 1536, 1537, 1541,    0, 1542, 1550, 1548,
     1551, 1545, 1568, 1548, 1549, 1553, 1554, 1574, 1581, 1581,
     1594, 1576, 1592, 1574, 1594, 1590, 1596, 1599, 1597, 1614,
     1608,    0, 1612, 1617, 1624, 1618, 1609, 1618, 1626, 1624,
     1642, 1655, 1635, 1649, 1649, 1646, 1664, 1662, 1652, 1672,
     1660, 1661, 1680, 1666, 1685, 1675, 1660, 1669, 1682, 1676,
     1678, 1685, 1695, 1700, 1683, 1683, 1717, 1716, 1712, 1712,
     1717, 1721, 1751, 1773, 1779, 1744, 1786, 1800, 1804, 1808,

        0,  497,    0, 1827,    0,    0,    0,    0,    0,    0,
     1728, 1783, 1744, 1747, 1757, 1762, 1792, 1794, 1795,    0,
     1795, 1803, 1802, 1808, 1798, 1817, 1800, 1801, 1809, 1811,
     1828, 1830, 1829, 1861, 1828, 1854, 1827, 1855, 1830, 1837,
     1837, 1834, 1862, 1863,    0, 1866, 1869, 1878, 1876, 1866,
     1866, 1877, 1872, 1904, 1917, 1886, 1894, 1891, 1890, 1910,
     1914, 1908, 1925, 1913, 1915, 1933, 1921, 1939, 1930, 1918,
     1926, 1936, 1932, 1928, 1934, 1944, 1945, 1932, 1940, 1980,
     1961, 1959, 1968, 1967, 1978,    0,  768, 4711, 4711, 4711,
     4711, 4711, 4711, 1972, 1961, 1987, 1991, 1983, 1994, 1984,

     1986, 1983, 1998, 1986, 2000, 2001, 1988, 2005, 1990, 2014,
     2002, 2018, 4711, 2025, 2012, 2035, 2019, 2022, 2022, 2025,
     2045, 2037, 2027, 2038, 2041, 2033, 2047, 4711, 2052, 2053,
     2069, 2046, 4711, 2041, 2058, 2043, 2060, 2057, 2061, 2069,
     4711, 4711, 2056, 4711, 2080, 4711,  707, 2076, 2081, 2077,
     2073, 2090, 2095, 2097, 2099, 2087, 2087, 2105, 2102, 2108,
     2105, 2102, 2094, 2110, 2102, 2110, 2115, 4711, 2118, 2115,
     4711, 2112, 2113, 2130, 2138, 2137, 2131, 2139, 2137, 2156,
     2144, 2138, 2157, 2148, 2159, 2157, 2184, 2204, 2212, 2218,
     2222,    0,    0,    0,    0,    0,    0, 2179, 2170, 2200,

     2201, 2196, 2213, 2208, 2207, 2204, 2219, 2207, 2221, 2222,
     2209, 2226, 2211, 2232, 2218, 2231,    0, 2238, 2222, 2236,
     2223, 2224, 2224, 2226, 2245, 2239, 2236, 2248, 2254, 2246,
     2267,    0, 2273, 2274, 2286, 2268,    0, 2263, 2280, 2265,
     2281, 2278, 2282, 2289,    0,    0, 2272,    0, 2293,    0,
      702, 2285, 2286, 2280, 2275, 2293, 2298, 2299, 2301, 2291,
     2290, 2314, 2312, 2321, 2329, 2313, 2313, 2329, 2322, 2333,
     2338,    0, 2339, 2336,    0, 2333, 2330, 2346, 2351, 2350,
     2341, 2342, 2344, 2359, 2347, 2341, 2361, 2361, 2363, 2360,
     2406, 2417, 2421, 2425, 2433, 2440, 2444, 2448,    0,    0,

        0,    0,    0, 2366, 2372, 2421, 2442, 2434, 2442, 2436,
     2435, 2431, 2447, 2435, 2449, 2450, 2437, 2454, 2438, 2458,
     2444, 2458,    0, 2463, 2447, 2483, 2448, 2449, 2449, 2451,
     2470, 2460, 2457, 2489, 2491, 2483, 2496,    0, 2501, 2502,
     2513, 2496,    0, 2491, 2508, 2493, 2509, 2506, 2509, 2516,
        0,    0, 2499,    0, 2520,    0,  676, 2510, 2511, 2506,
     2501, 2518, 2524, 2525, 2532, 2520, 2526, 2550, 2553, 2558,
     2557, 2550, 2542, 2557, 2550, 2561, 2566,    0, 2567, 2564,
        0, 2560, 2557, 2572, 2578, 2575, 2566, 2568, 2570, 2585,
     2573, 2567, 2592, 2593, 2592, 2596, 2626, 2634, 2649, 2657,

     2663, 2670, 2674, 2678, 2696, 2684, 2702, 2707,    0,    0,
        0,    0,    0,    0, 2620, 2630, 2680, 2684, 2681, 2693,
     2687, 2686, 2682, 2697, 2688, 2703, 2704, 2692, 2709, 2694,
     2714, 2700, 2713,    0, 2718, 2702, 2720, 2702, 2704, 2704,
     2707, 2732, 2724, 2716, 2731, 2739, 2735, 2748,    0, 2753,
     2754, 2769, 2746,    0, 2743, 2762, 2747, 2764, 2761, 2764,
     2769,    0,    0, 2754,    0, 2775,    0,  671, 2765, 2766,
     2760, 2756, 2773, 2778, 2785, 2786, 2775, 2774, 2794, 2795,
     2806, 2807, 2803, 2795, 2809, 2802, 2815, 2820,    0, 2822,
     2819,    0, 2815, 2813, 2828, 2833, 2830, 2821, 2822, 2826,

     2840, 2828, 2827, 2846, 2837, 2848, 2851, 2837, 2862, 2854,
     4711, 2868, 4711, 4711, 2873, 2855, 2857,  666, 2874, 4711,
     2862, 2878, 4711, 2876, 2874, 2875, 4711, 2874, 2866, 2876,
     2872, 2874, 2890, 2892, 2878, 2879, 2885, 2905, 4711, 4711,
     2891, 2895, 2892, 2895,  699, 2923, 4711, 4711,  656, 4711,
     4711, 4711, 2897, 4711, 2910, 2907, 2912, 2910, 2928, 2915,
     2932, 4711, 2925, 2925, 2926, 2927, 4711, 2939, 2944, 2937,
     2946, 2947, 4711, 4711, 2935, 2935, 4711, 2942, 2944, 2955,
     4711, 2950, 4711, 4711, 2946, 2955, 4711, 2947, 2957, 2954,
     2961, 2963, 2981, 2984, 2982, 4711, 2986, 2977, 4711, 3014,

     3021, 3030, 3034, 2978, 2997, 2985,    0, 3005,    0,    0,
     3010, 3013, 3015,  651, 3030,    0, 3016, 3032,    0, 3029,
     3029, 3030,    0, 3027, 3019, 3029, 3025, 3027, 3043, 3044,
     3030, 3031, 3037, 3052,    0,    0, 3038, 3041, 3038, 3039,
      684, 3051,    0,    0,  646,    0,    0,    0, 3039,    0,
     3052, 3043, 3049, 3069, 3087, 3074, 3089,    0, 3080, 3078,
     3081, 3082,    0, 3092, 3097, 3090, 3099, 3100,    0,    0,
     3088, 3087,    0, 3094, 3096, 3107,    0, 3097,    0,    0,
     3093, 3101,    0, 3093, 3101, 3095, 3102, 3098, 3112, 3121,
     3119,    0, 3144, 3135,    0, 3159, 3165, 3169, 3173, 3178,

     3182, 3157, 3176, 3164,    0, 3179,    0,    0, 3184, 3166,
     3168,  615, 3183,    0, 3169, 3185,    0, 3182, 3180, 3181,
        0, 3178, 3170, 3180, 3176, 3178, 3194, 3195, 3181, 3182,
     3188, 3203,    0,    0, 3189, 3192, 3189, 3190,  644, 3231,
        0,    0,  606,    0,    0,    0, 3219,    0, 3232, 3223,
     3223, 3221, 3239, 3226, 3241,    0, 3232, 3230, 3232, 3233,
        0, 3243, 3248, 3241, 3250, 3251,    0,    0, 3239, 3238,
        0, 3245, 3247, 3258,    0, 3248,    0,    0, 3244, 3252,
        0, 3244, 3252, 3275, 3282, 3278, 3292, 3295, 3293,    0,
     3297, 3288,    0, 3312, 3316, 3320, 3324, 3344, 3328, 3348,

     3366, 3301, 3329, 3317,    0, 3340,    0,    0, 3345, 3327,
     3329,  600, 3345,    0, 3331, 3347,    0, 3345, 3343, 3344,
        0, 3341, 3337, 3349, 3345, 3347, 3363, 3364, 3350, 3351,
     3357, 3372,    0,    0, 3366, 3373, 3370, 3371,  629, 3385,
        0,    0,  594,    0,    0,    0, 3370,    0, 3385, 3386,
     3386, 3384, 3402, 3389, 3404,    0, 3395, 3394, 3395, 3396,
        0, 3406, 3415, 3410, 3419, 3420,    0,    0, 3408, 3407,
        0, 3414, 3416, 3427,    0, 3417,    0,    0, 3421, 3433,
        0, 3425, 3433, 3427, 3435, 3431, 3454, 3457, 3455,    0,
     3459, 3450,    0, 3465, 3462, 3443, 3469, 3451, 4711, 4711,

     3468, 3459, 3473,  576, 3467, 3477, 3468, 3479, 4711, 3465,
     3482, 3468, 4711, 3470,  556, 4711, 3466, 3480, 3500, 3496,
     4711, 3484, 4711, 3500, 3487, 3486, 4711, 4711, 3508, 3515,
     3520, 4711, 4711, 3502, 3509, 4711, 3505, 4711, 3505, 3512,
     3528, 3526, 4711, 3512, 4711, 3515, 4711, 3519, 3533, 3521,
     4711, 3528, 4711, 3538, 3521, 3540, 4711, 3527, 3546, 4711,
     3533, 3556, 3556, 3537, 3562, 3544,    0,    0, 3562, 3553,
     3572,  519, 3564, 3574, 3565, 3576,    0, 3562, 3579, 3565,
        0, 3569,  473,    0, 3565, 3571, 3575, 3590,    0, 3578,
        0, 3594, 3581, 3579,    0,    0, 3601, 3599, 3604,    0,

        0, 3594, 3601,    0, 3600,    0, 3600, 3607, 3621, 3620,
        0, 3606,    0, 3611,    0, 3615, 3629, 3617,    0, 3624,
        0, 3634, 3617, 3636,    0, 3623, 3644,    0, 3623,  543,
     3663, 3646, 3647, 3634, 3659, 3642,    0,    0, 3659, 3658,
     3668,  442, 3663, 3673, 3664, 3675,    0, 3662, 3679, 3665,
        0, 3667,  425,    0, 3663, 3669, 3671, 3686,    0, 3674,
        0, 3690, 3677, 3675,    0,    0, 3697, 3695, 3702,    0,
        0, 3684, 3691,    0, 3691,    0, 3697, 3704, 3719, 3717,
        0, 3709,    0, 3709,    0, 3711, 3728, 3716,    0, 3723,
        0, 3733, 3717, 3736,    0, 3723, 3742,    0, 3721, 3759,

      694, 3782, 3786, 3754, 3751, 3733, 3760, 3742,    0,    0,
     3759, 3754, 3777,  424, 3769, 3781, 3773, 3784,    0, 3773,
     3790, 3776,    0, 3778,  419,    0, 3775, 3781, 3781, 3794,
        0, 3782,    0, 3798, 3785, 3783,    0,    0, 3805, 3802,
     3807,    0,    0, 3790, 3799,    0, 3795,    0, 3796, 3805,
     3819, 3817,    0, 3807,    0, 3817,    0, 3820, 3834, 3824,
        0, 3832,    0, 3842, 3828, 3847,    0, 3834, 3853,    0,
     3833, 3839, 3844, 4711, 3845, 3855, 3852, 3842, 4711, 3845,
     3861, 4711, 3849, 4711, 4711, 3861, 4711, 4711, 3846, 3862,
     3868, 4711, 3871, 4711, 4711, 3859, 3873, 3878, 3872, 4711,

     3884, 4711, 3879, 4711, 3890, 3882, 4711, 3895, 3896, 3896,
     4711, 4711, 3909, 3907, 4711, 3898, 4711, 4711, 3896, 4711,
     3897, 3902,    0, 3903, 3913, 3910, 3900,    0, 3903, 3919,
        0, 3907,    0,    0, 3919,    0,    0, 3904, 3920, 3926,
        0, 3929,    0,    0, 3917, 3931, 3936, 3930,    0, 3942,
        0, 3937,    0, 3948, 3940,    0, 3953, 3954, 3954,    0,
        0, 3967, 3965,    0, 3956,    0,    0, 3954,    0, 3981,
     3959, 3964,    0, 3965, 3975, 3972, 3962,    0, 3966, 3984,
        0, 3972,    0,    0, 3985,    0,    0, 3971, 3985, 3991,
        0, 3997,    0,    0, 3984, 3998, 4003, 3993,    0, 4000,

        0, 3995,    0, 4006, 3998,    0, 4011, 4012, 4012,    0,
        0, 4025, 4023,    0, 4014,    0,    0, 4012,    0, 4043,
     4068, 4072, 4021, 4026,    0, 4028, 4040, 4037, 4028,    0,
     4033, 4049,    0, 4037,    0,    0, 4053,    0,    0, 4048,
     4063, 4069,    0, 4073,    0,    0, 4060, 4074, 4082, 4072,
        0, 4073,    0, 4067,    0, 4079, 4069,    0, 4081, 4082,
     4079,    0,    0, 4092, 4090,    0, 4081,    0,    0, 4078,
        0, 4093, 4711, 4711, 4711, 4079,  374, 4099, 4083, 4084,
     4711, 4105, 4095, 4711, 4095, 4711, 4108, 4104, 4711, 4107,
     4711, 4115,  342, 4117, 4112, 4134, 4124, 4136, 4711, 4711,

     4138,    0,    0,    0, 4124,  338, 4143, 4126, 4127,    0,
     4147, 4135,    0, 4135,    0, 4148, 4140,    0, 4132,    0,
     4139,  332, 4141, 4134, 4156, 4148, 4157,    0,    0, 4200,
     4163,    0,    0,    0, 4149,  315, 4168, 4154, 4166,    0,
     4187, 4175,    0, 4184,    0, 4197, 4189,    0, 4181,    0,
     4189,  218, 4191, 4184, 4205, 4195, 4204,    0,    0, 4218,
     4227, 4210,    0,    0,    0, 4197,  211, 4222, 4204, 4205,
        0, 4225, 4213,    0, 4217,    0, 4236, 4228,    0, 4220,
        0, 4227,  204, 4230, 4224, 4245, 4235, 4244,    0,    0,
     4711, 4230, 4247, 4243, 4711, 4249, 4247, 4253, 4248, 4243,

     4243, 4260, 4252, 4254, 4267, 4276, 4277, 4267, 4280,    0,
     4265, 4286, 4283,    0, 4289, 4287, 4293, 4288, 4284, 4284,
     4302, 4294, 4291, 4308, 4311, 4312, 4302, 4316,    0, 4301,
     4319, 4308,    0, 4315, 4313, 4323, 4318, 4320, 4320, 4337,
     4329, 4330, 4348, 4351, 4352, 4342, 4356,    0, 4342, 4359,
     4350,    0, 4356, 4354, 4360, 4359, 4354, 4354, 4371, 4364,
     4362, 4374, 4377, 4378, 4372, 4386, 4711, 4396, 4389, 4388,
     4385, 4380, 4711, 4403, 4711, 4408, 4711, 4711, 4413, 4711,
     4711, 4397, 4711, 4711,    0, 4415, 4409, 4409, 4406, 4401,
        0, 4420,    0, 4419,    0,    0, 4424,    0,    0, 4413,

        0,    0,    0, 4431, 4424, 4423, 4421, 4416,    0, 4435,
        0, 4434,    0,    0, 4439,    0,    0, 4423,    0,    0,
        0, 4445, 4439, 4444, 4441, 4436,    0, 4455,    0, 4454,
        0,    0, 4463,    0,    0, 4453,    0,    0, 4452, 4460,
     4711, 4460, 4471, 4477, 4711, 4465, 4711, 4460, 4468,    0,
     4468, 4478, 4488,    0, 4476,    0, 4471, 4479,    0, 4480,
     4490, 4495,    0, 4483,    0, 4478, 4486,    0, 4490, 4501,
     4512,    0, 4500,    0, 4510, 4511, 4498, 4711, 4502, 4518,
     4525, 4526, 4513,    0, 4514, 4525, 4532, 4533, 4520,    0,
     4520, 4530, 4542, 4543, 4530,    0, 4530, 4541, 4711, 4534,

     4711, 4711, 4711,    0, 4535,    0,    0,    0,    0, 4536,
        0,    0,    0,    0, 4537,    0,    0,    0, 4537, 4542,
     4544, 4551, 4571, 4572, 4573, 4574, 4567, 4574, 4575, 4576,
     4574, 4576, 4578, 4579, 4711,    0,    0,    0, 4711, 4645,
     4651, 4656, 4665, 4674, 4683,  245, 4692, 4701
    } ;

static const flex_int16_t yy_def[2149] =
    {   0,
     2139,    1, 2139,    3, 2139,    5,    5,    5,    5,    5,
     2139,   11, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2139, 2139, 2139, 2141, 2141, 2141,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,

     2142, 2142, 2141, 2141, 2143, 2144, 2144, 2144, 2144, 2139,
     2144, 2144, 2144, 2144, 2144, 2139, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2139, 2144, 2144, 2139, 2139, 2145, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2146, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2141,
     2141, 2141, 2141, 2141, 2141, 2141, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2141, 2141, 2141, 2141, 2141, 2141, 2143, 2143,

     2144, 2144, 2144, 2147, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2145, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2146, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2139, 2141, 2141, 2141, 2141, 2141, 2139, 2141, 2142, 2142,

     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2139, 2141, 2141, 2141,

     2141, 2141, 2139, 2141, 2143, 2139, 2143, 2147, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2139, 2141, 2139, 2141, 2141,

     2139, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2139, 2139, 2141, 2141, 2141, 2139, 2148,

     2143, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2141,
     2139, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2139,

     2141, 2148, 2148, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2141,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,

     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2141,
     2148, 2148, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2141,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2141,
     2148, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,

     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,

     2140, 2140, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2142, 2142, 2142, 2142,
     2142, 2142, 2142, 2142, 2142, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2139, 2139, 2139, 2139, 2139, 2139,
     2140, 2140, 2140, 2140, 2140, 2140, 2142, 2142, 2142, 2142,
     2142, 2142, 2144, 2144, 2144, 2144, 2144, 2144, 2139, 2139,

     2139, 2139, 2139, 2140, 2140, 2140, 2140, 2140, 2142, 2142,
     2142, 2142, 2142, 2144, 2144, 2144, 2144, 2144, 2139, 2140,
     2142, 2144, 2139, 2140, 2142, 2144, 2139, 2140, 2142, 2144,
     2139, 2140, 2142, 2144, 2139, 2140, 2142, 2144,    0, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139
    } ;

static const flex_int16_t yy_nxt[4795] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   19,   20,
       21,   19,   19,   19,   19,   22,   19,   14,   14,   14,
       14,   19,   23,   24,   25,   19,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   14,   36,   37,   38,
       39,   40,   14,   41,   42,   43,   44,   45,   46,   14,
       14,   14,   14,   14,   14,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   14,   36,   37,   38,   39,
       40,   14,   41,   42,   43,   44,   45,   46,   14,   14,
       47,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   19,   20,   21,   19,   19,   19,   19,   22,   50,

       51,   52,   52,   52,   19,   23,   24,   25,   19,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   63,   69,   70,   71,   72,
       73,   74,   63,   63,   63,   75,   63,   76,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   63,   69,   70,   71,   72,   73,
       74,   63,   63,   47,   48,   63,   14,   15,   16,   15,
       17,   14,   77,   18,   19,   20,   21,   19,   19,   19,
       78,   22,   79,   80,   80,   80,   80,   19,   23,   24,
       25,   19,   81,   82,   83,   84,   85,   86,   87,   88,

       89,   90,   91,   92,   93,   94,   95,   96,   91,   97,
       98,   99,  100,  101,  102,   91,   91,   91,   75,   14,
       14,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   91,   97,   98,
       99,  100,  101,  102,   91,   91,   47,   48,   91,  103,
      592,   78,  104,  104,  104,  104,  103, 1961,   78,  104,
      104,  104,  104,   19, 1950,   19,  105,  105,  105,  105,
       19, 1942,   19,  105,  105,  105,  105,  106,  107,  108,
       15,  109,  110,  106,  111,  112,  113,   21,  114,  114,
      114,  114,  115,  114,  106,  106,  106,  106,  116,  117,

      118,  119,  116,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  106,  130,  131,  132,  133,  134,  106,
      135,  136,  137,  138,  139,  140,  106,  106,  106,  141,
      106,  106,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  106,  130,  131,  132,  133,  134,  106,  135,
      136,  137,  138,  139,  140,  106,  106,  142,  143,  106,
      144,  146,  144,  148,  149,  150,  151,  152, 1931,  153,
      147,  154,  163,  157,  167,  183,  155,  158,  168,  156,
      184,  159,  169,  188,  160, 1923,  164,  161,  170,  165,
      404, 1912,  166,  225,  402, 1904,  144,  162,  153,  405,

      154,  163,  157,  167,  183,  155,  158,  168,  156,  184,
      159,  169,  188,  160,  171,  164,  161,  170,  165,  185,
      177,  166,  225,  172,  186,  173,  162, 1893,  178,  187,
      174,  179,  265,  175,  180,  176,  193,  181,  409,  410,
      182,  266,  189,  171,  194,  270,  190,  307,  185,  177,
      191,  206,  172,  186,  173,  207,  192,  178,  187,  174,
      179,  265,  175,  180,  176,  193,  181,  195,  208,  182,
      266,  189, 1740,  194,  270,  190,  307, 1731, 1688,  191,
      206,  196,  218,  219,  207,  192,  197,  198,  144,  220,
      144,  214,  221,  226,  227, 1679,  195,  208,  402,  348,

      144,  215,  406,  407,  408,  209,  216,  217,  349,  210,
      196,  218,  219,  211,  353,  197,  198,  199,  220,  212,
      214,  221,  226,  227,  213,  200, 1638,  201,  348,  202,
      215,  203,  204,  205,  209,  216,  217,  349,  210,  222,
      390,  223,  211,  353,  224,  441,  199,  275,  212,  229,
      229,  229,  229,  213,  200,  276,  201,  313,  202, 1670,
      203,  204,  205,  230,  231,  231,  231,  231,  222,  390,
      223,  442, 1629,  224,  441,  446,  275,  232,  230,  231,
      231,  231,  231,  235,  276,  236,  358,  239,  245,  451,
      237,  240,  232,  238,  359,  241,  233,  452,  242,  249,

      442,  243,  246,  250,  446,  247,  232,  251,  248, 1589,
      483,  244,  235,  252,  236,  358,  239,  245,  451,  237,
      240,  232,  238,  359,  241,  233,  452,  242,  249, 1580,
      243,  246,  250,  267,  247,  253,  251,  248,  268,  483,
      244,  259,  252,  269,  254,  489,  255, 1536, 1533,  260,
      492,  256,  261, 1511,  257,  262,  258,  277,  263, 1464,
      493,  264,  267, 1461,  253,  288,  494,  268, 1439,  289,
      259,  278,  269,  254,  489,  255,  279,  280,  260,  492,
      256,  261,  290,  257,  262,  258,  277,  263,  271,  493,
      264,  495,  272,  291,  288,  494,  273,  292,  289, 1394,

      278,  293,  274, 1391, 1369,  279,  280,  294, 1720, 1326,
      396,  290,  295,  400,  400,  400,  400,  271, 1323, 1301,
      495,  272,  291,  296, 1252,  273,  292,  300,  301, 1152,
      293,  274,  281,  297,  302,  496,  294,  303,  298,  299,
      282,  295,  283,  318,  284,  319,  285,  286,  287,  304,
      320,  305,  296,  321,  306, 1054,  300,  301,  308,  309,
      958,  281,  297,  302,  496,  497,  303,  298,  299,  282,
      488,  283,  318,  284,  319,  285,  286,  287,  304,  320,
      305,  488,  321,  306,  490,  486,  403,  308,  309,  311,
      311,  311,  311,  313,  497,  314,  315,  315,  315,  315,

      322,  328,  312,  498,  323,  491,  371,  499,  324,  316,
      372,  325,  332,  490,  326,  329,  333,  350,  330,  228,
      334,  331,  351,  373,  327,  145,  335,  352, 2139,  322,
      328,  312,  498,  323,  491,  371,  499,  324,  316,  372,
      325,  332, 2139,  326,  329,  333,  350,  330,  336,  334,
      331,  351,  373,  327,  342,  335,  352,  337, 2139,  338,
     2139, 2139,  343,  502,  339,  344, 2139,  340,  345,  341,
      500,  346, 2139,  505,  347,  509,  354,  336, 2139,  501,
      355,  425, 2139,  342,  356,  426,  337,  360,  338,  427,
      357,  343,  502,  339,  344,  428,  340,  345,  341,  500,

      346,  361,  505,  347,  509,  354,  362,  363,  501,  355,
      425,  379, 2139,  356,  426, 2139,  360,  510,  427,  357,
     2139,  380, 2139, 2139,  428,  374,  381,  382,  511,  375,
      361,  383,  384,  376,  512,  362,  363,  364,  385,  377,
      379,  386,  391,  392,  378,  365,  510,  366, 2139,  367,
      380,  368,  369,  370,  374,  381,  382,  511,  375, 2139,
      383,  384,  376,  512, 2139,  513,  364,  385,  377, 2139,
      386,  391,  392,  378,  365, 2139,  366,  411,  367,  412,
      368,  369,  370,  387,  413,  388, 2139,  414,  389,  393,
      393,  393,  393,  395,  513,  396,  397,  397,  397,  397,

      443,  514,  394,  464,  421,  444,  411,  465,  412,  398,
      445,  415,  387,  413,  388,  416,  414,  389,  422,  417,
      466,  423,  418, 2139,  424,  419, 2139,  515, 2139,  443,
      514,  394,  464,  421,  444,  420,  465, 2139,  398,  445,
      415,  484,  485, 2139,  416, 2139,  429,  422,  417,  466,
      423,  418,  435,  424,  419,  430,  515,  431,  518, 2139,
      436,  521,  432,  437,  420,  433,  438,  434,  503,  439,
      484,  485,  440,  504,  447,  429, 2139,  516,  448,  524,
     2139,  435,  449,  517,  430,  453,  431,  518,  450,  436,
      521,  432,  437,  525,  433,  438,  434,  503,  439,  454,

     2139,  440,  504,  447,  455,  456,  516,  448,  524,  472,
     2139,  449,  517, 2139,  453,  526, 2139,  450, 2139,  473,
     2139, 2139,  525,  467,  474,  475,  519,  468,  454,  476,
      477,  469,  520,  455,  456,  457,  478,  470,  472,  479,
     2139,  527,  471,  458,  526,  459, 2139,  460,  473,  461,
      462,  463,  467,  474,  475,  519,  468, 2139,  476,  477,
      469,  520,  528,  522,  457,  478,  470,  532,  479,  523,
      527,  471,  458,  533,  459,  506,  460,  507,  461,  462,
      463,  480,  508,  481,  529,  534,  482,  539,  535,  530,
      531,  528,  522,  536,  542,  537,  532,  538,  523,  540,

      547,  548,  533,  541,  506,  543,  507,  544,  545,  549,
      480,  508,  481,  529,  534,  482,  539,  535,  530,  531,
      550,  551,  536,  542,  537,  546,  538,  552,  540,  547,
      548,  553,  541,  554,  543,  555,  544,  545,  549,  556,
      557,  558,  559,  561,  564,  562,  560,  563,  565,  550,
      551,  566,  569,  567,  546,  570,  552,  571,  572,  573,
      553,  568,  554,  575,  555,  576,  580,  574,  556,  557,
      558,  559,  561,  564,  562,  560,  563,  565,  581,  582,
      566,  569,  567,  584,  570,  583,  571,  572,  573,  593,
      568,  577,  575,  585,  576,  580,  574, 2139,  578,  586,

      579, 2139,  229,  229,  229,  229, 2139,  581,  582,  594,
      596,  597,  584,  598,  583,  587, 2139, 2139,  593, 2139,
      577, 2139,  585,  588,  588,  588,  588,  578,  586,  579,
      595,  230,  231,  231,  231,  231,  589,  599,  594,  596,
      597,  600,  598,  601,  587,  232,  590,  602,  590,  603,
      591,  591,  591,  591,  604,  606,  607,  609,  613,  595,
      610,  608,  611,  605,  614,  589,  599,  612,  615,  616,
      600,  617,  601,  618,  232,  619,  602,  622,  603,  625,
      628,  629,  620,  604,  606,  607,  609,  613,  621,  610,
      608,  611,  605,  614,  630,  623,  612,  615,  616,  626,

      617,  624,  618,  631,  619,  627,  622,  632,  625,  628,
      629,  620,  636,  633,  637,  639,  643,  621,  634,  635,
      640,  646,  649,  630,  623,  641,  638,  642,  626,  644,
      624,  653,  631,  645,  627,  647,  632,  648,  654,  650,
      655,  636,  633,  637,  639,  643,  656,  634,  635,  640,
      646,  649,  651,  652,  641,  638,  642,  657,  644,  658,
      653,  659,  645,  660,  647,  661,  648,  654,  650,  655,
      662,  665,  663,  668,  669,  656,  664,  666,  670,  667,
      673,  651,  652,  671,  674,  675,  657,  676,  658,  677,
      659,  672,  660,  679,  661,  680,  684,  678,  685,  662,

      665,  663,  668,  669,  688,  664,  666,  670,  667,  673,
      681, 2139,  671,  674,  675,  686,  676,  682,  677,  683,
      672,  687,  679,  689,  680,  684,  678,  685,  699,  690,
     2139, 2139, 2139,  688,  311,  311,  311,  311, 2139,  681,
      693,  693,  693,  693,  686,  702,  682,  312,  683,  691,
      687,  691,  689,  692,  692,  692,  692,  699,  690,  694,
      694,  694,  694,  313,  703,  314,  696,  696,  696,  696,
      700,  704,  695,  705,  702,  706,  312,  707,  697,  316,
      697,  708,  698,  698,  698,  698,  709,  710,  712,  713,
      715,  701,  719,  703,  714,  720,  711,  721,  722,  700,

      704,  695,  705,  723,  706,  716,  707,  717,  316,  724,
      708,  725,  718,  728,  731,  709,  710,  712,  713,  715,
      701,  719,  726,  714,  720,  711,  721,  722,  727,  729,
      734,  732,  723,  735,  716,  730,  717,  733,  724,  736,
      725,  718,  728,  731,  737,  738,  742,  739,  749,  743,
      745,  726,  740,  741,  747,  746,  748,  727,  729,  734,
      732,  744,  735,  750,  730,  752,  733,  751,  736,  753,
      755,  754,  759,  737,  738,  742,  739,  749,  743,  745,
      760,  740,  741,  747,  746,  748,  761,  756,  757,  758,
      744,  762,  750,  763,  752,  764,  751,  765,  753,  755,

      754,  759,  766,  767,  768,  771,  769,  774,  775,  760,
      770,  772,  776,  773,  779,  761,  756,  757,  758,  777,
      762,  780,  763,  781,  764,  782,  765,  778,  785,  786,
      783,  766,  767,  768,  771,  769,  774,  775,  784,  770,
      772,  776,  773,  779,  787,  790,  791,  794,  777,  792,
      780,  788,  781,  789,  782,  793,  778,  785,  786,  783,
      795,  801,  801,  801,  801,  810,  796,  784,  393,  393,
      393,  393,  813,  787,  790,  791,  794, 2139,  792,  814,
      788,  394,  789, 2139,  793,  815,  797, 2139,  797,  795,
      798,  798,  798,  798,  810,  796,  799,  799,  799,  799,

      395,  813,  396,  802,  802,  802,  802,  816,  814,  800,
      394,  806,  811,  803,  815,  803,  398,  804,  804,  804,
      804,  805,  805,  805,  805,  807,  807,  807,  807,  809,
      487,  817,  487,  812,  818,  819,  816,  487,  800,  820,
      821,  811,  823,  826,  830,  398,  824,  831,  487,  822,
     2139,  825,  487,  832,  827,  833,  828,  834,  835,  836,
      817,  829,  812,  818,  819,  839, 2139,  842,  820,  821,
      845,  823,  826,  830,  846,  824,  831,  847,  822,  487,
      825,  848,  832,  827,  833,  828,  834,  835,  836,  837,
      829,  840,  843,  849,  839,  838,  842,  841,  844,  845,

      853,  854,  850,  846,  856,  860,  847,  851,  852,  857,
      848,  861,  858,  855,  859,  862,  863,  864,  837,  865,
      840,  843,  849,  870,  838,  871,  841,  844,  872,  853,
      854,  850,  866,  856,  860,  873,  851,  852,  857,  874,
      861,  858,  855,  859,  862,  863,  864,  875,  865,  867,
      868,  869,  870,  876,  871,  877,  878,  872,  879,  880,
      882,  866,  885,  881,  873,  883,  886,  884,  874,  887,
      890,  891,  892,  888,  893,  894,  875,  896,  867,  868,
      869,  889,  876,  895,  877,  878,  897,  879,  880,  882,
      901,  885,  881,  902,  883,  886,  884,  905,  887,  890,

      891,  892,  888,  893,  894,  903,  896,  898,  908,  909,
      889,  904,  895,  910,  899,  897,  900,  906,  911,  901,
      912,  915,  902,  907,  913,  916,  905,  917,  918,  919,
      920,  921,  922,  923,  903,  924,  898,  908,  909,  914,
      904,  925,  910,  899,  926,  900,  906,  911,  927,  912,
      915,  928,  907,  913,  916,  929,  917,  918,  919,  920,
      921,  922,  923,  932,  924,  930,  933,  934,  914,  935,
      925,  936,  931,  926,  937,  938,  939,  927,  940,  941,
      928,  942,  943,  944,  929,  948,  949,  950,  951,  945,
      952,  953,  932,  954,  930,  933,  934,  955,  935,  946,

      936,  931,  956,  937,  938,  939,  957,  940,  941,  947,
      942,  943,  944,  959,  948,  949,  950,  951,  960,  952,
      953,  961,  954,  962,  963,  964,  955,  965,  946,  966,
      967,  956,  968,  969,  970,  957,  971,  972,  947,  974,
      975,  973,  959,  976,  979,  980,  977,  960,  981,  982,
      961,  983,  962,  963,  964,  978,  965,  984,  966,  967,
      985,  968,  969,  970,  986,  971,  972,  987,  974,  975,
      973,  988,  976,  979,  980,  977,  991,  981,  982,  989,
      983,  990,  992,  993,  994,  995,  984,  996,  998,  985,
      999,  997, 2139,  986, 2139, 2139,  987, 1000, 2139, 1000,

      988, 1001, 1001, 1001, 1001,  991, 2139, 2139,  989, 2139,
      990,  992,  993,  994,  995, 1004,  996,  998, 1005,  999,
      997,  588,  588,  588,  588, 1002, 1006, 1002, 1007, 1003,
     1003, 1003, 1003, 1008,  589,  591,  591,  591,  591,  591,
      591,  591,  591, 1009, 1004, 1011, 1012, 1005, 1013, 1014,
     1015, 1016, 1017, 1018, 1019, 1006, 1020, 1007, 1010, 1021,
     1022, 1023, 1008,  589, 1024, 1025, 1026, 1028, 1029, 1030,
     1031, 1032, 1009, 1027, 1011, 1012, 1033, 1013, 1014, 1015,
     1016, 1017, 1018, 1019, 1034, 1020, 1035, 1010, 1021, 1022,
     1023, 1036, 1037, 1024, 1025, 1026, 1028, 1029, 1030, 1031,

     1032, 1038, 1027, 1039, 1040, 1033, 1041, 1044, 1045, 1046,
     1047, 1048, 1049, 1034, 1050, 1035, 1042, 1051, 1052, 1053,
     1036, 1037, 1055, 1056, 1057, 1058, 1043, 1059, 1060, 1061,
     1038, 1062, 1039, 1040, 1063, 1064, 1044, 1045, 1046, 1047,
     1048, 1049, 1065, 1050, 1066, 1042, 1051, 1052, 1053, 1067,
     1070, 1055, 1056, 1057, 1058, 1043, 1059, 1060, 1061, 1071,
     1062, 1068, 1072, 1063, 1064, 1069, 1073, 1075, 1076, 1077,
     1078, 1065, 1079, 1066, 1080, 1074, 1081, 1082, 1067, 1070,
     1083, 1084, 1085, 1087, 1086, 1088, 1089, 1090, 1071, 1091,
     1068, 1072, 1094, 1095, 1069, 1073, 1075, 1076, 1077, 1078,

     1092, 1079, 1102, 1080, 1093, 1081, 1082, 2139, 2139, 1083,
     1084, 1085, 1087, 1086, 1088, 1089, 1090, 2139, 1091, 2139,
     1103, 1094, 1095, 1096, 1096, 1096, 1096, 2139, 2139, 1092,
     2139, 1102, 2139, 1093,  692,  692,  692,  692, 1097, 1097,
     1097, 1097,  694,  694,  694,  694, 1098, 1104, 1098, 1103,
     1099, 1099, 1099, 1099,  313,  695,  314, 1100, 1100, 1100,
     1100, 1101, 1101, 1101, 1101,  698,  698,  698,  698, 1105,
      316, 1106, 1107, 1109, 1110, 1111, 1104, 1112, 1113, 1114,
     1115, 1116, 1117, 1118,  695, 1119, 1120, 1108, 1121, 1122,
     1123, 2139, 1126, 1127, 1128, 1129, 1130, 1131, 1105,  316,

     1106, 1107, 1109, 1110, 1111, 1132, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1124, 1119, 1120, 1108, 1121, 1122, 1123,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1132, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1124, 1140, 1149, 1150, 1151, 1153, 1154, 1125,
     1155, 1156, 1157, 1141, 1158, 1159, 1133, 1134, 1135, 1136,
     1137, 1138, 1160, 1161, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1162, 1140, 1149, 1150, 1151, 1153, 1154, 1163, 1155,
     1156, 1157, 1141, 1158, 1159, 1164, 1165, 1168, 1169, 1166,
     1170, 1160, 1161, 1167, 1171, 1173, 1174, 1175, 1176, 1177,

     1162, 1178, 1179, 1172, 1180, 1181, 1182, 1163, 1183, 1185,
     1184, 1186, 1187, 1188, 1164, 1165, 1168, 1169, 1166, 1170,
     1189, 1192, 1167, 1171, 1173, 1174, 1175, 1176, 1177, 1193,
     1178, 1179, 1190, 1180, 1181, 1182, 1191, 1183, 1185, 1184,
     1186, 1187, 1188, 1194, 1194, 1194, 1194, 2139, 2139, 1189,
     1192,  798,  798,  798,  798, 2139, 1202, 2139, 1193, 2139,
     2139, 1190, 2139, 2139, 2139, 1191,  799,  799,  799,  799,
     1195, 2139, 1195, 2139, 1196, 1196, 1196, 1196, 1203,  800,
     1197, 1197, 1197, 1197,  395, 1202,  396, 1198, 1198, 1198,
     1198, 1199, 1199, 1199, 1199,  804,  804,  804,  804,  806,

      398, 1200, 1200, 1200, 1200,  806, 1204, 1203,  800,  809,
      487, 1205,  487,  805,  805,  805,  805,  487, 1206, 1201,
     1201, 1201, 1201, 1207, 1209, 1210, 1211, 1212,  487,  398,
     2139, 1213,  487, 1214, 1215, 1204, 1216, 1217, 1208, 1218,
     1205, 1219, 1220, 1221, 1222, 1223, 1226, 1206, 1227, 1228,
     1224, 1229, 1207, 1209, 1210, 1211, 1212, 1225, 1230,  487,
     1213, 1231, 1214, 1215, 1232, 1216, 1217, 1208, 1218, 1233,
     1219, 1220, 1221, 1222, 1223, 1226, 1234, 1227, 1228, 1224,
     1229, 1235, 1236, 1237, 1238, 1242, 1225, 1230, 1243, 1239,
     1231, 1244, 1245, 1232, 1246, 1247, 1248, 1249, 1233, 1240,

     1250, 1251, 1253, 1254, 1255, 1234, 1256, 1257, 1258, 1241,
     1235, 1236, 1237, 1238, 1242, 1259, 1260, 1243, 1261, 1262,
     1244, 1245, 1263, 1246, 1247, 1248, 1249, 1264, 1240, 1250,
     1251, 1253, 1254, 1255, 1265, 1256, 1257, 1258, 1241, 1266,
     1268, 1269, 1270, 1267, 1259, 1260, 1271, 1261, 1262, 1273,
     1274, 1263, 1275, 1276, 1277, 1272, 1264, 1278, 1279, 1280,
     1281, 1282, 1283, 1265, 1284, 1285, 1286, 1287, 1266, 1268,
     1269, 1270, 1267, 1288, 1289, 1271, 1290, 1292, 1273, 1274,
     1291, 1275, 1276, 1277, 1293, 1294, 1278, 1279, 1280, 1281,
     1282, 1283, 1295, 1284, 1285, 1286, 1287, 1296, 1297, 1298,

     1299, 1300, 1288, 1289, 1302, 1290, 1292, 1303, 1304, 1291,
     1305, 1306, 1307, 1293, 1294, 1308, 1309, 1310, 1311, 1312,
     1313, 1295, 1314, 1315, 1316, 1317, 1296, 1297, 1298, 1299,
     1300, 1318, 1319, 1302, 1320, 1321, 1303, 1304, 1322, 1305,
     1306, 1307, 1327, 1328, 1308, 1309, 1310, 1311, 1312, 1313,
     1329, 1314, 1315, 1316, 1317, 1324, 1330, 1331, 1332, 1333,
     1318, 1319, 1334, 1320, 1321, 1335, 1325, 1322, 1336, 1337,
     1338, 1327, 1328, 1339, 1340, 1341, 1342, 1343, 1344, 1329,
     1345, 1346, 1347, 1348, 1324, 1330, 1331, 1332, 1333, 1349,
     1350, 1334, 1351, 1352, 1335, 1325, 1353, 1336, 1337, 1338,

     1354, 1355, 1339, 1340, 1341, 1342, 1343, 1344, 1356, 1345,
     1346, 1347, 1348, 1357, 1358, 1359, 1360, 1361, 1349, 1350,
     2139, 1351, 1352, 2139, 2139, 1353, 1362, 1363, 1364, 1354,
     1355, 1001, 1001, 1001, 1001, 1365, 1366, 1356, 1001, 1001,
     1001, 1001, 1357, 1358, 1359, 1360, 1361, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1362, 1363, 1364, 1367, 1368,
     1370, 1371, 1372, 1373, 1365, 1366, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1392, 1395, 1396, 1397, 1367, 1368, 1370,
     1371, 1372, 1373, 1398, 1393, 1374, 1375, 1376, 1377, 1378,

     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1392, 1395, 1396, 1397, 1399, 1400, 1401, 1402,
     1403, 1404, 1398, 1393, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1399, 1400, 1401, 1402, 1403,
     1404, 1426, 1427, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
     1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
     1422, 1423, 1424, 1425, 1428, 1429, 1096, 1096, 1096, 1096,
     1426, 1427, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431,
     1099, 1099, 1099, 1099,  314, 1100, 1100, 1100, 1100, 1101,

     1101, 1101, 1101, 1428, 1429, 1432, 1433, 1434,  316, 1435,
     1436, 1437, 1438, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1432, 1433, 1434,  316, 1435, 1436,
     1437, 1438, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1460, 1462, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1463, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471,

     1472, 1473, 1474, 1463, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1194,
     1194, 1194, 1194, 1500, 1500, 1500, 1500, 1196, 1196, 1196,
     1196, 1501, 1501, 1501, 1501, 1199, 1199, 1199, 1199, 1504,
     1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,  395, 1505,
     1506, 1198, 1198, 1198, 1198, 1503, 1503, 1503, 1503,  806,
     1507, 1508, 1509, 1510,  398, 1512, 1513, 1514, 1504, 1515,
     1516, 1517, 1518,  805,  805,  805,  805, 1519, 1505, 1506,
     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1507,

     1508, 1509, 1510,  398, 1512, 1513, 1514, 1529, 1515, 1516,
     1517, 1518, 1530, 1531, 1532, 1537, 1519, 1534, 1538, 1520,
     1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1535, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1529, 1546, 1547, 1548,
     1549, 1530, 1531, 1532, 1537, 1550, 1534, 1538, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1535, 1539, 1540,
     1541, 1542, 1543, 1544, 1545, 1560, 1546, 1547, 1548, 1549,
     1561, 1562, 1563, 1564, 1550, 1565, 1566, 1551, 1552, 1553,
     1554, 1555, 1556, 1557, 1558, 1559, 1567, 1568, 1569, 1570,
     1571, 1572, 1573, 1574, 1560, 1575, 1576, 1577, 1578, 1561,

     1562, 1563, 1564, 1579, 1565, 1566, 1581, 1582, 1583, 1584,
     1585, 1586, 1587, 1588, 1590, 1567, 1568, 1569, 1570, 1571,
     1572, 1573, 1574, 1591, 1575, 1576, 1577, 1578, 1594, 1595,
     1596, 1597, 1579, 1598, 1599, 1581, 1582, 1583, 1584, 1585,
     1586, 1587, 1588, 1590, 1592, 1600, 1601, 1602, 1603, 1604,
     1605, 1606, 1591, 1593, 1607, 1608, 1609, 1594, 1595, 1596,
     1597, 1610, 1598, 1599, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1619, 1592, 1600, 1601, 1602, 1603, 1604, 1605,
     1606, 1620, 1621, 1607, 1608, 1609, 1622, 1623, 1624, 1625,
     1610, 1626, 1627, 1611, 1612, 1613, 1614, 1615, 1616, 1617,

     1618, 1619, 1628, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1620, 1621, 1637, 1639, 1640, 1622, 1623, 1624, 1625, 1641,
     1626, 1627, 1643, 1644, 1645, 1646, 1647, 1648, 1642, 1649,
     1650, 1628, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1651,
     1652, 1637, 1639, 1640, 1653, 1654, 1655, 1656, 1641, 1657,
     1658, 1643, 1644, 1645, 1646, 1647, 1648, 1659, 1649, 1650,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1651, 1652,
     1668, 1669, 1671, 1653, 1654, 1655, 1656, 1672, 1657, 1658,
     1431, 1431, 1431, 1431, 1673, 1674, 1659, 1675, 1676, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1677, 1678, 1668,

     1669, 1671, 1680, 1681, 1682, 1683, 1672, 1684, 1685, 1686,
     1687, 1689, 1690, 1673, 1674, 1691, 1675, 1676, 1693, 1694,
     1695, 1696, 1697, 1698, 1692, 1699, 1677, 1678, 1700, 1701,
     1702, 1680, 1681, 1682, 1683, 1703, 1684, 1685, 1686, 1687,
     1689, 1690, 1704, 1705, 1691, 1706, 1707, 1693, 1694, 1695,
     1696, 1697, 1698, 1708, 1699, 1709, 1710, 1700, 1701, 1702,
     1711, 1712, 1713, 1714, 1703, 1715, 1716, 1717, 1718, 1719,
     2139, 1704, 1705, 2139, 1706, 1707, 1500, 1500, 1500, 1500,
     1723, 1724, 1708, 1725, 1709, 1710, 1726, 1727, 1728, 1711,
     1712, 1713, 1714, 1729, 1715, 1716, 1717, 1718, 1719, 1721,

     1721, 1721, 1721, 1722, 1722, 1722, 1722, 1730, 1732, 1723,
     1724, 1733, 1725, 1734, 1735, 1726, 1727, 1728, 1736, 1737,
     1738, 1739, 1729, 1741, 1742, 1743, 1745, 1746, 1747, 1748,
     1749, 1750, 1751, 1752, 1744, 1753, 1730, 1732, 1754, 1755,
     1733, 1756, 1734, 1735, 1757, 1758, 1759, 1736, 1737, 1738,
     1739, 1760, 1741, 1742, 1743, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1761, 1753, 1762, 1763, 1754, 1755, 1764,
     1756, 1765, 1766, 1757, 1758, 1759, 1767, 1768, 1769, 1770,
     1760, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
     1780, 1781, 1761, 1782, 1762, 1763, 1783, 1784, 1764, 1785,

     1765, 1766, 1786, 1787, 1788, 1767, 1768, 1769, 1770, 1789,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1790, 1782, 1791, 1792, 1783, 1784, 1793, 1785, 1794,
     1795, 1786, 1787, 1788, 1796, 1797, 1798, 1799, 1789, 1800,
     1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
     1790, 1811, 1791, 1792, 1812, 1813, 1793, 1814, 1794, 1795,
     1815, 1816, 1817, 1796, 1797, 1798, 1799, 1818, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1819,
     1811, 1820, 1821, 1812, 1813, 1822, 1814, 1823, 1824, 1815,
     1816, 1817, 1825, 1826, 1827, 1828, 1818, 1829, 1830, 1830,

     1830, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1819, 1837,
     1820, 1821, 1838, 1839, 1822, 1840, 1823, 1824, 1841, 1842,
     1843, 1825, 1826, 1827, 1828, 1844, 1829, 1845, 1846, 1847,
     1848, 1831, 1832, 1833, 1834, 1835, 1836, 1849, 1837, 1850,
     1851, 1838, 1839, 1852, 1840, 1853, 1854, 1841, 1842, 1843,
     1855, 1856, 1857, 1858, 1844, 1859, 1845, 1846, 1847, 1848,
     1860, 1860, 1860, 1860, 1862, 1863, 1849, 1864, 1850, 1851,
     1865, 1866, 1852, 1867, 1853, 1854, 1868, 1869, 1870, 1855,
     1856, 1857, 1858, 1871, 1859, 1721, 1721, 1721, 1721, 1861,
     1861, 1861, 1861, 1862, 1863, 1872, 1864, 1873, 1874, 1865,

     1866, 1875, 1867, 1876, 1877, 1868, 1869, 1870, 1878, 1879,
     1880, 1881, 1871, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
     1889, 1890, 1891, 1892, 1872, 1894, 1873, 1874, 1895, 1896,
     1875, 1897, 1876, 1877, 1898, 1899, 1900, 1878, 1879, 1880,
     1881, 1901, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
     1890, 1891, 1892, 1902, 1894, 1903, 1905, 1895, 1896, 1906,
     1897, 1907, 1908, 1898, 1899, 1900, 1909, 1910, 1911, 1913,
     1901, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
     1924, 1925, 1902, 1926, 1903, 1905, 1927, 1928, 1906, 2139,
     1907, 1908, 1929, 1930, 1932, 1909, 1910, 1911, 1913, 1933,

     1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1924,
     1925, 1934, 1926, 1935, 1936, 1927, 1928, 1830, 1830, 1830,
     1830, 1929, 1930, 1932, 1937, 1938, 1939, 1940, 1933, 1941,
     1943, 1944, 1945, 1946, 1947, 1860, 1860, 1860, 1860, 1948,
     1934, 1949, 1935, 1936, 1721, 1721, 1721, 1721, 1951, 1952,
     1953, 1954, 1955, 1937, 1938, 1939, 1940, 1956, 1941, 1943,
     1944, 1945, 1946, 1947, 1957, 1958, 1959, 1960, 1948, 1962,
     1949, 1963, 1964, 1965, 1966, 1967, 1968, 1951, 1952, 1953,
     1954, 1955, 1970, 1971, 1972, 1973, 1956, 1974, 1975, 1976,
     1977, 1978, 1969, 1957, 1958, 1959, 1960, 1979, 1962, 1980,

     1963, 1964, 1965, 1966, 1967, 1968, 1981, 1982, 1983, 1984,
     1985, 1970, 1971, 1972, 1973, 1986, 1974, 1975, 1976, 1977,
     1978, 1969, 1988, 1989, 1990, 1991, 1979, 1992, 1980, 1993,
     1994, 1987, 1995, 1996, 1997, 1981, 1982, 1983, 1984, 1985,
     1998, 1999, 2000, 2001, 1986, 2002, 2003, 2006, 2004, 2007,
     2008, 1988, 1989, 1990, 1991, 2009, 1992, 2010, 1993, 1994,
     1987, 1995, 1996, 1997, 2005, 2011, 2012, 2013, 2014, 1998,
     1999, 2000, 2001, 2015, 2002, 2003, 2006, 2004, 2007, 2008,
     2016, 2017, 2018, 2019, 2009, 2020, 2010, 2021, 2022, 2024,
     2025, 2026, 2027, 2005, 2011, 2012, 2013, 2014, 2028, 2029,

     2030, 2031, 2015, 2032, 2023, 2033, 2034, 2035, 2036, 2016,
     2017, 2018, 2019, 2037, 2020, 2038, 2021, 2022, 2024, 2025,
     2026, 2027, 2039, 2040, 2041, 2042, 2043, 2028, 2029, 2030,
     2031, 2044, 2032, 2023, 2033, 2034, 2035, 2036, 2045, 2046,
     2047, 2048, 2037, 2049, 2038, 2050, 2051, 2052, 2053, 2054,
     2055, 2039, 2040, 2041, 2042, 2043, 2056, 2057, 2058, 2059,
     2044, 2060, 2061, 2062, 2063, 2064, 2065, 2045, 2046, 2047,
     2048, 2066, 2049, 2067, 2050, 2051, 2052, 2053, 2054, 2055,
     2068, 2069, 2070, 2071, 2072, 2056, 2057, 2058, 2059, 2073,
     2060, 2061, 2062, 2063, 2064, 2065, 2074, 2075, 2076, 2077,

     2066, 2078, 2067, 2079, 2080, 2081, 2082, 2083, 2084, 2068,
     2069, 2070, 2071, 2072, 2085, 2086, 2087, 2088, 2073, 2089,
     2090, 2091, 2092, 2093, 2094, 2074, 2075, 2076, 2077, 2095,
     2078, 2096, 2079, 2080, 2081, 2082, 2083, 2084, 2097, 2098,
     2099, 2100, 2101, 2085, 2086, 2087, 2088, 2102, 2089, 2090,
     2091, 2092, 2093, 2094, 2103, 2104, 2105, 2106, 2095, 2107,
     2096, 2108, 2109, 2110, 2111, 2112, 2113, 2097, 2098, 2099,
     2100, 2101, 2114, 2115, 2116, 2117, 2102, 2118, 2119, 2120,
     2121, 2122, 2123, 2103, 2104, 2105, 2106, 2124, 2107, 2125,
     2108, 2109, 2110, 2111, 2112, 2113, 2126, 2127, 2128, 2129,

     2130, 2114, 2115, 2116, 2117, 2131, 2118, 2119, 2120, 2121,
     2122, 2123, 2132, 2133, 2134, 2135, 2124, 2136, 2125, 2137,
     2138, 2139, 2139, 2139, 2139, 2126, 2127, 2128, 2129, 2130,
     2139, 2139, 2139, 2139, 2131, 2139, 2139, 2139, 2139, 2139,
     2139, 2132, 2133, 2134, 2135, 2139, 2136, 2139, 2137, 2138,
      234, 2139,  234,  234,  310, 2139,  310, 2139,  310,  317,
      317,  317,  317,  317,  317,  399, 2139,  399,  399,  399,
      399,  399,  399,  399,  401, 2139, 2139,  401,  401,  401,
     2139,  401,  401,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  808,  808,  808,  808,  808,  808,  808,  808,

      808, 1502, 2139, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
       13, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139

    } ;

static const flex_int16_t yy_chk[4795] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     2146,    7,    7,    7,    7,    7,    8, 1883,    8,    8,
        8,    8,    8,    9, 1867,    9,    9,    9,    9,    9,
       10, 1852,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15,   22,   15,   23,   23,   23,   25,   25, 1836,   26,
       22,   26,   28,   27,   29,   32,   26,   27,   29,   26,
       33,   27,   29,   35,   27, 1822,   28,   27,   29,   28,
      115, 1806,   28,   45,  107, 1793,  107,   27,   26,  115,

       26,   28,   27,   29,   32,   26,   27,   29,   26,   33,
       27,   29,   35,   27,   30,   28,   27,   29,   28,   34,
       31,   28,   45,   30,   34,   30,   27, 1777,   31,   34,
       30,   31,   59,   30,   31,   30,   37,   31,  119,  119,
       31,   60,   36,   30,   37,   62,   36,   73,   34,   31,
       36,   40,   30,   34,   30,   40,   36,   31,   34,   30,
       31,   59,   30,   31,   30,   37,   31,   38,   40,   31,
       60,   36, 1525,   37,   62,   36,   73, 1514, 1453,   36,
       40,   38,   43,   43,   40,   36,   38,   38,  144,   43,
      144,   42,   43,   46,   46, 1442,   38,   40,  402,   87,

      402,   42,  117,  117,  117,   41,   42,   42,   88,   41,
       38,   43,   43,   41,   90,   38,   38,   39,   43,   41,
       42,   43,   46,   46,   41,   39, 1383,   39,   87,   39,
       42,   39,   39,   39,   41,   42,   42,   88,   41,   44,
      101,   44,   41,   90,   44,  126,   39,   65,   41,   50,
       50,   50,   50,   41,   39,   65,   39, 1430,   39, 1430,
       39,   39,   39,   51,   51,   51,   51,   51,   44,  101,
       44,  127, 1372,   44,  126,  129,   65,   51,   52,   52,
       52,   52,   52,   53,   65,   53,   93,   54,   55,  131,
       53,   54,   52,   53,   93,   54,   51,  131,   54,   56,

      127,   54,   55,   56,  129,   55,   51,   56,   55, 1315,
      139,   54,   53,   56,   53,   93,   54,   55,  131,   53,
       54,   52,   53,   93,   54,   51,  131,   54,   56, 1304,
       54,   55,   56,   61,   55,   57,   56,   55,   61,  139,
       54,   58,   56,   61,   57,  153,   57, 1243, 1239,   58,
      155,   57,   58, 1212,   57,   58,   57,   66,   58, 1143,
      156,   58,   61, 1139,   57,   68,  157,   61, 1112,   68,
       58,   66,   61,   57,  153,   57,   66,   66,   58,  155,
       57,   58,   68,   57,   58,   57,   66,   58,   64,  156,
       58,  158,   64,   69,   68,  157,   64,   69,   68, 1045,

       66,   69,   64, 1041, 1014,   66,   66,   69, 1501,  949,
     1501,   68,   69,  105,  105,  105,  105,   64,  945,  918,
      158,   64,   69,   70,  868,   64,   69,   71,   71,  757,
       69,   64,   67,   70,   71,  159,   69,   71,   70,   70,
       67,   69,   67,   81,   67,   81,   67,   67,   67,   72,
       81,   72,   70,   81,   72,  651,   71,   71,   74,   74,
      547,   67,   70,   71,  159,  160,   71,   70,   70,   67,
      487,   67,   81,   67,   81,   67,   67,   67,   72,   81,
       72,  146,   81,   72,  154,  142,  109,   74,   74,   79,
       79,   79,   79,   80,  160,   80,   80,   80,   80,   80,

       82,   83,   79,  161,   82,  154,   96,  163,   82,   80,
       96,   82,   84,  154,   82,   83,   84,   89,   83,   47,
       84,   83,   89,   96,   82,   17,   84,   89,   13,   82,
       83,   79,  161,   82,  154,   96,  163,   82,   80,   96,
       82,   84,    0,   82,   83,   84,   89,   83,   85,   84,
       83,   89,   96,   82,   86,   84,   89,   85,    0,   85,
        0,    0,   86,  165,   85,   86,    0,   85,   86,   85,
      164,   86,    0,  167,   86,  169,   92,   85,    0,  164,
       92,  123,    0,   86,   92,  123,   85,   94,   85,  123,
       92,   86,  165,   85,   86,  123,   85,   86,   85,  164,

       86,   94,  167,   86,  169,   92,   94,   94,  164,   92,
      123,   98,    0,   92,  123,    0,   94,  170,  123,   92,
        0,   98,    0,    0,  123,   97,   98,   98,  171,   97,
       94,   99,   99,   97,  172,   94,   94,   95,   99,   97,
       98,   99,  102,  102,   97,   95,  170,   95,    0,   95,
       98,   95,   95,   95,   97,   98,   98,  171,   97,    0,
       99,   99,   97,  172,    0,  173,   95,   99,   97,    0,
       99,  102,  102,   97,   95,    0,   95,  120,   95,  120,
       95,   95,   95,  100,  120,  100,    0,  120,  100,  103,
      103,  103,  103,  104,  173,  104,  104,  104,  104,  104,

      128,  174,  103,  134,  122,  128,  120,  134,  120,  104,
      128,  121,  100,  120,  100,  121,  120,  100,  122,  121,
      134,  122,  121,    0,  122,  121,    0,  175,    0,  128,
      174,  103,  134,  122,  128,  121,  134,    0,  104,  128,
      121,  140,  140,    0,  121,    0,  124,  122,  121,  134,
      122,  121,  125,  122,  121,  124,  175,  124,  177,    0,
      125,  179,  124,  125,  121,  124,  125,  124,  166,  125,
      140,  140,  125,  166,  130,  124,    0,  176,  130,  181,
        0,  125,  130,  176,  124,  132,  124,  177,  130,  125,
      179,  124,  125,  182,  124,  125,  124,  166,  125,  132,

        0,  125,  166,  130,  132,  132,  176,  130,  181,  136,
        0,  130,  176,    0,  132,  183,    0,  130,    0,  136,
        0,    0,  182,  135,  136,  136,  178,  135,  132,  137,
      137,  135,  178,  132,  132,  133,  137,  135,  136,  137,
        0,  184,  135,  133,  183,  133,    0,  133,  136,  133,
      133,  133,  135,  136,  136,  178,  135,    0,  137,  137,
      135,  178,  185,  180,  133,  137,  135,  188,  137,  180,
      184,  135,  133,  189,  133,  168,  133,  168,  133,  133,
      133,  138,  168,  138,  186,  189,  138,  192,  190,  186,
      186,  185,  180,  190,  194,  191,  188,  191,  180,  193,

      197,  197,  189,  193,  168,  195,  168,  195,  196,  198,
      138,  168,  138,  186,  189,  138,  192,  190,  186,  186,
      199,  200,  190,  194,  191,  196,  191,  201,  193,  197,
      197,  202,  193,  203,  195,  204,  195,  196,  198,  205,
      206,  207,  208,  209,  211,  210,  208,  210,  212,  199,
      200,  213,  215,  214,  196,  216,  201,  217,  218,  219,
      202,  214,  203,  220,  204,  221,  223,  219,  205,  206,
      207,  208,  209,  211,  210,  208,  210,  212,  224,  225,
      213,  215,  214,  226,  216,  225,  217,  218,  219,  235,
      214,  222,  220,  227,  221,  223,  219,    0,  222,  227,

      222,    0,  229,  229,  229,  229,    0,  224,  225,  236,
      237,  238,  226,  239,  225,  229,    0,    0,  235,    0,
      222,    0,  227,  230,  230,  230,  230,  222,  227,  222,
      236,  231,  231,  231,  231,  231,  230,  240,  236,  237,
      238,  241,  239,  242,  229,  231,  232,  243,  232,  245,
      232,  232,  232,  232,  246,  247,  248,  249,  251,  236,
      250,  248,  250,  246,  252,  230,  240,  250,  253,  254,
      241,  255,  242,  256,  231,  257,  243,  259,  245,  261,
      263,  264,  258,  246,  247,  248,  249,  251,  258,  250,
      248,  250,  246,  252,  265,  260,  250,  253,  254,  262,

      255,  260,  256,  266,  257,  262,  259,  267,  261,  263,
      264,  258,  270,  268,  271,  272,  274,  258,  268,  268,
      272,  276,  278,  265,  260,  273,  271,  273,  262,  275,
      260,  280,  266,  275,  262,  277,  267,  277,  281,  278,
      282,  270,  268,  271,  272,  274,  283,  268,  268,  272,
      276,  278,  279,  279,  273,  271,  273,  284,  275,  285,
      280,  286,  275,  287,  277,  288,  277,  281,  278,  282,
      289,  291,  290,  293,  294,  283,  290,  292,  295,  292,
      297,  279,  279,  296,  298,  299,  284,  300,  285,  301,
      286,  296,  287,  302,  288,  303,  305,  301,  306,  289,

      291,  290,  293,  294,  308,  290,  292,  295,  292,  297,
      304,    0,  296,  298,  299,  307,  300,  304,  301,  304,
      296,  307,  302,  309,  303,  305,  301,  306,  318,  309,
        0,    0,    0,  308,  311,  311,  311,  311,    0,  304,
      313,  313,  313,  313,  307,  320,  304,  311,  304,  312,
      307,  312,  309,  312,  312,  312,  312,  318,  309,  314,
      314,  314,  314,  315,  321,  315,  315,  315,  315,  315,
      319,  322,  314,  323,  320,  324,  311,  325,  316,  315,
      316,  326,  316,  316,  316,  316,  328,  329,  330,  331,
      332,  319,  334,  321,  331,  335,  329,  336,  337,  319,

      322,  314,  323,  338,  324,  333,  325,  333,  315,  339,
      326,  340,  333,  342,  344,  328,  329,  330,  331,  332,
      319,  334,  341,  331,  335,  329,  336,  337,  341,  343,
      346,  345,  338,  347,  333,  343,  333,  345,  339,  348,
      340,  333,  342,  344,  349,  350,  353,  351,  357,  354,
      355,  341,  351,  351,  356,  355,  356,  341,  343,  346,
      345,  354,  347,  358,  343,  359,  345,  358,  348,  360,
      361,  360,  363,  349,  350,  353,  351,  357,  354,  355,
      364,  351,  351,  356,  355,  356,  365,  361,  362,  362,
      354,  366,  358,  367,  359,  368,  358,  369,  360,  361,

      360,  363,  370,  371,  372,  374,  373,  376,  377,  364,
      373,  375,  378,  375,  380,  365,  361,  362,  362,  379,
      366,  381,  367,  382,  368,  383,  369,  379,  385,  386,
      384,  370,  371,  372,  374,  373,  376,  377,  384,  373,
      375,  378,  375,  380,  387,  388,  389,  391,  379,  390,
      381,  387,  382,  387,  383,  390,  379,  385,  386,  384,
      392,  396,  396,  396,  396,  411,  392,  384,  393,  393,
      393,  393,  413,  387,  388,  389,  391,    0,  390,  414,
      387,  393,  387,    0,  390,  415,  394,    0,  394,  392,
      394,  394,  394,  394,  411,  392,  395,  395,  395,  395,

      397,  413,  397,  397,  397,  397,  397,  416,  414,  395,
      393,  400,  412,  398,  415,  398,  397,  398,  398,  398,
      398,  399,  399,  399,  399,  400,  400,  400,  400,  404,
      404,  417,  404,  412,  418,  419,  416,  404,  395,  421,
      422,  412,  423,  425,  427,  397,  424,  428,  404,  422,
        0,  424,  404,  429,  426,  430,  426,  431,  432,  433,
      417,  426,  412,  418,  419,  435,    0,  437,  421,  422,
      439,  423,  425,  427,  440,  424,  428,  441,  422,  404,
      424,  442,  429,  426,  430,  426,  431,  432,  433,  434,
      426,  436,  438,  443,  435,  434,  437,  436,  438,  439,

      446,  447,  444,  440,  448,  450,  441,  444,  444,  448,
      442,  451,  449,  447,  449,  451,  452,  453,  434,  453,
      436,  438,  443,  456,  434,  457,  436,  438,  458,  446,
      447,  444,  454,  448,  450,  459,  444,  444,  448,  460,
      451,  449,  447,  449,  451,  452,  453,  461,  453,  454,
      455,  455,  456,  462,  457,  463,  464,  458,  465,  466,
      467,  454,  469,  466,  459,  468,  470,  468,  460,  471,
      473,  474,  475,  472,  476,  477,  461,  478,  454,  455,
      455,  472,  462,  477,  463,  464,  479,  465,  466,  467,
      481,  469,  466,  482,  468,  470,  468,  484,  471,  473,

      474,  475,  472,  476,  477,  483,  478,  480,  494,  495,
      472,  483,  477,  496,  480,  479,  480,  485,  497,  481,
      498,  500,  482,  485,  499,  501,  484,  502,  503,  504,
      505,  506,  507,  508,  483,  509,  480,  494,  495,  499,
      483,  510,  496,  480,  511,  480,  485,  497,  512,  498,
      500,  514,  485,  499,  501,  515,  502,  503,  504,  505,
      506,  507,  508,  517,  509,  516,  518,  519,  499,  520,
      510,  521,  516,  511,  522,  523,  524,  512,  525,  526,
      514,  527,  529,  530,  515,  532,  534,  535,  536,  531,
      537,  538,  517,  539,  516,  518,  519,  540,  520,  531,

      521,  516,  543,  522,  523,  524,  545,  525,  526,  531,
      527,  529,  530,  548,  532,  534,  535,  536,  549,  537,
      538,  550,  539,  551,  552,  553,  540,  554,  531,  555,
      556,  543,  557,  558,  559,  545,  560,  561,  531,  562,
      563,  561,  548,  564,  566,  567,  565,  549,  569,  570,
      550,  572,  551,  552,  553,  565,  554,  573,  555,  556,
      574,  557,  558,  559,  575,  560,  561,  576,  562,  563,
      561,  577,  564,  566,  567,  565,  579,  569,  570,  578,
      572,  578,  580,  581,  582,  583,  573,  584,  585,  574,
      586,  584,    0,  575,    0,    0,  576,  587,    0,  587,

      577,  587,  587,  587,  587,  579,    0,    0,  578,    0,
      578,  580,  581,  582,  583,  598,  584,  585,  599,  586,
      584,  588,  588,  588,  588,  589,  600,  589,  601,  589,
      589,  589,  589,  602,  588,  590,  590,  590,  590,  591,
      591,  591,  591,  603,  598,  604,  605,  599,  606,  607,
      608,  609,  610,  611,  612,  600,  613,  601,  603,  614,
      615,  616,  602,  588,  618,  619,  620,  621,  622,  623,
      624,  625,  603,  620,  604,  605,  626,  606,  607,  608,
      609,  610,  611,  612,  627,  613,  628,  603,  614,  615,
      616,  629,  630,  618,  619,  620,  621,  622,  623,  624,

      625,  631,  620,  633,  634,  626,  635,  636,  638,  639,
      640,  641,  642,  627,  643,  628,  635,  644,  647,  649,
      629,  630,  652,  653,  654,  655,  635,  656,  657,  658,
      631,  659,  633,  634,  660,  661,  636,  638,  639,  640,
      641,  642,  662,  643,  663,  635,  644,  647,  649,  664,
      666,  652,  653,  654,  655,  635,  656,  657,  658,  667,
      659,  665,  668,  660,  661,  665,  669,  670,  671,  673,
      674,  662,  676,  663,  677,  669,  678,  679,  664,  666,
      680,  681,  682,  683,  682,  684,  685,  686,  667,  687,
      665,  668,  689,  690,  665,  669,  670,  671,  673,  674,

      688,  676,  704,  677,  688,  678,  679,    0,    0,  680,
      681,  682,  683,  682,  684,  685,  686,    0,  687,    0,
      705,  689,  690,  691,  691,  691,  691,    0,    0,  688,
        0,  704,    0,  688,  692,  692,  692,  692,  693,  693,
      693,  693,  694,  694,  694,  694,  695,  706,  695,  705,
      695,  695,  695,  695,  696,  694,  696,  696,  696,  696,
      696,  697,  697,  697,  697,  698,  698,  698,  698,  707,
      696,  708,  709,  710,  711,  712,  706,  713,  714,  715,
      716,  717,  718,  719,  694,  720,  721,  709,  722,  724,
      725,    0,  727,  728,  729,  730,  731,  732,  707,  696,

      708,  709,  710,  711,  712,  733,  713,  714,  715,  716,
      717,  718,  719,  726,  720,  721,  709,  722,  724,  725,
      726,  727,  728,  729,  730,  731,  732,  734,  735,  736,
      737,  739,  740,  741,  733,  742,  744,  745,  746,  747,
      748,  749,  726,  741,  750,  753,  755,  758,  759,  726,
      760,  761,  762,  741,  763,  764,  734,  735,  736,  737,
      739,  740,  765,  766,  742,  744,  745,  746,  747,  748,
      749,  767,  741,  750,  753,  755,  758,  759,  768,  760,
      761,  762,  741,  763,  764,  769,  770,  772,  773,  771,
      774,  765,  766,  771,  775,  776,  777,  779,  780,  782,

      767,  783,  784,  775,  785,  786,  787,  768,  788,  789,
      788,  790,  791,  792,  769,  770,  772,  773,  771,  774,
      793,  795,  771,  775,  776,  777,  779,  780,  782,  796,
      783,  784,  794,  785,  786,  787,  794,  788,  789,  788,
      790,  791,  792,  797,  797,  797,  797,    0,    0,  793,
      795,  798,  798,  798,  798,    0,  815,    0,  796,    0,
        0,  794,    0,    0,    0,  794,  799,  799,  799,  799,
      800,    0,  800,    0,  800,  800,  800,  800,  816,  799,
      801,  801,  801,  801,  802,  815,  802,  802,  802,  802,
      802,  803,  803,  803,  803,  804,  804,  804,  804,  805,

      802,  806,  806,  806,  806,  807,  817,  816,  799,  808,
      808,  818,  808,  805,  805,  805,  805,  808,  819,  807,
      807,  807,  807,  820,  821,  822,  823,  824,  808,  802,
        0,  825,  808,  826,  827,  817,  828,  829,  820,  830,
      818,  831,  832,  833,  835,  836,  838,  819,  839,  840,
      837,  841,  820,  821,  822,  823,  824,  837,  842,  808,
      825,  843,  826,  827,  844,  828,  829,  820,  830,  845,
      831,  832,  833,  835,  836,  838,  846,  839,  840,  837,
      841,  847,  848,  850,  851,  853,  837,  842,  855,  852,
      843,  856,  857,  844,  858,  859,  860,  861,  845,  852,

      864,  866,  869,  870,  871,  846,  872,  873,  874,  852,
      847,  848,  850,  851,  853,  875,  876,  855,  877,  878,
      856,  857,  879,  858,  859,  860,  861,  880,  852,  864,
      866,  869,  870,  871,  881,  872,  873,  874,  852,  882,
      883,  884,  885,  882,  875,  876,  886,  877,  878,  887,
      888,  879,  890,  891,  893,  886,  880,  894,  895,  896,
      897,  898,  899,  881,  899,  900,  901,  902,  882,  883,
      884,  885,  882,  903,  904,  886,  905,  906,  887,  888,
      905,  890,  891,  893,  907,  908,  894,  895,  896,  897,
      898,  899,  909,  899,  900,  901,  902,  910,  912,  915,

      916,  917,  903,  904,  919,  905,  906,  921,  922,  905,
      924,  925,  926,  907,  908,  928,  929,  930,  931,  932,
      933,  909,  934,  935,  936,  937,  910,  912,  915,  916,
      917,  938,  941,  919,  942,  943,  921,  922,  944,  924,
      925,  926,  953,  955,  928,  929,  930,  931,  932,  933,
      956,  934,  935,  936,  937,  946,  957,  958,  959,  960,
      938,  941,  961,  942,  943,  963,  946,  944,  964,  965,
      966,  953,  955,  968,  969,  970,  971,  972,  975,  956,
      976,  978,  979,  980,  946,  957,  958,  959,  960,  982,
      985,  961,  986,  988,  963,  946,  989,  964,  965,  966,

      990,  991,  968,  969,  970,  971,  972,  975,  992,  976,
      978,  979,  980,  993,  994,  995,  997,  998,  982,  985,
        0,  986,  988,    0,    0,  989, 1004, 1005, 1006,  990,
      991, 1000, 1000, 1000, 1000, 1008, 1011,  992, 1001, 1001,
     1001, 1001,  993,  994,  995,  997,  998, 1002, 1002, 1002,
     1002, 1003, 1003, 1003, 1003, 1004, 1005, 1006, 1012, 1013,
     1015, 1017, 1018, 1020, 1008, 1011, 1021, 1022, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037,
     1038, 1039, 1040, 1042, 1049, 1051, 1052, 1012, 1013, 1015,
     1017, 1018, 1020, 1053, 1042, 1021, 1022, 1024, 1025, 1026,

     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038,
     1039, 1040, 1042, 1049, 1051, 1052, 1054, 1055, 1056, 1057,
     1059, 1060, 1053, 1042, 1061, 1062, 1064, 1065, 1066, 1067,
     1068, 1071, 1072, 1074, 1075, 1076, 1078, 1081, 1082, 1084,
     1085, 1086, 1087, 1088, 1089, 1054, 1055, 1056, 1057, 1059,
     1060, 1090, 1091, 1061, 1062, 1064, 1065, 1066, 1067, 1068,
     1071, 1072, 1074, 1075, 1076, 1078, 1081, 1082, 1084, 1085,
     1086, 1087, 1088, 1089, 1093, 1094, 1096, 1096, 1096, 1096,
     1090, 1091, 1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098,
     1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1101,

     1101, 1101, 1101, 1093, 1094, 1102, 1103, 1104, 1100, 1106,
     1109, 1110, 1111, 1113, 1115, 1116, 1118, 1119, 1120, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1135, 1136, 1137, 1138, 1102, 1103, 1104, 1100, 1106, 1109,
     1110, 1111, 1113, 1115, 1116, 1118, 1119, 1120, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135,
     1136, 1137, 1138, 1140, 1147, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1157, 1158, 1140, 1159, 1160, 1162, 1163, 1164,
     1165, 1166, 1169, 1170, 1172, 1173, 1174, 1176, 1179, 1180,
     1182, 1183, 1140, 1147, 1149, 1150, 1151, 1152, 1153, 1154,

     1155, 1157, 1158, 1140, 1159, 1160, 1162, 1163, 1164, 1165,
     1166, 1169, 1170, 1172, 1173, 1174, 1176, 1179, 1180, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1194,
     1194, 1194, 1194, 1195, 1195, 1195, 1195, 1196, 1196, 1196,
     1196, 1197, 1197, 1197, 1197, 1199, 1199, 1199, 1199, 1202,
     1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1198, 1203,
     1204, 1198, 1198, 1198, 1198, 1200, 1200, 1200, 1200, 1201,
     1206, 1209, 1210, 1211, 1198, 1213, 1215, 1216, 1202, 1218,
     1219, 1220, 1222, 1201, 1201, 1201, 1201, 1223, 1203, 1204,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1206,

     1209, 1210, 1211, 1198, 1213, 1215, 1216, 1235, 1218, 1219,
     1220, 1222, 1236, 1237, 1238, 1247, 1223, 1240, 1249, 1224,
     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1240, 1250,
     1251, 1252, 1253, 1254, 1255, 1257, 1235, 1258, 1259, 1260,
     1262, 1236, 1237, 1238, 1247, 1263, 1240, 1249, 1264, 1265,
     1266, 1269, 1270, 1272, 1273, 1274, 1276, 1240, 1250, 1251,
     1252, 1253, 1254, 1255, 1257, 1279, 1258, 1259, 1260, 1262,
     1280, 1282, 1283, 1284, 1263, 1285, 1286, 1264, 1265, 1266,
     1269, 1270, 1272, 1273, 1274, 1276, 1287, 1288, 1289, 1291,
     1292, 1294, 1295, 1296, 1279, 1297, 1298, 1301, 1302, 1280,

     1282, 1283, 1284, 1303, 1285, 1286, 1305, 1306, 1307, 1308,
     1310, 1311, 1312, 1314, 1317, 1287, 1288, 1289, 1291, 1292,
     1294, 1295, 1296, 1318, 1297, 1298, 1301, 1302, 1320, 1322,
     1324, 1325, 1303, 1326, 1329, 1305, 1306, 1307, 1308, 1310,
     1311, 1312, 1314, 1317, 1319, 1330, 1331, 1334, 1335, 1337,
     1339, 1340, 1318, 1319, 1341, 1342, 1344, 1320, 1322, 1324,
     1325, 1346, 1326, 1329, 1348, 1349, 1350, 1352, 1354, 1355,
     1356, 1358, 1359, 1319, 1330, 1331, 1334, 1335, 1337, 1339,
     1340, 1361, 1362, 1341, 1342, 1344, 1363, 1364, 1365, 1366,
     1346, 1369, 1370, 1348, 1349, 1350, 1352, 1354, 1355, 1356,

     1358, 1359, 1371, 1373, 1374, 1375, 1376, 1378, 1379, 1380,
     1361, 1362, 1382, 1385, 1386, 1363, 1364, 1365, 1366, 1387,
     1369, 1370, 1388, 1390, 1392, 1393, 1394, 1397, 1387, 1398,
     1399, 1371, 1373, 1374, 1375, 1376, 1378, 1379, 1380, 1402,
     1403, 1382, 1385, 1386, 1405, 1407, 1408, 1409, 1387, 1410,
     1412, 1388, 1390, 1392, 1393, 1394, 1397, 1414, 1398, 1399,
     1416, 1417, 1418, 1420, 1422, 1423, 1424, 1426, 1402, 1403,
     1427, 1429, 1432, 1405, 1407, 1408, 1409, 1433, 1410, 1412,
     1431, 1431, 1431, 1431, 1434, 1435, 1414, 1436, 1439, 1416,
     1417, 1418, 1420, 1422, 1423, 1424, 1426, 1440, 1441, 1427,

     1429, 1432, 1443, 1444, 1445, 1446, 1433, 1448, 1449, 1450,
     1452, 1455, 1456, 1434, 1435, 1457, 1436, 1439, 1458, 1460,
     1462, 1463, 1464, 1467, 1457, 1468, 1440, 1441, 1469, 1472,
     1473, 1443, 1444, 1445, 1446, 1475, 1448, 1449, 1450, 1452,
     1455, 1456, 1477, 1478, 1457, 1479, 1480, 1458, 1460, 1462,
     1463, 1464, 1467, 1482, 1468, 1484, 1486, 1469, 1472, 1473,
     1487, 1488, 1490, 1492, 1475, 1493, 1494, 1496, 1497, 1499,
        0, 1477, 1478,    0, 1479, 1480, 1500, 1500, 1500, 1500,
     1504, 1505, 1482, 1506, 1484, 1486, 1507, 1508, 1511, 1487,
     1488, 1490, 1492, 1512, 1493, 1494, 1496, 1497, 1499, 1502,

     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1513, 1515, 1504,
     1505, 1516, 1506, 1517, 1518, 1507, 1508, 1511, 1520, 1521,
     1522, 1524, 1512, 1527, 1528, 1529, 1530, 1532, 1534, 1535,
     1536, 1539, 1540, 1541, 1529, 1544, 1513, 1515, 1545, 1547,
     1516, 1549, 1517, 1518, 1550, 1551, 1552, 1520, 1521, 1522,
     1524, 1554, 1527, 1528, 1529, 1530, 1532, 1534, 1535, 1536,
     1539, 1540, 1541, 1556, 1544, 1558, 1559, 1545, 1547, 1560,
     1549, 1562, 1564, 1550, 1551, 1552, 1565, 1566, 1568, 1569,
     1554, 1571, 1572, 1573, 1575, 1576, 1577, 1578, 1580, 1581,
     1583, 1586, 1556, 1589, 1558, 1559, 1590, 1591, 1560, 1593,

     1562, 1564, 1596, 1597, 1598, 1565, 1566, 1568, 1569, 1599,
     1571, 1572, 1573, 1575, 1576, 1577, 1578, 1580, 1581, 1583,
     1586, 1601, 1589, 1603, 1605, 1590, 1591, 1606, 1593, 1608,
     1609, 1596, 1597, 1598, 1610, 1613, 1614, 1616, 1599, 1619,
     1621, 1622, 1624, 1625, 1626, 1627, 1629, 1630, 1632, 1635,
     1601, 1638, 1603, 1605, 1639, 1640, 1606, 1642, 1608, 1609,
     1645, 1646, 1647, 1610, 1613, 1614, 1616, 1648, 1619, 1621,
     1622, 1624, 1625, 1626, 1627, 1629, 1630, 1632, 1635, 1650,
     1638, 1652, 1654, 1639, 1640, 1655, 1642, 1657, 1658, 1645,
     1646, 1647, 1659, 1662, 1663, 1665, 1648, 1668, 1670, 1670,

     1670, 1670, 1671, 1672, 1674, 1675, 1676, 1677, 1650, 1679,
     1652, 1654, 1680, 1682, 1655, 1685, 1657, 1658, 1688, 1689,
     1690, 1659, 1662, 1663, 1665, 1692, 1668, 1695, 1696, 1697,
     1698, 1671, 1672, 1674, 1675, 1676, 1677, 1700, 1679, 1702,
     1704, 1680, 1682, 1705, 1685, 1707, 1708, 1688, 1689, 1690,
     1709, 1712, 1713, 1715, 1692, 1718, 1695, 1696, 1697, 1698,
     1720, 1720, 1720, 1720, 1723, 1724, 1700, 1726, 1702, 1704,
     1727, 1728, 1705, 1729, 1707, 1708, 1731, 1732, 1734, 1709,
     1712, 1713, 1715, 1737, 1718, 1721, 1721, 1721, 1721, 1722,
     1722, 1722, 1722, 1723, 1724, 1740, 1726, 1741, 1742, 1727,

     1728, 1744, 1729, 1747, 1748, 1731, 1732, 1734, 1749, 1750,
     1752, 1754, 1737, 1756, 1757, 1759, 1760, 1761, 1764, 1765,
     1767, 1770, 1772, 1776, 1740, 1778, 1741, 1742, 1779, 1780,
     1744, 1782, 1747, 1748, 1783, 1785, 1787, 1749, 1750, 1752,
     1754, 1788, 1756, 1757, 1759, 1760, 1761, 1764, 1765, 1767,
     1770, 1772, 1776, 1790, 1778, 1792, 1794, 1779, 1780, 1795,
     1782, 1796, 1797, 1783, 1785, 1787, 1798, 1801, 1805, 1807,
     1788, 1808, 1809, 1811, 1812, 1814, 1816, 1817, 1819, 1821,
     1823, 1824, 1790, 1825, 1792, 1794, 1826, 1827, 1795,    0,
     1796, 1797, 1831, 1835, 1837, 1798, 1801, 1805, 1807, 1838,

     1808, 1809, 1811, 1812, 1814, 1816, 1817, 1819, 1821, 1823,
     1824, 1839, 1825, 1841, 1842, 1826, 1827, 1830, 1830, 1830,
     1830, 1831, 1835, 1837, 1844, 1846, 1847, 1849, 1838, 1851,
     1853, 1854, 1855, 1856, 1857, 1860, 1860, 1860, 1860, 1862,
     1839, 1866, 1841, 1842, 1861, 1861, 1861, 1861, 1868, 1869,
     1870, 1872, 1873, 1844, 1846, 1847, 1849, 1875, 1851, 1853,
     1854, 1855, 1856, 1857, 1877, 1878, 1880, 1882, 1862, 1884,
     1866, 1885, 1886, 1887, 1888, 1892, 1893, 1868, 1869, 1870,
     1872, 1873, 1894, 1896, 1897, 1898, 1875, 1899, 1900, 1901,
     1902, 1903, 1893, 1877, 1878, 1880, 1882, 1904, 1884, 1905,

     1885, 1886, 1887, 1888, 1892, 1893, 1906, 1907, 1908, 1909,
     1911, 1894, 1896, 1897, 1898, 1912, 1899, 1900, 1901, 1902,
     1903, 1893, 1913, 1915, 1916, 1917, 1904, 1918, 1905, 1919,
     1920, 1912, 1921, 1922, 1923, 1906, 1907, 1908, 1909, 1911,
     1924, 1925, 1926, 1927, 1912, 1928, 1930, 1932, 1931, 1934,
     1935, 1913, 1915, 1916, 1917, 1936, 1918, 1937, 1919, 1920,
     1912, 1921, 1922, 1923, 1931, 1938, 1939, 1940, 1941, 1924,
     1925, 1926, 1927, 1942, 1928, 1930, 1932, 1931, 1934, 1935,
     1943, 1944, 1945, 1946, 1936, 1947, 1937, 1949, 1950, 1951,
     1953, 1954, 1955, 1931, 1938, 1939, 1940, 1941, 1956, 1957,

     1958, 1959, 1942, 1960, 1950, 1961, 1962, 1963, 1964, 1943,
     1944, 1945, 1946, 1965, 1947, 1966, 1949, 1950, 1951, 1953,
     1954, 1955, 1968, 1969, 1970, 1971, 1972, 1956, 1957, 1958,
     1959, 1974, 1960, 1950, 1961, 1962, 1963, 1964, 1976, 1979,
     1982, 1986, 1965, 1987, 1966, 1988, 1989, 1990, 1992, 1994,
     1997, 1968, 1969, 1970, 1971, 1972, 2000, 2004, 2005, 2006,
     1974, 2007, 2008, 2010, 2012, 2015, 2018, 1976, 1979, 1982,
     1986, 2022, 1987, 2023, 1988, 1989, 1990, 1992, 1994, 1997,
     2024, 2025, 2026, 2028, 2030, 2000, 2004, 2005, 2006, 2033,
     2007, 2008, 2010, 2012, 2015, 2018, 2036, 2039, 2040, 2042,

     2022, 2043, 2023, 2044, 2046, 2048, 2049, 2051, 2052, 2024,
     2025, 2026, 2028, 2030, 2053, 2055, 2057, 2058, 2033, 2060,
     2061, 2062, 2064, 2066, 2067, 2036, 2039, 2040, 2042, 2069,
     2043, 2070, 2044, 2046, 2048, 2049, 2051, 2052, 2071, 2073,
     2075, 2076, 2077, 2053, 2055, 2057, 2058, 2079, 2060, 2061,
     2062, 2064, 2066, 2067, 2080, 2081, 2082, 2083, 2069, 2085,
     2070, 2086, 2087, 2088, 2089, 2091, 2092, 2071, 2073, 2075,
     2076, 2077, 2093, 2094, 2095, 2097, 2079, 2098, 2100, 2105,
     2110, 2115, 2119, 2080, 2081, 2082, 2083, 2120, 2085, 2121,
     2086, 2087, 2088, 2089, 2091, 2092, 2122, 2123, 2124, 2125,

     2126, 2093, 2094, 2095, 2097, 2127, 2098, 2100, 2105, 2110,
     2115, 2119, 2128, 2129, 2130, 2131, 2120, 2132, 2121, 2133,
     2134,    0,    0,    0,    0, 2122, 2123, 2124, 2125, 2126,
        0,    0,    0,    0, 2127,    0,    0,    0,    0,    0,
        0, 2128, 2129, 2130, 2131,    0, 2132,    0, 2133, 2134,
     2140,    0, 2140, 2140, 2141,    0, 2141,    0, 2141, 2142,
     2142, 2142, 2142, 2142, 2142, 2143,    0, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2144,    0,    0, 2144, 2144, 2144,
        0, 2144, 2144, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,

     2147, 2148,    0, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2139

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#define YY_EXIT 1                // YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"


using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32    gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp);
static sal_Int32    gatherName(yyscan_t yyscanner, const sal_Char*);
static sal_Int32    gatherNamePre(yyscan_t yyscanner, const sal_Char* );
static sal_Int32    parseString(yyscan_t yyscanner);

#define SQL_NEW_NODE(text, token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(text, token);

#define SQL_NEW_KEYWORD(token) \
        SQLyyget_lval(yyscanner)->pParseNode=yyget_extra(yyscanner)->NewNode(aEmptyString, SQL_NODE_KEYWORD, (token)); return token;

#define SQL_NEW_INTNUM         SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM      SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE           SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;
#define YY_EXTRA_TYPE OSQLScanner*
#define YY_INPUT(buf,result,max_size) \
{ \
    int c = yyget_extra(yyscanner)->SQLyygetc(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
#define YY_FATAL_ERROR(msg) \
{ \
    yyget_extra(yyscanner)->SQLyyerror(msg); \
}

//
//=============================================================================









#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5




    
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;




    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );



/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    




extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;




	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2140 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2139 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;



do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CUME_DIST);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIME);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DENSE_RANK);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FILTER);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP_CONCAT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUPS);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IIF);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NAV);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOCASE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PERCENT_RANK);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRAGMA);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANK);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RECURSIVE);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RTRIM);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIME);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TOTAL);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WINDOW);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOLLAR);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 132:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 133:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_ARROW);return SQL_ARROW;}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_NOT);return SQL_BITWISE_NOT;}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_OR);return SQL_BITWISE_OR;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_AND);return SQL_BITWISE_AND;}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_LEFT);return SQL_BITWISE_SHIFT_LEFT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(yytext), SQL_NODE_BITWISE_SHIFT_RIGHT);return SQL_BITWISE_SHIFT_RIGHT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{return gatherName(yyscanner, yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 146:
case 147:
case 148:
case 149:
case 150:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{return gatherNamePre(yyscanner,yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 155:
case 156:
case 157:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 158:
case 159:
case 160:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 161:
case 162:
case 163:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 164:
case 165:
case 166:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{return gatherNamePre(yyscanner, yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\"',0); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return gatherString(yyscanner, '`' ,0); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return gatherString(yyscanner, '\'',1); }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']' ,0);}
	YY_BREAK
case 172:
YY_RULE_SETUP
{ return gatherString(yyscanner, '#' ,2);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return yytext[0]; } /*  */
	YY_BREAK
case 176:
YY_RULE_SETUP
{ return gatherString(yyscanner, ']', 0); }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(yyscanner, yytext); }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 179:
YY_RULE_SETUP
{}
	YY_BREAK
case 180:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 181:
YY_RULE_SETUP
{
                Utf8String tmp;
                tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", yytext[0], yytext[0], (uint64_t) yytext[0]);
                YY_FATAL_ERROR(tmp.c_str());
                return SQL_TOKEN_INVALIDSYMBOL;
                }
	YY_BREAK
case 182:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2140 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2140 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2139);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;



	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;


	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}






/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5

  #ifndef YY_FLUSH_BUFFER
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )
  #endif

  #ifndef yytext_ptr
    #define yytext_ptr yytext
  #endif

#endif

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
//------------------------------------------------------------------------------
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }
//------------------------------------------------------------------------------
sal_Int32 parseString (yyscan_t yyscanner)
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    int s = 1;
    while (!checkeof (ch = yyinput (yyscanner)))
    {
    if (ch == delim)
        {
        s++;
        ch = yyinput (yyscanner);
        if (checkeof (ch))
        {
        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        else if (ch == ' ')
        {
        ch = yyinput (yyscanner);
        if (ch == delim)
            {
            sBuffer.append (&delim, 1);
            }
        else
            {
            if (!checkeof (ch))
            unput (ch);

            SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
            return SQL_TOKEN_STRING;
            }
        }
        else if (ch == delim)
        {
        sBuffer.append (&delim, 1);
        continue;
        }
        else
        {
        if (!checkeof (ch))
            unput (ch);

        SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
        return SQL_TOKEN_STRING;
        }
        }
    else
        {
        sBuffer.append (&ch, 1);
        }
    }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }


/*
 * Read SQL string literal
 * Valid strings:
 *  ''  'a string'  'quote '' within string'
 *  ""  "a string"  "quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString(yyscan_t yyscanner, sal_Char delim, sal_Int32 nTyp)
{
    sal_Char ch;
    Utf8String sBuffer;
    sBuffer.reserve(256);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    assert(nTyp == 0 || nTyp == 1 || nTyp == 2);

    while (!checkeof(ch = yyinput(yyscanner)))
    {
        if (ch == delim)
        {
            if ((ch = yyinput(yyscanner)) != delim)
            {
                if (!checkeof(ch))
                    unput(ch);

                switch(nTyp)
                {
                case 0:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_NAME);
                    return SQL_TOKEN_NAME;
                case 1:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                case 2:
                    SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
                    return SQL_TOKEN_ACCESS_DATE;
                }
            }
            else
            {
                sBuffer.append(&ch, 1);
            }

        }
        else if (nTyp == 2 && (ch == '\r' || ch == '\n') )
            break;
        else
        {
            sBuffer.append(&ch, 1);
        }
    }
    YY_FATAL_ERROR("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
}

//------------------------------------------------------------------------------
sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
    {
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
    case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
    case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
    case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
    case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
    case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
    case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
    case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
    case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
    case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
    case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
    case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
    case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
    case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
    case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
    case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
    case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
    case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
    default:
        OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
    }

/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
 //------------------------------------------------------------------------------
sal_Int32 gatherName(yyscan_t yyscanner, const sal_Char* text)
    {
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
        {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
            SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
            return SQL_TOKEN_NAME;
        }
    }

/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them
*/

//------------------------------------------------------------------------------
sal_Int32 gatherNamePre(yyscan_t yyscanner, const sal_Char* text)
{
    sal_Int32 nToken;
    OSL_ENSURE(yyget_extra(yyscanner),"You forgot to set the scanner!");
    IParseContext::InternationalKeyCode eKeyCode = yyget_extra(yyscanner)->getInternationalTokenID(text);
    switch (eKeyCode)
    {
        case IParseContext::KEY_LIKE:
        case IParseContext::KEY_NOT:
        case IParseContext::KEY_NULL:
        case IParseContext::KEY_TRUE:
        case IParseContext::KEY_FALSE:
        case IParseContext::KEY_IS:
        case IParseContext::KEY_BETWEEN:
        case IParseContext::KEY_OR:
        case IParseContext::KEY_AND:
        case IParseContext::KEY_COUNT:
        case IParseContext::KEY_AVG:
        case IParseContext::KEY_MAX:
        case IParseContext::KEY_MIN:
        case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:
        case IParseContext::KEY_ANY:
        case IParseContext::KEY_SOME:
        case IParseContext::KEY_COLLECT:
        case IParseContext::KEY_FUSION:
        case IParseContext::KEY_INTERSECTION:
            nToken = mapEnumToToken(eKeyCode);
            SQL_NEW_KEYWORD(nToken);
            break;
        default:
        // we need a special handling for parameter
            {
            Utf8String sStmt = yyget_extra(yyscanner)->getStatement();
            size_t nLength = strlen(text);
            size_t nPos = yyget_extra(yyscanner)->GetCurrentPos() - nLength - 2;
            if (sStmt[nPos] == ':')
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME);
                nToken = SQL_TOKEN_NAME;
            }
            else
            {
                SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
                nToken = SQL_TOKEN_STRING;
            }
            }
    }
    return nToken;
}

using namespace connectivity;
static bool IN_SQLyyerror;

//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner(Utf8CP rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
    : m_nCurrentPos(0), m_bInternational(bInternational), m_pContext(pContext), yyscanner(nullptr), m_nRule(GetSQLRule()), m_sStatement(rNewStatement)
    {
    IN_SQLyyerror = false;
    yylex_init(&yyscanner);
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YY_FLUSH_BUFFER;
    BEGIN(m_nRule);
    yyset_extra(this, yyscanner);
    }

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
    {
    yylex_destroy(yyscanner);
    }

 //------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
    {
    sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
    }

//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
    {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if(IN_SQLyyerror)
        return;

    IN_SQLyyerror = true;
    OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");
    m_sErrorMessage = fmt;
    if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
    {
        m_sErrorMessage.append(": ");
        Utf8String aError;
        static sal_Int32 BUFFERSIZE = 256;
        static sal_Char* Buffer = 0;
        if(!Buffer)
            Buffer = new sal_Char[BUFFERSIZE];

        sal_Char *s = Buffer;
        sal_Int32 nPos = 1;
        sal_Int32 ch = yytext ? (yytext[0] == 0 ? ' ' : yytext[0]): ' ';
        *s++ = ch;
        while (!checkeof(ch = yyinput(yyscanner)))
        {
            if (ch == ' ')
            {
                if ((ch = yyinput(yyscanner)) != ' ')
                {
                    if (!checkeof(ch))
                        unput(ch);
                }
                *s = '\0';
                aError.assign(Buffer);
                break;
            }
            else
            {
                *s++ = ch;
                if (++nPos == BUFFERSIZE)
                {
                    Utf8String aBuf(Buffer);
                    delete[] Buffer;
                    BUFFERSIZE *=2;
                    Buffer = new sal_Char[BUFFERSIZE];
            for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
                        *Buffer = aBuf[i];
                    s = &Buffer[nPos];
                }
            }
        }

        m_sErrorMessage += aError;
        delete[] Buffer;
        Buffer = NULL;
    }
    IN_SQLyyerror = false;
    YY_FLUSH_BUFFER;
    }

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
    {
    OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");
    return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;
    }

// -------------------------------------------------------------------------
sal_Int32    OSQLScanner::GetCurrentRule() const    { return m_nRule; }
sal_Int32    OSQLScanner::GetGERRule() const        { return PREDICATE_GER; }
sal_Int32    OSQLScanner::GetENGRule() const        { return PREDICATE_ENG; }
sal_Int32    OSQLScanner::GetSQLRule() const        { return SQL; }
sal_Int32    OSQLScanner::GetDATERule() const       { return DATE; }
sal_Int32    OSQLScanner::GetSTRINGRule() const     { return STRING; }

// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex(YYSTYPE* val)
    {
    return SQLyylex(val, yyscanner);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(const sal_Char* pNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(pNewValue, eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------
OSQLParseNode* OSQLScanner::NewNode(Utf8String const& _rNewValue, SQLNodeType eNodeType, sal_uInt32 nNodeID)
    {
    return m_pGarbageCollector.NewNode(_rNewValue.c_str(), eNodeType, nNodeID);
    }

// -------------------------------------------------------------------------

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

