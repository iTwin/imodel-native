#line 3 "d:\\dev\\dgndb\\bim20propmaprefactor\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "d:\\dev\\dgndb\\bim20propmaprefactor\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2585] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      188,  188,  194,  192,  190,  189,  192,  154,  181,  154,
      146,  148,  147,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  154,  179,  154,  156,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  182,  180,  183,  154,  154,  163,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      162,  154,  163,  192,  188,  188,  188,  188,  186,  154,
      154,  154,  154,  146,  148,  147,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  187,  154,
      190,  152,    0,  149,  151,  150,    0,    0,    5,    0,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,   72,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,    0,    0,    0,    0,   98,  100,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  153,  157,    0,  158,  156,
        0,  155,  155,  155,    5,  155,  155,  155,  155,  155,
      155,   14,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,   65,   72,  155,
      155,  155,  155,  155,  155,  155,  155,  155,   89,  155,
      155,  155,  155,   98,  100,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  178,  168,  178,  178,  178,  163,  178,  162,  162,
      162,    5,  162,  162,  162,  162,  162,  162,   14,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,   65,   72,  162,  162,  162,  162,
      162,  162,  162,  162,  162,   89,  162,  162,  162,  162,
       98,  100,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  174,  178,

      178,  178,  163,  178,    0,  184,  188,  188,  152,  188,
      149,  151,  150,  188,  188,    5,  188,  188,  188,  188,
      188,  188,   14,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   65,   72,
      188,  188,  188,  188,  188,  188,  188,  188,  188,   89,
      188,  188,  188,  188,   98,  100,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  153,    0,  191,    1,    0,    3,    4,    6,

        7,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   68,    0,   74,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   85,    0,    0,   90,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
        0,    0,  118,    0,    0,    0,  121,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  161,  158,    0,    0,
      159,    1,  155,    3,    4,    6,    7,  155,  155,  155,
       11,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   35,  155,  155,  155,  155,  155,  155,  155,
       43,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       55,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       68,  155,   74,  155,  155,  155,  155,  155,  155,  155,
      155,   83,   85,  155,  155,   90,   91,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  112,  155,  155,  118,  155,

      155,  155,  121,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,    0,  171,  178,  166,  178,  163,    0,  169,    1,
      162,    3,    4,    6,    7,  162,  162,  162,   11,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
       35,  162,  162,  162,  162,  162,  162,  162,   43,  162,
      162,  162,  162,  162,  162,  162,  162,  162,   55,  162,
      162,  162,  162,  162,  162,  162,  162,  162,   68,  162,
       74,  162,  162,  162,  162,  162,  162,  162,  162,   83,
       85,  162,  162,   90,   91,  162,  162,  162,  162,  162,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  112,  162,  162,  118,  162,  162,  162,
      121,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,    0,
      177,  172,  178,  178,  163,    0,  175,  184,    0,  184,
      188,  188,    1,  188,    3,    4,    6,    7,  188,  188,
      188,   11,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,   35,  188,  188,  188,  188,  188,  188,
      188,   43,  188,  188,  188,  188,  188,  188,  188,  188,
      188,   55,  188,  188,  188,  188,  188,  188,  188,  188,

      188,   68,  188,   74,  188,  188,  188,  188,  188,  188,
      188,  188,   83,   85,  188,  188,   90,   91,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  112,  188,  188,  118,
      188,  188,  188,  121,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,    0,    0,    0,    0,    0,   13,    0,   15,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       33,    0,    0,   38,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       59,   60,    0,    0,   63,    0,    0,    0,    0,    0,
       71,   73,   75,   77,   78,   79,    0,   81,    0,    0,
        0,    0,    0,    0,    0,   94,    0,    0,   99,    0,
        0,    0,  104,    0,    0,    0,    0,  109,    0,    0,
        0,  113,    0,    0,    0,  119,    0,    0,  123,  124,
        0,    0,  127,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  139,  140,    0,  142,  144,  145,    0,
      160,  155,  155,  155,  155,  155,   13,  155,   15,   16,
      155,  155,  155,  155,  155,  155,  155,  155,  155,   33,
      155,  155,   38,  155,  155,  155,   42,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,   59,
       60,  155,  155,   63,  155,  155,  155,  155,  155,   71,
       73,   75,   77,   78,   79,  155,   81,  155,  155,  155,
      155,  155,  155,  155,   94,  155,  155,   99,  155,  155,
      155,  104,  155,  155,  155,  155,  109,  155,  155,  155,
      113,  155,  155,  155,  119,  155,  155,  123,  124,  155,
      155,  127,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  139,  140,  155,  142,  144,  145,  171,  178,
        0,  170,  163,  169,  162,  162,  162,  162,  162,   13,
      162,   15,   16,  162,  162,  162,  162,  162,  162,  162,

      162,  162,   33,  162,  162,   38,  162,  162,  162,   42,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,   59,   60,  162,  162,   63,  162,  162,  162,
      162,  162,   71,   73,   75,   77,   78,   79,  162,   81,
      162,  162,  162,  162,  162,  162,  162,   94,  162,  162,
       99,  162,  162,  162,  104,  162,  162,  162,  162,  109,
      162,  162,  162,  113,  162,  162,  162,  119,  162,  162,
      123,  124,  162,  162,  127,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  139,  140,  162,  142,  144,
      145,  177,    0,  176,  178,  163,  175,    0,  184,  188,

      188,  188,  188,  188,   13,  188,   15,   16,  188,  188,
      188,  188,  188,  188,  188,  188,  188,   33,  188,  188,
       38,  188,  188,  188,   42,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,   59,   60,  188,
      188,   63,  188,  188,  188,  188,  188,   71,   73,   75,
       77,   78,   79,  188,   81,  188,  188,  188,  188,  188,
      188,  188,   94,  188,  188,   99,  188,  188,  188,  104,
      188,  188,  188,  188,  109,  188,  188,  188,  113,  188,
      188,  188,  119,  188,  188,  123,  124,  188,  188,  127,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      139,  140,  188,  142,  144,  145,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   21,   22,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
        0,    0,    0,    0,   50,   51,   53,    0,    0,   58,
       61,    0,    0,   66,    0,   69,    0,    0,    0,   80,
       82,   84,    0,   87,    0,    0,   93,   95,    0,    0,
      101,    0,  103,    0,    0,    0,  108,    0,  115,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,  133,  134,  137,    0,    0,  141,    0,    2,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

       21,   22,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   44,  155,  155,  155,  155,   50,   51,   53,
      155,  155,   58,   61,  155,  155,   66,  155,   69,  155,
      155,  155,   80,   82,   84,  155,   87,  155,  155,   93,
       95,  155,  155,  101,  155,  103,  155,  155,  155,  108,
      155,  115,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  129,  155,  155,  155,  133,  134,  137,  155,  155,
      141,  155,  164,  170,    2,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,   21,   22,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,   44,  162,  162,

      162,  162,   50,   51,   53,  162,  162,   58,   61,  162,
      162,   66,  162,   69,  162,  162,  162,   80,   82,   84,
      162,   87,  162,  162,   93,   95,  162,  162,  101,  162,
      103,  162,  162,  162,  108,  162,  115,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  129,  162,  162,  162,
      133,  134,  137,  162,  162,  141,  162,  176,  165,    0,
      185,    2,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,   21,   22,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,   44,  188,  188,  188,  188,   50,
       51,   53,  188,  188,   58,   61,  188,  188,   66,  188,

       69,  188,  188,  188,   80,   82,   84,  188,   87,  188,
      188,   93,   95,  188,  188,  101,  188,  103,  188,  188,
      188,  108,  188,  115,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  129,  188,  188,  188,  133,  134,  137,
      188,  188,  141,  188,    0,    0,   10,    0,    0,    0,
        0,    0,   19,    0,    0,    0,   32,    0,    0,   37,
        0,   40,    0,   45,   46,    0,   48,    0,    0,    0,
        0,   62,   64,   67,    0,    0,    0,   86,    0,    0,
        0,   97,  102,    0,    0,    0,    0,    0,    0,  116,
      117,  122,    0,    0,    0,    0,  130,    0,  132,  138,

        0,    0,  143,  155,  155,   10,  155,  155,  155,  155,
      155,   19,  155,  155,  155,   32,  155,  155,   37,  155,
       40,  155,   45,   46,  155,   48,  155,  155,  155,  155,
       62,   64,   67,  155,  155,  155,   86,  155,  155,  155,
       97,  102,  155,  155,  155,  155,  155,  155,  116,  117,
      122,  155,  155,  155,  155,  130,  155,  132,  138,  155,
      155,  143,  178,  162,  162,   10,  162,  162,  162,  162,
      162,   19,  162,  162,  162,   32,  162,  162,   37,  162,
       40,  162,   45,   46,  162,   48,  162,  162,  162,  162,
       62,   64,   67,  162,  162,  162,   86,  162,  162,  162,

       97,  102,  162,  162,  162,  162,  162,  162,  116,  117,
      122,  162,  162,  162,  162,  130,  162,  132,  138,  162,
      162,  143,  178,  185,  185,  188,  188,   10,  188,  188,
      188,  188,  188,   19,  188,  188,  188,   32,  188,  188,
       37,  188,   40,  188,   45,   46,  188,   48,  188,  188,
      188,  188,   62,   64,   67,  188,  188,  188,   86,  188,
      188,  188,   97,  102,  188,  188,  188,  188,  188,  188,
      116,  117,  122,  188,  188,  188,  188,  130,  188,  132,
      138,  188,  188,  143,    0,    8,    0,    9,    0,    0,
       18,   20,   30,   23,    0,   36,    0,    0,   47,   49,

        0,    0,   56,   68,    0,    0,   88,    0,    0,    0,
        0,    0,  110,    0,    0,    0,    0,    0,    0,  131,
        0,  136,  155,    8,  155,    9,  155,  155,   18,   20,
       30,   23,  155,   36,  155,  155,   47,   49,  155,  155,
       56,   68,  155,  155,   88,  155,  155,  155,  155,  155,
      110,  155,  155,  155,  155,  155,  155,  131,  155,  136,
      167,  162,    8,  162,    9,  162,  162,   18,   20,   30,
       23,  162,   36,  162,  162,   47,   49,  162,  162,   56,
       68,  162,  162,   88,  162,  162,  162,  162,  162,  110,
      162,  162,  162,  162,  162,  162,  131,  162,  136,  173,

      185,  188,    8,  188,    9,  188,  188,   18,   20,   30,
       23,  188,   36,  188,  188,   47,   49,  188,  188,   56,
       68,  188,  188,   88,  188,  188,  188,  188,  188,  110,
      188,  188,  188,  188,  188,  188,  131,  188,  136,   57,
        0,    0,    0,    0,   34,   39,    0,    0,    0,    0,
        0,    0,    0,    0,  106,    0,  111,    0,    0,    0,
        0,    0,    0,   57,  155,  155,  155,  155,   34,   39,
      155,  155,  155,  155,  155,  155,  155,  155,  106,  155,
      111,  155,  155,  155,  155,  155,  155,   57,  162,  162,
      162,  162,   34,   39,  162,  162,  162,  162,  162,  162,

      162,  162,  106,  162,  111,  162,  162,  162,  162,  162,
      162,   57,  188,  188,  188,  188,   34,   39,  188,  188,
      188,  188,  188,  188,  188,  188,  106,  188,  111,  188,
      188,  188,  188,  188,  188,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   54,   70,    0,   92,
        0,  105,  107,    0,  120,  125,  126,  128,  135,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       54,   70,  155,   92,  155,  105,  107,  155,  120,  125,
      126,  128,  135,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,   54,   70,  162,   92,  162,  105,

      107,  162,  120,  125,  126,  128,  135,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   54,   70,
      188,   92,  188,  105,  107,  188,  120,  125,  126,  128,
      135,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,    0,  114,   12,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,   76,  155,  114,   12,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
       76,  162,  114,   12,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,   76,  188,  114,   17,    0,    0,
        0,    0,    0,    0,    0,    0,   52,    0,   17,  155,

      155,  155,  155,  155,  155,  155,  155,   52,  155,   17,
      162,  162,  162,  162,  162,  162,  162,  162,   52,  162,
       17,  188,  188,  188,  188,  188,  188,  188,  188,   52,
      188,    0,   24,    0,   27,   28,    0,    0,   41,   96,
      155,   24,  155,   27,   28,  155,  155,   41,   96,  162,
       24,  162,   27,   28,  162,  162,   41,   96,  188,   24,
      188,   27,   28,  188,  188,   41,   96,    0,    0,    0,
        0,  155,  155,  155,  155,  162,  162,  162,  162,  188,
      188,  188,  188,    0,    0,   29,    0,  155,  155,   29,
      155,  162,  162,   29,  162,  188,  188,   29,  188,   25,

        0,    0,   25,  155,  155,   25,  162,  162,   25,  188,
      188,    0,    0,  155,  155,  162,  162,  188,  188,    0,
       31,  155,   31,  162,   31,  188,   31,    0,  155,  162,
      188,    0,  155,  162,  188,    0,  155,  162,  188,    0,
      155,  162,  188,    0,  155,  162,  188,    0,  155,  162,
      188,    0,  155,  162,  188,    0,  155,  162,  188,    0,
      155,  162,  188,    0,  155,  162,  188,    0,  155,  162,
      188,    0,  155,  162,  188,    0,  155,  162,  188,   26,
       26,   26,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   17,   17,
       17,   18,   17,   19,   17,   17,   17,   20,   11,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,    1,    1,    1,   52,   53,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   50,   11,   79,   11,    9,    1,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[81] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    3,
        1,    1,    1,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    6,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    8
    } ;

static yyconst flex_int16_t yy_base[2593] =
    {   0,
        0,    0,   80,    0,  160,    0,  227,  233,  239,  245,
      264,    0,  875, 5510,  343, 5510,  829, 5510, 5510,  820,
      326, 5510,  812,  314,  326,  329,  373,  372,  380,  311,
      333,  383,  317,  407,  427,  428,  476,  437,  455,  471,
      465,  490,  338,  509,  335,  733, 5510,  535,  556,  522,
      559,  577,  571,  614,  622,  324,  431,  568,  328,    0,
      644,  641,  660,  708,  669,  693,  671,  716,  719,  353,
      737,  380, 5510, 5510, 5510,    0,  562,  790,  540,  764,
      785,  808,  825,  844,  387,  624,  800,  391,    0,  849,
      825,  860,  908,  786,  897,  898,  887,  901,  432,  945,

      434,  702,  971,  625,    0,  559,    0,  779, 5510,    0,
        0,  781, 5510,  347,    0,  768,  955,  979, 1000, 1023,
     1040, 1030,  422,  688,  971,  444, 1064,  972, 1055, 1106,
     1011, 1077, 1098, 1092, 1117,  465, 1135,  482, 5510,  705,
      599, 5510,  777, 5510, 5510, 5510,  729,  787,  510,  599,
      609,  602,  663,  614,  629, 5510,  645,  718, 1154,  724,
      743, 1097, 1152,  773,  775,  812,  851,  867,  869,  887,
     1171,  895,  890,  901, 1164,  908,  921,  924,  948,  950,
      979, 1164, 5510, 1002, 1170, 1180, 1112, 1147, 1139, 1020,
     1052, 1067, 1178, 1208, 1094, 1174, 1196, 1196, 1215, 1213,

     1202, 1219, 1207, 1207, 1223, 1215, 1233, 1225, 1221, 1244,
     1223, 1220, 1247, 1234, 1261, 1258, 1273, 1267, 1231, 1268,
     1236, 1238, 1257, 1269, 1289, 5510, 1327, 1303, 1330, 1334,
     1347,    0, 1325, 1326, 1299, 1298, 1311, 1297, 1330, 1303,
     1318,    0, 1329, 1348, 1342, 1337, 1335, 1340, 1381, 1338,
     1346, 1350, 1351, 1368, 1372, 1371, 1388, 1376, 1372, 1380,
     1391, 1387, 1394, 1392, 1388, 1390, 1399, 1414,    0, 1405,
     1408, 1417, 1435, 1407, 1425, 1411, 1437, 1433, 1435, 1452,
     1452, 1445, 1460, 1455, 1464, 1461, 1450, 1466, 1454, 1454,
     1471, 1465, 1484, 1474, 1492, 1504, 1470, 1470, 1507, 1487,

     1506, 1505, 1516, 1518, 1504, 1511, 1523, 1525, 1511, 1519,
     1538,    0, 1576, 1583, 1589, 1592, 1598, 1605,    0, 1589,
     1591, 1543, 1543, 1570, 1569, 1591, 1589, 1591,    0, 1588,
     1607, 1600, 1600, 1599, 1600, 1641, 1600, 1601, 1604, 1608,
     1624, 1626, 1634, 1652, 1647, 1644, 1648, 1652, 1650, 1654,
     1652, 1647, 1650, 1660, 1661,    0, 1668, 1678, 1677, 1700,
     1694, 1695, 1673, 1691, 1698, 1700, 1713, 1712, 1705, 1721,
     1716, 1725, 1722, 1711, 1727, 1715, 1716, 1731, 1724, 1744,
     1732, 1743, 1766, 1728, 1725, 1769, 1768, 1770, 1775, 1778,
     1775, 1768, 1776, 1776, 1780, 1770, 1775, 1796, 1834, 1841,

     1847, 1850, 1856, 1864, 1869, 1876,    0,  630,    0, 1893,
        0,    0,    0, 1854, 1861, 1828, 1831, 1844, 1834, 1864,
     1862, 1865,    0, 1863, 1884, 1884, 1872, 1870, 1879, 1912,
     1873, 1879, 1882, 1889, 1906, 1909, 1914, 1929, 1910, 1905,
     1920, 1924, 1925, 1931, 1929, 1924, 1929, 1940, 1943,    0,
     1946, 1949, 1975, 1969, 1973, 1946, 1945, 1963, 1969, 1970,
     1992, 1982, 1978, 1996, 1991, 2000, 1999, 1988, 2007, 1995,
     1995, 2010, 2003, 2019, 2014, 2012, 2036, 2013, 2010, 2032,
     2035, 2046, 2051, 2064, 2054, 2038, 2042, 2056, 2057, 2045,
     2053, 2077,    0,  771, 5510, 5510, 2074, 5510, 5510, 5510,

     5510, 2071, 2061, 2085,  719, 2090, 2081, 2092, 2078, 2086,
     2090, 2083, 2092, 2090, 2110, 2105, 5510, 2115, 2112, 2115,
     2099, 2118, 2106, 2119, 5510, 2129, 2113, 2128, 2117, 2119,
     2123, 2125, 2149, 2139, 2131, 2141, 2143, 2149, 2142, 2155,
     2149, 2153, 2165, 2167, 2183, 2160, 5510, 2155, 2172, 2157,
     2176, 2173, 2179, 2182, 2186, 5510, 2170, 2174, 2174, 5510,
     5510,  716, 2188, 2190, 2202, 2189, 2184, 2207, 2208, 2209,
     2201, 2201, 2213, 2222, 2219, 2216, 2214, 2224, 2221, 2216,
     2219, 2234, 5510, 2235, 2236, 2227, 5510, 2233, 2230, 2247,
     2239, 2251, 2243, 2250, 2246, 2265, 2265, 2257, 2251, 2277,

     2262, 2270, 2269, 2272, 2268, 2297, 2310, 2325, 2332, 2338,
     2341,    0, 2288,    0,    0,    0,    0, 2299, 2288, 2313,
      689, 2314, 2312, 2324, 2310, 2325, 2325, 2319, 2328, 2327,
     2343, 2343,    0, 2348, 2345, 2348, 2332, 2352, 2338, 2351,
        0, 2359, 2345, 2360, 2345, 2350, 2350, 2355, 2381, 2374,
     2364, 2374, 2382, 2384, 2378, 2391, 2384, 2389, 2400, 2401,
     2415, 2393,    0, 2388, 2405, 2392, 2408, 2405, 2411, 2414,
     2418,    0, 2401, 2403, 2405,    0,    0,  673, 2415, 2420,
     2434, 2421, 2419, 2440, 2441, 2448, 2436, 2437, 2449, 2457,
     2455, 2451, 2448, 2457, 2454, 2448, 2455, 2466,    0, 2467,

     2468, 2459,    0, 2465, 2461, 2476, 2470, 2480, 2473, 2487,
     2476, 2496, 2493, 2489, 2484, 2509, 2504, 2502, 2510, 2510,
     2504, 2530, 2535, 2542, 2559, 2566, 2573, 2576, 2579,    0,
     2541,    0,    0,    0,    0, 2537, 2533, 2557,  672, 2560,
     2564, 2574, 2562, 2569, 2569, 2561, 2570, 2567, 2584, 2584,
        0, 2589, 2587, 2592, 2576, 2595, 2581, 2594,    0, 2599,
     2583, 2628, 2587, 2596, 2597, 2601, 2621, 2622, 2613, 2623,
     2625, 2627, 2620, 2633, 2626, 2631, 2642, 2643, 2659, 2636,
        0, 2632, 2649, 2635, 2651, 2648, 2651, 2654, 2657,    0,
     2640, 2652, 2657,    0,    0,  620, 2668, 2671, 2686, 2673,

     2669, 2690, 2691, 2692, 2680, 2679, 2691, 2699, 2697, 2693,
     2690, 2700, 2698, 2694, 2696, 2709,    0, 2710, 2707, 2698,
        0, 2704, 2700, 2725, 2718, 2731, 2723, 2734, 2727, 2749,
     2747, 2739, 2733, 2753, 2746, 2744, 2752, 2752, 2746, 2778,
     2781, 2801, 2808, 2814, 2820, 2823, 2826, 2843, 2833, 2849,
     2866,    0,    0, 2764,    0,    0,    0,    0, 2793, 2782,
     2810,  619, 2820, 2812, 2827, 2812, 2819, 2826, 2819, 2835,
     2831, 2853, 2850,    0, 2855, 2853, 2860, 2845, 2865, 2852,
     2868,    0, 2873, 2857, 2876, 2858, 2862, 2863, 2864, 2888,
     2878, 2868, 2881, 2884, 2887, 2884, 2898, 2890, 2898, 2909,

     2910, 2926, 2902,    0, 2902, 2919, 2905, 2922, 2920, 2923,
     2927, 2930,    0, 2914, 2918, 2918,    0,    0,  574, 2928,
     2934, 2942, 2929, 2924, 2945, 2948, 2950, 2939, 2943, 2956,
     2963, 2964, 2960, 2957, 2966, 2968, 2962, 2968, 2980,    0,
     2982, 2979, 2970,    0, 2977, 2974, 2991, 2983, 2993, 2984,
     2989, 2991, 3006, 3003, 2997, 2992, 3021, 3004, 3025, 3011,
     3010, 3011, 3012, 3008, 3027, 3020, 3029, 5510, 3040, 5510,
     5510, 3045, 3046, 3040, 3046, 3034, 3036, 3055, 3052, 3047,
     3043, 3043, 3045, 5510, 3057, 3057, 3059, 5510, 3061, 3054,
     3065, 3061, 3067, 3087, 3084, 3070, 3076, 3082, 3098, 3097,

     5510, 5510, 3086, 3089, 5510, 3086, 3087, 3089,  605, 3102,
     5510, 5510,  566, 5510, 5510, 5510, 3092, 5510, 3095, 3106,
     3095, 3113, 3104, 3101, 3119, 3108, 3109, 3130, 5510, 3119,
     3121, 3122, 5510, 3136, 3126, 3142, 3143, 5510, 3149, 3135,
     3155, 5510, 3145, 3146, 3158, 5510, 3148, 3143, 5510, 5510,
     3146, 3148, 5510, 3149, 3157, 3151, 3158, 3158, 3161, 3173,
     3176, 3173, 3177, 5510, 5510, 3182, 3184, 5510, 5510, 3210,
     3224, 3177, 3174, 3193, 3188, 3200,    0, 3208,    0,    0,
     3219, 3214, 3212, 3218, 3205, 3209, 3228, 3225, 3216, 3212,
     3212, 3214,    0, 3227, 3225, 3226,    0, 3223, 3215, 3227,

     3224, 3226, 3247, 3246, 3233, 3235, 3241, 3263, 3266,    0,
        0, 3255, 3259,    0, 3258, 3260, 3261,  572, 3274,    0,
        0,  530,    0,    0,    0, 3263,    0, 3268, 3279, 3268,
     3281, 3272, 3269, 3289, 3276, 3276, 3292,    0, 3280, 3283,
     3285,    0, 3295, 3286, 3304, 3306,    0, 3308, 3294, 3320,
        0, 3314, 3315, 3328,    0, 3320, 3316,    0,    0, 3318,
     3320,    0, 3320, 3330, 3324, 3331, 3327, 3330, 3342, 3345,
     3343, 3345,    0,    0, 3349, 3346,    0,    0, 3392, 3395,
     3398, 3401, 3405, 3408, 3362, 3381, 3400, 3388, 3395,    0,
     3403,    0,    0, 3410, 3411, 3404, 3409, 3395, 3397, 3416,

     3413, 3404, 3400, 3400, 3402,    0, 3414, 3412, 3413,    0,
     3410, 3402, 3412, 3408, 3410, 3430, 3427, 3442, 3443, 3449,
     3464, 3462,    0,    0, 3451, 3454,    0, 3451, 3452, 3453,
      551, 3465,    0,    0,  504,    0,    0,    0, 3453,    0,
     3456, 3467, 3456, 3469, 3460, 3457, 3475, 3462, 3462, 3479,
        0, 3467, 3468, 3469,    0, 3479, 3469, 3485, 3515,    0,
     3516, 3502, 3521,    0, 3510, 3511, 3523,    0, 3513, 3508,
        0,    0, 3510, 3511,    0, 3510, 3518, 3512, 3519, 3515,
     3518, 3530, 3533, 3530, 3532,    0,    0, 3536, 3533,    0,
        0, 3550, 3553, 3579, 3582, 3588, 3591, 3594, 3610, 3561,

     3557, 3586, 3574, 3582,    0, 3590,    0,    0, 3597, 3596,
     3590, 3595, 3581, 3583, 3605, 3602, 3595, 3591, 3591, 3593,
        0, 3605, 3603, 3604,    0, 3601, 3593, 3603, 3611, 3613,
     3633, 3632, 3618, 3629, 3635, 3650, 3648,    0,    0, 3637,
     3640,    0, 3637, 3638, 3639,  537, 3651,    0,    0,  494,
        0,    0,    0, 3639,    0, 3642, 3656, 3645, 3660, 3652,
     3649, 3667, 3654, 3654, 3670,    0, 3658, 3659, 3672,    0,
     3682, 3672, 3690, 3691,    0, 3702, 3688, 3707,    0, 3696,
     3697, 3709,    0, 3699, 3694,    0,    0, 3696, 3697,    0,
     3696, 3704, 3701, 3708, 3706, 3709, 3721, 3724, 3721, 3723,

        0,    0, 3727, 3724,    0,    0, 5510, 3733, 3730, 3723,
     3744, 3749, 3750, 3742, 3745, 3746, 3749, 5510, 5510, 3748,
     3755, 3752, 3762, 3760, 3768, 3760, 3770, 3761, 3775, 5510,
     3761, 3780, 3766, 3783, 5510,  482, 5510, 3764, 3770, 5510,
     5510, 3782, 3785, 5510, 3771, 5510, 3787, 3774, 3784, 5510,
     5510, 5510, 3802, 5510, 3807, 3810, 5510, 5510,  479, 3792,
     5510, 3804, 5510, 3804, 3816, 3822, 5510, 3824, 5510, 3827,
     3808, 3826, 3811, 3825, 3815, 3814, 3826, 3825, 5510, 3837,
     3820, 3839, 5510, 5510, 3826, 3832, 3846, 5510, 3834,    0,
     3848, 3845, 3826, 3859, 3864, 3863, 3857, 3850, 3861, 3864,

        0,    0, 3863, 3870, 3867, 3877, 3875, 3883, 3875, 3885,
     3876, 3887,    0, 3876, 3893, 3881, 3898,    0,  473,    0,
     3879, 3885,    0,    0, 3897, 3900,    0, 3886,    0, 3902,
     3889, 3887,    0,    0,    0, 3917,    0, 3922, 3923,    0,
        0,  472, 3907,    0, 3909,    0, 3919, 3931, 3937,    0,
     3939,    0, 3942, 3923, 3941, 3926, 3940, 3930, 3929, 3938,
     3940,    0, 3950, 3935, 3954,    0,    0, 3941, 3947, 3961,
        0, 3949,  640, 3971,    0, 3966, 3975, 3956, 3977, 3984,
     3983, 3981, 3974, 3975, 3979,    0,    0, 3978, 3985, 3982,
     3992, 3990, 3998, 3990, 4000, 3991, 4002,    0, 3988, 4008,

     3994, 4013,    0,  452,    0, 3994, 4000,    0,    0, 4012,
     4015,    0, 4001,    0, 4020, 4019, 4017,    0,    0,    0,
     4035,    0, 4042, 4043,    0,    0,  435, 4031,    0, 4033,
        0, 4033, 4046, 4052,    0, 4054,    0, 4057, 4038, 4056,
     4041, 4055, 4045, 4044, 4053, 4052,    0, 4065, 4048, 4069,
        0,    0, 4056, 4062, 4076,    0, 4064, 4103,  807, 4115,
     4118,    0, 4100, 4097, 4089, 4110, 4115, 4114, 4106, 4099,
     4100, 4103,    0,    0, 4102, 4109, 4106, 4116, 4114, 4122,
     4114, 4124, 4117, 4128,    0, 4114, 4131, 4117, 4134,    0,
      426,    0, 4115, 4121,    0,    0, 4133, 4136,    0, 4122,

        0, 4154, 4141, 4150,    0,    0,    0, 4168,    0, 4173,
     4174,    0,    0,  425, 4156,    0, 4158,    0, 4158, 4170,
     4176,    0, 4178,    0, 4181, 4162, 4180, 4165, 4179, 4169,
     4170, 4179, 4178,    0, 4188, 4171, 4190,    0,    0, 4177,
     4183, 4197,    0, 4185, 4182, 4203, 5510, 4204, 4216, 4211,
     4227, 4228, 5510, 4214, 4230, 4216, 5510, 4224, 4218, 5510,
     4236, 5510, 4224, 5510, 5510, 4236, 5510, 4222, 4221, 4235,
     4241, 5510, 5510, 5510, 4230, 4244, 4249, 5510, 4239, 4240,
     4241, 5510, 5510, 4245, 4240, 4247, 4237, 4255, 4262, 5510,
     5510, 5510, 4267, 4287, 4288, 4286, 5510, 4277, 5510, 5510,

     4291, 4275, 5510, 4276, 4281,    0, 4282, 4283, 4278, 4294,
     4295,    0, 4281, 4297, 4283,    0, 4293, 4287,    0, 4305,
        0, 4293,    0,    0, 4305,    0, 4291, 4290, 4304, 4310,
        0,    0,    0, 4297, 4311, 4332,    0, 4322, 4334, 4335,
        0,    0, 4339, 4334, 4341, 4331, 4349, 4340,    0,    0,
        0, 4345, 4354, 4355, 4353,    0, 4344,    0,    0, 4358,
     4342,    0, 4371, 4343, 4353,    0, 4354, 4355, 4350, 4366,
     4367,    0, 4353, 4369, 4371,    0, 4379, 4373,    0, 4391,
        0, 4379,    0,    0, 4399,    0, 4385, 4384, 4398, 4404,
        0,    0,    0, 4391, 4405, 4410,    0, 4400, 4401, 4402,

        0,    0, 4406, 4401, 4408, 4398, 4416, 4412,    0,    0,
        0, 4417, 4426, 4427, 4425,    0, 4416,    0,    0, 4430,
     4414,    0, 4456, 4469, 4472, 4434, 4439,    0, 4454, 4455,
     4450, 4466, 4467,    0, 4453, 4469, 4455,    0, 4463, 4457,
        0, 4475,    0, 4463,    0,    0, 4475,    0, 4463, 4462,
     4476, 4482,    0,    0,    0, 4469, 4483, 4488,    0, 4478,
     4479, 4480,    0,    0, 4484, 4479, 4486, 4476, 4507, 4498,
        0,    0,    0, 4517, 4526, 4527, 4525,    0, 4516,    0,
        0, 4530, 4514,    0, 4529, 5510, 4527, 5510, 4530, 4522,
     5510, 5510, 5510,  422, 4532, 5510, 4518, 4521, 5510, 5510,

     4541, 4529, 5510, 5510, 4541, 4533, 5510, 4525, 4542, 4533,
     4535, 4536, 5510, 4540, 4550, 4539, 4541, 4548, 4564, 5510,
     4566, 5510, 4581,    0, 4579,    0, 4582, 4574,    0,    0,
        0,  419, 4584,    0, 4570, 4571,    0,    0, 4591, 4579,
        0,    0, 4591, 4583,    0, 4575, 4594, 4585, 4587, 4588,
        0, 4592, 4602, 4591, 4593, 4587, 4603,    0, 4591,    0,
     4617, 4622,    0, 4620,    0, 4634, 4626,    0,    0,    0,
      416, 4636,    0, 4622, 4623,    0,    0, 4643, 4631,    0,
        0, 4643, 4635,    0, 4627, 4644, 4635, 4637, 4638,    0,
     4642, 4652, 4643, 4645, 4639, 4655,    0, 4643,    0, 4669,

     4672, 4680,    0, 4678,    0, 4686, 4678,    0,    0,    0,
      381, 4688,    0, 4674, 4675,    0,    0, 4695, 4683,    0,
        0, 4695, 4687,    0, 4679, 4696, 4687, 4689, 4690,    0,
     4694, 4704, 4693, 4695, 4689, 4705,    0, 4693,    0, 5510,
     4692, 4697, 4709, 4739, 5510, 5510, 4708, 4706, 4712, 4729,
     4729, 4746, 4738, 4739, 5510, 4747, 5510, 4751, 4753, 4745,
     4757, 4759, 4739,    0, 4745, 4748, 4760, 4794,    0,    0,
     4761, 4761, 4767, 4755, 4755, 4772, 4786, 4787,    0, 4800,
        0, 4803, 4802, 4795, 4810, 4812, 4792,    0, 4798, 4801,
     4813, 4847,    0,    0, 4814, 4812, 4818, 4808, 4810, 4827,

     4819, 4821,    0, 4848,    0, 4851, 4851, 4843, 4863, 4865,
     4845,    0, 4851, 4854, 4866, 4887,    0,    0, 4866, 4869,
     4875, 4863, 4865, 4884, 4879, 4894,    0, 4902,    0, 4908,
     4907, 4900, 4912, 4917, 4898, 4916,  372, 4905, 4925, 4926,
     4927, 4914, 4927, 4924, 4924, 4919, 5510, 5510, 4936, 5510,
     4937, 5510, 5510, 4929, 5510, 5510, 5510, 5510, 5510, 4940,
      371, 4929, 4950, 4960, 4962, 4949, 4963, 4958, 4956, 4951,
        0,    0, 4969,    0, 4968,    0,    0, 4961,    0,    0,
        0,    0,    0, 4973,  365, 4962, 4982, 4983, 4984, 4971,
     4984, 4980, 4976, 4976,    0,    0, 4993,    0, 4992,    0,

        0, 4984,    0,    0,    0,    0,    0, 4997,  359, 4986,
     5006, 5018, 5008, 5006, 5019, 5015, 5010, 5008,    0,    0,
     5025,    0, 5025,    0,    0, 5015,    0,    0,    0,    0,
        0, 5510, 5029, 5019, 5020, 5035, 5022, 5031, 5036, 5032,
     5032, 5042, 5510, 5029, 5510,    0, 5047, 5036, 5037, 5054,
     5043, 5052, 5057, 5054, 5063, 5074,    0, 5060,    0,    0,
     5073, 5062, 5063, 5081, 5068, 5078, 5083, 5082, 5083, 5093,
        0, 5079,    0,    0, 5092, 5081, 5082, 5097, 5084, 5093,
     5099, 5100, 5100, 5110,    0, 5098,    0, 5510, 5120, 5117,
     5122, 5117, 5130, 5132, 5133, 5120, 5510, 5132,    0, 5140,

     5140, 5145, 5140, 5144, 5148, 5150, 5137,    0, 5149,    0,
     5157, 5154, 5159, 5153, 5157, 5158, 5160, 5152,    0, 5164,
        0, 5172, 5171, 5178, 5172, 5176, 5178, 5188, 5176,    0,
     5188, 5185, 5510, 5177, 5510, 5510, 5186, 5184, 5510, 5510,
     5192,    0, 5185,    0,    0, 5194, 5192,    0,    0, 5201,
        0, 5193,    0,    0, 5202, 5197,    0,    0, 5205,    0,
     5197,    0,    0, 5206, 5201,    0,    0, 5206, 5211, 5228,
     5210, 5216, 5222, 5236, 5218, 5224, 5229, 5250, 5233, 5239,
     5243, 5255, 5237, 5254, 5242, 5510, 5263, 5258, 5249,    0,
     5270, 5265, 5253,    0, 5273, 5268, 5256,    0, 5276, 5510,

      325, 5265,    0,  324, 5266,    0,  321, 5268,    0,  294,
     5274, 5268, 5273, 5272, 5279, 5276, 5281, 5279, 5293, 5293,
     5510, 5294,    0, 5295,    0, 5296,    0, 5314, 5318, 5319,
     5321, 5309, 5313, 5315, 5316, 5312, 5313, 5314, 5315, 5329,
     5330, 5331, 5333, 5330, 5331, 5332, 5335, 5335, 5336, 5337,
     5339, 5354, 5356, 5357, 5358,  208,  202,  196,  190, 5365,
     5366, 5370, 5371, 5362, 5363, 5367, 5369, 5373, 5374, 5375,
     5376, 5371, 5372, 5373, 5374, 5381, 5387, 5388, 5389, 5510,
        0,    0,    0, 5510, 5453, 5458, 5461, 5469, 5477, 5485,
     5493, 5501

    } ;

static yyconst flex_int16_t yy_def[2593] =
    {   0,
     2584,    1, 2584,    3, 2584,    5,    5,    5,    5,    5,
     2584,   11, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2584, 2584, 2584, 2586, 2586, 2586, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2586, 2586, 2588, 2589, 2589, 2589, 2589, 2584, 2589,
     2589, 2589, 2584, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2584, 2589,
     2584, 2584, 2590, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,

     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2586, 2586, 2586, 2586, 2586, 2586, 2586, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2586, 2586,

     2586, 2586, 2586, 2586, 2588, 2588, 2589, 2589, 2589, 2591,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2590, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,

     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2584, 2586, 2586, 2586, 2586, 2586, 2584, 2586, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2584,
     2586, 2586, 2586, 2586, 2586, 2584, 2586, 2588, 2584, 2588,
     2591, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,

     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,

     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2584, 2586,
     2584, 2586, 2586, 2584, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2584, 2584, 2586, 2586, 2586, 2584, 2592, 2588, 2589,

     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,

     2589, 2589, 2589, 2589, 2589, 2589, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,

     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2586, 2584, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2584, 2586, 2592,
     2592, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,

     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2586, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2586, 2592, 2592, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,

     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2586, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2586,

     2592, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,

     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2585, 2585, 2585, 2585, 2585,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2585, 2585,

     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2589, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2584, 2584, 2584,
     2584, 2585, 2585, 2585, 2585, 2587, 2587, 2587, 2587, 2589,
     2589, 2589, 2589, 2584, 2584, 2584, 2584, 2585, 2585, 2585,
     2585, 2587, 2587, 2587, 2587, 2589, 2589, 2589, 2589, 2584,

     2584, 2584, 2585, 2585, 2585, 2587, 2587, 2587, 2589, 2589,
     2589, 2584, 2584, 2585, 2585, 2587, 2587, 2589, 2589, 2584,
     2584, 2585, 2585, 2587, 2587, 2589, 2589, 2584, 2585, 2587,
     2589, 2584, 2585, 2587, 2589, 2584, 2585, 2587, 2589, 2584,
     2585, 2587, 2589, 2584, 2585, 2587, 2589, 2584, 2585, 2587,
     2589, 2584, 2585, 2587, 2589, 2584, 2585, 2587, 2589, 2584,
     2585, 2587, 2589, 2584, 2585, 2587, 2589, 2584, 2585, 2587,
     2589, 2584, 2585, 2587, 2589, 2584, 2585, 2587, 2589, 2584,
     2585, 2587, 2589,    0, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584

    } ;

static yyconst flex_int16_t yy_nxt[5591] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   18,
       21,   22,   23,   18,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   14,   34,   35,   36,   37,   38,
       14,   39,   40,   41,   42,   43,   44,   14,   45,   14,
       14,   14,   14,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   14,   34,   35,   36,   37,   38,   14,
       39,   40,   41,   42,   43,   44,   14,   45,   46,   14,
       14,   15,   16,   15,   17,   47,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   48,   49,   49,   49,   18,

       21,   22,   23,   18,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       60,   66,   67,   68,   69,   70,   71,   60,   72,   60,
       73,   60,   74,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   60,
       66,   67,   68,   69,   70,   71,   60,   72,   46,   60,
       14,   15,   16,   15,   17,   14,   75,   18,   18,   19,
       18,   18,   18,   76,   20,   77,   78,   78,   78,   18,
       21,   22,   23,   18,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,

       89,   95,   96,   97,   98,   99,  100,   89,  101,   89,
       73,   14,   14,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   89,
       95,   96,   97,   98,   99,  100,   89,  101,   46,   89,
      102, 2563,   76,  103,  103,  103,  102, 2562,   76,  103,
      103,  103,   18, 2561,   18,  104,  104,  104,   18, 2560,
       18,  104,  104,  104,  105,  106,  107,   15,  108,  109,
      105,  110,  110,   19,  111,  111,  111,  111,  112,  111,
      105,  105,  105,  113,  114,  115,  116,  113,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  105,  127,

      128,  129,  130,  131,  105,  132,  133,  134,  135,  136,
      137,  105,  138,  105,  139,  105,  105,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  105,  127,  128,
      129,  130,  131,  105,  132,  133,  134,  135,  136,  137,
      105,  138,  140,  105,  141, 2518,  141,  144,  145,  147,
      151,  148,  178,  157,  152,  184,  149,  179,  153,  150,
      158,  154,  220,  225,  155,  264,  270,  159,  411,  412,
      160,  180, 2516,  161,  156, 2514, 2512,  306,  147,  151,
      148,  178,  157,  152,  184,  149,  179,  153,  150,  158,
      154,  220,  225,  155,  264,  270,  159,  162,  166,  160,

      180,  163,  161,  156,  172,  164,  306,  167,  311,  168,
     1669,  165,  173,  181,  169,  174, 1582,  170,  175,  171,
      182,  176, 1497, 1414,  177,  183,  162,  166,  351,  357,
      163,  185, 2216,  172,  164,  186,  167,  311,  168,  187,
      165,  173,  181,  169,  174,  188,  170,  175,  171,  182,
      176,  189,  192,  177,  183,  265,  393,  351,  357,  190,
      185,  203,  398,  445,  186,  191,  193, 2192,  187,  266,
     2168,  194,  195, 2144,  188,  204, 1962, 1950,  205,  206,
      189,  192,  451,  207,  265,  393, 1900,  208,  190,  487,
      203,  398,  445,  209,  191,  193,  214,  215,  266,  210,

      194,  195,  196, 1888,  204,  197,  216,  205,  206,  211,
      492,  451,  207,  198,  212,  213,  208,  199,  487,  200,
      201,  202,  209, 1840, 1828,  214,  215,  217,  210,  218,
     1781,  196,  219, 1769,  197,  216,  500,  221,  211,  492,
      222,  223,  198,  212,  213, 1704,  199,  224,  200,  201,
      202,  227,  227,  227, 1701, 1617,  217,  233,  218,  234,
      408,  219,  141,  228,  235,  500,  221,  236, 1614,  222,
      223,  229,  230,  230,  230,  320,  224,  321,  313,  313,
      313, 1532,  322,  237,  231,  323,  233,  238,  234, 1529,
      314,  239,  228,  235,  240,  248,  236,  241,  267,  249,

      141,  243,  141,  250,  320,  268,  321,  242,  244,  251,
      269,  322,  237,  231,  323,  245,  238, 1449,  246,  314,
      239,  247, 1446,  240,  248, 1361,  241,  267,  249,  501,
      243,  408,  250,  141,  268,  502,  242,  244,  251,  269,
      252,  406,  406,  406,  245,  503,  258,  246,  352,  253,
      247,  254,  506,  315,  259, 1863,  255,  260,  501,  256,
      261,  257,  353,  262,  502,  275,  263,  507,  271,  252,
     1304, 1246,  272,  276,  503,  258,  273,  352,  253,  277,
      254,  506,  274,  259,  278,  255,  260,  508,  256,  261,
      257,  353,  262,  289,  275,  263,  507,  271,  279,  296,

      504,  272,  276,  280,  281,  273,  505,  290,  277,  297,
      291,  274,  446,  278,  298,  299,  508,  292,  399,  399,
      399,  293,  289, 1189, 1133,  294,  447,  279,  296,  504,
      400,  295,  280,  281,  282,  505,  290,  283,  297,  291,
     1076,  446,  509,  298,  299,  284,  292,  300,  301,  285,
      293,  286,  287,  288,  294,  447,  303,  302,  304,  400,
      295,  305,  514,  282,  496,  307,  283, 1024,  308,  309,
      967,  509,  497,  495,  284,  310,  300,  301,  285,  495,
      286,  287,  288,  493,  515,  303,  302,  304,  324,  413,
      305,  514,  325,  496,  307,  410,  326,  308,  309,  327,

      409,  497,  328,  315,  310,  316,  317,  317,  317,  330,
      376,  226,  329,  515,  498,  521,  331,  324,  318,  522,
     1923,  325,  402,  332,  377,  326,  333,  378,  327,  334,
      354,  328,  335,  146,  143,  499,  336,  355,  330,  376,
      337,  329,  356,  498,  521,  331,  338,  318,  522,  362,
      142,  339,  332,  377,  523,  333,  378,  363,  334,  354,
      340,  335,  341,  364,  499,  336,  355,  342,  345,  337,
      343,  356,  344,  358, 2584,  338,  346,  359,  362,  347,
      339,  360,  348,  523,  365,  349,  363,  361,  350,  340,
     2584,  341,  364,  524,  525,  526,  342,  345,  366,  343,

     2584,  344,  358,  367,  368,  346,  359, 2584,  347, 2584,
      360,  348, 2584,  365,  349,  527,  361,  350,  387,  388,
     2584,  379,  524,  525,  526,  380,  383,  366,  389,  381,
      531,  532,  367,  368,  369,  382,  384,  370,  390,  533,
      391,  385,  386,  392,  527,  371,  537,  387,  388,  372,
      379,  373,  374,  375,  380,  383,  538,  389,  381,  531,
      532, 2584,  539,  369,  382,  384,  370,  390,  533,  391,
      385,  386,  392,  394,  371,  537,  395,  396,  372, 2584,
      373,  374,  375,  397,  401,  538,  402,  403,  403,  403,
      414,  539,  415,  540,  541, 2584,  456,  416, 2584,  404,

      417,  448,  394,  418,  457,  395,  396,  419,  449, 2584,
      458,  420,  397,  450,  421, 2584,  542,  422, 2584,  414,
     2584,  415,  540,  541,  424,  456,  416,  423,  404,  417,
      448,  425,  418,  457,  546,  470,  419,  449,  426,  458,
      420,  427,  450,  421,  428,  542,  422,  429, 2584,  471,
     2584,  430,  472,  424,  439,  431,  423,  557, 2584, 2584,
      425,  432,  440,  546,  470,  441,  433,  426,  442, 2584,
      427,  443, 2584,  428,  444,  434,  429,  435,  471,  459,
      430,  472,  436,  439,  431,  437,  557,  438,  452,  558,
      432,  440,  453,  460,  441,  433,  454,  442,  461,  462,

      443,  473,  455,  444,  434,  474,  435, 2584,  459,  475,
      559,  436, 2584, 2584,  437,  476,  438,  452,  558, 2584,
     2584,  453,  460,  481,  482,  454,  477,  461,  462,  564,
      473,  455,  463,  483,  474,  464,  478, 2584,  475,  559,
      516,  479,  480,  465,  476,  517,  551,  466,  552,  467,
      468,  469,  481,  482,  484,  477,  485, 2584,  564,  486,
     2584,  463,  483,  488,  464,  478,  489,  490, 2584,  516,
      479,  480,  465,  491,  517,  551,  466,  552,  467,  468,
      469,  518,  555,  484,  553,  485,  556,  519,  486,  510,
      511,  512,  488,  554,  520,  489,  490,  528,  513,  534,

      547,  543,  491,  529,  549,  535,  544,  545,  536,  550,
      518,  555,  548,  553,  530,  556,  519,  565,  510,  511,
      512,  560,  554,  520,  561,  566,  528,  513,  534,  547,
      543,  567,  529,  549,  535,  544,  545,  536,  550,  562,
      563,  548,  568,  530,  569,  570,  565,  571,  572,  573,
      560,  574,  575,  561,  566,  578,  579,  576, 2584,  584,
      567,  585,  588,  598,  601, 2584,  602,  580,  562,  563,
      581,  568,  586,  569,  570,  577,  571,  572,  573,  582,
      574,  575,  591,  587,  578,  579,  576,  583,  584,  589,
      585,  588,  598,  601,  596,  602,  580,  590,  593,  581,

      603,  586,  592,  599,  577,  594,  597,  595,  582,  600,
      604,  591,  587,  605, 2584,  606,  583,  606,  589,  607,
      607,  607, 2584,  596, 2584,  616,  590,  593,  617,  603,
     2584,  592,  599, 2584,  594,  597,  595,  618,  600,  604,
      619,  622,  605,  227,  227,  227,  608,  608,  608,  229,
      230,  230,  230,  614,  616,  228,  623,  617,  609,  610,
      612,  610,  231,  611,  611,  611,  618,  620,  613,  619,
      622,  624,  625,  621,  615,  630,  631,  626,  627,  628,
      637, 2584,  614,  632,  228,  623,  629,  609,  633,  612,
      638,  231,  639,  640, 2584,  641,  620,  613,  642,  643,

      624,  625,  621,  615,  630,  631,  626,  627,  628,  637,
      634,  647,  632,  648,  644,  629,  635,  633,  649,  638,
      645,  639,  640,  636,  641,  653,  650,  642,  643,  654,
      655,  646,  651,  656,  657,  652,  658,  662,  663,  634,
      647,  665,  648,  644,  669,  635,  666,  649,  673,  645,
      664,  659,  636,  670,  653,  650,  660,  661,  654,  655,
      646,  651,  656,  657,  652,  658,  662,  663,  671,  667,
      665,  668,  672,  669,  674,  666,  675,  673,  676,  664,
      659,  677,  670,  678,  679,  660,  661,  680,  681,  682,
      683,  684,  685,  686,  687,  688,  689,  671,  667,  690,

      668,  672,  691,  674,  694,  675,  700,  676,  692, 2584,
      677,  701,  678,  679, 2584,  704,  680,  681,  682,  683,
      684,  685,  686,  687,  688,  689,  693,  695,  690,  707,
      697,  691,  702,  694,  705,  700,  714,  692,  696,  698,
      701,  709,  706,  703,  704,  712,  715,  699,  710,  708,
      711,  717,  716,  718,  719,  693,  695,  713,  707,  697,
      720,  702,  721,  705, 2584,  714, 2584,  696,  698,  734,
      709,  706,  703,  735,  712,  715,  699,  710,  708,  711,
      717,  716,  718,  719, 2584, 2584,  713, 2584, 2584,  720,
     2584,  721,  313,  313,  313,  722,  736,  722,  734,  723,

      723,  723,  735, 2584,  314,  724,  724,  724,  725,  725,
      725,  315,  737,  316,  727,  727,  727,  728,  732,  728,
      726,  729,  729,  729,  730,  736,  318,  740,  738,  741,
      742,  743,  731,  314,  739,  744,  745,  746,  748,  733,
      749,  737,  755,  750,  747,  756,  757,  732,  751,  726,
      758,  759,  760,  730, 2584,  318,  740,  738,  741,  742,
      743,  731,  761,  739,  744,  745,  746,  748,  733,  749,
      752,  755,  750,  747,  756,  757,  753,  751,  762,  758,
      759,  760,  765,  754,  763,  766,  767,  768,  771,  772,
      773,  761,  774,  769,  775,  764,  770,  776,  777,  752,

      780,  783, 2584,  778,  779,  753,  784,  762,  781, 2584,
      791,  765,  754,  763,  766,  767,  768,  771,  772,  773,
      782,  774,  769,  775,  764,  770,  776,  777,  792,  780,
      783,  787,  778,  779,  785,  784,  786,  781,  789,  791,
      788,  793,  790,  794,  796,  797,  795,  798,  799,  782,
      800,  801,  802,  803,  804,  805,  806,  792,  807,  808,
      787,  809,  812,  785,  818,  786,  819,  789,  810,  788,
      793,  790,  794,  796,  797,  795,  798,  799,  813,  800,
      801,  802,  803,  804,  805,  806,  811,  807,  808,  814,
      809,  812,  815,  818,  820,  819,  822,  810,  823,  825,

      832,  816,  830,  827,  835,  821,  824,  813,  836,  817,
      828,  833,  829,  837,  831,  811,  838,  834,  814,  826,
      839,  815, 2584,  820, 2584,  822, 2584,  823,  825,  832,
      816,  830,  827,  835,  821,  824, 2584,  836,  817,  828,
      833,  829,  837,  831, 2584,  838,  834, 2584,  826,  839,
      399,  399,  399,  840,  857,  840, 2584,  841,  841,  841,
     2584,  858,  400,  842,  842,  842,  844,  844,  844,  401,
      859,  402,  845,  845,  845,  843,  846,  860,  846,  849,
      847,  847,  847,  857,  404,  848,  848,  848,  855,  853,
      858,  400,  850,  850,  850,  852,  494,  854,  494,  859,

      863,  861,  494,  864,  843,  865,  860,  862,  866,  856,
      871,  872,  494,  404, 2584,  878,  494,  855,  853,  867,
      868,  869,  873,  879,  880, 2584,  854,  874,  870,  863,
      861,  881,  864,  882,  865,  883,  862,  866,  856,  871,
      872,  875,  884,  494,  878,  888,  889,  876,  867,  868,
      869,  873,  879,  880,  877,  885,  874,  870,  890,  891,
      881,  886,  882,  894,  883,  892,  895,  896,  893,  897,
      875,  884,  887,  898,  888,  889,  876,  899,  903,  904,
      900, 2584,  914,  877,  885,  901,  902,  890,  891,  912,
      886,  905,  894,  913,  892,  895,  896,  893,  897,  906,

      915,  887,  898,  908,  907,  909,  899,  903,  904,  900,
      910,  914,  916,  917,  901,  902,  918,  921,  912,  911,
      905,  922,  913,  919,  920,  923,  924,  925,  906,  915,
      926,  927,  908,  907,  909,  928,  929,  930,  931,  910,
      932,  916,  917,  933,  935,  918,  921,  936,  911,  941,
      922,  942,  919,  920,  923,  924,  925,  943,  937,  926,
      927,  934,  938,  945,  928,  929,  930,  931,  944,  932,
      955,  939,  933,  935,  946,  948,  936,  956,  941,  940,
      942,  953,  947,  957,  958,  959,  943,  937,  960,  950,
      934,  938,  945,  954,  961,  949,  951,  944,  952,  955,

      939,  962,  963,  946,  948,  964,  956,  965,  940,  966,
      953,  947,  957,  958,  959,  968,  969,  960,  950,  972,
      970,  973,  954,  961,  949,  951,  974,  952,  975,  976,
      962,  963,  977,  981,  964,  971,  965,  978,  966,  982,
      983,  984,  985,  986,  968,  969,  987,  988,  972,  970,
      973,  979,  980,  989,  990,  974,  991,  975,  976,  993,
      994,  977,  981,  992,  971,  995,  978,  996,  982,  983,
      984,  985,  986,  997,  998,  987,  988,  999, 1000, 1001,
      979,  980,  989,  990, 1002,  991, 1003, 1004,  993,  994,
     1005, 1006,  992, 1007,  995, 1008,  996, 1012, 1013, 1014,

     1015, 1009,  997,  998, 1016, 1017,  999, 1000, 1001, 1018,
     1019, 1010, 1020, 1002, 1021, 1003, 1004, 1022, 1023, 1005,
     1006, 1011, 1007, 1025, 1008, 1026, 1012, 1013, 1014, 1015,
     1027, 1028, 1029, 1016, 1017, 1030, 1031, 1032, 1018, 1019,
     1010, 1020, 1033, 1021, 1034, 1035, 1022, 1023, 1036, 1037,
     1011, 1038, 1025, 1039, 1026, 1040, 1041, 1044, 1042, 1027,
     1028, 1029, 1045, 1046, 1030, 1031, 1032, 1043, 1047, 1048,
     1049, 1033, 1050, 1034, 1035, 1051, 1052, 1036, 1037, 1053,
     1038, 1054, 1039, 1057, 1040, 1041, 1044, 1042, 1055, 1058,
     1056, 1045, 1046, 1059, 1060, 1061, 1064, 1047, 1048, 1049,

     1067, 1050, 1062, 1063, 1051, 1052, 1068, 1065, 1053, 1069,
     1054, 1066, 1057,  607,  607,  607, 1072, 1055, 1058, 1056,
     2584, 2584, 1059, 1060, 1061, 1064,  607,  607,  607, 1067,
     2584, 1062, 1063, 1073, 1074, 1068, 1065, 1075, 1069, 1077,
     1066,  608,  608,  608, 1070, 1072, 1070, 1078, 1071, 1071,
     1071, 1081, 1079,  609,  611,  611,  611,  611,  611,  611,
     1082, 1083, 1073, 1074, 1084, 1085, 1075, 1080, 1077, 1086,
     1087, 1090, 1091, 1092, 1093, 1094, 1078, 1095, 1096, 1097,
     1081, 1079,  609, 1098, 1088, 1089, 1099, 1102, 1100, 1082,
     1083, 1103, 1104, 1084, 1085, 1101, 1080, 1105, 1086, 1087,

     1090, 1091, 1092, 1093, 1094, 1106, 1095, 1096, 1097, 1107,
     1108, 1109, 1098, 1088, 1089, 1099, 1102, 1100, 1110, 1111,
     1103, 1104, 1112, 1113, 1101, 1114, 1105, 1115, 1116, 1117,
     1121, 1122, 1123, 1118, 1106, 1124, 1125, 1126, 1107, 1108,
     1109, 1127, 1128, 1119, 1129, 1130, 1131, 1110, 1111, 1132,
     1134, 1112, 1113, 1120, 1114, 1135, 1115, 1116, 1117, 1121,
     1122, 1123, 1136, 1137, 1124, 1125, 1126, 1138, 1139, 1140,
     1127, 1128, 1119, 1129, 1130, 1131, 1141, 1142, 1132, 1134,
     1143, 1144, 1120, 1145, 1135, 1146, 1147, 1148, 1149, 1150,
     1151, 1136, 1137, 1153, 1154, 1155, 1138, 1139, 1140, 1152,

     1156, 1157, 1158, 1159, 1160, 1141, 1142, 1161, 1162, 1143,
     1144, 1163, 1145, 1166, 1146, 1147, 1148, 1149, 1150, 1151,
     1167, 1168, 1153, 1154, 1155, 1164, 1169, 1165, 1170, 1156,
     1157, 1158, 1159, 1160, 1171, 1172, 1161, 1162, 1173, 1174,
     1163, 1176, 1166, 1175, 1177, 1178, 1179, 1179, 1179, 1167,
     1168,  723,  723,  723, 1164, 1169, 1165, 1170, 1180, 1180,
     1180, 2584, 2584, 1171, 1172, 2584, 2584, 1173, 1174, 1185,
     1176, 1186, 1175, 1177, 1178,  725,  725,  725, 1181, 1187,
     1181, 1188, 1182, 1182, 1182, 1190,  315,  726,  316, 1183,
     1183, 1183, 1184, 1184, 1184,  729,  729,  729, 1185, 1191,

     1186,  318, 1192, 1194, 1195, 1196, 1197, 1198, 1187, 1199,
     1188, 1200, 1203, 1204, 1190, 1205,  726, 1193, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1201, 1202, 2584, 1191, 1215,
      318, 1192, 1194, 1195, 1196, 1197, 1198, 1216, 1199, 1217,
     1200, 1203, 1204, 1218, 1205, 1219, 1193, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1201, 1202, 1213, 1220, 1215, 1221,
     1222, 1223, 1224, 1214, 1225, 1226, 1216, 1227, 1217, 1228,
     1229, 1230, 1218, 1234, 1219, 1235, 1236, 1231, 1237, 1238,
     1239, 1240, 1241, 1242, 1243, 1213, 1220, 1232, 1221, 1222,
     1223, 1224, 1214, 1225, 1226, 1244, 1227, 1233, 1228, 1229,

     1230, 1245, 1234, 1247, 1235, 1236, 1248, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1249, 1250, 1232, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1244, 1258, 1233, 1259, 1260, 1261,
     1245, 1262, 1247, 1263, 1266, 1248, 1264, 1267, 1268, 1269,
     1270, 1271, 1272, 1249, 1250, 1265, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1273, 1258, 1274, 1259, 1260, 1261, 1275,
     1262, 1276, 1263, 1266, 1279, 1264, 1267, 1268, 1269, 1270,
     1271, 1272, 1277, 1280, 1278, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1273, 1289, 1274, 1288, 1290, 1291, 1275, 2584,
     1276, 2584, 1300, 1279, 1292, 1292, 1292,  841,  841,  841,

     2584, 1277, 1280, 1278, 1281, 1282, 1283, 1284, 1285, 1286,
     1287, 2584, 1289, 2584, 1288, 1290, 1291,  842,  842,  842,
     1293, 1300, 1293, 2584, 1294, 1294, 1294, 1301, 1302,  843,
     1295, 1295, 1295,  401, 1303,  402, 1296, 1296, 1296, 1297,
     1297, 1297,  847,  847,  847, 1305,  849, 1306,  404, 1298,
     1298, 1298,  849, 1309, 1310, 1307, 1301, 1302,  843,  848,
      848,  848, 1311, 1303, 1312, 1299, 1299, 1299,  852,  494,
     1308,  494, 1313, 1314, 1305,  494, 1306,  404, 1318, 1319,
     1315, 1320, 1309, 1310, 1307,  494, 1321, 2584, 1322,  494,
     1323, 1311, 1324, 1312, 1316, 1317, 1325, 1326, 1327, 1308,

     1330, 1313, 1314, 1331, 1328, 1332, 1333, 1318, 1319, 1315,
     1320, 1329, 1334, 1335, 1336, 1321,  494, 1322, 1337, 1323,
     1338, 1324, 1339, 1316, 1317, 1325, 1326, 1327, 1340, 1330,
     1341, 1342, 1331, 1328, 1332, 1333, 1343, 1344, 1345, 1349,
     1329, 1334, 1335, 1336, 1346, 1350, 1351, 1337, 1352, 1338,
     1353, 1339, 1354, 1355, 1347, 1356, 1357, 1340, 1358, 1341,
     1342, 1359, 1360, 1362, 1348, 1343, 1344, 1345, 1349, 1363,
     1364, 1365, 1366, 1367, 1350, 1351, 1368, 1352, 1369, 1353,
     1370, 1354, 1355, 1347, 1356, 1357, 1371, 1358, 1372, 1373,
     1359, 1360, 1362, 1348, 1374, 1375, 1376, 1377, 1363, 1364,

     1365, 1366, 1367, 1378, 1379, 1368, 1381, 1369, 1382, 1370,
     1383, 1384, 1385, 1380, 1386, 1371, 1387, 1372, 1373, 1388,
     1389, 1390, 1391, 1374, 1375, 1376, 1377, 1392, 1394, 1393,
     1395, 1396, 1378, 1379, 1397, 1381, 1398, 1382, 1401, 1383,
     1384, 1385, 1404, 1386, 1405, 1387, 1399, 1400, 1388, 1389,
     1390, 1391, 1406, 1407, 1408, 1409, 1392, 1394, 1393, 1395,
     1396, 1410, 1402, 1397, 1411, 1398, 1403, 1401, 1412, 1413,
     1415, 1404, 1416, 1405, 1417, 1399, 1400, 1418, 1419, 1420,
     1421, 1406, 1407, 1408, 1409, 1422, 1423, 1424, 1425, 1426,
     1410, 1402, 1427, 1411, 1428, 1403, 1414, 1412, 1413, 1415,

     1429, 1416, 1430, 1417, 1431, 1432, 1418, 1419, 1420, 1421,
     1433, 1434, 1435, 1436, 1422, 1423, 1424, 1425, 1426, 1437,
     1438, 1427, 1439, 1428, 1440, 1441, 1442, 1443, 1444, 1429,
     1445, 1430, 1447, 1431, 1432, 1450, 1451, 1452, 1453, 1433,
     1434, 1435, 1436, 1448, 1454, 1455, 1456, 1457, 1437, 1438,
     1458, 1439, 1459, 1440, 1441, 1442, 1443, 1444, 1460, 1445,
     1461, 1447, 1462, 1463, 1450, 1451, 1452, 1453, 1464, 1465,
     1466, 1467, 1448, 1454, 1455, 1456, 1457, 1468, 1469, 1458,
     1470, 1459, 1471, 1472, 1473, 1474, 1475, 1460, 1476, 1461,
     1477, 1462, 1463, 1478, 1479, 1480, 1481, 1464, 1465, 1466,

     1467, 1482, 1483, 1484, 1485, 1486, 1468, 1469, 1487, 1470,
     1488, 1471, 1472, 1473, 1474, 1475, 1489, 1476, 1490, 1477,
     1491, 1492, 1478, 1479, 1480, 1481, 1071, 1071, 1071, 1493,
     1482, 1483, 1484, 1485, 1486, 1494, 1495, 1487, 1498, 1488,
     1071, 1071, 1071, 1496, 1499, 1489, 1500, 1490, 1501, 1491,
     1492, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1493, 1509,
     1510, 1511, 1512, 1513, 1494, 1495, 1514, 1498, 1515, 1516,
     1497, 1517, 1496, 1499, 1518, 1500, 1519, 1501, 1520, 1521,
     1502, 1503, 1504, 1505, 1506, 1507, 1508, 1522, 1509, 1510,
     1511, 1512, 1513, 1523, 1524, 1514, 1525, 1515, 1516, 1526,

     1517, 1527, 1528, 1518, 1530, 1519, 1533, 1520, 1521, 1534,
     1535, 1536, 1537, 1538, 1539, 1531, 1522, 1540, 1541, 1542,
     1543, 1544, 1523, 1524, 1545, 1525, 1546, 1547, 1526, 1548,
     1527, 1528, 1549, 1530, 1550, 1533, 1551, 1552, 1534, 1535,
     1536, 1537, 1538, 1539, 1531, 1553, 1540, 1541, 1542, 1543,
     1544, 1554, 1555, 1545, 1556, 1546, 1547, 1557, 1548, 1558,
     1559, 1549, 1560, 1550, 1561, 1551, 1552, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1553, 1569, 1570, 1571, 1572, 2584,
     1554, 1555, 2584, 1556, 2584, 2584, 1557, 2584, 1558, 1559,
     2584, 1560, 2584, 1561, 2584, 2584, 1562, 1563, 1564, 1565,

     1566, 1567, 1568, 1575, 1569, 1570, 1571, 1572, 1179, 1179,
     1179, 1573, 1573, 1573, 1574, 1574, 1574, 1182, 1182, 1182,
      316, 1183, 1183, 1183, 1184, 1184, 1184, 1576, 1577, 1578,
     1579, 1580, 1575,  318, 1581, 1583, 1584, 1585, 1586, 1587,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1600, 1601, 1602, 1603, 1576, 1577, 1578, 1579,
     1580, 1582,  318, 1581, 1583, 1584, 1585, 1586, 1587, 1588,
     1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1615, 1618, 1619, 1620, 1621,

     1622, 1623, 1624, 1625, 1626, 1627, 1616, 1628, 1629, 1630,
     1631, 1632, 1633, 1634, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1611, 1612, 1613, 1615, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1627, 1616, 1628, 1629, 1630, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
     1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
     1652, 1653, 1654, 1655, 1656, 1657, 1292, 1292, 1292, 1658,
     1658, 1658, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1653, 1654, 1655, 1656, 1657, 1294, 1294, 1294, 1659, 1659,

     1659,  401, 1662, 1663, 1296, 1296, 1296, 1297, 1297, 1297,
     1661, 1661, 1661,  849, 1664, 1665,  404, 1666, 1667, 2584,
     1670, 1668, 1671, 1672, 1673, 1674,  848,  848,  848, 1675,
     1676, 1662, 1663, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1664, 1665,  404, 1666, 1667, 1669, 1670,
     1668, 1671, 1672, 1673, 1674, 1687, 1688, 1689, 1675, 1676,
     1690, 1691, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
     1685, 1686, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1702, 1705, 1706, 1687, 1688, 1689, 1707, 1708, 1690,
     1691, 1709, 1703, 1710, 1711, 1712, 1713, 1714, 1715, 1716,

     1717, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
     1702, 1705, 1706, 1718, 1719, 1720, 1707, 1708, 1721, 1722,
     1709, 1703, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
     1733, 1734, 1718, 1719, 1720, 1735, 1736, 1721, 1722, 1737,
     1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1723,
     1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
     1734, 1747, 1748, 1749, 1735, 1736, 1750, 1751, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1752, 1753,
     1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,

     1747, 1748, 1749, 1764, 1765, 1750, 1751, 1766, 1767, 1768,
     1770, 1771, 1772, 1773, 1774, 1775, 1776, 1752, 1753, 1754,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1777,
     1778, 1779, 1764, 1765, 1780, 1782, 1766, 1767, 1768, 1770,
     1771, 1772, 1773, 1774, 1775, 1776, 1783, 1784, 1785, 1786,
     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1777, 1778,
     1779, 1795, 1796, 1780, 1782, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1783, 1784, 1785, 1786, 1787,
     1788, 1789, 1790, 1791, 1792, 1793, 1794, 1807, 1808, 1809,
     1795, 1796, 1810, 1811, 1797, 1798, 1799, 1800, 1801, 1802,

     1803, 1804, 1805, 1806, 1812, 1813, 1814, 1815, 1816, 1817,
     1818, 1819, 1820, 1821, 1822, 1823, 1807, 1808, 1809, 1824,
     1825, 1810, 1811, 1826, 1827, 1829, 1830, 1831, 1832, 1833,
     1834, 1835, 1836, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
     1819, 1820, 1821, 1822, 1823, 1837, 1838, 1839, 1824, 1825,
     1841, 1842, 1826, 1827, 1829, 1830, 1831, 1832, 1833, 1834,
     1835, 1836, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
     1851, 1852, 1853, 1854, 1837, 1838, 1839, 1855, 1856, 1841,
     1842, 1857, 1858, 1859, 1860, 1861, 1862, 1574, 1574, 1574,
     1864, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,

     1852, 1853, 1854, 1865, 1866, 1867, 1855, 1856, 1868, 1869,
     1857, 1858, 1859, 1860, 1861, 1862, 1870, 1871, 1872, 1864,
     1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
     1883, 1884, 1865, 1866, 1867, 1885, 1886, 1868, 1869, 1887,
     1889, 1890, 1891, 1892, 1893, 1870, 1871, 1872, 1894, 1873,
     1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
     1884, 1895, 1896, 1897, 1885, 1886, 1898, 1899, 1887, 1889,
     1890, 1891, 1892, 1893, 1901, 1902, 1903, 1894, 1904, 1905,
     1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
     1895, 1896, 1897, 1916, 1917, 1898, 1899, 1918, 1919, 1920,

     1921, 1922, 2584, 1901, 1902, 1903, 2584, 1904, 1905, 1906,
     1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1658,
     1658, 1658, 1916, 1917, 1926, 1927, 1918, 1919, 1920, 1921,
     1922, 1924, 1924, 1924, 1925, 1925, 1925, 1928, 1929, 1930,
     1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
     1941, 1942, 1943, 1926, 1927, 1944, 1945, 1946, 1947, 1948,
     1949, 1951, 1952, 1953, 1954, 1955, 1928, 1929, 1930, 1931,
     1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
     1942, 1943, 1956, 1957, 1944, 1945, 1946, 1947, 1948, 1949,
     1951, 1952, 1953, 1954, 1955, 1958, 1959, 1960, 1961, 1963,

     1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1956, 1957, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1985, 1958, 1959, 1960, 1961, 1963, 1964,
     1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
     1986, 1987, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
     1983, 1984, 1985, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
     1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 1986,
     1987, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
     1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2015, 2016,

     2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
     2014, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
     2026, 2027, 2028, 2029, 2030, 2031, 2032, 2015, 2016, 2033,
     2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
     2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
     2027, 2028, 2029, 2030, 2031, 2032, 2044, 2045, 2033, 2034,
     2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2046,
     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
     2057, 2058, 2059, 2060, 2062, 2044, 2045, 2061, 2061, 2061,
     2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2046, 2047,

     2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
     2058, 2059, 2060, 2062, 2071, 2072, 2073, 2074, 2075, 2063,
     2064, 2065, 2066, 2067, 2068, 2069, 2070, 2076, 2077, 2078,
     2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
     2089, 2090, 2091, 2071, 2072, 2073, 2074, 2075, 2092, 2093,
     2094, 2095, 2096, 2097, 2098, 2099, 2076, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
     2090, 2091, 2100, 2100, 2100, 2102, 2103, 2092, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 1924, 1924, 1924, 2101, 2101,
     2101, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,

     2113, 2114, 2115, 2116, 2102, 2103, 2117, 2118, 2119, 2120,
     2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
     2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
     2114, 2115, 2116, 2131, 2132, 2117, 2118, 2119, 2120, 2121,
     2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2133,
     2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
     2145, 2146, 2131, 2132, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2133, 2134,
     2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2145,
     2146, 2161, 2162, 2147, 2148, 2149, 2150, 2151, 2152, 2153,

     2154, 2155, 2156, 2157, 2158, 2159, 2160, 2163, 2164, 2165,
     2166, 2167, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
     2161, 2162, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184,
     2185, 2186, 2187, 2061, 2061, 2061, 2163, 2164, 2165, 2166,
     2167, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2188,
     2189, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
     2186, 2187, 2190, 2191, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2188, 2189,
     2207, 2208, 2209, 2210, 2211, 2100, 2100, 2100, 1924, 1924,
     1924, 2190, 2191, 2193, 2194, 2195, 2196, 2197, 2198, 2199,

     2200, 2201, 2202, 2203, 2204, 2205, 2206, 2212, 2213, 2207,
     2208, 2209, 2210, 2211, 2214, 2215, 2217, 2218, 2219, 2220,
     2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2236, 2212, 2213, 2237, 2238,
     2245, 2246, 2247, 2214, 2215, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
     2232, 2233, 2234, 2235, 2236, 2239, 2240, 2237, 2238, 2245,
     2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2241, 2254,
     2242, 2243, 2244, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
     2262, 2584, 2584, 2269, 2239, 2240, 2270, 2271, 2272, 2273,

     2274, 2248, 2249, 2250, 2251, 2252, 2253, 2241, 2254, 2242,
     2243, 2244, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
     2263, 2264, 2269, 2275, 2276, 2270, 2271, 2272, 2273, 2274,
     2277, 2278, 2279, 2265, 2280, 2266, 2267, 2268, 2281, 2282,
     2283, 2284, 2285, 2286, 2584, 2584, 2293, 2294, 2295, 2263,
     2264, 2296, 2275, 2276, 2297, 2298, 2299, 2584, 2300, 2277,
     2278, 2279, 2265, 2280, 2266, 2267, 2268, 2281, 2282, 2283,
     2284, 2285, 2286, 2287, 2288, 2293, 2294, 2295, 2301, 2302,
     2296, 2303, 2304, 2297, 2298, 2299, 2289, 2300, 2290, 2291,
     2292, 2305, 2306, 2307, 2308, 2309, 2310, 2584, 2317, 2584,

     2584, 2584, 2287, 2288, 2318, 2319, 2320, 2301, 2302, 2321,
     2303, 2304, 2322, 2311, 2312, 2289, 2323, 2290, 2291, 2292,
     2305, 2306, 2307, 2308, 2309, 2310, 2313, 2317, 2314, 2315,
     2316, 2324, 2325, 2318, 2319, 2320, 2326, 2327, 2321, 2328,
     2329, 2322, 2311, 2312, 2330, 2323, 2331, 2332, 2333, 2334,
     2335, 2337, 2338, 2339, 2336, 2313, 2340, 2314, 2315, 2316,
     2324, 2325, 2341, 2342, 2343, 2326, 2327, 2344, 2328, 2329,
     2345, 2346, 2347, 2330, 2348, 2331, 2332, 2333, 2334, 2335,
     2337, 2338, 2339, 2336, 2349, 2340, 2351, 2352, 2350, 2353,
     2354, 2341, 2342, 2343, 2355, 2356, 2344, 2357, 2358, 2345,

     2346, 2347, 2359, 2348, 2360, 2361, 2362, 2363, 2365, 2366,
     2367, 2364, 2368, 2349, 2369, 2351, 2352, 2350, 2353, 2354,
     2370, 2371, 2372, 2355, 2356, 2373, 2357, 2358, 2374, 2375,
     2376, 2359, 2379, 2360, 2361, 2362, 2363, 2365, 2366, 2367,
     2364, 2368, 2377, 2369, 2380, 2381, 2378, 2382, 2383, 2370,
     2371, 2372, 2384, 2385, 2373, 2386, 2387, 2374, 2375, 2376,
     2388, 2379, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396,
     2397, 2377, 2398, 2380, 2381, 2378, 2382, 2383, 2399, 2400,
     2401, 2384, 2385, 2402, 2386, 2387, 2403, 2404, 2405, 2388,
     2406, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,

     2407, 2398, 2408, 2409, 2410, 2411, 2412, 2399, 2400, 2401,
     2413, 2414, 2402, 2415, 2416, 2403, 2404, 2405, 2417, 2406,
     2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2407,
     2427, 2408, 2409, 2410, 2411, 2412, 2428, 2429, 2430, 2413,
     2414, 2431, 2415, 2416, 2432, 2433, 2434, 2417, 2435, 2418,
     2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2436, 2427,
     2437, 2438, 2439, 2440, 2441, 2428, 2429, 2430, 2442, 2443,
     2431, 2444, 2445, 2432, 2433, 2434, 2446, 2435, 2447, 2448,
     2449, 2450, 2451, 2452, 2453, 2454, 2455, 2436, 2456, 2437,
     2438, 2439, 2440, 2441, 2457, 2458, 2459, 2442, 2443, 2460,

     2444, 2445, 2461, 2462, 2463, 2446, 2464, 2447, 2448, 2449,
     2450, 2451, 2452, 2453, 2454, 2455, 2465, 2456, 2466, 2467,
     2468, 2469, 2470, 2457, 2458, 2459, 2471, 2472, 2460, 2473,
     2474, 2461, 2462, 2463, 2475, 2464, 2476, 2477, 2478, 2479,
     2480, 2481, 2482, 2483, 2484, 2465, 2485, 2466, 2467, 2468,
     2469, 2470, 2486, 2487, 2488, 2471, 2472, 2489, 2473, 2474,
     2490, 2491, 2492, 2475, 2493, 2476, 2477, 2478, 2479, 2480,
     2481, 2482, 2483, 2484, 2494, 2485, 2495, 2496, 2497, 2498,
     2499, 2486, 2487, 2488, 2500, 2501, 2489, 2502, 2503, 2490,
     2491, 2492, 2504, 2493, 2505, 2506, 2507, 2508, 2509, 2510,

     2511, 2513, 2515, 2494, 2517, 2495, 2496, 2497, 2498, 2499,
     2519, 2520, 2521, 2500, 2501, 2522, 2502, 2503, 2523, 2524,
     2525, 2504, 2526, 2505, 2506, 2507, 2508, 2509, 2510, 2511,
     2513, 2515, 2527, 2517, 2528, 2529, 2530, 2531, 2532, 2519,
     2520, 2521, 2533, 2534, 2522, 2535, 2536, 2523, 2524, 2525,
     2537, 2526, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545,
     2546, 2527, 2547, 2528, 2529, 2530, 2531, 2532, 2548, 2549,
     2550, 2533, 2534, 2551, 2535, 2536, 2552, 2553, 2554, 2537,
     2555, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546,
     2556, 2547, 2557, 2558, 2559, 2564, 2565, 2548, 2549, 2550,

     2566, 2567, 2551, 2568, 2569, 2552, 2553, 2554, 2570, 2555,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2556,
     2580, 2557, 2558, 2559, 2564, 2565, 2581, 2582, 2583, 2566,
     2567, 2584, 2568, 2569, 2584, 2584, 2584, 2570, 2584, 2571,
     2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2584, 2580,
     2584, 2584, 2584, 2584, 2584, 2581, 2582, 2583,  232, 2584,
      232,  312, 2584,  312,  319,  319,  319,  319,  319,  405,
     2584,  405,  405,  405,  405,  405,  405,  407, 2584, 2584,
      407,  407,  407, 2584,  407,  494,  494,  494,  494,  494,
      494,  494,  494,  851,  851,  851,  851,  851,  851,  851,

      851, 1660, 2584, 1660, 1660, 1660, 1660, 1660, 1660,   13,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584
    } ;

static yyconst flex_int16_t yy_chk[5591] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7, 2559,    7,    7,    7,    7,    8, 2558,    8,    8,
        8,    8,    9, 2557,    9,    9,    9,    9,   10, 2556,
       10,   10,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   15, 2510,   15,   21,   21,   24,
       25,   24,   30,   26,   25,   33,   24,   31,   25,   24,
       26,   25,   43,   45,   25,   56,   59,   26,  114,  114,
       26,   31, 2507,   26,   25, 2504, 2501,   70,   24,   25,
       24,   30,   26,   25,   33,   24,   31,   25,   24,   26,
       25,   43,   45,   25,   56,   59,   26,   27,   28,   26,

       31,   27,   26,   25,   29,   27,   70,   28,   72,   28,
     2309,   27,   29,   32,   28,   29, 2285,   28,   29,   28,
       32,   29, 2261, 2237,   29,   32,   27,   28,   85,   88,
       27,   34, 2111,   29,   27,   34,   28,   72,   28,   34,
       27,   29,   32,   28,   29,   34,   28,   29,   28,   32,
       29,   35,   36,   29,   32,   57,   99,   85,   88,   35,
       34,   38,  101,  123,   34,   35,   36, 2071,   34,   57,
     2032,   36,   36, 1994,   34,   38, 1714, 1691,   38,   39,
       35,   36,  126,   39,   57,   99, 1627,   39,   35,  136,
       38,  101,  123,   39,   35,   36,   41,   41,   57,   40,

       36,   36,   37, 1604,   38,   37,   41,   38,   39,   40,
      138,  126,   39,   37,   40,   40,   39,   37,  136,   37,
       37,   37,   39, 1542, 1519,   41,   41,   42,   40,   42,
     1459,   37,   42, 1436,   37,   41,  149,   44,   40,  138,
       44,   44,   37,   40,   40, 1350,   37,   44,   37,   37,
       37,   48,   48,   48, 1346, 1235,   42,   50,   42,   50,
      106,   42,  106,   48,   50,  149,   44,   50, 1231,   44,
       44,   49,   49,   49,   49,   79,   44,   79,   77,   77,
       77, 1122,   79,   51,   49,   79,   50,   51,   50, 1118,
       77,   51,   48,   50,   51,   53,   50,   51,   58,   53,

      141,   52,  141,   53,   79,   58,   79,   51,   52,   53,
       58,   79,   51,   49,   79,   52,   51, 1013,   52,   77,
       51,   52, 1009,   51,   53,  919,   51,   58,   53,  150,
       52,  408,   53,  408,   58,  151,   51,   52,   53,   58,
       54,  104,  104,  104,   52,  152,   55,   52,   86,   54,
       52,   54,  154, 1573,   55, 1573,   54,   55,  150,   54,
       55,   54,   86,   55,  151,   62,   55,  155,   61,   54,
      862,  796,   61,   62,  152,   55,   61,   86,   54,   62,
       54,  154,   61,   55,   63,   54,   55,  157,   54,   55,
       54,   86,   55,   65,   62,   55,  155,   61,   63,   67,

      153,   61,   62,   63,   63,   61,  153,   65,   62,   67,
       65,   61,  124,   63,   67,   67,  157,   66,  102,  102,
      102,   66,   65,  739,  678,   66,  124,   63,   67,  153,
      102,   66,   63,   63,   64,  153,   65,   64,   67,   65,
      621,  124,  158,   67,   67,   64,   66,   68,   68,   64,
       66,   64,   64,   64,   66,  124,   69,   68,   69,  102,
       66,   69,  160,   64,  147,   71,   64,  562,   71,   71,
      505,  158,  147,  494,   64,   71,   68,   68,   64,  143,
       64,   64,   64,  140,  161,   69,   68,   69,   80,  116,
       69,  160,   80,  147,   71,  112,   80,   71,   71,   80,

      108,  147,   80,   78,   71,   78,   78,   78,   78,   81,
       94,   46,   80,  161,  148,  164,   81,   80,   78,  165,
     1659,   80, 1659,   81,   94,   80,   81,   94,   80,   81,
       87,   80,   82,   23,   20,  148,   82,   87,   81,   94,
       82,   80,   87,  148,  164,   81,   82,   78,  165,   91,
       17,   83,   81,   94,  166,   81,   94,   91,   81,   87,
       83,   82,   83,   91,  148,   82,   87,   83,   84,   82,
       83,   87,   83,   90,   13,   82,   84,   90,   91,   84,
       83,   90,   84,  166,   92,   84,   91,   90,   84,   83,
        0,   83,   91,  167,  168,  169,   83,   84,   92,   83,

        0,   83,   90,   92,   92,   84,   90,    0,   84,    0,
       90,   84,    0,   92,   84,  170,   90,   84,   97,   97,
        0,   95,  167,  168,  169,   95,   96,   92,   97,   95,
      172,  173,   92,   92,   93,   95,   96,   93,   98,  174,
       98,   96,   96,   98,  170,   93,  176,   97,   97,   93,
       95,   93,   93,   93,   95,   96,  177,   97,   95,  172,
      173,    0,  178,   93,   95,   96,   93,   98,  174,   98,
       96,   96,   98,  100,   93,  176,  100,  100,   93,    0,
       93,   93,   93,  100,  103,  177,  103,  103,  103,  103,
      117,  178,  117,  179,  180,    0,  128,  117,    0,  103,

      117,  125,  100,  118,  128,  100,  100,  118,  125,    0,
      128,  118,  100,  125,  118,    0,  181,  118,    0,  117,
        0,  117,  179,  180,  119,  128,  117,  118,  103,  117,
      125,  119,  118,  128,  184,  131,  118,  125,  119,  128,
      118,  119,  125,  118,  119,  181,  118,  120,    0,  131,
        0,  120,  131,  119,  122,  120,  118,  190,    0,    0,
      119,  120,  122,  184,  131,  122,  121,  119,  122,    0,
      119,  122,    0,  119,  122,  121,  120,  121,  131,  129,
      120,  131,  121,  122,  120,  121,  190,  121,  127,  191,
      120,  122,  127,  129,  122,  121,  127,  122,  129,  129,

      122,  132,  127,  122,  121,  132,  121,    0,  129,  132,
      192,  121,    0,    0,  121,  132,  121,  127,  191,    0,
        0,  127,  129,  134,  134,  127,  133,  129,  129,  195,
      132,  127,  130,  134,  132,  130,  133,    0,  132,  192,
      162,  133,  133,  130,  132,  162,  187,  130,  187,  130,
      130,  130,  134,  134,  135,  133,  135,    0,  195,  135,
        0,  130,  134,  137,  130,  133,  137,  137,    0,  162,
      133,  133,  130,  137,  162,  187,  130,  187,  130,  130,
      130,  163,  189,  135,  188,  135,  189,  163,  135,  159,
      159,  159,  137,  188,  163,  137,  137,  171,  159,  175,

      185,  182,  137,  171,  186,  175,  182,  182,  175,  186,
      163,  189,  185,  188,  171,  189,  163,  196,  159,  159,
      159,  193,  188,  163,  193,  197,  171,  159,  175,  185,
      182,  198,  171,  186,  175,  182,  182,  175,  186,  194,
      194,  185,  199,  171,  200,  201,  196,  202,  203,  204,
      193,  205,  206,  193,  197,  208,  209,  207,    0,  211,
      198,  212,  214,  219,  221,    0,  222,  209,  194,  194,
      210,  199,  213,  200,  201,  207,  202,  203,  204,  210,
      205,  206,  216,  213,  208,  209,  207,  210,  211,  215,
      212,  214,  219,  221,  218,  222,  209,  215,  217,  210,

      223,  213,  216,  220,  207,  217,  218,  217,  210,  220,
      224,  216,  213,  225,    0,  228,  210,  228,  215,  228,
      228,  228,    0,  218,    0,  235,  215,  217,  236,  223,
        0,  216,  220,    0,  217,  218,  217,  237,  220,  224,
      238,  240,  225,  227,  227,  227,  229,  229,  229,  230,
      230,  230,  230,  234,  235,  227,  241,  236,  229,  231,
      233,  231,  230,  231,  231,  231,  237,  239,  233,  238,
      240,  243,  244,  239,  234,  246,  247,  245,  245,  245,
      250,    0,  234,  248,  227,  241,  245,  229,  248,  233,
      251,  230,  252,  253,    0,  254,  239,  233,  255,  256,

      243,  244,  239,  234,  246,  247,  245,  245,  245,  250,
      249,  258,  248,  259,  257,  245,  249,  248,  260,  251,
      257,  252,  253,  249,  254,  262,  261,  255,  256,  263,
      264,  257,  261,  265,  266,  261,  267,  270,  271,  249,
      258,  272,  259,  257,  274,  249,  272,  260,  276,  257,
      271,  268,  249,  274,  262,  261,  268,  268,  263,  264,
      257,  261,  265,  266,  261,  267,  270,  271,  275,  273,
      272,  273,  275,  274,  277,  272,  278,  276,  279,  271,
      268,  279,  274,  280,  280,  268,  268,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  275,  273,  291,

      273,  275,  292,  277,  294,  278,  297,  279,  293,    0,
      279,  298,  280,  280,    0,  300,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  293,  295,  291,  302,
      296,  292,  299,  294,  301,  297,  305,  293,  295,  296,
      298,  303,  301,  299,  300,  304,  306,  296,  303,  302,
      303,  307,  306,  308,  309,  293,  295,  304,  302,  296,
      310,  299,  311,  301,    0,  305,    0,  295,  296,  322,
      303,  301,  299,  323,  304,  306,  296,  303,  302,  303,
      307,  306,  308,  309,    0,    0,  304,    0,    0,  310,
        0,  311,  313,  313,  313,  314,  324,  314,  322,  314,

      314,  314,  323,    0,  313,  315,  315,  315,  316,  316,
      316,  317,  325,  317,  317,  317,  317,  318,  321,  318,
      316,  318,  318,  318,  320,  324,  317,  327,  326,  328,
      330,  331,  320,  313,  326,  332,  332,  332,  333,  321,
      334,  325,  337,  335,  332,  338,  339,  321,  335,  316,
      340,  341,  342,  320,    0,  317,  327,  326,  328,  330,
      331,  320,  343,  326,  332,  332,  332,  333,  321,  334,
      336,  337,  335,  332,  338,  339,  336,  335,  344,  340,
      341,  342,  345,  336,  344,  346,  347,  348,  349,  350,
      351,  343,  352,  348,  353,  344,  348,  354,  355,  336,

      357,  359,    0,  355,  355,  336,  359,  344,  358,    0,
      363,  345,  336,  344,  346,  347,  348,  349,  350,  351,
      358,  352,  348,  353,  344,  348,  354,  355,  364,  357,
      359,  361,  355,  355,  360,  359,  360,  358,  362,  363,
      361,  365,  362,  366,  367,  367,  366,  368,  369,  358,
      370,  371,  372,  373,  374,  375,  376,  364,  377,  378,
      361,  379,  381,  360,  384,  360,  385,  362,  380,  361,
      365,  362,  366,  367,  367,  366,  368,  369,  382,  370,
      371,  372,  373,  374,  375,  376,  380,  377,  378,  382,
      379,  381,  383,  384,  386,  385,  387,  380,  388,  389,

      392,  383,  391,  390,  394,  386,  388,  382,  395,  383,
      390,  393,  390,  396,  391,  380,  397,  393,  382,  389,
      398,  383,    0,  386,    0,  387,    0,  388,  389,  392,
      383,  391,  390,  394,  386,  388,    0,  395,  383,  390,
      393,  390,  396,  391,    0,  397,  393,    0,  389,  398,
      399,  399,  399,  400,  416,  400,    0,  400,  400,  400,
        0,  417,  399,  401,  401,  401,  402,  402,  402,  403,
      418,  403,  403,  403,  403,  401,  404,  419,  404,  406,
      404,  404,  404,  416,  403,  405,  405,  405,  415,  414,
      417,  399,  406,  406,  406,  410,  410,  414,  410,  418,

      421,  420,  410,  422,  401,  424,  419,  420,  425,  415,
      427,  428,  410,  403,    0,  431,  410,  415,  414,  426,
      426,  426,  429,  432,  433,    0,  414,  429,  426,  421,
      420,  434,  422,  435,  424,  436,  420,  425,  415,  427,
      428,  430,  437,  410,  431,  439,  440,  430,  426,  426,
      426,  429,  432,  433,  430,  438,  429,  426,  441,  442,
      434,  438,  435,  443,  436,  442,  444,  445,  442,  446,
      430,  437,  438,  447,  439,  440,  430,  448,  451,  452,
      449,    0,  457,  430,  438,  449,  449,  441,  442,  456,
      438,  452,  443,  456,  442,  444,  445,  442,  446,  453,

      458,  438,  447,  454,  453,  454,  448,  451,  452,  449,
      455,  457,  459,  460,  449,  449,  460,  462,  456,  455,
      452,  463,  456,  461,  461,  464,  465,  466,  453,  458,
      467,  468,  454,  453,  454,  469,  470,  471,  472,  455,
      473,  459,  460,  474,  475,  460,  462,  476,  455,  478,
      463,  479,  461,  461,  464,  465,  466,  480,  476,  467,
      468,  474,  477,  481,  469,  470,  471,  472,  480,  473,
      486,  477,  474,  475,  482,  483,  476,  487,  478,  477,
      479,  485,  482,  487,  488,  489,  480,  476,  490,  484,
      474,  477,  481,  485,  491,  483,  484,  480,  484,  486,

      477,  492,  497,  482,  483,  502,  487,  503,  477,  504,
      485,  482,  487,  488,  489,  506,  507,  490,  484,  509,
      508,  510,  485,  491,  483,  484,  511,  484,  512,  513,
      492,  497,  514,  516,  502,  508,  503,  515,  504,  518,
      519,  520,  521,  522,  506,  507,  523,  524,  509,  508,
      510,  515,  515,  526,  527,  511,  528,  512,  513,  529,
      530,  514,  516,  528,  508,  531,  515,  532,  518,  519,
      520,  521,  522,  533,  534,  523,  524,  535,  536,  537,
      515,  515,  526,  527,  538,  528,  539,  540,  529,  530,
      541,  542,  528,  543,  531,  544,  532,  546,  548,  549,

      550,  545,  533,  534,  551,  552,  535,  536,  537,  553,
      554,  545,  555,  538,  557,  539,  540,  558,  559,  541,
      542,  545,  543,  563,  544,  564,  546,  548,  549,  550,
      565,  566,  567,  551,  552,  568,  569,  570,  553,  554,
      545,  555,  571,  557,  572,  573,  558,  559,  574,  575,
      545,  576,  563,  577,  564,  578,  579,  581,  580,  565,
      566,  567,  582,  584,  568,  569,  570,  580,  585,  586,
      588,  571,  589,  572,  573,  590,  591,  574,  575,  592,
      576,  593,  577,  595,  578,  579,  581,  580,  594,  596,
      594,  582,  584,  597,  598,  599,  601,  585,  586,  588,

      603,  589,  600,  600,  590,  591,  604,  602,  592,  605,
      593,  602,  595,  606,  606,  606,  613,  594,  596,  594,
        0,    0,  597,  598,  599,  601,  607,  607,  607,  603,
        0,  600,  600,  618,  619,  604,  602,  620,  605,  622,
      602,  608,  608,  608,  609,  613,  609,  623,  609,  609,
      609,  625,  624,  608,  610,  610,  610,  611,  611,  611,
      626,  627,  618,  619,  628,  629,  620,  624,  622,  630,
      631,  632,  634,  635,  636,  637,  623,  638,  639,  640,
      625,  624,  608,  642,  631,  631,  643,  645,  644,  626,
      627,  646,  647,  628,  629,  644,  624,  648,  630,  631,

      632,  634,  635,  636,  637,  649,  638,  639,  640,  650,
      651,  652,  642,  631,  631,  643,  645,  644,  653,  654,
      646,  647,  655,  656,  644,  657,  648,  658,  659,  660,
      662,  664,  665,  661,  649,  666,  667,  668,  650,  651,
      652,  669,  670,  661,  671,  673,  674,  653,  654,  675,
      679,  655,  656,  661,  657,  680,  658,  659,  660,  662,
      664,  665,  681,  682,  666,  667,  668,  683,  684,  685,
      669,  670,  661,  671,  673,  674,  686,  687,  675,  679,
      688,  689,  661,  690,  680,  691,  692,  693,  694,  695,
      696,  681,  682,  697,  698,  700,  683,  684,  685,  696,

      701,  702,  704,  705,  706,  686,  687,  707,  708,  688,
      689,  709,  690,  711,  691,  692,  693,  694,  695,  696,
      712,  713,  697,  698,  700,  710,  714,  710,  715,  701,
      702,  704,  705,  706,  716,  716,  707,  708,  717,  718,
      709,  719,  711,  718,  720,  721,  722,  722,  722,  712,
      713,  723,  723,  723,  710,  714,  710,  715,  724,  724,
      724,    0,    0,  716,  716,    0,    0,  717,  718,  731,
      719,  736,  718,  720,  721,  725,  725,  725,  726,  737,
      726,  738,  726,  726,  726,  740,  727,  725,  727,  727,
      727,  727,  728,  728,  728,  729,  729,  729,  731,  741,

      736,  727,  742,  743,  744,  745,  746,  747,  737,  748,
      738,  749,  750,  752,  740,  753,  725,  742,  754,  755,
      756,  757,  758,  760,  761,  749,  749,    0,  741,  763,
      727,  742,  743,  744,  745,  746,  747,  764,  748,  765,
      749,  750,  752,  766,  753,  767,  742,  754,  755,  756,
      757,  758,  760,  761,  749,  749,  762,  768,  763,  769,
      770,  771,  772,  762,  773,  774,  764,  775,  765,  776,
      777,  778,  766,  780,  767,  782,  783,  779,  784,  785,
      786,  787,  788,  789,  791,  762,  768,  779,  769,  770,
      771,  772,  762,  773,  774,  792,  775,  779,  776,  777,

      778,  793,  780,  797,  782,  783,  798,  784,  785,  786,
      787,  788,  789,  791,  799,  800,  779,  801,  802,  803,
      804,  805,  806,  807,  792,  808,  779,  809,  810,  811,
      793,  812,  797,  813,  815,  798,  814,  816,  818,  819,
      820,  822,  823,  799,  800,  814,  801,  802,  803,  804,
      805,  806,  807,  824,  808,  825,  809,  810,  811,  826,
      812,  827,  813,  815,  829,  814,  816,  818,  819,  820,
      822,  823,  828,  830,  828,  831,  832,  833,  834,  834,
      835,  836,  824,  837,  825,  836,  838,  839,  826,    0,
      827,    0,  854,  829,  840,  840,  840,  841,  841,  841,

        0,  828,  830,  828,  831,  832,  833,  834,  834,  835,
      836,    0,  837,    0,  836,  838,  839,  842,  842,  842,
      843,  854,  843,    0,  843,  843,  843,  859,  860,  842,
      844,  844,  844,  845,  861,  845,  845,  845,  845,  846,
      846,  846,  847,  847,  847,  863,  848,  864,  845,  849,
      849,  849,  850,  866,  867,  865,  859,  860,  842,  848,
      848,  848,  868,  861,  869,  850,  850,  850,  851,  851,
      865,  851,  870,  871,  863,  851,  864,  845,  873,  875,
      872,  876,  866,  867,  865,  851,  877,    0,  878,  851,
      879,  868,  880,  869,  872,  872,  881,  883,  884,  865,

      886,  870,  871,  887,  885,  888,  889,  873,  875,  872,
      876,  885,  890,  891,  892,  877,  851,  878,  893,  879,
      894,  880,  895,  872,  872,  881,  883,  884,  896,  886,
      897,  898,  887,  885,  888,  889,  899,  900,  901,  903,
      885,  890,  891,  892,  902,  905,  906,  893,  907,  894,
      908,  895,  909,  910,  902,  911,  912,  896,  914,  897,
      898,  915,  916,  920,  902,  899,  900,  901,  903,  921,
      922,  923,  924,  925,  905,  906,  926,  907,  927,  908,
      928,  909,  910,  902,  911,  912,  929,  914,  930,  931,
      915,  916,  920,  902,  932,  933,  934,  935,  921,  922,

      923,  924,  925,  936,  937,  926,  938,  927,  939,  928,
      941,  942,  943,  937,  945,  929,  946,  930,  931,  947,
      948,  949,  950,  932,  933,  934,  935,  951,  952,  951,
      953,  954,  936,  937,  955,  938,  956,  939,  958,  941,
      942,  943,  960,  945,  961,  946,  957,  957,  947,  948,
      949,  950,  962,  963,  964,  965,  951,  952,  951,  953,
      954,  966,  959,  955,  967,  956,  959,  958,  969,  972,
      973,  960,  974,  961,  975,  957,  957,  976,  977,  978,
      979,  962,  963,  964,  965,  980,  981,  982,  983,  985,
      966,  959,  986,  967,  987,  959,  972,  969,  972,  973,

      989,  974,  990,  975,  991,  992,  976,  977,  978,  979,
      993,  994,  995,  996,  980,  981,  982,  983,  985,  997,
      998,  986,  999,  987, 1000, 1003, 1004, 1006, 1007,  989,
     1008,  990, 1010,  991,  992, 1017, 1019, 1020, 1021,  993,
      994,  995,  996, 1010, 1022, 1023, 1024, 1025,  997,  998,
     1026,  999, 1027, 1000, 1003, 1004, 1006, 1007, 1028, 1008,
     1030, 1010, 1031, 1032, 1017, 1019, 1020, 1021, 1034, 1035,
     1036, 1037, 1010, 1022, 1023, 1024, 1025, 1039, 1040, 1026,
     1041, 1027, 1043, 1044, 1045, 1047, 1048, 1028, 1051, 1030,
     1052, 1031, 1032, 1054, 1055, 1056, 1057, 1034, 1035, 1036,

     1037, 1058, 1059, 1060, 1061, 1062, 1039, 1040, 1063, 1041,
     1066, 1043, 1044, 1045, 1047, 1048, 1067, 1051, 1072, 1052,
     1073, 1074, 1054, 1055, 1056, 1057, 1070, 1070, 1070, 1075,
     1058, 1059, 1060, 1061, 1062, 1076, 1078, 1063, 1082, 1066,
     1071, 1071, 1071, 1081, 1083, 1067, 1084, 1072, 1085, 1073,
     1074, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1075, 1094,
     1095, 1096, 1098, 1099, 1076, 1078, 1100, 1082, 1101, 1102,
     1081, 1103, 1081, 1083, 1104, 1084, 1105, 1085, 1106, 1107,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1108, 1094, 1095,
     1096, 1098, 1099, 1109, 1112, 1100, 1113, 1101, 1102, 1115,

     1103, 1116, 1117, 1104, 1119, 1105, 1126, 1106, 1107, 1128,
     1129, 1130, 1131, 1132, 1133, 1119, 1108, 1134, 1135, 1136,
     1137, 1139, 1109, 1112, 1140, 1113, 1141, 1143, 1115, 1144,
     1116, 1117, 1145, 1119, 1146, 1126, 1148, 1149, 1128, 1129,
     1130, 1131, 1132, 1133, 1119, 1150, 1134, 1135, 1136, 1137,
     1139, 1152, 1153, 1140, 1154, 1141, 1143, 1156, 1144, 1157,
     1160, 1145, 1161, 1146, 1163, 1148, 1149, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1150, 1171, 1172, 1175, 1176,    0,
     1152, 1153,    0, 1154,    0,    0, 1156,    0, 1157, 1160,
        0, 1161,    0, 1163,    0,    0, 1164, 1165, 1166, 1167,

     1168, 1169, 1170, 1185, 1171, 1172, 1175, 1176, 1179, 1179,
     1179, 1180, 1180, 1180, 1181, 1181, 1181, 1182, 1182, 1182,
     1183, 1183, 1183, 1183, 1184, 1184, 1184, 1186, 1187, 1188,
     1189, 1191, 1185, 1183, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1186, 1187, 1188, 1189,
     1191, 1194, 1183, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1225, 1226, 1228, 1229, 1230, 1232, 1239, 1241, 1242, 1243,

     1244, 1245, 1246, 1247, 1248, 1249, 1232, 1250, 1252, 1253,
     1254, 1256, 1257, 1258, 1218, 1219, 1220, 1221, 1222, 1225,
     1226, 1228, 1229, 1230, 1232, 1239, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1232, 1250, 1252, 1253, 1254,
     1256, 1257, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267,
     1269, 1270, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1288, 1289, 1292, 1292, 1292, 1293,
     1293, 1293, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1269,
     1270, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1288, 1289, 1294, 1294, 1294, 1295, 1295,

     1295, 1296, 1300, 1301, 1296, 1296, 1296, 1297, 1297, 1297,
     1298, 1298, 1298, 1299, 1302, 1303, 1296, 1304, 1306,    0,
     1310, 1309, 1311, 1312, 1313, 1314, 1299, 1299, 1299, 1315,
     1316, 1300, 1301, 1317, 1318, 1319, 1320, 1322, 1323, 1324,
     1326, 1327, 1328, 1302, 1303, 1296, 1304, 1306, 1309, 1310,
     1309, 1311, 1312, 1313, 1314, 1329, 1330, 1331, 1315, 1316,
     1332, 1333, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326,
     1327, 1328, 1334, 1335, 1336, 1337, 1340, 1341, 1343, 1344,
     1345, 1347, 1354, 1356, 1329, 1330, 1331, 1357, 1358, 1332,
     1333, 1359, 1347, 1360, 1361, 1362, 1363, 1364, 1365, 1367,

     1368, 1334, 1335, 1336, 1337, 1340, 1341, 1343, 1344, 1345,
     1347, 1354, 1356, 1369, 1371, 1372, 1357, 1358, 1373, 1374,
     1359, 1347, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368,
     1376, 1377, 1378, 1380, 1381, 1382, 1384, 1385, 1388, 1389,
     1391, 1392, 1369, 1371, 1372, 1393, 1394, 1373, 1374, 1395,
     1396, 1397, 1398, 1399, 1400, 1403, 1404, 1408, 1409, 1376,
     1377, 1378, 1380, 1381, 1382, 1384, 1385, 1388, 1389, 1391,
     1392, 1410, 1411, 1412, 1393, 1394, 1413, 1414, 1395, 1396,
     1397, 1398, 1399, 1400, 1403, 1404, 1408, 1409, 1415, 1416,
     1417, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,

     1410, 1411, 1412, 1429, 1431, 1413, 1414, 1432, 1433, 1434,
     1438, 1439, 1442, 1443, 1445, 1447, 1448, 1415, 1416, 1417,
     1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1449,
     1453, 1455, 1429, 1431, 1456, 1460, 1432, 1433, 1434, 1438,
     1439, 1442, 1443, 1445, 1447, 1448, 1462, 1464, 1465, 1466,
     1468, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1449, 1453,
     1455, 1477, 1478, 1456, 1460, 1480, 1481, 1482, 1485, 1486,
     1487, 1489, 1491, 1492, 1493, 1462, 1464, 1465, 1466, 1468,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1494, 1495, 1496,
     1477, 1478, 1497, 1498, 1480, 1481, 1482, 1485, 1486, 1487,

     1489, 1491, 1492, 1493, 1499, 1500, 1503, 1504, 1505, 1506,
     1507, 1508, 1509, 1510, 1511, 1512, 1494, 1495, 1496, 1514,
     1515, 1497, 1498, 1516, 1517, 1521, 1522, 1525, 1526, 1528,
     1530, 1531, 1532, 1499, 1500, 1503, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1511, 1512, 1536, 1538, 1539, 1514, 1515,
     1543, 1545, 1516, 1517, 1521, 1522, 1525, 1526, 1528, 1530,
     1531, 1532, 1547, 1548, 1549, 1551, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1536, 1538, 1539, 1561, 1563, 1543,
     1545, 1564, 1565, 1568, 1569, 1570, 1572, 1574, 1574, 1574,
     1576, 1547, 1548, 1549, 1551, 1553, 1554, 1555, 1556, 1557,

     1558, 1559, 1560, 1577, 1578, 1579, 1561, 1563, 1580, 1581,
     1564, 1565, 1568, 1569, 1570, 1572, 1582, 1583, 1584, 1576,
     1585, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1599, 1577, 1578, 1579, 1600, 1601, 1580, 1581, 1602,
     1606, 1607, 1610, 1611, 1613, 1582, 1583, 1584, 1615, 1585,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
     1599, 1616, 1617, 1621, 1600, 1601, 1623, 1624, 1602, 1606,
     1607, 1610, 1611, 1613, 1628, 1630, 1632, 1615, 1633, 1634,
     1636, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
     1616, 1617, 1621, 1648, 1649, 1623, 1624, 1650, 1653, 1654,

     1655, 1657,    0, 1628, 1630, 1632,    0, 1633, 1634, 1636,
     1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1658,
     1658, 1658, 1648, 1649, 1663, 1664, 1650, 1653, 1654, 1655,
     1657, 1660, 1660, 1660, 1661, 1661, 1661, 1665, 1666, 1667,
     1668, 1669, 1670, 1671, 1672, 1675, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1663, 1664, 1683, 1684, 1686, 1687, 1688,
     1689, 1693, 1694, 1697, 1698, 1700, 1665, 1666, 1667, 1668,
     1669, 1670, 1671, 1672, 1675, 1676, 1677, 1678, 1679, 1680,
     1681, 1682, 1702, 1703, 1683, 1684, 1686, 1687, 1688, 1689,
     1693, 1694, 1697, 1698, 1700, 1704, 1708, 1710, 1711, 1715,

     1717, 1719, 1720, 1721, 1723, 1725, 1726, 1727, 1728, 1729,
     1730, 1702, 1703, 1731, 1732, 1733, 1735, 1736, 1737, 1740,
     1741, 1742, 1744, 1745, 1704, 1708, 1710, 1711, 1715, 1717,
     1719, 1720, 1721, 1723, 1725, 1726, 1727, 1728, 1729, 1730,
     1746, 1748, 1731, 1732, 1733, 1735, 1736, 1737, 1740, 1741,
     1742, 1744, 1745, 1749, 1750, 1751, 1752, 1754, 1755, 1756,
     1758, 1759, 1761, 1763, 1766, 1768, 1769, 1770, 1771, 1746,
     1748, 1775, 1776, 1777, 1779, 1780, 1781, 1784, 1785, 1786,
     1787, 1788, 1749, 1750, 1751, 1752, 1754, 1755, 1756, 1758,
     1759, 1761, 1763, 1766, 1768, 1769, 1770, 1771, 1789, 1793,

     1775, 1776, 1777, 1779, 1780, 1781, 1784, 1785, 1786, 1787,
     1788, 1794, 1795, 1796, 1798, 1801, 1802, 1804, 1805, 1807,
     1808, 1809, 1810, 1811, 1813, 1814, 1815, 1789, 1793, 1817,
     1818, 1820, 1822, 1825, 1827, 1828, 1829, 1830, 1834, 1835,
     1794, 1795, 1796, 1798, 1801, 1802, 1804, 1805, 1807, 1808,
     1809, 1810, 1811, 1813, 1814, 1815, 1836, 1838, 1817, 1818,
     1820, 1822, 1825, 1827, 1828, 1829, 1830, 1834, 1835, 1839,
     1840, 1843, 1844, 1845, 1846, 1847, 1848, 1852, 1853, 1854,
     1855, 1857, 1860, 1861, 1864, 1836, 1838, 1863, 1863, 1863,
     1865, 1867, 1868, 1869, 1870, 1871, 1873, 1874, 1839, 1840,

     1843, 1844, 1845, 1846, 1847, 1848, 1852, 1853, 1854, 1855,
     1857, 1860, 1861, 1864, 1875, 1877, 1878, 1880, 1882, 1865,
     1867, 1868, 1869, 1870, 1871, 1873, 1874, 1885, 1887, 1888,
     1889, 1890, 1894, 1895, 1896, 1898, 1899, 1900, 1903, 1904,
     1905, 1906, 1907, 1875, 1877, 1878, 1880, 1882, 1908, 1912,
     1913, 1914, 1915, 1917, 1920, 1921, 1885, 1887, 1888, 1889,
     1890, 1894, 1895, 1896, 1898, 1899, 1900, 1903, 1904, 1905,
     1906, 1907, 1923, 1923, 1923, 1926, 1927, 1908, 1912, 1913,
     1914, 1915, 1917, 1920, 1921, 1924, 1924, 1924, 1925, 1925,
     1925, 1929, 1930, 1931, 1932, 1933, 1935, 1936, 1937, 1939,

     1940, 1942, 1944, 1947, 1926, 1927, 1949, 1950, 1951, 1952,
     1956, 1957, 1958, 1960, 1961, 1962, 1965, 1966, 1967, 1968,
     1929, 1930, 1931, 1932, 1933, 1935, 1936, 1937, 1939, 1940,
     1942, 1944, 1947, 1969, 1970, 1949, 1950, 1951, 1952, 1956,
     1957, 1958, 1960, 1961, 1962, 1965, 1966, 1967, 1968, 1974,
     1975, 1976, 1977, 1979, 1982, 1983, 1985, 1987, 1989, 1990,
     1995, 1997, 1969, 1970, 1998, 2001, 2002, 2005, 2006, 2008,
     2009, 2010, 2011, 2012, 2014, 2015, 2016, 2017, 1974, 1975,
     1976, 1977, 1979, 1982, 1983, 1985, 1987, 1989, 1990, 1995,
     1997, 2018, 2019, 1998, 2001, 2002, 2005, 2006, 2008, 2009,

     2010, 2011, 2012, 2014, 2015, 2016, 2017, 2021, 2023, 2025,
     2027, 2028, 2033, 2035, 2036, 2039, 2040, 2043, 2044, 2046,
     2018, 2019, 2047, 2048, 2049, 2050, 2052, 2053, 2054, 2055,
     2056, 2057, 2059, 2061, 2061, 2061, 2021, 2023, 2025, 2027,
     2028, 2033, 2035, 2036, 2039, 2040, 2043, 2044, 2046, 2062,
     2064, 2047, 2048, 2049, 2050, 2052, 2053, 2054, 2055, 2056,
     2057, 2059, 2066, 2067, 2072, 2074, 2075, 2078, 2079, 2082,
     2083, 2085, 2086, 2087, 2088, 2089, 2091, 2092, 2062, 2064,
     2093, 2094, 2095, 2096, 2098, 2100, 2100, 2100, 2101, 2101,
     2101, 2066, 2067, 2072, 2074, 2075, 2078, 2079, 2082, 2083,

     2085, 2086, 2087, 2088, 2089, 2091, 2092, 2102, 2104, 2093,
     2094, 2095, 2096, 2098, 2106, 2107, 2112, 2114, 2115, 2118,
     2119, 2122, 2123, 2125, 2126, 2127, 2128, 2129, 2131, 2132,
     2133, 2134, 2135, 2136, 2138, 2141, 2102, 2104, 2142, 2143,
     2147, 2148, 2149, 2106, 2107, 2112, 2114, 2115, 2118, 2119,
     2122, 2123, 2125, 2126, 2127, 2128, 2129, 2131, 2132, 2133,
     2134, 2135, 2136, 2138, 2141, 2144, 2144, 2142, 2143, 2147,
     2148, 2149, 2150, 2151, 2152, 2153, 2154, 2156, 2144, 2158,
     2144, 2144, 2144, 2159, 2160, 2161, 2162, 2163, 2165, 2166,
     2167,    0,    0, 2171, 2144, 2144, 2172, 2173, 2174, 2175,

     2176, 2150, 2151, 2152, 2153, 2154, 2156, 2144, 2158, 2144,
     2144, 2144, 2159, 2160, 2161, 2162, 2163, 2165, 2166, 2167,
     2168, 2168, 2171, 2177, 2178, 2172, 2173, 2174, 2175, 2176,
     2180, 2182, 2183, 2168, 2184, 2168, 2168, 2168, 2185, 2186,
     2187, 2189, 2190, 2191,    0,    0, 2195, 2196, 2197, 2168,
     2168, 2198, 2177, 2178, 2199, 2200, 2201,    0, 2202, 2180,
     2182, 2183, 2168, 2184, 2168, 2168, 2168, 2185, 2186, 2187,
     2189, 2190, 2191, 2192, 2192, 2195, 2196, 2197, 2204, 2206,
     2198, 2207, 2208, 2199, 2200, 2201, 2192, 2202, 2192, 2192,
     2192, 2209, 2210, 2211, 2213, 2214, 2215,    0, 2219,    0,

        0,    0, 2192, 2192, 2220, 2221, 2222, 2204, 2206, 2223,
     2207, 2208, 2224, 2216, 2216, 2192, 2225, 2192, 2192, 2192,
     2209, 2210, 2211, 2213, 2214, 2215, 2216, 2219, 2216, 2216,
     2216, 2226, 2228, 2220, 2221, 2222, 2230, 2231, 2223, 2232,
     2233, 2224, 2216, 2216, 2234, 2225, 2235, 2236, 2238, 2239,
     2240, 2241, 2242, 2243, 2240, 2216, 2244, 2216, 2216, 2216,
     2226, 2228, 2245, 2246, 2249, 2230, 2231, 2251, 2232, 2233,
     2254, 2260, 2262, 2234, 2263, 2235, 2236, 2238, 2239, 2240,
     2241, 2242, 2243, 2240, 2264, 2244, 2265, 2266, 2264, 2267,
     2268, 2245, 2246, 2249, 2269, 2270, 2251, 2273, 2275, 2254,

     2260, 2262, 2278, 2263, 2284, 2286, 2287, 2288, 2289, 2290,
     2291, 2288, 2292, 2264, 2293, 2265, 2266, 2264, 2267, 2268,
     2294, 2297, 2299, 2269, 2270, 2302, 2273, 2275, 2308, 2310,
     2311, 2278, 2313, 2284, 2286, 2287, 2288, 2289, 2290, 2291,
     2288, 2292, 2312, 2293, 2314, 2315, 2312, 2316, 2317, 2294,
     2297, 2299, 2318, 2321, 2302, 2323, 2326, 2308, 2310, 2311,
     2333, 2313, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341,
     2342, 2312, 2344, 2314, 2315, 2312, 2316, 2317, 2347, 2348,
     2349, 2318, 2321, 2350, 2323, 2326, 2351, 2352, 2353, 2333,
     2354, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,

     2355, 2344, 2356, 2358, 2361, 2362, 2363, 2347, 2348, 2349,
     2364, 2365, 2350, 2366, 2367, 2351, 2352, 2353, 2368, 2354,
     2369, 2370, 2372, 2375, 2376, 2377, 2378, 2379, 2380, 2355,
     2381, 2356, 2358, 2361, 2362, 2363, 2382, 2383, 2384, 2364,
     2365, 2386, 2366, 2367, 2389, 2390, 2391, 2368, 2392, 2369,
     2370, 2372, 2375, 2376, 2377, 2378, 2379, 2380, 2393, 2381,
     2394, 2395, 2396, 2398, 2400, 2382, 2383, 2384, 2401, 2402,
     2386, 2403, 2404, 2389, 2390, 2391, 2405, 2392, 2406, 2407,
     2409, 2411, 2412, 2413, 2414, 2415, 2416, 2393, 2417, 2394,
     2395, 2396, 2398, 2400, 2418, 2420, 2422, 2401, 2402, 2423,

     2403, 2404, 2424, 2425, 2426, 2405, 2427, 2406, 2407, 2409,
     2411, 2412, 2413, 2414, 2415, 2416, 2428, 2417, 2429, 2431,
     2432, 2434, 2437, 2418, 2420, 2422, 2438, 2441, 2423, 2443,
     2446, 2424, 2425, 2426, 2447, 2427, 2450, 2452, 2455, 2456,
     2459, 2461, 2464, 2465, 2468, 2428, 2469, 2429, 2431, 2432,
     2434, 2437, 2470, 2471, 2472, 2438, 2441, 2473, 2443, 2446,
     2474, 2475, 2476, 2447, 2477, 2450, 2452, 2455, 2456, 2459,
     2461, 2464, 2465, 2468, 2478, 2469, 2479, 2480, 2481, 2482,
     2483, 2470, 2471, 2472, 2484, 2485, 2473, 2487, 2488, 2474,
     2475, 2476, 2489, 2477, 2491, 2492, 2493, 2495, 2496, 2497,

     2499, 2502, 2505, 2478, 2508, 2479, 2480, 2481, 2482, 2483,
     2511, 2512, 2513, 2484, 2485, 2514, 2487, 2488, 2515, 2516,
     2517, 2489, 2518, 2491, 2492, 2493, 2495, 2496, 2497, 2499,
     2502, 2505, 2519, 2508, 2520, 2522, 2524, 2526, 2528, 2511,
     2512, 2513, 2529, 2530, 2514, 2531, 2532, 2515, 2516, 2517,
     2533, 2518, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
     2542, 2519, 2543, 2520, 2522, 2524, 2526, 2528, 2544, 2545,
     2546, 2529, 2530, 2547, 2531, 2532, 2548, 2549, 2550, 2533,
     2551, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542,
     2552, 2543, 2553, 2554, 2555, 2560, 2561, 2544, 2545, 2546,

     2562, 2563, 2547, 2564, 2565, 2548, 2549, 2550, 2566, 2551,
     2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2552,
     2576, 2553, 2554, 2555, 2560, 2561, 2577, 2578, 2579, 2562,
     2563,    0, 2564, 2565,    0,    0,    0, 2566,    0, 2567,
     2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,    0, 2576,
        0,    0,    0,    0,    0, 2577, 2578, 2579, 2585,    0,
     2585, 2586,    0, 2586, 2587, 2587, 2587, 2587, 2587, 2588,
        0, 2588, 2588, 2588, 2588, 2588, 2588, 2589,    0,    0,
     2589, 2589, 2589,    0, 2589, 2590, 2590, 2590, 2590, 2590,
     2590, 2590, 2590, 2591, 2591, 2591, 2591, 2591, 2591, 2591,

     2591, 2592,    0, 2592, 2592, 2592, 2592, 2592, 2592, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2585 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2584 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 147:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 148:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 149:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 150:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 151:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 152:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 153:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 154:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 157:
case 158:
case 159:
case 160:
case 161:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 166:
case 167:
case 168:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 169:
case 170:
case 171:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 172:
case 173:
case 174:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 175:
case 176:
case 177:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 179:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 180:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 181:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 183:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 184:
/* rule 184 can match eol */
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 187:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 190:
YY_RULE_SETUP
{}
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 192:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%" PRIu64 ")", SQLyytext[0], SQLyytext[0], (uint64_t) SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 193:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2585 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2585 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2584);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

