#line 3 "d:\\dev\\bsw\\dgndb\\0601dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "d:\\dev\\bsw\\dgndb\\0601dev\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 259
#define YY_END_OF_BUFFER 260
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3669] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      254,  254,  260,  258,  256,  255,  258,  220,  247,  220,
      212,  214,  213,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  220,  245,  220,
      222,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  248,  246,  249,  220,
      220,  229,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  220,  229,  258,
      254,  254,  254,  254,  252,  220,  220,  220,  220,  212,
      214,  213,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  253,  220,  256,  218,
        0,  215,  217,  216,    0,    0,    0,    0,    7,    9,
        0,    0,    0,    0,    0,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,  103,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,    0,    0,    0,    0,  140,    0,  143,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  188,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  219,  223,    0,  224,  222,
        0,  221,  221,  221,  221,  221,    7,    9,  221,  221,
      221,  221,  221,  221,  221,   21,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,   93,  103,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      129,  221,  221,  221,  221,  140,  221,  143,  221,  146,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  188,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  244,  234,  244,  244,  244,  229,  244,
      228,  228,  228,  228,  228,    7,    9,  228,  228,  228,
      228,  228,  228,  228,   21,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   93,  103,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  129,
      228,  228,  228,  228,  140,  228,  143,  228,  146,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      188,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  240,  244,  244,  244,  229,  244,    0,  250,
      254,  254,  218,  254,  215,  217,  216,  254,  254,  254,
      254,    7,    9,  254,  254,  254,  254,  254,  254,  254,

       21,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,   93,  103,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  129,  254,  254,  254,  254,
      140,  254,  143,  254,  146,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  188,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  219,    0,
      257,    0,    2,    0,    4,    5,    0,    8,    0,    0,

       12,    0,    0,    0,    0,    0,   18,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   51,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   81,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,    0,  105,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  117,
      119,    0,    0,    0,    0,  127,    0,  130,  131,    0,
        0,    0,    0,    0,    0,    0,  142,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  167,    0,    0,
        0,  174,    0,    0,    0,    0,    0,  179,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      227,  224,    0,    0,  225,  221,    2,  221,    4,    5,
      221,    8,  221,  221,   12,  221,  221,  221,  221,  221,
       18,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,   51,   56,  221,  221,
      221,  221,  221,  221,  221,  221,  221,   68,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,   81,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,   97,
      221,  105,  106,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  117,  119,  221,  221,  221,  221,  127,
      221,  130,  131,  221,  221,  221,  221,  221,  221,  221,
      142,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  167,  221,  221,  221,  174,  221,  221,  221,  221,
      221,  179,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,    0,  237,  244,  232,  244,  229,    0,

      235,  228,    2,  228,    4,    5,  228,    8,  228,  228,
       12,  228,  228,  228,  228,  228,   18,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,   51,   56,  228,  228,  228,  228,  228,  228,
      228,  228,  228,   68,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,   81,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   97,  228,  105,  106,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  117,
      119,  228,  228,  228,  228,  127,  228,  130,  131,  228,
      228,  228,  228,  228,  228,  228,  142,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  167,  228,  228,
      228,  174,  228,  228,  228,  228,  228,  179,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,    0,
      243,  238,  244,  244,  229,    0,  241,  250,    0,  250,
      254,  254,  254,    2,  254,    4,    5,  254,    8,  254,
      254,   12,  254,  254,  254,  254,  254,   18,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,   51,   56,  254,  254,  254,  254,  254,

      254,  254,  254,  254,   68,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,   81,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   97,  254,  105,  106,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      117,  119,  254,  254,  254,  254,  127,  254,  130,  131,
      254,  254,  254,  254,  254,  254,  254,  142,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  167,  254,
      254,  254,  174,  254,  254,  254,  254,  254,  179,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,    0,   22,   23,   24,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,   61,    0,    0,   64,
       65,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   86,   87,    0,
        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
      102,  104,    0,  108,  110,  111,  112,    0,    0,  115,
        0,    0,    0,    0,    0,    0,    0,    0,  128,    0,

        0,  134,    0,    0,    0,    0,  144,    0,    0,    0,
        0,  150,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  162,    0,    0,    0,    0,  168,    0,    0,    0,
        0,    0,  176,    0,    0,    0,    0,  182,  183,    0,
        0,    0,  191,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  204,  205,  206,    0,  208,  210,
      211,    0,  226,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,   20,  221,   22,   23,   24,  221,
       28,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,   47,  221,  221,  221,  221,  221,  221,   61,

      221,  221,   64,   65,  221,   67,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
       86,   87,  221,  221,  221,   91,  221,  221,  221,  221,
      221,  221,  221,  102,  104,  221,  108,  110,  111,  112,
      221,  221,  115,  221,  221,  221,  221,  221,  221,  221,
      221,  128,  221,  221,  134,  221,  221,  221,  221,  144,
      221,  221,  221,  221,  150,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  162,  221,  221,  221,  221,  168,
      221,  221,  221,  221,  221,  176,  221,  221,  221,  221,
      182,  183,  221,  221,  221,  191,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  204,  205,  206,
      221,  208,  210,  211,  237,  244,    0,  236,  229,  235,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   20,  228,   22,   23,   24,  228,   28,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   47,
      228,  228,  228,  228,  228,  228,   61,  228,  228,   64,
       65,  228,   67,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   86,   87,  228,
      228,  228,   91,  228,  228,  228,  228,  228,  228,  228,
      102,  104,  228,  108,  110,  111,  112,  228,  228,  115,

      228,  228,  228,  228,  228,  228,  228,  228,  128,  228,
      228,  134,  228,  228,  228,  228,  144,  228,  228,  228,
      228,  150,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  162,  228,  228,  228,  228,  168,  228,  228,  228,
      228,  228,  176,  228,  228,  228,  228,  182,  183,  228,
      228,  228,  191,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  204,  205,  206,  228,  208,  210,
      211,  243,    0,  242,  244,  229,  241,    0,  250,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       20,  254,   22,   23,   24,  254,   28,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,   47,  254,
      254,  254,  254,  254,  254,   61,  254,  254,   64,   65,
      254,   67,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   86,   87,  254,  254,
      254,   91,  254,  254,  254,  254,  254,  254,  254,  102,
      104,  254,  108,  110,  111,  112,  254,  254,  115,  254,
      254,  254,  254,  254,  254,  254,  254,  128,  254,  254,
      134,  254,  254,  254,  254,  144,  254,  254,  254,  254,
      150,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      162,  254,  254,  254,  254,  168,  254,  254,  254,  254,

      254,  176,  254,  254,  254,  254,  182,  183,  254,  254,
      254,  191,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  204,  205,  206,  254,  208,  210,  211,
        1,    3,    0,    0,    0,    0,    0,   14,    0,    0,
        0,    0,    0,    0,   27,    0,    0,    0,    0,    0,
       34,    0,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,   75,   76,   77,   79,    0,    0,
        0,   85,    0,   89,    0,    0,   94,    0,    0,   98,
       99,    0,    0,  107,    0,  113,  114,  116,  118,    0,

      121,    0,    0,  125,  126,    0,  133,    0,  136,    0,
        0,    0,    0,    0,  147,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,    0,    0,  170,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  181,
        0,    0,    0,    0,    0,  193,    0,    0,    0,  197,
      198,  202,    0,    0,    0,  207,    0,    1,    3,  221,
      221,  221,  221,  221,   14,  221,  221,  221,  221,  221,
      221,   27,  221,  221,  221,  221,  221,   34,  221,   36,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,   69,  221,  221,  221,

      221,   75,   76,   77,   79,  221,  221,  221,   85,  221,
       89,  221,  221,   94,  221,  221,   98,   99,  221,  221,
      107,  221,  113,  114,  116,  118,  221,  121,  221,  221,
      125,  126,  221,  133,  221,  136,  221,  221,  221,  221,
      221,  147,  221,  149,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  161,  221,  221,  170,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  181,  221,  221,  221,
      221,  221,  193,  221,  221,  221,  197,  198,  202,  221,
      221,  221,  207,  221,  230,  236,    1,    3,  228,  228,
      228,  228,  228,   14,  228,  228,  228,  228,  228,  228,

       27,  228,  228,  228,  228,  228,   34,  228,   36,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   69,  228,  228,  228,  228,
       75,   76,   77,   79,  228,  228,  228,   85,  228,   89,
      228,  228,   94,  228,  228,   98,   99,  228,  228,  107,
      228,  113,  114,  116,  118,  228,  121,  228,  228,  125,
      126,  228,  133,  228,  136,  228,  228,  228,  228,  228,
      147,  228,  149,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  161,  228,  228,  170,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  181,  228,  228,  228,  228,

      228,  193,  228,  228,  228,  197,  198,  202,  228,  228,
      228,  207,  228,  242,  231,    0,  251,    1,    3,  254,
      254,  254,  254,  254,   14,  254,  254,  254,  254,  254,
      254,   27,  254,  254,  254,  254,  254,   34,  254,   36,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   69,  254,  254,  254,
      254,   75,   76,   77,   79,  254,  254,  254,   85,  254,
       89,  254,  254,   94,  254,  254,   98,   99,  254,  254,
      107,  254,  113,  114,  116,  118,  254,  121,  254,  254,
      125,  126,  254,  133,  254,  136,  254,  254,  254,  254,

      254,  147,  254,  149,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  161,  254,  254,  170,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  181,  254,  254,  254,
      254,  254,  193,  254,  254,  254,  197,  198,  202,  254,
      254,  254,  207,  254,    0,   10,    0,    0,   13,    0,
       17,    0,    0,    0,    0,    0,    0,   31,    0,    0,
       35,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   60,    0,   63,    0,   70,   71,
        0,   73,    0,    0,    0,    0,    0,    0,   90,   92,
       95,    0,    0,    0,    0,    0,  120,    0,    0,    0,

        0,  135,    0,  138,    0,  141,  145,  148,    0,    0,
        0,    0,    0,    0,    0,    0,  159,    0,    0,    0,
        0,    0,  171,  172,  173,    0,    0,  180,    0,    0,
        0,    0,    0,    0,  194,    0,  196,  203,    0,    0,
        0,  209,  221,   10,  221,  221,   13,  221,   17,  221,
      221,  221,  221,  221,  221,   31,  221,  221,   35,  221,
      221,   46,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,   60,  221,   63,  221,   70,   71,  221,   73,
      221,  221,  221,  221,  221,  221,   90,   92,   95,  221,
      221,  221,  221,  221,  120,  221,  221,  221,  221,  135,

      221,  138,  221,  141,  145,  148,  221,  221,  221,  221,
      221,  221,  221,  221,  159,  221,  221,  221,  221,  221,
      171,  172,  173,  221,  221,  180,  221,  221,  221,  221,
      221,  221,  194,  221,  196,  203,  221,  221,  221,  209,
      244,  228,   10,  228,  228,   13,  228,   17,  228,  228,
      228,  228,  228,  228,   31,  228,  228,   35,  228,  228,
       46,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   60,  228,   63,  228,   70,   71,  228,   73,  228,
      228,  228,  228,  228,  228,   90,   92,   95,  228,  228,
      228,  228,  228,  120,  228,  228,  228,  228,  135,  228,

      138,  228,  141,  145,  148,  228,  228,  228,  228,  228,
      228,  228,  228,  159,  228,  228,  228,  228,  228,  171,
      172,  173,  228,  228,  180,  228,  228,  228,  228,  228,
      228,  194,  228,  196,  203,  228,  228,  228,  209,  244,
      251,  251,  254,   10,  254,  254,   13,  254,   17,  254,
      254,  254,  254,  254,  254,   31,  254,  254,   35,  254,
      254,   46,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,   60,  254,   63,  254,   70,   71,  254,   73,
      254,  254,  254,  254,  254,  254,   90,   92,   95,  254,
      254,  254,  254,  254,  120,  254,  254,  254,  254,  135,

      254,  138,  254,  141,  145,  148,  254,  254,  254,  254,
      254,  254,  254,  254,  159,  254,  254,  254,  254,  254,
      171,  172,  173,  254,  254,  180,  254,  254,  254,  254,
      254,  254,  194,  254,  196,  203,  254,  254,  254,  209,
        0,    0,    0,   15,    0,   16,    0,    0,    0,   30,
        0,   33,   44,   37,    0,    0,    0,   52,    0,    0,
        0,   57,   58,   59,    0,    0,   72,   74,    0,    0,
       82,   83,    0,   96,   97,    0,    0,    0,    0,    0,
      124,    0,  137,    0,    0,  152,  153,    0,    0,    0,
      157,    0,  160,    0,  165,    0,    0,    0,    0,    0,

        0,    0,    0,  190,    0,  195,    0,  200,  201,  221,
      221,  221,   15,  221,   16,  221,  221,  221,   30,  221,
       33,   44,   37,  221,  221,  221,   52,  221,  221,  221,
       57,   58,   59,  221,  221,   72,   74,  221,  221,   82,
       83,  221,   96,   97,  221,  221,  221,  221,  221,  124,
      221,  137,  221,  221,  152,  153,  221,  221,  221,  157,
      221,  160,  221,  165,  221,  221,  221,  221,  221,  221,
      221,  221,  190,  221,  195,  221,  200,  201,  233,  228,
      228,  228,   15,  228,   16,  228,  228,  228,   30,  228,
       33,   44,   37,  228,  228,  228,   52,  228,  228,  228,

       57,   58,   59,  228,  228,   72,   74,  228,  228,   82,
       83,  228,   96,   97,  228,  228,  228,  228,  228,  124,
      228,  137,  228,  228,  152,  153,  228,  228,  228,  157,
      228,  160,  228,  165,  228,  228,  228,  228,  228,  228,
      228,  228,  190,  228,  195,  228,  200,  201,  239,  251,
      254,  254,  254,   15,  254,   16,  254,  254,  254,   30,
      254,   33,   44,   37,  254,  254,  254,   52,  254,  254,
      254,   57,   58,   59,  254,  254,   72,   74,  254,  254,
       82,   83,  254,   96,   97,  254,  254,  254,  254,  254,
      124,  254,  137,  254,  254,  152,  153,  254,  254,  254,

      157,  254,  160,  254,  165,  254,  254,  254,  254,  254,
      254,  254,  254,  190,  254,  195,  254,  200,  201,    0,
        0,   84,    0,    0,    0,   29,   32,    0,   48,   49,
        0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
      101,    0,    0,  123,    0,    0,    0,  154,    0,    0,
        0,    0,  166,    0,  175,    0,    0,    0,    0,    0,
        0,    0,  221,  221,   84,  221,  221,  221,   29,   32,
      221,   48,   49,  221,  221,  221,  221,   62,  221,  221,
      221,  221,  221,  101,  221,  221,  123,  221,  221,  221,
      154,  221,  221,  221,  221,  166,  221,  175,  221,  221,

      221,  221,  221,  221,  221,  228,  228,   84,  228,  228,
      228,   29,   32,  228,   48,   49,  228,  228,  228,  228,
       62,  228,  228,  228,  228,  228,  101,  228,  228,  123,
      228,  228,  228,  154,  228,  228,  228,  228,  166,  228,
      175,  228,  228,  228,  228,  228,  228,  228,  254,  254,
       84,  254,  254,  254,   29,   32,  254,   48,   49,  254,
      254,  254,  254,   62,  254,  254,  254,  254,  254,  101,
      254,  254,  123,  254,  254,  254,  154,  254,  254,  254,
      254,  166,  254,  175,  254,  254,  254,  254,  254,  254,
      254,    6,    0,    0,   25,    0,    0,    0,    0,    0,

        0,    0,   50,    0,   54,   55,    0,    0,   80,    0,
      100,    0,  122,  132,    0,  151,  155,  156,  158,    0,
        0,    0,  177,  178,  184,  187,  189,  192,  199,    6,
      221,  221,   25,  221,  221,  221,  221,  221,  221,  221,
       50,  221,   54,   55,  221,  221,   80,  221,  100,  221,
      122,  132,  221,  151,  155,  156,  158,  221,  221,  221,
      177,  178,  184,  187,  189,  192,  199,    6,  228,  228,
       25,  228,  228,  228,  228,  228,  228,  228,   50,  228,
       54,   55,  228,  228,   80,  228,  100,  228,  122,  132,
      228,  151,  155,  156,  158,  228,  228,  228,  177,  178,

      184,  187,  189,  192,  199,    6,  254,  254,   25,  254,
      254,  254,  254,  254,  254,  254,   50,  254,   54,   55,
      254,  254,   80,  254,  100,  254,  122,  132,  254,  151,
      155,  156,  158,  254,  254,  254,  177,  178,  184,  187,
      189,  192,  199,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,   53,    0,    0,    0,  109,    0,  163,
        0,  169,    0,    0,  221,   19,  221,  221,  221,  221,
      221,  221,  221,  221,   53,  221,  221,  221,  109,  221,
      163,  221,  169,  221,  221,  228,   19,  228,  228,  228,
      228,  228,  228,  228,  228,   53,  228,  228,  228,  109,

      228,  163,  228,  169,  228,  228,  254,   19,  254,  254,
      254,  254,  254,  254,  254,  254,   53,  254,  254,  254,
      109,  254,  163,  254,  169,  254,  254,    0,   26,    0,
        0,    0,    0,    0,    0,    0,    0,   78,    0,    0,
      164,    0,    0,  221,   26,  221,  221,  221,  221,  221,
      221,  221,  221,   78,  221,  221,  164,  221,  221,  228,
       26,  228,  228,  228,  228,  228,  228,  228,  228,   78,
      228,  228,  164,  228,  228,  254,   26,  254,  254,  254,
      254,  254,  254,  254,  254,   78,  254,  254,  164,  254,
      254,    0,    0,   38,    0,   41,   42,    0,    0,   66,

       88,  139,  185,    0,  221,  221,   38,  221,   41,   42,
      221,  221,   66,   88,  139,  185,  221,  228,  228,   38,
      228,   41,   42,  228,  228,   66,   88,  139,  185,  228,
      254,  254,   38,  254,   41,   42,  254,  254,   66,   88,
      139,  185,  254,   11,    0,    0,    0,    0,  186,   11,
      221,  221,  221,  221,  186,   11,  228,  228,  228,  228,
      186,   11,  254,  254,  254,  254,  186,    0,    0,   43,
        0,  221,  221,   43,  221,  228,  228,   43,  228,  254,
      254,   43,  254,   39,    0,    0,   39,  221,  221,   39,
      228,  228,   39,  254,  254,    0,    0,  221,  221,  228,

      228,  254,  254,    0,   45,  221,   45,  228,   45,  254,
       45,    0,  221,  228,  254,    0,  221,  228,  254,    0,
      221,  228,  254,    0,  221,  228,  254,    0,  221,  228,
      254,    0,  221,  228,  254,    0,  221,  228,  254,    0,
      221,  228,  254,    0,  221,  228,  254,    0,  221,  228,
      254,    0,  221,  228,  254,    0,  221,  228,  254,    0,
      221,  228,  254,   40,   40,   40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       11,   12,   13,   14,   15,   16,   11,   17,   17,   18,
       19,   20,   17,   21,   17,   17,   17,   22,   11,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,    1,    1,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   11,   82,   11,    9,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    1,    3,
        1,    5,    1,    4,    1,    4,    6,    6,    6,    6,
        6,    3,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    8
    } ;

static yyconst flex_int16_t yy_base[3677] =
    {   0,
        0,    0,   83,    0,  166,    0,  236,  244,  252,  260,
      281,    0, 1091, 7902,  363, 7902, 1066, 7902, 7902, 1073,
      344, 7902, 1062,  338,  365,  390,  392,  440,  493,  335,
      348,  410,  331,  342,  446,  441,  498,  547,  491,  333,
      495,  551,  598,  541,  395,  600,  350, 1002, 7902,  626,
      656,  685,  654,  701,  709,  756,  809,  410,  543,  747,
      350,  366,  624,  656,  814,  863,  761,  395,  762,  867,
      914,  806,  459,  823,    0,  433, 7902, 7902, 7902,    0,
      933,  955,  984,  982, 1029, 1037, 1084, 1137,  557,  626,
      923,  433,  444, 1048,  714, 1090, 1186, 1079,  445, 1142,

     1190, 1237,  857,  602,  948,    0,  481,  983, 1266,  681,
        0,  386,    0, 1058, 7902,    0,    0, 1062, 7902,  369,
        0, 1023, 1295, 1264, 1311, 1319, 1366, 1419,  678,  754,
      965,  472,  502, 1359, 1039, 1424, 1473, 1135,  496, 1372,
     1477, 1524, 1085,  763, 1367,  517, 7902,  962,  436, 7902,
     1038, 7902, 7902, 7902,  525,  753,  808,  534,  611,  608,
      604,  657,  679, 1082,  854,  686,  702, 7902,  702,  934,
      745, 1516,  808,  756,  916, 1142,  768,  805,  863,  886,
      871,  872,  888,  930,  935,  990,  968,  975,  982,  999,
     1400, 1030, 1049, 1092, 1100, 1140, 1147, 1156, 1200, 7902,

     1185, 1171, 1194, 1262, 1240, 1419, 1242, 1201, 1250, 1250,
     1298, 1298, 1342, 1362, 1423, 1286, 1284, 1305, 1323, 1342,
     1359, 1380, 1378, 1403, 1421, 1412, 1429, 1497, 1430, 1442,
     1456, 1537, 1471, 1522, 1473, 1557, 1483, 1473, 1535, 1542,
     1545, 1544, 1570, 7902, 1578, 1579, 1576, 1555, 1579, 1581,
     1589, 1590, 1576, 1582, 1600, 7902, 1640, 1649, 1655, 1661,
     1670,    0, 1619, 1655, 1654, 1651, 1667, 1656, 1652, 1666,
     1673, 1671, 1666, 1666, 1667,    0, 1664, 1683, 1670, 1715,
     1688, 1672, 1672, 1727, 1675, 1697, 1709, 1722, 1712, 1715,
     1731, 1734, 1733, 1741, 1728, 1721, 1724, 1728, 1762, 1733,

     1737, 1732, 1740, 1754, 1761, 1771, 1772,    0, 1778, 1763,
     1782, 1792, 1783, 1796, 1782, 1781, 1783, 1784, 1824, 1814,
     1820, 1833, 1832, 1824, 1826, 1841, 1845, 1838, 1831, 1848,
     1845, 1834, 1850, 1838, 1849, 1881, 1857, 1859, 1848, 1892,
     1870, 1880, 1886, 1892, 1898, 1887, 1900, 1900, 1903, 1902,
     1903,    0, 1934, 1937, 1934, 1911, 1939, 1939, 1947, 1948,
     1934, 1938, 1957,    0, 1997, 2006, 1968, 2012, 2020, 2029,
        0, 1945, 2007, 2005, 2008, 2025, 2014, 2012, 2026, 2031,
     2029, 2023, 2024, 2025,    0, 2022, 2046, 2027, 2072, 2045,
     2027, 2057, 2084, 2033, 2054, 2068, 2085, 2072, 2073, 2090,

     2092, 2092, 2098, 2086, 2079, 2082, 2090, 2119, 2094, 2098,
     2113, 2120, 2119, 2121, 2129, 2130,    0, 2136, 2121, 2149,
     2147, 2141, 2177, 2135, 2143, 2144, 2141, 2181, 2171, 2178,
     2194, 2192, 2153, 2179, 2200, 2203, 2196, 2190, 2207, 2204,
     2193, 2209, 2197, 2207, 2241, 2217, 2224, 2224, 2246, 2242,
     2239, 2245, 2254, 2257, 2246, 2259, 2259, 2261, 2259, 2291,
        0, 2296, 2298, 2294, 2261, 2290, 2278, 2279, 2306, 2294,
     2297, 2315, 2327, 2360, 2365, 2371, 2381, 2390, 2396, 2402,
        0,  445,    0, 2423,    0,    0,    0, 2372, 2386, 2400,
     2384, 2402, 2393, 2389, 2403, 2408, 2406, 2400, 2401, 2402,

        0, 2399, 2423, 2407, 2447, 2447, 2411, 2444, 2460, 2417,
     2423, 2441, 2464, 2451, 2452, 2470, 2472, 2471, 2503, 2466,
     2460, 2464, 2469, 2498, 2471, 2490, 2494, 2502, 2496, 2499,
     2507, 2508,    0, 2515, 2500, 2519, 2528, 2519, 2557, 2516,
     2519, 2530, 2544, 2560, 2551, 2556, 2569, 2569, 2560, 2563,
     2578, 2581, 2574, 2567, 2584, 2582, 2571, 2587, 2576, 2609,
     2617, 2593, 2595, 2584, 2629, 2595, 2617, 2625, 2633, 2633,
     2624, 2638, 2636, 2639, 2637, 2639,    0, 2671, 2677, 2671,
     2645, 2672, 2655, 2671, 2686, 2673, 2676, 2694,    0, 1034,
     7902, 2691, 7902, 2692, 7902, 7902, 2697, 7902, 2686, 2692,

     7902, 2691, 2688, 2697, 2684, 2709,  953, 2709, 2700, 2713,
     2696, 2727, 2732, 2725, 2726, 2729, 2724, 2731, 2747, 2730,
     2746, 2746, 2738, 2745, 2754, 2751, 2755, 2740, 2759, 2752,
     2761, 2753, 2767, 7902, 2775, 2770, 2790, 2772, 2774, 2777,
     2797, 2784, 2803, 2794, 2803, 2793, 2796, 2798, 2806, 2791,
     2804, 2796, 2800, 2811, 2814, 2854, 2808, 7902, 7902, 2816,
     2807, 2824, 2826, 2845, 2844, 2853, 2851, 2855, 2858, 7902,
     2841, 2844, 2856, 2865, 2852, 7902, 2848, 7902, 7902,  945,
     2858, 2859, 2867, 2868, 2869, 2857, 7902, 2853, 2871, 2876,
     2879, 2880, 2868, 2872, 2890, 2899, 2908, 2899, 2913, 2905,

     2900, 2912, 2908, 2917, 2907, 2916, 2913, 2907, 2922, 2913,
     2924, 7902, 2918, 2926, 2912, 2925, 2917, 7902, 2926, 2925,
     2923, 2938, 2930, 2943, 2957, 2949, 2959, 2952, 2968, 2965,
     2961, 2956, 2982, 2957, 2970, 2968, 2975, 2976, 2970, 3027,
     3032, 3037, 3046, 3052, 3057, 3029,    0, 3048,    0,    0,
     3053,    0, 3042, 3048,    0, 3046, 3043, 3050, 3037, 3060,
      927, 3060, 3052, 3060, 3048, 3064, 3066, 3057, 3058, 3059,
     3053, 3060, 3075, 3058, 3096, 3073, 3096, 3104, 3078, 3087,
     3109, 3097, 3116, 3103, 3112, 3105, 3118,    0, 3123, 3107,
     3121, 3108, 3110, 3111, 3128, 3113, 3133, 3123, 3145, 3122,

     3124, 3126, 3153, 3148, 3161, 3153, 3157, 3168, 3169, 3189,
     3162,    0,    0, 3170, 3158, 3176, 3161, 3178, 3176, 3185,
     3181, 3185, 3188,    0, 3171, 3173, 3187, 3194, 3196,    0,
     3193,    0,    0,  926, 3204, 3214, 3222, 3223, 3224, 3211,
        0, 3206, 3223, 3229, 3230, 3231, 3220, 3219, 3227, 3234,
     3241, 3233, 3244, 3236, 3231, 3243, 3239, 3247, 3237, 3246,
     3250, 3265, 3261, 3254, 3266,    0, 3262, 3280, 3266, 3278,
     3269,    0, 3277, 3276, 3273, 3289, 3282, 3290, 3294, 3286,
     3287, 3291, 3305, 3302, 3294, 3288, 3337, 3289, 3309, 3328,
     3314, 3313, 3309, 3366, 3372, 3385, 3390, 3405, 3413, 3395,

     3418, 3338,    0, 3339,    0,    0, 3344,    0, 3380, 3394,
        0, 3403, 3400, 3407, 3394, 3418,  906, 3418, 3409, 3418,
     3407, 3423, 3425, 3416, 3417, 3417, 3412, 3419, 3434, 3417,
     3456, 3432, 3425, 3461, 3441, 3446, 3450, 3452, 3474, 3461,
     3470, 3462, 3476,    0, 3482, 3466, 3480, 3467, 3469, 3469,
     3487, 3472, 3492, 3482, 3495, 3481, 3483, 3485, 3493, 3488,
     3502, 3510, 3515, 3526, 3528, 3539, 3521,    0,    0, 3529,
     3517, 3535, 3521, 3537, 3534, 3544, 3539, 3544, 3547,    0,
     3530, 3532, 3546, 3552, 3541,    0, 3538,    0,    0,  903,
     3549, 3551, 3564, 3571, 3581, 3569,    0, 3564, 3582, 3588,

     3589, 3590, 3579, 3579, 3586, 3592, 3599, 3590, 3601, 3594,
     3589, 3601, 3597, 3605, 3595, 3604, 3601, 3597, 3609, 3604,
     3616,    0, 3615, 3629, 3624, 3637, 3628,    0, 3637, 3637,
     3633, 3648, 3640, 3648, 3652, 3643, 3644, 3646, 3661, 3659,
     3651, 3645, 3667, 3644, 3657, 3686, 3664, 3663, 3659, 3716,
     3721, 3731, 3748, 3753, 3761, 3766, 3776, 3784, 3789, 3794,
     3813,    0, 3697,    0, 3700,    0,    0, 3762,    0, 3760,
     3766,    0, 3783, 3781, 3789, 3776, 3799,  868, 3799, 3792,
     3800, 3788, 3804, 3806, 3798, 3800, 3801, 3795, 3802, 3817,
     3800, 3834, 3816, 3817, 3842, 3825, 3837, 3853, 3837, 3856,

     3843, 3854, 3846, 3859,    0, 3864, 3848, 3863, 3850, 3852,
     3853, 3870, 3855, 3875, 3865, 3873, 3865, 3871, 3877, 3885,
     3879, 3900, 3892, 3896, 3907, 3910, 3921, 3903,    0,    0,
     3913, 3901, 3918, 3903, 3919, 3918, 3927, 3924, 3927, 3930,
        0, 3913, 3915, 3933, 3936, 3928,    0, 3925,    0,    0,
      865, 3935, 3936, 3953, 3962, 3963, 3950,    0, 3945, 3964,
     3970, 3973, 3974, 3962, 3961, 3968, 3975, 3982, 3973, 3985,
     3977, 3972, 3984, 3980, 3988, 3978, 3987, 3988, 3984, 3996,
     3990, 4001,    0, 4004, 4020, 4006, 4018, 4009,    0, 4019,
     4019, 4017, 4032, 4024, 4032, 4035, 4026, 4027, 4029, 4045,

     4042, 4034, 4028, 4049, 4027, 4042, 4045, 4050, 4050, 4046,
     4065, 4066, 4060, 4077, 4074, 4068, 4076, 4081, 4091, 4079,
     4086, 7902, 4094, 7902, 7902, 4101, 4090, 7902, 4099, 4104,
     4097, 4098, 4103, 4089, 4090, 4092, 4115, 4112, 4104, 4137,
     4120, 4116, 4119, 4141, 4122, 4124, 7902, 4138, 4137, 7902,
     7902, 4140, 7902, 4137, 4129, 4139, 4135, 4138, 4159, 4157,
     4155, 4144, 4145, 4151, 4158, 4167, 4165, 7902, 7902, 4171,
     4159, 4163, 7902, 4161, 4162, 4172, 4194,  894,  851, 4193,
     7902, 7902, 4196,  812, 7902, 7902, 7902, 4182, 4193, 7902,
     4189, 4202, 4192, 4205, 4199, 4197, 4198, 4215, 7902, 4196,

     4215, 4213, 4203, 4220, 4204, 4220, 7902, 4211, 4209, 4215,
     4217, 7902, 4228, 4218, 4228, 4254, 4256, 4253, 4251, 4245,
     4263, 7902, 4251, 4265, 4251, 4270, 7902, 4259, 4261, 4261,
     4273, 4266, 7902, 4274, 4266, 4261, 4277, 7902, 7902, 4271,
     4264, 4277, 7902, 4264, 4277, 4274, 4281, 4286, 4297, 4309,
     4312, 4309, 4313, 4314, 7902, 7902, 7902, 4321, 4318, 7902,
     7902, 4337, 4345, 4315, 4316, 4316, 4333, 4328, 4325, 4331,
     4337, 4348, 4336, 4345,    0, 4353,    0,    0, 4360, 4349,
        0, 4359, 4364, 4357, 4358, 4363, 4349, 4353, 4355, 4374,
     4371, 4364, 4387, 4380, 4378, 4372, 4391, 4378, 4380,    0,

     4392, 4394,    0,    0, 4399,    0, 4396, 4390, 4400, 4396,
     4398, 4418, 4417, 4415, 4404, 4405, 4411, 4418, 4430, 4428,
        0,    0, 4430, 4418, 4423,    0, 4421, 4424, 4425, 4444,
      845,  842, 4451,    0,    0, 4445,  757,    0,    0,    0,
     4437, 4447,    0, 4446, 4457, 4447, 4462, 4458, 4456, 4457,
     4474,    0, 4455, 4475, 4472, 4464, 4480, 4464, 4480,    0,
     4474, 4472, 4474, 4477,    0, 4488, 4480, 4481, 4518, 4506,
     4503, 4506, 4496, 4512,    0, 4504, 4520, 4508, 4529,    0,
     4518, 4520, 4520, 4532, 4526,    0, 4534, 4526, 4521, 4537,
        0,    0, 4528, 4524, 4541,    0, 4528, 4539, 4534, 4543,

     4539, 4547, 4559, 4568, 4565, 4567, 4571,    0,    0,    0,
     4576, 4574,    0,    0, 4598, 4605, 4622, 4627, 4633, 4638,
     4587, 4588, 4582, 4599, 4596, 4616, 4623, 4628, 4638, 4626,
     4633,    0, 4641,    0,    0, 4648, 4637,    0, 4645, 4650,
     4643, 4644, 4649, 4635, 4636, 4638, 4657, 4654, 4645, 4686,
     4661, 4657, 4651, 4664, 4645, 4649,    0, 4687, 4685,    0,
        0, 4687,    0, 4684, 4676, 4686, 4682, 4684, 4704, 4702,
     4701, 4690, 4691, 4697, 4704, 4713, 4711,    0,    0, 4713,
     4701, 4704,    0, 4702, 4703, 4704, 4718,  789,  755, 4741,
        0,    0, 4719,  713,    0,    0,    0, 4707, 4742,    0,

     4737, 4749, 4738, 4752, 4746, 4744, 4745, 4762,    0, 4743,
     4761, 4759, 4749, 4766, 4750, 4766,    0, 4757, 4755, 4756,
     4757,    0, 4767, 4759, 4760, 4776, 4781, 4801, 4803, 4793,
     4810,    0, 4798, 4812, 4798, 4817,    0, 4806, 4808, 4808,
     4820, 4812,    0, 4820, 4812, 4807, 4823,    0,    0, 4810,
     4811, 4824,    0, 4812, 4820, 4815, 4822, 4818, 4821, 4833,
     4838, 4855, 4862, 4862,    0,    0,    0, 4868, 4865,    0,
        0, 4884, 4889, 4894, 4903, 4913, 4918, 4928, 4936, 4897,
     4898, 4892, 4915, 4910, 4903, 4914, 4919, 4929, 4917, 4924,
        0, 4932,    0,    0, 4939, 4928,    0, 4936, 4941, 4934,

     4939, 4944, 4930, 4931, 4933, 4955, 4952, 4943, 4969, 4958,
     4968, 4962, 4975, 4961, 4963,    0, 4975, 4978,    0,    0,
     4980,    0, 4977, 4969, 4979, 4975, 4977, 4997, 4994, 4992,
     4981, 4986, 4992, 4999, 5008, 5006,    0,    0, 5011, 4999,
     5002,    0, 4999, 5013, 5014, 5028,  748,  743, 5033,    0,
        0, 5029,  661,    0,    0,    0, 5021, 5030,    0, 5029,
     5040, 5029, 5042, 5037, 5035, 5036, 5053,    0, 5034, 5052,
     5049, 5041, 5061, 5045, 5061,    0, 5052, 5054, 5055, 5056,
        0, 5066, 5069, 5070, 5100, 5090, 5087, 5089, 5079, 5095,
        0, 5088, 5102, 5088, 5108,    0, 5097, 5099, 5099, 5111,

     5103,    0, 5111, 5103, 5102, 5118,    0,    0, 5111, 5105,
     5118,    0, 5105, 5117, 5111, 5132, 5128, 5131, 5143, 5151,
     5148, 5150, 5154,    0,    0,    0, 5159, 5156,    0,    0,
     7902, 7902,  659, 5163, 5149, 5167, 5164, 7902, 5165, 5146,
     5167, 5172, 5171, 5163, 7902, 5161, 5161, 5162, 5169, 5166,
     7902, 5183, 7902, 5169, 5176, 5173, 5196, 5197, 5206, 5195,
     5201, 5214, 5198, 5209, 5217, 5209, 5220, 5212, 5223, 7902,
     5209, 5226, 5212, 5229, 7902, 7902,  657, 7902, 5210, 5231,
     5221, 7902, 5237, 7902, 5234, 5237, 7902, 5226, 5246, 7902,
     7902, 5243, 5244, 7902, 5227, 7902, 7902, 7902, 7902, 5259,

     5251, 5258, 5272, 7902, 7902, 5273, 7902, 5273, 7902, 5271,
     5261,  639, 5262, 5269, 7902, 5265, 7902, 5265,  481, 5277,
     5283, 5269, 5271, 5286, 5288, 5291, 7902, 5292, 5295, 7902,
     5298, 5279, 5303, 5301, 5286, 5298, 5308, 5315, 5305, 7902,
     5304, 5329, 5319, 5327, 5323, 7902, 5333, 5316, 5335, 7902,
     7902, 5322, 5328, 5342, 5330, 7902, 5331,    0,    0,  602,
     5343, 5329, 5347, 5344,    0, 5349, 5330, 5351, 5356, 5355,
     5350,    0, 5344, 5344, 5345, 5365, 5362,    0, 5376,    0,
     5362, 5374, 5371, 5381, 5386, 5395, 5384, 5389, 5397, 5381,
     5388, 5396, 5389, 5399, 5390, 5401,    0, 5387, 5409, 5396,

     5413,    0,    0,  598,    0, 5397, 5414, 5404,    0, 5420,
        0, 5430, 5433,    0, 5419, 5439,    0,    0, 5441, 5434,
        0, 5425,    0,    0,    0,    0, 5443, 5440, 5441, 5456,
        0,    0, 5457,    0, 5453,    0, 5451, 5441,  594, 5442,
     5449,    0, 5445,    0, 5445,  584, 5461, 5467, 5453, 5455,
     5470, 5475, 5474,    0, 5475, 5478,    0, 5494, 5475, 5496,
     5494, 5484, 5496, 5493, 5504, 5494,    0, 5493, 5513, 5503,
     5511, 5503,    0, 5513, 5496, 5515,    0,    0, 5502, 5508,
     5522, 5514,    0, 5515,  475, 5568,    0,    0,  584, 5533,
     5519, 5537, 5534,    0, 5548, 5529, 5550, 5555, 5561, 5557,

        0, 5551, 5551, 5552, 5559, 5556,    0, 5570,    0, 5556,
     5563, 5560, 5570, 5571, 5580, 5573, 5598, 5586, 5570, 5577,
     5585, 5577, 5590, 5581, 5592,    0, 5592, 5609, 5595, 5619,
        0,    0,  582,    0, 5604, 5621, 5611,    0, 5627,    0,
     5624, 5627,    0, 5613, 5633,    0,    0, 5630, 5617,    0,
     5615,    0,    0,    0,    0, 5633, 5630, 5631, 5645,    0,
        0, 5646,    0, 5642,    0, 5640, 5633,  574, 5634, 5641,
        0, 5650,    0, 5650,  685, 5662, 5668, 5660, 5662, 5677,
     5682, 5681,    0, 5682, 5685,    0, 5688, 5669, 5690, 5688,
     5673, 5685, 5682, 5689, 5679,    0, 5682, 5702, 5692, 5700,

     5692,    0, 5702, 5688, 5707,    0,    0, 5694, 5713, 5727,
     5715,    0, 5716, 5752,  536, 5757, 5769,    0,    0,  552,
     5734, 5720, 5738, 5748,    0, 5749, 5730, 5760, 5768, 5767,
     5759,    0, 5753, 5753, 5754, 5761, 5758,    0, 5772,    0,
     5758, 5765, 5762, 5772, 5776, 5785, 5774, 5798, 5787, 5771,
     5778, 5786, 5779, 5790, 5781, 5792,    0, 5792, 5809, 5808,
     5825,    0,    0,  542,    0, 5806, 5823, 5813,    0, 5829,
        0, 5826, 5829,    0, 5815, 5835,    0,    0, 5832, 5824,
        0, 5816,    0,    0,    0,    0, 5834, 5830, 5831, 5846,
        0,    0, 5847,    0, 5843,    0, 5842, 5833,  492, 5834,

     5841,    0, 5850,    0, 5850,  688, 5862, 5875, 5862, 5867,
     5882, 5884, 5883,    0, 5884, 5887,    0, 5890, 5871, 5892,
     5890, 5875, 5887, 5884, 5894, 5884,    0, 5883, 5903, 5893,
     5901, 5893,    0, 5904, 5888, 5907,    0,    0, 5894, 5913,
     5927, 5915,    0, 5923, 5938, 7902, 5934, 5926, 7902, 5931,
     7902, 5932, 5933, 5928, 5944, 5947, 5946, 7902, 5931, 5933,
     7902, 5949, 5935, 7902, 5953, 5947, 5949, 5957, 5948, 5959,
     5960, 5955, 5964, 5950, 7902, 5968, 7902, 5969, 7902, 7902,
     5981, 7902, 5967, 5973, 5988, 5987, 5998, 5991, 7902, 7902,
     7902, 6000, 5987, 6001, 6006, 6007, 7902, 6008, 6009, 5999,

     6000, 7902, 6010, 7902, 6005, 7902, 7902, 7902, 6009, 6015,
     6016, 6006, 6013, 6014, 6000, 6006, 7902, 6010, 6015, 6023,
     6041, 6032, 7902, 7902, 7902, 6039, 6050, 7902, 6050, 6059,
     6049, 6061, 6045, 6060, 7902, 6051, 7902, 7902, 6065, 6049,
     6061, 7902, 6068,    0, 6061, 6053,    0, 6061,    0, 6062,
     6063, 6058, 6074, 6077, 6076,    0, 6062, 6065,    0, 6081,
     6067,    0, 6095, 6089, 6091, 6106, 6098, 6112, 6113, 6107,
     6115, 6101,    0, 6119,    0, 6107,    0,    0, 6119,    0,
     6105, 6104, 6118, 6114, 6125, 6121,    0,    0,    0, 6130,
     6117, 6131, 6136, 6137,    0, 6138, 6140, 6131, 6132,    0,

     6142,    0, 6147,    0,    0,    0, 6151, 6157, 6165, 6156,
     6166, 6167, 6152, 6157,    0, 6161, 6166, 6161, 6179, 6170,
        0,    0,    0, 6170, 6180,    0, 6177, 6186, 6179, 6191,
     6175, 6190,    0, 6181,    0,    0, 6195, 6179, 6192,    0,
     6238, 6216,    0, 6209, 6201,    0, 6213,    0, 6220, 6221,
     6216, 6232, 6235, 6234,    0, 6219, 6221,    0, 6237, 6223,
        0, 6238, 6232, 6237, 6245, 6236, 6247, 6248, 6242, 6250,
     6237,    0, 6255,    0, 6243,    0,    0, 6255,    0, 6241,
     6240, 6266, 6262, 6273, 6273,    0,    0,    0, 6288, 6275,
     6289, 6294, 6295,    0, 6296, 6297, 6287, 6288,    0, 6298,

        0, 6290,    0,    0,    0, 6294, 6303, 6304, 6294, 6301,
     6302, 6287, 6292,    0, 6297, 6302, 6297, 6315, 6306,    0,
        0,    0, 6306, 6328,    0, 6325, 6334, 6331, 6349, 6333,
     6348,    0, 6339,    0,    0, 6353, 6337, 6349,    0, 6366,
     6374, 6382, 6369,    0, 6362, 6360,    0, 6372,    0, 6373,
     6374, 6369, 6385, 6388, 6387,    0, 6372, 6374,    0, 6390,
     6376,    0, 6391, 6385, 6389, 6397, 6388, 6399, 6400, 6394,
     6403, 6389,    0, 6407,    0, 6395,    0,    0, 6407,    0,
     6393, 6392, 6419, 6415, 6432, 6432,    0,    0,    0, 6441,
     6428, 6442, 6447, 6448,    0, 6449, 6450, 6440, 6441,    0,

     6451,    0, 6443,    0,    0,    0, 6447, 6455, 6456, 6446,
     6453, 6454, 6439, 6445,    0, 6449, 6454, 6449, 6467, 6458,
        0,    0,    0, 6458, 6481,    0, 6478, 6493, 6490, 6502,
     6486, 6501,    0, 6492,    0,    0, 6506, 6490, 6502,    0,
     6503, 6485, 6508, 7902, 6506, 7902, 6509, 6503, 6513, 7902,
     6514, 7902, 7902,  454, 6514, 6516, 6501, 7902, 6510, 6520,
     6525, 7902, 7902, 7902, 6507, 6508, 7902, 7902, 6528, 6516,
     7902, 7902, 6543, 7902, 7902, 6542, 6540, 6548, 6548, 6550,
     7902, 6542, 7902, 6559, 6550, 7902, 7902, 6552, 6553, 6553,
     7902, 6551, 7902, 6567, 7902, 6560, 6570, 6555, 6562, 6563,

     6565, 6558, 6560, 7902, 6577, 7902, 6565, 7902, 7902, 6577,
     6559, 6582,    0, 6580,    0, 6583, 6588, 6598,    0, 6605,
        0,    0,  447, 6612, 6614, 6599,    0, 6607, 6617, 6622,
        0,    0,    0, 6604, 6605,    0,    0, 6625, 6613,    0,
        0, 6627,    0,    0, 6626, 6618, 6621, 6621, 6623,    0,
     6615,    0, 6632, 6623,    0,    0, 6626, 6627, 6627,    0,
     6625,    0, 6641,    0, 6634, 6644, 6640, 6647, 6654, 6663,
     6656, 6658,    0, 6674,    0, 6662,    0,    0, 6690, 6679,
     6661, 6684,    0, 6684,    0, 6687, 6679, 6689,    0, 6690,
        0,    0,  441, 6690, 6693, 6678,    0, 6686, 6696, 6701,

        0,    0,    0, 6683, 6684,    0,    0, 6709, 6697,    0,
        0, 6711,    0,    0, 6710, 6702, 6706, 6706, 6714,    0,
     6713,    0, 6730, 6721,    0,    0, 6723, 6724, 6729,    0,
     6727,    0, 6743,    0, 6738, 6748, 6731, 6738, 6739, 6741,
     6735, 6737,    0, 6753,    0, 6741,    0,    0, 6777, 6798,
     6769, 6751, 6780,    0, 6787,    0, 6790, 6782, 6792,    0,
     6793,    0,    0,  407, 6793, 6795, 6780,    0, 6788, 6798,
     6803,    0,    0,    0, 6787, 6788,    0,    0, 6808, 6796,
        0,    0, 6810,    0,    0, 6809, 6802, 6803, 6803, 6805,
        0, 6797,    0, 6814, 6805,    0,    0, 6807, 6808, 6819,

        0, 6817,    0, 6839,    0, 6841, 6851, 6834, 6841, 6842,
     6844, 6837, 6839,    0, 6855,    0, 6843,    0,    0, 6855,
     6864, 7902, 6846, 6849, 6861, 7902, 7902, 6889, 7902, 7902,
     6864, 6850, 6861, 6855, 7902, 6865, 6863, 6870, 6881, 6890,
     7902, 6890, 6907, 7902, 6908, 6900, 6901, 7902, 6909, 6903,
     6913, 6914, 7902, 6915, 7902, 6904, 6918, 6910, 6922, 6923,
     6926, 6906, 6925, 6932,    0, 6915, 6932, 6944,    0,    0,
     6965,    0,    0, 6953, 6943, 6954, 6948,    0, 6958, 6958,
     6964, 6953, 6953,    0, 6953, 6970,    0, 6971, 6963, 6964,
        0, 6975, 6972, 6983, 6984,    0, 6985,    0, 6971, 7001,

     6993, 7011, 7016, 7019, 6999, 7018, 7025,    0, 7007, 7010,
     7022,    0,    0, 7028,    0,    0, 7025, 7013, 7023, 7017,
        0, 7027, 7027, 7033, 7022, 7022,    0, 7022, 7044,    0,
     7046, 7052, 7053,    0, 7067, 7065, 7076, 7077,    0, 7078,
        0, 7064, 7078, 7071, 7083, 7084, 7086, 7066, 7085, 7092,
        0, 7074, 7079, 7091,    0,    0, 7121,    0,    0, 7094,
     7080, 7090, 7084,    0, 7095, 7093, 7099, 7088, 7089,    0,
     7111, 7137,    0, 7138, 7130, 7131,    0, 7139, 7133, 7143,
     7146,    0, 7144,    0, 7130, 7145, 7140, 7152, 7153, 7155,
     7135, 7902, 7142, 7155,  404, 7144, 7164, 7194, 7166, 7167,

     7180, 7181, 7902, 7189, 7902, 7902, 7183, 7179, 7902, 7182,
     7902, 7197, 7902, 7902, 7196, 7902, 7902, 7902, 7902, 7185,
     7191, 7188, 7902, 7902, 7206, 7902, 7902, 7902, 7902,    0,
     7188, 7201,  390, 7193, 7213, 7215, 7214, 7202, 7215, 7212,
        0, 7214,    0,    0, 7208, 7204,    0, 7221,    0, 7236,
        0,    0, 7241,    0,    0,    0,    0, 7234, 7241, 7238,
        0,    0, 7256,    0,    0,    0,    0,    0, 7238, 7251,
      385, 7241, 7261, 7262, 7263, 7250, 7263, 7259,    0, 7263,
        0,    0, 7257, 7252,    0, 7255,    0, 7270,    0,    0,
     7269,    0,    0,    0,    0, 7259, 7265, 7262,    0,    0,

     7309,    0,    0,    0,    0,    0, 7263, 7290,  344, 7279,
     7305, 7310, 7313, 7301, 7314, 7309,    0, 7311,    0,    0,
     7305, 7300,    0, 7303,    0, 7318,    0,    0, 7317,    0,
        0,    0,    0, 7306, 7312, 7311,    0,    0, 7329,    0,
        0,    0,    0, 7322, 7902, 7324, 7314, 7316, 7331, 7318,
     7329, 7348, 7344, 7902, 7350, 7363, 7360, 7902, 7351, 7902,
     7365, 7902, 7369, 7365, 7366,    0, 7368, 7357, 7358, 7373,
     7360, 7369, 7374, 7370,    0, 7370, 7382, 7379,    0, 7369,
        0, 7383,    0, 7387, 7383, 7385,    0, 7387, 7376, 7379,
     7408, 7395, 7410, 7418, 7414,    0, 7415, 7425, 7422,    0,

     7412,    0, 7426,    0, 7430, 7426, 7427,    0, 7429, 7418,
     7419, 7434, 7421, 7430, 7437, 7433,    0, 7433, 7443, 7440,
        0, 7430,    0, 7445,    0, 7449, 7445, 7442, 7902, 7471,
     7468, 7479, 7476, 7480, 7482, 7483, 7470, 7902, 7486, 7483,
     7902, 7488, 7487, 7479,    0, 7494, 7491, 7496, 7490, 7494,
     7495, 7498, 7485,    0, 7501, 7498,    0, 7503, 7502, 7495,
        0, 7510, 7507, 7514, 7522, 7526, 7533, 7537, 7524,    0,
     7541, 7538,    0, 7543, 7542, 7534,    0, 7549, 7546, 7551,
     7545, 7549, 7550, 7551, 7538,    0, 7554, 7553,    0, 7558,
     7557, 7550, 7553, 7902, 7545, 7902, 7902, 7555, 7550, 7902,

     7902, 7902, 7902, 7564, 7559, 7576,    0, 7568,    0,    0,
     7583, 7581,    0,    0,    0,    0, 7595, 7589, 7592,    0,
     7584,    0,    0, 7593, 7588,    0,    0,    0,    0, 7602,
     7595, 7598,    0, 7590,    0,    0, 7599, 7594,    0,    0,
        0,    0, 7608, 7902, 7600, 7604, 7618, 7600, 7902,    0,
     7606, 7610, 7622, 7604,    0,    0, 7611, 7615, 7627, 7611,
        0,    0, 7631, 7635, 7653, 7638,    0, 7652, 7641, 7902,
     7661, 7656, 7644,    0, 7664, 7659, 7647,    0, 7667, 7662,
     7650,    0, 7670, 7902,  333, 7659,    0,  323, 7660,    0,
      320, 7661,    0,  317, 7664, 7658, 7663, 7660, 7665, 7662,

     7668, 7665, 7670, 7671, 7902, 7686,    0, 7687,    0, 7694,
        0, 7715, 7716, 7718, 7719, 7707, 7708, 7709, 7710, 7706,
     7707, 7708, 7709, 7723, 7724, 7725, 7726, 7720, 7721, 7722,
     7723, 7721, 7722, 7724, 7725, 7731, 7734, 7749, 7750,  221,
      213,  205,  197, 7763, 7767, 7768, 7770, 7760, 7761, 7762,
     7763, 7767, 7768, 7769, 7770, 7765, 7766, 7767, 7768, 7774,
     7777, 7778, 7779, 7902,    0,    0,    0, 7902, 7845, 7850,
     7853, 7861, 7869, 7877, 7885, 7893
    } ;

static yyconst flex_int16_t yy_def[3677] =
    {   0,
     3668,    1, 3668,    3, 3668,    5,    5,    5,    5,    5,
     3668,   11, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3668, 3668, 3668, 3670,
     3670, 3670, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3670, 3670, 3672,
     3673, 3673, 3673, 3673, 3668, 3673, 3673, 3673, 3668, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3668, 3673, 3668, 3668,
     3674, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3670, 3670, 3670, 3670, 3670, 3670, 3670,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3670, 3670, 3670, 3670, 3670, 3670, 3672, 3672,
     3673, 3673, 3673, 3675, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3674,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3668, 3670, 3670, 3670, 3670, 3670, 3668,

     3670, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3668,
     3670, 3670, 3670, 3670, 3670, 3668, 3670, 3672, 3668, 3672,
     3675, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3668, 3670, 3668, 3670, 3670, 3668,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3668, 3668, 3670, 3670, 3670, 3668, 3676, 3672, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3670, 3668, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3668, 3670, 3676, 3676, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3670, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3670,
     3676, 3676, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3670, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3670, 3676,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,

     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3669, 3669, 3669, 3669, 3669, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671, 3671, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,

     3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3668, 3668, 3668, 3668, 3668, 3668, 3669,
     3669, 3669, 3669, 3669, 3669, 3671, 3671, 3671, 3671, 3671,
     3671, 3673, 3673, 3673, 3673, 3673, 3673, 3668, 3668, 3668,
     3668, 3669, 3669, 3669, 3669, 3671, 3671, 3671, 3671, 3673,
     3673, 3673, 3673, 3668, 3668, 3668, 3669, 3669, 3669, 3671,
     3671, 3671, 3673, 3673, 3673, 3668, 3668, 3669, 3669, 3671,

     3671, 3673, 3673, 3668, 3668, 3669, 3669, 3671, 3671, 3673,
     3673, 3668, 3669, 3671, 3673, 3668, 3669, 3671, 3673, 3668,
     3669, 3671, 3673, 3668, 3669, 3671, 3673, 3668, 3669, 3671,
     3673, 3668, 3669, 3671, 3673, 3668, 3669, 3671, 3673, 3668,
     3669, 3671, 3673, 3668, 3669, 3671, 3673, 3668, 3669, 3671,
     3673, 3668, 3669, 3671, 3673, 3668, 3669, 3671, 3673, 3668,
     3669, 3671, 3673, 3668, 3669, 3671, 3673,    0, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668
    } ;

static yyconst flex_int16_t yy_nxt[7986] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   18,   18,   19,
       18,   18,   18,   18,   20,   18,   14,   14,   14,   14,
       14,   18,   21,   22,   23,   18,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   14,
       47,   14,   14,   14,   14,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   48,   14,   14,   15,   16,   15,   17,   49,   14,
       18,   18,   19,   18,   18,   18,   18,   20,   50,   51,

       51,   51,   51,   51,   18,   21,   22,   23,   18,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   75,   77,   75,   78,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   75,   48,   75,   14,   15,   16,   15,
       17,   14,   79,   18,   18,   19,   18,   18,   18,   80,
       20,   81,   82,   82,   82,   82,   82,   18,   21,   22,
       23,   18,   83,   84,   85,   86,   87,   88,   89,   90,

       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  106,   77,   14,
       14,   83,   84,   85,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  106,   48,  106,  108,
     3647,   80,  109,  109,  109,  109,  109,  108, 3646,   80,
      109,  109,  109,  109,  109,   18, 3645,   18,  110,  110,
      110,  110,  110,   18, 3644,   18,  110,  110,  110,  110,
      110,  111,  112,  113,   15,  114,  115,  111,  116,  116,
       19,  117,  117,  117,  117,  118,  117,  111,  111,  111,

      111,  111,  119,  120,  121,  122,  119,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      111,  146,  111,  147,  111,  111,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  145,  111,
      146,  111,  148,  111,  149,  194,  149,  152,  153,  155,
     3602,  201,  202, 3600,  196,  156, 3598,  157,  195,  230,
      255,  158,  159,  160,  161,  162, 3596,  482,  197,  149,
      309,  163,  485,  486,  194,  164,  310, 2231,  155,  165,

      201,  202,  166,  196,  156,  167,  157,  195,  230,  255,
      158,  159,  160,  161,  162,  168,  169,  197,  175,  309,
      163,  249,  176,  170,  164,  310,  177,  171,  165,  250,
      172,  166,  178,  173,  167,  179,  174,  149, 2100,  149,
      302,  338,  198, 1971,  168,  169,  482,  175,  149,  199,
      249,  176,  170,  303,  200,  177,  171, 1844,  250,  172,
     3157,  178,  173,  363,  179,  174,  180,  207,  181,  302,
      338,  198,  203,  418,  419,  208,  204,  182,  199,  183,
      205,  209,  303,  200,  184,  357,  206,  185,  367,  186,
     2541,  447,  363,  358, 3114,  180,  207,  181, 2410, 2411,

     3071,  203,  418,  419,  208,  204,  182, 3028,  183,  205,
      209,  472,  534,  184,  357,  206,  185,  226,  186,  187,
      447,  231,  358,  188,  210,  232,  211,  189,  212,  233,
      190,  227,  535,  191,  228,  234,  192,  229,  213,  193,
      472,  534,  563,  214,  215, 2703,  226,  588,  187, 2640,
      231,  476,  188,  210,  232,  211,  189,  212,  233,  190,
      227,  535,  191,  228,  234,  192,  229,  213,  193,  304,
      592,  563,  214,  215,  216,  217,  588,  597,  218,  235,
      246,  236,  247,  305,  219,  248,  220,  411,  221,  237,
      222,  238,  223,  224,  225, 2682,  239,  240,  304,  592,

      412, 2508, 2509,  216,  217, 2643,  597,  218,  235,  246,
      236,  247,  305,  219,  248,  220,  411,  221,  237,  222,
      238,  223,  224,  225,  241,  239,  240, 2602,  466,  412,
      251,  242,  243,  252,  253, 2581,  467, 2542,  244,  598,
      254,  245,  257,  257,  257,  257,  257, 2503,  599,  600,
      311, 2482,  413,  241,  312, 2443,  258,  466,  313,  251,
      242,  243,  252,  253,  314,  467,  414,  244,  598,  254,
      245,  259,  260,  260,  260,  260,  260,  599,  600,  311,
      271,  413,  315,  312,  272,  258,  261,  313,  273,  601,
      316,  274, 2405,  314,  275,  414,  317,  480,  480,  480,

      480,  480, 2607, 2608,  276, 2708, 2709,  602,  527,  271,
     2384,  315, 2345,  272, 2282,  261,  263,  273,  601,  316,
      274,  528,  264,  275,  265,  317,  608,  277,  266,  267,
      268,  269,  270,  276,  278,  283,  602,  527,  279,  284,
      424,  280,  609,  285,  281,  263,  610,  282,  425,  286,
      528,  264,  287,  265,  426,  608,  277,  266,  267,  268,
      269,  270, 2278,  278,  283, 2277, 2151,  279,  284,  424,
      280,  609,  285,  281, 2147,  610,  282,  425,  286,  306,
      529,  287,  288,  426,  289,  613,  307,  334,  339,  582,
      593,  308,  340,  290,  530,  291,  341,  583,  594,  621,

      292,  335,  342,  293,  336,  294, 2146,  337,  306,  529,
     2022,  288,  628,  289,  613,  307,  334,  339,  582,  593,
      308,  340,  290,  530,  291,  341,  583,  594,  621,  292,
      335,  342,  293,  336,  294,  295,  337,  595,  619,  296,
      318,  628,  319,  297,  320,  354,  298,  355,  620,  299,
      356,  629,  300,  359,  321,  301,  360,  361,  596,  322,
      323, 2018, 2017,  362,  295, 1895,  595,  619,  296,  318,
     1891,  319,  297,  320,  354,  298,  355,  620,  299,  356,
      629,  300,  359,  321,  301,  360,  361,  596,  322,  323,
      324,  325,  362,  606,  326,  343,  463,  344,  464,  607,

      327,  465,  328,  630,  329,  345,  330,  346,  331,  332,
      333, 1890,  347,  348,  631,  632,  633,  634, 1769,  324,
      325, 1690,  606,  326,  343,  463,  344,  464,  607,  327,
      465,  328,  630,  329,  345,  330,  346,  331,  332,  333,
      349,  347,  348,  631,  632,  633,  634,  350,  351,  365,
      365,  365,  365,  365,  352,  415, 1610,  353,  635, 1531,
      611,  622,  416,  366,  612,  636,  623,  417,  367,  349,
      368,  369,  369,  369,  369,  369,  350,  351,  468, 1453,
     1374,  469,  470,  352,  415,  370,  353,  635,  471,  611,
      622,  416,  366,  612,  636,  623,  417,  531, 1300,  473,

      473,  473,  473,  473,  532,  640, 1221,  468,  380,  533,
      469,  470,  381,  474,  370,  372,  382,  471,  637,  383,
      641,  373,  384,  374,  638,  642,  531,  375,  376,  377,
      378,  379,  385,  532,  640,  639,  591,  380,  533,  643,
      591,  381,  474,  589,  372,  382,  487,  637,  383,  641,
      373,  384,  374,  638,  642,  386,  375,  376,  377,  378,
      379,  385,  387,  392,  639,  540,  388,  393,  643,  389,
      647,  394,  390,  541,  420,  391,  484,  395,  421,  542,
      396,  483,  422,  256,  386,  154,  648,  151,  423,  150,
     3668,  387,  392, 3668,  540,  388,  393, 3668,  389,  647,

      394,  390,  541,  420,  391,  443,  395,  421,  542,  396,
      397,  422,  398,  603,  604,  648,  427,  423,  428,  444,
      429,  399,  445,  400,  579,  446,  580,  605,  401,  581,
      430,  402, 3668,  403,  443,  431,  432,  649, 3668,  397,
      650,  398,  603,  604, 3668,  427, 3668,  428,  444,  429,
      399,  445,  400,  579,  446,  580,  605,  401,  581,  430,
      402,  559,  403,  404,  431,  432,  649,  405,  448,  650,
      624,  406,  449,  625,  407,  560,  450,  408,  561,  626,
      409,  562,  451,  410, 3668, 3668,  627,  651, 3668, 3668,
      559, 3668,  404,  652, 3668,  653,  405,  448, 3668,  624,

      406,  449,  625,  407,  560,  450,  408,  561,  626,  409,
      562,  451,  410,  433,  434,  627,  651,  435,  452,  657,
      453,  658,  652,  436,  653,  437,  659,  438,  454,  439,
      455,  440,  441,  442, 3668,  456,  457,  660,  661,  654,
      671, 3668,  433,  434,  655,  656,  435,  452,  657,  453,
      658, 3668,  436, 3668,  437,  659,  438,  454,  439,  455,
      440,  441,  442,  458,  456,  457,  660,  661,  654,  671,
      459,  460, 3668,  655,  656, 3668,  664,  461,  665,  475,
      462,  476,  477,  477,  477,  477,  477,  669,  662,  672,
      496,  670,  458,  663,  497,  673,  478, 3668,  498,  459,

      460,  499, 3668, 3668,  500,  664,  461,  665, 3668,  462,
     3668, 3668, 3668, 3668,  501, 3668,  669,  662,  672,  496,
      670,  684,  663,  497,  673,  478,  488,  498, 3668,  685,
      499,  674,  489,  500,  490,  675,  686,  502,  491,  492,
      493,  494,  495,  501,  503,  508,  676,  677,  504,  509,
      684,  505,  687,  510,  506,  488, 3668,  507,  685,  511,
      674,  489,  512,  490,  675,  686,  502,  491,  492,  493,
      494,  495, 3668,  503,  508,  676,  677,  504,  509,  688,
      505,  687,  510,  506, 3668,  536,  507,  678,  511,  537,
      679,  512,  513,  538,  514,  680,  681,  584,  564,  539,

      585,  586,  565,  515,  689,  516,  566,  587,  688,  690,
      517,  691,  567,  518,  536,  519,  678, 3668,  537,  679,
     3668,  513,  538,  514,  680,  681,  584,  564,  539,  585,
      586,  565,  515,  689,  516,  566,  587,  644,  690,  517,
      691,  567,  518,  645,  519,  520,  646,  666,  692,  521,
      543,  693,  544,  522,  545,  694,  523,  700,  667,  524,
      682,  683,  525,  695,  546,  526,  644,  668,  701,  547,
      548, 3668,  645,  696,  520,  646,  666,  692,  521,  543,
      693,  544,  522,  545,  694,  523,  700,  667,  524,  682,
      683,  525,  695,  546,  526,  702,  668,  701,  547,  548,

      549,  550,  696,  706,  551,  568,  709,  569, 3668,  713,
      552,  714,  553, 3668,  554,  570,  555,  571,  556,  557,
      558, 3668,  572,  573,  702, 3668, 3668,  697, 3668,  549,
      550,  698,  706,  551,  568,  709,  569,  699,  713,  552,
      714,  553,  614,  554,  570,  555,  571,  556,  557,  558,
      574,  572,  573,  615,  616,  617,  697,  575,  576,  707,
      698,  715,  618,  703,  577, 3668,  699,  578,  704,  717,
      708,  614,  719, 3668,  720, 3668, 3668, 3668,  716,  574,
      718,  705,  615,  616,  617,  710,  575,  576,  707,  731,
      715,  618,  703,  577,  711, 3668,  578,  704,  717,  708,

      721,  719,  712,  720,  723,  729,  726,  716,  722,  718,
      705,  734,  724,  727,  710,  728,  732,  730,  731,  735,
      736,  737,  733,  711,  725,  738,  739, 3668, 3668,  721,
     3668,  712, 3668,  723,  729,  726, 3668,  722, 3668, 3668,
      734,  724,  727, 3668,  728,  732,  730, 3668,  735,  736,
      737,  733, 3668,  725,  738,  739,  257,  257,  257,  257,
      257,  740, 3668,  740,  746,  741,  741,  741,  741,  741,
      258,  742,  742,  742,  742,  742,  259,  260,  260,  260,
      260,  260,  744,  749,  744,  743,  745,  745,  745,  745,
      745,  261,  747,  746,  751,  752,  753,  754,  755,  258,

      748,  756,  757,  758,  750,  760,  762,  763,  764,  765,
      767,  761,  749,  766,  743,  775,  759,  776,  773,  782,
      261,  747,  777,  751,  752,  753,  754,  755,  774,  748,
      756,  757,  758,  750,  760,  762,  763,  764,  765,  767,
      761,  768,  766,  783,  775,  759,  776,  773,  782,  784,
      785,  777,  769,  770,  771,  778,  786,  774,  779,  787,
      788,  772,  789,  790,  780,  794,  795,  796,  797,  791,
      768,  781,  783,  801,  802,  792, 3668,  803,  784,  785,
      804,  769,  770,  771,  778,  786,  793,  779,  787,  788,
      772,  789,  790,  780,  794,  795,  796,  797,  791,  798,

      781,  805,  801,  802,  792,  799,  803,  806,  800,  804,
      807,  808,  811,  812,  813,  793,  809,  810,  816,  818,
      825,  819,  826,  817,  820,  814,  815,  823,  798,  827,
      805,  824, 3668, 3668,  799,  821,  806,  800, 3668,  807,
      808,  811,  812,  813,  822,  809,  810,  816,  818,  825,
      819,  826,  817,  820,  814,  815,  823,  828,  827,  838,
      824,  829,  830,  831,  821,  832,  834,  835,  833,  836,
      837,  839,  840,  822,  841,  842,  843,  844,  845,  846,
      847,  848, 3668,  849,  854,  855,  828,  856,  838, 3668,
      829,  830,  831,  850,  832,  834,  835,  833,  836,  837,

      839,  840,  860,  841,  842,  843,  844,  845,  846,  847,
      848,  851,  849,  854,  855,  852,  856,  861,  857,  863,
      864,  853,  850,  858,  867,  868,  869,  871,  862,  865,
      873,  860,  874,  875, 3668, 3668,  859,  866,  872, 3668,
      851,  876, 3668,  870,  852,  885,  861,  857,  863,  864,
      853, 3668,  858,  867,  868,  869,  871,  862,  865,  873,
      877,  874,  875,  883,  880,  859,  866,  872,  878,  888,
      876,  881,  870,  882,  885,  884,  886,  889,  890,  891,
      879,  892,  887,  893,  896,  896,  896,  896,  896,  877,
      902, 3668,  883,  880, 3668, 3668, 3668,  878,  888, 3668,

      881, 3668,  882, 3668,  884,  886,  889,  890,  891,  879,
      892,  887,  893,  365,  365,  365,  365,  365,  894,  902,
      894, 3668,  895,  895,  895,  895,  895,  366,  897,  897,
      897,  897,  897,  367,  905,  368,  899,  899,  899,  899,
      899,  900,  898,  900,  903,  901,  901,  901,  901,  901,
      370,  907,  904,  908,  909,  906,  366,  910,  911,  912,
      913,  914,  916,  905,  918,  919,  920,  923,  917, 3668,
      931,  898,  921,  903,  915,  929,  922,  938, 3668,  370,
      907,  904,  908,  909,  906,  930,  910,  911,  912,  913,
      914,  916, 3668,  918,  919,  920,  923,  917,  924,  931,

      939,  921,  932,  915,  929,  922,  938,  933,  940,  925,
      926,  927,  934,  941,  930,  935,  942,  943,  928,  944,
      945,  936,  946,  950,  951,  952,  947,  924,  937,  939,
      953,  932,  948, 3668,  957,  958,  933,  940,  925,  926,
      927,  934,  941,  949,  935,  942,  943,  928,  944,  945,
      936,  946,  950,  951,  952,  947,  954,  937,  959,  953,
      960,  948,  955,  957,  958,  956,  961,  962,  963,  964,
      967,  968,  949,  972,  965,  966, 3668,  974,  973,  975,
      979,  969,  981,  982,  980,  954,  983,  959,  994,  960,
     3668,  955,  970,  971,  956,  961,  962,  963,  964,  967,

      968, 3668,  972,  965,  966,  976,  974,  973,  975,  979,
      969,  981,  982,  980,  984,  983,  977,  994,  985,  986,
      987,  970,  971,  988,  995,  978,  989,  990,  991,  992,
      993,  996,  997,  998,  976,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 3668,  984, 1010,  977, 3668,  985,  986,  987,
     1011, 1006,  988,  995,  978,  989,  990,  991,  992,  993,
      996,  997,  998, 1012,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1007, 1013, 1010, 1016, 1008, 1017, 1014, 1019, 1011,
     1006, 1009, 1020, 1023, 1024, 1025, 1027, 1018, 1029, 1030,
     1015, 1021, 1012, 3668, 3668, 1041, 3668, 1028, 3668, 1022,

     1007, 1013, 1026, 1016, 1008, 1017, 1014, 1019, 1044, 1045,
     1009, 1020, 1023, 1024, 1025, 1027, 1018, 1029, 1030, 1015,
     1021, 1031, 1033, 1039, 1041, 1036, 1028, 1042, 1022, 1032,
     1034, 1026, 1037, 1043, 1038, 1040, 1046, 1044, 1045, 1047,
     1048, 1049, 1035,  473,  473,  473,  473,  473, 3668, 3668,
     1031, 1033, 1039, 3668, 1036, 3668, 1042,  474, 1032, 1034,
     3668, 1037, 1043, 1038, 1040, 1046, 3668, 3668, 1047, 1048,
     1049, 1035, 1050, 3668, 1050, 3668, 1051, 1051, 1051, 1051,
     1051, 1052, 1052, 1052, 1052, 1052,  474, 1054, 1054, 1054,
     1054, 1054, 3668, 3668,  475, 1053,  476, 1055, 1055, 1055,

     1055, 1055, 1056, 3668, 1056, 1059, 1057, 1057, 1057, 1057,
     1057,  478, 1058, 1058, 1058, 1058, 1058, 1063, 1060, 1060,
     1060, 1060, 1060, 1064, 1053, 1062,  590, 1068,  590, 1066,
     1069, 1065,  590, 1070, 1071, 1072, 1073, 1074, 1075, 1077,
      478, 1079, 1080, 1081,  590, 1078, 1063, 1084,  590, 1082,
     1067, 1076, 1064, 1083, 1092, 3668, 1068, 3668, 1066, 1069,
     1065, 1099, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1100,
     1079, 1080, 1081, 1085, 1078,  590, 1084, 1090, 1082, 1067,
     1076, 1101, 1083, 1092, 1086, 1087, 1088, 1091, 1095, 1093,
     1099, 1096, 1102, 1089, 1094, 1103, 1104, 1097, 1100, 1105,

     1106, 1107, 1085, 1111, 1098, 1112, 1090, 1113, 3668, 1114,
     1101, 1118, 3668, 1086, 1087, 1088, 1091, 1095, 1093, 3668,
     1096, 1102, 1089, 1094, 1103, 1104, 1097, 1119, 1105, 1106,
     1107, 1108, 1111, 1098, 1112, 1115, 1113, 1109, 1114, 1120,
     1118, 1116, 1121, 1122, 1117, 1123, 1124, 1125, 1110, 1128,
     1129, 1130, 1126, 1127, 1133, 1135, 1119, 1136, 1142, 1134,
     1108, 1140, 1131, 1132, 1115, 1141, 1109, 3668, 1120, 1143,
     1116, 1121, 1122, 1117, 1123, 1124, 1125, 1110, 1128, 1129,
     1130, 1126, 1127, 1133, 1135, 1137, 1136, 1142, 1134, 1144,
     1140, 1131, 1132, 1145, 1141, 1155, 1138, 1146, 1143, 1147,

     1148, 1149, 1151, 1152, 1150, 1139, 1153, 1154, 1156, 1157,
     1158, 1159, 1160, 1161, 1137, 1162, 1163, 1164, 1144, 1165,
     1171, 1172, 1145, 1173, 1155, 1138, 1146, 1177, 1147, 1148,
     1149, 1151, 1152, 1150, 1139, 1153, 1154, 1156, 1157, 1158,
     1159, 1160, 1161, 1166, 1162, 1163, 1164, 1168, 1165, 1171,
     1172, 1169, 1173, 1167, 1178, 1174, 1177, 1170, 1180, 1184,
     1175, 1181, 1185, 1188, 1186, 1179, 1190, 1191, 3668, 1192,
     1182, 3668, 1166, 1176, 1189, 3668, 1168, 1193, 1183, 1202,
     1169, 1187, 1167, 1178, 1174, 1205, 1170, 1180, 1184, 1175,
     1181, 1185, 1188, 1186, 1179, 1190, 1191, 1194, 1192, 1182,

     1200, 1206, 1176, 1189, 1197, 1195, 1193, 1183, 1202, 1203,
     1187, 1198, 1201, 1199, 1205, 1204, 1207, 1196, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1194, 1216, 1217, 1200,
     1206, 1218, 1219, 1197, 1195, 1220, 1222, 1223, 1203, 1226,
     1198, 1201, 1199, 1224, 1204, 1207, 1196, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1227, 1216, 1217, 1225, 1228,
     1218, 1219, 1229, 1230, 1220, 1222, 1223, 1231, 1226, 1232,
     1234, 1233, 1224, 1235, 1236, 1237, 1240, 1241, 1242, 1243,
     1245, 1246, 1244, 1247, 1227, 1248, 1249, 1225, 1228, 1238,
     1239, 1229, 1230, 1250, 1251, 1252, 1231, 1253, 1232, 1234,

     1233, 1254, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1245,
     1246, 1244, 1247, 1255, 1248, 1249, 1258, 1259, 1238, 1239,
     1256, 1260, 1250, 1251, 1252, 1261, 1253, 1257, 1262, 1263,
     1254, 1264, 1267, 1265, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1255, 3668, 1276, 1258, 1259, 1282, 1283, 1256,
     1260, 1266, 1284, 1285, 1261, 3668, 1257, 1262, 1263, 1277,
     1264, 1267, 1265, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
     1275, 1286, 1278, 1276, 1279, 1287, 1282, 1283, 1288, 1289,
     1266, 1284, 1285, 1290, 1280, 1291, 1292, 1293, 1277, 1294,
     1295, 1297, 1298, 1299, 1281, 1301, 1302, 1303, 1304, 1305,

     1286, 1306, 1296, 1307, 1287, 1308, 1309, 1288, 1289, 1310,
     1311, 1312, 1290, 1280, 1291, 1292, 1293, 1313, 1294, 1295,
     1297, 1298, 1299, 1281, 1301, 1302, 1303, 1304, 1305, 1314,
     1306, 1296, 1307, 1315, 1308, 1309, 1316, 1317, 1310, 1311,
     1312, 1318, 1319, 1320, 1321, 1322, 1313, 1323, 1324, 1325,
     1326, 1327, 1329, 1330, 1331, 1332, 1333, 1334, 1314, 1335,
     1328, 1336, 1315, 1337, 1338, 1316, 1317, 1339, 1340, 1341,
     1318, 1319, 1320, 1321, 1322, 1342, 1323, 1324, 1325, 1326,
     1327, 1329, 1330, 1331, 1332, 1333, 1334, 1343, 1335, 1344,
     1336, 1347, 1337, 1338, 1348, 1349, 1339, 1340, 1341, 1345,

     1350, 1346, 1351, 3668, 1342, 1355, 1356, 1357, 1359, 1352,
     1353, 1358, 1360, 1361, 3668, 3668, 1343, 3668, 1344, 3668,
     1347, 3668, 3668, 1348, 1349, 3668, 3668, 3668, 1345, 1350,
     1346, 1351, 1354, 3668, 1355, 1356, 1357, 1359, 1352, 1353,
     1358, 1360, 1361,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  742,  742,  742,  742,  742, 1362, 1364,
     1362, 1354, 1363, 1363, 1363, 1363, 1363,  743,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1375, 1364, 1376,
     1377, 1379, 1380, 1381, 1382, 1383,  743, 1384, 1385, 1387,

     1386, 1388, 1389, 1393, 1398, 1378, 3668, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1375, 1399, 1376, 1377,
     1379, 1380, 1381, 1382, 1383, 1390, 1384, 1385, 1387, 1386,
     1388, 1389, 1393, 1398, 1378, 1394, 1395, 1400, 1396, 1391,
     1392, 1397, 1401, 1402, 1403, 1404, 1399, 1405, 1406, 1407,
     1408, 1409, 1411, 1412, 1390, 1413, 1414, 1415, 1410, 1416,
     1417, 1420, 1421, 1422, 1394, 1395, 1400, 1396, 1391, 1392,
     1397, 1401, 1402, 1403, 1404, 1418, 1405, 1406, 1407, 1408,
     1409, 1411, 1412, 1423, 1413, 1414, 1415, 1410, 1416, 1417,
     1420, 1421, 1422, 1419, 1424, 1425, 1426, 1427, 1428, 1429,

     3668, 1435, 1436, 1437, 1418, 1438, 1439, 1431, 1440, 1432,
     1441, 1442, 1423, 1443, 1430, 1444, 1445, 1446, 1447, 1433,
     1450, 1448, 1419, 1424, 1425, 1426, 1427, 1428, 1429, 1434,
     1435, 1436, 1437, 1449, 1438, 1439, 1451, 1440, 1452, 1441,
     1442, 1454, 1443, 1430, 1444, 1445, 1446, 1447, 1433, 1450,
     1448, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1434, 1462,
     1463, 1464, 1449, 1465, 1466, 1451, 1467, 1452, 1468, 1469,
     1454, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1479, 1462, 1463,
     1464, 1482, 1465, 1466, 1483, 1467, 1484, 1468, 1469, 1485,

     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1480,
     1486, 1487, 1488, 1489, 1490, 1491, 1479, 1492, 1481, 1493,
     1482, 1494, 1495, 1483, 1496, 1484, 1497, 1498, 1485, 1499,
     1500, 1501, 1502, 1503, 1504, 3668, 3668, 1508, 1480, 1486,
     1487, 1488, 1489, 1490, 1491, 1509, 1492, 1512, 1493, 1513,
     1494, 1495, 1514, 1496, 3668, 1497, 1498, 3668, 1499, 1500,
     1501, 1502, 1503, 1504, 1505, 1506, 1508, 1510, 1521, 1522,
     1523, 1511, 3668, 3668, 1509, 3668, 1512, 3668, 1513, 3668,
     3668, 1514, 1515, 1515, 1515, 1515, 1515, 1507,  895,  895,
      895,  895,  895, 1505, 1506, 3668, 1510, 1521, 1522, 1523,

     1511, 1516, 1516, 1516, 1516, 1516,  897,  897,  897,  897,
      897, 1520, 1520, 1520, 1520, 1520, 1507, 1517, 1524, 1517,
      898, 1518, 1518, 1518, 1518, 1518,  367, 1525,  368, 1519,
     1519, 1519, 1519, 1519,  901,  901,  901,  901,  901, 1526,
     1527, 1528, 1529,  370, 1530, 1532, 1533, 1524, 1534,  898,
     1536, 1537, 1538, 1539, 1540, 1541, 1525, 1542, 1544, 1543,
     1545, 1546, 1550, 1535, 1551, 1552, 3668, 1555, 1526, 1527,
     1528, 1529,  370, 1530, 1532, 1533, 1556, 1534, 1557, 1536,
     1537, 1538, 1539, 1540, 1541, 1547, 1542, 1544, 1543, 1545,
     1546, 1550, 1535, 1551, 1552, 1553, 1555, 1558, 1554, 1548,

     1549, 1559, 1560, 1561, 1562, 1556, 1563, 1557, 1564, 1565,
     1566, 1568, 1569, 1570, 1547, 1571, 1572, 1567, 1573, 1574,
     1577, 1578, 1579, 1580, 1553, 1575, 1558, 1554, 1548, 1549,
     1559, 1560, 1561, 1562, 1581, 1563, 1582, 1564, 1565, 1566,
     1568, 1569, 1570, 1576, 1571, 1572, 1567, 1573, 1574, 1577,
     1578, 1579, 1580, 1583, 1575, 1584, 1585, 1588, 1586, 1589,
     1592, 1593, 1594, 1581, 1595, 1582, 1596, 1597, 1598, 1590,
     1599, 1600, 1576, 1587, 1601, 1602, 1603, 1604, 1607, 1591,
     1605, 1608, 1583, 1609, 1584, 1585, 1611, 1586, 1612, 1592,
     1593, 1594, 1606, 1595, 1613, 1596, 1597, 1598, 1590, 1599,

     1600, 1614, 1587, 1601, 1602, 1603, 1604, 1607, 1591, 1605,
     1608, 1615, 1609, 1616, 1617, 1611, 1618, 1612, 1619, 1620,
     1621, 1606, 1622, 1613, 1623, 1624, 1625, 1626, 1627, 1628,
     1614, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1639,
     1615, 1637, 1616, 1617, 1640, 1618, 1641, 1619, 1620, 1621,
     1638, 1622, 1642, 1623, 1624, 1625, 1626, 1627, 1628, 1643,
     1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1639, 1644,
     1637, 1645, 1646, 1640, 1647, 1641, 1648, 1649, 1650, 1651,
     1652, 1642, 1653, 1654, 1655, 1657, 1656, 1658, 1643, 1659,
     1660, 1661, 1665, 1666, 1662, 1663, 3668, 1669, 1644, 1670,

     1645, 1646, 1671, 1647, 3668, 1648, 1649, 1650, 1651, 1652,
     3668, 1653, 1654, 1655, 1657, 1656, 1658, 1664, 1659, 1660,
     1661, 1665, 1666, 1662, 1663, 1667, 1669, 1680, 1670, 1668,
     1681, 1671, 1672, 1672, 1672, 1672, 1672, 1051, 1051, 1051,
     1051, 1051, 3668, 3668, 3668, 3668, 1664, 1052, 1052, 1052,
     1052, 1052, 3668, 3668, 1667, 3668, 1680, 3668, 1668, 1681,
     1673, 1053, 1673, 3668, 1674, 1674, 1674, 1674, 1674, 1675,
     1675, 1675, 1675, 1675,  475, 3668,  476, 1676, 1676, 1676,
     1676, 1676, 1677, 1677, 1677, 1677, 1677, 1059, 1682, 3668,
     1053,  478, 1057, 1057, 1057, 1057, 1057, 1059, 1683, 1684,

     1058, 1058, 1058, 1058, 1058, 1678, 1678, 1678, 1678, 1678,
     1679, 1679, 1679, 1679, 1679, 1062,  590, 1682,  590, 1685,
      478, 1686,  590, 1687, 1688, 1689, 1691, 1683, 1684, 1692,
     1693, 1695, 1696, 1697,  590, 1698, 3668, 1699,  590, 1700,
     1701, 1703, 1702, 1704, 1705, 1694, 1709, 3668, 1685, 3668,
     1686, 1714, 1687, 1688, 1689, 1691, 1710, 1711, 1692, 1693,
     1695, 1696, 1697, 1706, 1698,  590, 1699, 1715, 1700, 1701,
     1703, 1702, 1704, 1705, 1694, 1709, 1712, 1707, 1708, 1713,
     1714, 1716, 1717, 1718, 1719, 1710, 1711, 1720, 1721, 1722,
     1723, 1724, 1706, 1725, 1727, 1728, 1715, 1729, 1730, 1731,

     1726, 1732, 1733, 1734, 1736, 1712, 1707, 1708, 1713, 1737,
     1716, 1717, 1718, 1719, 1738, 1739, 1720, 1721, 1722, 1723,
     1724, 1735, 1725, 1727, 1728, 1740, 1729, 1730, 1731, 1726,
     1732, 1733, 1734, 1736, 1741, 1742, 1743, 1744, 1737, 1747,
     1745, 1748, 1751, 1738, 1739, 1752, 1753, 1754, 1755, 1756,
     1735, 1749, 1757, 1758, 1740, 1746, 1759, 1760, 1761, 1762,
     1763, 1750, 1766, 1741, 1742, 1743, 1744, 1764, 1767, 1745,
     1768, 1751, 1770, 1771, 1752, 1753, 1754, 1755, 1756, 1765,
     1749, 1757, 1758, 1772, 1746, 1759, 1760, 1761, 1762, 1763,
     1750, 1766, 1773, 1774, 1775, 1776, 1764, 1767, 1777, 1768,

     1778, 1770, 1771, 1779, 1780, 1781, 1782, 1783, 1765, 1784,
     1785, 1786, 1772, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
     1794, 1773, 1774, 1775, 1776, 1795, 1798, 1777, 1796, 1778,
     1799, 1800, 1779, 1780, 1781, 1782, 1783, 1797, 1784, 1785,
     1786, 1801, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
     1802, 1803, 1804, 1805, 1795, 1798, 1806, 1796, 1807, 1799,
     1800, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1816, 1815,
     1801, 1817, 1818, 1819, 1820, 1824, 1821, 1822, 1825, 1802,
     1803, 1804, 1805, 1828, 1826, 1806, 1829, 1807, 1827, 1830,
     1808, 1809, 1810, 1811, 1812, 1813, 1814, 1816, 1815, 1823,

     1817, 1818, 1819, 1820, 1824, 1821, 1822, 1825, 1831, 1832,
     1833, 1834, 1828, 1826, 1835, 1829, 1836, 1827, 1830, 1837,
     1838, 1839, 1840, 1841, 1842, 3668, 1845, 1843, 1823, 1846,
     1847, 1848, 1849, 1850, 1851, 1852, 1853, 1831, 1832, 1833,
     1834, 1854, 1855, 1835, 1856, 1836, 1860, 1861, 1837, 1838,
     1839, 1840, 1841, 1842, 1844, 1845, 1843, 1862, 1846, 1847,
     1848, 1849, 1850, 1851, 1852, 1853, 1857, 1863, 1864, 1865,
     1854, 1855, 1866, 1856, 1867, 1860, 1861, 1868, 1869, 1870,
     1871, 1872, 1858, 1873, 1859, 1874, 1862, 1875, 1876, 1877,
     1878, 1879, 1880, 1881, 1882, 1857, 1863, 1864, 1865, 1883,

     1884, 1866, 1885, 1867, 1886, 1887, 1868, 1869, 1870, 1871,
     1872, 1858, 1873, 1859, 1874, 1888, 1875, 1876, 1877, 1878,
     1879, 1880, 1881, 1882, 1889, 1892, 1894, 1896, 1883, 1884,
     1897, 1885, 1898, 1886, 1887, 1899, 1893, 1900, 1901, 1902,
     1903, 1904, 1905, 1906, 1888, 1907, 1910, 1908, 1911, 1912,
     1913, 1914, 1915, 1889, 1892, 1894, 1896, 1909, 1916, 1897,
     1917, 1898, 1918, 1919, 1899, 1893, 1900, 1901, 1902, 1903,
     1904, 1905, 1906, 1920, 1907, 1910, 1908, 1911, 1912, 1913,
     1914, 1915, 1923, 1924, 1921, 1925, 1909, 1916, 1922, 1917,
     1926, 1918, 1919, 1927, 1928, 1929, 1930, 1931, 1932, 1933,

     1934, 1935, 1920, 1936, 1937, 1938, 1939, 1940, 1943, 1944,
     1945, 1923, 1924, 1921, 1925, 1941, 1946, 1922, 1942, 1926,
     1947, 1948, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1949, 1936, 1937, 1938, 1939, 1940, 1943, 1944, 1945,
     1950, 1951, 1952, 1953, 1941, 1946, 1954, 1942, 1955, 1947,
     1948, 1956, 1957, 1363, 1363, 1363, 1363, 1363, 1958, 1959,
     1949, 1363, 1363, 1363, 1363, 1363, 1960, 1961, 1962, 1950,
     1951, 1952, 1953, 1963, 1964, 1954, 1965, 1955, 1966, 1967,
     1956, 1957, 1968, 1969, 3668, 1972, 1970, 1958, 1959, 1973,
     1974, 1975, 1976, 1977, 1978, 1960, 1961, 1962, 1979, 1980,

     1981, 1982, 1963, 1964, 1983, 1965, 1987, 1966, 1967, 1988,
     1989, 1968, 1969, 1971, 1972, 1970, 1984, 1990, 1973, 1974,
     1975, 1976, 1977, 1978, 1991, 1992, 1993, 1979, 1980, 1981,
     1982, 1994, 1985, 1983, 1986, 1987, 1995, 1996, 1988, 1989,
     1997, 1998, 1999, 2000, 2001, 1984, 1990, 2002, 2003, 2004,
     2005, 2006, 2007, 1991, 1992, 1993, 2008, 2009, 2010, 2011,
     1994, 1985, 2012, 1986, 2013, 1995, 1996, 2014, 2015, 1997,
     1998, 1999, 2000, 2001, 2016, 2021, 2002, 2003, 2004, 2005,
     2006, 2007, 2023, 2019, 2024, 2008, 2009, 2010, 2011, 2025,
     2026, 2012, 2027, 2013, 2020, 2028, 2014, 2015, 2029, 2030,

     2031, 2032, 2033, 2016, 2021, 2034, 2035, 2037, 2038, 2039,
     2040, 2023, 2019, 2024, 2041, 2042, 2036, 2043, 2025, 2026,
     2044, 2027, 2045, 2020, 2028, 2046, 2047, 2029, 2030, 2031,
     2032, 2033, 2050, 2051, 2034, 2035, 2037, 2038, 2039, 2040,
     2052, 2053, 2054, 2041, 2042, 2036, 2043, 2055, 2048, 2044,
     2056, 2045, 2049, 2057, 2046, 2047, 2058, 2059, 2060, 2061,
     2062, 2050, 2051, 2063, 2064, 2065, 2066, 2067, 2070, 2052,
     2053, 2054, 2068, 2071, 2072, 2069, 2055, 2048, 2073, 2056,
     2074, 2049, 2057, 2075, 2076, 2058, 2059, 2060, 2061, 2062,
     2077, 2078, 2063, 2064, 2065, 2066, 2067, 2070, 2079, 2080,

     2081, 2068, 2071, 2072, 2069, 2082, 2083, 2073, 2084, 2074,
     3668, 3668, 2075, 2076, 1515, 1515, 1515, 1515, 1515, 2077,
     2078, 2085, 2085, 2085, 2085, 2085, 3668, 2079, 2080, 2081,
     2087, 2088, 2089, 2090, 2082, 2083, 2091, 2084, 2086, 2086,
     2086, 2086, 2086, 1518, 1518, 1518, 1518, 1518,  368, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 2087,
     2088, 2089, 2090,  370, 2092, 2091, 2093, 2094, 2095, 2096,
     2097, 2098, 3668, 2101, 2099, 2102, 2103, 2104, 2105, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 3668, 2116, 2117, 2118,
     2119, 2120,  370, 2092, 2121, 2093, 2094, 2095, 2096, 2097,

     2098, 2100, 2101, 2099, 2102, 2103, 2104, 2105, 2106, 2107,
     2108, 2109, 2110, 2111, 2112, 2113, 2116, 2117, 2118, 2119,
     2120, 2122, 2123, 2121, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2114, 2131, 2115, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2141, 2113, 2142, 2143, 2144, 2145, 2150,
     2122, 2123, 2152, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
     2114, 2131, 2115, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
     2139, 2140, 2141, 2148, 2142, 2143, 2144, 2145, 2150, 2153,
     2154, 2152, 2155, 2156, 2149, 2157, 2158, 2159, 2160, 2161,
     2162, 2163, 2166, 2164, 2167, 2168, 2169, 2170, 2171, 2172,

     2173, 2174, 2148, 2165, 2175, 2176, 2177, 2179, 2153, 2154,
     2178, 2155, 2156, 2149, 2157, 2158, 2159, 2160, 2161, 2162,
     2163, 2166, 2164, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
     2174, 2180, 2165, 2175, 2176, 2177, 2179, 2181, 2182, 2178,
     2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2194, 2195, 2196, 2197, 2199, 2200, 2198, 2201, 2202,
     2180, 2203, 2204, 2205, 2206, 2207, 2181, 2182, 2208, 2183,
     2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
     2194, 2195, 2196, 2197, 2199, 2200, 2198, 2201, 2202, 2209,
     2203, 2204, 2205, 2206, 2207, 2210, 2211, 2208, 2212, 2213,

     1672, 1672, 1672, 1672, 1672, 2214, 2214, 2214, 2214, 2214,
     1674, 1674, 1674, 1674, 1674, 3668, 3668, 3668, 2209, 2215,
     2215, 2215, 2215, 2215, 2210, 2211,  475, 2212, 2213, 1676,
     1676, 1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1059,
     2218, 2219, 2220,  478, 2217, 2217, 2217, 2217, 2217, 2221,
     2222, 2223, 1058, 1058, 1058, 1058, 1058, 2224, 2225, 2226,
     2227, 2228, 2229, 3668, 2232, 2230, 2233, 2234, 2235, 2218,
     2219, 2220,  478, 2236, 2237, 2238, 2239, 2240, 2221, 2222,
     2223, 2241, 2242, 2243, 2247, 3668, 2224, 2225, 2226, 2227,
     2228, 2229, 2231, 2232, 2230, 2233, 2234, 2235, 2244, 2248,

     2249, 2250, 2236, 2237, 2238, 2239, 2240, 2251, 2252, 2253,
     2241, 2242, 2243, 2247, 2245, 2254, 2246, 2255, 2256, 2257,
     2258, 2259, 2260, 2261, 2262, 2263, 2264, 2244, 2248, 2249,
     2250, 2265, 2266, 2267, 2268, 2269, 2251, 2252, 2253, 2270,
     2271, 2272, 2273, 2245, 2254, 2246, 2255, 2256, 2257, 2258,
     2259, 2260, 2261, 2262, 2263, 2264, 2274, 2275, 2276, 2281,
     2265, 2266, 2267, 2268, 2269, 2279, 2283, 2284, 2270, 2271,
     2272, 2273, 2285, 2286, 2287, 2288, 2280, 2289, 2290, 2291,
     2292, 2293, 2294, 2295, 2297, 2274, 2275, 2276, 2281, 2298,
     2299, 2300, 2301, 2296, 2279, 2283, 2284, 2302, 2303, 2304,

     2305, 2285, 2286, 2287, 2288, 2280, 2289, 2290, 2291, 2292,
     2293, 2294, 2295, 2297, 2306, 2307, 2310, 2311, 2298, 2299,
     2300, 2301, 2296, 2312, 2313, 2314, 2302, 2303, 2304, 2305,
     2308, 2315, 2316, 2317, 2309, 2318, 2319, 2320, 2321, 2322,
     2323, 2324, 2325, 2306, 2307, 2310, 2311, 2326, 2327, 2330,
     2331, 2332, 2312, 2313, 2314, 2328, 2333, 2334, 2329, 2308,
     2315, 2316, 2317, 2309, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2325, 2335, 2336, 2337, 2338, 2326, 2327, 2330, 2331,
     2332, 2339, 2340, 2341, 2328, 2333, 2334, 2329, 2342, 2343,
     2344, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354,

     2355, 2335, 2336, 2337, 2338, 2356, 2357, 2358, 2359, 2360,
     2339, 2340, 2341, 2361, 2362, 2363, 2364, 2342, 2343, 2344,
     2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355,
     2365, 2366, 2367, 2368, 2356, 2357, 2358, 2359, 2360, 2369,
     2372, 2373, 2361, 2362, 2363, 2364, 2374, 2375, 2376, 2370,
     2377, 2371, 2378, 2379, 2380, 2381, 2382, 2383, 2385, 2365,
     2366, 2367, 2368, 2386, 2387, 2388, 2389, 2390, 2369, 2372,
     2373, 2391, 2392, 2393, 2396, 2374, 2375, 2376, 2370, 2377,
     2371, 2378, 2379, 2380, 2381, 2382, 2383, 2385, 2394, 2397,
     2398, 2395, 2386, 2387, 2388, 2389, 2390, 2399, 2400, 2401,

     2391, 2392, 2393, 2396, 2402, 2403, 2404, 2406, 2407, 2408,
     2409, 2412, 2413, 2414, 2415, 2416, 2417, 2394, 2397, 2398,
     2395, 2418, 2419, 2420, 2421, 2422, 2399, 2400, 2401, 2423,
     2424, 2425, 2426, 2402, 2403, 2404, 2406, 2407, 2408, 2409,
     2412, 2413, 2414, 2415, 2416, 2417, 2427, 2428, 2429, 2430,
     2418, 2419, 2420, 2421, 2422, 2431, 2432, 2433, 2423, 2424,
     2425, 2426, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441,
     2442, 2444, 2445, 2446, 2447, 2427, 2428, 2429, 2430, 2448,
     2449, 2450, 2451, 2452, 2431, 2432, 2433, 2453, 2454, 2455,
     2456, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442,

     2444, 2445, 2446, 2447, 2457, 2458, 2459, 2460, 2448, 2449,
     2450, 2451, 2452, 2461, 2462, 2463, 2453, 2454, 2455, 2456,
     2464, 2465, 2466, 2470, 2471, 2472, 2473, 2467, 2474, 2475,
     2476, 2477, 2478, 2457, 2458, 2459, 2460, 2468, 2479, 2469,
     2480, 2481, 2461, 2462, 2463, 2483, 2484, 2485, 2486, 2464,
     2465, 2466, 2470, 2471, 2472, 2473, 2467, 2474, 2475, 2476,
     2477, 2478, 2487, 2488, 2489, 2490, 2468, 2479, 2469, 2480,
     2481, 2491, 2494, 2495, 2483, 2484, 2485, 2486, 2492, 2496,
     2497, 2493, 2498, 2499, 2500, 2501, 2502, 2504, 2505, 2506,
     2507, 2487, 2488, 2489, 2490, 2510, 2511, 2512, 2513, 2514,

     2491, 2494, 2495, 2515, 2516, 2517, 2518, 2492, 2496, 2497,
     2493, 2498, 2499, 2500, 2501, 2502, 2504, 2505, 2506, 2507,
     2519, 2520, 2521, 2522, 2510, 2511, 2512, 2513, 2514, 2523,
     2524, 2525, 2515, 2516, 2517, 2518, 2526, 2527, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2519,
     2520, 2521, 2522, 2539, 2540, 3668, 3668, 3668, 2523, 2524,
     2525, 2543, 2544, 2545, 2546, 2526, 2527, 2528, 2529, 2530,
     2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2547, 2548,
     2549, 2550, 2539, 2540, 2086, 2086, 2086, 2086, 2086, 2551,
     2543, 2544, 2545, 2546, 2552, 2553, 2554, 2555, 2556, 2557,

     2558, 2559, 2560, 2561, 2562, 2563, 2564, 2547, 2548, 2549,
     2550, 2565, 2569, 2570, 2571, 2572, 2573, 3668, 2551, 3668,
     2574, 2575, 2576, 2552, 2553, 2554, 2555, 2556, 2557, 2558,
     2559, 2560, 2561, 2562, 2563, 2564, 2566, 2577, 2578, 2579,
     2565, 2569, 2570, 2571, 2572, 2573, 2567, 2580, 2568, 2574,
     2575, 2576, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589,
     2590, 2591, 2593, 2594, 2592, 2566, 2577, 2578, 2579, 2595,
     2596, 2597, 2598, 2599, 2600, 2567, 2580, 2568, 2601, 2603,
     2604, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
     2591, 2593, 2594, 2592, 2605, 2606, 2609, 2610, 2595, 2596,

     2597, 2598, 2599, 2600, 2611, 2612, 2613, 2601, 2603, 2604,
     2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623,
     2624, 2625, 2626, 2605, 2606, 2609, 2610, 2627, 2628, 2629,
     2630, 2631, 2632, 2611, 2612, 2613, 2633, 2634, 2635, 2614,
     2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624,
     2625, 2626, 2636, 2637, 2638, 2639, 2627, 2628, 2629, 2630,
     2631, 2632, 2644, 2645, 2646, 2633, 2634, 2635, 2214, 2214,
     2214, 2214, 2214, 2641, 2641, 2641, 2641, 2641, 2647, 2648,
     2649, 2636, 2637, 2638, 2639, 2642, 2642, 2642, 2642, 2642,
     2650, 2644, 2645, 2646, 2651, 2652, 2653, 2654, 2655, 2656,

     2657, 2658, 2659, 2660, 2661, 2662, 2663, 2647, 2648, 2649,
     2664, 2665, 2666, 2670, 2671, 2672, 2673, 3668, 2674, 2650,
     2675, 2676, 2677, 2651, 2652, 2653, 2654, 2655, 2656, 2657,
     2658, 2659, 2660, 2661, 2662, 2663, 2667, 2678, 2679, 2664,
     2665, 2666, 2670, 2671, 2672, 2673, 2668, 2674, 2669, 2675,
     2676, 2677, 2680, 2681, 2683, 2684, 2685, 2686, 2687, 2688,
     2689, 2690, 2691, 2694, 2695, 2667, 2678, 2679, 2692, 2696,
     2697, 2693, 2698, 2699, 2700, 2668, 2701, 2669, 2702, 2704,
     2705, 2680, 2681, 2683, 2684, 2685, 2686, 2687, 2688, 2689,
     2690, 2691, 2694, 2695, 2706, 2707, 2710, 2692, 2696, 2697,

     2693, 2698, 2699, 2700, 2711, 2701, 2712, 2702, 2704, 2705,
     2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,
     2723, 2724, 2725, 2706, 2707, 2710, 2726, 2727, 2728, 2729,
     2730, 2731, 2732, 2711, 2733, 2712, 2734, 2735, 2736, 2713,
     2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723,
     2724, 2725, 2737, 2738, 2739, 2726, 2727, 2728, 2729, 2730,
     2731, 2732, 2740, 2733, 2741, 2734, 2735, 2736, 2742, 2743,
     2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
     2754, 2737, 2738, 2739, 2755, 2756, 2757, 2758, 2759, 2760,
     2761, 2740, 2762, 2741, 2763, 2764, 2765, 2742, 2743, 2744,

     2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754,
     2766, 2767, 2768, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
     2769, 2762, 2770, 2763, 2764, 2765, 2771, 2772, 2773, 2774,
     2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2766,
     2767, 2768, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2769,
     2791, 2770, 2792, 2793, 2794, 2771, 2772, 2773, 2774, 2775,
     2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2795, 2796,
     2797, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2798, 2791,
     2799, 2792, 2793, 2794, 2800, 2801, 2802, 2803, 2804, 2805,
     2806, 2807, 2808, 2809, 2810, 2811, 2812, 2795, 2796, 2797,

     2813, 2814, 2815, 2816, 2817, 2818, 2819, 2798, 2820, 2799,
     2821, 2822, 2823, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
     2807, 2808, 2809, 2810, 2811, 2812, 2824, 2825, 2826, 2813,
     2814, 2815, 2816, 2817, 2818, 2819, 2827, 2820, 2828, 2821,
     2822, 2823, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
     2837, 2838, 2839, 2840, 2841, 2824, 2825, 2826, 2842, 2843,
     2844, 2845, 2846, 2847, 2848, 2827, 2849, 2828, 2850, 2851,
     2852, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837,
     2838, 2839, 2840, 2841, 2853, 2854, 2855, 2842, 2843, 2844,
     2845, 2846, 2847, 2848, 2856, 2849, 2857, 2850, 2851, 2852,

     2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867,
     2868, 2869, 2870, 2853, 2854, 2855, 2871, 2872, 2873, 2874,
     2875, 2876, 2877, 2856, 2878, 2857, 3668, 3668, 3668, 2858,
     2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868,
     2869, 2870, 2880, 2881, 2882, 2871, 2872, 2873, 2874, 2875,
     2876, 2877, 2883, 2878, 2879, 2879, 2879, 2879, 2879, 2884,
     2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894,
     2895, 2880, 2881, 2882, 2896, 2897, 2898, 2899, 2900, 2901,
     2902, 2883, 2903, 2904, 2905, 2906, 2907, 2908, 2884, 2885,
     2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895,

     2909, 2910, 2911, 2896, 2897, 2898, 2899, 2900, 2901, 2902,
     2912, 2903, 2904, 2905, 2906, 2907, 2908, 2913, 2914, 2915,
     2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2909,
     2910, 2911, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2912,
     2932, 2933, 2934, 2935, 2936, 2937, 2913, 2914, 2915, 2916,
     2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2938, 2939,
     2940, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2941, 2932,
     2933, 2934, 2935, 2936, 2937, 2942, 2943, 2944, 2945, 2946,
     2947, 2948, 2949, 2949, 2949, 2949, 2949, 2938, 2939, 2940,
     2641, 2641, 2641, 2641, 2641, 2951, 2952, 2941, 2950, 2950,

     2950, 2950, 2950, 2953, 2942, 2943, 2944, 2945, 2946, 2947,
     2948, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962,
     2963, 2964, 2965, 2966, 2951, 2952, 2967, 2968, 2969, 2970,
     2971, 2972, 2953, 2973, 2974, 2975, 2976, 2977, 2978, 2979,
     2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963,
     2964, 2965, 2966, 2980, 2981, 2967, 2968, 2969, 2970, 2971,
     2972, 2982, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2983,
     2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993,
     2994, 2995, 2980, 2981, 2996, 2997, 2998, 2999, 3000, 3001,
     2982, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 2983, 2984,

     2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994,
     2995, 3009, 3010, 2996, 2997, 2998, 2999, 3000, 3001, 3011,
     3002, 3003, 3004, 3005, 3006, 3007, 3008, 3012, 3013, 3014,
     3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024,
     3009, 3010, 3025, 3026, 3027, 3029, 3030, 3031, 3011, 3032,
     3033, 3034, 3035, 3036, 3037, 3038, 3012, 3013, 3014, 3015,
     3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3039,
     3040, 3025, 3026, 3027, 3029, 3030, 3031, 3041, 3032, 3033,
     3034, 3035, 3036, 3037, 3038, 3042, 3043, 3044, 3045, 3046,
     3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3039, 3040,

     3055, 3056, 3057, 3058, 3059, 3060, 3041, 3061, 3062, 3063,
     3064, 3065, 3066, 3067, 3042, 3043, 3044, 3045, 3046, 3047,
     3048, 3049, 3050, 3051, 3052, 3053, 3054, 3068, 3069, 3055,
     3056, 3057, 3058, 3059, 3060, 3070, 3061, 3062, 3063, 3064,
     3065, 3066, 3067, 3072, 3073, 3074, 3075, 3076, 3077, 3078,
     3079, 3080, 3081, 3082, 3083, 3084, 3068, 3069, 3085, 3086,
     3087, 3088, 3089, 3090, 3070, 3091, 3092, 3093, 3094, 3095,
     3096, 3097, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,
     3080, 3081, 3082, 3083, 3084, 3098, 3099, 3085, 3086, 3087,
     3088, 3089, 3090, 3100, 3091, 3092, 3093, 3094, 3095, 3096,

     3097, 3101, 3102, 3103, 3104, 3105, 2879, 2879, 2879, 2879,
     2879, 3106, 3107, 3108, 3098, 3099, 3109, 3110, 3111, 3112,
     3113, 3115, 3100, 3116, 3117, 3118, 3119, 3120, 3121, 3122,
     3101, 3102, 3103, 3104, 3105, 3123, 3124, 3125, 3126, 3127,
     3106, 3107, 3108, 3128, 3129, 3109, 3110, 3111, 3112, 3113,
     3115, 3130, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3131,
     3132, 3133, 3134, 3135, 3123, 3124, 3125, 3126, 3127, 3136,
     3137, 3138, 3128, 3129, 3139, 3140, 3141, 3142, 3143, 3144,
     3130, 3145, 3146, 3147, 3148, 3668, 3668, 3668, 3131, 3132,
     3133, 3134, 3135, 2949, 2949, 2949, 2949, 2949, 3136, 3137,

     3138, 3149, 3150, 3139, 3140, 3141, 3142, 3143, 3144, 3151,
     3145, 3146, 3147, 3148, 2641, 2641, 2641, 2641, 2641, 3152,
     3153, 3154, 3155, 3156, 3158, 3159, 3160, 3161, 3162, 3163,
     3149, 3150, 3164, 3165, 3166, 3167, 3168, 3169, 3151, 3170,
     3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3152, 3153,
     3154, 3155, 3156, 3158, 3159, 3160, 3161, 3162, 3163, 3179,
     3180, 3164, 3165, 3166, 3167, 3168, 3169, 3181, 3170, 3171,
     3172, 3173, 3174, 3175, 3176, 3177, 3178, 3182, 3183, 3184,
     3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3179, 3180,
     3193, 3194, 3195, 3196, 3203, 3204, 3181, 3205, 3206, 3207,

     3208, 3668, 3209, 3668, 3668, 3668, 3182, 3183, 3184, 3185,
     3186, 3187, 3188, 3189, 3190, 3191, 3192, 3197, 3198, 3193,
     3194, 3195, 3196, 3203, 3204, 3210, 3205, 3206, 3207, 3208,
     3199, 3209, 3200, 3201, 3202, 3211, 3212, 3213, 3214, 3215,
     3216, 3217, 3218, 3219, 3220, 3222, 3197, 3198, 3221, 3223,
     3224, 3225, 3226, 3227, 3210, 3228, 3229, 3230, 3231, 3199,
     3232, 3200, 3201, 3202, 3211, 3212, 3213, 3214, 3215, 3216,
     3217, 3218, 3219, 3220, 3222, 3233, 3234, 3221, 3223, 3224,
     3225, 3226, 3227, 3241, 3228, 3229, 3230, 3231, 3242, 3232,
     3243, 3244, 3245, 3235, 3236, 3246, 3247, 3248, 3249, 3250,

     3251, 3252, 3253, 3254, 3233, 3234, 3237, 3255, 3238, 3239,
     3240, 3256, 3241, 3257, 3258, 3260, 3261, 3242, 3259, 3243,
     3244, 3245, 3235, 3236, 3246, 3247, 3248, 3249, 3250, 3251,
     3252, 3253, 3254, 3262, 3263, 3237, 3255, 3238, 3239, 3240,
     3256, 3264, 3257, 3258, 3260, 3261, 3265, 3259, 3266, 3267,
     3268, 3269, 3270, 3271, 3272, 3279, 3273, 3274, 3280, 3281,
     3282, 3283, 3262, 3263, 3284, 3285, 3286, 3287, 3288, 3275,
     3264, 3276, 3277, 3278, 3289, 3265, 3290, 3266, 3267, 3268,
     3269, 3270, 3271, 3272, 3279, 3273, 3274, 3280, 3281, 3282,
     3283, 3291, 3292, 3284, 3285, 3286, 3287, 3288, 3275, 3293,

     3276, 3277, 3278, 3289, 3294, 3290, 3295, 3296, 3298, 3299,
     3300, 3297, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308,
     3291, 3292, 3309, 3310, 3317, 3318, 3319, 3320, 3293, 3321,
     3322, 3323, 3324, 3294, 3325, 3295, 3296, 3298, 3299, 3300,
     3297, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3311,
     3312, 3309, 3310, 3317, 3318, 3319, 3320, 3326, 3321, 3322,
     3323, 3324, 3313, 3325, 3314, 3315, 3316, 3327, 3328, 3329,
     3330, 3331, 3332, 3333, 3336, 3337, 3334, 3338, 3311, 3312,
     3335, 3339, 3340, 3341, 3342, 3343, 3326, 3344, 3345, 3346,
     3347, 3313, 3350, 3314, 3315, 3316, 3327, 3328, 3329, 3330,

     3331, 3332, 3333, 3336, 3337, 3334, 3338, 3351, 3352, 3335,
     3339, 3340, 3341, 3342, 3343, 3353, 3344, 3345, 3346, 3347,
     3348, 3350, 3354, 3355, 3349, 3356, 3357, 3358, 3359, 3360,
     3361, 3362, 3363, 3365, 3366, 3364, 3351, 3352, 3367, 3368,
     3371, 3369, 3372, 3373, 3353, 3370, 3374, 3375, 3376, 3348,
     3377, 3354, 3355, 3349, 3356, 3357, 3358, 3359, 3360, 3361,
     3362, 3363, 3365, 3366, 3364, 3378, 3379, 3367, 3368, 3371,
     3369, 3372, 3373, 3380, 3370, 3374, 3375, 3376, 3381, 3377,
     3382, 3383, 3384, 3386, 3387, 3385, 3388, 3389, 3390, 3392,
     3393, 3394, 3391, 3395, 3378, 3379, 3396, 3397, 3398, 3399,

     3400, 3401, 3380, 3402, 3403, 3404, 3668, 3381, 3407, 3382,
     3383, 3384, 3386, 3387, 3385, 3388, 3389, 3390, 3392, 3393,
     3394, 3391, 3395, 3408, 3409, 3396, 3397, 3398, 3399, 3400,
     3401, 3410, 3402, 3403, 3404, 3405, 3411, 3407, 3406, 3413,
     3412, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422,
     3423, 3424, 3408, 3409, 3425, 3426, 3428, 3429, 3427, 3430,
     3410, 3431, 3432, 3433, 3405, 3411, 3434, 3406, 3413, 3412,
     3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423,
     3424, 3435, 3436, 3425, 3426, 3428, 3429, 3427, 3430, 3437,
     3431, 3432, 3433, 3438, 3439, 3434, 3440, 3441, 3442, 3443,

     3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453,
     3435, 3436, 3454, 3455, 3456, 3457, 3458, 3459, 3437, 3460,
     3461, 3462, 3438, 3439, 3463, 3440, 3441, 3442, 3443, 3444,
     3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3464,
     3465, 3454, 3455, 3456, 3457, 3458, 3459, 3466, 3460, 3461,
     3462, 3467, 3468, 3463, 3469, 3470, 3471, 3472, 3473, 3474,
     3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3464, 3465,
     3483, 3484, 3485, 3486, 3487, 3488, 3466, 3489, 3490, 3491,
     3467, 3468, 3492, 3469, 3470, 3471, 3472, 3473, 3474, 3475,
     3476, 3477, 3478, 3479, 3480, 3481, 3482, 3493, 3494, 3483,

     3484, 3485, 3486, 3487, 3488, 3495, 3489, 3490, 3491, 3496,
     3497, 3492, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505,
     3506, 3507, 3508, 3509, 3510, 3511, 3493, 3494, 3512, 3513,
     3514, 3515, 3516, 3517, 3495, 3518, 3519, 3520, 3496, 3497,
     3521, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506,
     3507, 3508, 3509, 3510, 3511, 3522, 3523, 3512, 3513, 3514,
     3515, 3516, 3517, 3524, 3518, 3519, 3520, 3525, 3526, 3521,
     3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536,
     3537, 3538, 3539, 3540, 3522, 3523, 3541, 3542, 3543, 3544,
     3545, 3546, 3524, 3547, 3548, 3549, 3525, 3526, 3550, 3527,

     3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537,
     3538, 3539, 3540, 3551, 3552, 3541, 3542, 3543, 3544, 3545,
     3546, 3553, 3547, 3548, 3549, 3554, 3555, 3550, 3556, 3557,
     3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567,
     3568, 3569, 3551, 3552, 3570, 3571, 3572, 3573, 3574, 3575,
     3553, 3576, 3577, 3578, 3554, 3555, 3579, 3556, 3557, 3558,
     3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568,
     3569, 3580, 3581, 3570, 3571, 3572, 3573, 3574, 3575, 3582,
     3576, 3577, 3578, 3583, 3584, 3579, 3585, 3586, 3587, 3588,
     3589, 3590, 3591, 3592, 3593, 3594, 3595, 3597, 3599, 3601,

     3580, 3581, 3603, 3604, 3605, 3606, 3607, 3608, 3582, 3609,
     3610, 3611, 3583, 3584, 3612, 3585, 3586, 3587, 3588, 3589,
     3590, 3591, 3592, 3593, 3594, 3595, 3597, 3599, 3601, 3613,
     3614, 3603, 3604, 3605, 3606, 3607, 3608, 3615, 3609, 3610,
     3611, 3616, 3617, 3612, 3618, 3619, 3620, 3621, 3622, 3623,
     3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3613, 3614,
     3632, 3633, 3634, 3635, 3636, 3637, 3615, 3638, 3639, 3640,
     3616, 3617, 3641, 3618, 3619, 3620, 3621, 3622, 3623, 3624,
     3625, 3626, 3627, 3628, 3629, 3630, 3631, 3642, 3643, 3632,
     3633, 3634, 3635, 3636, 3637, 3648, 3638, 3639, 3640, 3649,

     3650, 3641, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658,
     3659, 3660, 3661, 3662, 3663, 3664, 3642, 3643, 3665, 3666,
     3667, 3668, 3668, 3668, 3648, 3668, 3668, 3668, 3649, 3650,
     3668, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
     3660, 3661, 3662, 3663, 3664, 3668, 3668, 3665, 3666, 3667,
      262, 3668,  262,  364, 3668,  364,  371,  371,  371,  371,
      371,  479, 3668,  479,  479,  479,  479,  479,  479,  481,
     3668, 3668,  481,  481,  481, 3668,  481,  590,  590,  590,
      590,  590,  590,  590,  590, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 2216, 3668, 2216, 2216, 2216, 2216, 2216,

     2216,   13, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668
    } ;

static yyconst flex_int16_t yy_chk[7986] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
     3643,    7,    7,    7,    7,    7,    7,    8, 3642,    8,
        8,    8,    8,    8,    8,    9, 3641,    9,    9,    9,
        9,    9,    9,   10, 3640,   10,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   15,   30,   15,   21,   21,   24,
     3594,   33,   34, 3591,   31,   24, 3588,   24,   30,   40,
       47,   24,   24,   24,   24,   24, 3585,  112,   31,  112,
       61,   25,  120,  120,   30,   25,   62, 3309,   24,   25,

       33,   34,   25,   31,   24,   25,   24,   30,   40,   47,
       24,   24,   24,   24,   24,   25,   26,   31,   27,   61,
       25,   45,   27,   26,   25,   62,   27,   26,   25,   45,
       26,   25,   27,   26,   25,   27,   26,  149, 3271,  149,
       58,   68,   32, 3233,   25,   26,  482,   27,  482,   32,
       45,   27,   26,   58,   32,   27,   26, 3195,   45,   26,
     2964,   27,   26,   76,   27,   26,   28,   36,   28,   58,
       68,   32,   35,   92,   93,   36,   35,   28,   32,   28,
       35,   36,   58,   32,   28,   73,   35,   28, 2085,   28,
     2085,   99,   76,   73, 2893,   28,   36,   28, 1919, 1919,

     2823,   35,   92,   93,   36,   35,   28, 2754,   28,   35,
       36,  107,  132,   28,   73,   35,   28,   39,   28,   29,
       99,   41,   73,   29,   37,   41,   37,   29,   37,   41,
       29,   39,  133,   29,   39,   41,   29,   39,   37,   29,
      107,  132,  139,   37,   37, 2299,   39,  146,   29, 2215,
       41, 2215,   29,   37,   41,   37,   29,   37,   41,   29,
       39,  133,   29,   39,   41,   29,   39,   37,   29,   59,
      155,  139,   37,   37,   38,   38,  146,  158,   38,   42,
       44,   42,   44,   59,   38,   44,   38,   89,   38,   42,
       38,   42,   38,   38,   38, 2264,   42,   42,   59,  155,

       89, 2046, 2046,   38,   38, 2220,  158,   38,   42,   44,
       42,   44,   59,   38,   44,   38,   89,   38,   42,   38,
       42,   38,   38,   38,   43,   42,   42, 2168,  104,   89,
       46,   43,   43,   46,   46, 2133,  104, 2089,   43,  159,
       46,   43,   50,   50,   50,   50,   50, 2039,  160,  161,
       63, 2004,   90,   43,   63, 1960,   50,  104,   63,   46,
       43,   43,   46,   46,   63,  104,   90,   43,  159,   46,
       43,   51,   51,   51,   51,   51,   51,  160,  161,   63,
       53,   90,   64,   63,   53,   50,   51,   63,   53,  162,
       64,   53, 1912,   63,   53,   90,   64,  110,  110,  110,

      110,  110, 2175, 2175,   53, 2306, 2306,  163,  129,   53,
     1877,   64, 1833,   53, 1753,   51,   52,   53,  162,   64,
       53,  129,   52,   53,   52,   64,  166,   54,   52,   52,
       52,   52,   52,   53,   54,   55,  163,  129,   54,   55,
       95,   54,  167,   55,   54,   52,  169,   54,   95,   55,
      129,   52,   55,   52,   95,  166,   54,   52,   52,   52,
       52,   52, 1748,   54,   55, 1747, 1594,   54,   55,   95,
       54,  167,   55,   54, 1589,  169,   54,   95,   55,   60,
      130,   55,   56,   95,   56,  171,   60,   67,   69,  144,
      156,   60,   69,   56,  130,   56,   69,  144,  156,  174,

       56,   67,   69,   56,   67,   56, 1588,   67,   60,  130,
     1437,   56,  177,   56,  171,   60,   67,   69,  144,  156,
       60,   69,   56,  130,   56,   69,  144,  156,  174,   56,
       67,   69,   56,   67,   56,   57,   67,  157,  173,   57,
       65,  177,   65,   57,   65,   72,   57,   72,  173,   57,
       72,  178,   57,   74,   65,   57,   74,   74,  157,   65,
       65, 1432, 1431,   74,   57, 1284,  157,  173,   57,   65,
     1279,   65,   57,   65,   72,   57,   72,  173,   57,   72,
      178,   57,   74,   65,   57,   74,   74,  157,   65,   65,
       66,   66,   74,  165,   66,   70,  103,   70,  103,  165,

       66,  103,   66,  179,   66,   70,   66,   70,   66,   66,
       66, 1278,   70,   70,  180,  181,  182,  183, 1151,   66,
       66, 1078,  165,   66,   70,  103,   70,  103,  165,   66,
      103,   66,  179,   66,   70,   66,   70,   66,   66,   66,
       71,   70,   70,  180,  181,  182,  183,   71,   71,   81,
       81,   81,   81,   81,   71,   91,  990,   71,  184,  917,
      170,  175,   91,   81,  170,  185,  175,   91,   82,   71,
       82,   82,   82,   82,   82,   82,   71,   71,  105,  834,
      761,  105,  105,   71,   91,   82,   71,  184,  105,  170,
      175,   91,   81,  170,  185,  175,   91,  131,  680,  108,

      108,  108,  108,  108,  131,  187,  607,  105,   84,  131,
      105,  105,   84,  108,   82,   83,   84,  105,  186,   84,
      188,   83,   84,   83,  186,  189,  131,   83,   83,   83,
       83,   83,   84,  131,  187,  186,  590,   84,  131,  190,
      151,   84,  108,  148,   83,   84,  122,  186,   84,  188,
       83,   84,   83,  186,  189,   85,   83,   83,   83,   83,
       83,   84,   85,   86,  186,  135,   85,   86,  190,   85,
      192,   86,   85,  135,   94,   85,  118,   86,   94,  135,
       86,  114,   94,   48,   85,   23,  193,   20,   94,   17,
       13,   85,   86,    0,  135,   85,   86,    0,   85,  192,

       86,   85,  135,   94,   85,   98,   86,   94,  135,   86,
       87,   94,   87,  164,  164,  193,   96,   94,   96,   98,
       96,   87,   98,   87,  143,   98,  143,  164,   87,  143,
       96,   87,    0,   87,   98,   96,   96,  194,    0,   87,
      195,   87,  164,  164,    0,   96,    0,   96,   98,   96,
       87,   98,   87,  143,   98,  143,  164,   87,  143,   96,
       87,  138,   87,   88,   96,   96,  194,   88,  100,  195,
      176,   88,  100,  176,   88,  138,  100,   88,  138,  176,
       88,  138,  100,   88,    0,    0,  176,  196,    0,    0,
      138,    0,   88,  197,    0,  198,   88,  100,    0,  176,

       88,  100,  176,   88,  138,  100,   88,  138,  176,   88,
      138,  100,   88,   97,   97,  176,  196,   97,  101,  201,
      101,  202,  197,   97,  198,   97,  203,   97,  101,   97,
      101,   97,   97,   97,    0,  101,  101,  203,  203,  199,
      208,    0,   97,   97,  199,  199,   97,  101,  201,  101,
      202,    0,   97,    0,   97,  203,   97,  101,   97,  101,
       97,   97,   97,  102,  101,  101,  203,  203,  199,  208,
      102,  102,    0,  199,  199,    0,  205,  102,  205,  109,
      102,  109,  109,  109,  109,  109,  109,  207,  204,  209,
      124,  207,  102,  204,  124,  210,  109,    0,  124,  102,

      102,  124,    0,    0,  124,  205,  102,  205,    0,  102,
        0,    0,    0,    0,  124,    0,  207,  204,  209,  124,
      207,  216,  204,  124,  210,  109,  123,  124,    0,  217,
      124,  211,  123,  124,  123,  211,  218,  125,  123,  123,
      123,  123,  123,  124,  125,  126,  212,  212,  125,  126,
      216,  125,  219,  126,  125,  123,    0,  125,  217,  126,
      211,  123,  126,  123,  211,  218,  125,  123,  123,  123,
      123,  123,    0,  125,  126,  212,  212,  125,  126,  220,
      125,  219,  126,  125,    0,  134,  125,  213,  126,  134,
      213,  126,  127,  134,  127,  214,  214,  145,  140,  134,

      145,  145,  140,  127,  221,  127,  140,  145,  220,  222,
      127,  223,  140,  127,  134,  127,  213,    0,  134,  213,
        0,  127,  134,  127,  214,  214,  145,  140,  134,  145,
      145,  140,  127,  221,  127,  140,  145,  191,  222,  127,
      223,  140,  127,  191,  127,  128,  191,  206,  224,  128,
      136,  225,  136,  128,  136,  226,  128,  229,  206,  128,
      215,  215,  128,  227,  136,  128,  191,  206,  230,  136,
      136,    0,  191,  227,  128,  191,  206,  224,  128,  136,
      225,  136,  128,  136,  226,  128,  229,  206,  128,  215,
      215,  128,  227,  136,  128,  231,  206,  230,  136,  136,

      137,  137,  227,  233,  137,  141,  235,  141,    0,  237,
      137,  238,  137,    0,  137,  141,  137,  141,  137,  137,
      137,    0,  141,  141,  231,    0,    0,  228,    0,  137,
      137,  228,  233,  137,  141,  235,  141,  228,  237,  137,
      238,  137,  172,  137,  141,  137,  141,  137,  137,  137,
      142,  141,  141,  172,  172,  172,  228,  142,  142,  234,
      228,  239,  172,  232,  142,    0,  228,  142,  232,  240,
      234,  172,  241,    0,  242,    0,    0,    0,  239,  142,
      240,  232,  172,  172,  172,  236,  142,  142,  234,  248,
      239,  172,  232,  142,  236,    0,  142,  232,  240,  234,

      243,  241,  236,  242,  245,  247,  246,  239,  243,  240,
      232,  250,  245,  246,  236,  246,  249,  247,  248,  251,
      252,  253,  249,  236,  245,  254,  255,    0,    0,  243,
        0,  236,    0,  245,  247,  246,    0,  243,    0,    0,
      250,  245,  246,    0,  246,  249,  247,    0,  251,  252,
      253,  249,    0,  245,  254,  255,  257,  257,  257,  257,
      257,  258,    0,  258,  263,  258,  258,  258,  258,  258,
      257,  259,  259,  259,  259,  259,  260,  260,  260,  260,
      260,  260,  261,  265,  261,  259,  261,  261,  261,  261,
      261,  260,  264,  263,  266,  267,  268,  269,  270,  257,

      264,  271,  272,  272,  265,  273,  274,  275,  277,  278,
      279,  273,  265,  278,  259,  282,  272,  283,  281,  285,
      260,  264,  283,  266,  267,  268,  269,  270,  281,  264,
      271,  272,  272,  265,  273,  274,  275,  277,  278,  279,
      273,  280,  278,  286,  282,  272,  283,  281,  285,  287,
      288,  283,  280,  280,  280,  284,  289,  281,  284,  290,
      291,  280,  292,  293,  284,  295,  296,  297,  298,  294,
      280,  284,  286,  300,  301,  294,    0,  302,  287,  288,
      303,  280,  280,  280,  284,  289,  294,  284,  290,  291,
      280,  292,  293,  284,  295,  296,  297,  298,  294,  299,

      284,  304,  300,  301,  294,  299,  302,  305,  299,  303,
      306,  307,  309,  310,  311,  294,  307,  307,  312,  313,
      316,  313,  317,  312,  314,  311,  311,  315,  299,  318,
      304,  315,    0,    0,  299,  314,  305,  299,    0,  306,
      307,  309,  310,  311,  314,  307,  307,  312,  313,  316,
      313,  317,  312,  314,  311,  311,  315,  319,  318,  324,
      315,  319,  320,  320,  314,  321,  322,  322,  321,  323,
      323,  325,  326,  314,  327,  328,  329,  330,  331,  332,
      333,  334,    0,  335,  337,  338,  319,  339,  324,    0,
      319,  320,  320,  335,  321,  322,  322,  321,  323,  323,

      325,  326,  341,  327,  328,  329,  330,  331,  332,  333,
      334,  336,  335,  337,  338,  336,  339,  342,  340,  343,
      344,  336,  335,  340,  345,  346,  347,  348,  342,  344,
      349,  341,  350,  351,    0,    0,  340,  344,  348,    0,
      336,  351,    0,  347,  336,  356,  342,  340,  343,  344,
      336,    0,  340,  345,  346,  347,  348,  342,  344,  349,
      353,  350,  351,  355,  354,  340,  344,  348,  353,  358,
      351,  354,  347,  354,  356,  355,  357,  359,  360,  361,
      353,  362,  357,  363,  367,  367,  367,  367,  367,  353,
      372,    0,  355,  354,    0,    0,    0,  353,  358,    0,

      354,    0,  354,    0,  355,  357,  359,  360,  361,  353,
      362,  357,  363,  365,  365,  365,  365,  365,  366,  372,
      366,    0,  366,  366,  366,  366,  366,  365,  368,  368,
      368,  368,  368,  369,  374,  369,  369,  369,  369,  369,
      369,  370,  368,  370,  373,  370,  370,  370,  370,  370,
      369,  375,  373,  376,  377,  374,  365,  378,  379,  380,
      381,  381,  382,  374,  383,  384,  386,  388,  382,    0,
      391,  368,  387,  373,  381,  390,  387,  394,    0,  369,
      375,  373,  376,  377,  374,  390,  378,  379,  380,  381,
      381,  382,    0,  383,  384,  386,  388,  382,  389,  391,

      395,  387,  392,  381,  390,  387,  394,  392,  396,  389,
      389,  389,  393,  397,  390,  393,  398,  399,  389,  400,
      401,  393,  402,  404,  405,  406,  403,  389,  393,  395,
      407,  392,  403,    0,  409,  410,  392,  396,  389,  389,
      389,  393,  397,  403,  393,  398,  399,  389,  400,  401,
      393,  402,  404,  405,  406,  403,  408,  393,  411,  407,
      412,  403,  408,  409,  410,  408,  413,  414,  415,  416,
      418,  419,  403,  421,  416,  416,    0,  422,  421,  422,
      424,  420,  425,  426,  424,  408,  427,  411,  433,  412,
        0,  408,  420,  420,  408,  413,  414,  415,  416,  418,

      419,    0,  421,  416,  416,  423,  422,  421,  422,  424,
      420,  425,  426,  424,  428,  427,  423,  433,  428,  429,
      429,  420,  420,  430,  434,  423,  430,  431,  431,  432,
      432,  435,  436,  437,  423,  438,  439,  440,  441,  442,
      443,  444,    0,  428,  446,  423,    0,  428,  429,  429,
      447,  444,  430,  434,  423,  430,  431,  431,  432,  432,
      435,  436,  437,  448,  438,  439,  440,  441,  442,  443,
      444,  445,  449,  446,  450,  445,  451,  449,  452,  447,
      444,  445,  453,  454,  455,  456,  457,  451,  458,  459,
      449,  453,  448,    0,    0,  465,    0,  457,    0,  453,

      445,  449,  456,  450,  445,  451,  449,  452,  467,  468,
      445,  453,  454,  455,  456,  457,  451,  458,  459,  449,
      453,  460,  462,  464,  465,  463,  457,  466,  453,  460,
      462,  456,  463,  466,  463,  464,  469,  467,  468,  470,
      471,  472,  462,  473,  473,  473,  473,  473,    0,    0,
      460,  462,  464,    0,  463,    0,  466,  473,  460,  462,
        0,  463,  466,  463,  464,  469,    0,    0,  470,  471,
      472,  462,  474,    0,  474,    0,  474,  474,  474,  474,
      474,  475,  475,  475,  475,  475,  473,  476,  476,  476,
      476,  476,    0,    0,  477,  475,  477,  477,  477,  477,

      477,  477,  478,    0,  478,  480,  478,  478,  478,  478,
      478,  477,  479,  479,  479,  479,  479,  488,  480,  480,
      480,  480,  480,  489,  475,  484,  484,  491,  484,  490,
      492,  489,  484,  493,  494,  495,  496,  497,  497,  498,
      477,  499,  500,  502,  484,  498,  488,  504,  484,  503,
      490,  497,  489,  503,  507,    0,  491,    0,  490,  492,
      489,  510,  493,  494,  495,  496,  497,  497,  498,  511,
      499,  500,  502,  505,  498,  484,  504,  506,  503,  490,
      497,  512,  503,  507,  505,  505,  505,  506,  509,  508,
      510,  509,  513,  505,  508,  514,  515,  509,  511,  516,

      517,  518,  505,  520,  509,  521,  506,  522,    0,  523,
      512,  525,    0,  505,  505,  505,  506,  509,  508,    0,
      509,  513,  505,  508,  514,  515,  509,  526,  516,  517,
      518,  519,  520,  509,  521,  524,  522,  519,  523,  527,
      525,  524,  528,  529,  524,  530,  531,  532,  519,  534,
      535,  536,  532,  532,  537,  538,  526,  538,  541,  537,
      519,  540,  536,  536,  524,  540,  519,    0,  527,  542,
      524,  528,  529,  524,  530,  531,  532,  519,  534,  535,
      536,  532,  532,  537,  538,  539,  538,  541,  537,  543,
      540,  536,  536,  544,  540,  549,  539,  544,  542,  545,

      545,  546,  547,  547,  546,  539,  548,  548,  550,  551,
      552,  553,  554,  555,  539,  556,  557,  558,  543,  559,
      562,  563,  544,  564,  549,  539,  544,  566,  545,  545,
      546,  547,  547,  546,  539,  548,  548,  550,  551,  552,
      553,  554,  555,  560,  556,  557,  558,  561,  559,  562,
      563,  561,  564,  560,  567,  565,  566,  561,  568,  570,
      565,  569,  571,  573,  572,  567,  574,  575,    0,  576,
      569,    0,  560,  565,  573,    0,  561,  576,  569,  581,
      561,  572,  560,  567,  565,  583,  561,  568,  570,  565,
      569,  571,  573,  572,  567,  574,  575,  578,  576,  569,

      580,  584,  565,  573,  579,  578,  576,  569,  581,  582,
      572,  579,  580,  579,  583,  582,  585,  578,  586,  587,
      588,  592,  594,  597,  599,  600,  578,  602,  603,  580,
      584,  604,  605,  579,  578,  606,  608,  609,  582,  611,
      579,  580,  579,  610,  582,  585,  578,  586,  587,  588,
      592,  594,  597,  599,  600,  612,  602,  603,  610,  613,
      604,  605,  614,  615,  606,  608,  609,  616,  611,  617,
      618,  617,  610,  619,  620,  621,  622,  623,  623,  624,
      625,  626,  624,  627,  612,  628,  629,  610,  613,  621,
      621,  614,  615,  630,  631,  632,  616,  633,  617,  618,

      617,  635,  619,  620,  621,  622,  623,  623,  624,  625,
      626,  624,  627,  636,  628,  629,  638,  639,  621,  621,
      637,  640,  630,  631,  632,  641,  633,  637,  642,  643,
      635,  644,  646,  645,  647,  648,  649,  650,  651,  652,
      653,  654,  636,    0,  655,  638,  639,  657,  660,  637,
      640,  645,  661,  662,  641,    0,  637,  642,  643,  655,
      644,  646,  645,  647,  648,  649,  650,  651,  652,  653,
      654,  663,  656,  655,  656,  664,  657,  660,  665,  666,
      645,  661,  662,  667,  656,  668,  669,  671,  655,  672,
      673,  674,  675,  677,  656,  681,  682,  683,  684,  685,

      663,  686,  673,  688,  664,  689,  690,  665,  666,  691,
      692,  693,  667,  656,  668,  669,  671,  694,  672,  673,
      674,  675,  677,  656,  681,  682,  683,  684,  685,  695,
      686,  673,  688,  696,  689,  690,  697,  698,  691,  692,
      693,  699,  700,  701,  702,  703,  694,  704,  705,  706,
      707,  708,  709,  710,  711,  713,  714,  715,  695,  716,
      708,  717,  696,  719,  720,  697,  698,  721,  722,  723,
      699,  700,  701,  702,  703,  724,  704,  705,  706,  707,
      708,  709,  710,  711,  713,  714,  715,  725,  716,  726,
      717,  728,  719,  720,  729,  730,  721,  722,  723,  727,

      731,  727,  732,    0,  724,  734,  735,  736,  737,  733,
      733,  736,  738,  739,    0,    0,  725,    0,  726,    0,
      728,    0,    0,  729,  730,    0,    0,    0,  727,  731,
      727,  732,  733,    0,  734,  735,  736,  737,  733,  733,
      736,  738,  739,  740,  740,  740,  740,  740,  741,  741,
      741,  741,  741,  742,  742,  742,  742,  742,  743,  746,
      743,  733,  743,  743,  743,  743,  743,  742,  744,  744,
      744,  744,  744,  745,  745,  745,  745,  745,  748,  751,
      753,  754,  756,  757,  758,  759,  760,  762,  746,  763,
      764,  765,  766,  767,  768,  769,  742,  770,  771,  772,

      771,  773,  774,  776,  779,  764,    0,  748,  751,  753,
      754,  756,  757,  758,  759,  760,  762,  780,  763,  764,
      765,  766,  767,  768,  769,  775,  770,  771,  772,  771,
      773,  774,  776,  779,  764,  777,  777,  781,  778,  775,
      775,  778,  782,  783,  784,  785,  780,  786,  787,  789,
      790,  791,  792,  793,  775,  794,  795,  796,  791,  797,
      798,  800,  801,  802,  777,  777,  781,  778,  775,  775,
      778,  782,  783,  784,  785,  799,  786,  787,  789,  790,
      791,  792,  793,  803,  794,  795,  796,  791,  797,  798,
      800,  801,  802,  799,  804,  805,  806,  807,  808,  809,

        0,  811,  814,  815,  799,  816,  817,  810,  818,  810,
      819,  820,  803,  821,  809,  822,  823,  825,  826,  810,
      828,  827,  799,  804,  805,  806,  807,  808,  809,  810,
      811,  814,  815,  827,  816,  817,  829,  818,  831,  819,
      820,  835,  821,  809,  822,  823,  825,  826,  810,  828,
      827,  836,  837,  838,  839,  840,  842,  843,  810,  844,
      845,  846,  827,  847,  848,  829,  849,  831,  850,  851,
      835,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      836,  837,  838,  839,  840,  842,  843,  861,  844,  845,
      846,  863,  847,  848,  864,  849,  865,  850,  851,  867,

      852,  853,  854,  855,  856,  857,  858,  859,  860,  862,
      868,  869,  870,  871,  873,  874,  861,  875,  862,  876,
      863,  877,  878,  864,  879,  865,  880,  881,  867,  881,
      882,  883,  884,  885,  886,    0,    0,  888,  862,  868,
      869,  870,  871,  873,  874,  889,  875,  891,  876,  892,
      877,  878,  893,  879,    0,  880,  881,    0,  881,  882,
      883,  884,  885,  886,  887,  887,  888,  890,  902,  904,
      907,  890,    0,    0,  889,    0,  891,    0,  892,    0,
        0,  893,  894,  894,  894,  894,  894,  887,  895,  895,
      895,  895,  895,  887,  887,    0,  890,  902,  904,  907,

      890,  896,  896,  896,  896,  896,  897,  897,  897,  897,
      897,  900,  900,  900,  900,  900,  887,  898,  909,  898,
      897,  898,  898,  898,  898,  898,  899,  910,  899,  899,
      899,  899,  899,  899,  901,  901,  901,  901,  901,  912,
      913,  914,  915,  899,  916,  918,  919,  909,  920,  897,
      921,  922,  923,  924,  925,  926,  910,  927,  928,  927,
      929,  930,  932,  920,  933,  933,    0,  935,  912,  913,
      914,  915,  899,  916,  918,  919,  936,  920,  937,  921,
      922,  923,  924,  925,  926,  931,  927,  928,  927,  929,
      930,  932,  920,  933,  933,  934,  935,  938,  934,  931,

      931,  939,  940,  941,  942,  936,  943,  937,  945,  946,
      947,  948,  949,  950,  931,  951,  952,  947,  953,  954,
      956,  957,  958,  959,  934,  955,  938,  934,  931,  931,
      939,  940,  941,  942,  960,  943,  961,  945,  946,  947,
      948,  949,  950,  955,  951,  952,  947,  953,  954,  956,
      957,  958,  959,  962,  955,  963,  964,  966,  965,  966,
      967,  970,  971,  960,  972,  961,  973,  974,  975,  966,
      976,  977,  955,  965,  978,  979,  981,  982,  984,  966,
      983,  985,  962,  987,  963,  964,  991,  965,  992,  967,
      970,  971,  983,  972,  993,  973,  974,  975,  966,  976,

      977,  994,  965,  978,  979,  981,  982,  984,  966,  983,
      985,  995,  987,  996,  998,  991,  999,  992, 1000, 1001,
     1002,  983, 1003,  993, 1004, 1005, 1006, 1007, 1008, 1009,
      994, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019,
      995, 1018,  996,  998, 1020,  999, 1021, 1000, 1001, 1002,
     1018, 1003, 1023, 1004, 1005, 1006, 1007, 1008, 1009, 1024,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1025,
     1018, 1026, 1027, 1020, 1029, 1021, 1030, 1031, 1032, 1033,
     1034, 1023, 1035, 1036, 1037, 1038, 1037, 1039, 1024, 1040,
     1041, 1042, 1044, 1045, 1043, 1043,    0, 1047, 1025, 1048,

     1026, 1027, 1049, 1029,    0, 1030, 1031, 1032, 1033, 1034,
        0, 1035, 1036, 1037, 1038, 1037, 1039, 1043, 1040, 1041,
     1042, 1044, 1045, 1043, 1043, 1046, 1047, 1063, 1048, 1046,
     1065, 1049, 1050, 1050, 1050, 1050, 1050, 1051, 1051, 1051,
     1051, 1051,    0,    0,    0,    0, 1043, 1052, 1052, 1052,
     1052, 1052,    0,    0, 1046,    0, 1063,    0, 1046, 1065,
     1053, 1052, 1053,    0, 1053, 1053, 1053, 1053, 1053, 1054,
     1054, 1054, 1054, 1054, 1055,    0, 1055, 1055, 1055, 1055,
     1055, 1055, 1056, 1056, 1056, 1056, 1056, 1058, 1068,    0,
     1052, 1055, 1057, 1057, 1057, 1057, 1057, 1060, 1070, 1071,

     1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1059,
     1060, 1060, 1060, 1060, 1060, 1061, 1061, 1068, 1061, 1073,
     1055, 1074, 1061, 1075, 1076, 1077, 1079, 1070, 1071, 1080,
     1081, 1082, 1083, 1084, 1061, 1085,    0, 1086, 1061, 1087,
     1088, 1089, 1088, 1090, 1091, 1081, 1093,    0, 1073,    0,
     1074, 1096, 1075, 1076, 1077, 1079, 1094, 1094, 1080, 1081,
     1082, 1083, 1084, 1092, 1085, 1061, 1086, 1097, 1087, 1088,
     1089, 1088, 1090, 1091, 1081, 1093, 1095, 1092, 1092, 1095,
     1096, 1098, 1099, 1100, 1101, 1094, 1094, 1102, 1103, 1104,
     1106, 1107, 1092, 1108, 1109, 1110, 1097, 1111, 1112, 1113,

     1108, 1114, 1115, 1116, 1117, 1095, 1092, 1092, 1095, 1118,
     1098, 1099, 1100, 1101, 1119, 1120, 1102, 1103, 1104, 1106,
     1107, 1116, 1108, 1109, 1110, 1121, 1111, 1112, 1113, 1108,
     1114, 1115, 1116, 1117, 1122, 1123, 1124, 1125, 1118, 1127,
     1126, 1127, 1128, 1119, 1120, 1131, 1132, 1133, 1134, 1135,
     1116, 1127, 1136, 1137, 1121, 1126, 1138, 1139, 1140, 1142,
     1143, 1127, 1145, 1122, 1123, 1124, 1125, 1144, 1146, 1126,
     1148, 1128, 1152, 1153, 1131, 1132, 1133, 1134, 1135, 1144,
     1127, 1136, 1137, 1154, 1126, 1138, 1139, 1140, 1142, 1143,
     1127, 1145, 1155, 1156, 1157, 1159, 1144, 1146, 1160, 1148,

     1161, 1152, 1153, 1162, 1163, 1164, 1165, 1166, 1144, 1167,
     1168, 1169, 1154, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1155, 1156, 1157, 1159, 1178, 1180, 1160, 1179, 1161,
     1181, 1182, 1162, 1163, 1164, 1165, 1166, 1179, 1167, 1168,
     1169, 1184, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1185, 1186, 1187, 1188, 1178, 1180, 1190, 1179, 1191, 1181,
     1182, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1198,
     1184, 1200, 1201, 1202, 1203, 1205, 1204, 1204, 1206, 1185,
     1186, 1187, 1188, 1208, 1207, 1190, 1209, 1191, 1207, 1210,
     1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1198, 1204,

     1200, 1201, 1202, 1203, 1205, 1204, 1204, 1206, 1211, 1212,
     1213, 1214, 1208, 1207, 1215, 1209, 1216, 1207, 1210, 1217,
     1218, 1219, 1220, 1221, 1223,    0, 1227, 1226, 1204, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1211, 1212, 1213,
     1214, 1237, 1238, 1215, 1239, 1216, 1241, 1242, 1217, 1218,
     1219, 1220, 1221, 1223, 1226, 1227, 1226, 1243, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1236, 1240, 1244, 1245, 1246,
     1237, 1238, 1248, 1239, 1249, 1241, 1242, 1252, 1254, 1255,
     1256, 1257, 1240, 1258, 1240, 1259, 1243, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1267, 1240, 1244, 1245, 1246, 1270,

     1271, 1248, 1272, 1249, 1274, 1275, 1252, 1254, 1255, 1256,
     1257, 1240, 1258, 1240, 1259, 1276, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1277, 1280, 1283, 1288, 1270, 1271,
     1289, 1272, 1291, 1274, 1275, 1292, 1280, 1293, 1294, 1295,
     1296, 1297, 1298, 1300, 1276, 1301, 1303, 1302, 1304, 1305,
     1306, 1308, 1309, 1277, 1280, 1283, 1288, 1302, 1310, 1289,
     1311, 1291, 1313, 1314, 1292, 1280, 1293, 1294, 1295, 1296,
     1297, 1298, 1300, 1315, 1301, 1303, 1302, 1304, 1305, 1306,
     1308, 1309, 1317, 1318, 1316, 1319, 1302, 1310, 1316, 1311,
     1320, 1313, 1314, 1321, 1323, 1324, 1325, 1326, 1328, 1329,

     1330, 1331, 1315, 1332, 1334, 1335, 1336, 1337, 1341, 1342,
     1344, 1317, 1318, 1316, 1319, 1340, 1345, 1316, 1340, 1320,
     1346, 1347, 1321, 1323, 1324, 1325, 1326, 1328, 1329, 1330,
     1331, 1348, 1332, 1334, 1335, 1336, 1337, 1341, 1342, 1344,
     1349, 1350, 1351, 1352, 1340, 1345, 1353, 1340, 1354, 1346,
     1347, 1358, 1359, 1362, 1362, 1362, 1362, 1362, 1364, 1365,
     1348, 1363, 1363, 1363, 1363, 1363, 1366, 1367, 1368, 1349,
     1350, 1351, 1352, 1369, 1370, 1353, 1371, 1354, 1372, 1373,
     1358, 1359, 1374, 1376,    0, 1380, 1379, 1364, 1365, 1382,
     1383, 1384, 1385, 1386, 1387, 1366, 1367, 1368, 1388, 1389,

     1390, 1391, 1369, 1370, 1392, 1371, 1394, 1372, 1373, 1395,
     1396, 1374, 1376, 1379, 1380, 1379, 1393, 1397, 1382, 1383,
     1384, 1385, 1386, 1387, 1398, 1399, 1401, 1388, 1389, 1390,
     1391, 1402, 1393, 1392, 1393, 1394, 1405, 1407, 1395, 1396,
     1408, 1409, 1410, 1411, 1412, 1393, 1397, 1413, 1414, 1415,
     1416, 1417, 1418, 1398, 1399, 1401, 1419, 1420, 1423, 1424,
     1402, 1393, 1425, 1393, 1427, 1405, 1407, 1428, 1429, 1408,
     1409, 1410, 1411, 1412, 1430, 1436, 1413, 1414, 1415, 1416,
     1417, 1418, 1441, 1433, 1442, 1419, 1420, 1423, 1424, 1444,
     1445, 1425, 1446, 1427, 1433, 1447, 1428, 1429, 1448, 1449,

     1450, 1451, 1453, 1430, 1436, 1454, 1455, 1456, 1457, 1458,
     1459, 1441, 1433, 1442, 1461, 1462, 1455, 1463, 1444, 1445,
     1464, 1446, 1466, 1433, 1447, 1467, 1468, 1448, 1449, 1450,
     1451, 1453, 1470, 1471, 1454, 1455, 1456, 1457, 1458, 1459,
     1472, 1473, 1474, 1461, 1462, 1455, 1463, 1476, 1469, 1464,
     1477, 1466, 1469, 1478, 1467, 1468, 1479, 1481, 1482, 1483,
     1484, 1470, 1471, 1485, 1487, 1488, 1489, 1490, 1494, 1472,
     1473, 1474, 1493, 1495, 1497, 1493, 1476, 1469, 1498, 1477,
     1499, 1469, 1478, 1500, 1501, 1479, 1481, 1482, 1483, 1484,
     1502, 1503, 1485, 1487, 1488, 1489, 1490, 1494, 1504, 1505,

     1506, 1493, 1495, 1497, 1493, 1507, 1511, 1498, 1512, 1499,
        0,    0, 1500, 1501, 1515, 1515, 1515, 1515, 1515, 1502,
     1503, 1516, 1516, 1516, 1516, 1516,    0, 1504, 1505, 1506,
     1521, 1522, 1523, 1524, 1507, 1511, 1525, 1512, 1517, 1517,
     1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1519, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1521,
     1522, 1523, 1524, 1519, 1526, 1525, 1527, 1528, 1529, 1530,
     1531, 1533,    0, 1537, 1536, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1548, 1549,    0, 1551, 1552, 1553,
     1554, 1555, 1519, 1526, 1556, 1527, 1528, 1529, 1530, 1531,

     1533, 1536, 1537, 1536, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
     1555, 1558, 1559, 1556, 1562, 1564, 1565, 1566, 1567, 1568,
     1569, 1550, 1570, 1550, 1571, 1572, 1573, 1574, 1575, 1576,
     1577, 1580, 1581, 1582, 1550, 1584, 1585, 1586, 1587, 1593,
     1558, 1559, 1598, 1562, 1564, 1565, 1566, 1567, 1568, 1569,
     1550, 1570, 1550, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
     1580, 1581, 1582, 1590, 1584, 1585, 1586, 1587, 1593, 1599,
     1601, 1598, 1602, 1603, 1590, 1604, 1605, 1606, 1607, 1608,
     1610, 1611, 1613, 1612, 1614, 1615, 1616, 1618, 1619, 1620,

     1621, 1623, 1590, 1612, 1624, 1625, 1626, 1627, 1599, 1601,
     1626, 1602, 1603, 1590, 1604, 1605, 1606, 1607, 1608, 1610,
     1611, 1613, 1612, 1614, 1615, 1616, 1618, 1619, 1620, 1621,
     1623, 1628, 1612, 1624, 1625, 1626, 1627, 1629, 1630, 1626,
     1631, 1633, 1634, 1635, 1636, 1638, 1639, 1640, 1641, 1642,
     1644, 1645, 1646, 1647, 1650, 1651, 1652, 1650, 1654, 1655,
     1628, 1656, 1657, 1658, 1659, 1660, 1629, 1630, 1661, 1631,
     1633, 1634, 1635, 1636, 1638, 1639, 1640, 1641, 1642, 1644,
     1645, 1646, 1647, 1650, 1651, 1652, 1650, 1654, 1655, 1662,
     1656, 1657, 1658, 1659, 1660, 1663, 1664, 1661, 1668, 1669,

     1672, 1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1673,
     1674, 1674, 1674, 1674, 1674,    0,    0,    0, 1662, 1675,
     1675, 1675, 1675, 1675, 1663, 1664, 1676, 1668, 1669, 1676,
     1676, 1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1679,
     1680, 1681, 1682, 1676, 1678, 1678, 1678, 1678, 1678, 1683,
     1684, 1685, 1679, 1679, 1679, 1679, 1679, 1686, 1687, 1688,
     1689, 1690, 1692,    0, 1696, 1695, 1698, 1699, 1700, 1680,
     1681, 1682, 1676, 1701, 1702, 1703, 1704, 1705, 1683, 1684,
     1685, 1706, 1707, 1708, 1710,    0, 1686, 1687, 1688, 1689,
     1690, 1692, 1695, 1696, 1695, 1698, 1699, 1700, 1709, 1711,

     1712, 1713, 1701, 1702, 1703, 1704, 1705, 1714, 1715, 1717,
     1706, 1707, 1708, 1710, 1709, 1718, 1709, 1721, 1723, 1724,
     1725, 1726, 1727, 1728, 1729, 1730, 1731, 1709, 1711, 1712,
     1713, 1732, 1733, 1734, 1735, 1736, 1714, 1715, 1717, 1739,
     1740, 1741, 1743, 1709, 1718, 1709, 1721, 1723, 1724, 1725,
     1726, 1727, 1728, 1729, 1730, 1731, 1744, 1745, 1746, 1752,
     1732, 1733, 1734, 1735, 1736, 1749, 1757, 1758, 1739, 1740,
     1741, 1743, 1760, 1761, 1762, 1763, 1749, 1764, 1765, 1766,
     1767, 1769, 1770, 1771, 1772, 1744, 1745, 1746, 1752, 1773,
     1774, 1775, 1777, 1771, 1749, 1757, 1758, 1778, 1779, 1780,

     1782, 1760, 1761, 1762, 1763, 1749, 1764, 1765, 1766, 1767,
     1769, 1770, 1771, 1772, 1783, 1784, 1786, 1787, 1773, 1774,
     1775, 1777, 1771, 1788, 1789, 1790, 1778, 1779, 1780, 1782,
     1785, 1792, 1793, 1794, 1785, 1795, 1797, 1798, 1799, 1800,
     1801, 1803, 1804, 1783, 1784, 1786, 1787, 1805, 1806, 1810,
     1811, 1813, 1788, 1789, 1790, 1809, 1814, 1815, 1809, 1785,
     1792, 1793, 1794, 1785, 1795, 1797, 1798, 1799, 1800, 1801,
     1803, 1804, 1816, 1817, 1818, 1819, 1805, 1806, 1810, 1811,
     1813, 1820, 1821, 1822, 1809, 1814, 1815, 1809, 1823, 1827,
     1828, 1834, 1835, 1836, 1837, 1839, 1840, 1841, 1842, 1843,

     1844, 1816, 1817, 1818, 1819, 1846, 1847, 1848, 1849, 1850,
     1820, 1821, 1822, 1852, 1854, 1855, 1856, 1823, 1827, 1828,
     1834, 1835, 1836, 1837, 1839, 1840, 1841, 1842, 1843, 1844,
     1857, 1858, 1859, 1860, 1846, 1847, 1848, 1849, 1850, 1861,
     1862, 1863, 1852, 1854, 1855, 1856, 1864, 1865, 1866, 1861,
     1867, 1861, 1868, 1869, 1871, 1872, 1873, 1874, 1879, 1857,
     1858, 1859, 1860, 1880, 1881, 1883, 1885, 1886, 1861, 1862,
     1863, 1888, 1889, 1892, 1895, 1864, 1865, 1866, 1861, 1867,
     1861, 1868, 1869, 1871, 1872, 1873, 1874, 1879, 1893, 1900,
     1901, 1893, 1880, 1881, 1883, 1885, 1886, 1902, 1903, 1906,

     1888, 1889, 1892, 1895, 1908, 1910, 1911, 1913, 1914, 1916,
     1918, 1920, 1921, 1922, 1923, 1924, 1925, 1893, 1900, 1901,
     1893, 1926, 1928, 1929, 1931, 1932, 1902, 1903, 1906, 1933,
     1934, 1935, 1936, 1908, 1910, 1911, 1913, 1914, 1916, 1918,
     1920, 1921, 1922, 1923, 1924, 1925, 1937, 1938, 1939, 1941,
     1926, 1928, 1929, 1931, 1932, 1942, 1943, 1944, 1933, 1934,
     1935, 1936, 1945, 1947, 1948, 1949, 1952, 1953, 1954, 1955,
     1957, 1961, 1962, 1963, 1964, 1937, 1938, 1939, 1941, 1966,
     1967, 1968, 1969, 1970, 1942, 1943, 1944, 1971, 1973, 1974,
     1975, 1945, 1947, 1948, 1949, 1952, 1953, 1954, 1955, 1957,

     1961, 1962, 1963, 1964, 1976, 1977, 1979, 1981, 1966, 1967,
     1968, 1969, 1970, 1982, 1983, 1984, 1971, 1973, 1974, 1975,
     1985, 1986, 1987, 1989, 1990, 1991, 1992, 1988, 1993, 1994,
     1995, 1996, 1998, 1976, 1977, 1979, 1981, 1988, 1999, 1988,
     2000, 2001, 1982, 1983, 1984, 2006, 2007, 2008, 2010, 1985,
     1986, 1987, 1989, 1990, 1991, 1992, 1988, 1993, 1994, 1995,
     1996, 1998, 2012, 2013, 2015, 2016, 1988, 1999, 1988, 2000,
     2001, 2019, 2022, 2027, 2006, 2007, 2008, 2010, 2020, 2028,
     2029, 2020, 2030, 2033, 2035, 2037, 2038, 2040, 2041, 2043,
     2045, 2012, 2013, 2015, 2016, 2047, 2048, 2049, 2050, 2051,

     2019, 2022, 2027, 2052, 2053, 2055, 2056, 2020, 2028, 2029,
     2020, 2030, 2033, 2035, 2037, 2038, 2040, 2041, 2043, 2045,
     2058, 2059, 2060, 2061, 2047, 2048, 2049, 2050, 2051, 2062,
     2063, 2064, 2052, 2053, 2055, 2056, 2065, 2066, 2068, 2069,
     2070, 2071, 2072, 2074, 2075, 2076, 2079, 2080, 2081, 2058,
     2059, 2060, 2061, 2082, 2084,    0,    0,    0, 2062, 2063,
     2064, 2090, 2091, 2092, 2093, 2065, 2066, 2068, 2069, 2070,
     2071, 2072, 2074, 2075, 2076, 2079, 2080, 2081, 2095, 2096,
     2097, 2098, 2082, 2084, 2086, 2086, 2086, 2086, 2086, 2099,
     2090, 2091, 2092, 2093, 2100, 2102, 2103, 2104, 2105, 2106,

     2108, 2110, 2111, 2112, 2113, 2114, 2115, 2095, 2096, 2097,
     2098, 2116, 2118, 2119, 2120, 2121, 2122,    0, 2099,    0,
     2123, 2124, 2125, 2100, 2102, 2103, 2104, 2105, 2106, 2108,
     2110, 2111, 2112, 2113, 2114, 2115, 2117, 2127, 2128, 2129,
     2116, 2118, 2119, 2120, 2121, 2122, 2117, 2130, 2117, 2123,
     2124, 2125, 2135, 2136, 2137, 2139, 2141, 2142, 2144, 2145,
     2148, 2149, 2151, 2156, 2149, 2117, 2127, 2128, 2129, 2157,
     2158, 2159, 2162, 2164, 2166, 2117, 2130, 2117, 2167, 2169,
     2170, 2135, 2136, 2137, 2139, 2141, 2142, 2144, 2145, 2148,
     2149, 2151, 2156, 2149, 2172, 2174, 2176, 2177, 2157, 2158,

     2159, 2162, 2164, 2166, 2178, 2179, 2180, 2167, 2169, 2170,
     2181, 2182, 2184, 2185, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2194, 2195, 2172, 2174, 2176, 2177, 2197, 2198, 2199,
     2200, 2201, 2203, 2178, 2179, 2180, 2204, 2205, 2208, 2181,
     2182, 2184, 2185, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
     2194, 2195, 2209, 2210, 2211, 2213, 2197, 2198, 2199, 2200,
     2201, 2203, 2221, 2222, 2223, 2204, 2205, 2208, 2214, 2214,
     2214, 2214, 2214, 2216, 2216, 2216, 2216, 2216, 2224, 2226,
     2227, 2209, 2210, 2211, 2213, 2217, 2217, 2217, 2217, 2217,
     2228, 2221, 2222, 2223, 2229, 2230, 2231, 2233, 2234, 2235,

     2236, 2237, 2239, 2241, 2242, 2243, 2244, 2224, 2226, 2227,
     2245, 2246, 2247, 2249, 2250, 2251, 2252,    0, 2253, 2228,
     2254, 2255, 2256, 2229, 2230, 2231, 2233, 2234, 2235, 2236,
     2237, 2239, 2241, 2242, 2243, 2244, 2248, 2258, 2259, 2245,
     2246, 2247, 2249, 2250, 2251, 2252, 2248, 2253, 2248, 2254,
     2255, 2256, 2260, 2261, 2266, 2267, 2268, 2270, 2272, 2273,
     2275, 2276, 2279, 2282, 2287, 2248, 2258, 2259, 2280, 2288,
     2289, 2280, 2290, 2293, 2295, 2248, 2297, 2248, 2298, 2300,
     2301, 2260, 2261, 2266, 2267, 2268, 2270, 2272, 2273, 2275,
     2276, 2279, 2282, 2287, 2303, 2305, 2307, 2280, 2288, 2289,

     2280, 2290, 2293, 2295, 2308, 2297, 2309, 2298, 2300, 2301,
     2310, 2311, 2312, 2313, 2315, 2316, 2318, 2319, 2320, 2321,
     2322, 2323, 2324, 2303, 2305, 2307, 2325, 2326, 2328, 2329,
     2330, 2331, 2332, 2308, 2334, 2309, 2335, 2336, 2339, 2310,
     2311, 2312, 2313, 2315, 2316, 2318, 2319, 2320, 2321, 2322,
     2323, 2324, 2340, 2341, 2342, 2325, 2326, 2328, 2329, 2330,
     2331, 2332, 2344, 2334, 2345, 2335, 2336, 2339, 2347, 2348,
     2350, 2352, 2353, 2354, 2355, 2356, 2357, 2359, 2360, 2362,
     2363, 2340, 2341, 2342, 2365, 2366, 2367, 2368, 2369, 2370,
     2371, 2344, 2372, 2345, 2373, 2374, 2376, 2347, 2348, 2350,

     2352, 2353, 2354, 2355, 2356, 2357, 2359, 2360, 2362, 2363,
     2378, 2381, 2383, 2365, 2366, 2367, 2368, 2369, 2370, 2371,
     2384, 2372, 2385, 2373, 2374, 2376, 2386, 2387, 2388, 2392,
     2393, 2394, 2395, 2396, 2398, 2399, 2400, 2401, 2403, 2378,
     2381, 2383, 2405, 2409, 2410, 2411, 2412, 2413, 2414, 2384,
     2415, 2385, 2416, 2418, 2419, 2386, 2387, 2388, 2392, 2393,
     2394, 2395, 2396, 2398, 2399, 2400, 2401, 2403, 2420, 2421,
     2422, 2405, 2409, 2410, 2411, 2412, 2413, 2414, 2426, 2415,
     2427, 2416, 2418, 2419, 2429, 2430, 2431, 2432, 2433, 2434,
     2436, 2439, 2440, 2441, 2443, 2445, 2446, 2420, 2421, 2422,

     2448, 2450, 2451, 2452, 2453, 2454, 2455, 2426, 2457, 2427,
     2458, 2460, 2461, 2429, 2430, 2431, 2432, 2433, 2434, 2436,
     2439, 2440, 2441, 2443, 2445, 2446, 2463, 2464, 2465, 2448,
     2450, 2451, 2452, 2453, 2454, 2455, 2466, 2457, 2467, 2458,
     2460, 2461, 2468, 2469, 2470, 2471, 2472, 2474, 2476, 2479,
     2481, 2482, 2483, 2484, 2485, 2463, 2464, 2465, 2486, 2490,
     2491, 2492, 2493, 2494, 2496, 2466, 2497, 2467, 2498, 2499,
     2501, 2468, 2469, 2470, 2471, 2472, 2474, 2476, 2479, 2481,
     2482, 2483, 2484, 2485, 2503, 2507, 2508, 2486, 2490, 2491,
     2492, 2493, 2494, 2496, 2509, 2497, 2510, 2498, 2499, 2501,

     2511, 2512, 2513, 2514, 2516, 2517, 2518, 2519, 2520, 2524,
     2525, 2527, 2528, 2503, 2507, 2508, 2529, 2530, 2531, 2532,
     2534, 2537, 2538, 2509, 2539, 2510,    0,    0,    0, 2511,
     2512, 2513, 2514, 2516, 2517, 2518, 2519, 2520, 2524, 2525,
     2527, 2528, 2542, 2544, 2545, 2529, 2530, 2531, 2532, 2534,
     2537, 2538, 2547, 2539, 2541, 2541, 2541, 2541, 2541, 2549,
     2550, 2551, 2552, 2553, 2554, 2556, 2557, 2559, 2560, 2562,
     2563, 2542, 2544, 2545, 2564, 2565, 2566, 2567, 2568, 2569,
     2570, 2547, 2571, 2573, 2575, 2578, 2580, 2581, 2549, 2550,
     2551, 2552, 2553, 2554, 2556, 2557, 2559, 2560, 2562, 2563,

     2582, 2583, 2584, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2585, 2571, 2573, 2575, 2578, 2580, 2581, 2589, 2590, 2591,
     2592, 2593, 2595, 2596, 2597, 2598, 2600, 2602, 2606, 2582,
     2583, 2584, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2585,
     2615, 2616, 2617, 2618, 2619, 2623, 2589, 2590, 2591, 2592,
     2593, 2595, 2596, 2597, 2598, 2600, 2602, 2606, 2624, 2626,
     2627, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2628, 2615,
     2616, 2617, 2618, 2619, 2623, 2629, 2630, 2631, 2633, 2636,
     2637, 2638, 2640, 2640, 2640, 2640, 2640, 2624, 2626, 2627,
     2641, 2641, 2641, 2641, 2641, 2643, 2645, 2628, 2642, 2642,

     2642, 2642, 2642, 2646, 2629, 2630, 2631, 2633, 2636, 2637,
     2638, 2648, 2650, 2651, 2652, 2653, 2654, 2655, 2657, 2658,
     2660, 2661, 2663, 2664, 2643, 2645, 2665, 2666, 2667, 2668,
     2669, 2670, 2646, 2671, 2672, 2674, 2676, 2679, 2681, 2682,
     2648, 2650, 2651, 2652, 2653, 2654, 2655, 2657, 2658, 2660,
     2661, 2663, 2664, 2683, 2684, 2665, 2666, 2667, 2668, 2669,
     2670, 2685, 2671, 2672, 2674, 2676, 2679, 2681, 2682, 2686,
     2690, 2691, 2692, 2693, 2694, 2696, 2697, 2698, 2699, 2701,
     2703, 2707, 2683, 2684, 2708, 2709, 2710, 2711, 2712, 2713,
     2685, 2714, 2716, 2717, 2718, 2719, 2720, 2724, 2686, 2690,

     2691, 2692, 2693, 2694, 2696, 2697, 2698, 2699, 2701, 2703,
     2707, 2725, 2727, 2708, 2709, 2710, 2711, 2712, 2713, 2728,
     2714, 2716, 2717, 2718, 2719, 2720, 2724, 2729, 2730, 2731,
     2732, 2734, 2737, 2738, 2739, 2741, 2742, 2743, 2745, 2747,
     2725, 2727, 2748, 2749, 2751, 2755, 2756, 2757, 2728, 2759,
     2760, 2761, 2765, 2766, 2769, 2770, 2729, 2730, 2731, 2732,
     2734, 2737, 2738, 2739, 2741, 2742, 2743, 2745, 2747, 2773,
     2776, 2748, 2749, 2751, 2755, 2756, 2757, 2777, 2759, 2760,
     2761, 2765, 2766, 2769, 2770, 2778, 2779, 2780, 2782, 2784,
     2785, 2788, 2789, 2790, 2792, 2794, 2796, 2797, 2773, 2776,

     2798, 2799, 2800, 2801, 2802, 2803, 2777, 2805, 2807, 2810,
     2811, 2812, 2814, 2816, 2778, 2779, 2780, 2782, 2784, 2785,
     2788, 2789, 2790, 2792, 2794, 2796, 2797, 2817, 2818, 2798,
     2799, 2800, 2801, 2802, 2803, 2820, 2805, 2807, 2810, 2811,
     2812, 2814, 2816, 2824, 2825, 2826, 2828, 2829, 2830, 2834,
     2835, 2838, 2839, 2842, 2845, 2846, 2817, 2818, 2847, 2848,
     2849, 2851, 2853, 2854, 2820, 2857, 2858, 2859, 2861, 2863,
     2865, 2866, 2824, 2825, 2826, 2828, 2829, 2830, 2834, 2835,
     2838, 2839, 2842, 2845, 2846, 2867, 2868, 2847, 2848, 2849,
     2851, 2853, 2854, 2869, 2857, 2858, 2859, 2861, 2863, 2865,

     2866, 2870, 2871, 2872, 2874, 2876, 2879, 2879, 2879, 2879,
     2879, 2880, 2881, 2882, 2867, 2868, 2884, 2886, 2887, 2888,
     2890, 2894, 2869, 2895, 2896, 2898, 2899, 2900, 2904, 2905,
     2870, 2871, 2872, 2874, 2876, 2908, 2909, 2912, 2915, 2916,
     2880, 2881, 2882, 2917, 2918, 2884, 2886, 2887, 2888, 2890,
     2894, 2919, 2895, 2896, 2898, 2899, 2900, 2904, 2905, 2921,
     2923, 2924, 2927, 2928, 2908, 2909, 2912, 2915, 2916, 2929,
     2931, 2933, 2917, 2918, 2935, 2936, 2937, 2938, 2939, 2940,
     2919, 2941, 2942, 2944, 2946,    0,    0,    0, 2921, 2923,
     2924, 2927, 2928, 2949, 2949, 2949, 2949, 2949, 2929, 2931,

     2933, 2951, 2952, 2935, 2936, 2937, 2938, 2939, 2940, 2953,
     2941, 2942, 2944, 2946, 2950, 2950, 2950, 2950, 2950, 2955,
     2957, 2958, 2959, 2961, 2965, 2966, 2967, 2969, 2970, 2971,
     2951, 2952, 2975, 2976, 2979, 2980, 2983, 2986, 2953, 2987,
     2988, 2989, 2990, 2992, 2994, 2995, 2998, 2999, 2955, 2957,
     2958, 2959, 2961, 2965, 2966, 2967, 2969, 2970, 2971, 3000,
     3002, 2975, 2976, 2979, 2980, 2983, 2986, 3004, 2987, 2988,
     2989, 2990, 2992, 2994, 2995, 2998, 2999, 3006, 3007, 3008,
     3009, 3010, 3011, 3012, 3013, 3015, 3017, 3020, 3000, 3002,
     3021, 3023, 3024, 3025, 3031, 3032, 3004, 3033, 3034, 3036,

     3037,    0, 3038,    0,    0,    0, 3006, 3007, 3008, 3009,
     3010, 3011, 3012, 3013, 3015, 3017, 3020, 3028, 3028, 3021,
     3023, 3024, 3025, 3031, 3032, 3039, 3033, 3034, 3036, 3037,
     3028, 3038, 3028, 3028, 3028, 3040, 3042, 3043, 3045, 3046,
     3047, 3049, 3050, 3051, 3052, 3054, 3028, 3028, 3052, 3056,
     3057, 3058, 3059, 3060, 3039, 3061, 3062, 3063, 3064, 3028,
     3066, 3028, 3028, 3028, 3040, 3042, 3043, 3045, 3046, 3047,
     3049, 3050, 3051, 3052, 3054, 3067, 3068, 3052, 3056, 3057,
     3058, 3059, 3060, 3074, 3061, 3062, 3063, 3064, 3075, 3066,
     3076, 3077, 3079, 3071, 3071, 3080, 3081, 3082, 3083, 3085,

     3086, 3088, 3089, 3090, 3067, 3068, 3071, 3092, 3071, 3071,
     3071, 3093, 3074, 3094, 3095, 3097, 3099, 3075, 3095, 3076,
     3077, 3079, 3071, 3071, 3080, 3081, 3082, 3083, 3085, 3086,
     3088, 3089, 3090, 3100, 3101, 3071, 3092, 3071, 3071, 3071,
     3093, 3102, 3094, 3095, 3097, 3099, 3103, 3095, 3104, 3105,
     3106, 3107, 3109, 3110, 3111, 3117, 3114, 3114, 3118, 3119,
     3120, 3122, 3100, 3101, 3123, 3124, 3125, 3126, 3128, 3114,
     3102, 3114, 3114, 3114, 3129, 3103, 3131, 3104, 3105, 3106,
     3107, 3109, 3110, 3111, 3117, 3114, 3114, 3118, 3119, 3120,
     3122, 3132, 3133, 3123, 3124, 3125, 3126, 3128, 3114, 3135,

     3114, 3114, 3114, 3129, 3136, 3131, 3137, 3138, 3140, 3142,
     3143, 3138, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3152,
     3132, 3133, 3153, 3154, 3160, 3161, 3162, 3163, 3135, 3165,
     3166, 3167, 3168, 3136, 3169, 3137, 3138, 3140, 3142, 3143,
     3138, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3152, 3157,
     3157, 3153, 3154, 3160, 3161, 3162, 3163, 3171, 3165, 3166,
     3167, 3168, 3157, 3169, 3157, 3157, 3157, 3172, 3174, 3175,
     3176, 3178, 3179, 3180, 3183, 3185, 3181, 3186, 3157, 3157,
     3181, 3187, 3188, 3189, 3190, 3191, 3171, 3193, 3194, 3196,
     3197, 3157, 3199, 3157, 3157, 3157, 3172, 3174, 3175, 3176,

     3178, 3179, 3180, 3183, 3185, 3181, 3186, 3200, 3201, 3181,
     3187, 3188, 3189, 3190, 3191, 3202, 3193, 3194, 3196, 3197,
     3198, 3199, 3204, 3207, 3198, 3208, 3210, 3212, 3215, 3220,
     3221, 3222, 3225, 3231, 3232, 3225, 3200, 3201, 3234, 3235,
     3237, 3236, 3238, 3239, 3202, 3236, 3240, 3242, 3245, 3198,
     3246, 3204, 3207, 3198, 3208, 3210, 3212, 3215, 3220, 3221,
     3222, 3225, 3231, 3232, 3225, 3248, 3250, 3234, 3235, 3237,
     3236, 3238, 3239, 3253, 3236, 3240, 3242, 3245, 3258, 3246,
     3259, 3260, 3263, 3269, 3270, 3263, 3272, 3273, 3274, 3275,
     3276, 3277, 3274, 3278, 3248, 3250, 3280, 3283, 3284, 3286,

     3288, 3291, 3253, 3296, 3297, 3298,    0, 3258, 3307, 3259,
     3260, 3263, 3269, 3270, 3263, 3272, 3273, 3274, 3275, 3276,
     3277, 3274, 3278, 3308, 3310, 3280, 3283, 3284, 3286, 3288,
     3291, 3311, 3296, 3297, 3298, 3301, 3312, 3307, 3301, 3313,
     3312, 3314, 3315, 3316, 3318, 3321, 3322, 3324, 3326, 3329,
     3334, 3335, 3308, 3310, 3336, 3339, 3344, 3346, 3339, 3347,
     3311, 3348, 3349, 3350, 3301, 3312, 3351, 3301, 3313, 3312,
     3314, 3315, 3316, 3318, 3321, 3322, 3324, 3326, 3329, 3334,
     3335, 3352, 3353, 3336, 3339, 3344, 3346, 3339, 3347, 3355,
     3348, 3349, 3350, 3356, 3357, 3351, 3359, 3361, 3363, 3364,

     3365, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3376,
     3352, 3353, 3377, 3378, 3380, 3382, 3384, 3385, 3355, 3386,
     3388, 3389, 3356, 3357, 3390, 3359, 3361, 3363, 3364, 3365,
     3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3376, 3391,
     3392, 3377, 3378, 3380, 3382, 3384, 3385, 3393, 3386, 3388,
     3389, 3394, 3395, 3390, 3397, 3398, 3399, 3401, 3403, 3405,
     3406, 3407, 3409, 3410, 3411, 3412, 3413, 3414, 3391, 3392,
     3415, 3416, 3418, 3419, 3420, 3422, 3393, 3424, 3426, 3427,
     3394, 3395, 3428, 3397, 3398, 3399, 3401, 3403, 3405, 3406,
     3407, 3409, 3410, 3411, 3412, 3413, 3414, 3430, 3431, 3415,

     3416, 3418, 3419, 3420, 3422, 3432, 3424, 3426, 3427, 3433,
     3434, 3428, 3435, 3436, 3437, 3439, 3440, 3442, 3443, 3444,
     3446, 3447, 3448, 3449, 3450, 3451, 3430, 3431, 3452, 3453,
     3455, 3456, 3458, 3459, 3432, 3460, 3462, 3463, 3433, 3434,
     3464, 3435, 3436, 3437, 3439, 3440, 3442, 3443, 3444, 3446,
     3447, 3448, 3449, 3450, 3451, 3465, 3466, 3452, 3453, 3455,
     3456, 3458, 3459, 3467, 3460, 3462, 3463, 3468, 3469, 3464,
     3471, 3472, 3474, 3475, 3476, 3478, 3479, 3480, 3481, 3482,
     3483, 3484, 3485, 3487, 3465, 3466, 3488, 3490, 3491, 3492,
     3493, 3495, 3467, 3498, 3499, 3504, 3468, 3469, 3505, 3471,

     3472, 3474, 3475, 3476, 3478, 3479, 3480, 3481, 3482, 3483,
     3484, 3485, 3487, 3506, 3508, 3488, 3490, 3491, 3492, 3493,
     3495, 3511, 3498, 3499, 3504, 3512, 3517, 3505, 3518, 3519,
     3521, 3524, 3525, 3530, 3531, 3532, 3534, 3537, 3538, 3543,
     3545, 3546, 3506, 3508, 3547, 3548, 3551, 3552, 3553, 3554,
     3511, 3557, 3558, 3559, 3512, 3517, 3560, 3518, 3519, 3521,
     3524, 3525, 3530, 3531, 3532, 3534, 3537, 3538, 3543, 3545,
     3546, 3563, 3564, 3547, 3548, 3551, 3552, 3553, 3554, 3565,
     3557, 3558, 3559, 3566, 3568, 3560, 3569, 3571, 3572, 3573,
     3575, 3576, 3577, 3579, 3580, 3581, 3583, 3586, 3589, 3592,

     3563, 3564, 3595, 3596, 3597, 3598, 3599, 3600, 3565, 3601,
     3602, 3603, 3566, 3568, 3604, 3569, 3571, 3572, 3573, 3575,
     3576, 3577, 3579, 3580, 3581, 3583, 3586, 3589, 3592, 3606,
     3608, 3595, 3596, 3597, 3598, 3599, 3600, 3610, 3601, 3602,
     3603, 3612, 3613, 3604, 3614, 3615, 3616, 3617, 3618, 3619,
     3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3606, 3608,
     3628, 3629, 3630, 3631, 3632, 3633, 3610, 3634, 3635, 3636,
     3612, 3613, 3637, 3614, 3615, 3616, 3617, 3618, 3619, 3620,
     3621, 3622, 3623, 3624, 3625, 3626, 3627, 3638, 3639, 3628,
     3629, 3630, 3631, 3632, 3633, 3644, 3634, 3635, 3636, 3645,

     3646, 3637, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654,
     3655, 3656, 3657, 3658, 3659, 3660, 3638, 3639, 3661, 3662,
     3663,    0,    0,    0, 3644,    0,    0,    0, 3645, 3646,
        0, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655,
     3656, 3657, 3658, 3659, 3660,    0,    0, 3661, 3662, 3663,
     3669,    0, 3669, 3670,    0, 3670, 3671, 3671, 3671, 3671,
     3671, 3672,    0, 3672, 3672, 3672, 3672, 3672, 3672, 3673,
        0,    0, 3673, 3673, 3673,    0, 3673, 3674, 3674, 3674,
     3674, 3674, 3674, 3674, 3674, 3675, 3675, 3675, 3675, 3675,
     3675, 3675, 3675, 3676,    0, 3676, 3676, 3676, 3676, 3676,

     3676, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3669 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3668 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ECSQLOPTIONS);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BACKWARD);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MATCH);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 220:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 221:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 222:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 223:
case 224:
case 225:
case 226:
case 227:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 228:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 231:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 232:
case 233:
case 234:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 235:
case 236:
case 237:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 238:
case 239:
case 240:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 241:
case 242:
case 243:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 244:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 249:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 250:
/* rule 250 can match eol */
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 253:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
YY_RULE_SETUP
{}
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 258:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 259:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3669 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3669 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3668);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8String sBuffer;
    sBuffer.reserve(256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (&delim, 1);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                sBuffer.append (&delim, 1);
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer, SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (&ch, 1);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8String sBuffer;
    sBuffer.reserve(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer[i]) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer[i] == '-' || sBuffer[i] == '+')
									{
									if (checkForSign)
										{
										if (sBuffer[i] == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer, isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer, SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer, SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(&ch, 1);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(&ch, 1);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

