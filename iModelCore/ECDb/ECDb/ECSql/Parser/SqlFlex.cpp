#line 3 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SQLflex.l"
//------------------------------------------------------------
// 
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// 
//------------------------------------------------------------

#pragma warning(disable:4603)
#include "ECDbPch.h"
#define YY_NO_UNISTD_H
#if defined __GNUC__
 //#pragma GCC system_header
#elif defined __SUNPRO_CC
#pragma disable_warn
#elif defined _MSC_VER
//#pragma warning(push, 1)
#pragma warning(disable:4505) 
#pragma warning(disable:4244)

/**/
#ifdef yywrap
#undef  yywrap
#define yywrap() 1
#endif
/**/
#endif




#line 47 "c:\\dev\\bsw\\graphite\\06\\work\\src\\\\ECDb\\ECDb\\ECSql\\parser\\SqlFlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SQLyy_create_buffer
#define yy_delete_buffer SQLyy_delete_buffer
#define yy_flex_debug SQLyy_flex_debug
#define yy_init_buffer SQLyy_init_buffer
#define yy_flush_buffer SQLyy_flush_buffer
#define yy_load_buffer_state SQLyy_load_buffer_state
#define yy_switch_to_buffer SQLyy_switch_to_buffer
#define yyin SQLyyin
#define yyleng SQLyyleng
#define yylex SQLyylex
#define yylineno SQLyylineno
#define yyout SQLyyout
#define yyrestart SQLyyrestart
#define yytext SQLyytext
#define yywrap SQLyywrap
#define yyalloc SQLyyalloc
#define yyrealloc SQLyyrealloc
#define yyfree SQLyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE SQLyyrestart(SQLyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t SQLyyleng;

extern FILE *SQLyyin, *SQLyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up SQLyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SQLyyrestart()), so that the user can continue scanning by
	 * just pointing SQLyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when SQLyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t SQLyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow SQLyywrap()'s to do buffer switches
 * instead of setting up a fresh SQLyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void SQLyyrestart (FILE *input_file  );
void SQLyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE SQLyy_create_buffer (FILE *file,int size  );
void SQLyy_delete_buffer (YY_BUFFER_STATE b  );
void SQLyy_flush_buffer (YY_BUFFER_STATE b  );
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void SQLyypop_buffer_state (void );

static void SQLyyensure_buffer_stack (void );
static void SQLyy_load_buffer_state (void );
static void SQLyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE SQLyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE SQLyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE SQLyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *SQLyyalloc (yy_size_t  );
void *SQLyyrealloc (void *,yy_size_t  );
void SQLyyfree (void *  );

#define yy_new_buffer SQLyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        SQLyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define SQLyywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *SQLyyin = (FILE *) 0, *SQLyyout = (FILE *) 0;

typedef int yy_state_type;

extern int SQLyylineno;

int SQLyylineno = 1;

extern char *SQLyytext;
#define yytext_ptr SQLyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SQLyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	SQLyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 258
#define YY_END_OF_BUFFER 259
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3616] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      253,  253,  259,  257,  255,  254,  257,  246,  219,  219,
      211,  213,  212,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  244,  219,
      221,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  247,  245,  248,  219,
      219,  228,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  219,  228,  257,
      253,  253,  253,  253,  251,  219,  219,  219,  211,  213,
      212,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  252,  253,  255,  217,    0,
      214,  216,  215,    0,    0,    0,    0,    7,    9,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,  102,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,  138,    0,  141,    0,  144,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  218,  222,    0,  223,  221,    0,  220,  220,
      220,  220,  220,    7,    9,  220,  220,  220,  220,  220,
      220,   21,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,   92,  102,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  127,  220,  220,  220,  220,
      138,  220,  141,  220,  144,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  186,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  243,  233,
      243,  243,  243,  228,  243,  227,  227,  227,  227,  227,
        7,    9,  227,  227,  227,  227,  227,  227,   21,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,   92,  102,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  127,  227,  227,  227,  227,  138,  227,  141,
      227,  144,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  186,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  239,  243,  243,  243,  228,
      243,    0,  249,  253,  253,  217,  253,  214,  216,  215,
      253,  253,  253,  253,    7,    9,  253,  253,  253,  253,
      253,  253,   21,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,   92,  102,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  127,  253,  253,  253,
      253,  138,  253,  141,  253,  144,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  186,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  218,
        0,  256,    0,    2,    0,    4,    5,    0,    8,    0,
        0,   12,    0,    0,    0,    0,   18,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   51,   56,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,  104,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  116,  117,    0,
        0,    0,    0,  125,    0,  128,  129,    0,    0,    0,
        0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  165,    0,    0,    0,

      172,    0,    0,    0,    0,    0,  177,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      226,  223,    0,    0,  224,  220,    2,  220,    4,    5,
      220,    8,  220,  220,   12,  220,  220,  220,  220,   18,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,   51,   56,  220,  220,  220,
      220,  220,  220,  220,  220,   67,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,   80,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,   96,  220,  104,

      105,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      116,  117,  220,  220,  220,  220,  125,  220,  128,  129,
      220,  220,  220,  220,  220,  220,  220,  140,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  165,
      220,  220,  220,  172,  220,  220,  220,  220,  220,  177,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,    0,  236,  243,  231,  243,  228,    0,  234,
      227,    2,  227,    4,    5,  227,    8,  227,  227,   12,

      227,  227,  227,  227,   18,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
       51,   56,  227,  227,  227,  227,  227,  227,  227,  227,
       67,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,   80,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,   96,  227,  104,  105,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  116,  117,  227,  227,  227,
      227,  125,  227,  128,  129,  227,  227,  227,  227,  227,
      227,  227,  140,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  165,  227,  227,  227,  172,  227,
      227,  227,  227,  227,  177,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,    0,  242,  237,
      243,  243,  228,    0,  240,  249,    0,  249,  253,  253,
      253,    2,  253,    4,    5,  253,    8,  253,  253,   12,
      253,  253,  253,  253,   18,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
       51,   56,  253,  253,  253,  253,  253,  253,  253,  253,
       67,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,   80,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,   96,  253,  104,  105,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  116,  117,  253,  253,  253,
      253,  125,  253,  128,  129,  253,  253,  253,  253,  253,
      253,  253,  140,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  165,  253,  253,  253,  172,  253,
      253,  253,  253,  253,  177,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   20,    0,   22,
       23,   24,    0,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,   61,    0,    0,   64,   65,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   85,   86,    0,    0,    0,   90,    0,    0,
        0,    0,    0,    0,    0,  101,  103,    0,  107,  109,
      110,  111,    0,    0,  114,    0,    0,    0,    0,    0,
        0,    0,  126,    0,    0,  132,    0,    0,    0,    0,
      142,    0,    0,    0,    0,  148,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  160,    0,    0,    0,    0,
        0,  166,    0,    0,    0,    0,    0,  174,    0,    0,
        0,    0,  180,  181,    0,    0,    0,  189,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      203,  204,  205,    0,  207,  209,  210,    0,  225,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,   20,
      220,   22,   23,   24,  220,   28,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,   47,  220,  220,
      220,  220,  220,  220,   61,  220,  220,   64,   65,   66,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,   85,   86,  220,  220,  220,   90,
      220,  220,  220,  220,  220,  220,  220,  101,  103,  220,
      107,  109,  110,  111,  220,  220,  114,  220,  220,  220,
      220,  220,  220,  220,  126,  220,  220,  132,  220,  220,
      220,  220,  142,  220,  220,  220,  220,  148,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  160,  220,  220,
      220,  220,  220,  166,  220,  220,  220,  220,  220,  174,
      220,  220,  220,  220,  180,  181,  220,  220,  220,  189,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  203,  204,  205,  220,  207,  209,  210,  236,

      243,    0,  235,  228,  234,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,   20,  227,   22,   23,   24,
      227,   28,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,   47,  227,  227,  227,  227,  227,  227,
       61,  227,  227,   64,   65,   66,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
       85,   86,  227,  227,  227,   90,  227,  227,  227,  227,
      227,  227,  227,  101,  103,  227,  107,  109,  110,  111,
      227,  227,  114,  227,  227,  227,  227,  227,  227,  227,
      126,  227,  227,  132,  227,  227,  227,  227,  142,  227,

      227,  227,  227,  148,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  160,  227,  227,  227,  227,  227,  166,
      227,  227,  227,  227,  227,  174,  227,  227,  227,  227,
      180,  181,  227,  227,  227,  189,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  203,  204,
      205,  227,  207,  209,  210,  242,    0,  241,  243,  228,
      240,    0,  249,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,   20,  253,   22,   23,   24,  253,   28,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,   47,  253,  253,  253,  253,  253,  253,   61,  253,

      253,   64,   65,   66,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,   85,   86,
      253,  253,  253,   90,  253,  253,  253,  253,  253,  253,
      253,  101,  103,  253,  107,  109,  110,  111,  253,  253,
      114,  253,  253,  253,  253,  253,  253,  253,  126,  253,
      253,  132,  253,  253,  253,  253,  142,  253,  253,  253,
      253,  148,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  160,  253,  253,  253,  253,  253,  166,  253,  253,
      253,  253,  253,  174,  253,  253,  253,  253,  180,  181,
      253,  253,  253,  189,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  203,  204,  205,  253,
      207,  209,  210,    1,    3,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
        0,    0,   34,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,   74,   75,   76,   78,    0,
        0,    0,   84,    0,   88,    0,    0,   93,    0,    0,
       97,   98,    0,    0,  106,    0,  112,  113,  115,    0,
      119,    0,    0,  123,  124,    0,  131,    0,  134,    0,
        0,    0,    0,    0,  145,    0,  147,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  159,    0,    0,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      179,    0,    0,    0,    0,    0,  191,    0,    0,    0,
      195,  196,  197,  201,    0,    0,    0,  206,    0,    1,
        3,  220,  220,  220,  220,   14,  220,  220,  220,  220,
      220,  220,   27,  220,  220,  220,  220,  220,   34,  220,
       36,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,   68,  220,  220,  220,
      220,   74,   75,   76,   78,  220,  220,  220,   84,  220,
       88,  220,  220,   93,  220,  220,   97,   98,  220,  220,

      106,  220,  112,  113,  115,  220,  119,  220,  220,  123,
      124,  220,  131,  220,  134,  220,  220,  220,  220,  220,
      145,  220,  147,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  159,  220,  220,  220,  168,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  179,  220,  220,  220,
      220,  220,  191,  220,  220,  220,  195,  196,  197,  201,
      220,  220,  220,  206,  220,  229,  235,    1,    3,  227,
      227,  227,  227,   14,  227,  227,  227,  227,  227,  227,
       27,  227,  227,  227,  227,  227,   34,  227,   36,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,   68,  227,  227,  227,  227,   74,
       75,   76,   78,  227,  227,  227,   84,  227,   88,  227,
      227,   93,  227,  227,   97,   98,  227,  227,  106,  227,
      112,  113,  115,  227,  119,  227,  227,  123,  124,  227,
      131,  227,  134,  227,  227,  227,  227,  227,  145,  227,
      147,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      159,  227,  227,  227,  168,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  179,  227,  227,  227,  227,  227,
      191,  227,  227,  227,  195,  196,  197,  201,  227,  227,
      227,  206,  227,  241,  230,    0,  250,    1,    3,  253,

      253,  253,  253,   14,  253,  253,  253,  253,  253,  253,
       27,  253,  253,  253,  253,  253,   34,  253,   36,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,   68,  253,  253,  253,  253,   74,
       75,   76,   78,  253,  253,  253,   84,  253,   88,  253,
      253,   93,  253,  253,   97,   98,  253,  253,  106,  253,
      112,  113,  115,  253,  119,  253,  253,  123,  124,  253,
      131,  253,  134,  253,  253,  253,  253,  253,  145,  253,
      147,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      159,  253,  253,  253,  168,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  179,  253,  253,  253,  253,  253,
      191,  253,  253,  253,  195,  196,  197,  201,  253,  253,
      253,  206,  253,    0,   10,    0,   13,    0,   17,    0,
        0,    0,    0,    0,    0,   31,    0,    0,   35,    0,
        0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,   63,   69,   70,    0,   72,    0,
        0,    0,    0,    0,    0,   89,   91,   94,    0,    0,
        0,    0,    0,  118,    0,    0,    0,    0,  133,    0,
      136,    0,  139,  143,  146,    0,    0,    0,    0,    0,
        0,    0,    0,  157,    0,    0,    0,    0,    0,    0,

      169,  170,  171,    0,    0,  178,    0,    0,    0,    0,
        0,    0,  192,    0,  194,  202,    0,    0,    0,  208,
      220,   10,  220,   13,  220,   17,  220,  220,  220,  220,
      220,  220,   31,  220,  220,   35,  220,  220,   46,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,   60,
      220,   63,   69,   70,  220,   72,  220,  220,  220,  220,
      220,  220,   89,   91,   94,  220,  220,  220,  220,  220,
      118,  220,  220,  220,  220,  133,  220,  136,  220,  139,
      143,  146,  220,  220,  220,  220,  220,  220,  220,  220,
      157,  220,  220,  220,  220,  220,  220,  169,  170,  171,

      220,  220,  178,  220,  220,  220,  220,  220,  220,  192,
      220,  194,  202,  220,  220,  220,  208,  243,  227,   10,
      227,   13,  227,   17,  227,  227,  227,  227,  227,  227,
       31,  227,  227,   35,  227,  227,   46,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,   60,  227,   63,
       69,   70,  227,   72,  227,  227,  227,  227,  227,  227,
       89,   91,   94,  227,  227,  227,  227,  227,  118,  227,
      227,  227,  227,  133,  227,  136,  227,  139,  143,  146,
      227,  227,  227,  227,  227,  227,  227,  227,  157,  227,
      227,  227,  227,  227,  227,  169,  170,  171,  227,  227,

      178,  227,  227,  227,  227,  227,  227,  192,  227,  194,
      202,  227,  227,  227,  208,  243,  250,  250,  253,   10,
      253,   13,  253,   17,  253,  253,  253,  253,  253,  253,
       31,  253,  253,   35,  253,  253,   46,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,   60,  253,   63,
       69,   70,  253,   72,  253,  253,  253,  253,  253,  253,
       89,   91,   94,  253,  253,  253,  253,  253,  118,  253,
      253,  253,  253,  133,  253,  136,  253,  139,  143,  146,
      253,  253,  253,  253,  253,  253,  253,  253,  157,  253,
      253,  253,  253,  253,  253,  169,  170,  171,  253,  253,

      178,  253,  253,  253,  253,  253,  253,  192,  253,  194,
      202,  253,  253,  253,  208,    0,    0,   15,    0,   16,
        0,    0,    0,   30,    0,   33,   44,   37,    0,    0,
        0,   52,    0,    0,    0,   57,   58,   59,    0,   71,
       73,    0,    0,   81,   82,    0,   95,   96,    0,    0,
        0,    0,    0,  122,    0,  135,    0,    0,  150,  151,
        0,    0,    0,  155,    0,  158,    0,  163,   83,    0,
        0,    0,    0,    0,    0,    0,    0,  188,    0,  193,
        0,  199,  200,  220,  220,   15,  220,   16,  220,  220,
      220,   30,  220,   33,   44,   37,  220,  220,  220,   52,

      220,  220,  220,   57,   58,   59,  220,   71,   73,  220,
      220,   81,   82,  220,   95,   96,  220,  220,  220,  220,
      220,  122,  220,  135,  220,  220,  150,  151,  220,  220,
      220,  155,  220,  158,  220,  163,   83,  220,  220,  220,
      220,  220,  220,  220,  220,  188,  220,  193,  220,  199,
      200,  232,  227,  227,   15,  227,   16,  227,  227,  227,
       30,  227,   33,   44,   37,  227,  227,  227,   52,  227,
      227,  227,   57,   58,   59,  227,   71,   73,  227,  227,
       81,   82,  227,   95,   96,  227,  227,  227,  227,  227,
      122,  227,  135,  227,  227,  150,  151,  227,  227,  227,

      155,  227,  158,  227,  163,   83,  227,  227,  227,  227,
      227,  227,  227,  227,  188,  227,  193,  227,  199,  200,
      238,  250,  253,  253,   15,  253,   16,  253,  253,  253,
       30,  253,   33,   44,   37,  253,  253,  253,   52,  253,
      253,  253,   57,   58,   59,  253,   71,   73,  253,  253,
       81,   82,  253,   95,   96,  253,  253,  253,  253,  253,
      122,  253,  135,  253,  253,  150,  151,  253,  253,  253,
      155,  253,  158,  253,  163,   83,  253,  253,  253,  253,
      253,  253,  253,  253,  188,  253,  193,  253,  199,  200,
        0,    0,    0,    0,    0,   29,   32,    0,   48,   49,

        0,    0,    0,    0,   62,    0,    0,    0,    0,  100,
        0,    0,  121,    0,    0,    0,  152,    0,    0,    0,
        0,  164,    0,  173,    0,    0,    0,    0,    0,    0,
        0,  220,  220,  220,  220,  220,   29,   32,  220,   48,
       49,  220,  220,  220,  220,   62,  220,  220,  220,  220,
      100,  220,  220,  121,  220,  220,  220,  152,  220,  220,
      220,  220,  164,  220,  173,  220,  220,  220,  220,  220,
      220,  220,  227,  227,  227,  227,  227,   29,   32,  227,
       48,   49,  227,  227,  227,  227,   62,  227,  227,  227,
      227,  100,  227,  227,  121,  227,  227,  227,  152,  227,

      227,  227,  227,  164,  227,  173,  227,  227,  227,  227,
      227,  227,  227,  253,  253,  253,  253,  253,   29,   32,
      253,   48,   49,  253,  253,  253,  253,   62,  253,  253,
      253,  253,  100,  253,  253,  121,  253,  253,  253,  152,
      253,  253,  253,  253,  164,  253,  173,  253,  253,  253,
      253,  253,  253,  253,    6,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   50,    0,   54,   55,    0,
       79,    0,   99,    0,  120,  130,    0,  149,  153,  154,
      156,    0,    0,    0,  175,  176,  182,  185,  187,  190,
      198,    6,  220,  220,   25,  220,  220,  220,  220,  220,

      220,  220,   50,  220,   54,   55,  220,   79,  220,   99,
      220,  120,  130,  220,  149,  153,  154,  156,  220,  220,
      220,  175,  176,  182,  185,  187,  190,  198,    6,  227,
      227,   25,  227,  227,  227,  227,  227,  227,  227,   50,
      227,   54,   55,  227,   79,  227,   99,  227,  120,  130,
      227,  149,  153,  154,  156,  227,  227,  227,  175,  176,
      182,  185,  187,  190,  198,    6,  253,  253,   25,  253,
      253,  253,  253,  253,  253,  253,   50,  253,   54,   55,
      253,   79,  253,   99,  253,  120,  130,  253,  149,  153,
      154,  156,  253,  253,  253,  175,  176,  182,  185,  187,

      190,  198,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,   53,    0,    0,  108,    0,  161,    0,  167,
        0,    0,  220,   19,  220,  220,  220,  220,  220,  220,
      220,  220,   53,  220,  220,  108,  220,  161,  220,  167,
      220,  220,  227,   19,  227,  227,  227,  227,  227,  227,
      227,  227,   53,  227,  227,  108,  227,  161,  227,  167,
      227,  227,  253,   19,  253,  253,  253,  253,  253,  253,
      253,  253,   53,  253,  253,  108,  253,  161,  253,  167,
      253,  253,    0,   26,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,  162,    0,    0,  220,   26,  220,

      220,  220,  220,  220,  220,  220,   77,  220,  220,  162,
      220,  220,  227,   26,  227,  227,  227,  227,  227,  227,
      227,   77,  227,  227,  162,  227,  227,  253,   26,  253,
      253,  253,  253,  253,  253,  253,   77,  253,  253,  162,
      253,  253,    0,    0,   38,    0,   41,   42,    0,    0,
       87,  137,  183,    0,  220,  220,   38,  220,   41,   42,
      220,  220,   87,  137,  183,  220,  227,  227,   38,  227,
       41,   42,  227,  227,   87,  137,  183,  227,  253,  253,
       38,  253,   41,   42,  253,  253,   87,  137,  183,  253,
       11,    0,    0,    0,    0,  184,   11,  220,  220,  220,

      220,  184,   11,  227,  227,  227,  227,  184,   11,  253,
      253,  253,  253,  184,    0,    0,   43,    0,  220,  220,
       43,  220,  227,  227,   43,  227,  253,  253,   43,  253,
       39,    0,    0,   39,  220,  220,   39,  227,  227,   39,
      253,  253,    0,    0,  220,  220,  227,  227,  253,  253,
        0,   45,  220,   45,  227,   45,  253,   45,    0,  220,
      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
        0,  220,  227,  253,    0,  220,  227,  253,    0,  220,
      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
        0,  220,  227,  253,    0,  220,  227,  253,    0,  220,

      227,  253,    0,  220,  227,  253,    0,  220,  227,  253,
       40,   40,   40,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   10,   16,   16,   17,
       18,   19,   16,   20,   16,   16,   16,   21,   10,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,    1,    1,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   10,   81,   10,    1,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    3,    1,
        5,    1,    4,    1,    4,    6,    6,    6,    6,    6,
        3,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    8
    } ;

static yyconst flex_int16_t yy_base[3624] =
    {   0,
        0,    0,   82,    0,  164,    0,  234,  242,  250,  258,
      278,    0,  973, 7781,  359, 7781,  947, 7781, 7781,  949,
      341, 7781,  913,  335,  354,  350,  398,  400,  453,  343,
      345,  404,  328,  339,  454,  395,  475,  524,  513,  324,
      455,  563,  571,  401,  472,  583,  347,  851, 7781,  556,
      638,  667,  630,  682,  719,  721,  774,  432,  471,  563,
      349,  397,  661,  712,  779,  828,  772,  384,  776,  832,
      879,  632,  503,  881,    0,  401, 7781, 7781, 7781,    0,
      631,  939,  968,  931,  983, 1020, 1022, 1075,  635,  648,
      819,  394,  472,  962,  884, 1080, 1129, 1027,  461, 1077,

     1133, 1180,  722,  730, 1089,    0,  503,  959, 1209,  665,
        0,  450,    0,  907, 7781,    0,  909, 7781,  518,    0,
      893, 1238, 1181, 1233, 1231, 1281, 1334,  836,  891, 1219,
      508,  524, 1289, 1298, 1356, 1405, 1300,  514, 1336, 1409,
     1456,  894,  787, 1394,  576, 7781,  828,  541, 7781,  883,
     7781, 7781, 7781,  565,  900,  943,  569,  635,  681,  681,
      740, 1347,  988,  763,  783, 7781,  784,  838,  821, 1448,
     1017,  877,  958, 1460,  951,  960,  999, 1023, 1020, 1036,
     1056, 1055, 1464, 1050, 1059, 1081, 1119, 1344, 1122, 1127,
     1120, 1127, 1122, 1134, 1142, 1277, 7781, 1149, 1137, 1397,

     1207, 1181, 1474, 1215, 1233, 1288, 1289, 1468, 1458, 1340,
     1506, 1506, 1330, 1338, 1404, 1409, 1406, 1450, 1471, 1475,
     1467, 1502, 1502, 1512, 1518, 1520, 1523, 1511, 1536, 1521,
     1518, 1524, 1560, 1534, 1525, 1564, 1566, 1538, 1540, 1568,
     7781, 1574, 1587, 1572, 1576, 1581, 1573, 1581, 1585, 1571,
     1582, 1602, 7781, 1642, 1651, 1657, 1663, 1672,    0, 1611,
     1657, 1667, 1623, 1669, 1658, 1654, 1668, 1673, 1664, 1666,
     1667,    0, 1664, 1684, 1671, 1715, 1690, 1670, 1700, 1720,
     1671, 1709, 1716, 1730, 1716, 1733, 1735, 1735, 1767, 1730,
     1723, 1726, 1731, 1762, 1733, 1738, 1733, 1748, 1756, 1760,

     1770, 1771,    0, 1777, 1763, 1782, 1792, 1783, 1818, 1771,
     1783, 1788, 1784, 1826, 1812, 1788, 1834, 1832, 1818, 1819,
     1840, 1843, 1836, 1829, 1847, 1844, 1833, 1849, 1837, 1847,
     1881, 1856, 1858, 1846, 1891, 1855, 1881, 1861, 1891, 1878,
     1886, 1899, 1899, 1900, 1900, 1901,    0, 1915, 1945, 1933,
     1943, 1939, 1904, 1943, 1945, 1935, 1940, 1958,    0, 1969,
     2002,  909, 1977, 2014, 2023,    0, 1972, 2008, 1997, 1980,
     1997, 1998, 2003, 2017, 2019, 2017, 2017, 2018,    0, 2015,
     2035, 2020, 2058, 2041, 2020, 2053, 2071, 2028, 2037, 2065,
     2078, 2063, 2080, 2083, 2084, 2111, 2080, 2073, 2076, 2080,

     2114, 2081, 2086, 2084, 2090, 2094, 2096, 2114, 2122,    0,
     2120, 2105, 2132, 2146, 2127, 2159, 2113, 2134, 2140, 2136,
     2166, 2163, 2152, 2180, 2180, 2174, 2170, 2188, 2191, 2184,
     2177, 2194, 2191, 2180, 2200, 2188, 2201, 2227, 2206, 2208,
     2198, 2244, 2207, 2221, 2222, 2228, 2245, 2234, 2250, 2251,
     2250, 2249, 2265,    0, 2285, 2287, 2268, 2299, 2273, 2253,
     2283, 2285, 2282, 2285, 2303, 2347, 2356, 2362,  966, 2370,
     2379, 2385, 2406,    0,  617,    0, 2409,    0,    0,    0,
     2285, 2371, 2378, 2312, 2381, 2371, 2369, 2385, 2388, 2396,
     2387, 2391,    0, 2395, 2421, 2402, 2428, 2423, 2401, 2405,

     2441, 2408, 2412, 2419, 2447, 2433, 2457, 2461, 2460, 2463,
     2456, 2454, 2457, 2462, 2484, 2465, 2472, 2465, 2471, 2465,
     2467, 2477, 2504,    0, 2483, 2473, 2492, 2529, 2525, 2519,
     2476, 2494, 2505, 2506, 2533, 2520, 2526, 2548, 2548, 2540,
     2534, 2552, 2559, 2554, 2548, 2565, 2568, 2557, 2575, 2563,
     2575, 2599, 2580, 2587, 2577, 2606, 2586, 2603, 2592, 2615,
     2600, 2589, 2620, 2632, 2601, 2614, 2646,    0, 2651, 2659,
     2642, 2664, 2659, 2619, 2635, 2644, 2642, 2648, 2675,    0,
      880, 7781, 2674, 7781, 2677, 7781, 7781, 2682, 7781, 2671,
     2677, 7781, 2671, 2683, 2670, 2695,  829, 2696, 2691, 2699,

     2689, 2706, 2708, 2704, 2705, 2705, 2704, 2706, 2722, 2709,
     2725, 2725, 2720, 2728, 2730, 2736, 2739, 2730, 2749, 2738,
     2748, 2756, 7781, 2761, 2747, 2762, 2749, 2757, 2757, 2774,
     2759, 2780, 2770, 2779, 2772, 2774, 2776, 2784, 2771, 2784,
     2777, 2783, 2794, 2803, 2839, 2786, 7781, 7781, 2794, 2789,
     2808, 2794, 2814, 2811, 2825, 2826, 2830, 7781, 2815, 2819,
     2836, 2839, 2827, 7781, 2826, 7781, 7781,  828, 2835, 2838,
     2846, 2848, 2851, 2839, 7781, 2834, 2851, 2856, 2858, 2861,
     2849, 2850, 2858, 2868, 2875, 2868, 2881, 2879, 2875, 2887,
     2885, 2893, 2884, 2897, 2895, 2892, 2886, 2903, 2894, 2906,

     7781, 2900, 2910, 2896, 2908, 2899, 7781, 2907, 2907, 2905,
     2920, 2914, 2923, 2930, 2921, 2934, 2925, 2941, 2938, 2945,
     2941, 2935, 2958, 2935, 2951, 2949, 2958, 2958, 2952, 2982,
     3009, 3014, 3029, 3034, 3039, 2977,    0, 2981,    0,    0,
     2987,    0, 2997, 3005,    0, 2999, 3026, 3013, 3036,  823,
     3036, 3028, 3036, 3026, 3042, 3044, 3035, 3037, 3037, 3031,
     3038, 3053, 3036, 3053, 3053, 3045, 3081, 3061, 3058, 3065,
     3057, 3092, 3079, 3088, 3093,    0, 3098, 3084, 3098, 3085,
     3087, 3088, 3105, 3090, 3110, 3100, 3112, 3099, 3101, 3103,
     3111, 3097, 3111, 3103, 3111, 3124, 3143, 3161, 3116,    0,

        0, 3144, 3132, 3149, 3137, 3155, 3152, 3161, 3158, 3162,
        0, 3147, 3149, 3162, 3169, 3157,    0, 3153,    0,    0,
      777, 3162, 3163, 3173, 3174, 3179, 3166,    0, 3162, 3179,
     3188, 3201, 3204, 3192, 3191, 3201, 3209, 3216, 3207, 3218,
     3211, 3206, 3218, 3214, 3222, 3212, 3224, 3222, 3219, 3213,
     3228, 3219, 3231,    0, 3225, 3237, 3223, 3236, 3227,    0,
     3239, 3250, 3248, 3263, 3255, 3263, 3268, 3261, 3262, 3264,
     3280, 3277, 3276, 3270, 3264, 3284, 3265, 3278, 3276, 3283,
     3281, 3277, 3334, 3339, 3348, 3353, 3362, 3371, 3376, 3386,
     3355,    0, 3367,    0,    0, 3372,    0, 3361, 3367,    0,

     3367, 3374, 3361, 3384,  773, 3384, 3376, 3386, 3372, 3389,
     3391, 3382, 3383, 3383, 3377, 3384, 3399, 3388, 3412, 3403,
     3395, 3431, 3417, 3427, 3430, 3414, 3439, 3426, 3436, 3441,
        0, 3447, 3431, 3445, 3432, 3434, 3434, 3451, 3436, 3455,
     3446, 3469, 3450, 3452, 3454, 3462, 3447, 3467, 3470, 3474,
     3485, 3486, 3507, 3484,    0,    0, 3492, 3481, 3500, 3487,
     3503, 3500, 3509, 3504, 3508,    0, 3493, 3495, 3525, 3515,
     3508,    0, 3504,    0,    0,  769, 3513, 3514, 3524, 3526,
     3527, 3528,    0, 3523, 3540, 3545, 3551, 3552, 3541, 3542,
     3550, 3556, 3563, 3554, 3565, 3557, 3552, 3564, 3560, 3568,

     3558, 3575, 3573, 3570, 3564, 3579, 3572, 3584,    0, 3578,
     3599, 3585, 3597, 3588,    0, 3596, 3600, 3596, 3612, 3606,
     3614, 3617, 3608, 3609, 3611, 3626, 3623, 3622, 3616, 3610,
     3636, 3617, 3630, 3648, 3634, 3634, 3629, 3686, 3691, 3705,
     3714, 3720, 3728, 3733, 3743, 3750, 3755, 3761, 3779,    0,
     3658,    0, 3659,    0,    0, 3664,    0, 3660, 3667,    0,
     3673, 3721, 3709, 3750,  743, 3762, 3753, 3761, 3749, 3765,
     3767, 3758, 3759, 3759, 3754, 3759, 3777, 3763, 3800, 3778,
     3770, 3779, 3785, 3782, 3789, 3788, 3807, 3806, 3815, 3819,
        0, 3824, 3808, 3822, 3809, 3811, 3811, 3828, 3813, 3834,

     3824, 3839, 3825, 3827, 3829, 3837, 3822, 3836, 3828, 3834,
     3845, 3861, 3887, 3853,    0,    0, 3869, 3857, 3879, 3864,
     3880, 3877, 3886, 3881, 3884,    0, 3869, 3873, 3888, 3893,
     3883,    0, 3879,    0,    0,  733, 3888, 3889, 3898, 3899,
     3902, 3889,    0, 3886, 3911, 3919, 3920, 3929, 3917, 3919,
     3927, 3933, 3940, 3931, 3942, 3934, 3929, 3941, 3938, 3946,
     3936, 3950, 3948, 3945, 3939, 3954, 3945, 3956,    0, 3950,
     3960, 3946, 3960, 3959,    0, 3970, 3969, 3973, 3988, 3982,
     3990, 3994, 3985, 3986, 3988, 4003, 4000, 3999, 3994, 3988,
     4011, 3987, 4004, 4002, 4009, 4007, 4001, 4005, 4006, 4002,

     4031, 4026, 4032, 4037, 4049, 4037, 4045, 7781, 4053, 7781,
     7781, 4060, 4049, 7781, 4057, 4062, 4055, 4057, 4062, 4048,
     4051, 4053, 4072, 4069, 4060, 4090, 4075, 4071, 4065, 4081,
     4064, 4078, 7781, 4090, 4096, 7781, 7781, 7781, 4093, 4088,
     4099, 4095, 4097, 4117, 4114, 4112, 4101, 4102, 4109, 4116,
     4125, 4125, 7781, 7781, 4127, 4115, 4118, 7781, 4115, 4116,
     4117, 4131,  767,  764, 4149, 7781, 7781, 4135,  727, 7781,
     7781, 7781, 4123, 4140, 7781, 4139, 4146, 4160, 4155, 4153,
     4155, 4172, 7781, 4153, 4171, 4168, 4160, 4176, 4160, 4177,
     7781, 4168, 4166, 4170, 4171, 7781, 4181, 4171, 4172, 4189,

     4192, 4196, 4201, 4194, 4210, 7781, 4206, 4220, 4208, 4208,
     4227, 7781, 4217, 4219, 4219, 4231, 4223, 7781, 4231, 4223,
     4218, 4235, 7781, 7781, 4223, 4222, 4239, 7781, 4226, 4234,
     4228, 4235, 4231, 4234, 4251, 4252, 4263, 4263, 4265, 4273,
     7781, 7781, 7781, 4278, 4275, 7781, 7781, 4298, 4312, 4268,
     4269, 4269, 4286, 4281, 4280, 4285, 4295, 4290, 4297,    0,
     4305,    0,    0, 4313, 4306,    0, 4313, 4318, 4311, 4312,
     4317, 4306, 4310, 4312, 4331, 4328, 4319, 4332, 4334, 4334,
     4329, 4343, 4324, 4333,    0, 4347, 4345,    0,    0,    0,
     4342, 4341, 4351, 4347, 4350, 4371, 4370, 4368, 4357, 4358,

     4364, 4371, 4383, 4384,    0,    0, 4386, 4374, 4377,    0,
     4374, 4375, 4376, 4393,  762,  758, 4393,    0,    0, 4397,
      720,    0,    0,    0, 4383, 4398,    0, 4394, 4394, 4407,
     4401, 4406, 4407, 4424,    0, 4406, 4425, 4427, 4415, 4431,
     4415, 4432,    0, 4423, 4424, 4429, 4430,    0, 4440, 4430,
     4431, 4447, 4457, 4455, 4452, 4448, 4464,    0, 4452, 4467,
     4455, 4454, 4480,    0, 4469, 4471, 4472, 4485, 4479,    0,
     4487, 4479, 4474, 4490,    0,    0, 4485, 4477, 4493,    0,
     4484, 4492, 4487, 4494, 4490, 4496, 4511, 4511, 4514, 4517,
     4519, 4519,    0,    0,    0, 4525, 4522,    0,    0, 4558,

     4570, 4575, 4580, 4586, 4591, 4540, 4570, 4564, 4581, 4577,
     4575, 4580, 4590, 4578, 4585,    0, 4593,    0,    0, 4600,
     4589,    0, 4597, 4602, 4595, 4596, 4601, 4587, 4588, 4590,
     4609, 4606, 4597, 4638, 4613, 4609, 4603, 4645, 4626, 4628,
        0, 4640, 4638,    0,    0,    0, 4635, 4627, 4637, 4633,
     4635, 4655, 4652, 4651, 4641, 4642, 4648, 4655, 4664, 4662,
        0,    0, 4664, 4652, 4655,    0, 4652, 4654, 4655, 4669,
      754,  750, 4693,    0,    0, 4699,  683,    0,    0,    0,
     4685, 4694,    0, 4689, 4688, 4701, 4695, 4694, 4695, 4712,
        0, 4693, 4711, 4708, 4700, 4716, 4700, 4716,    0, 4707,

     4705, 4706, 4707,    0, 4717, 4708, 4710, 4753, 4730, 4727,
     4754, 4744, 4760,    0, 4748, 4762, 4750, 4749, 4768,    0,
     4757, 4759, 4759, 4771, 4763,    0, 4771, 4763, 4758, 4774,
        0,    0, 4761, 4762, 4775,    0, 4763, 4771, 4765, 4773,
     4769, 4772, 4811, 4813, 4816, 4813, 4815, 4815,    0,    0,
        0, 4820, 4817,    0,    0, 4836, 4841, 4846, 4865, 4873,
     4878, 4888, 4895, 4828, 4829, 4823, 4853, 4848, 4866, 4871,
     4888, 4876, 4883,    0, 4891,    0,    0, 4898, 4887,    0,
     4895, 4900, 4893, 4894, 4899, 4885, 4886, 4889, 4908, 4905,
     4896, 4932, 4911, 4909, 4903, 4916, 4897, 4899,    0, 4911,

     4909,    0,    0,    0, 4926, 4918, 4935, 4932, 4935, 4955,
     4952, 4950, 4939, 4940, 4946, 4953, 4962, 4960,    0,    0,
     4963, 4951, 4954,    0, 4951, 4952, 4955, 4969,  717,  710,
     4987,    0,    0, 4970,  670,    0,    0,    0, 4957, 4966,
        0, 4961, 4980, 4993, 4994, 4992, 4993, 5010,    0, 4991,
     5009, 5006, 4998, 5014, 4998, 5014,    0, 5005, 5003, 5004,
     5006,    0, 5017, 5007, 5008, 5026, 5031, 5028, 5027, 5017,
     5047,    0, 5040, 5054, 5045, 5047, 5066,    0, 5055, 5057,
     5057, 5069, 5061,    0, 5069, 5061, 5056, 5072,    0,    0,
     5060, 5059, 5073,    0, 5062, 5070, 5064, 5071, 5069, 5072,

     5086, 5086, 5089, 5086, 5102, 5107,    0,    0,    0, 5112,
     5112,    0,    0, 7781, 7781,  665, 5122, 5108, 5122, 7781,
     5123, 5104, 5125, 5130, 5129, 5121, 7781, 5115, 5115, 5116,
     5123, 5120, 7781, 5135, 7781, 5121, 5128, 5125, 5135, 5138,
     5147, 5136, 5161, 5150, 5134, 5141, 5163, 5161, 5174, 5178,
     7781, 5165, 5183, 5169, 5186, 7781, 7781,  633, 7781, 5167,
     5184, 5174, 7781, 5190, 7781, 5187, 5190, 7781, 5176, 5197,
     7781, 7781, 5194, 5183, 7781, 5178, 7781, 7781, 7781, 5196,
     5192, 5193, 5208, 7781, 7781, 5209, 7781, 5205, 7781, 5217,
     5212,  626, 5213, 5223, 7781, 5222, 7781, 5222,  529, 5234,

     5240, 5226, 5228, 5243, 5245, 5244, 7781, 5245, 5248, 5233,
     7781, 5252, 5233, 5255, 5253, 5238, 5250, 5247, 5256, 5246,
     7781, 5245, 5266, 5256, 5264, 5270, 7781, 5285, 5268, 5290,
     7781, 7781, 7781, 5280, 5286, 5300, 5288, 7781, 5289,    0,
        0,  619, 5301, 5287, 5301,    0, 5302, 5283, 5304, 5309,
     5308, 5300,    0, 5295, 5295, 5296, 5303, 5300,    0, 5316,
        0, 5302, 5309, 5307, 5317, 5318, 5341, 5335, 5336, 5352,
     5339, 5346, 5355, 5348, 5358, 5359,    0, 5345, 5362, 5348,
     5365,    0,    0,  616,    0, 5346, 5363, 5354,    0, 5370,
        0, 5367, 5370,    0, 5356, 5378,    0,    0, 5375, 5362,

        0, 5361,    0,    0,    0, 5380, 5386, 5392, 5406,    0,
        0, 5410,    0, 5409,    0, 5407, 5397,  613, 5398, 5405,
        0, 5401,    0, 5401,  561, 5413, 5419, 5405, 5407, 5422,
     5424, 5423,    0, 5425, 5428, 5413,    0, 5432, 5413, 5436,
     5434, 5419, 5432, 5429, 5436, 5440,    0, 5444, 5464, 5457,
     5468, 5460,    0, 5470, 5453, 5472,    0,    0,    0, 5459,
     5465, 5479, 5467,    0, 5468,  612, 5497,    0,    0,  609,
     5480, 5466, 5480,    0, 5481, 5470, 5491, 5496, 5496, 5488,
        0, 5482, 5496, 5497, 5504, 5501,    0, 5515,    0, 5501,
     5508, 5505, 5518, 5522, 5531, 5520, 5530, 5533, 5517, 5524,

     5532, 5524, 5534, 5535,    0, 5521, 5538, 5525, 5551,    0,
        0,  606,    0, 5534, 5551, 5541,    0, 5571,    0, 5568,
     5571,    0, 5557, 5577,    0,    0, 5574, 5570,    0, 5558,
        0,    0,    0, 5576, 5571, 5576, 5590,    0,    0, 5592,
        0, 5588,    0, 5586, 5576,  591, 5577, 5584,    0, 5580,
        0, 5580,  611, 5592, 5598, 5592, 5594, 5609, 5612, 5611,
        0, 5612, 5629, 5614,    0, 5633, 5614, 5635, 5633, 5618,
     5630, 5630, 5640, 5630,    0, 5629, 5649, 5639, 5647, 5639,
        0, 5649, 5632, 5651,    0,    0,    0, 5638, 5644, 5658,
     5646,    0, 5655, 5699,  662, 5708, 5713,    0,    0,  565,

     5692, 5678, 5692,    0, 5704, 5685, 5706, 5711, 5710, 5702,
        0, 5696, 5696, 5697, 5704, 5701,    0, 5715,    0, 5701,
     5708, 5705, 5718, 5719, 5728, 5717, 5740, 5730, 5714, 5721,
     5730, 5723, 5749, 5750,    0, 5747, 5764, 5750, 5767,    0,
        0,  534,    0, 5748, 5765, 5755,    0, 5771,    0, 5768,
     5771,    0, 5757, 5777,    0,    0, 5774, 5766,    0, 5758,
        0,    0,    0, 5776, 5772, 5773, 5788,    0,    0, 5789,
        0, 5785,    0, 5784, 5775,  511, 5791, 5798,    0, 5794,
        0, 5801,  714, 5814, 5821, 5807, 5809, 5824, 5826, 5825,
        0, 5826, 5829, 5814,    0, 5833, 5814, 5835, 5833, 5818,

     5830, 5830, 5837, 5827,    0, 5826, 5846, 5836, 5844, 5837,
        0, 5848, 5846, 5865,    0,    0,    0, 5852, 5865, 5880,
     5869,    0, 5870, 5884, 7781, 5877, 7781, 5873, 7781, 5874,
     5875, 5870, 5886, 5889, 5888, 7781, 5873, 5875, 7781, 5891,
     5877, 7781, 5895, 5889, 5891, 5899, 5890, 5901, 5902, 5897,
     5906, 5907, 7781, 5925, 7781, 7781, 7781, 5924, 7781, 5917,
     5917, 5932, 5928, 5939, 5932, 7781, 7781, 7781, 5941, 5928,
     5942, 5947, 5948, 7781, 5949, 5950, 5940, 5941, 7781, 5951,
     7781, 5943, 7781, 7781, 7781, 5950, 5956, 5957, 5947, 5954,
     5955, 5940, 5946, 7781, 5951, 5971, 5966, 5982, 5992, 5984,

     7781, 7781, 7781, 5985, 5995, 7781, 5992, 6001, 5991, 6003,
     5987, 6002, 7781, 5993, 7781, 7781, 6007, 5991, 6003, 7781,
     6010,    0, 6003,    0, 5999,    0, 6003, 6004, 5999, 6015,
     6018, 6017,    0, 6002, 6005,    0, 6022, 6023,    0, 6038,
     6032, 6041, 6050, 6042, 6053, 6054, 6048, 6056, 6042,    0,
     6060,    0,    0,    0, 6059,    0, 6045, 6044, 6058, 6054,
     6065, 6058,    0,    0,    0, 6067, 6057, 6071, 6076, 6077,
        0, 6078, 6079, 6069, 6071,    0, 6082,    0, 6089,    0,
        0,    0, 6093, 6099, 6107, 6098, 6106, 6107, 6092, 6097,
        0, 6101, 6106, 6101, 6117, 6120, 6111,    0,    0,    0,

     6111, 6121,    0, 6118, 6127, 6117, 6132, 6116, 6131,    0,
     6122,    0,    0, 6136, 6120, 6132,    0, 6178, 6158,    0,
     6151,    0, 6147,    0, 6160, 6161, 6156, 6172, 6175, 6174,
        0, 6159, 6161,    0, 6177, 6163,    0, 6178, 6172, 6174,
     6182, 6176, 6187, 6188, 6182, 6190, 6176,    0, 6194,    0,
        0,    0, 6193,    0, 6179, 6178, 6192, 6188, 6213, 6206,
        0,    0,    0, 6215, 6214, 6228, 6233, 6234,    0, 6235,
     6236, 6226, 6227,    0, 6237,    0, 6229,    0,    0,    0,
     6233, 6239, 6240, 6230, 6240, 6241, 6226, 6231,    0, 6235,
     6240, 6235, 6251, 6254, 6245,    0,    0,    0, 6245, 6255,

        0, 6266, 6275, 6265, 6289, 6273, 6288,    0, 6279,    0,
        0, 6293, 6277, 6289,    0, 6306, 6316, 6321, 6301,    0,
     6294,    0, 6303,    0, 6304, 6312, 6307, 6323, 6326, 6325,
        0, 6312, 6314,    0, 6330, 6316,    0, 6331, 6325, 6327,
     6335, 6326, 6337, 6338, 6332, 6340, 6328,    0, 6346,    0,
        0,    0, 6345,    0, 6331, 6330, 6344, 6340, 6356, 6349,
        0,    0,    0, 6371, 6358, 6379, 6384, 6385,    0, 6386,
     6387, 6379, 6380,    0, 6390,    0, 6382,    0,    0,    0,
     6386, 6392, 6393, 6383, 6390, 6391, 6376, 6381,    0, 6385,
     6392, 6387, 6403, 6406, 6397,    0,    0,    0, 6397, 6407,

        0, 6409, 6418, 6421, 6433, 6424, 6439,    0, 6430,    0,
        0, 6444, 6428, 6442,    0, 6443, 6425, 7781, 6445, 7781,
     6448, 6440, 6450, 7781, 6451, 7781, 7781,  504, 6451, 6453,
     6438, 7781, 6446, 6456, 6463, 7781, 7781, 7781, 6445, 7781,
     7781, 6465, 6453, 7781, 7781, 6467, 7781, 7781, 6466, 6458,
     6464, 6464, 6479, 7781, 6471, 7781, 6495, 6486, 7781, 7781,
     6488, 6489, 6489, 7781, 6489, 7781, 6505, 7781, 7781, 6498,
     6508, 6491, 6498, 6499, 6501, 6494, 6496, 7781, 6512, 7781,
     6500, 7781, 7781, 6512, 6496,    0, 6516,    0, 6519, 6511,
     6521,    0, 6522,    0,    0,  485, 6522, 6529, 6514,    0,

     6535, 6545, 6557,    0,    0,    0, 6539,    0,    0, 6559,
     6547,    0,    0, 6561,    0,    0, 6562, 6554, 6555, 6555,
     6557,    0, 6549,    0, 6566, 6557,    0,    0, 6559, 6560,
     6560,    0, 6558,    0, 6574,    0,    0, 6569, 6579, 6562,
     6569, 6570, 6572, 6565, 6572,    0, 6588,    0, 6589,    0,
        0, 6625, 6601, 6597,    0, 6617,    0, 6620, 6612, 6622,
        0, 6623,    0,    0,  447, 6623, 6625, 6610,    0, 6618,
     6628, 6633,    0,    0,    0, 6615,    0,    0, 6637, 6625,
        0,    0, 6639,    0,    0, 6638, 6630, 6631, 6631, 6633,
        0, 6625,    0, 6642, 6633,    0,    0, 6635, 6636, 6636,

        0, 6647,    0, 6663,    0,    0, 6670, 6680, 6663, 6670,
     6671, 6673, 6666, 6668,    0, 6684,    0, 6672,    0,    0,
     6705, 6710, 6684, 6666,    0, 6686,    0, 6701, 6693, 6703,
        0, 6704,    0,    0,  439, 6717, 6719, 6704,    0, 6712,
     6722, 6727,    0,    0,    0, 6709,    0,    0, 6729, 6717,
        0,    0, 6731,    0,    0, 6730, 6722, 6727, 6727, 6729,
        0, 6721,    0, 6738, 6729,    0,    0, 6731, 6732, 6732,
        0, 6730,    0, 6746,    0,    0, 6739, 6749, 6744, 6751,
     6752, 6754, 6760, 6762,    0, 6778,    0, 6766,    0,    0,
     6778, 6785, 6767, 6770, 6782, 7781, 7781, 6787, 7781, 7781,

     6787, 6777, 6787, 6781, 7781, 6788, 6794, 6783, 6784, 7781,
     6787, 6804, 7781, 6817, 6809, 6810, 7781, 6818, 6825, 6835,
     6836, 7781, 6837, 7781, 6823, 6837, 6830, 6842, 6843, 6845,
     6825, 6848, 6855, 6837, 6840, 6852,    0,    0, 6877,    0,
        0, 6855, 6841, 6851, 6845,    0, 6853, 6875, 6864, 6878,
        0, 6878, 6895,    0, 6896, 6888, 6889,    0, 6897, 6891,
     6901, 6908,    0, 6902,    0, 6888, 6907, 6899, 6911, 6913,
     6915, 6895, 6914, 6922, 6918, 6921, 6933,    0,    0, 6954,
        0,    0, 6946, 6933, 6943, 6937,    0, 6944, 6952, 6941,
     6941,    0, 6941, 6958,    0, 6959, 6951, 6952,    0, 6964,

     6961, 6971, 6972,    0, 6973,    0, 6959, 6989, 6981, 6993,
     7004, 7007, 6987, 7006, 7013, 6995, 6998, 7010,    0,    0,
     7015,    0,    0, 7015, 7001, 7011, 7005,    0, 7012, 7021,
     7010, 7010,    0, 7011, 7031,    0, 7032, 7025, 7040,    0,
     7048, 7042, 7062, 7064,    0, 7065,    0, 7051, 7065, 7058,
     7070, 7071, 7073, 7053, 7781, 7059, 7072,  433, 7061, 7081,
     7085, 7086, 7073, 7086, 7082, 7781, 7084, 7781, 7781, 7072,
     7781, 7075, 7781, 7090, 7781, 7781, 7090, 7781, 7781, 7781,
     7781, 7093, 7099, 7096, 7781, 7781, 7124, 7781, 7781, 7781,
     7781,    0, 7107, 7121,  429, 7110, 7130, 7131, 7132, 7119,

     7132, 7128,    0, 7130,    0,    0, 7118,    0, 7121,    0,
     7139,    0,    0, 7138,    0,    0,    0,    0, 7127, 7133,
     7130,    0,    0, 7148,    0,    0,    0,    0,    0, 7130,
     7143,  398, 7133, 7154, 7182, 7169, 7156, 7169, 7176,    0,
     7178,    0,    0, 7167,    0, 7170,    0, 7185,    0,    0,
     7184,    0,    0,    0,    0, 7173, 7179, 7176,    0,    0,
     7194,    0,    0,    0,    0,    0, 7176, 7189,  393, 7182,
     7202, 7203, 7204, 7191, 7204, 7200,    0, 7202,    0,    0,
     7190,    0, 7194,    0, 7223,    0,    0, 7222,    0,    0,
        0,    0, 7211, 7227, 7225,    0,    0, 7243,    0,    0,

        0,    0, 7236, 7781, 7238, 7228, 7229, 7244, 7231, 7240,
     7245, 7241, 7781, 7250, 7247, 7781, 7240, 7781, 7254, 7781,
     7258, 7254, 7255,    0, 7257, 7246, 7247, 7262, 7249, 7259,
     7278, 7274,    0, 7283, 7290,    0, 7281,    0, 7295,    0,
     7299, 7295, 7296,    0, 7298, 7287, 7288, 7303, 7290, 7299,
     7304, 7300,    0, 7309, 7309,    0, 7299,    0, 7313,    0,
     7317, 7313, 7314,    0, 7316, 7305, 7306, 7321, 7309, 7332,
     7337, 7333,    0, 7352, 7350,    0, 7340,    0, 7354,    0,
     7358, 7354, 7349, 7781, 7364, 7361, 7366, 7360, 7364, 7365,
     7366, 7781, 7368, 7368, 7781, 7373, 7372, 7364,    0, 7379,

     7376, 7381, 7375, 7379, 7380, 7382,    0, 7398, 7395,    0,
     7400, 7409, 7402,    0, 7417, 7414, 7419, 7413, 7417, 7418,
     7419,    0, 7421, 7418,    0, 7423, 7422, 7414,    0, 7429,
     7429, 7434, 7428, 7432, 7433, 7434,    0, 7436, 7433,    0,
     7438, 7437, 7431, 7448, 7781, 7440, 7781, 7781, 7449, 7454,
     7781, 7781, 7781, 7469, 7462, 7465,    0, 7457,    0,    0,
     7466, 7461,    0,    0,    0, 7475, 7468, 7471,    0, 7463,
        0,    0, 7472, 7467,    0,    0,    0, 7481, 7474, 7480,
        0, 7472,    0,    0, 7481, 7476,    0,    0,    0, 7490,
     7781, 7482, 7486, 7498, 7480, 7781,    0, 7486, 7491, 7517,

     7499,    0,    0, 7505, 7519, 7532, 7514,    0,    0, 7520,
     7524, 7536, 7518,    0, 7532, 7520, 7781, 7540, 7535, 7523,
        0, 7543, 7538, 7526,    0, 7549, 7544, 7532,    0, 7552,
     7781,  339, 7541,    0,  322, 7542,    0,  314, 7543,    0,
      309, 7544, 7538, 7543, 7541, 7560, 7557, 7562, 7569, 7575,
     7574, 7781, 7575,    0, 7576,    0, 7577,    0, 7595, 7596,
     7597, 7598, 7586, 7587, 7588, 7589, 7585, 7589, 7590, 7591,
     7605, 7606, 7607, 7608, 7600, 7601, 7602, 7604, 7616, 7617,
     7618, 7629, 7636, 7637, 7638, 7639,  219,  211,  203,  195,
     7646, 7647, 7648, 7649, 7639, 7640, 7641, 7642, 7646, 7647,

     7651, 7652, 7647, 7648, 7649, 7650, 7656, 7657, 7658, 7659,
     7781,    0,    0,    0, 7781, 7724, 7729, 7732, 7740, 7748,
     7756, 7764, 7772
    } ;

static yyconst flex_int16_t yy_def[3624] =
    {   0,
     3615,    1, 3615,    3, 3615,    5,    5,    5,    5,    5,
     3615,   11, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3615, 3615, 3615, 3617,
     3617, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3617, 3617, 3619,
     3620, 3620, 3620, 3620, 3615, 3620, 3620, 3615, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3615, 3620, 3615, 3615, 3621,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3617,
     3617, 3617, 3617, 3617, 3617, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3617, 3617, 3617, 3617, 3617,
     3617, 3619, 3619, 3620, 3620, 3620, 3622, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3621, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3615, 3617, 3617, 3617, 3617, 3617, 3615, 3617,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3615, 3617, 3617,
     3617, 3617, 3617, 3615, 3617, 3619, 3615, 3619, 3622, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3615,

     3617, 3615, 3617, 3617, 3615, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3615, 3615, 3617, 3617, 3617,
     3615, 3623, 3619, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3617, 3615, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3615, 3617, 3623, 3623, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3617, 3623, 3623, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3617, 3623, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,

     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616,

     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616,

     3616, 3616, 3618, 3618, 3618, 3618, 3618, 3618, 3620, 3620,
     3620, 3620, 3620, 3620, 3615, 3615, 3615, 3615, 3616, 3616,
     3616, 3616, 3618, 3618, 3618, 3618, 3620, 3620, 3620, 3620,
     3615, 3615, 3615, 3616, 3616, 3616, 3618, 3618, 3618, 3620,
     3620, 3620, 3615, 3615, 3616, 3616, 3618, 3618, 3620, 3620,
     3615, 3615, 3616, 3616, 3618, 3618, 3620, 3620, 3615, 3616,
     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616,
     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616,

     3618, 3620, 3615, 3616, 3618, 3620, 3615, 3616, 3618, 3620,
     3615, 3616, 3618, 3620,    0, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615
    } ;

static yyconst flex_int16_t yy_nxt[7864] =
    {   0,
       14,   15,   16,   15,   17,   14,   14,   14,   18,   19,
       19,   19,   19,   20,   19,   14,   14,   14,   14,   14,
       19,   21,   22,   23,   19,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   14,   47,
       14,   14,   14,   14,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   14,   47,   14,
       48,   14,   14,   15,   16,   15,   17,   49,   14,   14,
       18,   19,   19,   19,   19,   20,   50,   51,   51,   51,

       51,   51,   19,   21,   22,   23,   19,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   75,   77,   75,   78,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   75,   48,   75,   14,   15,   16,   15,   17,   14,
       79,   14,   18,   19,   19,   19,   80,   20,   81,   82,
       82,   82,   82,   82,   19,   21,   22,   23,   19,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  106,   77,   14,   14,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  106,   48,  106,  108, 3594,   80,  109,
      109,  109,  109,  109,  108, 3593,   80,  109,  109,  109,
      109,  109,   19, 3592,   19,  110,  110,  110,  110,  110,
       19, 3591,   19,  110,  110,  110,  110,  110,  111,  112,
      113,   15,  114,  115,  111,  111,   18,  116,  116,  116,
      116,  117,  116,  111,  111,  111,  111,  111,  118,  119,

      120,  121,  118,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  111,  145,  111,  146,
      111,  111,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  111,  145,  111,  147,  111,
      148, 3549,  148,  151,  152,  154, 3547,  198,  199,  227,
      193,  155,  191,  156, 3545,  167,  252,  157,  158,  159,
      160,  161,  168,  162,  194,  192,  169,  163,  304,  170,
      164, 3543,  171,  165,  154,  172,  198,  199,  227,  193,

      155,  191,  156,  166,  167,  252,  157,  158,  159,  160,
      161,  168,  162,  194,  192,  169,  163,  304,  170,  164,
      204,  171,  165,  173,  172,  178,  305,  174,  205,  333,
      358,  175,  166,  411,  206,  195,  179,  176,  180,  243,
      177,  244,  196,  181,  245, 2210,  182,  197,  183,  204,
     2080,  475,  173,  148,  178,  305,  174,  205,  333,  358,
      175,  297,  411,  206,  195,  179,  176,  180,  243,  177,
      244,  196,  181,  245,  298,  182,  197,  183,  184,  200,
      228, 1952,  185,  201,  229, 1826,  186,  202,  230,  187,
      297, 3121,  188,  203,  231,  189,  299,  246,  190, 3080,

      207,  412,  208,  298,  209,  247,  440,  184,  200,  228,
      300,  185,  201,  229,  210,  186,  202,  230,  187,  211,
      212,  188,  203,  231,  189,  299,  246,  190,  352,  207,
      412,  208,  465,  209,  247,  440,  353, 3039,  223,  300,
      478,  479,  148,  210,  148, 2387, 2388,  525,  211,  212,
      213,  214,  224,  526,  215,  225, 2998,  352,  226,  554,
      216,  465,  217, 2677,  218,  353,  219,  223,  220,  221,
      222,  254,  254,  254,  254,  254,  525, 2484, 2485,  213,
      214,  224,  526,  215,  225,  255, 2656,  226,  554,  216,
      232,  217,  233,  218,  301,  219,  238,  220,  221,  222,

      234,  302,  235,  239,  240,  579,  303,  236,  237,  583,
      241,  588,  248,  242,  255,  249,  250, 2619,  475,  232,
      148,  233,  251,  301,  362,  238, 2518, 2582, 2583,  234,
      302,  235,  239,  240,  579,  303,  236,  237,  583,  241,
      588,  248,  242, 2577,  249,  250,  360,  360,  360,  360,
      360,  251,  256,  257,  257,  257,  257,  257, 2556,  268,
      361, 2519,  589,  269,  404, 2479,  270,  258, 2458,  271,
      349, 2421,  350,  406, 2616,  351,  469,  405, 2382,  272,
      473,  473,  473,  473,  473, 2361,  306,  407,  268,  361,
      307,  589,  269,  404,  308,  270,  258,  260,  271,  349,

      309,  350,  406,  261,  351,  262,  405,  273,  272,  263,
      264,  265,  266,  267,  274,  306,  407, 2324,  275,  307,
      590,  276, 2260,  308,  277,  591,  260,  278, 2256,  309,
     2682, 2683,  261, 2255,  262, 2130,  273,  310,  263,  264,
      265,  266,  267,  274,  279,  311,  284,  275,  280,  590,
      276,  312,  281,  277,  591,  459,  278,  285,  282,  286,
      456,  283,  457,  460,  287,  458,  310,  288, 2126,  289,
     2125,  592, 2002,  279,  311,  284, 1998,  280, 1997, 1876,
      312,  281, 1872, 1871,  459, 1750,  285,  282,  286,  456,
      283,  457,  460,  287,  458, 1673,  288,  329,  289,  290,

      592,  334,  598,  291,  313,  335,  314,  292,  315,  336,
      293,  330,  573,  294,  331,  337,  295,  332,  316,  296,
      574, 1592,  599,  317,  318, 1515,  329,  600,  290, 1436,
      334,  598,  291,  313,  335,  314,  292,  315,  336,  293,
      330,  573,  294,  331,  337,  295,  332,  316,  296,  574,
      408,  599,  317,  318,  319,  320,  600,  409,  321,  338,
      603,  339,  410,  601,  322,  518,  323,  602,  324,  340,
      325,  341,  326,  327,  328, 1359,  342,  343,  519,  408,
     1284, 1207,  582,  319,  320,  582,  409,  321,  338,  603,
      339,  410,  601,  322,  518,  323,  602,  324,  340,  325,

      341,  326,  327,  328,  344,  342,  343,  519,  580,  417,
      354,  345,  346,  355,  356,  480,  520,  418,  347,  611,
      357,  348,  477,  419,  885,  885,  885,  885,  885,  476,
      521,  253,  570,  344,  571,  153,  584,  572,  417,  354,
      345,  346,  355,  356,  585,  520,  418,  347,  611,  357,
      348,  362,  419,  363,  364,  364,  364,  364,  364,  521,
      375,  570,  150,  571,  376,  584,  572,  377,  365,  149,
      378,  586, 3615,  585,  466,  466,  466,  466,  466, 3615,
      379, 1042, 1042, 1042, 1042, 1042, 3615,  413,  467,  375,
     3615,  414,  587,  376,  618,  415,  377,  365,  367,  378,

      586,  416,  612, 3615,  368,  619,  369,  613,  380,  379,
      370,  371,  372,  373,  374,  381,  413,  467, 3615,  382,
      414,  587,  383,  618,  415,  384,  596,  367,  385, 3615,
      416,  612,  597,  368,  619,  369,  613,  380,  620,  370,
      371,  372,  373,  374,  381,  386,  609,  391,  382,  387,
      621,  383,  436,  388,  384,  596,  610,  385,  392,  389,
      393,  597,  390,  622,  623,  394,  437,  620,  395,  438,
      396, 3615,  439, 3615,  386,  609,  391, 3615,  387,  621,
     3615,  436,  388,  624,  625,  610,  629,  392,  389,  393,
     3615,  390,  622,  623,  394,  437, 3615,  395,  438,  396,

      397,  439,  441,  630,  398,  420,  442,  421,  399,  422,
      443,  400,  624,  625,  401,  629,  444,  402,  461,  423,
      403,  462,  463,  631,  424,  425, 3615, 3615,  464,  397,
     3615,  441,  630,  398,  420,  442,  421,  399,  422,  443,
      400, 3615, 3615,  401, 3615,  444,  402,  461,  423,  403,
      462,  463,  631,  424,  425,  426,  427,  464,  632,  428,
      445,  636,  446,  637,  638,  429,  639,  430,  640,  431,
      447,  432,  448,  433,  434,  435, 3615,  449,  450,  641,
      642, 3615,  646, 3615,  426,  427,  647,  632,  428,  445,
      636,  446,  637,  638,  429,  639,  430,  640,  431,  447,

      432,  448,  433,  434,  435,  451,  449,  450,  641,  642,
      489,  646,  452,  453,  490,  647,  653,  491,  654,  454,
      492,  468,  455,  469,  470,  470,  470,  470,  470, 3615,
      493, 3615,  651, 3615,  451, 3615, 3615,  652,  471,  489,
     3615,  452,  453,  490, 3615,  653,  491,  654,  454,  492,
      522,  455, 3615, 3615, 3615, 3615,  500,  523,  494,  493,
      501,  651,  524,  658,  502,  495,  652,  471,  481,  496,
      503,  659,  497,  504,  482,  498,  483, 3615,  499,  522,
      484,  485,  486,  487,  488,  500,  523,  494, 3615,  501,
     3615,  524,  658,  502,  495, 3615, 3615,  481,  496,  503,

      659,  497,  504,  482,  498,  483,  505,  499, 3615,  484,
      485,  486,  487,  488,  527,  643, 3615,  506,  528,  507,
      644,  645,  529,  531,  508,  550,  660,  509,  530,  510,
     3615,  532, 3615,  661, 3615,  505, 3615,  533, 3615,  551,
     3615, 3615,  552,  527,  643,  553,  506,  528,  507,  644,
      645,  529,  531,  508,  550,  660,  509,  530,  510,  511,
      532,  555,  661,  512,  672,  556,  533,  513,  551,  557,
      514,  552, 3615,  515,  553,  558,  516,  593,  594,  517,
      633,  534,  673,  535,  666,  536,  634,  667,  511,  635,
      555,  595,  512,  672,  556,  537,  513, 3615,  557,  514,

      538,  539,  515, 3615,  558,  516,  593,  594,  517,  633,
      534,  673,  535,  666,  536,  634,  667, 3615,  635, 3615,
      595, 3615, 3615,  575,  537, 3615,  576,  577,  648,  538,
      539,  540,  541,  578,  674,  542,  559,  675,  560,  649,
      650,  543,  676,  544, 3615,  545,  561,  546,  562,  547,
      548,  549,  575,  563,  564,  576,  577,  648, 3615, 3615,
      540,  541,  578,  674,  542,  559,  675,  560,  649,  650,
      543,  676,  544,  604,  545,  561,  546,  562,  547,  548,
      549,  565,  563,  564,  605,  606,  607,  614,  566,  567,
      615,  626, 3615,  608,  677,  568,  616,  627,  569,  678,

      662,  655,  604,  617,  663,  664,  665,  679,  628, 3615,
      565,  680,  656,  605,  606,  607,  614,  566,  567,  615,
      626,  657,  608,  677,  568,  616,  627,  569,  678,  662,
      655,  681,  617,  663,  664,  665,  679,  628,  668,  669,
      680,  656,  670,  671,  682,  683,  688,  685,  689,  690,
      657,  686,  695, 3615,  696,  684,  698,  687, 3615,  702,
      681,  691,  703, 3615,  708,  697,  692,  668,  669,  709,
     3615,  670,  671,  682,  683,  688,  685,  689,  690,  693,
      686,  695,  694,  696,  684,  698,  687,  699,  702,  704,
      691,  703,  706,  708,  697,  692,  700,  710,  709,  712,

      718,  720,  724,  707,  701,  711,  705,  713,  693,  721,
      725,  694,  719,  715,  726,  727,  699,  722,  704,  714,
      716,  706,  717,  723,  728,  700,  710,  729,  712,  718,
      720,  724,  707,  701,  711,  705,  713, 3615,  721,  725,
     3615,  719,  715,  726,  727, 3615,  722, 3615,  714,  716,
     3615,  717,  723,  728, 3615,  736,  729,  254,  254,  254,
      254,  254,  730, 3615,  730,  741,  731,  731,  731,  731,
      731,  255,  732,  732,  732,  732,  732,  256,  257,  257,
      257,  257,  257,  734,  736,  734,  733,  735,  735,  735,
      735,  735,  258,  737,  741,  739,  742,  743,  744,  745,

      255,  738,  749,  746,  747,  751,  752,  753,  750,  754,
      756, 3615,  764,  755,  771,  733,  740,  748, 3615,  762,
     3615,  258,  737, 3615,  739,  742,  743,  744,  745,  763,
      738,  749,  746,  747,  751,  752,  753,  750,  754,  756,
      757,  764,  755,  771,  765,  740,  748,  767,  762,  766,
      768,  758,  759,  760,  772,  773,  769,  774,  763,  775,
      761,  776,  777,  770,  778, 3615,  782,  783,  784,  757,
      785, 3615,  789,  765,  790, 3615,  767,  791,  766,  768,
      758,  759,  760,  772,  773,  769,  774,  792,  775,  761,
      776,  777,  770,  778,  779,  782,  783,  784,  786,  785,

      780,  789,  793,  790,  787,  794,  791,  788,  795,  796,
      799,  781,  800,  801,  797,  798,  792,  804,  806,  811,
      807,  812,  805,  779,  802,  803,  813,  786,  814,  780,
     3615,  793,  819,  787,  794,  820,  788,  795,  796,  799,
      781,  800,  801,  797,  798,  808,  804,  806,  811,  807,
      812,  805,  825,  802,  803,  813,  809,  814,  815,  817,
      818,  819,  816,  826,  820,  810,  821,  822,  823,  824,
      827,  828,  829,  830,  808,  831,  832,  833,  834,  835,
      836,  825,  841,  842,  843,  809,  848,  815,  817,  818,
      837,  816,  826,  851,  810,  821,  822,  823,  824,  827,

      828,  829,  830,  855,  831,  832,  833,  834,  835,  836,
      838,  841,  842,  843,  839,  848,  844,  849,  852,  837,
      840,  845,  851,  856,  857,  859,  861,  853,  850,  862,
      863, 3615,  855,  877,  846,  854,  860,  847,  864,  838,
      865,  858, 3615,  839, 3615,  844,  849,  852,  866,  840,
      845, 3615,  856,  857,  859,  861,  853,  850,  862,  863,
      867,  871,  877,  846,  854,  860,  847,  864,  873,  865,
      858,  868,  878,  872,  879,  875,  874,  866,  869,  880,
      870,  876,  881,  882,  360,  360,  360,  360,  360,  867,
      871, 3615,  886,  886,  886,  886,  886,  873,  361, 3615,

      868,  878,  872,  879,  875,  874,  887,  869,  880,  870,
      876,  881,  882,  883, 3615,  883,  891,  884,  884,  884,
      884,  884,  896, 3615,  897,  894,  362,  361,  363,  888,
      888,  888,  888,  888,  889,  887,  889,  898,  890,  890,
      890,  890,  890,  365,  892,  891,  895,  899,  900,  901,
      902,  896,  893,  897,  894,  904,  906,  907,  908,  911,
      909,  905,  919,  903,  910, 3615,  898, 3615, 3615, 3615,
      917,  926,  365,  892, 3615,  895,  899,  900,  901,  902,
      918,  893,  927,  912,  904,  906,  907,  908,  911,  909,
      905,  919,  903,  910,  913,  914,  915,  920,  922,  917,

      926,  923,  921,  916,  928,  929,  930,  924,  931,  918,
      932,  927,  912,  933,  925, 3615,  937,  938,  939,  940,
      944, 3615,  945,  913,  914,  915,  920,  922,  946,  947,
      923,  921,  916,  928,  929,  930,  924,  931,  934,  932,
      948,  949,  933,  925,  935,  937,  938,  939,  940,  944,
      941,  945,  950,  954,  955,  936,  942,  946,  947,  943,
      951,  966,  961,  956,  962,  952,  953,  934, 3615,  948,
      949,  959,  967,  935,  957,  958,  960, 3615,  968,  941,
      969,  950,  954,  955,  936,  942,  963, 3615,  943,  951,
      966,  961,  956,  962,  952,  953,  974,  964,  970,  975,

      959,  967,  971,  957,  958,  960,  965,  968,  980,  969,
      972,  973,  976,  977,  981,  963,  978,  979,  982,  983,
      984,  985,  986,  987,  988,  974,  964,  970,  975,  989,
      990,  971,  996,  997,  991,  965,  998,  980, 1003,  972,
      973,  976,  977,  981,  992,  978,  979,  982,  983,  984,
      985,  986,  987,  988, 1006, 1007,  993, 1004,  989,  990,
      994,  996,  997,  991, 1008,  998,  995, 1003, 1005,  999,
     1010, 1011, 1009,  992, 1000, 1012, 1016, 1014, 1017, 3615,
     3615, 3615, 1032, 1006, 1007,  993, 1004, 1001, 1015,  994,
     1002, 3615, 1013, 1008, 1018,  995, 1026, 1005,  999, 1010,

     1011, 1009, 1019, 1000, 1012, 1016, 1014, 1017, 1027, 1030,
     1020, 1032, 1033, 1023, 1034, 1031, 1001, 1015, 1021, 1002,
     1024, 1013, 1025, 1018, 1028, 1026, 1035, 1036, 1037, 1051,
     1022, 1019, 1029, 3615, 3615, 3615, 3615, 1027, 1030, 1020,
     3615, 1033, 1023, 1034, 1031, 3615, 3615, 1021, 3615, 1024,
     3615, 1025, 3615, 1028, 1056, 1035, 1036, 1037, 1051, 1022,
     3615, 1029,  466,  466,  466,  466,  466, 1038, 3615, 1038,
     3615, 1039, 1039, 1039, 1039, 1039,  467, 1040, 1040, 1040,
     1040, 1040,  468, 1056,  469, 1043, 1043, 1043, 1043, 1043,
     1044, 1041, 1044, 3615, 1045, 1045, 1045, 1045, 1045,  471,

     1046, 1046, 1046, 1046, 1046,  467, 1054, 1052, 1057, 1047,
     1058, 1050,  581, 1059,  581, 1053, 1060,  581, 1061, 1062,
     1041, 1048, 1048, 1048, 1048, 1048, 1066, 1055,  471,  581,
     1067, 3615, 1063,  581, 1064, 1054, 1052, 1057, 1068, 1058,
     1065, 1071, 1059, 1079, 1053, 1060, 1069, 1061, 1062, 1080,
     1070, 1086, 1077, 1072, 1081, 1066, 1055, 1087, 1088, 1067,
      581, 1063, 1078, 1064, 1073, 1074, 1075, 1068, 1082, 1065,
     1071, 1083, 1079, 1076, 1089, 1069, 1090, 1084, 1080, 1070,
     1086, 1077, 1072, 1081, 1085, 1091, 1087, 1088, 1092, 1093,
     1094, 1078, 1097, 1073, 1074, 1075, 1095, 1082, 1098, 1099,

     1083, 1100, 1076, 1089, 1104, 1090, 1084, 1096, 1105, 1106,
     1107, 1108, 1109, 1085, 1091, 1110, 1114, 1092, 1093, 1094,
     1101, 1097, 1115, 1116, 1126, 1095, 1102, 1098, 1099, 1103,
     1100, 3615, 1127, 1104, 1117, 1118, 1096, 1105, 1106, 1107,
     1108, 1109, 1111, 1128, 1110, 1114, 1123, 1112, 1113, 1101,
     1129, 1115, 1116, 1126, 1119, 1102, 3615, 1124, 1103, 1120,
     1121, 1127, 1122, 1117, 1118, 1130, 1125, 1132, 1133, 1131,
     1134, 1111, 1128, 1135, 1140, 1123, 1112, 1113, 1141, 1129,
     1136, 1137, 1142, 1119, 1138, 1139, 1124, 1143, 1120, 1121,
     1144, 1122, 1145, 1146, 1130, 1125, 1132, 1133, 1131, 1134,

     1147, 1148, 1135, 1140, 1149, 1150, 1156, 1141, 1151, 1136,
     1137, 1142, 1157, 1138, 1139, 1158, 1143, 1163, 1152, 1144,
     3615, 1145, 1146, 3615, 1166, 1170, 1171, 1176, 1153, 1147,
     1148, 1159, 1154, 1149, 1150, 1156, 1160, 1151, 1155, 1164,
     3615, 1157, 1167, 1177, 1158, 1172, 1163, 1152, 1192, 1161,
     1165, 1168, 1162, 1166, 1170, 1171, 1176, 1153, 1174, 1169,
     1159, 1154, 1173, 3615, 1193, 1160, 3615, 1155, 1164, 1175,
     1186, 1167, 1177, 1194, 1172, 1178, 1180, 1192, 1161, 1165,
     1168, 1162, 1187, 1179, 1181, 1183, 1195, 1174, 1169, 1188,
     1196, 1173, 1184, 1193, 1185, 1190, 1182, 1189, 1175, 1186,

     1197, 1191, 1194, 1198, 1178, 1180, 1199, 1200, 1201, 1202,
     1203, 1187, 1179, 1181, 1183, 1195, 1204, 1205, 1188, 1196,
     1206, 1184, 1208, 1185, 1190, 1182, 1189, 1209, 1210, 1197,
     1191, 1212, 1198, 1213, 1214, 1199, 1200, 1201, 1202, 1203,
     1215, 1216, 1217, 1211, 1220, 1204, 1205, 1221, 1218, 1206,
     1219, 1208, 1222, 1223, 1226, 1231, 1209, 1210, 1227, 1228,
     1212, 1229, 1213, 1214, 1230, 1232, 1233, 1224, 1225, 1215,
     1216, 1217, 1211, 1220, 1234, 1235, 1221, 1218, 1236, 1219,
     1237, 1222, 1223, 1226, 1231, 1238, 1239, 1227, 1228, 1240,
     1229, 1241, 1243, 1230, 1232, 1233, 1224, 1225, 1242, 1244,

     1245, 1246, 1247, 1234, 1235, 1248, 1249, 1236, 1250, 1237,
     1252, 1253, 1254, 1255, 1238, 1239, 1256, 1257, 1240, 1258,
     1241, 1243, 1259, 1260, 1267, 1268, 1251, 1242, 1244, 1245,
     1246, 1247, 1261, 1269, 1248, 1249, 1270, 1250, 1271, 1252,
     1253, 1254, 1255, 1272, 1273, 1256, 1257, 1262, 1258, 3615,
     1274, 1259, 1260, 1267, 1268, 1251, 1263, 1275, 1264, 1276,
     1277, 1261, 1269, 1278, 1281, 1270, 1282, 1271, 1265, 1279,
     1283, 1285, 1272, 1273, 1286, 1287, 1262, 1288, 1266, 1274,
     1289, 1280, 1290, 1291, 1292, 1293, 1275, 1294, 1276, 1277,
     1295, 1296, 1278, 1281, 1297, 1282, 1298, 1265, 1279, 1283,

     1285, 1299, 1300, 1286, 1287, 1301, 1288, 1266, 1302, 1289,
     1280, 1290, 1291, 1292, 1293, 1303, 1294, 1304, 1305, 1295,
     1296, 1306, 1307, 1297, 1308, 1298, 1309, 1310, 1311, 1312,
     1299, 1300, 1314, 1315, 1301, 1316, 1317, 1302, 1313, 1318,
     1319, 1320, 1321, 1322, 1303, 1323, 1304, 1305, 1324, 1325,
     1306, 1307, 1326, 1308, 1327, 1309, 1310, 1311, 1312, 1328,
     1329, 1314, 1315, 1332, 1316, 1317, 1333, 1334, 1318, 1319,
     1320, 1321, 1322, 1330, 1323, 1331, 1335, 1324, 1325, 1336,
     1337, 1326, 1341, 1327, 1338, 1339, 1342, 1343, 1328, 1329,
     1345, 1344, 1332, 1346, 1347, 1333, 1334,  731,  731,  731,

      731,  731, 1330, 3615, 1331, 1335, 1350, 1340, 1336, 1337,
     1351, 1341, 1352, 1338, 1339, 1342, 1343, 3615, 3615, 1345,
     1344, 3615, 1346, 1347,  731,  731,  731,  731,  731,  732,
      732,  732,  732,  732, 1353, 1350, 1340, 1354, 1355, 1351,
     1348, 1352, 1348,  733, 1349, 1349, 1349, 1349, 1349,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735, 1356,
     1357, 1358, 1360, 1353, 1361, 1362, 1354, 1355, 1364, 1365,
     1366, 1367,  733, 1368, 1369, 1370, 1372, 1371, 1373, 1374,
     1363, 1375, 1378, 1379, 1380, 3615, 1383, 1384, 1356, 1357,
     1358, 1360, 1385, 1361, 1362, 1376, 1377, 1364, 1365, 1366,

     1367, 1386, 1368, 1369, 1370, 1372, 1371, 1373, 1374, 1363,
     1375, 1378, 1379, 1380, 1381, 1383, 1384, 1382, 1387, 1388,
     1389, 1385, 1390, 1391, 1376, 1377, 1392, 1393, 1395, 1396,
     1386, 1397, 1398, 1399, 1394, 1400, 1401, 1404, 1405, 1406,
     1407, 1402, 1408, 1381, 1409, 1410, 1382, 1387, 1388, 1389,
     1411, 1390, 1391, 1412, 1419, 1392, 1393, 1395, 1396, 1403,
     1397, 1398, 1399, 1394, 1400, 1401, 1404, 1405, 1406, 1407,
     1402, 1408, 1413, 1409, 1410, 1420, 1421, 1422, 1415, 1411,
     1416, 1423, 1412, 1419, 1424, 1425, 1426, 1414, 1403, 1427,
     1417, 1428, 1429, 1430, 1433, 1431, 1434, 1435, 1437, 1438,

     1418, 1413, 1439, 1440, 1420, 1421, 1422, 1432, 1441, 1442,
     1423, 1443, 1444, 1424, 1425, 1426, 1414, 1445, 1427, 1417,
     1428, 1429, 1430, 1433, 1431, 1434, 1435, 1437, 1438, 1418,
     1446, 1439, 1440, 1447, 1448, 1449, 1432, 1441, 1442, 1450,
     1443, 1444, 1451, 1452, 1453, 1454, 1445, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1464, 1466, 1467, 1446,
     1468, 1469, 1447, 1448, 1449, 1465, 1470, 1471, 1450, 1472,
     1473, 1451, 1452, 1453, 1454, 1474, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1466, 1467, 1475, 1468,
     1469, 1476, 1477, 1478, 1479, 1470, 1471, 1480, 1472, 1473,

     1481, 1482, 1484, 1483, 1474, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1493, 1494, 1495, 1497, 1498, 1475, 1496, 1499,
     1476, 1477, 1478, 1479, 3615, 3615, 1480, 3615, 3615, 1481,
     1482, 1484, 1483, 1492, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1493, 1494, 1495, 1497, 1498, 3615, 1496, 1499, 1500,
     1500, 1500, 1500, 1500,  884,  884,  884,  884,  884, 3615,
     3615, 3615, 1492, 1501, 1501, 1501, 1501, 1501,  886,  886,
      886,  886,  886, 1502, 3615, 1502, 3615, 1503, 1503, 1503,
     1503, 1503,  887,  362, 1506,  363, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1507, 1508, 1509, 1510,

      365,  890,  890,  890,  890,  890, 1511, 1512, 1513, 1514,
     1516,  887, 1517, 1506, 1520, 1518, 1521, 1522, 1523, 1524,
     1525, 1526, 1528, 1527, 1529, 1507, 1508, 1509, 1510,  365,
     1519, 1530, 1534, 1535, 1536, 1511, 1512, 1513, 1514, 1516,
     1531, 1517, 1539, 1520, 1518, 1521, 1522, 1523, 1524, 1525,
     1526, 1528, 1527, 1529, 1532, 1533, 1540, 1541, 1542, 1519,
     1530, 1534, 1535, 1536, 1537, 1543, 1544, 1538, 1545, 1531,
     1546, 1539, 1547, 1548, 1549, 1551, 1552, 1553, 1554, 1555,
     1556, 1550, 1557, 1532, 1533, 1540, 1541, 1542, 1560, 1561,
     1562, 1563, 1564, 1537, 1543, 1544, 1538, 1545, 1558, 1546,

     1565, 1547, 1548, 1549, 1551, 1552, 1553, 1554, 1555, 1556,
     1550, 1557, 1566, 1567, 1568, 1569, 1559, 1560, 1561, 1562,
     1563, 1564, 1575, 1576, 1571, 1577, 1572, 1558, 1578, 1565,
     1570, 1579, 1580, 1581, 1582, 1583, 1573, 1584, 1585, 1586,
     1589, 1566, 1567, 1568, 1569, 1559, 1574, 1590, 1591, 1593,
     1594, 1575, 1576, 1595, 1577, 1596, 1597, 1578, 1587, 1570,
     1579, 1580, 1581, 1582, 1583, 1573, 1584, 1585, 1586, 1589,
     1588, 1598, 1599, 1600, 1601, 1574, 1590, 1591, 1593, 1594,
     1602, 1603, 1595, 1604, 1596, 1597, 1605, 1587, 1606, 1607,
     1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1588,

     1598, 1599, 1600, 1601, 1617, 1618, 1619, 1620, 1622, 1602,
     1603, 1623, 1604, 1624, 1625, 1605, 1621, 1606, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1626, 1627,
     1628, 1629, 1630, 1617, 1618, 1619, 1620, 1622, 1631, 1632,
     1623, 1633, 1624, 1625, 1634, 1635, 1636, 1637, 1638, 1640,
     1639, 1641, 1642, 1643, 1644, 1645, 3615, 1626, 1627, 1628,
     1629, 1630, 1646, 1647, 1649, 1650, 1653, 1631, 1632, 1654,
     1633, 1655, 3615, 1634, 1635, 1636, 1637, 1638, 1640, 1639,
     1641, 1642, 1643, 1644, 1645, 1648, 1651, 1664, 1665, 1666,
     1652, 1646, 1647, 1649, 1650, 1653, 3615, 1667, 1654, 1668,

     1655, 1656, 1656, 1656, 1656, 1656, 1039, 1039, 1039, 1039,
     1039, 3615, 1669, 3615, 1648, 1651, 1664, 1665, 1666, 1652,
     1040, 1040, 1040, 1040, 1040, 1657, 1667, 1657, 1668, 1658,
     1658, 1658, 1658, 1658, 1041, 1659, 1659, 1659, 1659, 1659,
      468, 1669,  469, 1660, 1660, 1660, 1660, 1660, 1661, 1661,
     1661, 1661, 1661, 1047, 1670, 3615, 1671,  471, 1045, 1045,
     1045, 1045, 1045, 1041, 1047, 1046, 1046, 1046, 1046, 1046,
     1662, 1662, 1662, 1662, 1662, 1672, 1663, 1663, 1663, 1663,
     1663, 1050,  581, 1670,  581, 1671,  471,  581, 1674, 1675,
     1676, 1678, 1679, 1680, 1681, 1682, 1683, 1686, 1684,  581,

     1685, 3615, 1687,  581, 1672, 1677, 1688, 1692, 1693, 1694,
     1697, 1698, 1695, 3615, 3615, 1696, 1699, 1674, 1675, 1676,
     1678, 1679, 1680, 1681, 1682, 1683, 1686, 1684, 1689, 1685,
      581, 1687, 1700, 1701, 1677, 1688, 1692, 1693, 1694, 1697,
     1698, 1695, 1690, 1691, 1696, 1699, 1702, 1703, 1704, 1705,
     1706, 1707, 1709, 1710, 1711, 1712, 1713, 1689, 1708, 1714,
     1715, 1700, 1701, 1718, 1719, 1720, 1721, 1722, 1716, 1723,
     1724, 1690, 1691, 1725, 1726, 1702, 1703, 1704, 1705, 1706,
     1707, 1709, 1710, 1711, 1712, 1713, 1717, 1708, 1714, 1715,
     1727, 1733, 1718, 1719, 1720, 1721, 1722, 1716, 1723, 1724,

     1734, 1735, 1725, 1726, 1729, 1728, 1730, 1736, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1717, 1731, 1744, 1747, 1727,
     1733, 1745, 1748, 1749, 1751, 1752, 1732, 1753, 1754, 1734,
     1735, 1755, 1756, 1746, 1728, 1757, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1758, 1731, 1744, 1747, 1759, 1760,
     1745, 1748, 1749, 1751, 1752, 1732, 1753, 1754, 1761, 1762,
     1755, 1756, 1746, 1763, 1757, 1764, 1765, 1766, 1767, 1768,
     1769, 1770, 1771, 1758, 1772, 1773, 1774, 1759, 1760, 1775,
     1776, 1777, 1778, 1780, 1781, 1782, 1783, 1761, 1762, 1784,
     1785, 1779, 1763, 1786, 1764, 1765, 1766, 1767, 1768, 1769,

     1770, 1771, 1787, 1772, 1773, 1774, 1788, 1789, 1775, 1776,
     1777, 1778, 1780, 1781, 1782, 1783, 1790, 1791, 1784, 1785,
     1792, 1793, 1786, 1794, 1795, 1796, 1798, 1797, 1799, 1800,
     1801, 1787, 1802, 1803, 1807, 1788, 1789, 1804, 1805, 1808,
     1809, 1811, 1812, 1813, 1810, 1790, 1791, 1814, 1815, 1792,
     1793, 1816, 1794, 1795, 1796, 1798, 1797, 1799, 1800, 1801,
     1806, 1802, 1803, 1807, 1817, 1818, 1804, 1805, 1808, 1809,
     1811, 1812, 1813, 1810, 1819, 1820, 1814, 1815, 1821, 1822,
     1816, 1823, 1824, 3615, 1827, 1825, 1828, 1829, 1830, 1806,
     1831, 1832, 1833, 1817, 1818, 1834, 1835, 1836, 1837, 1838,

     1842, 1843, 1844, 1819, 1820, 3615, 1845, 1821, 1822, 1846,
     1823, 1824, 1826, 1827, 1825, 1828, 1829, 1830, 1839, 1831,
     1832, 1833, 1847, 1848, 1834, 1835, 1836, 1837, 1838, 1842,
     1843, 1844, 1849, 1850, 1840, 1845, 1841, 1851, 1846, 1852,
     1853, 1854, 1855, 1856, 1857, 1858, 1859, 1839, 1860, 1861,
     1862, 1847, 1848, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
     1870, 1849, 1850, 1840, 1875, 1841, 1851, 1877, 1852, 1853,
     1854, 1855, 1856, 1857, 1858, 1859, 1878, 1860, 1861, 1862,
     1873, 1879, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
     1880, 1874, 1881, 1875, 1882, 1883, 1877, 1884, 1885, 1886,

     1887, 1888, 1890, 1891, 1892, 1878, 1893, 1894, 1895, 1873,
     1879, 1889, 1896, 1897, 1898, 1899, 1900, 1903, 1901, 1880,
     1874, 1881, 1902, 1882, 1883, 1904, 1884, 1885, 1886, 1887,
     1888, 1890, 1891, 1892, 1905, 1893, 1894, 1895, 1906, 1907,
     1889, 1896, 1897, 1898, 1899, 1900, 1903, 1901, 1908, 1909,
     1910, 1902, 1911, 1912, 1904, 1913, 1914, 1915, 1916, 1917,
     1918, 1919, 1920, 1905, 1921, 1924, 1922, 1906, 1907, 1923,
     1925, 1926, 1927, 1928, 1929, 1930, 1931, 1908, 1909, 1910,
     1932, 1911, 1912, 1933, 1913, 1914, 1915, 1916, 1917, 1918,
     1919, 1920, 1934, 1921, 1924, 1922, 1935, 1936, 1923, 1925,

     1926, 1927, 1928, 1929, 1930, 1931, 1937, 1938, 1939, 1932,
     1940, 1941, 1933, 1349, 1349, 1349, 1349, 1349, 1942, 1943,
     1944, 1934, 1945, 1946, 1947, 1935, 1936, 1349, 1349, 1349,
     1349, 1349, 1948, 1949, 1950, 1937, 1938, 1939, 1951, 1940,
     1941, 1953, 1954, 1955, 1956, 1957, 1958, 1942, 1943, 1944,
     1959, 1945, 1946, 1947, 1960, 1961, 1962, 1963, 1964, 1968,
     1965, 1948, 1949, 1950, 1969, 1952, 1970, 1951, 1971, 1972,
     1953, 1954, 1955, 1956, 1957, 1958, 1966, 1973, 1967, 1959,
     1974, 1975, 1976, 1960, 1961, 1962, 1963, 1964, 1968, 1965,
     1977, 1978, 1979, 1969, 1980, 1970, 1981, 1971, 1972, 1982,

     1983, 1984, 1985, 1986, 1987, 1966, 1973, 1967, 1988, 1974,
     1975, 1976, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1977,
     1978, 1979, 1996, 1980, 1999, 1981, 2001, 2003, 1982, 1983,
     1984, 1985, 1986, 1987, 2004, 2000, 2005, 1988, 2006, 2007,
     2008, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 2009, 2010,
     2011, 1996, 2012, 1999, 2013, 2001, 2003, 2016, 2017, 2018,
     2014, 2019, 2020, 2004, 2000, 2005, 2021, 2006, 2007, 2008,
     2015, 2022, 2023, 2024, 2025, 2026, 2027, 2009, 2010, 2011,
     2028, 2012, 2029, 2013, 2030, 2031, 2016, 2017, 2018, 2014,
     2019, 2020, 2032, 2033, 2034, 2021, 2035, 2036, 2037, 2015,

     2022, 2023, 2024, 2025, 2026, 2027, 2038, 2039, 2040, 2028,
     2041, 2029, 2042, 2030, 2031, 2043, 2044, 2045, 2046, 2047,
     2050, 2032, 2033, 2034, 2051, 2035, 2036, 2037, 2048, 2052,
     2053, 2049, 2054, 2055, 2056, 2038, 2039, 2040, 2057, 2041,
     2058, 2042, 2059, 2060, 2043, 2044, 2045, 2046, 2047, 2050,
     2061, 2062, 2063, 2051, 2064, 2065, 3615, 2048, 2052, 2053,
     2049, 2054, 2055, 2056, 3615, 3615, 3615, 2057, 3615, 2058,
     3615, 2059, 2060, 1500, 1500, 1500, 1500, 1500, 3615, 2061,
     2062, 2063, 2068, 2064, 2065, 2066, 2066, 2066, 2066, 2066,
     2067, 2067, 2067, 2067, 2067, 1503, 1503, 1503, 1503, 1503,

      363, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 2068, 2069, 2070, 2071,  365, 2072, 2073, 2074, 2075,
     2076, 2077, 2078, 3615, 2081, 2079, 2082, 2083, 2084, 2085,
     2086, 2087, 2088, 2089, 2090, 2091, 2092, 3615, 2096, 2097,
     2098, 2069, 2070, 2071,  365, 2072, 2073, 2074, 2075, 2076,
     2077, 2078, 2080, 2081, 2079, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2096, 2097, 2098,
     2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2094, 2111, 2095, 2112, 2113, 2114, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2093, 2122, 2123, 2124, 2099,

     2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
     2110, 2094, 2111, 2095, 2112, 2113, 2114, 2115, 2116, 2117,
     2118, 2119, 2120, 2121, 2127, 2122, 2123, 2124, 2129, 2131,
     2132, 2133, 2134, 2135, 2136, 2128, 2137, 2138, 2139, 2140,
     2141, 2142, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
     2152, 2143, 2153, 2127, 2154, 2157, 2158, 2129, 2131, 2132,
     2133, 2134, 2135, 2136, 2128, 2137, 2138, 2139, 2140, 2141,
     2142, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2143, 2153, 2155, 2154, 2157, 2158, 2156, 2159, 2160, 2161,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,

     2172, 2173, 2174, 2175, 2176, 2178, 2179, 2177, 2180, 2181,
     2182, 2155, 2183, 2184, 2185, 2156, 2159, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2174, 2175, 2176, 2178, 2179, 2177, 2180, 2181, 2182,
     2186, 2183, 2184, 2185, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 1656, 1656, 1656, 1656, 1656, 2194, 2194, 2194, 2194,
     2194, 1658, 1658, 1658, 1658, 1658, 3615, 3615, 3615, 2186,
     2198, 2199, 2200, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
     2195, 2195, 2195, 2195, 2195,  468, 2201, 2202, 1660, 1660,
     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1047, 2198,

     2199, 2200,  471, 2197, 2197, 2197, 2197, 2197, 2203, 2204,
     1046, 1046, 1046, 1046, 1046, 2201, 2202, 2205, 2206, 2207,
     2208, 3615, 2211, 2209, 2212, 2213, 2214, 2215, 2216, 2217,
     2218,  471, 2219, 2220, 2221, 2222, 2226, 2203, 2204, 2227,
     2228, 2229, 2230, 2231, 2232, 2233, 2205, 2206, 2207, 2208,
     2210, 2211, 2209, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
     2223, 2219, 2220, 2221, 2222, 2226, 2234, 2235, 2227, 2228,
     2229, 2230, 2231, 2232, 2233, 2236, 2224, 2237, 2225, 2238,
     2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2223,
     2248, 2249, 2250, 2251, 2252, 2234, 2235, 2253, 2254, 2259,

     3615, 2261, 2262, 2263, 2236, 2224, 2237, 2225, 2238, 2239,
     2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2257, 2248,
     2249, 2250, 2251, 2252, 2264, 2265, 2253, 2254, 2259, 2258,
     2261, 2262, 2263, 2266, 2267, 2268, 2269, 2270, 2271, 2272,
     2274, 2275, 2276, 2277, 2278, 2279, 2280, 2257, 2281, 2273,
     2282, 2283, 2284, 2264, 2265, 2285, 2287, 2288, 2258, 2286,
     2289, 2290, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2274,
     2275, 2276, 2277, 2278, 2279, 2280, 2291, 2281, 2273, 2282,
     2283, 2284, 2292, 2293, 2285, 2287, 2288, 2294, 2286, 2289,
     2290, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303,

     2304, 2305, 2308, 2306, 2309, 2291, 2307, 2310, 2311, 2312,
     2313, 2292, 2293, 2314, 2315, 2316, 2294, 2317, 2318, 2319,
     2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304,
     2305, 2308, 2306, 2309, 2320, 2307, 2310, 2311, 2312, 2313,
     2321, 2322, 2314, 2315, 2316, 2323, 2317, 2318, 2319, 2325,
     2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335,
     2336, 2337, 2338, 2320, 2339, 2340, 2341, 2342, 2343, 2321,
     2322, 2344, 2345, 2346, 2323, 2350, 2351, 2352, 2325, 2326,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,
     2337, 2338, 2353, 2339, 2340, 2341, 2342, 2343, 2347, 2354,

     2344, 2345, 2346, 2355, 2350, 2351, 2352, 2356, 2348, 2357,
     2349, 2358, 2359, 2360, 2362, 2363, 2364, 2365, 2366, 2367,
     2368, 2353, 2369, 2370, 2373, 2374, 2371, 2347, 2354, 2372,
     2375, 2376, 2355, 2377, 2378, 2379, 2356, 2348, 2357, 2349,
     2358, 2359, 2360, 2362, 2363, 2364, 2365, 2366, 2367, 2368,
     2380, 2369, 2370, 2373, 2374, 2371, 2381, 2383, 2372, 2375,
     2376, 2384, 2377, 2378, 2379, 2385, 2386, 2389, 2390, 2391,
     2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2380,
     2401, 2402, 2403, 2404, 2405, 2381, 2383, 2406, 2407, 2408,
     2384, 2409, 2410, 2411, 2385, 2386, 2389, 2390, 2391, 2392,

     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2412, 2401,
     2402, 2403, 2404, 2405, 2413, 2414, 2406, 2407, 2408, 2415,
     2409, 2410, 2411, 2416, 2417, 2418, 2419, 2420, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2430, 2412, 2431, 2432,
     2433, 2434, 2435, 2413, 2414, 2436, 2437, 2438, 2415, 2439,
     2440, 2441, 2416, 2417, 2418, 2419, 2420, 2422, 2423, 2424,
     2425, 2426, 2427, 2428, 2429, 2430, 2442, 2431, 2432, 2433,
     2434, 2435, 2443, 2444, 2436, 2437, 2438, 2447, 2439, 2440,
     2441, 2448, 2449, 2445, 2450, 2446, 2451, 2452, 2453, 2454,
     2455, 2456, 2457, 2459, 2460, 2442, 2461, 2462, 2463, 2464,

     2465, 2443, 2444, 2466, 2467, 2468, 2447, 2470, 2469, 2471,
     2448, 2449, 2445, 2450, 2446, 2451, 2452, 2453, 2454, 2455,
     2456, 2457, 2459, 2460, 2472, 2461, 2462, 2463, 2464, 2465,
     2473, 2474, 2466, 2467, 2468, 2475, 2470, 2469, 2471, 2476,
     2477, 2478, 2480, 2481, 2482, 2483, 2486, 2487, 2488, 2489,
     2490, 2491, 2492, 2472, 2493, 2494, 2495, 2496, 2497, 2473,
     2474, 2498, 2499, 2500, 2475, 2501, 2502, 2503, 2476, 2477,
     2478, 2480, 2481, 2482, 2483, 2486, 2487, 2488, 2489, 2490,
     2491, 2492, 2504, 2493, 2494, 2495, 2496, 2497, 2505, 2506,
     2498, 2499, 2500, 2507, 2501, 2502, 2503, 2508, 2509, 2510,

     2511, 2512, 2513, 2514, 2515, 2516, 2517, 2520, 2521, 2522,
     2523, 2504, 2067, 2067, 2067, 2067, 2067, 2505, 2506, 2524,
     2525, 2526, 2507, 2527, 2528, 2529, 2508, 2509, 2510, 2511,
     2512, 2513, 2514, 2515, 2516, 2517, 2520, 2521, 2522, 2523,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2524, 2525,
     2526, 2538, 2527, 2528, 2529, 2539, 2540, 2541, 2545, 2546,
     2547, 2548, 2549, 2550, 2551, 2552, 2553, 2542, 2554, 2530,
     2531, 2532, 2533, 2534, 2535, 2536, 2537, 2543, 2555, 2544,
     2538, 2557, 2558, 2559, 2539, 2540, 2541, 2545, 2546, 2547,
     2548, 2549, 2550, 2551, 2552, 2553, 2542, 2554, 2560, 2561,

     2562, 2563, 2564, 2565, 2568, 2569, 2543, 2555, 2544, 2570,
     2557, 2558, 2559, 2566, 2571, 2572, 2567, 2573, 2574, 2575,
     2576, 2578, 2579, 2580, 2581, 2584, 2585, 2560, 2561, 2562,
     2563, 2564, 2565, 2568, 2569, 2586, 2587, 2588, 2570, 2589,
     2590, 2591, 2566, 2571, 2572, 2567, 2573, 2574, 2575, 2576,
     2578, 2579, 2580, 2581, 2584, 2585, 2592, 2593, 2594, 2595,
     2596, 2597, 2598, 2599, 2586, 2587, 2588, 2600, 2589, 2590,
     2591, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2614, 2592, 2593, 2594, 2595, 2596,
     2597, 2598, 2599, 2615, 3615, 3615, 2600, 3615, 3615, 3615,

     2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
     2611, 2612, 2613, 2614, 2194, 2194, 2194, 2194, 2194, 2620,
     2621, 2622, 2615, 2617, 2617, 2617, 2617, 2617, 2618, 2618,
     2618, 2618, 2618, 2623, 2624, 2625, 2626, 2627, 2628, 2629,
     2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2620, 2621,
     2622, 2638, 2639, 2640, 2641, 2645, 2646, 2647, 3615, 2648,
     3615, 2649, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2635, 2636, 2637, 2642, 2650, 2651,
     2638, 2639, 2640, 2641, 2645, 2646, 2647, 2643, 2648, 2644,
     2649, 2652, 2653, 2654, 2655, 2657, 2658, 2659, 2660, 2661,

     2662, 2663, 2664, 2665, 2668, 2669, 2642, 2650, 2651, 2666,
     2670, 2671, 2667, 2672, 2673, 2674, 2643, 2675, 2644, 2676,
     2652, 2653, 2654, 2655, 2657, 2658, 2659, 2660, 2661, 2662,
     2663, 2664, 2665, 2668, 2669, 2678, 2679, 2680, 2666, 2670,
     2671, 2667, 2672, 2673, 2674, 2681, 2675, 2684, 2676, 2685,
     2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695,
     2696, 2697, 2698, 2699, 2678, 2679, 2680, 2700, 2701, 2702,
     2703, 2704, 2705, 2706, 2681, 2707, 2684, 2708, 2685, 2686,
     2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696,
     2697, 2698, 2699, 2709, 2710, 2711, 2700, 2701, 2702, 2703,

     2704, 2705, 2706, 2712, 2707, 2713, 2708, 2714, 2715, 2716,
     2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726,
     2727, 2728, 2709, 2710, 2711, 2729, 2730, 2731, 2732, 2733,
     2734, 2735, 2712, 2736, 2713, 2737, 2714, 2715, 2716, 2717,
     2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,
     2728, 2738, 2739, 2740, 2729, 2730, 2731, 2732, 2733, 2734,
     2735, 2741, 2736, 2742, 2737, 2743, 2744, 2745, 2746, 2747,
     2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757,
     2738, 2739, 2740, 2758, 2759, 2760, 2761, 2762, 2763, 2764,
     2741, 2765, 2742, 2766, 2743, 2744, 2745, 2746, 2747, 2748,

     2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2767,
     2768, 2769, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2770,
     2765, 2771, 2766, 2772, 2773, 2774, 2775, 2776, 2777, 2778,
     2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2767, 2768,
     2769, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2770, 2794,
     2771, 2795, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2781, 2782, 2783, 2784, 2785, 2786, 2796, 2797, 2798,
     2787, 2788, 2789, 2790, 2791, 2792, 2793, 2799, 2794, 2800,
     2795, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2813, 2814, 2815, 2796, 2797, 2798, 2816,

     2817, 2818, 2819, 2820, 2821, 2822, 2799, 2823, 2800, 2824,
     2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810,
     2811, 2812, 2813, 2814, 2815, 2825, 2826, 2827, 2816, 2817,
     2818, 2819, 2820, 2821, 2822, 2828, 2823, 2829, 2824, 2830,
     2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840,
     2841, 2842, 2843, 2844, 2825, 2826, 2827, 2845, 2846, 2847,
     2848, 2849, 2850, 2851, 2828, 3615, 2829, 3615, 2830, 2831,
     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841,
     2842, 2843, 2844, 2853, 2854, 2855, 2845, 2846, 2847, 2848,
     2849, 2850, 2851, 2852, 2852, 2852, 2852, 2852, 2856, 2857,

     2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867,
     2868, 2869, 2853, 2854, 2855, 2870, 2871, 2872, 2873, 2874,
     2875, 2876, 2877, 2878, 2879, 2880, 2881, 2856, 2857, 2858,
     2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868,
     2869, 2882, 2883, 2884, 2870, 2871, 2872, 2873, 2874, 2875,
     2876, 2877, 2878, 2879, 2880, 2881, 2885, 2886, 2887, 2888,
     2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898,
     2882, 2883, 2884, 2899, 2900, 2901, 2902, 2903, 2904, 2905,
     2906, 2907, 2908, 2909, 2910, 2885, 2886, 2887, 2888, 2889,
     2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2911,

     2912, 2913, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906,
     2907, 2908, 2909, 2910, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2921, 2921, 2921, 2921, 2923, 2924, 2911, 2912,
     2913, 2617, 2617, 2617, 2617, 2617, 2922, 2922, 2922, 2922,
     2922, 2925, 2926, 2914, 2915, 2916, 2917, 2918, 2919, 2920,
     2927, 2928, 2929, 2930, 2931, 2923, 2924, 2932, 2933, 2934,
     2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944,
     2925, 2926, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2927,
     2928, 2929, 2930, 2931, 2952, 2953, 2932, 2933, 2934, 2935,
     2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2954,

     2955, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2956, 2957,
     2958, 2959, 2960, 2952, 2953, 2961, 2962, 2963, 2964, 2965,
     2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2954, 2955,
     2974, 2975, 2976, 2977, 2978, 2979, 2980, 2956, 2957, 2958,
     2959, 2960, 2981, 2982, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971, 2972, 2973, 2983, 2984, 2974,
     2975, 2976, 2977, 2978, 2979, 2980, 2985, 2986, 2987, 2988,
     2989, 2981, 2982, 2990, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2999, 3000, 3001, 3002, 3003, 2983, 2984, 3004, 3005,
     3006, 3007, 3008, 3009, 3010, 2985, 2986, 2987, 2988, 2989,

     3011, 3012, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,
     2999, 3000, 3001, 3002, 3003, 3013, 3014, 3004, 3005, 3006,
     3007, 3008, 3009, 3010, 3015, 3016, 3017, 3018, 3019, 3011,
     3012, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028,
     3029, 3030, 3031, 3032, 3013, 3014, 3033, 3034, 3035, 3036,
     3037, 3038, 3040, 3015, 3016, 3017, 3018, 3019, 3041, 3042,
     3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3031, 3032, 3043, 3044, 3033, 3034, 3035, 3036, 3037,
     3038, 3040, 3045, 3046, 3047, 3048, 3049, 3041, 3042, 3050,
     3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060,

     3061, 3062, 3043, 3044, 3063, 3064, 3065, 3066, 3067, 3068,
     3069, 3045, 3046, 3047, 3048, 3049, 3070, 3071, 3050, 3051,
     3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061,
     3062, 3072, 3073, 3063, 3064, 3065, 3066, 3067, 3068, 3069,
     2852, 2852, 2852, 2852, 2852, 3070, 3071, 3074, 3075, 3076,
     3077, 3078, 3079, 3081, 3082, 3083, 3084, 3085, 3086, 3087,
     3072, 3073, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095,
     3096, 3097, 3098, 3099, 3100, 3101, 3074, 3075, 3076, 3077,
     3078, 3079, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3102,
     3103, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096,

     3097, 3098, 3099, 3100, 3101, 3104, 3105, 3106, 3107, 3108,
     3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3102, 3103,
     2921, 2921, 2921, 2921, 2921, 2617, 2617, 2617, 2617, 2617,
     3117, 3118, 3119, 3120, 3104, 3105, 3106, 3107, 3108, 3109,
     3110, 3111, 3112, 3113, 3114, 3115, 3116, 3122, 3123, 3124,
     3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3117,
     3118, 3119, 3120, 3134, 3135, 3136, 3137, 3138, 3139, 3140,
     3141, 3142, 3143, 3144, 3145, 3146, 3122, 3123, 3124, 3125,
     3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3147, 3148,
     3149, 3150, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141,

     3142, 3143, 3144, 3145, 3146, 3151, 3152, 3153, 3154, 3155,
     3156, 3157, 3158, 3159, 3160, 3161, 3166, 3147, 3148, 3149,
     3150, 3167, 3168, 3169, 3170, 3171, 3172, 3162, 3173, 3163,
     3164, 3165, 3174, 3175, 3151, 3152, 3153, 3154, 3155, 3156,
     3157, 3158, 3159, 3160, 3161, 3166, 3176, 3177, 3178, 3179,
     3167, 3168, 3169, 3170, 3171, 3172, 3162, 3173, 3163, 3164,
     3165, 3174, 3175, 3180, 3181, 3182, 3184, 3185, 3186, 3183,
     3187, 3188, 3189, 3190, 3191, 3176, 3177, 3178, 3179, 3192,
     3193, 3194, 3195, 3196, 3203, 3204, 3205, 3206, 3615, 3207,
     3615, 3615, 3180, 3181, 3182, 3184, 3185, 3186, 3183, 3187,

     3188, 3189, 3190, 3191, 3197, 3198, 3208, 3209, 3192, 3193,
     3194, 3195, 3196, 3203, 3204, 3205, 3206, 3199, 3207, 3200,
     3201, 3202, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217,
     3218, 3221, 3222, 3197, 3198, 3208, 3209, 3219, 3223, 3224,
     3225, 3220, 3226, 3227, 3228, 3229, 3199, 3230, 3200, 3201,
     3202, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218,
     3221, 3222, 3231, 3232, 3233, 3615, 3219, 3223, 3224, 3225,
     3220, 3226, 3227, 3228, 3229, 3240, 3230, 3241, 3242, 3243,
     3244, 3234, 3235, 3245, 3246, 3247, 3248, 3249, 3250, 3251,
     3252, 3231, 3232, 3233, 3236, 3253, 3237, 3238, 3239, 3254,

     3255, 3256, 3258, 3259, 3240, 3257, 3241, 3242, 3243, 3244,
     3234, 3235, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252,
     3260, 3261, 3262, 3236, 3253, 3237, 3238, 3239, 3254, 3255,
     3256, 3258, 3259, 3263, 3257, 3264, 3265, 3266, 3267, 3268,
     3269, 3270, 3271, 3272, 3277, 3278, 3279, 3280, 3281, 3260,
     3261, 3262, 3282, 3283, 3284, 3273, 3285, 3274, 3275, 3276,
     3286, 3287, 3263, 3288, 3264, 3265, 3266, 3267, 3268, 3269,
     3270, 3271, 3272, 3277, 3278, 3279, 3280, 3281, 3289, 3290,
     3291, 3282, 3283, 3284, 3273, 3285, 3274, 3275, 3276, 3286,
     3287, 3292, 3288, 3293, 3295, 3296, 3297, 3294, 3298, 3299,

     3300, 3301, 3302, 3303, 3304, 3305, 3306, 3289, 3290, 3291,
     3307, 3309, 3310, 3311, 3308, 3312, 3313, 3314, 3315, 3316,
     3292, 3317, 3293, 3295, 3296, 3297, 3294, 3298, 3299, 3300,
     3301, 3302, 3303, 3304, 3305, 3306, 3318, 3319, 3320, 3307,
     3309, 3310, 3311, 3308, 3312, 3313, 3314, 3315, 3316, 3321,
     3317, 3323, 3322, 3324, 3325, 3326, 3327, 3329, 3330, 3331,
     3328, 3332, 3333, 3334, 3335, 3318, 3319, 3320, 3336, 3337,
     3338, 3339, 3340, 3341, 3343, 3344, 3342, 3345, 3321, 3346,
     3323, 3322, 3324, 3325, 3326, 3327, 3329, 3330, 3331, 3328,
     3332, 3333, 3334, 3335, 3349, 3350, 3351, 3336, 3337, 3338,

     3339, 3340, 3341, 3343, 3344, 3342, 3345, 3347, 3346, 3352,
     3353, 3348, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361,
     3363, 3364, 3362, 3349, 3350, 3351, 3365, 3366, 3367, 3369,
     3370, 3371, 3368, 3372, 3373, 3374, 3347, 3375, 3352, 3353,
     3348, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3363,
     3364, 3362, 3376, 3377, 3378, 3365, 3366, 3367, 3369, 3370,
     3371, 3368, 3372, 3373, 3374, 3379, 3375, 3380, 3381, 3383,
     3384, 3382, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392,
     3393, 3376, 3377, 3378, 3394, 3395, 3396, 3397, 3398, 3399,
     3400, 3401, 3402, 3403, 3379, 3404, 3380, 3381, 3383, 3384,

     3382, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393,
     3405, 3406, 3407, 3394, 3395, 3396, 3397, 3398, 3399, 3400,
     3401, 3402, 3403, 3408, 3404, 3409, 3410, 3411, 3412, 3413,
     3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3405,
     3406, 3407, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430,
     3431, 3432, 3408, 3433, 3409, 3410, 3411, 3412, 3413, 3414,
     3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3434, 3435,
     3436, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431,
     3432, 3437, 3433, 3438, 3439, 3440, 3441, 3442, 3443, 3444,
     3445, 3446, 3447, 3448, 3449, 3450, 3451, 3434, 3435, 3436,

     3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461,
     3437, 3462, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445,
     3446, 3447, 3448, 3449, 3450, 3451, 3463, 3464, 3465, 3452,
     3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3466,
     3462, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475,
     3476, 3477, 3478, 3479, 3480, 3463, 3464, 3465, 3481, 3482,
     3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3466, 3491,
     3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476,
     3477, 3478, 3479, 3480, 3492, 3493, 3494, 3481, 3482, 3483,
     3484, 3485, 3486, 3487, 3488, 3489, 3490, 3495, 3491, 3496,

     3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506,
     3507, 3508, 3509, 3492, 3493, 3494, 3510, 3511, 3512, 3513,
     3514, 3515, 3516, 3517, 3518, 3519, 3495, 3520, 3496, 3497,
     3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507,
     3508, 3509, 3521, 3522, 3523, 3510, 3511, 3512, 3513, 3514,
     3515, 3516, 3517, 3518, 3519, 3524, 3520, 3525, 3526, 3527,
     3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537,
     3538, 3521, 3522, 3523, 3539, 3540, 3541, 3542, 3544, 3546,
     3548, 3550, 3551, 3552, 3524, 3553, 3525, 3526, 3527, 3528,
     3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538,

     3554, 3555, 3556, 3539, 3540, 3541, 3542, 3544, 3546, 3548,
     3550, 3551, 3552, 3557, 3553, 3558, 3559, 3560, 3561, 3562,
     3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3554,
     3555, 3556, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
     3580, 3581, 3557, 3582, 3558, 3559, 3560, 3561, 3562, 3563,
     3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3583, 3584,
     3585, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580,
     3581, 3586, 3582, 3587, 3588, 3589, 3590, 3595, 3596, 3597,
     3598, 3599, 3600, 3601, 3602, 3603, 3604, 3583, 3584, 3585,
     3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614,

     3586, 3615, 3587, 3588, 3589, 3590, 3595, 3596, 3597, 3598,
     3599, 3600, 3601, 3602, 3603, 3604, 3615, 3615, 3615, 3605,
     3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614,  259,
     3615,  259,  359, 3615,  359,  366,  366,  366,  366,  366,
      472, 3615,  472,  472,  472,  472,  472,  472,  474, 3615,
     3615,  474,  474,  474, 3615,  474,  581,  581,  581,  581,
      581,  581,  581,  581, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 2196, 3615, 2196, 2196, 2196, 2196, 2196, 2196,
       13, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615
    } ;

static yyconst flex_int16_t yy_chk[7864] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7, 3590,    7,    7,
        7,    7,    7,    7,    8, 3589,    8,    8,    8,    8,
        8,    8,    9, 3588,    9,    9,    9,    9,    9,    9,
       10, 3587,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       15, 3541,   15,   21,   21,   24, 3538,   33,   34,   40,
       31,   24,   30,   24, 3535,   26,   47,   24,   24,   24,
       24,   24,   26,   25,   31,   30,   26,   25,   61,   26,
       25, 3532,   26,   25,   24,   26,   33,   34,   40,   31,

       24,   30,   24,   25,   26,   47,   24,   24,   24,   24,
       24,   26,   25,   31,   30,   26,   25,   61,   26,   25,
       36,   26,   25,   27,   26,   28,   62,   27,   36,   68,
       76,   27,   25,   92,   36,   32,   28,   27,   28,   44,
       27,   44,   32,   28,   44, 3269,   28,   32,   28,   36,
     3232,  112,   27,  112,   28,   62,   27,   36,   68,   76,
       27,   58,   92,   36,   32,   28,   27,   28,   44,   27,
       44,   32,   28,   44,   58,   28,   32,   28,   29,   35,
       41, 3195,   29,   35,   41, 3158,   29,   35,   41,   29,
       58, 2935,   29,   35,   41,   29,   59,   45,   29, 2865,

       37,   93,   37,   58,   37,   45,   99,   29,   35,   41,
       59,   29,   35,   41,   37,   29,   35,   41,   29,   37,
       37,   29,   35,   41,   29,   59,   45,   29,   73,   37,
       93,   37,  107,   37,   45,   99,   73, 2796,   39,   59,
      119,  119,  148,   37,  148, 1899, 1899,  131,   37,   37,
       38,   38,   39,  132,   38,   39, 2728,   73,   39,  138,
       38,  107,   38, 2276,   38,   73,   38,   39,   38,   38,
       38,   50,   50,   50,   50,   50,  131, 2025, 2025,   38,
       38,   39,  132,   38,   39,   50, 2242,   39,  138,   38,
       42,   38,   42,   38,   60,   38,   43,   38,   38,   38,

       42,   60,   42,   43,   43,  145,   60,   42,   42,  154,
       43,  157,   46,   43,   50,   46,   46, 2200,  475,   42,
      475,   42,   46,   60, 2066,   43, 2066, 2153, 2153,   42,
       60,   42,   43,   43,  145,   60,   42,   42,  154,   43,
      157,   46,   43, 2146,   46,   46,   81,   81,   81,   81,
       81,   46,   51,   51,   51,   51,   51,   51, 2112,   53,
       81, 2070,  158,   53,   89, 2018,   53,   51, 1984,   53,
       72, 1942,   72,   90, 2195,   72, 2195,   89, 1892,   53,
      110,  110,  110,  110,  110, 1858,   63,   90,   53,   81,
       63,  158,   53,   89,   63,   53,   51,   52,   53,   72,

       63,   72,   90,   52,   72,   52,   89,   54,   53,   52,
       52,   52,   52,   52,   54,   63,   90, 1816,   54,   63,
      159,   54, 1735,   63,   54,  160,   52,   54, 1730,   63,
     2283, 2283,   52, 1729,   52, 1577,   54,   64,   52,   52,
       52,   52,   52,   54,   55,   64,   56,   54,   55,  159,
       54,   64,   55,   54,  160,  104,   54,   56,   55,   56,
      103,   55,  103,  104,   56,  103,   64,   56, 1572,   56,
     1571,  161, 1421,   55,   64,   56, 1416,   55, 1415, 1269,
       64,   55, 1264, 1263,  104, 1136,   56,   55,   56,  103,
       55,  103,  104,   56,  103, 1065,   56,   67,   56,   57,

      161,   69,  164,   57,   65,   69,   65,   57,   65,   69,
       57,   67,  143,   57,   67,   69,   57,   67,   65,   57,
      143,  976,  165,   65,   65,  905,   67,  167,   57,  821,
       69,  164,   57,   65,   69,   65,   57,   65,   69,   57,
       67,  143,   57,   67,   69,   57,   67,   65,   57,  143,
       91,  165,   65,   65,   66,   66,  167,   91,   66,   70,
      169,   70,   91,  168,   66,  128,   66,  168,   66,   70,
       66,   70,   66,   66,   66,  750,   70,   70,  128,   91,
      668,  597,  581,   66,   66,  150,   91,   66,   70,  169,
       70,   91,  168,   66,  128,   66,  168,   66,   70,   66,

       70,   66,   66,   66,   71,   70,   70,  128,  147,   95,
       74,   71,   71,   74,   74,  121,  129,   95,   71,  172,
       74,   71,  117,   95,  362,  362,  362,  362,  362,  114,
      129,   48,  142,   71,  142,   23,  155,  142,   95,   74,
       71,   71,   74,   74,  155,  129,   95,   71,  172,   74,
       71,   82,   95,   82,   82,   82,   82,   82,   82,  129,
       84,  142,   20,  142,   84,  155,  142,   84,   82,   17,
       84,  156,   13,  155,  108,  108,  108,  108,  108,    0,
       84,  469,  469,  469,  469,  469,    0,   94,  108,   84,
        0,   94,  156,   84,  175,   94,   84,   82,   83,   84,

      156,   94,  173,    0,   83,  176,   83,  173,   85,   84,
       83,   83,   83,   83,   83,   85,   94,  108,    0,   85,
       94,  156,   85,  175,   94,   85,  163,   83,   85,    0,
       94,  173,  163,   83,  176,   83,  173,   85,  177,   83,
       83,   83,   83,   83,   85,   86,  171,   87,   85,   86,
      178,   85,   98,   86,   85,  163,  171,   85,   87,   86,
       87,  163,   86,  179,  180,   87,   98,  177,   87,   98,
       87,    0,   98,    0,   86,  171,   87,    0,   86,  178,
        0,   98,   86,  181,  182,  171,  184,   87,   86,   87,
        0,   86,  179,  180,   87,   98,    0,   87,   98,   87,

       88,   98,  100,  185,   88,   96,  100,   96,   88,   96,
      100,   88,  181,  182,   88,  184,  100,   88,  105,   96,
       88,  105,  105,  186,   96,   96,    0,    0,  105,   88,
        0,  100,  185,   88,   96,  100,   96,   88,   96,  100,
       88,    0,    0,   88,    0,  100,   88,  105,   96,   88,
      105,  105,  186,   96,   96,   97,   97,  105,  187,   97,
      101,  189,  101,  190,  191,   97,  192,   97,  193,   97,
      101,   97,  101,   97,   97,   97,    0,  101,  101,  194,
      195,    0,  198,    0,   97,   97,  199,  187,   97,  101,
      189,  101,  190,  191,   97,  192,   97,  193,   97,  101,

       97,  101,   97,   97,   97,  102,  101,  101,  194,  195,
      123,  198,  102,  102,  123,  199,  202,  123,  202,  102,
      123,  109,  102,  109,  109,  109,  109,  109,  109,    0,
      123,    0,  201,    0,  102,    0,    0,  201,  109,  123,
        0,  102,  102,  123,    0,  202,  123,  202,  102,  123,
      130,  102,    0,    0,    0,    0,  125,  130,  124,  123,
      125,  201,  130,  204,  125,  124,  201,  109,  122,  124,
      125,  205,  124,  125,  122,  124,  122,    0,  124,  130,
      122,  122,  122,  122,  122,  125,  130,  124,    0,  125,
        0,  130,  204,  125,  124,    0,    0,  122,  124,  125,

      205,  124,  125,  122,  124,  122,  126,  124,    0,  122,
      122,  122,  122,  122,  133,  196,    0,  126,  133,  126,
      196,  196,  133,  134,  126,  137,  206,  126,  133,  126,
        0,  134,    0,  207,    0,  126,    0,  134,    0,  137,
        0,    0,  137,  133,  196,  137,  126,  133,  126,  196,
      196,  133,  134,  126,  137,  206,  126,  133,  126,  127,
      134,  139,  207,  127,  213,  139,  134,  127,  137,  139,
      127,  137,    0,  127,  137,  139,  127,  162,  162,  127,
      188,  135,  214,  135,  210,  135,  188,  210,  127,  188,
      139,  162,  127,  213,  139,  135,  127,    0,  139,  127,

      135,  135,  127,    0,  139,  127,  162,  162,  127,  188,
      135,  214,  135,  210,  135,  188,  210,    0,  188,    0,
      162,    0,    0,  144,  135,    0,  144,  144,  200,  135,
      135,  136,  136,  144,  215,  136,  140,  216,  140,  200,
      200,  136,  217,  136,    0,  136,  140,  136,  140,  136,
      136,  136,  144,  140,  140,  144,  144,  200,    0,    0,
      136,  136,  144,  215,  136,  140,  216,  140,  200,  200,
      136,  217,  136,  170,  136,  140,  136,  140,  136,  136,
      136,  141,  140,  140,  170,  170,  170,  174,  141,  141,
      174,  183,    0,  170,  218,  141,  174,  183,  141,  219,

      208,  203,  170,  174,  208,  209,  209,  220,  183,    0,
      141,  221,  203,  170,  170,  170,  174,  141,  141,  174,
      183,  203,  170,  218,  141,  174,  183,  141,  219,  208,
      203,  222,  174,  208,  209,  209,  220,  183,  211,  211,
      221,  203,  212,  212,  223,  224,  226,  225,  227,  228,
      203,  225,  230,    0,  231,  224,  232,  225,    0,  234,
      222,  229,  235,    0,  238,  231,  229,  211,  211,  239,
        0,  212,  212,  223,  224,  226,  225,  227,  228,  229,
      225,  230,  229,  231,  224,  232,  225,  233,  234,  236,
      229,  235,  237,  238,  231,  229,  233,  240,  239,  242,

      244,  245,  247,  237,  233,  240,  236,  242,  229,  245,
      248,  229,  244,  243,  249,  250,  233,  246,  236,  242,
      243,  237,  243,  246,  251,  233,  240,  252,  242,  244,
      245,  247,  237,  233,  240,  236,  242,    0,  245,  248,
        0,  244,  243,  249,  250,    0,  246,    0,  242,  243,
        0,  243,  246,  251,    0,  260,  252,  254,  254,  254,
      254,  254,  255,    0,  255,  263,  255,  255,  255,  255,
      255,  254,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  257,  257,  258,  260,  258,  256,  258,  258,  258,
      258,  258,  257,  261,  263,  262,  264,  265,  266,  267,

      254,  261,  269,  268,  268,  270,  271,  273,  269,  274,
      275,    0,  278,  274,  281,  256,  262,  268,    0,  277,
        0,  257,  261,    0,  262,  264,  265,  266,  267,  277,
      261,  269,  268,  268,  270,  271,  273,  269,  274,  275,
      276,  278,  274,  281,  279,  262,  268,  280,  277,  279,
      280,  276,  276,  276,  282,  283,  280,  284,  277,  285,
      276,  286,  287,  280,  288,    0,  290,  291,  292,  276,
      293,    0,  295,  279,  296,    0,  280,  297,  279,  280,
      276,  276,  276,  282,  283,  280,  284,  298,  285,  276,
      286,  287,  280,  288,  289,  290,  291,  292,  294,  293,

      289,  295,  299,  296,  294,  300,  297,  294,  301,  302,
      304,  289,  305,  306,  302,  302,  298,  307,  308,  310,
      308,  311,  307,  289,  306,  306,  312,  294,  313,  289,
        0,  299,  316,  294,  300,  316,  294,  301,  302,  304,
      289,  305,  306,  302,  302,  309,  307,  308,  310,  308,
      311,  307,  319,  306,  306,  312,  309,  313,  314,  315,
      315,  316,  314,  320,  316,  309,  317,  317,  318,  318,
      321,  322,  323,  324,  309,  325,  326,  327,  328,  329,
      330,  319,  332,  333,  334,  309,  336,  314,  315,  315,
      330,  314,  320,  338,  309,  317,  317,  318,  318,  321,

      322,  323,  324,  340,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  331,  336,  335,  337,  339,  330,
      331,  335,  338,  341,  342,  343,  344,  339,  337,  345,
      346,    0,  340,  353,  335,  339,  343,  335,  346,  331,
      348,  342,    0,  331,    0,  335,  337,  339,  348,  331,
      335,    0,  341,  342,  343,  344,  339,  337,  345,  346,
      348,  350,  353,  335,  339,  343,  335,  346,  351,  348,
      342,  349,  354,  350,  355,  352,  351,  348,  349,  356,
      349,  352,  357,  358,  360,  360,  360,  360,  360,  348,
      350,    0,  363,  363,  363,  363,  363,  351,  360,    0,

      349,  354,  350,  355,  352,  351,  363,  349,  356,  349,
      352,  357,  358,  361,    0,  361,  367,  361,  361,  361,
      361,  361,  370,    0,  371,  369,  364,  360,  364,  364,
      364,  364,  364,  364,  365,  363,  365,  372,  365,  365,
      365,  365,  365,  364,  368,  367,  369,  373,  374,  375,
      375,  370,  368,  371,  369,  376,  377,  378,  380,  382,
      381,  376,  385,  375,  381,    0,  372,    0,    0,    0,
      384,  388,  364,  368,    0,  369,  373,  374,  375,  375,
      384,  368,  389,  383,  376,  377,  378,  380,  382,  381,
      376,  385,  375,  381,  383,  383,  383,  386,  387,  384,

      388,  387,  386,  383,  390,  391,  392,  387,  393,  384,
      394,  389,  383,  395,  387,    0,  397,  398,  399,  400,
      402,    0,  403,  383,  383,  383,  386,  387,  404,  405,
      387,  386,  383,  390,  391,  392,  387,  393,  396,  394,
      406,  407,  395,  387,  396,  397,  398,  399,  400,  402,
      401,  403,  408,  411,  412,  396,  401,  404,  405,  401,
      409,  417,  415,  413,  415,  409,  409,  396,    0,  406,
      407,  414,  418,  396,  413,  413,  414,    0,  419,  401,
      420,  408,  411,  412,  396,  401,  416,    0,  401,  409,
      417,  415,  413,  415,  409,  409,  423,  416,  421,  423,

      414,  418,  421,  413,  413,  414,  416,  419,  426,  420,
      422,  422,  424,  424,  427,  416,  425,  425,  428,  429,
      430,  431,  432,  433,  434,  423,  416,  421,  423,  435,
      436,  421,  439,  440,  437,  416,  441,  426,  443,  422,
      422,  424,  424,  427,  437,  425,  425,  428,  429,  430,
      431,  432,  433,  434,  445,  446,  438,  444,  435,  436,
      438,  439,  440,  437,  446,  441,  438,  443,  444,  442,
      447,  448,  446,  437,  442,  449,  451,  450,  452,    0,
        0,    0,  460,  445,  446,  438,  444,  442,  450,  438,
      442,    0,  449,  446,  453,  438,  457,  444,  442,  447,

      448,  446,  453,  442,  449,  451,  450,  452,  457,  459,
      455,  460,  461,  456,  462,  459,  442,  450,  455,  442,
      456,  449,  456,  453,  458,  457,  463,  464,  465,  481,
      455,  453,  458,    0,    0,    0,    0,  457,  459,  455,
        0,  461,  456,  462,  459,    0,    0,  455,    0,  456,
        0,  456,    0,  458,  484,  463,  464,  465,  481,  455,
        0,  458,  466,  466,  466,  466,  466,  467,    0,  467,
        0,  467,  467,  467,  467,  467,  466,  468,  468,  468,
      468,  468,  470,  484,  470,  470,  470,  470,  470,  470,
      471,  468,  471,    0,  471,  471,  471,  471,  471,  470,

      472,  472,  472,  472,  472,  466,  483,  482,  485,  473,
      486,  477,  477,  487,  477,  482,  488,  477,  489,  489,
      468,  473,  473,  473,  473,  473,  491,  483,  470,  477,
      492,    0,  489,  477,  490,  483,  482,  485,  494,  486,
      490,  496,  487,  499,  482,  488,  495,  489,  489,  500,
      495,  502,  498,  497,  500,  491,  483,  503,  504,  492,
      477,  489,  498,  490,  497,  497,  497,  494,  501,  490,
      496,  501,  499,  497,  505,  495,  506,  501,  500,  495,
      502,  498,  497,  500,  501,  507,  503,  504,  508,  509,
      510,  498,  511,  497,  497,  497,  510,  501,  512,  513,

      501,  514,  497,  505,  516,  506,  501,  510,  517,  518,
      519,  520,  521,  501,  507,  522,  525,  508,  509,  510,
      515,  511,  526,  527,  531,  510,  515,  512,  513,  515,
      514,    0,  532,  516,  527,  527,  510,  517,  518,  519,
      520,  521,  523,  533,  522,  525,  530,  523,  523,  515,
      534,  526,  527,  531,  528,  515,    0,  530,  515,  528,
      529,  532,  529,  527,  527,  535,  530,  536,  536,  535,
      537,  523,  533,  537,  540,  530,  523,  523,  541,  534,
      538,  538,  542,  528,  539,  539,  530,  543,  528,  529,
      544,  529,  545,  546,  535,  530,  536,  536,  535,  537,

      547,  548,  537,  540,  549,  550,  553,  541,  551,  538,
      538,  542,  554,  539,  539,  555,  543,  557,  551,  544,
        0,  545,  546,    0,  559,  561,  562,  565,  552,  547,
      548,  556,  552,  549,  550,  553,  556,  551,  552,  558,
        0,  554,  560,  566,  555,  563,  557,  551,  574,  556,
      558,  560,  556,  559,  561,  562,  565,  552,  564,  560,
      556,  552,  563,    0,  575,  556,    0,  552,  558,  564,
      571,  560,  566,  576,  563,  567,  569,  574,  556,  558,
      560,  556,  571,  567,  569,  570,  577,  564,  560,  572,
      578,  563,  570,  575,  570,  573,  569,  572,  564,  571,

      579,  573,  576,  583,  567,  569,  585,  588,  590,  591,
      593,  571,  567,  569,  570,  577,  594,  595,  572,  578,
      596,  570,  598,  570,  573,  569,  572,  599,  600,  579,
      573,  601,  583,  602,  603,  585,  588,  590,  591,  593,
      604,  605,  606,  600,  608,  594,  595,  609,  607,  596,
      607,  598,  610,  611,  612,  615,  599,  600,  613,  613,
      601,  614,  602,  603,  614,  616,  617,  611,  611,  604,
      605,  606,  600,  608,  618,  619,  609,  607,  620,  607,
      621,  610,  611,  612,  615,  622,  624,  613,  613,  625,
      614,  626,  627,  614,  616,  617,  611,  611,  626,  628,

      629,  630,  631,  618,  619,  632,  633,  620,  634,  621,
      635,  636,  637,  638,  622,  624,  639,  640,  625,  641,
      626,  627,  642,  643,  646,  649,  634,  626,  628,  629,
      630,  631,  644,  650,  632,  633,  651,  634,  652,  635,
      636,  637,  638,  653,  654,  639,  640,  644,  641,    0,
      655,  642,  643,  646,  649,  634,  645,  656,  645,  657,
      659,  644,  650,  660,  662,  651,  663,  652,  645,  661,
      665,  669,  653,  654,  670,  671,  644,  672,  645,  655,
      673,  661,  674,  676,  677,  678,  656,  679,  657,  659,
      680,  681,  660,  662,  682,  663,  683,  645,  661,  665,

      669,  684,  685,  670,  671,  686,  672,  645,  687,  673,
      661,  674,  676,  677,  678,  688,  679,  689,  690,  680,
      681,  691,  692,  682,  693,  683,  694,  695,  696,  697,
      684,  685,  698,  699,  686,  700,  702,  687,  697,  703,
      704,  705,  706,  708,  688,  709,  689,  690,  710,  711,
      691,  692,  712,  693,  713,  694,  695,  696,  697,  714,
      715,  698,  699,  717,  700,  702,  718,  719,  703,  704,
      705,  706,  708,  716,  709,  716,  720,  710,  711,  721,
      722,  712,  724,  713,  723,  723,  725,  726,  714,  715,
      727,  726,  717,  728,  729,  718,  719,  730,  730,  730,

      730,  730,  716,    0,  716,  720,  736,  723,  721,  722,
      738,  724,  741,  723,  723,  725,  726,    0,    0,  727,
      726,    0,  728,  729,  731,  731,  731,  731,  731,  732,
      732,  732,  732,  732,  743,  736,  723,  744,  746,  738,
      733,  741,  733,  732,  733,  733,  733,  733,  733,  734,
      734,  734,  734,  734,  735,  735,  735,  735,  735,  747,
      748,  749,  751,  743,  752,  753,  744,  746,  754,  755,
      756,  757,  732,  758,  759,  760,  761,  760,  762,  763,
      753,  764,  765,  766,  766,    0,  768,  769,  747,  748,
      749,  751,  770,  752,  753,  764,  764,  754,  755,  756,

      757,  771,  758,  759,  760,  761,  760,  762,  763,  753,
      764,  765,  766,  766,  767,  768,  769,  767,  772,  773,
      774,  770,  775,  777,  764,  764,  778,  779,  780,  781,
      771,  782,  783,  784,  779,  785,  786,  788,  789,  790,
      791,  787,  792,  767,  793,  794,  767,  772,  773,  774,
      795,  775,  777,  796,  799,  778,  779,  780,  781,  787,
      782,  783,  784,  779,  785,  786,  788,  789,  790,  791,
      787,  792,  797,  793,  794,  802,  803,  804,  798,  795,
      798,  805,  796,  799,  806,  807,  808,  797,  787,  809,
      798,  810,  812,  813,  815,  814,  816,  818,  822,  823,

      798,  797,  824,  825,  802,  803,  804,  814,  826,  827,
      805,  829,  830,  806,  807,  808,  797,  831,  809,  798,
      810,  812,  813,  815,  814,  816,  818,  822,  823,  798,
      832,  824,  825,  833,  834,  835,  814,  826,  827,  836,
      829,  830,  837,  838,  839,  840,  831,  841,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  832,
      853,  855,  833,  834,  835,  850,  856,  857,  836,  858,
      859,  837,  838,  839,  840,  861,  841,  842,  843,  844,
      845,  846,  847,  848,  849,  850,  851,  852,  862,  853,
      855,  863,  864,  865,  866,  856,  857,  867,  858,  859,

      868,  869,  870,  869,  861,  871,  872,  873,  874,  875,
      876,  876,  877,  878,  879,  880,  881,  862,  879,  882,
      863,  864,  865,  866,    0,    0,  867,    0,    0,  868,
      869,  870,  869,  876,  871,  872,  873,  874,  875,  876,
      876,  877,  878,  879,  880,  881,    0,  879,  882,  883,
      883,  883,  883,  883,  884,  884,  884,  884,  884,    0,
        0,    0,  876,  885,  885,  885,  885,  885,  886,  886,
      886,  886,  886,  887,    0,  887,    0,  887,  887,  887,
      887,  887,  886,  888,  891,  888,  888,  888,  888,  888,
      888,  889,  889,  889,  889,  889,  893,  896,  898,  899,

      888,  890,  890,  890,  890,  890,  901,  902,  903,  904,
      906,  886,  907,  891,  909,  908,  910,  911,  912,  913,
      914,  915,  916,  915,  917,  893,  896,  898,  899,  888,
      908,  918,  920,  921,  921,  901,  902,  903,  904,  906,
      919,  907,  923,  909,  908,  910,  911,  912,  913,  914,
      915,  916,  915,  917,  919,  919,  924,  925,  926,  908,
      918,  920,  921,  921,  922,  927,  928,  922,  929,  919,
      930,  923,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  934,  941,  919,  919,  924,  925,  926,  943,  944,
      945,  946,  947,  922,  927,  928,  922,  929,  942,  930,

      948,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      934,  941,  949,  950,  951,  952,  942,  943,  944,  945,
      946,  947,  954,  957,  953,  958,  953,  942,  959,  948,
      952,  960,  961,  962,  963,  964,  953,  965,  967,  968,
      970,  949,  950,  951,  952,  942,  953,  971,  973,  977,
      978,  954,  957,  979,  958,  980,  981,  959,  969,  952,
      960,  961,  962,  963,  964,  953,  965,  967,  968,  970,
      969,  982,  984,  985,  986,  953,  971,  973,  977,  978,
      987,  988,  979,  989,  980,  981,  990,  969,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001,  969,

      982,  984,  985,  986, 1002, 1003, 1004, 1005, 1006,  987,
      988, 1007,  989, 1008, 1010,  990, 1005,  991,  992,  993,
      994,  995,  996,  997,  998,  999, 1000, 1001, 1011, 1012,
     1013, 1014, 1016, 1002, 1003, 1004, 1005, 1006, 1017, 1018,
     1007, 1019, 1008, 1010, 1020, 1021, 1022, 1023, 1024, 1025,
     1024, 1026, 1027, 1028, 1029, 1030,    0, 1011, 1012, 1013,
     1014, 1016, 1031, 1031, 1032, 1033, 1035, 1017, 1018, 1036,
     1019, 1037,    0, 1020, 1021, 1022, 1023, 1024, 1025, 1024,
     1026, 1027, 1028, 1029, 1030, 1031, 1034, 1051, 1053, 1056,
     1034, 1031, 1031, 1032, 1033, 1035,    0, 1058, 1036, 1059,

     1037, 1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039,
     1039,    0, 1061,    0, 1031, 1034, 1051, 1053, 1056, 1034,
     1040, 1040, 1040, 1040, 1040, 1041, 1058, 1041, 1059, 1041,
     1041, 1041, 1041, 1041, 1040, 1042, 1042, 1042, 1042, 1042,
     1043, 1061, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044,
     1044, 1044, 1044, 1046, 1062,    0, 1063, 1043, 1045, 1045,
     1045, 1045, 1045, 1040, 1048, 1046, 1046, 1046, 1046, 1046,
     1047, 1047, 1047, 1047, 1047, 1064, 1048, 1048, 1048, 1048,
     1048, 1049, 1049, 1062, 1049, 1063, 1043, 1049, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1075, 1049,

     1075,    0, 1077, 1049, 1064, 1068, 1078, 1080, 1081, 1081,
     1083, 1084, 1082,    0,    0, 1082, 1085, 1066, 1067, 1068,
     1069, 1070, 1071, 1072, 1073, 1074, 1076, 1075, 1079, 1075,
     1049, 1077, 1086, 1087, 1068, 1078, 1080, 1081, 1081, 1083,
     1084, 1082, 1079, 1079, 1082, 1085, 1088, 1089, 1090, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1079, 1094, 1100,
     1101, 1086, 1087, 1103, 1104, 1105, 1106, 1107, 1102, 1108,
     1109, 1079, 1079, 1110, 1111, 1088, 1089, 1090, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1102, 1094, 1100, 1101,
     1112, 1114, 1103, 1104, 1105, 1106, 1107, 1102, 1108, 1109,

     1117, 1118, 1110, 1111, 1113, 1112, 1113, 1119, 1120, 1121,
     1122, 1123, 1124, 1125, 1127, 1102, 1113, 1128, 1130, 1112,
     1114, 1129, 1131, 1133, 1137, 1138, 1113, 1139, 1140, 1117,
     1118, 1141, 1142, 1129, 1112, 1144, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1127, 1145, 1113, 1128, 1130, 1146, 1147,
     1129, 1131, 1133, 1137, 1138, 1113, 1139, 1140, 1148, 1149,
     1141, 1142, 1129, 1150, 1144, 1151, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1145, 1159, 1160, 1161, 1146, 1147, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1170, 1148, 1149, 1171,
     1172, 1165, 1150, 1173, 1151, 1152, 1153, 1154, 1155, 1156,

     1157, 1158, 1174, 1159, 1160, 1161, 1176, 1177, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1170, 1178, 1179, 1171, 1172,
     1180, 1181, 1173, 1182, 1183, 1184, 1185, 1184, 1186, 1187,
     1188, 1174, 1189, 1190, 1192, 1176, 1177, 1191, 1191, 1193,
     1194, 1195, 1196, 1197, 1194, 1178, 1179, 1198, 1199, 1180,
     1181, 1200, 1182, 1183, 1184, 1185, 1184, 1186, 1187, 1188,
     1191, 1189, 1190, 1192, 1201, 1202, 1191, 1191, 1193, 1194,
     1195, 1196, 1197, 1194, 1203, 1204, 1198, 1199, 1205, 1206,
     1200, 1207, 1209,    0, 1213, 1212, 1215, 1216, 1217, 1191,
     1218, 1219, 1220, 1201, 1202, 1221, 1222, 1223, 1224, 1225,

     1227, 1228, 1229, 1203, 1204,    0, 1230, 1205, 1206, 1231,
     1207, 1209, 1212, 1213, 1212, 1215, 1216, 1217, 1226, 1218,
     1219, 1220, 1232, 1234, 1221, 1222, 1223, 1224, 1225, 1227,
     1228, 1229, 1235, 1239, 1226, 1230, 1226, 1240, 1231, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1226, 1249, 1250,
     1251, 1232, 1234, 1252, 1255, 1256, 1257, 1259, 1260, 1261,
     1262, 1235, 1239, 1226, 1268, 1226, 1240, 1273, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1274, 1249, 1250, 1251,
     1265, 1276, 1252, 1255, 1256, 1257, 1259, 1260, 1261, 1262,
     1277, 1265, 1278, 1268, 1279, 1280, 1273, 1281, 1282, 1284,

     1285, 1286, 1287, 1288, 1289, 1274, 1290, 1292, 1293, 1265,
     1276, 1286, 1294, 1295, 1297, 1298, 1299, 1301, 1300, 1277,
     1265, 1278, 1300, 1279, 1280, 1302, 1281, 1282, 1284, 1285,
     1286, 1287, 1288, 1289, 1303, 1290, 1292, 1293, 1304, 1305,
     1286, 1294, 1295, 1297, 1298, 1299, 1301, 1300, 1307, 1308,
     1309, 1300, 1310, 1311, 1302, 1313, 1314, 1315, 1316, 1317,
     1319, 1320, 1321, 1303, 1322, 1326, 1325, 1304, 1305, 1325,
     1327, 1329, 1330, 1331, 1332, 1333, 1334, 1307, 1308, 1309,
     1335, 1310, 1311, 1336, 1313, 1314, 1315, 1316, 1317, 1319,
     1320, 1321, 1337, 1322, 1326, 1325, 1338, 1339, 1325, 1327,

     1329, 1330, 1331, 1332, 1333, 1334, 1340, 1344, 1345, 1335,
     1350, 1351, 1336, 1348, 1348, 1348, 1348, 1348, 1352, 1353,
     1354, 1337, 1355, 1356, 1357, 1338, 1339, 1349, 1349, 1349,
     1349, 1349, 1358, 1359, 1361, 1340, 1344, 1345, 1364, 1350,
     1351, 1365, 1367, 1368, 1369, 1370, 1371, 1352, 1353, 1354,
     1372, 1355, 1356, 1357, 1373, 1374, 1375, 1376, 1377, 1379,
     1378, 1358, 1359, 1361, 1380, 1364, 1381, 1364, 1382, 1383,
     1365, 1367, 1368, 1369, 1370, 1371, 1378, 1384, 1378, 1372,
     1386, 1387, 1391, 1373, 1374, 1375, 1376, 1377, 1379, 1378,
     1392, 1393, 1394, 1380, 1395, 1381, 1396, 1382, 1383, 1397,

     1398, 1399, 1400, 1401, 1402, 1378, 1384, 1378, 1403, 1386,
     1387, 1391, 1404, 1407, 1408, 1409, 1411, 1412, 1413, 1392,
     1393, 1394, 1414, 1395, 1417, 1396, 1420, 1425, 1397, 1398,
     1399, 1400, 1401, 1402, 1426, 1417, 1428, 1403, 1429, 1430,
     1431, 1404, 1407, 1408, 1409, 1411, 1412, 1413, 1432, 1433,
     1434, 1414, 1436, 1417, 1437, 1420, 1425, 1439, 1440, 1441,
     1438, 1442, 1444, 1426, 1417, 1428, 1445, 1429, 1430, 1431,
     1438, 1446, 1447, 1449, 1450, 1451, 1452, 1432, 1433, 1434,
     1452, 1436, 1453, 1437, 1454, 1455, 1439, 1440, 1441, 1438,
     1442, 1444, 1456, 1457, 1459, 1445, 1460, 1461, 1462, 1438,

     1446, 1447, 1449, 1450, 1451, 1452, 1463, 1465, 1466, 1452,
     1467, 1453, 1468, 1454, 1455, 1469, 1471, 1472, 1473, 1474,
     1478, 1456, 1457, 1459, 1479, 1460, 1461, 1462, 1477, 1481,
     1482, 1477, 1483, 1484, 1485, 1463, 1465, 1466, 1486, 1467,
     1487, 1468, 1488, 1489, 1469, 1471, 1472, 1473, 1474, 1478,
     1490, 1491, 1492, 1479, 1496, 1497,    0, 1477, 1481, 1482,
     1477, 1483, 1484, 1485,    0,    0,    0, 1486,    0, 1487,
        0, 1488, 1489, 1500, 1500, 1500, 1500, 1500,    0, 1490,
     1491, 1492, 1506, 1496, 1497, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,

     1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 1506, 1507, 1508, 1509, 1504, 1510, 1511, 1512, 1513,
     1514, 1515, 1517,    0, 1521, 1520, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1533,    0, 1535, 1536,
     1537, 1507, 1508, 1509, 1504, 1510, 1511, 1512, 1513, 1514,
     1515, 1517, 1520, 1521, 1520, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
     1538, 1539, 1540, 1542, 1543, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1534, 1554, 1534, 1555, 1556, 1557, 1558, 1559,
     1560, 1563, 1564, 1565, 1567, 1534, 1568, 1569, 1570, 1538,

     1539, 1540, 1542, 1543, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1534, 1554, 1534, 1555, 1556, 1557, 1558, 1559, 1560,
     1563, 1564, 1565, 1567, 1573, 1568, 1569, 1570, 1576, 1581,
     1582, 1584, 1585, 1586, 1587, 1573, 1588, 1589, 1590, 1592,
     1593, 1594, 1595, 1596, 1597, 1598, 1600, 1601, 1602, 1603,
     1605, 1594, 1606, 1573, 1607, 1609, 1610, 1576, 1581, 1582,
     1584, 1585, 1586, 1587, 1573, 1588, 1589, 1590, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1600, 1601, 1602, 1603, 1605,
     1594, 1606, 1608, 1607, 1609, 1610, 1608, 1611, 1612, 1613,
     1615, 1616, 1617, 1618, 1619, 1621, 1622, 1623, 1624, 1625,

     1627, 1628, 1629, 1630, 1633, 1634, 1635, 1633, 1637, 1638,
     1639, 1608, 1640, 1641, 1642, 1608, 1611, 1612, 1613, 1615,
     1616, 1617, 1618, 1619, 1621, 1622, 1623, 1624, 1625, 1627,
     1628, 1629, 1630, 1633, 1634, 1635, 1633, 1637, 1638, 1639,
     1643, 1640, 1641, 1642, 1644, 1645, 1646, 1647, 1648, 1652,
     1653, 1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1658,    0,    0,    0, 1643,
     1664, 1665, 1666, 1644, 1645, 1646, 1647, 1648, 1652, 1653,
     1659, 1659, 1659, 1659, 1659, 1660, 1667, 1668, 1660, 1660,
     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1663, 1664,

     1665, 1666, 1660, 1662, 1662, 1662, 1662, 1662, 1669, 1670,
     1663, 1663, 1663, 1663, 1663, 1667, 1668, 1671, 1672, 1673,
     1675,    0, 1679, 1678, 1681, 1682, 1683, 1684, 1685, 1686,
     1687, 1660, 1688, 1689, 1690, 1691, 1693, 1669, 1670, 1694,
     1695, 1696, 1697, 1698, 1700, 1701, 1671, 1672, 1673, 1675,
     1678, 1679, 1678, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1692, 1688, 1689, 1690, 1691, 1693, 1705, 1706, 1694, 1695,
     1696, 1697, 1698, 1700, 1701, 1707, 1692, 1708, 1692, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1692,
     1721, 1722, 1723, 1725, 1726, 1705, 1706, 1727, 1728, 1734,

        0, 1739, 1740, 1742, 1707, 1692, 1708, 1692, 1709, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1731, 1721,
     1722, 1723, 1725, 1726, 1743, 1744, 1727, 1728, 1734, 1731,
     1739, 1740, 1742, 1745, 1746, 1747, 1748, 1750, 1751, 1752,
     1753, 1754, 1755, 1756, 1758, 1759, 1760, 1731, 1761, 1752,
     1763, 1764, 1765, 1743, 1744, 1766, 1767, 1768, 1731, 1766,
     1769, 1770, 1745, 1746, 1747, 1748, 1750, 1751, 1752, 1753,
     1754, 1755, 1756, 1758, 1759, 1760, 1771, 1761, 1752, 1763,
     1764, 1765, 1773, 1774, 1766, 1767, 1768, 1775, 1766, 1769,
     1770, 1776, 1777, 1779, 1780, 1781, 1782, 1783, 1785, 1786,

     1787, 1788, 1792, 1791, 1793, 1771, 1791, 1795, 1796, 1797,
     1798, 1773, 1774, 1799, 1800, 1801, 1775, 1802, 1803, 1804,
     1776, 1777, 1779, 1780, 1781, 1782, 1783, 1785, 1786, 1787,
     1788, 1792, 1791, 1793, 1805, 1791, 1795, 1796, 1797, 1798,
     1806, 1810, 1799, 1800, 1801, 1811, 1802, 1803, 1804, 1817,
     1818, 1819, 1821, 1822, 1823, 1824, 1825, 1826, 1828, 1829,
     1830, 1831, 1832, 1805, 1834, 1836, 1837, 1838, 1839, 1806,
     1810, 1840, 1841, 1842, 1811, 1844, 1845, 1846, 1817, 1818,
     1819, 1821, 1822, 1823, 1824, 1825, 1826, 1828, 1829, 1830,
     1831, 1832, 1847, 1834, 1836, 1837, 1838, 1839, 1843, 1848,

     1840, 1841, 1842, 1849, 1844, 1845, 1846, 1850, 1843, 1852,
     1843, 1853, 1854, 1855, 1860, 1861, 1862, 1864, 1866, 1867,
     1869, 1847, 1870, 1873, 1876, 1880, 1874, 1843, 1848, 1874,
     1881, 1882, 1849, 1883, 1886, 1888, 1850, 1843, 1852, 1843,
     1853, 1854, 1855, 1860, 1861, 1862, 1864, 1866, 1867, 1869,
     1890, 1870, 1873, 1876, 1880, 1874, 1891, 1893, 1874, 1881,
     1882, 1894, 1883, 1886, 1888, 1896, 1898, 1900, 1901, 1902,
     1903, 1904, 1905, 1906, 1908, 1909, 1910, 1912, 1913, 1890,
     1914, 1915, 1916, 1917, 1918, 1891, 1893, 1919, 1920, 1922,
     1894, 1923, 1924, 1925, 1896, 1898, 1900, 1901, 1902, 1903,

     1904, 1905, 1906, 1908, 1909, 1910, 1912, 1913, 1926, 1914,
     1915, 1916, 1917, 1918, 1928, 1929, 1919, 1920, 1922, 1930,
     1923, 1924, 1925, 1934, 1935, 1936, 1937, 1939, 1943, 1944,
     1945, 1947, 1948, 1949, 1950, 1951, 1952, 1926, 1954, 1955,
     1956, 1957, 1958, 1928, 1929, 1960, 1962, 1963, 1930, 1964,
     1965, 1966, 1934, 1935, 1936, 1937, 1939, 1943, 1944, 1945,
     1947, 1948, 1949, 1950, 1951, 1952, 1967, 1954, 1955, 1956,
     1957, 1958, 1968, 1969, 1960, 1962, 1963, 1970, 1964, 1965,
     1966, 1971, 1972, 1969, 1973, 1969, 1974, 1975, 1976, 1978,
     1979, 1980, 1981, 1986, 1987, 1967, 1988, 1990, 1992, 1993,

     1995, 1968, 1969, 1996, 1999, 2000, 1970, 2002, 2000, 2006,
     1971, 1972, 1969, 1973, 1969, 1974, 1975, 1976, 1978, 1979,
     1980, 1981, 1986, 1987, 2007, 1988, 1990, 1992, 1993, 1995,
     2008, 2009, 1996, 1999, 2000, 2012, 2002, 2000, 2006, 2014,
     2016, 2017, 2019, 2020, 2022, 2024, 2026, 2027, 2028, 2029,
     2030, 2031, 2032, 2007, 2034, 2035, 2036, 2038, 2039, 2008,
     2009, 2040, 2041, 2042, 2012, 2043, 2044, 2045, 2014, 2016,
     2017, 2019, 2020, 2022, 2024, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2046, 2034, 2035, 2036, 2038, 2039, 2048, 2049,
     2040, 2041, 2042, 2050, 2043, 2044, 2045, 2051, 2052, 2054,

     2055, 2056, 2060, 2061, 2062, 2063, 2065, 2071, 2072, 2073,
     2075, 2046, 2067, 2067, 2067, 2067, 2067, 2048, 2049, 2076,
     2077, 2078, 2050, 2079, 2080, 2082, 2051, 2052, 2054, 2055,
     2056, 2060, 2061, 2062, 2063, 2065, 2071, 2072, 2073, 2075,
     2083, 2084, 2085, 2086, 2088, 2090, 2091, 2092, 2076, 2077,
     2078, 2093, 2079, 2080, 2082, 2094, 2095, 2096, 2098, 2099,
     2100, 2101, 2102, 2103, 2104, 2106, 2107, 2097, 2108, 2083,
     2084, 2085, 2086, 2088, 2090, 2091, 2092, 2097, 2109, 2097,
     2093, 2114, 2115, 2116, 2094, 2095, 2096, 2098, 2099, 2100,
     2101, 2102, 2103, 2104, 2106, 2107, 2097, 2108, 2118, 2120,

     2121, 2123, 2124, 2127, 2130, 2134, 2097, 2109, 2097, 2135,
     2114, 2115, 2116, 2128, 2136, 2137, 2128, 2140, 2142, 2144,
     2145, 2147, 2148, 2150, 2152, 2154, 2155, 2118, 2120, 2121,
     2123, 2124, 2127, 2130, 2134, 2156, 2157, 2158, 2135, 2159,
     2160, 2162, 2128, 2136, 2137, 2128, 2140, 2142, 2144, 2145,
     2147, 2148, 2150, 2152, 2154, 2155, 2163, 2164, 2166, 2167,
     2168, 2169, 2170, 2171, 2156, 2157, 2158, 2172, 2159, 2160,
     2162, 2173, 2174, 2176, 2177, 2178, 2179, 2180, 2182, 2183,
     2184, 2188, 2189, 2190, 2191, 2163, 2164, 2166, 2167, 2168,
     2169, 2170, 2171, 2193,    0,    0, 2172,    0,    0,    0,

     2173, 2174, 2176, 2177, 2178, 2179, 2180, 2182, 2183, 2184,
     2188, 2189, 2190, 2191, 2194, 2194, 2194, 2194, 2194, 2201,
     2202, 2203, 2193, 2196, 2196, 2196, 2196, 2196, 2197, 2197,
     2197, 2197, 2197, 2205, 2206, 2207, 2208, 2209, 2210, 2212,
     2213, 2214, 2215, 2216, 2218, 2220, 2221, 2222, 2201, 2202,
     2203, 2223, 2224, 2225, 2226, 2228, 2229, 2230,    0, 2231,
        0, 2232, 2205, 2206, 2207, 2208, 2209, 2210, 2212, 2213,
     2214, 2215, 2216, 2218, 2220, 2221, 2222, 2227, 2233, 2234,
     2223, 2224, 2225, 2226, 2228, 2229, 2230, 2227, 2231, 2227,
     2232, 2236, 2237, 2238, 2239, 2244, 2245, 2246, 2248, 2250,

     2251, 2253, 2254, 2257, 2260, 2264, 2227, 2233, 2234, 2258,
     2265, 2266, 2258, 2267, 2270, 2272, 2227, 2274, 2227, 2275,
     2236, 2237, 2238, 2239, 2244, 2245, 2246, 2248, 2250, 2251,
     2253, 2254, 2257, 2260, 2264, 2277, 2278, 2280, 2258, 2265,
     2266, 2258, 2267, 2270, 2272, 2282, 2274, 2284, 2275, 2285,
     2286, 2287, 2288, 2289, 2290, 2292, 2293, 2294, 2296, 2297,
     2298, 2299, 2300, 2301, 2277, 2278, 2280, 2302, 2303, 2304,
     2306, 2307, 2308, 2309, 2282, 2310, 2284, 2312, 2285, 2286,
     2287, 2288, 2289, 2290, 2292, 2293, 2294, 2296, 2297, 2298,
     2299, 2300, 2301, 2313, 2314, 2318, 2302, 2303, 2304, 2306,

     2307, 2308, 2309, 2319, 2310, 2320, 2312, 2321, 2323, 2324,
     2326, 2328, 2330, 2331, 2332, 2333, 2334, 2335, 2337, 2338,
     2340, 2341, 2313, 2314, 2318, 2343, 2344, 2345, 2346, 2347,
     2348, 2349, 2319, 2350, 2320, 2351, 2321, 2323, 2324, 2326,
     2328, 2330, 2331, 2332, 2333, 2334, 2335, 2337, 2338, 2340,
     2341, 2352, 2354, 2358, 2343, 2344, 2345, 2346, 2347, 2348,
     2349, 2360, 2350, 2361, 2351, 2362, 2363, 2364, 2365, 2369,
     2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2382,
     2352, 2354, 2358, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
     2360, 2393, 2361, 2395, 2362, 2363, 2364, 2365, 2369, 2370,

     2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2382, 2396,
     2397, 2398, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2399,
     2393, 2400, 2395, 2404, 2405, 2407, 2408, 2409, 2410, 2411,
     2412, 2414, 2417, 2418, 2419, 2421, 2423, 2425, 2396, 2397,
     2398, 2427, 2428, 2429, 2430, 2431, 2432, 2434, 2399, 2435,
     2400, 2437, 2404, 2405, 2407, 2408, 2409, 2410, 2411, 2412,
     2414, 2417, 2418, 2419, 2421, 2423, 2425, 2438, 2440, 2441,
     2427, 2428, 2429, 2430, 2431, 2432, 2434, 2442, 2435, 2443,
     2437, 2444, 2445, 2446, 2447, 2448, 2449, 2451, 2455, 2457,
     2458, 2459, 2460, 2461, 2462, 2466, 2438, 2440, 2441, 2467,

     2468, 2469, 2470, 2472, 2473, 2474, 2442, 2475, 2443, 2477,
     2444, 2445, 2446, 2447, 2448, 2449, 2451, 2455, 2457, 2458,
     2459, 2460, 2461, 2462, 2466, 2479, 2483, 2484, 2467, 2468,
     2469, 2470, 2472, 2473, 2474, 2485, 2475, 2486, 2477, 2487,
     2488, 2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2501,
     2502, 2504, 2505, 2506, 2479, 2483, 2484, 2507, 2508, 2509,
     2511, 2514, 2515, 2516, 2485,    0, 2486,    0, 2487, 2488,
     2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2501, 2502,
     2504, 2505, 2506, 2519, 2521, 2523, 2507, 2508, 2509, 2511,
     2514, 2515, 2516, 2518, 2518, 2518, 2518, 2518, 2525, 2526,

     2527, 2528, 2529, 2530, 2532, 2533, 2535, 2536, 2538, 2539,
     2540, 2541, 2519, 2521, 2523, 2542, 2543, 2544, 2545, 2546,
     2547, 2549, 2553, 2555, 2556, 2557, 2558, 2525, 2526, 2527,
     2528, 2529, 2530, 2532, 2533, 2535, 2536, 2538, 2539, 2540,
     2541, 2559, 2560, 2564, 2542, 2543, 2544, 2545, 2546, 2547,
     2549, 2553, 2555, 2556, 2557, 2558, 2565, 2566, 2567, 2568,
     2570, 2571, 2572, 2573, 2575, 2577, 2581, 2582, 2583, 2584,
     2559, 2560, 2564, 2585, 2586, 2587, 2588, 2590, 2591, 2592,
     2593, 2594, 2595, 2599, 2600, 2565, 2566, 2567, 2568, 2570,
     2571, 2572, 2573, 2575, 2577, 2581, 2582, 2583, 2584, 2602,

     2603, 2604, 2585, 2586, 2587, 2588, 2590, 2591, 2592, 2593,
     2594, 2595, 2599, 2600, 2605, 2606, 2607, 2609, 2612, 2613,
     2614, 2616, 2616, 2616, 2616, 2616, 2619, 2621, 2602, 2603,
     2604, 2617, 2617, 2617, 2617, 2617, 2618, 2618, 2618, 2618,
     2618, 2623, 2625, 2605, 2606, 2607, 2609, 2612, 2613, 2614,
     2626, 2627, 2628, 2629, 2630, 2619, 2621, 2632, 2633, 2635,
     2636, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646,
     2623, 2625, 2647, 2649, 2653, 2655, 2656, 2657, 2658, 2626,
     2627, 2628, 2629, 2630, 2659, 2660, 2632, 2633, 2635, 2636,
     2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2664,

     2665, 2647, 2649, 2653, 2655, 2656, 2657, 2658, 2666, 2667,
     2668, 2670, 2671, 2659, 2660, 2672, 2673, 2675, 2677, 2681,
     2682, 2683, 2684, 2685, 2686, 2687, 2688, 2690, 2664, 2665,
     2691, 2692, 2693, 2694, 2695, 2699, 2700, 2666, 2667, 2668,
     2670, 2671, 2702, 2703, 2672, 2673, 2675, 2677, 2681, 2682,
     2683, 2684, 2685, 2686, 2687, 2688, 2690, 2704, 2705, 2691,
     2692, 2693, 2694, 2695, 2699, 2700, 2706, 2707, 2709, 2712,
     2713, 2702, 2703, 2714, 2716, 2717, 2719, 2721, 2722, 2723,
     2725, 2729, 2730, 2731, 2733, 2734, 2704, 2705, 2735, 2739,
     2742, 2743, 2746, 2749, 2750, 2706, 2707, 2709, 2712, 2713,

     2751, 2752, 2714, 2716, 2717, 2719, 2721, 2722, 2723, 2725,
     2729, 2730, 2731, 2733, 2734, 2753, 2755, 2735, 2739, 2742,
     2743, 2746, 2749, 2750, 2757, 2758, 2761, 2762, 2763, 2751,
     2752, 2765, 2767, 2770, 2771, 2772, 2773, 2774, 2775, 2776,
     2777, 2779, 2781, 2784, 2753, 2755, 2785, 2787, 2789, 2790,
     2791, 2793, 2797, 2757, 2758, 2761, 2762, 2763, 2798, 2799,
     2765, 2767, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777,
     2779, 2781, 2784, 2801, 2802, 2785, 2787, 2789, 2790, 2791,
     2793, 2797, 2803, 2807, 2810, 2811, 2814, 2798, 2799, 2817,
     2818, 2819, 2820, 2821, 2823, 2825, 2826, 2829, 2830, 2831,

     2833, 2835, 2801, 2802, 2838, 2839, 2840, 2841, 2842, 2843,
     2844, 2803, 2807, 2810, 2811, 2814, 2845, 2847, 2817, 2818,
     2819, 2820, 2821, 2823, 2825, 2826, 2829, 2830, 2831, 2833,
     2835, 2849, 2853, 2838, 2839, 2840, 2841, 2842, 2843, 2844,
     2852, 2852, 2852, 2852, 2852, 2845, 2847, 2854, 2856, 2858,
     2859, 2860, 2862, 2866, 2867, 2868, 2870, 2871, 2872, 2876,
     2849, 2853, 2879, 2880, 2883, 2886, 2887, 2888, 2889, 2890,
     2892, 2894, 2895, 2898, 2899, 2900, 2854, 2856, 2858, 2859,
     2860, 2862, 2866, 2867, 2868, 2870, 2871, 2872, 2876, 2902,
     2904, 2879, 2880, 2883, 2886, 2887, 2888, 2889, 2890, 2892,

     2894, 2895, 2898, 2899, 2900, 2907, 2908, 2909, 2910, 2911,
     2912, 2913, 2914, 2916, 2918, 2923, 2924, 2926, 2902, 2904,
     2921, 2921, 2921, 2921, 2921, 2922, 2922, 2922, 2922, 2922,
     2928, 2929, 2930, 2932, 2907, 2908, 2909, 2910, 2911, 2912,
     2913, 2914, 2916, 2918, 2923, 2924, 2926, 2936, 2937, 2938,
     2940, 2941, 2942, 2946, 2949, 2950, 2953, 2956, 2957, 2928,
     2929, 2930, 2932, 2958, 2959, 2960, 2962, 2964, 2965, 2968,
     2969, 2970, 2972, 2974, 2977, 2978, 2936, 2937, 2938, 2940,
     2941, 2942, 2946, 2949, 2950, 2953, 2956, 2957, 2979, 2980,
     2981, 2982, 2958, 2959, 2960, 2962, 2964, 2965, 2968, 2969,

     2970, 2972, 2974, 2977, 2978, 2983, 2984, 2986, 2988, 2991,
     2992, 2993, 2994, 2995, 2998, 2998, 3001, 2979, 2980, 2981,
     2982, 3002, 3003, 3004, 3006, 3007, 3008, 2998, 3009, 2998,
     2998, 2998, 3011, 3012, 2983, 2984, 2986, 2988, 2991, 2992,
     2993, 2994, 2995, 2998, 2998, 3001, 3014, 3015, 3016, 3018,
     3002, 3003, 3004, 3006, 3007, 3008, 2998, 3009, 2998, 2998,
     2998, 3011, 3012, 3019, 3020, 3021, 3023, 3025, 3026, 3021,
     3027, 3028, 3029, 3030, 3031, 3014, 3015, 3016, 3018, 3032,
     3033, 3034, 3035, 3036, 3042, 3043, 3044, 3045,    0, 3047,
        0,    0, 3019, 3020, 3021, 3023, 3025, 3026, 3021, 3027,

     3028, 3029, 3030, 3031, 3039, 3039, 3048, 3049, 3032, 3033,
     3034, 3035, 3036, 3042, 3043, 3044, 3045, 3039, 3047, 3039,
     3039, 3039, 3050, 3052, 3053, 3055, 3056, 3057, 3059, 3060,
     3061, 3064, 3066, 3039, 3039, 3048, 3049, 3062, 3067, 3068,
     3069, 3062, 3070, 3071, 3072, 3073, 3039, 3074, 3039, 3039,
     3039, 3050, 3052, 3053, 3055, 3056, 3057, 3059, 3060, 3061,
     3064, 3066, 3075, 3076, 3077,    0, 3062, 3067, 3068, 3069,
     3062, 3070, 3071, 3072, 3073, 3083, 3074, 3084, 3085, 3086,
     3088, 3080, 3080, 3089, 3090, 3091, 3093, 3094, 3096, 3097,
     3098, 3075, 3076, 3077, 3080, 3100, 3080, 3080, 3080, 3101,

     3102, 3103, 3105, 3107, 3083, 3103, 3084, 3085, 3086, 3088,
     3080, 3080, 3089, 3090, 3091, 3093, 3094, 3096, 3097, 3098,
     3108, 3109, 3110, 3080, 3100, 3080, 3080, 3080, 3101, 3102,
     3103, 3105, 3107, 3111, 3103, 3112, 3113, 3114, 3115, 3116,
     3117, 3118, 3121, 3121, 3124, 3125, 3126, 3127, 3129, 3108,
     3109, 3110, 3130, 3131, 3132, 3121, 3134, 3121, 3121, 3121,
     3135, 3137, 3111, 3138, 3112, 3113, 3114, 3115, 3116, 3117,
     3118, 3121, 3121, 3124, 3125, 3126, 3127, 3129, 3139, 3141,
     3142, 3130, 3131, 3132, 3121, 3134, 3121, 3121, 3121, 3135,
     3137, 3143, 3138, 3144, 3146, 3148, 3149, 3144, 3150, 3151,

     3152, 3153, 3154, 3156, 3157, 3159, 3160, 3139, 3141, 3142,
     3161, 3162, 3163, 3164, 3161, 3165, 3167, 3170, 3172, 3174,
     3143, 3177, 3144, 3146, 3148, 3149, 3144, 3150, 3151, 3152,
     3153, 3154, 3156, 3157, 3159, 3160, 3182, 3183, 3184, 3161,
     3162, 3163, 3164, 3161, 3165, 3167, 3170, 3172, 3174, 3187,
     3177, 3193, 3187, 3194, 3196, 3197, 3198, 3199, 3200, 3201,
     3198, 3202, 3204, 3207, 3209, 3182, 3183, 3184, 3211, 3214,
     3219, 3220, 3221, 3224, 3230, 3231, 3224, 3233, 3187, 3234,
     3193, 3187, 3194, 3196, 3197, 3198, 3199, 3200, 3201, 3198,
     3202, 3204, 3207, 3209, 3236, 3237, 3238, 3211, 3214, 3219,

     3220, 3221, 3224, 3230, 3231, 3224, 3233, 3235, 3234, 3239,
     3241, 3235, 3244, 3246, 3248, 3251, 3256, 3257, 3258, 3261,
     3267, 3268, 3261, 3236, 3237, 3238, 3270, 3271, 3272, 3273,
     3274, 3275, 3272, 3276, 3278, 3281, 3235, 3283, 3239, 3241,
     3235, 3244, 3246, 3248, 3251, 3256, 3257, 3258, 3261, 3267,
     3268, 3261, 3285, 3288, 3293, 3270, 3271, 3272, 3273, 3274,
     3275, 3272, 3276, 3278, 3281, 3294, 3283, 3295, 3298, 3303,
     3305, 3298, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3314,
     3315, 3285, 3288, 3293, 3317, 3319, 3321, 3322, 3323, 3325,
     3326, 3327, 3328, 3329, 3294, 3330, 3295, 3298, 3303, 3305,

     3298, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3314, 3315,
     3331, 3332, 3334, 3317, 3319, 3321, 3322, 3323, 3325, 3326,
     3327, 3328, 3329, 3335, 3330, 3337, 3339, 3341, 3342, 3343,
     3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3354, 3331,
     3332, 3334, 3355, 3357, 3359, 3361, 3362, 3363, 3365, 3366,
     3367, 3368, 3335, 3369, 3337, 3339, 3341, 3342, 3343, 3345,
     3346, 3347, 3348, 3349, 3350, 3351, 3352, 3354, 3370, 3371,
     3372, 3355, 3357, 3359, 3361, 3362, 3363, 3365, 3366, 3367,
     3368, 3374, 3369, 3375, 3377, 3379, 3381, 3382, 3383, 3385,
     3386, 3387, 3388, 3389, 3390, 3391, 3393, 3370, 3371, 3372,

     3394, 3396, 3397, 3398, 3400, 3401, 3402, 3403, 3404, 3405,
     3374, 3406, 3375, 3377, 3379, 3381, 3382, 3383, 3385, 3386,
     3387, 3388, 3389, 3390, 3391, 3393, 3408, 3409, 3411, 3394,
     3396, 3397, 3398, 3400, 3401, 3402, 3403, 3404, 3405, 3412,
     3406, 3413, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3423,
     3424, 3426, 3427, 3428, 3430, 3408, 3409, 3411, 3431, 3432,
     3433, 3434, 3435, 3436, 3438, 3439, 3441, 3442, 3412, 3443,
     3413, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3423, 3424,
     3426, 3427, 3428, 3430, 3444, 3446, 3449, 3431, 3432, 3433,
     3434, 3435, 3436, 3438, 3439, 3441, 3442, 3450, 3443, 3454,

     3455, 3456, 3458, 3461, 3462, 3466, 3467, 3468, 3470, 3473,
     3474, 3478, 3479, 3444, 3446, 3449, 3480, 3482, 3485, 3486,
     3490, 3492, 3493, 3494, 3495, 3498, 3450, 3499, 3454, 3455,
     3456, 3458, 3461, 3462, 3466, 3467, 3468, 3470, 3473, 3474,
     3478, 3479, 3500, 3501, 3504, 3480, 3482, 3485, 3486, 3490,
     3492, 3493, 3494, 3495, 3498, 3505, 3499, 3506, 3507, 3510,
     3511, 3512, 3513, 3515, 3516, 3518, 3519, 3520, 3522, 3523,
     3524, 3500, 3501, 3504, 3526, 3527, 3528, 3530, 3533, 3536,
     3539, 3542, 3543, 3544, 3505, 3545, 3506, 3507, 3510, 3511,
     3512, 3513, 3515, 3516, 3518, 3519, 3520, 3522, 3523, 3524,

     3546, 3547, 3548, 3526, 3527, 3528, 3530, 3533, 3536, 3539,
     3542, 3543, 3544, 3549, 3545, 3550, 3551, 3553, 3555, 3557,
     3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3546,
     3547, 3548, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575,
     3576, 3577, 3549, 3578, 3550, 3551, 3553, 3555, 3557, 3559,
     3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3579, 3580,
     3581, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576,
     3577, 3582, 3578, 3583, 3584, 3585, 3586, 3591, 3592, 3593,
     3594, 3595, 3596, 3597, 3598, 3599, 3600, 3579, 3580, 3581,
     3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610,

     3582,    0, 3583, 3584, 3585, 3586, 3591, 3592, 3593, 3594,
     3595, 3596, 3597, 3598, 3599, 3600,    0,    0,    0, 3601,
     3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3616,
        0, 3616, 3617,    0, 3617, 3618, 3618, 3618, 3618, 3618,
     3619,    0, 3619, 3619, 3619, 3619, 3619, 3619, 3620,    0,
        0, 3620, 3620, 3620,    0, 3620, 3621, 3621, 3621, 3621,
     3621, 3621, 3621, 3621, 3622, 3622, 3622, 3622, 3622, 3622,
     3622, 3622, 3623,    0, 3623, 3623, 3623, 3623, 3623, 3623,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,

     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int SQLyy_flex_debug;
int SQLyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *SQLyytext;

#define YY_EXIT 1				// YY_FATAL will not halt the application

#ifndef _CSTDARG_
#include <cstdarg>      // std::va_list
#endif

#ifndef _INC_STRING
#include <string.h>
#endif

#include "InternalNode.h"

#ifndef _CONNECTIVITY_SQLYACC_HXX
#define _CONNECTIVITY_SQLYACC_HXX

#ifndef SQLYYDEBUG
#define SQLYYDEBUG 1
#endif

#include "SqlBison.h"
#endif
#include "SqlScan.h"
#include "SqlParse.h"

using namespace connectivity;

//=============================================================================
//
// Erzeugung der Blaetter fuer die Token
// Blaetter werden generell vom Lexer erzeugt

static Utf8String aEmptyString;

static sal_Int32	gatherString(sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex = false);
static sal_Int32	gatherName(const sal_Char*);
static sal_Int32	gatherNamePre(const sal_Char* );
static sal_Int32    parseString();
// has to be set before the parser starts
OSQLScanner* xxx_pGLOBAL_SQLSCAN = NULL;

#define SQL_NEW_NODE(text, token)	\
		SQLyylval.pParseNode = new OSQLInternalNode(text, token);	    

#define SQL_NEW_KEYWORD(token)						\
		SQLyylval.pParseNode = new OSQLInternalNode(aEmptyString, SQL_NODE_KEYWORD, (token));		return token;

#define SQL_NEW_INTNUM 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_INTNUM); return SQL_TOKEN_INTNUM;
#define SQL_NEW_APPROXNUM 	SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_APPROXNUM); return SQL_TOKEN_APPROXNUM;
#define SQL_NEW_DATE 		SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_ACCESS_DATE); return SQL_TOKEN_ACCESS_DATE;

#define YY_INPUT(buf,result,max_size)               \
{                                                   \
    int c = xxx_pGLOBAL_SQLSCAN->SQLyygetc();       \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1);\
}

#define YY_FATAL_ERROR(msg)							\
{													\
	xxx_pGLOBAL_SQLSCAN->SQLyyerror(msg);			\
}													
	
//
//=============================================================================

#define INITIAL 0
#define SQL 1
#define PREDICATE_ENG 2
#define PREDICATE_GER 3
#define DATE 4
#define STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SQLyylex_destroy (void );

int SQLyyget_debug (void );

void SQLyyset_debug (int debug_flag  );

YY_EXTRA_TYPE SQLyyget_extra (void );

void SQLyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *SQLyyget_in (void );

void SQLyyset_in  (FILE * in_str  );

FILE *SQLyyget_out (void );

void SQLyyset_out  (FILE * out_str  );

yy_size_t SQLyyget_leng (void );

char *SQLyyget_text (void );

int SQLyyget_lineno (void );

void SQLyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int SQLyywrap (void );
#else
extern int SQLyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( SQLyytext, SQLyyleng, 1, SQLyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SQLyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SQLyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SQLyyin))==0 && ferror(SQLyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SQLyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int SQLyylex (void);

#define YY_DECL int SQLyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after SQLyytext and SQLyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! SQLyyin )
			SQLyyin = stdin;

		if ( ! SQLyyout )
			SQLyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			SQLyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
		}

		SQLyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of SQLyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3616 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3615 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AFTER);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALL);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ALTER);  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AND);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ANY);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ARRAY_AGG);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AS);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ASC);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AT);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ATOMIC);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AUTHORIZATION);  }
	YY_BREAK
case 12:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_AVG);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEFORE);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BEGIN);  }
	YY_BREAK
case 15:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BETWEEN);  }
	YY_BREAK
case 16:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BOOLEAN);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BINARY);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT);  }
	YY_BREAK
case 19:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BIT_LENGTH);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BLOB);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_BY);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CASE);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CAST);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR);  }
	YY_BREAK
case 25:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHARACTER);  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHAR_LENGTH);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CHECK);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CLOB);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COALESCE);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COLLATE);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COMMIT);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONTINUE);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CONVERT);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_COUNT);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CREATE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CROSS);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DATE);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_CATALOG);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_PATH);  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_ROLE);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_SCHEMA);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURDATE);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURRENT_TIMESTAMP);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_CURSOR);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATE);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEDIFF);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATETIME);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DATEVALUE);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAY);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYNAME);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFMONTH);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFWEEK);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DAYOFYEAR);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEC);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECIMAL);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DECLARE);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DEFAULT);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DELETE);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DESC);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DISTINCT);  }
	YY_BREAK
case 63:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DOUBLE);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_DROP);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EACH);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ELSE);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_END);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EVERY);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ESCAPE);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCEPT);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXCLUDE);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXISTS);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_EXTRACT);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FALSE);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FETCH);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FIRST_VALUE);  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FLOAT);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOLLOWING);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOR);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOREIGN);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FORWARD);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REVERSE);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FOUND);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FROM);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_FULL);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GETECCLASSID);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_GROUP);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HAVING);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_HOUR);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IGNORE);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IN);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INNER);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSERT);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INSTEAD);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTEGER);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT32);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INT64);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERSECT);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTERVAL);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_INTO);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_IS);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_JOIN);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_KEY);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAG);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LARGE);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LAST_VALUE);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEAD);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LEFT);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIKE);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LIMIT);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOCAL);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LONG);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_LOWER);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MAX);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MIN);  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MINUTE);  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTH);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_MONTHNAME);  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATIONAL);  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NATURAL);  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCHAR);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NCLOB);  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEW);  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NEXT);  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NO);  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOT);  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NOW);  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTH_VALUE);  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NTILE);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULL);  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLIF);  }
	YY_BREAK
case 134:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NULLS);  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_NUMERIC);  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OBJECT);  }
	YY_BREAK
case 137:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OCTET_LENGTH);  }
	YY_BREAK
case 138:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OF);  }
	YY_BREAK
case 139:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OFFSET);  }
	YY_BREAK
case 140:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OLD);  }
	YY_BREAK
case 141:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ON);  }
	YY_BREAK
case 142:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ONLY);  }
	YY_BREAK
case 143:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OPTION);  }
	YY_BREAK
case 144:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OR);  }
	YY_BREAK
case 145:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ORDER);  }
	YY_BREAK
case 146:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OTHERS);  }
	YY_BREAK
case 147:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OUTER);  }
	YY_BREAK
case 148:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_OVER);  }
	YY_BREAK
case 149:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PARTITION);  }
	YY_BREAK
case 150:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT2D);  }
	YY_BREAK
case 151:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POINT3D);  }
	YY_BREAK
case 152:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_POSITION);  }
	YY_BREAK
case 153:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECEDING);  }
	YY_BREAK
case 154:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRECISION);  }
	YY_BREAK
case 155:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PRIMARY);  }
	YY_BREAK
case 156:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PROCEDURE);  }
	YY_BREAK
case 157:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_PUBLIC);  }
	YY_BREAK
case 158:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_QUARTER);  }
	YY_BREAK
case 159:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RANGE);  }
	YY_BREAK
case 160:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REAL);  }
	YY_BREAK
case 161:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCES);  }
	YY_BREAK
case 162:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_REFERENCING);  }
	YY_BREAK
case 163:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RESPECT);  }
	YY_BREAK
case 164:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROLLBACK);  }
	YY_BREAK
case 165:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW);  }
	YY_BREAK
case 166:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROWS);  }
	YY_BREAK
case 167:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_ROW_NUMBER);  }
	YY_BREAK
case 168:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_RIGHT);  }
	YY_BREAK
case 169:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SCHEMA);  }
	YY_BREAK
case 170:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SECOND);  }
	YY_BREAK
case 171:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SELECT);  }
	YY_BREAK
case 172:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SET);  }
	YY_BREAK
case 173:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SMALLINT);  }
	YY_BREAK
case 174:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SOME);  }
	YY_BREAK
case 175:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STATEMENT);  }
	YY_BREAK
case 176:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUBSTRING);  }
	YY_BREAK
case 177:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_SUM);  }
	YY_BREAK
case 178:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_STRING);  }
	YY_BREAK
case 179:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TABLE);  }
	YY_BREAK
case 180:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_THEN);  }
	YY_BREAK
case 181:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIES);  }
	YY_BREAK
case 182:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMP);  }
	YY_BREAK
case 183:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPADD);  }
	YY_BREAK
case 184:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMESTAMPDIFF);  }
	YY_BREAK
case 185:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TIMEVALUE);  }
	YY_BREAK
case 186:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TO);  }
	YY_BREAK
case 187:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRANSLATE);  }
	YY_BREAK
case 188:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRIGGER);  }
	YY_BREAK
case 189:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_TRUE);  }
	YY_BREAK
case 190:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNBOUNDED);  }
	YY_BREAK
case 191:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNION);  }
	YY_BREAK
case 192:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNIQUE);  }
	YY_BREAK
case 193:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UNKNOWN);  }
	YY_BREAK
case 194:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPDATE);  }
	YY_BREAK
case 195:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_UPPER);  }
	YY_BREAK
case 196:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USAGE);  }
	YY_BREAK
case 197:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_USING);  }
	YY_BREAK
case 198:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARBINARY);  }
	YY_BREAK
case 199:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARCHAR);  }
	YY_BREAK
case 200:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VARYING);  }
	YY_BREAK
case 201:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUE);  }
	YY_BREAK
case 202:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VALUES);  }
	YY_BREAK
case 203:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_VIEW);  }
	YY_BREAK
case 204:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WEEK);  }
	YY_BREAK
case 205:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHEN);  }
	YY_BREAK
case 206:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WHERE);  }
	YY_BREAK
case 207:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITH);  }
	YY_BREAK
case 208:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WITHIN);  }
	YY_BREAK
case 209:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_WORK);  }
	YY_BREAK
case 210:
YY_RULE_SETUP
{SQL_NEW_KEYWORD(SQL_TOKEN_YEAR);  }
	YY_BREAK
case 211:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESS);return SQL_LESS;}
	YY_BREAK
case 212:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREAT);return SQL_GREAT;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_EQUAL);return SQL_EQUAL;}
	YY_BREAK
case 214:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_LESSEQ);return SQL_LESSEQ;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_GREATEQ);return SQL_GREATEQ;}
	YY_BREAK
case 216:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 217:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_NOTEQUAL);return SQL_NOTEQUAL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
{ SQL_NEW_NODE(Utf8String(SQLyytext), SQL_NODE_CONCAT);return SQL_CONCAT;}
	YY_BREAK
case 219:
YY_RULE_SETUP
{ return SQLyytext[0]; }
	YY_BREAK
case 220:
YY_RULE_SETUP
{return gatherName( SQLyytext);}
	YY_BREAK
case 221:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 222:
case 223:
case 224:
case 225:
case 226:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 227:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 228:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 229:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
{SQL_NEW_INTNUM; }
	YY_BREAK
case 231:
case 232:
case 233:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 234:
case 235:
case 236:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 237:
case 238:
case 239:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 240:
case 241:
case 242:
YY_RULE_SETUP
{SQL_NEW_APPROXNUM;  }
	YY_BREAK
case 243:
YY_RULE_SETUP
{return gatherNamePre(SQLyytext);}
	YY_BREAK
case 244:
YY_RULE_SETUP
{ return gatherString('\"',0); }
	YY_BREAK
case 245:
YY_RULE_SETUP
{ return gatherString('`' ,0); }											 
	YY_BREAK
case 246:
YY_RULE_SETUP
{ return parseString(); }
	YY_BREAK
case 247:
YY_RULE_SETUP
{ return gatherString(']' , 0, true);}
	YY_BREAK
case 248:
YY_RULE_SETUP
{ return gatherString('#' ,2); }	
	YY_BREAK
case 249:
/* rule 249 can match eol */
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
{ SQL_NEW_DATE; }
	YY_BREAK
case 251:
YY_RULE_SETUP
{ return SQLyytext[0]; } /*  */
	YY_BREAK
case 252:
YY_RULE_SETUP
{ return gatherString(']' ,0, true); }
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
{ return gatherNamePre(SQLyytext); }
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
{}
	YY_BREAK
case 255:
YY_RULE_SETUP
{}
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up SQLyytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up SQLyytext again */
YY_RULE_SETUP
{}
	YY_BREAK
case 257:
YY_RULE_SETUP
{
				Utf8String tmp; 
				tmp.Sprintf("Invalid symbol (char=%c, hex=%0x, dec=%d)", SQLyytext[0], SQLyytext[0], SQLyytext[0]); 
				YY_FATAL_ERROR(tmp.c_str()); 
				return SQL_TOKEN_INVALIDSYMBOL;
				}
	YY_BREAK
case 258:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(PREDICATE_ENG):
case YY_STATE_EOF(PREDICATE_GER):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SQLyyin at a new source and called
			 * SQLyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = SQLyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( SQLyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * SQLyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SQLyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SQLyyrestart(SQLyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3616 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3616 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3615);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up SQLyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SQLyyrestart(SQLyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SQLyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve SQLyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SQLyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        SQLyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            SQLyy_create_buffer(SQLyyin,YY_BUF_SIZE );
	}

	SQLyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	SQLyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SQLyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SQLyypop_buffer_state();
	 *		SQLyypush_buffer_state(new_buffer);
     */
	SQLyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	SQLyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SQLyywrap()) processing, but the only time this flag
	 * is looked at is after SQLyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void SQLyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	SQLyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE SQLyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	SQLyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SQLyy_create_buffer()
 * 
 */
    void SQLyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLyyfree((void *) b->yy_ch_buf  );

	SQLyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SQLyyrestart() or at EOF.
 */
    static void SQLyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SQLyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then SQLyy_init_buffer was _probably_
     * called from SQLyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void SQLyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		SQLyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SQLyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SQLyyensure_buffer_stack();

	/* This block is copied from SQLyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SQLyy_switch_to_buffer. */
	SQLyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SQLyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	SQLyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		SQLyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SQLyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in SQLyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE SQLyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) SQLyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	SQLyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SQLyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SQLyy_scan_bytes() instead.
 */
YY_BUFFER_STATE SQLyy_scan_string (yyconst char * yystr )
{
    
	return SQLyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SQLyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE SQLyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) SQLyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in SQLyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = SQLyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in SQLyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up SQLyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		SQLyytext[SQLyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = SQLyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		SQLyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SQLyyget_lineno  (void)
{
        
    return SQLyylineno;
}

/** Get the input stream.
 * 
 */
FILE *SQLyyget_in  (void)
{
        return SQLyyin;
}

/** Get the output stream.
 * 
 */
FILE *SQLyyget_out  (void)
{
        return SQLyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t SQLyyget_leng  (void)
{
        return SQLyyleng;
}

/** Get the current token.
 * 
 */

char *SQLyyget_text  (void)
{
        return SQLyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SQLyyset_lineno (int  line_number )
{
    
    SQLyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SQLyy_switch_to_buffer
 */
void SQLyyset_in (FILE *  in_str )
{
        SQLyyin = in_str ;
}

void SQLyyset_out (FILE *  out_str )
{
        SQLyyout = out_str ;
}

int SQLyyget_debug  (void)
{
        return SQLyy_flex_debug;
}

void SQLyyset_debug (int  bdebug )
{
        SQLyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SQLyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    SQLyyin = stdin;
    SQLyyout = stdout;
#else
    SQLyyin = (FILE *) 0;
    SQLyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SQLyylex_init()
     */
    return 0;
}

/* SQLyylex_destroy is for both reentrant and non-reentrant scanners. */
int SQLyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		SQLyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		SQLyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	SQLyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SQLyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLyyfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

// Kludge around a bug (well, Posix incompatibility) in flex 2.5.x 
// http://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&bug=189332 
#if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5 
 
  #ifndef YY_FLUSH_BUFFER 
    #define YY_FLUSH_BUFFER SQLyy_flush_buffer(YY_CURRENT_BUFFER ) 
  #endif 
 
  #ifndef yytext_ptr 
    #define yytext_ptr SQLyytext 
  #endif 
 
#endif 

// Versions of flex apparently differ in whether input() resp. yyinput() returns
// zero or EOF upon end of file:
inline bool checkeof(int c) { return c == 0 || c == EOF || c == 0xff; }

sal_Int32 parseString ()
    {
    sal_Char ch;
    sal_Char delim = '\''; //'' ''
    Utf8StringBuffer sBuffer (256);

    int s = 1;
    while (!checkeof (ch = yyinput ()))
        {
        if (ch == delim)
            {
            s++;
            ch = yyinput ();
            if (checkeof (ch))
                {
                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            else if (ch == ' ')
                {
                ch = yyinput ();
                if (ch == delim)
                    {
                    sBuffer.append (delim);
                    }
                else
                    {
                    if (!checkeof (ch))
                        unput (ch);

                    SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                    return SQL_TOKEN_STRING;
                    }
                }
            else if (ch == delim)
                {
                continue;
                }
            else
                {
                if (!checkeof (ch))
                    unput (ch);

                SQL_NEW_NODE (sBuffer.makeStringAndClear (), SQL_NODE_STRING);
                return SQL_TOKEN_STRING;
                }
            }
        else
            {
            sBuffer.append (ch);
            }
        }

    YY_FATAL_ERROR ("Unterminated name string");
    return SQL_TOKEN_INVALIDSYMBOL;
    }

/*
 * Read SQL string literal
 * Valid strings:
 *	''	'a string'	'quote '' within string'
 *	""	"a string"	"quote "" within string"
 * nTyp == 0 -> SQL_NODE_NAME | SQL_NODE_ARRAY_INDEX
 * nTyp == 1 -> SQL_NODE_STRING
 * nTyp == 2 -> SQL_NODE_ACCESS_DATE
 */
sal_Int32 gatherString( sal_Char delim, sal_Int32 nTyp, bool checkForArrayIndex)
{
	sal_Char ch;
	Utf8StringBuffer sBuffer(256);

	while (!checkeof(ch = yyinput())) 
	{
		if (ch == delim) 
		{
			if ((ch = yyinput()) != delim) 
			{
				if (!checkeof(ch))
					unput(ch);
				
				switch(nTyp)
				{
					case 0:
						{
						bool isNumeric = checkForArrayIndex;
						if (checkForArrayIndex)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									continue;
								isNumeric = (isNumeric & (isdigit (sBuffer.charAt(i)) != 0));
								}
							}

						bool checkForSign = true;
						if(isNumeric)
							{
							for (size_t i = 0; i < sBuffer.size(); i++)
								{
								if (sBuffer.charAt(i) == '-' || sBuffer.charAt(i) == '+')
									{
									if (checkForSign)
										{
										if (sBuffer.charAt(i) == '-')
											{
											YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
											return SQL_TOKEN_INVALIDSYMBOL;
											}
										checkForSign = false;
										}
									else
										{
										YY_FATAL_ERROR("Invalid array index. Only positive integer is expected."); 
										return SQL_TOKEN_INVALIDSYMBOL;
										}
									}
								}
							}

						SQL_NEW_NODE(sBuffer.makeStringAndClear(), isNumeric ? SQL_NODE_ARRAY_INDEX : SQL_NODE_NAME);
						return isNumeric ? SQL_TOKEN_ARRAY_INDEX : SQL_TOKEN_NAME;
						}
					case 1:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_STRING);
						return SQL_TOKEN_STRING;
					case 2:
						SQL_NEW_NODE(sBuffer.makeStringAndClear(), SQL_NODE_ACCESS_DATE);
						return SQL_TOKEN_ACCESS_DATE;
				}				
			} 
			else
			{
			    sBuffer.append(ch);
			}

		} 
		else if (nTyp != 1 && (ch == '\r' || ch == '\n') )
			break;					
		else
		{
		    sBuffer.append(ch);
		}
	}
	YY_FATAL_ERROR("Unterminated name string"); 
	return SQL_TOKEN_INVALIDSYMBOL;
}

sal_Int32 mapEnumToToken(IParseContext::InternationalKeyCode _eKeyCode )
{
    sal_Int32 nTokenID = 0;
    switch( _eKeyCode )
    {
        case IParseContext::KEY_LIKE:       nTokenID = SQL_TOKEN_LIKE;      break;
        case IParseContext::KEY_NOT:        nTokenID = SQL_TOKEN_NOT;       break;
        case IParseContext::KEY_NULL:       nTokenID = SQL_TOKEN_NULL;      break;
        case IParseContext::KEY_TRUE:       nTokenID = SQL_TOKEN_TRUE;      break;
        case IParseContext::KEY_FALSE:      nTokenID = SQL_TOKEN_FALSE;     break;
        case IParseContext::KEY_IS:         nTokenID = SQL_TOKEN_IS;        break;
        case IParseContext::KEY_BETWEEN:    nTokenID = SQL_TOKEN_BETWEEN;   break;
        case IParseContext::KEY_OR:         nTokenID = SQL_TOKEN_OR;        break;
        case IParseContext::KEY_AND:        nTokenID = SQL_TOKEN_AND;       break;
        case IParseContext::KEY_AVG:        nTokenID = SQL_TOKEN_AVG;       break;
        case IParseContext::KEY_COUNT:      nTokenID = SQL_TOKEN_COUNT;     break;
        case IParseContext::KEY_MAX:        nTokenID = SQL_TOKEN_MAX;       break;
        case IParseContext::KEY_MIN:        nTokenID = SQL_TOKEN_MIN;       break;
        case IParseContext::KEY_SUM:        nTokenID = SQL_TOKEN_SUM;       break;
        case IParseContext::KEY_EVERY:      nTokenID = SQL_TOKEN_EVERY;     break;
        case IParseContext::KEY_ANY:        nTokenID = SQL_TOKEN_ANY;       break;
        case IParseContext::KEY_SOME:       nTokenID = SQL_TOKEN_SOME;      break;
        default:
            OSL_FAIL( "mapEnumToToken: unsupported key!" );
    }
    return nTokenID;
}
/*
 * Read SQL Name literal
 * Valid Names or international keywords:
 *  As we have international keywords, we test first on them
 */
sal_Int32 gatherName(const sal_Char* text)
{
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:    
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken); 
			break;
		default:
			SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
			return SQL_TOKEN_NAME;
	}
}
/**
 Read SQL Name literal for predicate check
 Valid Names or internatioanl keywords:
 As we have international keywords, we test first on them  
*/
sal_Int32 gatherNamePre(const sal_Char* text)
{ 
	sal_Int32 nToken;
	OSL_ENSURE(xxx_pGLOBAL_SQLSCAN,"You forgot to set the scanner!");
	IParseContext::InternationalKeyCode eKeyCode = xxx_pGLOBAL_SQLSCAN->getInternationalTokenID(text);
	switch (eKeyCode)
	{
		case IParseContext::KEY_LIKE:
		case IParseContext::KEY_NOT:
		case IParseContext::KEY_NULL:
		case IParseContext::KEY_TRUE:
		case IParseContext::KEY_FALSE:
		case IParseContext::KEY_IS:
		case IParseContext::KEY_BETWEEN:
		case IParseContext::KEY_OR:
		case IParseContext::KEY_AND:
		case IParseContext::KEY_COUNT:
		case IParseContext::KEY_AVG:
		case IParseContext::KEY_MAX:
		case IParseContext::KEY_MIN:
		case IParseContext::KEY_SUM:
        case IParseContext::KEY_EVERY:      
        case IParseContext::KEY_ANY:        
        case IParseContext::KEY_SOME:       
        case IParseContext::KEY_COLLECT:    
        case IParseContext::KEY_FUSION:     
        case IParseContext::KEY_INTERSECTION:
			nToken = mapEnumToToken(eKeyCode);
			SQL_NEW_KEYWORD(nToken);
			break;
		default:
		// we need a special handling for parameter
		{
			Utf8String sStmt = xxx_pGLOBAL_SQLSCAN->getStatement();
			size_t nLength = strlen(text);
			size_t nPos = xxx_pGLOBAL_SQLSCAN->GetCurrentPos() - nLength - 2;
			if (sStmt[nPos] == ':')
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_NAME); 
				nToken = SQL_TOKEN_NAME; 				
			}
			else
			{
				SQL_NEW_NODE(Utf8String(text), SQL_NODE_STRING);
				nToken = SQL_TOKEN_STRING;			
			}
		}
	}
	return nToken;
}

using namespace connectivity;

static bool IN_SQLyyerror;
//------------------------------------------------------------------------------
OSQLScanner::OSQLScanner()
			: m_nCurrentPos(0)
		    , m_bInternational(sal_False)
			, m_pContext(NULL)
			, m_nRule(0) // 0 is INITIAL
{
	IN_SQLyyerror = false;
}

//------------------------------------------------------------------------------
OSQLScanner::~OSQLScanner()
{
}
//------------------------------------------------------------------------------
void OSQLScanner::SQLyyerror(const char *fmt)
{

	if(IN_SQLyyerror)
		return;
	IN_SQLyyerror = true;

	OSL_ENSURE(m_pContext, "OSQLScanner::SQLyyerror: No Context set");	
	m_sErrorMessage = fmt;
	if (m_nCurrentPos < (sal_Int32)m_sStatement.size())
	{
		m_sErrorMessage.append(": ");
		
		Utf8String aError;
		static sal_Int32 BUFFERSIZE = 256;
		static sal_Char* Buffer = 0;
		if(!Buffer)
			Buffer = new sal_Char[BUFFERSIZE];

		sal_Char *s = Buffer;
		sal_Int32 nPos = 1;
		sal_Int32 ch = SQLyytext ? (SQLyytext[0] == 0 ? ' ' : SQLyytext[0]): ' ';
		*s++ = ch;
		while (!checkeof(ch = yyinput())) 
		{
			if (ch == ' ') 
			{
				if ((ch = yyinput()) != ' ') 
				{
					if (!checkeof(ch))
						unput(ch);
				}
				*s = '\0';
				aError.assign(Buffer);
				break;
			}
			else
			{
				*s++ = ch;
				if (++nPos == BUFFERSIZE)
				{
					Utf8String aBuf(Buffer);
					delete[] Buffer;
					BUFFERSIZE *=2;
					Buffer = new sal_Char[BUFFERSIZE];
                    for(sal_Int32 i=0;i< (sal_Int32)aBuf.size();++i,++Buffer)
						*Buffer = aBuf[i];
					s = &Buffer[nPos];
				}
			}
		}
		m_sErrorMessage += aError;
		delete[] Buffer;
		Buffer = NULL;
	}
	IN_SQLyyerror = false;
	YY_FLUSH_BUFFER;
}

//------------------------------------------------------------------------------
void OSQLScanner::prepareScan(const Utf8String & rNewStatement, const IParseContext* pContext, sal_Bool bInternational)
{
	YY_FLUSH_BUFFER;
	BEGIN(m_nRule);

	m_sErrorMessage = Utf8String();	
	m_sStatement	= rNewStatement;
	m_nCurrentPos	= 0;
	m_bInternational = bInternational;
	m_pContext		= pContext;
}

//------------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLyygetc(void)
{
	sal_Int32 nPos = (static_cast<size_t>(m_nCurrentPos) >= m_sStatement.size()) ? -1 : m_sStatement[m_nCurrentPos];
    m_nCurrentPos++;
    return nPos;
}

//------------------------------------------------------------------------------
IParseContext::InternationalKeyCode OSQLScanner::getInternationalTokenID(const sal_Char* sToken) const
{		
	OSL_ENSURE(m_pContext, "OSQLScanner::getInternationalTokenID: No Context set");			
	return (m_bInternational) ? m_pContext->getIntlKeyCode(Utf8String(sToken) ) : IParseContext::KEY_NONE;	
}
// -------------------------------------------------------------------------
sal_Int32	OSQLScanner::GetCurrentRule() const { return m_nRule; }
sal_Int32	OSQLScanner::GetGERRule() const		{ return PREDICATE_GER; }
sal_Int32	OSQLScanner::GetENGRule() const		{ return PREDICATE_ENG; }
sal_Int32	OSQLScanner::GetSQLRule() const		{ return SQL; }
sal_Int32	OSQLScanner::GetDATERule() const	{ return DATE; }
sal_Int32	OSQLScanner::GetSTRINGRule() const	{ return STRING; }
// -------------------------------------------------------------------------
void OSQLScanner::setScanner(sal_Bool _bNull)
{
	xxx_pGLOBAL_SQLSCAN = _bNull ? NULL : this;
}
// -------------------------------------------------------------------------
sal_Int32 OSQLScanner::SQLlex()
{
	return SQLyylex();
}

#if defined __SUNPRO_CC
#pragma enable_warn
#elif defined _MSC_VER
//#pragma warning(pop)
#endif

