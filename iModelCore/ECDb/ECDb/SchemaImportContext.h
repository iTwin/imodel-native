/*--------------------------------------------------------------------------------------+
|
|     $Source: ECDb/SchemaImportContext.h $
|
|  $Copyright: (c) 2015 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/
#pragma once
#include <ECDb/ECDbSchemaManager.h>
#include "ClassMap.h"
#include "ClassMapInfo.h"

BEGIN_BENTLEY_SQLITE_EC_NAMESPACE

struct ECDbSqlColumn;
enum class ColumnKind;
struct ECDbSqlIndex;

//=======================================================================================
// @bsiclass                                                Krischan.Eberle      05/2014
//+===============+===============+===============+===============+===============+======
struct SchemaImportContext
    {
public:
    struct IndexInfo
        {
    public:
        enum class Scope
            {
            Auto,
            EnforceTable,
            EnforceClass,
            EnforceClassAndSubclasses
            };

    private:
        bool m_isAutoGenerated;
        Scope m_scope;
        
    public:
        IndexInfo(bool isAutoGenerated, Scope scope) : m_isAutoGenerated(isAutoGenerated), m_scope(scope) {}
        bool IsAutoGenerated() const { return m_isAutoGenerated; }
        Scope GetScope() const { return m_scope; }
        };

private:
    mutable std::map<ECN::ECClassCP, std::unique_ptr<UserECDbMapStrategy>> m_userStrategyCache;
    mutable std::map<ECDbSqlColumn const*, bset<ColumnKind>> m_sharedColumnCache;
    mutable std::map<ECDbSqlIndex const*, IndexInfo> m_indexInfoCache;

    mutable std::vector<std::pair<ClassMap const*, std::unique_ptr<ClassMapInfo>>> m_classMapInfoCache;

    UserECDbMapStrategy* GetUserStrategyP(ECN::ECClassCR, ECN::ECDbClassMap const*) const;

public:
    SchemaImportContext () {}

    //! Gets the user map strategy for the specified ECClass.
    //! @return User map strategy. If the class doesn't have one a default strategy is returned. Only in 
    //! case of error, nullptr is returned
    UserECDbMapStrategy const* GetUserStrategy(ECN::ECClassCR, ECN::ECDbClassMap const* = nullptr) const;
    UserECDbMapStrategy* GetUserStrategyP(ECN::ECClassCR) const;

    void SetColumnIsShared(ECDbSqlColumn const& col, ColumnKind kind) const;
    bool IsColumnShared(ECDbSqlColumn const& col, ColumnKind kind) const;

    void AddIndexInfo(ECDbSqlIndex const& index, IndexInfo info) const;
    IndexInfo const* GetIndexInfo(ECDbSqlIndex const& index) const;

    void CacheClassMapInfo(ClassMap const&, std::unique_ptr<ClassMapInfo>&) const;
    std::vector<std::pair<ClassMap const*, std::unique_ptr<ClassMapInfo>>> const& GetClassMapInfoCache() const { return m_classMapInfoCache; }
    };

END_BENTLEY_SQLITE_EC_NAMESPACE