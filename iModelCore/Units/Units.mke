#--------------------------------------------------------------------------------------
#
#     $Source: Units.mke $
#
#  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
%include mdl.mki
%include $(SrcRoot)Units/mki/Units.mki
    
baseDir             = $(_MakeFilePath)
programName         = Units
srcDir              = $(baseDir)src/
o                   = $(OutBuildDir)Units/

#----------------------------------------------------------------------
# Create output directories
#----------------------------------------------------------------------
always:
    !~@mkdir $(o)

# Add the Private API directory.
dirToSearch     = $(baseDir)PrivateAPI/
%include cincapnd.mki
dirToSearch = 

# include the compile options mki file.
CompileOptionsMki   = $(baseDir)mki/UnitsCompileOpts.mki
%include $(CompileOptionsMki)

#--------------------------------------------------------------------------------
#  Bring our precompiled header up-to-date.  After including PreCompileHeader.mki
#  $(UsePrecompiledHeaderOptions) will contain the /Yu and /Fp options that we
#  need to consume the .pch.
#----------------------------------------------------------------------
PchCompiland        = $(unitsSrc)src\UnitsPch.cpp
PchOutputDir        = $(o)
%if defined (winNT) && $(BUILD_TOOLSET) == "GCC"
    # Compiling using gch causes internal compiler error in GCC using windows ndk toolchain
    GCC_NO_PRE_COMPILED_HEADER = 1
%endif
%include $(SharedMki)PreCompileHeader.mki

CCPchOpts           = $(UsePrecompiledHeaderOptions)
CPchOpts            = $(UsePrecompiledHeaderOptions)

#----------------------------------------------------------------------
# Prepare to multi-compile using a uniform set of dependency blocks.
# Note that you CANNOT change compiler options for just some of the
# below compilands. The entire set of compilands must be content with
# uniform treatment for multi-compilation to work.
#----------------------------------------------------------------------
MultiCompileDepends = $(_MakeFileSpec) 
%include MultiCppCompileRule.mki

#Units Compilands
$(o)UnitRegistry$(oext)      :  $(srcDir)UnitRegistry.cpp ${MultiCompileDepends}

$(o)UnitTypes$(oext)         :  $(srcDir)UnitTypes.cpp ${MultiCompileDepends}

$(o)Parser$(oext)            :  $(srcDir)Parser.cpp ${MultiCompileDepends}

$(o)UnitDefinitions$(oext)   :  $(srcDir)UnitDefinitions.cpp ${MultiCompileDepends}


%include MultiCppCompileGo.mki
cppObjects=%$(MultiCompileObjectList)
CCPchOpts =
CPchOpts =

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

#----------------------------------------------------------------------
#   dependencies of the subsystem.
#----------------------------------------------------------------------
DLM_NO_DLS                  = 1
DLM_NO_DEF                  = 1
DLM_NAME                    = $(appName)
DLM_DEST                    = $(o)
DLM_OBJECT_DEST             = $(o)
DLM_OBJECT_FILES            = $(cppObjects)
DLM_OBJECT_PCH              = $(o)UnitsPch$(oext)
DLM_EXPORT_OBJS             = $(cppObjects)
DLM_EXPORT_DEST             = $(o)
DLM_NOINITFUNC              = 1
DLM_NOMSBUILTINS            = 1
DLM_NOENTRY                 = 1
DLM_CONTEXT_LOCATION        = $(BuildContext)Delivery/
DLM_LIB_CONTEXT_LOCATION    = $(BuildContext)Delivery/
DLM_CREATE_LIB_CONTEXT_LINK = 1

%include $(sharedMki)linkLibrary.mki
                            