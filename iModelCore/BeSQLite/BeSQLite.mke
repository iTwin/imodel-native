#--------------------------------------------------------------------------------------
#
#     $Source: BeSQLite.mke $
#
#  $Copyright: (c) 2016 Bentley Systems, Incorporated. All rights reserved. $
#
#--------------------------------------------------------------------------------------
GCC_DEFAULT_VISIBILITY              = default
GCC_NOSTRICT                        = 1
HAVE_PERMISSION_TO_COMPILE_AT_W3    = 1

# disable checking of assignment to smaller data types. SQLite does this a lot.
# VERACODE - requires default runtime checks (e.g. cannot explicitly set any -RTC options).
%if !defined(IS_VERACODE_BUILD)
    VCRuntimeCheckOption = -RTCsu
%endif

%include mdl.mki

cDefs +% -D__BE_SQLITE_HOST_DLL__

%if $(TARGET_PLATFORM) == "WinRT"
    cDefs + -D__BE_SQLITE_WINRT__
%endif

baseDir                 = $(_MakeFilePath)
SQLiteDir               = $(baseDir)SQLite/
SubpartLibs             = $(BuildContext)SubParts/Libs/
o                       = $(OutBuildDir)BeSQLite/

# DLM_NAME, LIB_NAME, and CCompPDBName must all be the same.
appName                 = BeSQLite
CCompPDBName            = $(appName)

always:
    !~@mkdir $(o)

# Generate build version header (so we can embed as a property for diagnostic purposes).
%include $(SharedMki)CreateBuildVersionHeader.mki

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(o)BeSQLite$(oext)     : $(baseDir)BeSQLite.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h  $(baseDir)/PublicAPI/BeSQLite/DownloadAdmin.h ${MultiCompileDepends}

$(o)ChangeSet$(oext)     : $(baseDir)ChangeSet.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h  $(baseDir)/PublicAPI/BeSQLite/ChangeSet.h ${MultiCompileDepends}

$(o)BeSQLiteProfileManager$(oext) : $(baseDir)BeSQLiteProfileManager.cpp $(baseDir)/BeSQLiteProfileManager.h  $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h ${MultiCompileDepends}

$(o)DownloadVfs$(oext)  : $(SQLiteDir)DownloadVfs.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h $(baseDir)/PublicAPI/BeSQLite/DownloadAdmin.h ${MultiCompileDepends}

$(o)L10N$(oext)         : $(baseDir)L10N.cpp $(baseDir)/PublicAPI/BeSQLite/L10N.h ${MultiCompileDepends}

%include MultiCppCompileGo.mki
objs +% $(MultiCompileObjectList)

CCompFpOpts=precise

# Prefer to disable warnings in third-party code vs. editing it.
%if $(BUILD_TOOLSET) == "CLANG"
    OriginalLLVMCommonCompOpts =% $(LLVMCommonCompOpts)

    # Disables all warnings (and implicitly warnings as errors)
    LLVMCommonCompOpts + -w
%endif

$(o)SQLite$(oext): $(SQLiteDir)sqlite3-all.c $(SQLiteDir)sqlite3-1.c $(SQLiteDir)sqlite3-2.c $(SQLiteDir)sqlite3-3.c $(SQLiteDir)sqlite3-4.c \
            $(SQLiteDir)sqlite3-5.c $(SQLiteDir)closure.c 

%if $(BUILD_TOOLSET) == "CLANG"
    LLVMCommonCompOpts =% $(OriginalLLVMCommonCompOpts)
%endif

objs + $(o)SQLite$(oext)

BeSQLiteRequiredLibs = $(BuildContext)SubParts/Libs/$(stlibprefix)BeZlib$(stlibext)
BeSQLiteRequiredLibs + $(BuildContext)SubParts/Libs/$(stlibprefix)snappy$(stlibext)
BeSQLiteRequiredLibs + $(BuildContext)SubParts/Libs/$(stlibprefix)lzma$(stlibext)

DLM_OBJECT_FILES    = $(objs)
DLM_NAME            = $(appName)
DLM_DEST            = $(o)
DLM_EXPORT_DEST     = $(o)
DLM_NOINITFUNC      = 1
DLM_NOMSBUILTINS    = 1
DLM_NO_DEF          = 1
DLM_NO_DLS          = 1
DLM_NOENTRY         = 1
DLM_OBJECT_DEST     = $(o)
ASSEMBLY_STRONGNAME = 1

LINKER_LIBRARIES    =  $(BeSQLiteRequiredLibs)

# We support shared or static linking.
%include $(sharedMki)linkLibrary.mki

always:
    >$(o)BeSQLiteRequiredLibs.mki
    %if defined (CREATE_STATIC_LIBRARIES)
    BeSQLiteRequiredLibs = $(BeSQLiteRequiredLibs)
    %endif
    <

$(BuildContext)Delivery/mki/BeSQLiteRequiredLibs.mki : $(o)BeSQLiteRequiredLibs.mki
    $(LinkFirstDepToFirstTarget)

