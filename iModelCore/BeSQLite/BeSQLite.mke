#---------------------------------------------------------------------------------------------
#  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
#  See LICENSE.md in the repository root for full copyright notice.
#---------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------
#
# NOTES: If you think you need to edit this file:
#
# DO NOT PUT SQLite options in this file. They should ONLY be in bentley-sqlite.c!!!!
# DO NOT change compiler warning flags here. They should be in bentley-sqlite.c
# DO NOT edit the sqlite3 source files. They are generated during the build, and the original
# source comes from sqlite.org anyway.
#
#-----------------------------------------------------------------------------------

GCC_NOSTRICT = 1
HAVE_PERMISSION_TO_COMPILE_AT_W3 = 1
BUILD_WITH_C20=1

# VERACODE - requires default runtime checks (e.g. cannot explicitly set any -RTC options).
%if !defined(IS_VERACODE_BUILD)
    VCRuntimeCheckOption = -RTCsu
%endif

%include mdl.mki

cDefs +% -D__BE_SQLITE_HOST_DLL__

%if $(TARGET_PLATFORM) == "WinRT"
    cDefs + -D__BE_SQLITE_WINRT__
%endif

baseDir = $(_MakeFilePath)
SQLiteDir = $(baseDir)SQLite/
SubpartLibs = $(BuildContext)SubParts/Libs/
o = $(PartBuildDir)

# DLM_NAME, LIB_NAME, and CCompPDBName must all be the same.
appName = iTwinSQLite
CCompPDBName = $(appName)

always:
    !~@mkdir $(o)

# Generate build version header (so we can embed as a property for diagnostic purposes).
%include $(SharedMki)CreateBuildVersionHeader.mki

MultiCompileDepends=$(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(o)BeSQLite$(oext) : $(baseDir)BeSQLite.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h ${MultiCompileDepends}

$(o)ChangeSet$(oext) : $(baseDir)ChangeSet.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h  $(baseDir)/PublicAPI/BeSQLite/ChangeSet.h ${MultiCompileDepends}

$(o)CloudSqlite$(oext) : $(baseDir)CloudSqlite.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h  $(baseDir)/PublicAPI/BeSQLite/ChangeSet.h ${MultiCompileDepends}

$(o)ChangesetFile$(oext) : $(baseDir)ChangesetFile.cpp $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h  $(baseDir)/PublicAPI/BeSQLite/ChangesetFile.h ${MultiCompileDepends}

$(o)BeSQLiteProfileManager$(oext) : $(baseDir)BeSQLiteProfileManager.cpp $(baseDir)/BeSQLiteProfileManager.h  $(baseDir)/PublicAPI/BeSQLite/BeSQLite.h ${MultiCompileDepends}

$(o)Profiler$(oext) : $(baseDir)Profiler.cpp $(baseDir)/PublicAPI/BeSQLite/Profiler.h ${MultiCompileDepends}

$(o)VirtualTab$(oext) : $(baseDir)VirtualTab.cpp $(baseDir)/PublicAPI/BeSQLite/VirtualTab.h ${MultiCompileDepends}

$(o)BeLzma$(oext) : $(baseDir)BeLzma.cpp $(baseDir)/PublicAPI/BeSQLite/BeLzma.h ${MultiCompileDepends}

$(o)BeBriefcaseBasedIdSequence$(oext) : $(baseDir)BeBriefcaseBasedIdSequence.cpp $(baseDir)/PublicAPI/BeSQLite/BeBriefcaseBasedIdSequence.h ${MultiCompileDepends}

%include MultiCppCompileGo.mki
objs +% $(MultiCompileObjectList)

# Third-party section of this library.
CCompFpOpts=precise
%include $(sharedmki)PushThirdPartyIgnores.mki

bcvheaders = $(SQLiteDir)bcvutil.h $(SQLiteDir)bcvmodule.h $(SQLiteDir)bcv_int.h $(SQLiteDir)blockcachevfs.c $(SQLiteDir)blockcachevfs.h

$(o)bentley-sqlite$(oext) : $(SQLiteDir)bentley-sqlite.c ${MultiCompileDepends} ${bcvheaders}

$(o)bcvutil$(oext) : $(SQLiteDir)bcvutil.c ${MultiCompileDepends} ${bcvheaders}

$(o)bcvlog$(oext): $(SQLiteDir)bcvlog.c ${MultiCompileDepends} ${bcvheaders}

$(o)simplexml$(oext) : $(SQLiteDir)simplexml.c ${MultiCompileDepends} ${bcvheaders}

$(o)bcvmodule$(oext) : $(SQLiteDir)bcvmodule.c ${MultiCompileDepends} ${bcvheaders}

%include $(sharedmki)PopThirdPartyIgnores.mki

%include MultiCppCompileGo.mki

objs +% $(o)bentley-sqlite$(oext) $(o)bcvutil$(oext) $(o)bcvmodule$(oext) $(o)simplexml$(oext) $(o)bcvlog$(oext)

BeSQLiteRequiredLibs = $(ContextSubPartsStaticLibs)$(stlibprefix)BeZlib$(stlibext)
BeSQLiteRequiredLibs + $(ContextSubPartsStaticLibs)$(stlibprefix)snappy$(stlibext)
BeSQLiteRequiredLibs + $(ContextSubPartsStaticLibs)$(stlibprefix)lzma$(stlibext)
BeSQLiteRequiredLibs + $(ContextSubPartsLibs)$(libprefix)iTwinBentley$(libext)
BeSQLiteRequiredLibs + $(ContextSubPartsLibs)$(stlibprefix)iTwinCurl$(stlibext)
BeSQLiteRequiredLibs + $(ContextSubPartsLibs)$(stlibprefix)iTwinOpenSSL$(stlibext)
BeSQLiteRequiredLibs + $(ContextSubPartsLibs)$(stlibprefix)iTwin_google_re2$(stlibext)

DLM_OBJECT_FILES    = $(objs)
DLM_NAME            = $(appName)
DLM_DEST            = $(o)
DLM_EXPORT_DEST     = $(o)
DLM_NOINITFUNC      = 1
DLM_NOENTRY         = 1
DLM_OBJECT_DEST     = $(o)

%if $(TARGET_PLATFORM)=="Windows"
LINKER_LIBRARIES    =  $(BeSQLiteRequiredLibs) ws2_32.lib
%endif

# We support shared or static linking.
%include $(sharedMki)linkLibrary.mki
