#----------------------------------------------------------------------
#
#  Copyright (c) Bentley Systems, Incorporated. All rights reserved.
#
#----------------------------------------------------------------------
CLANG_ALLOW_UNDEFINED=1
%include mdl.mki

appName     = imodel-bank-licensing

# I get the impression that node addons names should be all lower case. At least, that's what I see out there.

baseDir     = $(_MakeFilePath)

commonDir   = $(baseDir)../common/
buildToolsDir = $(baseDir)../buildTools/

cDefs + -DBUILDING_NODE_EXTENSION -DEXTERNAL_NAPI

%if $(TARGET_PLATFORM) == "MacOS"
  cDefs + -D_DARWIN_USE_64_BIT_INODE=1
%endif

o = $(OutputRootDir)Build/imodel-bank-licensing/
always:
    !~@mkdir $(o)

#----------------------------------------------------------------------
#   Compile
#----------------------------------------------------------------------
#
# Burn the package version # into the code
#
PACKAGE_VERSION=$[@readfile $(baseDir)../package_version.txt]

$(o)package-version.h: $(baseDir)/package-version.h $(baseDir)/../package_version.txt
    $(msg)
    $(copyCmd) "$<" $@
    python $(buildToolsDir)makePackgeVersionHeaderFile.py $@ $(baseDir)/../package_version.txt
    ~time

cIncs + -I$(o)

# DLM_NAME and CCompPDBName must be the same.
CCompPDBName    =% $(appName)

MultiCompileDepends = $(_MakeFileSpec)
%include MultiCppCompileRule.mki

$(o)Licensing$(oext) : $(baseDir)Licensing.cpp $(commonDir)IModelBank.h ${MultiCompileDepends}

$(o)EntitlementChecker$(oext) : $(baseDir)EntitlementChecker.cpp $(baseDir)EntitlementChecker.h ${MultiCompileDepends}

$(o)IModelBankLoggingInterop$(oext) : $(commonDir)IModelBankLoggingInterop.cpp $(commonDir)IModelBank.h ${MultiCompileDepends}

$(o)DgnSqlFuncsForTriggers$(oext) : $(commonDir)DgnSqlFuncsForTriggers.cpp $(commonDir)DgnSqlFuncsForTriggers.h ${MultiCompileDepends}

$(o)NativeSQLiteDb$(oext) : $(commonDir)NativeSQLiteDb.cpp $(commonDir)NativeSQLiteDb.h ${MultiCompileDepends}

$(o)NativeSQLiteStatement$(oext) : $(commonDir)NativeSQLiteStatement.cpp $(commonDir)NativeSQLiteStatement.h ${MultiCompileDepends}

$(o)ConversionUtils$(oext) : $(commonDir)ConversionUtils.cpp $(commonDir)ConversionUtils.h ${MultiCompileDepends}

%include MultiCppCompileGo.mki

#----------------------------------------------------------------------
#   Link the shared library (.node) file
#----------------------------------------------------------------------
# DLM_NAME and CCompPDBName must be the same.
DLM_NAME            =% $(appName)
DLM_DEST            = $(o)
DLM_OBJECT_DEST     = $(o)
DLM_OBJECT_FILES    = $(MultiCompileObjectList)
DLM_NOENTRY         = 1
DLM_NO_CONTEXT_LINK = 1

%ifdef __unix
    lx = $(stlibext)
%else
    lx = $(libext)
%endif

LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)Bentley$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BeJsonCpp$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BeSQLite$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BeIcu4c$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BentleyGeom$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)Licensing$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)WebServicesClient$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BeHttp$(lx)
LIC_ADDON_LIBS +  $(ContextSubpartsLibs)$(libprefix)BeOpenSSL$(lx)
LIC_ADDON_LIBS +  $(ContextSubPartsStaticLibs)$(stlibprefix)snappy$(stlibext)
LIC_ADDON_LIBS +  $(ContextSubPartsStaticLibs)$(stlibprefix)BeZlib$(stlibext)
LIC_ADDON_LIBS +  $(ContextSubPartsStaticLibs)$(stlibprefix)lzma$(stlibext)

%ifdef __unix

    THIN_ARCHIVE_INPUTS = $(LIC_ADDON_LIBS)

    THIN_ARCHIVE_NAME = libIModelBank.inputs.a

    %include $(sharedMki)rollUpSubPartsLibsThin.mki

    DLM_OBJECT_FILES + $(THIN_ARCHIVE_PATH)

    %ifdef __apple
        # OSX Specific library
        LINKER_LIBRARIES  + -framework CoreFoundation
        LINKER_LIBRARIES  + -framework CFNetwork
        BENTLEY_TOOLCONTEXT_LINK_OUT_NAME = $(DLM_OUT_NAME)
    %endif

    # Always produce a .SO (even though this is a static build)
    %undef CREATE_STATIC_LIBRARIES
    %include dlmlink.mki

%else

    DLM_OBJECT_FILES  + $(LIC_ADDON_LIBS)

    DLM_SPECIAL_LINKOPT = -delayload:node.exe
    LINKER_LIBRARIES = DelayImp.lib $(BuildContext)SubParts\nodelib\node.lib

    # Always produce a .SO (even though this is a static build)
    %undef CREATE_STATIC_LIBRARIES
    %include dlmlink.mki

%endif

#----------------------------------------------------------------------
#   Deliver the shared library using the .node extension
#----------------------------------------------------------------------
$(BuildContext)Delivery/imodel-bank-licensing/imodel-bank-licensing.node : $(BENTLEY_TOOLCONTEXT_LINK_OUT_NAME)
    $(LinkFirstDepToFirstTarget)

#----------------------------------------------------------------------
#   Extract xliffs
#----------------------------------------------------------------------
SQLANG_CHeader      = $(baseDir)licensing.messages.h
SQLANG_Xliff        = $(o)xliffs/licensing.l10n.xliff

%include $(sharedMki)CHeaderToXliff.mki
