/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See COPYRIGHT.md in the repository root for full copyright notice.
*--------------------------------------------------------------------------------------------*/
#pragma once

#ifndef UNICODE
    #define UNICODE
#endif

#include <LinearReferencing/LinearReferencingApi.h>
#include <RoadRailAlignment/RoadRailAlignmentApi.h>
#include <RoadRailPhysical/RoadRailPhysicalApi.h>
#include "../C3dImporter.h"

#include <Bentley/BeTest.h>
#include <wininet.h>

#define ASSERT_PRESENT(fileName)        ASSERT_TRUE ( BentleyApi::BeFileName::DoesPathExist (fileName))<<L"File is not present at location :"<<fileName;
#define ASSERT_NOT_PRESENT(fileName)    ASSERT_FALSE( BentleyApi::BeFileName::DoesPathExist (fileName))<<L"File should not be present at location :"<<fileName;
#define EXPECT_PRESENT(fileName)        EXPECT_TRUE ( BentleyApi::BeFileName::DoesPathExist (fileName))<<L"File is not present at location :"<<fileName;
#define EXPECT_NOT_PRESENT(fileName)    EXPECT_FALSE( BentleyApi::BeFileName::DoesPathExist (fileName))<<L"File should not be present at location :"<<fileName;

#define ASSERT_SUCCESS(value)           ASSERT_EQ(SUCCESS,value)
#define ASSERT_NOT_SUCCESS(value)       ASSERT_NE(SUCCESS,value)
#define EXPECT_SUCCESS(value)           EXPECT_EQ(SUCCESS,value)
#define EXPECT_NOT_SUCCESS(value)       EXPECT_NE(SUCCESS,value)

#define ASSERT_DGNDBSUCCESS(value)      ASSERT_EQ (DgnDbStatus::Success,value)
#define EXPECT_DGNDBSUCCESS(value)      EXPECT_EQ (DgnDbStatus::Success,value)
#define ASSERT_DWGDBSUCCESS(value)      ASSERT_EQ (DwgDbStatus::Success,value)
#define EXPECT_DWGDBSUCCESS(value)      EXPECT_EQ (DwgDbStatus::Success,value)

#define ASSERT_NULL(statement)          ASSERT_TRUE (NULL == statement)
#define ASSERT_NOT_NULL(statement)      ASSERT_TRUE (NULL != statement)
#define EXPECT_NULL(statement)          EXPECT_TRUE (NULL == statement)
#define EXPECT_NOT_NULL(statement)      EXPECT_TRUE (NULL != statement)

USING_NAMESPACE_BENTLEY
USING_NAMESPACE_BENTLEY_DGN
USING_NAMESPACE_BENTLEY_SQLITE
USING_NAMESPACE_C3D

//=======================================================================================
// @bsiclass                                    Sam.Wilson                      04/15
//=======================================================================================
struct C3dImporterTestsHost : DgnPlatformLib::Host
{
protected:
    virtual void _SupplyProductName (Utf8StringR name) override {name.assign("C3dImporterTests");}
    virtual IKnownLocationsAdmin& _SupplyIKnownLocationsAdmin() override;
    //virtual NotificationAdmin& _SupplyNotificationAdmin() override;
    virtual BeSQLite::L10N::SqlangFiles _SupplySqlangFiles() override;
    // Allow view attachments included in thumbnails generated by the importer:
    bool _IsFeatureEnabled(Utf8CP feature) override {return 0 == strcmp(feature, "Platform.RenderViewAttachments");}
};

/*=================================================================================**//**
* @bsiclass                                                     Don.Fu          12/19
+===============+===============+===============+===============+===============+======*/
struct C3dImporterTests : public ::testing::Test
{
public:
    static C3dImporterTestsHost s_testsHost;
    static WString  s_c3dBridgeRegistryKey;

    static void SetUpTestCase();
    static void TearDownTestCase();

    static WString GetDataSourcePath();
    static BeFileName GetInputFileName(WCharCP filename);
    static BeFileName GetOutputFileName(WCharCP filename);
    static void MakeWritableCopyOf(BeFileName& outFile, WCharCP filename);
    static void MakeWritableCopyOf(BeFileName& fnoutFile, BeFileNameCR inputFileName, WCharCP filename);
    static BeFileName GetOutputDir();
    static WString GetOutRoot();
    static BeFileName GetDgnDbFileName(BeFileName& inFile);
    static Utf8String BuildModelspaceModelname (BeFileNameCR dwgFilename);
    static void DeleteExistingDgnDb(BeFileNameCR);
    static DgnDbPtr OpenExistingDgnDb(BeFileNameCR projectName, DgnDb::OpenMode mode = DgnDb::OpenMode::ReadWrite);
};  // C3dImporterTests
